#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
type IOsEnviron = abstract environ: x: unit -> obj
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
    | US4_6 of f6_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : Mut0 * f0_1 : Mut1 * f0_2 : Mut2 * f0_3 : Mut3 * f0_4 : Mut4 * f0_5 : int64 option
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : std_string_String
    | US8_1
and [<Struct>] US11 =
    | US11_0
    | US11_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : US11
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US12 =
    | US12_0 of f0_0 : Vec<std_string_String>
    | US12_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US13 =
    | US13_0
    | US13_1
and [<Struct>] US14 =
    | US14_0 of f0_0 : string
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1 of f1_0 : string
and [<Struct>] US16 =
    | US16_0 of f0_0 : std_path_PathBuf
    | US16_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US17 =
    | US17_0
    | US17_1 of f1_0 : std_string_String
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : US5
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH1
and [<Struct>] US20 =
    | US20_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : char
    | US21_1
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US21 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US25_1 of f1_0 : string
and [<Struct>] US26 =
    | US26_0 of f0_0 : (string [])
    | US26_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US27 =
    | US27_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US27_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) * UH3
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US28_1 of f1_0 : std_string_String
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US29_1
and [<Struct>] US30 =
    | US30_0 of f0_0 : std_string_String
    | US30_1 of f1_0 : std_string_String
and [<Struct>] US31 =
    | US31_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : std_process_Output
    | US33_1 of f1_0 : std_string_String
and [<Struct>] US34 =
    | US34_0 of f0_0 : int32
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : US5
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US39 =
    | US39_0
    | US39_1 of f1_0 : string
and [<Struct>] US41 =
    | US41_0 of f0_0 : string
    | US41_1 of f1_0 : string
and [<Struct>] US40 =
    | US40_0 of f0_0 : US41
    | US40_1
and [<Struct>] US42 =
    | US42_0
    | US42_1
    | US42_2
and [<Struct>] US43 =
    | US43_0 of f0_0 : US42
    | US43_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US44 =
    | US44_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US44_1
and [<Struct>] US45 =
    | US45_0 of f0_0 : int32 * f0_1 : string
    | US45_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US46 =
    | US46_0 of f0_0 : std_collections_HashMap<string, string>
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0 of f0_0 : std_fs_FileType
    | US47_1 of f1_0 : std_string_String
and [<Struct>] US48 =
    | US48_0
    | US48_1
    | US48_2
and [<Struct>] US49 =
    | US49_0 of f0_0 : async_walkdir_DirEntry
    | US49_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0 of f0_0 : string * f0_1 : string
    | US50_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v87 : (string list -> (string [])) = List.toArray
    let v88 : (string []) = v87 v80
    let v91 : string = "$0.to_vec()"
    let v92 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v88 v91 
    let v93 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v94 : bool = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "x"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    (* run_target_args'
    let v137 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v138 : string = "String::from($0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v138 
    let _run_target_args'_v137 = v139 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v140 : string = "String::from($0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v140 
    let _run_target_args'_v137 = v141 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v142 : string = "String::from($0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v142 
    let _run_target_args'_v137 = v143 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v145 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v145 
    #endif
#if FABLE_COMPILER_PYTHON
    let v149 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v149 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v153 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v153 
    #endif
#else
    let v157 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v157 
    #endif
    let v160 : std_string_String = _run_target_args'_v137 
    let v169 : string = "Box::new($0)"
    let v170 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v160 v169 
    let v171 : string = "Box::leak($0)"
    let v172 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v170 v171 
    let v173 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v174 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let v175 : string = "true; $0 }).collect::<Vec<_>>()"
    let v176 : bool = Fable.Core.RustInterop.emitRustExpr v174 v175 
    let v177 : string = "_vec_map"
    let v178 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v177 
    let v179 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v180 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : string = "$0.value_parser($1)"
    let v182 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v180) v181 
    let v183 : string = "clap::Command::arg($0, $1)"
    let v184 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v182) v183 
    let v185 : string = "NAME"
    let v186 : string = "r#\"" + v185 + "\"#"
    let v187 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "VERSION"
    let v189 : string = "r#\"" + v188 + "\"#"
    let v190 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v189 
    let v191 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v187; v190|]
    let v193 : unativeint = 1 |> unativeint 
    let v197 : unativeint = 0 |> unativeint 
    let v201 : unativeint = 0 |> unativeint 
    let v205 : bool = v197 = v201 
    let v213 : clap_builder_ValueRange =
        if v205 then
            let v208 : string = "clap::builder::ValueRange::new($0..)"
            let v209 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v193 v208 
            v209
        else
            let v210 : string = ""
            let v211 : string = "clap::builder::ValueRange::new($0.." + v210 + "$1)"
            let v212 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v193, v197) v211 
            v212
    let v214 : string = "deps"
    let v215 : string = "r#\"" + v214 + "\"#"
    let v216 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v215 
    let v217 : string = "clap::Arg::new($0)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v216 v217 
    let v219 : string = "$0.short($1)"
    let v220 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v218, 'd') v219 
    let v221 : string = "r#\"" + v214 + "\"#"
    let v222 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v221 
    let v223 : string = "$0.long($1)"
    let v224 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v220, v222) v223 
    let v225 : string = "$0.to_vec()"
    let v226 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v191 v225 
    let v227 : string = "$0.value_names($1)"
    let v228 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v224, v226) v227 
    let v229 : string = "$0.num_args($1)"
    let v230 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v228, v213) v229 
    let v231 : string = "clap::ArgAction::Append"
    let v232 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v231 
    let v233 : string = "$0.action($1)"
    let v234 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v230, v232) v233 
    let v235 : string = "clap::Command::arg($0, $1)"
    let v236 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v184, v234) v235 
    let v237 : string = "clap::Command::subcommand($0, v236)"
    let v238 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v237 
    let v239 : string = "cuda"
    let v240 : string = "r#\"" + v239 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : string = "clap::Command::new($0)"
    let v243 : clap_Command = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : string = "py-path"
    let v245 : string = "r#\"" + v244 + "\"#"
    let v246 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v245 
    let v247 : string = "clap::Arg::new($0)"
    let v248 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v246 v247 
    let v249 : string = "$0.short($1)"
    let v250 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v248, 'p') v249 
    let v251 : string = "r#\"" + v244 + "\"#"
    let v252 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "$0.long($1)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v250, v252) v253 
    let v255 : string = "$0.required($1)"
    let v256 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, true) v255 
    let v257 : string = "clap::Command::arg($0, $1)"
    let v258 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v243, v256) v257 
    let v259 : string = "env"
    let v260 : string = "r#\"" + v259 + "\"#"
    let v261 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v260 
    let v262 : string = "clap::Arg::new($0)"
    let v263 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v261 v262 
    let v264 : string = "$0.short($1)"
    let v265 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v263, 'e') v264 
    let v266 : string = "r#\"" + v259 + "\"#"
    let v267 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v266 
    let v268 : string = "$0.long($1)"
    let v269 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v265, v267) v268 
    
    
    let v272 : string = "Poetry"
    let v273 : (unit -> string) = v272.ToLower
    let v274 : string = v273 ()
    let v279 : string = "Pip"
    let v280 : (unit -> string) = v279.ToLower
    let v281 : string = v280 ()
    let v284 : string list = []
    let v286 : string list = v274 :: v284 
    let v290 : string list = v281 :: v286 
    let v297 : (string list -> (string [])) = List.toArray
    let v298 : (string []) = v297 v290
    let v301 : string = "$0.to_vec()"
    let v302 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v298 v301 
    let v303 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
    let v305 : string = "x"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr () v305 
    (* run_target_args'
    let v311 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v312 : string = "&*$0"
    let v313 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v312 
    let _run_target_args'_v311 = v313 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v314 : string = "&*$0"
    let v315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v314 
    let _run_target_args'_v311 = v315 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v316 : string = "&*$0"
    let v317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v316 
    let _run_target_args'_v311 = v317 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v319 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v319 
    #endif
#if FABLE_COMPILER_PYTHON
    let v323 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v323 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v327 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v327 
    #endif
#else
    let v331 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v331 
    #endif
    let v334 : Ref<Str> = _run_target_args'_v311 
    (* run_target_args'
    let v347 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v348 : string = "String::from($0)"
    let v349 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v348 
    let _run_target_args'_v347 = v349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v350 : string = "String::from($0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v350 
    let _run_target_args'_v347 = v351 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v352 : string = "String::from($0)"
    let v353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v352 
    let _run_target_args'_v347 = v353 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v355 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v355 
    #endif
#if FABLE_COMPILER_PYTHON
    let v359 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v359 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v363 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v363 
    #endif
#else
    let v367 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v367 
    #endif
    let v370 : std_string_String = _run_target_args'_v347 
    let v379 : string = "Box::new($0)"
    let v380 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v370 v379 
    let v381 : string = "Box::leak($0)"
    let v382 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v384 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v382 v383 
    let v385 : string = "true; $0 }).collect::<Vec<_>>()"
    let v386 : bool = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let v387 : string = "_vec_map"
    let v388 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v387 
    let v389 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v390 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let v391 : string = "$0.value_parser($1)"
    let v392 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v269, v390) v391 
    let v393 : string = "clap::Command::arg($0, $1)"
    let v394 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v258, v392) v393 
    let v395 : string = "r#\"" + v185 + "\"#"
    let v396 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v395 
    let v397 : string = "r#\"" + v188 + "\"#"
    let v398 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v397 
    let v399 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v396; v398|]
    let v401 : unativeint = 1 |> unativeint 
    let v405 : unativeint = 0 |> unativeint 
    let v409 : unativeint = 0 |> unativeint 
    let v413 : bool = v405 = v409 
    let v421 : clap_builder_ValueRange =
        if v413 then
            let v416 : string = "clap::builder::ValueRange::new($0..)"
            let v417 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v401 v416 
            v417
        else
            let v418 : string = ""
            let v419 : string = "clap::builder::ValueRange::new($0.." + v418 + "$1)"
            let v420 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v401, v405) v419 
            v420
    let v422 : string = "r#\"" + v214 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "clap::Arg::new($0)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v423 v424 
    let v426 : string = "$0.short($1)"
    let v427 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, 'd') v426 
    let v428 : string = "r#\"" + v214 + "\"#"
    let v429 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v428 
    let v430 : string = "$0.long($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v427, v429) v430 
    let v432 : string = "$0.to_vec()"
    let v433 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v399 v432 
    let v434 : string = "$0.value_names($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "$0.num_args($1)"
    let v437 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v435, v421) v436 
    let v438 : string = "clap::ArgAction::Append"
    let v439 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v438 
    let v440 : string = "$0.action($1)"
    let v441 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v437, v439) v440 
    let v442 : string = "clap::Command::arg($0, $1)"
    let v443 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v394, v441) v442 
    let v444 : string = "clap::Command::subcommand($0, v443)"
    let v445 : clap_Command = Fable.Core.RustInterop.emitRustExpr v238 v444 
    let v446 : string = "fable"
    let v447 : string = "r#\"" + v446 + "\"#"
    let v448 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v447 
    let v449 : string = "clap::Command::new($0)"
    let v450 : clap_Command = Fable.Core.RustInterop.emitRustExpr v448 v449 
    let v451 : string = "fs-path"
    let v452 : string = "r#\"" + v451 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "clap::Arg::new($0)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v453 v454 
    let v456 : string = "$0.short($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, 'f') v456 
    let v458 : string = "r#\"" + v451 + "\"#"
    let v459 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v458 
    let v460 : string = "$0.long($1)"
    let v461 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v457, v459) v460 
    let v462 : string = "$0.required($1)"
    let v463 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v461, true) v462 
    let v464 : string = "clap::Command::arg($0, $1)"
    let v465 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v450, v463) v464 
    let v466 : string = "r#\"" + v0 + "\"#"
    let v467 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v466 
    let v468 : string = "clap::Arg::new($0)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v467 v468 
    let v470 : string = "$0.short($1)"
    let v471 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, 'c') v470 
    let v472 : string = "r#\"" + v0 + "\"#"
    let v473 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v472 
    let v474 : string = "$0.long($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v471, v473) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v465, v475) v476 
    let v478 : string = "clap::Command::subcommand($0, v477)"
    let v479 : clap_Command = Fable.Core.RustInterop.emitRustExpr v445 v478 
    let v480 : string = "rust"
    let v481 : string = "r#\"" + v480 + "\"#"
    let v482 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "clap::Command::new($0)"
    let v484 : clap_Command = Fable.Core.RustInterop.emitRustExpr v482 v483 
    let v485 : string = "r#\"" + v451 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "clap::Arg::new($0)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v486 v487 
    let v489 : string = "$0.short($1)"
    let v490 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, 'f') v489 
    let v491 : string = "r#\"" + v451 + "\"#"
    let v492 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v491 
    let v493 : string = "$0.long($1)"
    let v494 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v490, v492) v493 
    let v495 : string = "$0.required($1)"
    let v496 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v494, true) v495 
    let v497 : string = "clap::Command::arg($0, $1)"
    let v498 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v484, v496) v497 
    let v499 : string = "r#\"" + v185 + "\"#"
    let v500 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v499 
    let v501 : string = "r#\"" + v188 + "\"#"
    let v502 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v501 
    let v503 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v500; v502|]
    let v505 : unativeint = 1 |> unativeint 
    let v509 : unativeint = 0 |> unativeint 
    let v513 : unativeint = 0 |> unativeint 
    let v517 : bool = v509 = v513 
    let v525 : clap_builder_ValueRange =
        if v517 then
            let v520 : string = "clap::builder::ValueRange::new($0..)"
            let v521 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v505 v520 
            v521
        else
            let v522 : string = ""
            let v523 : string = "clap::builder::ValueRange::new($0.." + v522 + "$1)"
            let v524 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v505, v509) v523 
            v524
    let v526 : string = "r#\"" + v214 + "\"#"
    let v527 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v526 
    let v528 : string = "clap::Arg::new($0)"
    let v529 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v527 v528 
    let v530 : string = "$0.short($1)"
    let v531 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v529, 'd') v530 
    let v532 : string = "r#\"" + v214 + "\"#"
    let v533 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v532 
    let v534 : string = "$0.long($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v531, v533) v534 
    let v536 : string = "$0.to_vec()"
    let v537 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v503 v536 
    let v538 : string = "$0.value_names($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "$0.num_args($1)"
    let v541 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v539, v525) v540 
    let v542 : string = "clap::ArgAction::Append"
    let v543 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v542 
    let v544 : string = "$0.action($1)"
    let v545 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v541, v543) v544 
    let v546 : string = "clap::Command::arg($0, $1)"
    let v547 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v498, v545) v546 
    let v549 : unativeint = 0 |> unativeint 
    let v553 : unativeint = 1 |> unativeint 
    let v557 : unativeint = 0 |> unativeint 
    let v561 : bool = v553 = v557 
    let v569 : clap_builder_ValueRange =
        if v561 then
            let v564 : string = "clap::builder::ValueRange::new($0..)"
            let v565 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v549 v564 
            v565
        else
            let v566 : string = "="
            let v567 : string = "clap::builder::ValueRange::new($0.." + v566 + "$1)"
            let v568 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v549, v553) v567 
            v568
    let v570 : string = "wasm"
    let v571 : string = "r#\"" + v570 + "\"#"
    let v572 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v571 
    let v573 : string = "clap::Arg::new($0)"
    let v574 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v572 v573 
    let v575 : string = "$0.short($1)"
    let v576 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v574, 'w') v575 
    let v577 : string = "r#\"" + v570 + "\"#"
    let v578 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v577 
    let v579 : string = "$0.long($1)"
    let v580 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v576, v578) v579 
    let v581 : string = "$0.num_args($1)"
    let v582 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v580, v569) v581 
    let v583 : string = "$0.require_equals($1)"
    let v584 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v582, true) v583 
    let v585 : string = ""
    let v586 : string = "r#\"" + v585 + "\"#"
    let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
    let v588 : string = "$0.default_missing_value($1)"
    let v589 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v584, v587) v588 
    let v590 : string = "clap::Command::arg($0, $1)"
    let v591 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v547, v589) v590 
    let v593 : unativeint = 0 |> unativeint 
    let v597 : unativeint = 1 |> unativeint 
    let v601 : unativeint = 0 |> unativeint 
    let v605 : bool = v597 = v601 
    let v613 : clap_builder_ValueRange =
        if v605 then
            let v608 : string = "clap::builder::ValueRange::new($0..)"
            let v609 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v593 v608 
            v609
        else
            let v610 : string = "="
            let v611 : string = "clap::builder::ValueRange::new($0.." + v610 + "$1)"
            let v612 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v593, v597) v611 
            v612
    let v614 : string = "contract"
    let v615 : string = "r#\"" + v614 + "\"#"
    let v616 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v615 
    let v617 : string = "clap::Arg::new($0)"
    let v618 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v616 v617 
    let v619 : string = "$0.short($1)"
    let v620 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v618, 'c') v619 
    let v621 : string = "r#\"" + v614 + "\"#"
    let v622 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v621 
    let v623 : string = "$0.long($1)"
    let v624 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v620, v622) v623 
    let v625 : string = "$0.num_args($1)"
    let v626 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v624, v613) v625 
    let v627 : string = "$0.require_equals($1)"
    let v628 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v626, true) v627 
    let v629 : string = "r#\"" + v585 + "\"#"
    let v630 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.default_missing_value($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v628, v630) v631 
    let v633 : string = "clap::Command::arg($0, $1)"
    let v634 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v591, v632) v633 
    let v635 : string = "cleanup"
    let v636 : string = "r#\"" + v635 + "\"#"
    let v637 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v636 
    let v638 : string = "clap::Arg::new($0)"
    let v639 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v637 v638 
    let v640 : string = "$0.short($1)"
    let v641 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v639, 'l') v640 
    let v642 : string = "r#\"" + v635 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "$0.long($1)"
    let v645 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v641, v643) v644 
    let v646 : string = "true"
    let v647 : string = "r#\"" + v646 + "\"#"
    let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v647 
    let v649 : string = "$0.default_value($1)"
    let v650 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v645, v648) v649 
    let v651 : string = "clap::ArgAction::SetFalse"
    let v652 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v651 
    let v653 : string = "$0.action($1)"
    let v654 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v650, v652) v653 
    let v655 : string = "clap::Command::arg($0, $1)"
    let v656 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v634, v654) v655 
    let v657 : string = "clap::Command::subcommand($0, v656)"
    let v658 : clap_Command = Fable.Core.RustInterop.emitRustExpr v479 v657 
    let v659 : string = "typescript"
    let v660 : string = "r#\"" + v659 + "\"#"
    let v661 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v660 
    let v662 : string = "clap::Command::new($0)"
    let v663 : clap_Command = Fable.Core.RustInterop.emitRustExpr v661 v662 
    let v664 : string = "r#\"" + v451 + "\"#"
    let v665 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v664 
    let v666 : string = "clap::Arg::new($0)"
    let v667 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v665 v666 
    let v668 : string = "$0.short($1)"
    let v669 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v667, 'f') v668 
    let v670 : string = "r#\"" + v451 + "\"#"
    let v671 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v670 
    let v672 : string = "$0.long($1)"
    let v673 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v669, v671) v672 
    let v674 : string = "$0.required($1)"
    let v675 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v673, true) v674 
    let v676 : string = "clap::Command::arg($0, $1)"
    let v677 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v663, v675) v676 
    let v678 : string = "r#\"" + v185 + "\"#"
    let v679 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v678 
    let v680 : string = "r#\"" + v188 + "\"#"
    let v681 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v680 
    let v682 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v679; v681|]
    let v684 : unativeint = 1 |> unativeint 
    let v688 : unativeint = 0 |> unativeint 
    let v692 : unativeint = 0 |> unativeint 
    let v696 : bool = v688 = v692 
    let v703 : clap_builder_ValueRange =
        if v696 then
            let v699 : string = "clap::builder::ValueRange::new($0..)"
            let v700 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v684 v699 
            v700
        else
            let v701 : string = "clap::builder::ValueRange::new($0.." + v585 + "$1)"
            let v702 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v684, v688) v701 
            v702
    let v704 : string = "r#\"" + v214 + "\"#"
    let v705 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v704 
    let v706 : string = "clap::Arg::new($0)"
    let v707 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v705 v706 
    let v708 : string = "$0.short($1)"
    let v709 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v707, 'd') v708 
    let v710 : string = "r#\"" + v214 + "\"#"
    let v711 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v710 
    let v712 : string = "$0.long($1)"
    let v713 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v709, v711) v712 
    let v714 : string = "$0.to_vec()"
    let v715 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v682 v714 
    let v716 : string = "$0.value_names($1)"
    let v717 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v713, v715) v716 
    let v718 : string = "$0.num_args($1)"
    let v719 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v717, v703) v718 
    let v720 : string = "clap::ArgAction::Append"
    let v721 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v720 
    let v722 : string = "$0.action($1)"
    let v723 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v719, v721) v722 
    let v724 : string = "clap::Command::arg($0, $1)"
    let v725 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v677, v723) v724 
    let v726 : string = "clap::Command::subcommand($0, v725)"
    let v727 : clap_Command = Fable.Core.RustInterop.emitRustExpr v658 v726 
    let v728 : string = "python"
    let v729 : string = "r#\"" + v728 + "\"#"
    let v730 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "clap::Command::new($0)"
    let v732 : clap_Command = Fable.Core.RustInterop.emitRustExpr v730 v731 
    let v733 : string = "r#\"" + v451 + "\"#"
    let v734 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v733 
    let v735 : string = "clap::Arg::new($0)"
    let v736 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v734 v735 
    let v737 : string = "$0.short($1)"
    let v738 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v736, 'f') v737 
    let v739 : string = "r#\"" + v451 + "\"#"
    let v740 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v739 
    let v741 : string = "$0.long($1)"
    let v742 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v738, v740) v741 
    let v743 : string = "$0.required($1)"
    let v744 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v742, true) v743 
    let v745 : string = "clap::Command::arg($0, $1)"
    let v746 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v732, v744) v745 
    let v747 : string = "r#\"" + v185 + "\"#"
    let v748 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v747 
    let v749 : string = "r#\"" + v188 + "\"#"
    let v750 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v749 
    let v751 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v748; v750|]
    let v753 : unativeint = 1 |> unativeint 
    let v757 : unativeint = 0 |> unativeint 
    let v761 : unativeint = 0 |> unativeint 
    let v765 : bool = v757 = v761 
    let v772 : clap_builder_ValueRange =
        if v765 then
            let v768 : string = "clap::builder::ValueRange::new($0..)"
            let v769 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v753 v768 
            v769
        else
            let v770 : string = "clap::builder::ValueRange::new($0.." + v585 + "$1)"
            let v771 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v753, v757) v770 
            v771
    let v773 : string = "r#\"" + v214 + "\"#"
    let v774 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "clap::Arg::new($0)"
    let v776 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v774 v775 
    let v777 : string = "$0.short($1)"
    let v778 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v776, 'd') v777 
    let v779 : string = "r#\"" + v214 + "\"#"
    let v780 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v779 
    let v781 : string = "$0.long($1)"
    let v782 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v778, v780) v781 
    let v783 : string = "$0.to_vec()"
    let v784 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v751 v783 
    let v785 : string = "$0.value_names($1)"
    let v786 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v782, v784) v785 
    let v787 : string = "$0.num_args($1)"
    let v788 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v786, v772) v787 
    let v789 : string = "clap::ArgAction::Append"
    let v790 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v789 
    let v791 : string = "$0.action($1)"
    let v792 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v788, v790) v791 
    let v793 : string = "clap::Command::arg($0, $1)"
    let v794 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v746, v792) v793 
    let v795 : string = "clap::Command::subcommand($0, v794)"
    let v796 : clap_Command = Fable.Core.RustInterop.emitRustExpr v727 v795 
    let v797 : string = "dib"
    let v798 : string = "r#\"" + v797 + "\"#"
    let v799 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v798 
    let v800 : string = "clap::Command::new($0)"
    let v801 : clap_Command = Fable.Core.RustInterop.emitRustExpr v799 v800 
    let v802 : string = "path"
    let v803 : string = "r#\"" + v802 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "clap::Arg::new($0)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v804 v805 
    let v807 : string = "$0.short($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, 'p') v807 
    let v809 : string = "r#\"" + v802 + "\"#"
    let v810 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v809 
    let v811 : string = "$0.long($1)"
    let v812 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v810) v811 
    let v813 : string = "$0.required($1)"
    let v814 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v812, true) v813 
    let v815 : string = "clap::Command::arg($0, $1)"
    let v816 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v801, v814) v815 
    let v817 : string = "u8"
    let v818 : string = "clap::value_parser!(" + v817 + ").into()"
    let v819 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v818 
    let v820 : string = "retries"
    let v821 : string = "r#\"" + v820 + "\"#"
    let v822 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v821 
    let v823 : string = "clap::Arg::new($0)"
    let v824 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v822 v823 
    let v825 : string = "$0.short($1)"
    let v826 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v824, 'r') v825 
    let v827 : string = "r#\"" + v820 + "\"#"
    let v828 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v827 
    let v829 : string = "$0.long($1)"
    let v830 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v826, v828) v829 
    let v831 : string = "$0.value_parser($1)"
    let v832 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v830, v819) v831 
    let v833 : string = "clap::Command::arg($0, $1)"
    let v834 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v816, v832) v833 
    let v835 : string = "working-directory"
    let v836 : string = "r#\"" + v835 + "\"#"
    let v837 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v836 
    let v838 : string = "clap::Arg::new($0)"
    let v839 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v837 v838 
    let v840 : string = "$0.short($1)"
    let v841 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v839, 'w') v840 
    let v842 : string = "r#\"" + v835 + "\"#"
    let v843 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v842 
    let v844 : string = "$0.long($1)"
    let v845 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v841, v843) v844 
    let v846 : string = "clap::Command::arg($0, $1)"
    let v847 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v834, v845) v846 
    let v848 : string = "clap::Command::subcommand($0, v847)"
    let v849 : clap_Command = Fable.Core.RustInterop.emitRustExpr v796 v848 
    v849
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method4(v0)
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result_map_"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method5()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    let _run_target_args'_v2 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : US3 = US3_1
    let v20 : US4 = US4_4(v19)
    let v21 : string = $"env.get_environment_variable / target: {v20} / var: {v0}"
    let v22 : string = failwith<string> v21
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : US3 = US3_2
    let v24 : US4 = US4_4(v23)
    let v25 : string = $"env.get_environment_variable / target: {v24} / var: {v0}"
    let v26 : string = failwith<string> v25
    let _run_target_args'_v2 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : string = "process.env[$0] ?? \"\""
    let v28 : string = Fable.Core.JsInterop.emitJsExpr v0 v27 
    let _run_target_args'_v2 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = "os"
    let v31 : IOsEnviron = Fable.Core.PyInterop.importAll v30 
    let v32 : string = "v31.environ"
    let v33 : obj = Fable.Core.PyInterop.emitPyExpr () v32 
    let v37 : string = "v33.get($0)"
    let v38 : string = Fable.Core.PyInterop.emitPyExpr v0 v37 
    let mutable _v38 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v42 : (string -> string option) = Option.ofObj
    let v43 : string option = v42 v38
    v43 
    #else
    Some v38 
    #endif
    |> fun x -> _v38 <- Some x
    let v44 : string option = match _v38 with Some x -> x | None -> failwith "optionm'.of_obj / _v38=None"
    let v49 : (string -> US5) = method6()
    let v50 : US5 option = v44 |> Option.map v49 
    let v70 : US5 = US5_1
    let v71 : US5 = v50 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US5_1 -> (* None *)
            let v76 : string = ""
            v76
        | US5_0(v75) -> (* Some *)
            v75
    let _run_target_args'_v2 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : US3 = US3_1
    let v80 : US4 = US4_1(v79)
    let v81 : string = $"env.get_environment_variable / target: {v80} / var: {v0}"
    let v82 : string = failwith<string> v81
    let _run_target_args'_v2 = v82 
    #endif
#else
    let v83 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v84 : string = v83 v0
    let mutable _v84 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v86 : (string -> string option) = Option.ofObj
    let v87 : string option = v86 v84
    v87 
    #else
    Some v84 
    #endif
    |> fun x -> _v84 <- Some x
    let v88 : string option = match _v84 with Some x -> x | None -> failwith "optionm'.of_obj / _v84=None"
    let v93 : (string -> US5) = method6()
    let v94 : US5 option = v88 |> Option.map v93 
    let v114 : US5 = US5_1
    let v115 : US5 = v94 |> Option.defaultValue v114 
    let v122 : string =
        match v115 with
        | US5_1 -> (* None *)
            let v120 : string = ""
            v120
        | US5_0(v119) -> (* Some *)
            v119
    let _run_target_args'_v2 = v122 
    #endif
    let v123 : string = _run_target_args'_v2 
    v123
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v210 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v143 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v144 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v145 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v147 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v143 = v147 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v152 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v152 
            #endif
#else
            let v153 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v153 
            #endif
            let v154 : System.DateTime = _run_target_args'_v143 
            (* run_target_args'
            let v165 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v154
            let _run_target_args'_v165 = v167 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v154
            let _run_target_args'_v165 = v169 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : int64 = null |> unbox<int64>
            let _run_target_args'_v165 = v171 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : (System.DateTime -> int64) = _.Ticks
            let v175 : int64 = v174 v154
            let _run_target_args'_v165 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : (System.DateTime -> int64) = _.Ticks
            let v177 : int64 = v176 v154
            let _run_target_args'_v165 = v177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : (System.DateTime -> int64) = _.Ticks
            let v179 : int64 = v178 v154
            let _run_target_args'_v165 = v179 
            #endif
#else
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v154
            let _run_target_args'_v165 = v181 
            #endif
            let v182 : int64 = _run_target_args'_v165 
            let v204 : int64 = v182 |> int64 
            US2_0(v204)
    struct (v127, v210)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v43 v52 
    let _run_target_args'_v13 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "String::from($0)"
    let v62 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "String::from($0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : std_string_String = _run_target_args'_v60 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v83 v92 
    let _run_target_args'_v13 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v95 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v94 
    (* run_target_args'
    let v100 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v101 : string = "String::from($0)"
    let v102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v101 
    let _run_target_args'_v100 = v102 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v103 : string = "String::from($0)"
    let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v103 
    let _run_target_args'_v100 = v104 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v105 : string = "String::from($0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v105 
    let _run_target_args'_v100 = v106 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v116 
    #endif
#else
    let v120 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v120 
    #endif
    let v123 : std_string_String = _run_target_args'_v100 
    let v132 : string = "fable_library_rust::String_::fromString($0)"
    let v133 : string = Fable.Core.RustInterop.emitRustExpr v123 v132 
    let _run_target_args'_v13 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : string = null |> unbox<string>
    let _run_target_args'_v13 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : string = null |> unbox<string>
    let _run_target_args'_v13 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v13 = v143 
    #endif
#else
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v13 = v147 
    #endif
    let v150 : string = _run_target_args'_v13 
    let v161 : string = "True"
    let v162 : bool = v150 <> v161 
    let v174 : US2 =
        if v162 then
            US2_1
        else
            let v166 : string = $"near_sdk::env::block_timestamp()"
            let v167 : uint64 = Fable.Core.RustInterop.emitRustExpr () v166 
            let v169 : (uint64 -> int64) = int64
            let v170 : int64 = v169 v167
            US2_0(v170)
    let v175 : US1 = US1_1
    let _run_target_args'_v3 = struct (v175, v174) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v176 : US1, v177 : US2) = method2()
    let _run_target_args'_v3 = struct (v176, v177) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v178 : US1, v179 : US2) = method2()
    let _run_target_args'_v3 = struct (v178, v179) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v180 : US1, v181 : US2) = method2()
    let _run_target_args'_v3 = struct (v180, v181) 
    #endif
#else
    let struct (v182 : US1, v183 : US2) = method2()
    let _run_target_args'_v3 = struct (v182, v183) 
    #endif
    let struct (v184 : US1, v185 : US2) = _run_target_args'_v3 
    let v190 : Mut0 = {l0 = 1L} : Mut0
    let v191 : (string -> unit) = closure4()
    let v192 : Mut1 = {l0 = v191} : Mut1
    let v193 : Mut2 = {l0 = true} : Mut2
    let v194 : string = ""
    let v195 : Mut3 = {l0 = v194} : Mut3
    let v198 : US0 =
        match v184 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v196) -> (* Some *)
            v196
    let v199 : Mut4 = {l0 = v198} : Mut4
    let v210 : int64 option =
        match v185 with
        | US2_1 -> (* None *)
            let v206 : int64 option = None
            v206
        | US2_0(v200) -> (* Some *)
            let v202 : int64 option = Some v200 
            v202
    struct (v190, v192, v193, v195, v199, v210)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method8 () : (int64 -> US2) =
    closure6()
and method9 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method10 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method7 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v216 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v219 : (int64 -> US2) = method8()
    let v220 : US2 option = v5 |> Option.map v219 
    let v240 : US2 = US2_1
    let v241 : US2 = v220 |> Option.defaultValue v240 
    let v395 : System.DateTime =
        match v241 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v378 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v379 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v379 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v380 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v380 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v382 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v378 = v382 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v385 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v385 
            #endif
#if FABLE_COMPILER_PYTHON
            let v386 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v386 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v387 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v387 
            #endif
#else
            let v388 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v378 = v388 
            #endif
            let v389 : System.DateTime = _run_target_args'_v378 
            v389
        | US2_0(v245) -> (* Some *)
            (* run_target_args'
            let v252 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v253 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v253 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v256 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v252 = v256 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v259 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v259 
            #endif
#if FABLE_COMPILER_PYTHON
            let v260 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v260 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v261 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v261 
            #endif
#else
            let v262 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v252 = v262 
            #endif
            let v263 : System.DateTime = _run_target_args'_v252 
            (* run_target_args'
            let v274 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v275 : (System.DateTime -> int64) = _.Ticks
            let v276 : int64 = v275 v263
            let _run_target_args'_v274 = v276 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v277 : (System.DateTime -> int64) = _.Ticks
            let v278 : int64 = v277 v263
            let _run_target_args'_v274 = v278 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v280 : int64 = null |> unbox<int64>
            let _run_target_args'_v274 = v280 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v283 : (System.DateTime -> int64) = _.Ticks
            let v284 : int64 = v283 v263
            let _run_target_args'_v274 = v284 
            #endif
#if FABLE_COMPILER_PYTHON
            let v285 : (System.DateTime -> int64) = _.Ticks
            let v286 : int64 = v285 v263
            let _run_target_args'_v274 = v286 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v263
            let _run_target_args'_v274 = v288 
            #endif
#else
            let v289 : (System.DateTime -> int64) = _.Ticks
            let v290 : int64 = v289 v263
            let _run_target_args'_v274 = v290 
            #endif
            let v291 : int64 = _run_target_args'_v274 
            let v313 : int64 = v291 |> int64 
            let v318 : int64 = v313 - v245
            let v324 : System.TimeSpan = v318 |> System.TimeSpan 
            let v330 : (System.TimeSpan -> int32) = _.Hours
            let v331 : int32 = v330 v324
            let v335 : (System.TimeSpan -> int32) = _.Minutes
            let v336 : int32 = v335 v324
            let v340 : (System.TimeSpan -> int32) = _.Seconds
            let v341 : int32 = v340 v324
            let v345 : (System.TimeSpan -> int32) = _.Milliseconds
            let v346 : int32 = v345 v324
            let v369 : System.DateTime = System.DateTime (1, 1, 1, v331, v336, v341, v346)
            v369
    let v396 : string = method9()
    let v408 : bool = v396 = ""
    let v410 : string =
        if v408 then
            let v409 : string = "M-d-y hh:mm:ss tt"
            v409
        else
            v396
    let v411 : (string -> string) = v395.ToString
    let v412 : string = v411 v410
    let _run_target_args'_v216 = v412 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : (int64 -> US2) = method8()
    let v430 : US2 option = v5 |> Option.map v429 
    let v450 : US2 = US2_1
    let v451 : US2 = v430 |> Option.defaultValue v450 
    let v605 : System.DateTime =
        match v451 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v588 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v589 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v589 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v590 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v590 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v592 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v588 = v592 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v595 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v595 
            #endif
#if FABLE_COMPILER_PYTHON
            let v596 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v596 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v597 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v597 
            #endif
#else
            let v598 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v598 
            #endif
            let v599 : System.DateTime = _run_target_args'_v588 
            v599
        | US2_0(v455) -> (* Some *)
            (* run_target_args'
            let v462 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v463 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v463 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v464 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v464 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v466 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v462 = v466 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v469 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v469 
            #endif
#if FABLE_COMPILER_PYTHON
            let v470 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v470 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v471 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v471 
            #endif
#else
            let v472 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v462 = v472 
            #endif
            let v473 : System.DateTime = _run_target_args'_v462 
            (* run_target_args'
            let v484 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v485 : (System.DateTime -> int64) = _.Ticks
            let v486 : int64 = v485 v473
            let _run_target_args'_v484 = v486 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v487 : (System.DateTime -> int64) = _.Ticks
            let v488 : int64 = v487 v473
            let _run_target_args'_v484 = v488 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v490 : int64 = null |> unbox<int64>
            let _run_target_args'_v484 = v490 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v493 : (System.DateTime -> int64) = _.Ticks
            let v494 : int64 = v493 v473
            let _run_target_args'_v484 = v494 
            #endif
#if FABLE_COMPILER_PYTHON
            let v495 : (System.DateTime -> int64) = _.Ticks
            let v496 : int64 = v495 v473
            let _run_target_args'_v484 = v496 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v497 : (System.DateTime -> int64) = _.Ticks
            let v498 : int64 = v497 v473
            let _run_target_args'_v484 = v498 
            #endif
#else
            let v499 : (System.DateTime -> int64) = _.Ticks
            let v500 : int64 = v499 v473
            let _run_target_args'_v484 = v500 
            #endif
            let v501 : int64 = _run_target_args'_v484 
            let v523 : int64 = v501 |> int64 
            let v528 : int64 = v523 - v455
            let v534 : System.TimeSpan = v528 |> System.TimeSpan 
            let v540 : (System.TimeSpan -> int32) = _.Hours
            let v541 : int32 = v540 v534
            let v545 : (System.TimeSpan -> int32) = _.Minutes
            let v546 : int32 = v545 v534
            let v550 : (System.TimeSpan -> int32) = _.Seconds
            let v551 : int32 = v550 v534
            let v555 : (System.TimeSpan -> int32) = _.Milliseconds
            let v556 : int32 = v555 v534
            let v579 : System.DateTime = System.DateTime (1, 1, 1, v541, v546, v551, v556)
            v579
    let v606 : string = method9()
    let v618 : bool = v606 = ""
    let v620 : string =
        if v618 then
            let v619 : string = "M-d-y hh:mm:ss tt"
            v619
        else
            v606
    let v621 : (string -> string) = v605.ToString
    let v622 : string = v621 v620
    let _run_target_args'_v216 = v622 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v637 : string = $"near_sdk::env::block_timestamp()"
    let v638 : uint64 = Fable.Core.RustInterop.emitRustExpr () v637 
    let v641 : (int64 -> US2) = method8()
    let v642 : US2 option = v5 |> Option.map v641 
    let v662 : US2 = US2_1
    let v663 : US2 = v642 |> Option.defaultValue v662 
    let v675 : uint64 =
        match v663 with
        | US2_1 -> (* None *)
            v638
        | US2_0(v667) -> (* Some *)
            let v669 : (int64 -> uint64) = uint64
            let v670 : uint64 = v669 v667
            let v673 : uint64 = v638 - v670
            v673
    let v676 : uint64 = v675 / 1000000000UL
    let v677 : uint64 = v676 % 60UL
    let v678 : uint64 = v676 / 60UL
    let v679 : uint64 = v678 % 60UL
    let v680 : uint64 = v676 / 3600UL
    let v681 : uint64 = v680 % 24UL
    let v682 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v683 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v681, v679, v677) v682 
    let v684 : string = "fable_library_rust::String_::fromString($0)"
    let v685 : string = Fable.Core.RustInterop.emitRustExpr v683 v684 
    let _run_target_args'_v216 = v685 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v688 : (int64 -> US2) = method8()
    let v689 : US2 option = v5 |> Option.map v688 
    let v709 : US2 = US2_1
    let v710 : US2 = v689 |> Option.defaultValue v709 
    let v864 : System.DateTime =
        match v710 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v847 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v848 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v848 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v849 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v849 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v851 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v847 = v851 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v854 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v854 
            #endif
#if FABLE_COMPILER_PYTHON
            let v855 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v855 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v856 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v856 
            #endif
#else
            let v857 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v847 = v857 
            #endif
            let v858 : System.DateTime = _run_target_args'_v847 
            v858
        | US2_0(v714) -> (* Some *)
            (* run_target_args'
            let v721 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v722 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v722 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v723 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v723 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v725 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v721 = v725 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v728 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v728 
            #endif
#if FABLE_COMPILER_PYTHON
            let v729 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v729 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v730 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v730 
            #endif
#else
            let v731 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v721 = v731 
            #endif
            let v732 : System.DateTime = _run_target_args'_v721 
            (* run_target_args'
            let v743 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v744 : (System.DateTime -> int64) = _.Ticks
            let v745 : int64 = v744 v732
            let _run_target_args'_v743 = v745 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v746 : (System.DateTime -> int64) = _.Ticks
            let v747 : int64 = v746 v732
            let _run_target_args'_v743 = v747 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v749 : int64 = null |> unbox<int64>
            let _run_target_args'_v743 = v749 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v752 : (System.DateTime -> int64) = _.Ticks
            let v753 : int64 = v752 v732
            let _run_target_args'_v743 = v753 
            #endif
#if FABLE_COMPILER_PYTHON
            let v754 : (System.DateTime -> int64) = _.Ticks
            let v755 : int64 = v754 v732
            let _run_target_args'_v743 = v755 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v756 : (System.DateTime -> int64) = _.Ticks
            let v757 : int64 = v756 v732
            let _run_target_args'_v743 = v757 
            #endif
#else
            let v758 : (System.DateTime -> int64) = _.Ticks
            let v759 : int64 = v758 v732
            let _run_target_args'_v743 = v759 
            #endif
            let v760 : int64 = _run_target_args'_v743 
            let v782 : int64 = v760 |> int64 
            let v787 : int64 = v782 - v714
            let v793 : System.TimeSpan = v787 |> System.TimeSpan 
            let v799 : (System.TimeSpan -> int32) = _.Hours
            let v800 : int32 = v799 v793
            let v804 : (System.TimeSpan -> int32) = _.Minutes
            let v805 : int32 = v804 v793
            let v809 : (System.TimeSpan -> int32) = _.Seconds
            let v810 : int32 = v809 v793
            let v814 : (System.TimeSpan -> int32) = _.Milliseconds
            let v815 : int32 = v814 v793
            let v838 : System.DateTime = System.DateTime (1, 1, 1, v800, v805, v810, v815)
            v838
    let v865 : string = method10()
    let v877 : bool = v865 = ""
    let v879 : string =
        if v877 then
            let v878 : string = "M-d-y hh:mm:ss tt"
            v878
        else
            v865
    let v880 : (string -> string) = v864.ToString
    let v881 : string = v880 v879
    let _run_target_args'_v216 = v881 
    #endif
#if FABLE_COMPILER_PYTHON
    let v898 : (int64 -> US2) = method8()
    let v899 : US2 option = v5 |> Option.map v898 
    let v919 : US2 = US2_1
    let v920 : US2 = v899 |> Option.defaultValue v919 
    let v1074 : System.DateTime =
        match v920 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1057 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1058 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1058 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1059 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1059 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1061 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1057 = v1061 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1064 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1064 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1065 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1065 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1066 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1066 
            #endif
#else
            let v1067 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1057 = v1067 
            #endif
            let v1068 : System.DateTime = _run_target_args'_v1057 
            v1068
        | US2_0(v924) -> (* Some *)
            (* run_target_args'
            let v931 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v932 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v932 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v933 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v933 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v935 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v931 = v935 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v938 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v938 
            #endif
#if FABLE_COMPILER_PYTHON
            let v939 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v939 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v940 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v940 
            #endif
#else
            let v941 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v931 = v941 
            #endif
            let v942 : System.DateTime = _run_target_args'_v931 
            (* run_target_args'
            let v953 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v954 : (System.DateTime -> int64) = _.Ticks
            let v955 : int64 = v954 v942
            let _run_target_args'_v953 = v955 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v956 : (System.DateTime -> int64) = _.Ticks
            let v957 : int64 = v956 v942
            let _run_target_args'_v953 = v957 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v959 : int64 = null |> unbox<int64>
            let _run_target_args'_v953 = v959 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v962 : (System.DateTime -> int64) = _.Ticks
            let v963 : int64 = v962 v942
            let _run_target_args'_v953 = v963 
            #endif
#if FABLE_COMPILER_PYTHON
            let v964 : (System.DateTime -> int64) = _.Ticks
            let v965 : int64 = v964 v942
            let _run_target_args'_v953 = v965 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v966 : (System.DateTime -> int64) = _.Ticks
            let v967 : int64 = v966 v942
            let _run_target_args'_v953 = v967 
            #endif
#else
            let v968 : (System.DateTime -> int64) = _.Ticks
            let v969 : int64 = v968 v942
            let _run_target_args'_v953 = v969 
            #endif
            let v970 : int64 = _run_target_args'_v953 
            let v992 : int64 = v970 |> int64 
            let v997 : int64 = v992 - v924
            let v1003 : System.TimeSpan = v997 |> System.TimeSpan 
            let v1009 : (System.TimeSpan -> int32) = _.Hours
            let v1010 : int32 = v1009 v1003
            let v1014 : (System.TimeSpan -> int32) = _.Minutes
            let v1015 : int32 = v1014 v1003
            let v1019 : (System.TimeSpan -> int32) = _.Seconds
            let v1020 : int32 = v1019 v1003
            let v1024 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1025 : int32 = v1024 v1003
            let v1048 : System.DateTime = System.DateTime (1, 1, 1, v1010, v1015, v1020, v1025)
            v1048
    let v1075 : string = method10()
    let v1087 : bool = v1075 = ""
    let v1089 : string =
        if v1087 then
            let v1088 : string = "M-d-y hh:mm:ss tt"
            v1088
        else
            v1075
    let v1090 : (string -> string) = v1074.ToString
    let v1091 : string = v1090 v1089
    let _run_target_args'_v216 = v1091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1108 : (int64 -> US2) = method8()
    let v1109 : US2 option = v5 |> Option.map v1108 
    let v1129 : US2 = US2_1
    let v1130 : US2 = v1109 |> Option.defaultValue v1129 
    let v1284 : System.DateTime =
        match v1130 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1267 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1268 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1268 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1269 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1269 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1271 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1267 = v1271 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1274 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1274 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1275 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1275 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1276 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1276 
            #endif
#else
            let v1277 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1267 = v1277 
            #endif
            let v1278 : System.DateTime = _run_target_args'_v1267 
            v1278
        | US2_0(v1134) -> (* Some *)
            (* run_target_args'
            let v1141 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1142 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1142 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1143 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1145 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1141 = v1145 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1148 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1148 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1149 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1149 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1150 
            #endif
#else
            let v1151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1141 = v1151 
            #endif
            let v1152 : System.DateTime = _run_target_args'_v1141 
            (* run_target_args'
            let v1163 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1164 : (System.DateTime -> int64) = _.Ticks
            let v1165 : int64 = v1164 v1152
            let _run_target_args'_v1163 = v1165 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1166 : (System.DateTime -> int64) = _.Ticks
            let v1167 : int64 = v1166 v1152
            let _run_target_args'_v1163 = v1167 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1169 : int64 = null |> unbox<int64>
            let _run_target_args'_v1163 = v1169 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1172 : (System.DateTime -> int64) = _.Ticks
            let v1173 : int64 = v1172 v1152
            let _run_target_args'_v1163 = v1173 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1174 : (System.DateTime -> int64) = _.Ticks
            let v1175 : int64 = v1174 v1152
            let _run_target_args'_v1163 = v1175 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1176 : (System.DateTime -> int64) = _.Ticks
            let v1177 : int64 = v1176 v1152
            let _run_target_args'_v1163 = v1177 
            #endif
#else
            let v1178 : (System.DateTime -> int64) = _.Ticks
            let v1179 : int64 = v1178 v1152
            let _run_target_args'_v1163 = v1179 
            #endif
            let v1180 : int64 = _run_target_args'_v1163 
            let v1202 : int64 = v1180 |> int64 
            let v1207 : int64 = v1202 - v1134
            let v1213 : System.TimeSpan = v1207 |> System.TimeSpan 
            let v1219 : (System.TimeSpan -> int32) = _.Hours
            let v1220 : int32 = v1219 v1213
            let v1224 : (System.TimeSpan -> int32) = _.Minutes
            let v1225 : int32 = v1224 v1213
            let v1229 : (System.TimeSpan -> int32) = _.Seconds
            let v1230 : int32 = v1229 v1213
            let v1234 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1235 : int32 = v1234 v1213
            let v1258 : System.DateTime = System.DateTime (1, 1, 1, v1220, v1225, v1230, v1235)
            v1258
    let v1285 : string = method10()
    let v1297 : bool = v1285 = ""
    let v1299 : string =
        if v1297 then
            let v1298 : string = "M-d-y hh:mm:ss tt"
            v1298
        else
            v1285
    let v1300 : (string -> string) = v1284.ToString
    let v1301 : string = v1300 v1299
    let _run_target_args'_v216 = v1301 
    #endif
#else
    let v1318 : (int64 -> US2) = method8()
    let v1319 : US2 option = v5 |> Option.map v1318 
    let v1339 : US2 = US2_1
    let v1340 : US2 = v1319 |> Option.defaultValue v1339 
    let v1494 : System.DateTime =
        match v1340 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1477 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1478 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1478 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1479 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1479 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1481 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1477 = v1481 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1484 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1484 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1485 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1485 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1486 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1486 
            #endif
#else
            let v1487 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1477 = v1487 
            #endif
            let v1488 : System.DateTime = _run_target_args'_v1477 
            v1488
        | US2_0(v1344) -> (* Some *)
            (* run_target_args'
            let v1351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1352 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1352 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1353 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1353 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1355 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1351 = v1355 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1358 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1358 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1359 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1359 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1360 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1360 
            #endif
#else
            let v1361 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1351 = v1361 
            #endif
            let v1362 : System.DateTime = _run_target_args'_v1351 
            (* run_target_args'
            let v1373 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1374 : (System.DateTime -> int64) = _.Ticks
            let v1375 : int64 = v1374 v1362
            let _run_target_args'_v1373 = v1375 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1376 : (System.DateTime -> int64) = _.Ticks
            let v1377 : int64 = v1376 v1362
            let _run_target_args'_v1373 = v1377 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1379 : int64 = null |> unbox<int64>
            let _run_target_args'_v1373 = v1379 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1382 : (System.DateTime -> int64) = _.Ticks
            let v1383 : int64 = v1382 v1362
            let _run_target_args'_v1373 = v1383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1384 : (System.DateTime -> int64) = _.Ticks
            let v1385 : int64 = v1384 v1362
            let _run_target_args'_v1373 = v1385 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1386 : (System.DateTime -> int64) = _.Ticks
            let v1387 : int64 = v1386 v1362
            let _run_target_args'_v1373 = v1387 
            #endif
#else
            let v1388 : (System.DateTime -> int64) = _.Ticks
            let v1389 : int64 = v1388 v1362
            let _run_target_args'_v1373 = v1389 
            #endif
            let v1390 : int64 = _run_target_args'_v1373 
            let v1412 : int64 = v1390 |> int64 
            let v1417 : int64 = v1412 - v1344
            let v1423 : System.TimeSpan = v1417 |> System.TimeSpan 
            let v1429 : (System.TimeSpan -> int32) = _.Hours
            let v1430 : int32 = v1429 v1423
            let v1434 : (System.TimeSpan -> int32) = _.Minutes
            let v1435 : int32 = v1434 v1423
            let v1439 : (System.TimeSpan -> int32) = _.Seconds
            let v1440 : int32 = v1439 v1423
            let v1444 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1445 : int32 = v1444 v1423
            let v1468 : System.DateTime = System.DateTime (1, 1, 1, v1430, v1435, v1440, v1445)
            v1468
    let v1495 : string = method10()
    let v1507 : bool = v1495 = ""
    let v1509 : string =
        if v1507 then
            let v1508 : string = "M-d-y hh:mm:ss tt"
            v1508
        else
            v1495
    let v1510 : (string -> string) = v1494.ToString
    let v1511 : string = v1510 v1509
    let _run_target_args'_v216 = v1511 
    #endif
    let v1526 : string = _run_target_args'_v216 
    v1526
and method13 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v4 : string = v2 + v1 
    v0.l0 <- v4
    ()
and method12 (v0 : char) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v7 : string = $"{v0}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v2, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v23 : string = v2.l0
    v23
and method11 () : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "inline_colorization::color_bright_blue"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "String::from($0)"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v24 
    #endif
#else
    let v28 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v28 
    #endif
    let v31 : std_string_String = _run_target_args'_v8 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v31 v40 
    let _run_target_args'_v1 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "inline_colorization::color_bright_blue"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v42 
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v48 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v51 
    let _run_target_args'_v48 = v52 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v53 : string = "String::from($0)"
    let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v53 
    let _run_target_args'_v48 = v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v56 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v56 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v64 
    #endif
#else
    let v68 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v68 
    #endif
    let v71 : std_string_String = _run_target_args'_v48 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v71 v80 
    let _run_target_args'_v1 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "inline_colorization::color_bright_blue"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v82 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v120 : string = "fable_library_rust::String_::fromString($0)"
    let v121 : string = Fable.Core.RustInterop.emitRustExpr v111 v120 
    let _run_target_args'_v1 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : string = "\u001b[94m"
    let _run_target_args'_v1 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : string = "\u001b[94m"
    let _run_target_args'_v1 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : string = "\u001b[94m"
    let _run_target_args'_v1 = v124 
    #endif
#else
    let v125 : string = "\u001b[94m"
    let _run_target_args'_v1 = v125 
    #endif
    let v126 : string = _run_target_args'_v1 
    
    
    
    
    
    let v131 : string = "Debug"
    let v132 : (unit -> string) = v131.ToLower
    let v133 : string = v132 ()
    let v136 : char = v133.[int 0]
    let v137 : string = method12(v136)
    let v139 : string = v126 + v137 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "inline_colorization::color_reset"
    let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v144 
    (* run_target_args'
    let v150 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v151 
    let _run_target_args'_v150 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v153 
    let _run_target_args'_v150 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = "String::from($0)"
    let v156 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v155 
    let _run_target_args'_v150 = v156 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v166 
    #endif
#else
    let v170 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v170 
    #endif
    let v173 : std_string_String = _run_target_args'_v150 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v173 v182 
    let _run_target_args'_v143 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "inline_colorization::color_reset"
    let v185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v184 
    (* run_target_args'
    let v190 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v191 : string = "String::from($0)"
    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v191 
    let _run_target_args'_v190 = v192 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : string = "String::from($0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v193 
    let _run_target_args'_v190 = v194 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v195 : string = "String::from($0)"
    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v195 
    let _run_target_args'_v190 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v206 
    #endif
#else
    let v210 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v210 
    #endif
    let v213 : std_string_String = _run_target_args'_v190 
    let v222 : string = "fable_library_rust::String_::fromString($0)"
    let v223 : string = Fable.Core.RustInterop.emitRustExpr v213 v222 
    let _run_target_args'_v143 = v223 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v224 : string = "inline_colorization::color_reset"
    let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v224 
    (* run_target_args'
    let v230 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _run_target_args'_v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _run_target_args'_v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _run_target_args'_v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v238 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v238 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v246 
    #endif
#else
    let v250 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v250 
    #endif
    let v253 : std_string_String = _run_target_args'_v230 
    let v262 : string = "fable_library_rust::String_::fromString($0)"
    let v263 : string = Fable.Core.RustInterop.emitRustExpr v253 v262 
    let _run_target_args'_v143 = v263 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v264 : string = "\u001b[0m"
    let _run_target_args'_v143 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : string = "\u001b[0m"
    let _run_target_args'_v143 = v265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v266 : string = "\u001b[0m"
    let _run_target_args'_v143 = v266 
    #endif
#else
    let v267 : string = "\u001b[0m"
    let _run_target_args'_v143 = v267 
    #endif
    let v268 : string = _run_target_args'_v143 
    let v272 : string = v139 + v268 
    v272
and method15 (v0 : (string [])) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "args"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v62 : string = $"%A{v0}"
    let v66 : string = $"{v62}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v2, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = " }"
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v2, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v101 : string = v2.l0
    v101
and method16 (v0 : string) : string =
    let v1 : char list = []
    let v8 : (char list -> (char [])) = List.toArray
    let v9 : (char []) = v8 v1
    let v12 : string = v0.TrimStart v9 
    let v46 : char list = []
    let v48 : char list = '/' :: v46 
    let v52 : char list = ' ' :: v48 
    let v61 : (char list -> (char [])) = List.toArray
    let v62 : (char []) = v61 v52
    let v65 : string = v12.TrimEnd v62 
    v65
and method14 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method15(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.main"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure10(v0)
    let v4 : unit = (fun () -> v3 (); v2) ()
    ()
and closure5 (v0 : (string [])) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method14(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US7 =
    US7_0(v0, v1)
and method18 () : (struct (std_string_String * clap_ArgMatches) -> US7) =
    closure12()
and method19 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US8 =
    US8_0(v0)
and method20 () : (std_string_String -> US8) =
    closure13()
and method21 () : string =
    let v0 : string = "target"
    v0
and method22 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US12 =
    US12_0(v0)
and method23 () : (Vec<std_string_String> -> US12) =
    closure14()
and method24 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method25 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "extension"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "new_code"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method27 () : string =
    let v0 : string = ""
    v0
and method28 (v0 : string) : string =
    v0
and method29 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method30 () : string =
    let v0 : string = ""
    v0
and method26 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method27()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method28(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method29(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method30()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method28(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method31 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v62 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v63 : string = "format!(\"{}\", $0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v63 
    let _run_target_args'_v62 = v64 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : string = "format!(\"{}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v65 
    let _run_target_args'_v62 = v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = "format!(\"{}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v67 
    let _run_target_args'_v62 = v68 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v78 
    #endif
#else
    let v82 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v82 
    #endif
    let v85 : std_string_String = _run_target_args'_v62 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v85 v94 
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _run_target_args'_v4 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = null |> unbox<string>
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "fs"
    let v105 : IFs = Fable.Core.JsInterop.importAll v104 
    let v106 : string = "fs.realpathSync('.')"
    let v107 : string = Fable.Core.JsInterop.emitJsExpr () v106 
    let _run_target_args'_v4 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : string = null |> unbox<string>
    let _run_target_args'_v4 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v113 : string = null |> unbox<string>
    let _run_target_args'_v4 = v113 
    #endif
#else
    let v116 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v117 : string = v116 ()
    let _run_target_args'_v4 = v117 
    #endif
    let v118 : string = _run_target_args'_v4 
    v118
and method33 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "String::from($0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "String::from($0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v63 
    #endif
#else
    let v67 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v67 
    #endif
    let v70 : std_string_String = _run_target_args'_v47 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "std::path::PathBuf::from($0)"
    let v85 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "std::path::PathBuf::from($0)"
    let v87 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "std::path::PathBuf::from($0)"
    let v89 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v99 
    #endif
#else
    let v103 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v103 
    #endif
    let v106 : std_path_PathBuf = _run_target_args'_v83 
    (* run_target_args'
    let v119 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v120 : string = "&*$0"
    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let _run_target_args'_v119 = v121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v122 : string = "&*$0"
    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v122 
    let _run_target_args'_v119 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "&*$0"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let _run_target_args'_v119 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v127 
    #endif
#if FABLE_COMPILER_PYTHON
    let v131 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v131 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v135 
    #endif
#else
    let v139 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v139 
    #endif
    let v142 : Ref<Str> = _run_target_args'_v119 
    (* run_target_args'
    let v155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : string = "String::from($0)"
    let v157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v156 
    let _run_target_args'_v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : string = "String::from($0)"
    let v159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v158 
    let _run_target_args'_v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : string = "String::from($0)"
    let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v160 
    let _run_target_args'_v155 = v161 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v171 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v171 
    #endif
#else
    let v175 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v175 
    #endif
    let v178 : std_string_String = _run_target_args'_v155 
    let v187 : string = "$0.join($1)"
    let v188 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v106, v178) v187 
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.display()"
    let v195 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.display()"
    let v197 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.display()"
    let v199 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v209 
    #endif
#else
    let v213 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v213 
    #endif
    let v216 : std_path_Display = _run_target_args'_v193 
    (* run_target_args'
    let v229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : string = "format!(\"{}\", $0)"
    let v231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v230 
    let _run_target_args'_v229 = v231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v232 : string = "format!(\"{}\", $0)"
    let v233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v232 
    let _run_target_args'_v229 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : string = "format!(\"{}\", $0)"
    let v235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v234 
    let _run_target_args'_v229 = v235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v245 
    #endif
#else
    let v249 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v249 
    #endif
    let v252 : std_string_String = _run_target_args'_v229 
    let v261 : string = "fable_library_rust::String_::fromString($0)"
    let v262 : string = Fable.Core.RustInterop.emitRustExpr v252 v261 
    let _run_target_args'_v6 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : US3 = US3_1
    let v264 : US4 = US4_4(v263)
    let v265 : string = $"file_system.(</>) / target: {v264} / a: {v0} / b: {v1}"
    let v266 : string = failwith<string> v265
    let _run_target_args'_v6 = v266 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : string = null |> unbox<string>
    let _run_target_args'_v6 = v268 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v271 : string = "path"
    let v272 : IPathJoin = Fable.Core.JsInterop.importAll v271 
    let v273 : string = "v272.join($0, $1)"
    let v274 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v273 
    let _run_target_args'_v6 = v274 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : US3 = US3_0
    let v276 : US4 = US4_6(v275)
    let v277 : string = $"file_system.(</>) / target: {v276} / a: {v0} / b: {v1}"
    let v278 : string = failwith<string> v277
    let _run_target_args'_v6 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v279 : US3 = US3_1
    let v280 : US4 = US4_1(v279)
    let v281 : string = $"file_system.(</>) / target: {v280} / a: {v0} / b: {v1}"
    let v282 : string = failwith<string> v281
    let _run_target_args'_v6 = v282 
    #endif
#else
    let v283 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v283 
    #endif
    let v284 : string = _run_target_args'_v6 
    v284
and method35 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_file()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.File.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure15 () (v0 : string) : bool =
    method35(v0)
and method36 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_dir()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.Directory.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure16 () (v0 : string) : bool =
    method36(v0)
and method38 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v115 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v118 
    (* run_target_args'
    let v124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "$0.display()"
    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
    let _run_target_args'_v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "$0.display()"
    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
    let _run_target_args'_v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "$0.display()"
    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
    let _run_target_args'_v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v140 
    #endif
#else
    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v144 
    #endif
    let v147 : std_path_Display = _run_target_args'_v124 
    (* run_target_args'
    let v160 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v161 : string = "format!(\"{}\", $0)"
    let v162 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v161 
    let _run_target_args'_v160 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : string = "format!(\"{}\", $0)"
    let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v163 
    let _run_target_args'_v160 = v164 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v165 : string = "format!(\"{}\", $0)"
    let v166 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v165 
    let _run_target_args'_v160 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v176 
    #endif
#else
    let v180 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v180 
    #endif
    let v183 : std_string_String = _run_target_args'_v160 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v183 v192 
    let v194 : string = "true; $0 })"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr v193 v194 
    let v196 : string = "_optionm_map_"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr () v196 
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v199 : string option = None
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v203 : string option = None
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v206 : string = "path"
    let v207 : IPathDirname = Fable.Core.JsInterop.importAll v206 
    let v208 : string = "v207.dirname($0)"
    let v209 : string = Fable.Core.JsInterop.emitJsExpr v0 v208 
    let v210 : bool = v209 = v0
    let v213 : US5 =
        if v210 then
            US5_1
        else
            US5_0(v209)
    let v224 : string option =
        match v213 with
        | US5_1 -> (* None *)
            let v220 : string option = None
            v220
        | US5_0(v214) -> (* Some *)
            let v216 : string option = Some v214 
            v216
    let _run_target_args'_v5 = v224 
    #endif
#if FABLE_COMPILER_PYTHON
    let v226 : string option = None
    let _run_target_args'_v5 = v226 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v230 : string option = None
    let _run_target_args'_v5 = v230 
    #endif
#else
    let v233 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v234 : System_IO_DirectoryInfo = v233 v0
    let v236 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v240 : bool = v234 = v236 
    let v285 : US5 =
        if v240 then
            US5_1
        else
            (* run_target_args'
            let v248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v250 : string = null |> unbox<string>
            let _run_target_args'_v248 = v250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : string = null |> unbox<string>
            let _run_target_args'_v248 = v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v258 : string = null |> unbox<string>
            let _run_target_args'_v248 = v258 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : string = null |> unbox<string>
            let _run_target_args'_v248 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : string = null |> unbox<string>
            let _run_target_args'_v248 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : string = null |> unbox<string>
            let _run_target_args'_v248 = v270 
            #endif
#else
            let v273 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v274 : string = v273 v234
            let _run_target_args'_v248 = v274 
            #endif
            let v275 : string = _run_target_args'_v248 
            US5_0(v275)
    let v296 : string option =
        match v285 with
        | US5_1 -> (* None *)
            let v292 : string option = None
            v292
        | US5_0(v286) -> (* Some *)
            let v288 : string option = Some v286 
            v288
    let _run_target_args'_v5 = v296 
    #endif
    let v297 : string option = _run_target_args'_v5 
    v297
and method39 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US14 =
    let v5 : string = method33(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US14_0(v4)
    else
        let v8 : string option = method38(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US14_1(v41)
        | US5_0(v37) -> (* Some *)
            method39(v0, v1, v2, v3, v37)
and method37 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US14 =
    let v4 : string = method33(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US14_0(v1)
    else
        let v7 : string option = method38(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US14_1(v40)
        | US5_0(v36) -> (* Some *)
            method39(v0, v1, v2, v3, v36)
and method34 (v0 : US13, v1 : string, v2 : string) : US14 =
    let v3 : bool =
        match v0 with
        | US13_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method37(v1, v2, v3, v6)
and method40 () : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "inline_colorization::color_yellow"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "String::from($0)"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v24 
    #endif
#else
    let v28 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v28 
    #endif
    let v31 : std_string_String = _run_target_args'_v8 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v31 v40 
    let _run_target_args'_v1 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "inline_colorization::color_yellow"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v42 
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v48 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v51 
    let _run_target_args'_v48 = v52 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v53 : string = "String::from($0)"
    let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v53 
    let _run_target_args'_v48 = v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v56 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v56 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v64 
    #endif
#else
    let v68 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v68 
    #endif
    let v71 : std_string_String = _run_target_args'_v48 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v71 v80 
    let _run_target_args'_v1 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "inline_colorization::color_yellow"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v82 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v120 : string = "fable_library_rust::String_::fromString($0)"
    let v121 : string = Fable.Core.RustInterop.emitRustExpr v111 v120 
    let _run_target_args'_v1 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : string = "\u001b[93m"
    let _run_target_args'_v1 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : string = "\u001b[93m"
    let _run_target_args'_v1 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : string = "\u001b[93m"
    let _run_target_args'_v1 = v124 
    #endif
#else
    let v125 : string = "\u001b[93m"
    let _run_target_args'_v1 = v125 
    #endif
    let v126 : string = _run_target_args'_v1 
    
    
    
    
    
    let v131 : string = "Warning"
    let v132 : (unit -> string) = v131.ToLower
    let v133 : string = v132 ()
    let v136 : char = v133.[int 0]
    let v137 : string = method12(v136)
    let v139 : string = v126 + v137 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "inline_colorization::color_reset"
    let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v144 
    (* run_target_args'
    let v150 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v151 
    let _run_target_args'_v150 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v153 
    let _run_target_args'_v150 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = "String::from($0)"
    let v156 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v155 
    let _run_target_args'_v150 = v156 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v166 
    #endif
#else
    let v170 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v170 
    #endif
    let v173 : std_string_String = _run_target_args'_v150 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v173 v182 
    let _run_target_args'_v143 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "inline_colorization::color_reset"
    let v185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v184 
    (* run_target_args'
    let v190 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v191 : string = "String::from($0)"
    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v191 
    let _run_target_args'_v190 = v192 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : string = "String::from($0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v193 
    let _run_target_args'_v190 = v194 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v195 : string = "String::from($0)"
    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v195 
    let _run_target_args'_v190 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v206 
    #endif
#else
    let v210 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v210 
    #endif
    let v213 : std_string_String = _run_target_args'_v190 
    let v222 : string = "fable_library_rust::String_::fromString($0)"
    let v223 : string = Fable.Core.RustInterop.emitRustExpr v213 v222 
    let _run_target_args'_v143 = v223 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v224 : string = "inline_colorization::color_reset"
    let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v224 
    (* run_target_args'
    let v230 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _run_target_args'_v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _run_target_args'_v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _run_target_args'_v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v238 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v238 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v246 
    #endif
#else
    let v250 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v250 
    #endif
    let v253 : std_string_String = _run_target_args'_v230 
    let v262 : string = "fable_library_rust::String_::fromString($0)"
    let v263 : string = Fable.Core.RustInterop.emitRustExpr v253 v262 
    let _run_target_args'_v143 = v263 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v264 : string = "\u001b[0m"
    let _run_target_args'_v143 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : string = "\u001b[0m"
    let _run_target_args'_v143 = v265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v266 : string = "\u001b[0m"
    let _run_target_args'_v143 = v266 
    #endif
#else
    let v267 : string = "\u001b[0m"
    let _run_target_args'_v143 = v267 
    #endif
    let v268 : string = _run_target_args'_v143 
    let v272 : string = v139 + v268 
    v272
and method42 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method41 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method42(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.get_workspace_root"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure17 (v0 : string, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 3 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method40()
            let v125 : string = method41(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method47 (v0 : std_io_Error) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v46 : string = $"{v36}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v2, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v62 : string = v2.l0
    v62
and closure18 () (v0 : std_io_Error) : string =
    method47(v0)
and method46 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method48 () : (std_path_PathBuf -> US15) =
    closure19()
and closure20 () (v0 : string) : US15 =
    US15_1(v0)
and method49 () : (string -> US15) =
    closure20()
and method52 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v200 : US3 = US3_1
    let v201 : US4 = US4_4(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : string = "path"
    let v209 : IPathBasename = Fable.Core.JsInterop.importAll v208 
    let v210 : string = "v209.basename($0)"
    let v211 : string = Fable.Core.JsInterop.emitJsExpr v0 v210 
    let _run_target_args'_v5 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US3 = US3_0
    let v213 : US4 = US4_6(v212)
    let v214 : string = $"file_system.get_file_name / target: {v213} / path: {v0}"
    let v215 : string = failwith<string> v214
    let _run_target_args'_v5 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : US3 = US3_1
    let v217 : US4 = US4_1(v216)
    let v218 : string = $"file_system.get_file_name / target: {v217} / path: {v0}"
    let v219 : string = failwith<string> v218
    let _run_target_args'_v5 = v219 
    #endif
#else
    let v220 : (string -> string) = System.IO.Path.GetFileName
    let v221 : string = v220 v0
    let _run_target_args'_v5 = v221 
    #endif
    let v222 : string = _run_target_args'_v5 
    v222
and method53 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v2, v4)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v20 : string = v2.l0
    v20
and method51 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method52(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method53(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method46()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method48()
                let v118 : (string -> US15) = method49()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method33(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method50 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US15) = method48()
    let v27 : (string -> US15) = method49()
    let v29 : US15 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US15_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v49, v1, v48, v2)
        | US15_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US15) = method48()
    let v72 : (string -> US15) = method49()
    let v74 : US15 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US15_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v94, v1, v93, v2)
        | US15_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US15) = method48()
    let v117 : (string -> US15) = method49()
    let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US15_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v139, v1, v138, v2)
        | US15_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method50(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method54 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method52(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method53(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method46()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method48()
                let v117 : (string -> US15) = method49()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method33(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method45 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US15) = method48()
    let v26 : (string -> US15) = method49()
    let v28 : US15 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US15_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v48, v1, v47)
        | US15_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US15) = method48()
    let v71 : (string -> US15) = method49()
    let v73 : US15 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US15_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v93, v1, v92)
        | US15_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method46()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US15) = method48()
    let v116 : (string -> US15) = method49()
    let v118 : US15 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US15_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v138, v1, v137)
        | US15_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method56 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method57 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method58 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method60 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method52(v4)
    let v6 : string option = method38(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method47(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method46()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method48()
                let v118 : (string -> US15) = method49()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method33(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method59 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v45 : System.IO.FileAttributes = method56(v36)
    let v46 : System.IO.FileAttributes = method57()
    let v47 : bool = method58(v46, v45)
    if v47 then
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v62 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v66 
        #endif
#if FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v70 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v74 
        #endif
#else
        let v78 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v52 = v78 
        #endif
        let v81 : System_IO_FileInfo = _run_target_args'_v52 
        (* run_target_args'
        let v94 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v96 : string = null |> unbox<string>
        let _run_target_args'_v94 = v96 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v100 : string = null |> unbox<string>
        let _run_target_args'_v94 = v100 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v104 : string = null |> unbox<string>
        let _run_target_args'_v94 = v104 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v108 : string = null |> unbox<string>
        let _run_target_args'_v94 = v108 
        #endif
#if FABLE_COMPILER_PYTHON
        let v112 : string = null |> unbox<string>
        let _run_target_args'_v94 = v112 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v116 : string = null |> unbox<string>
        let _run_target_args'_v94 = v116 
        #endif
#else
        let v119 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v120 : string = v119 v81
        let _run_target_args'_v94 = v120 
        #endif
        let v121 : string = _run_target_args'_v94 
        let v131 : std_path_PathBuf = v121 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v135 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v136 : string = "Ok($0)"
        let v137 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v136 
        let _run_target_args'_v135 = v137 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v138 : string = "Ok($0)"
        let v139 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v138 
        let _run_target_args'_v135 = v139 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v140 : string = "Ok($0)"
        let v141 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v140 
        let _run_target_args'_v135 = v141 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v142 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v142 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v144 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v144 
        #endif
#else
        let v145 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v145 
        #endif
        let v146 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v135 
        v146
    else
        let v149 : string = $"file_system.read_link / Fsharp / "
        let v150 : string = $"The file or directory is not a reparse point. / "
        let v151 : string = v149 + v150 
        let v152 : string = $"path: {v0} / result: {v47} / path': {v2} / n: {v1}"
        let v153 : string = v151 + v152 
        (* run_target_args'
        let v158 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v160 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v159 
        let _run_target_args'_v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v162 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v161 
        let _run_target_args'_v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v164 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v163 
        let _run_target_args'_v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v166 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v166 
        #endif
#if FABLE_COMPILER_PYTHON
        let v170 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v170 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v174 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v174 
        #endif
#else
        let v178 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v178 
        #endif
        let v181 : std_io_Error = _run_target_args'_v158 
        let v190 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method60(v0, v190, v1, v181, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method59(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method61 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method52(v0)
    let v5 : string option = method38(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method47(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method46()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method48()
                let v117 : (string -> US15) = method49()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method33(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method55 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v44 : System.IO.FileAttributes = method56(v35)
    let v45 : System.IO.FileAttributes = method57()
    let v46 : bool = method58(v45, v44)
    if v46 then
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v77 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v51 = v77 
        #endif
        let v80 : System_IO_FileInfo = _run_target_args'_v51 
        (* run_target_args'
        let v93 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v95 : string = null |> unbox<string>
        let _run_target_args'_v93 = v95 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : string = null |> unbox<string>
        let _run_target_args'_v93 = v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v103 : string = null |> unbox<string>
        let _run_target_args'_v93 = v103 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v107 : string = null |> unbox<string>
        let _run_target_args'_v93 = v107 
        #endif
#if FABLE_COMPILER_PYTHON
        let v111 : string = null |> unbox<string>
        let _run_target_args'_v93 = v111 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v115 : string = null |> unbox<string>
        let _run_target_args'_v93 = v115 
        #endif
#else
        let v118 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v119 : string = v118 v80
        let _run_target_args'_v93 = v119 
        #endif
        let v120 : string = _run_target_args'_v93 
        let v130 : std_path_PathBuf = v120 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "Ok($0)"
        let v136 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "Ok($0)"
        let v138 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "Ok($0)"
        let v140 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v134 
        v145
    else
        let v148 : string = $"file_system.read_link / Fsharp / "
        let v149 : string = $"The file or directory is not a reparse point. / "
        let v150 : string = v148 + v149 
        let v151 : string = $"path: {v0} / result: {v46} / path': {v0} / n: {v1}"
        let v152 : string = v150 + v151 
        (* run_target_args'
        let v157 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v159 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v158 
        let _run_target_args'_v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v161 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v160 
        let _run_target_args'_v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v163 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v162 
        let _run_target_args'_v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v169 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v169 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v173 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v173 
        #endif
#else
        let v177 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v177 
        #endif
        let v180 : std_io_Error = _run_target_args'_v157 
        let v189 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method61(v0, v189, v1, v180)
and method44 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method45(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method36(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method45(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method36(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method45(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method55(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method55(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method55(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US16 =
    US16_0(v0)
and method62 () : (std_path_PathBuf -> US16) =
    closure25()
and method64 (v0 : string) : string =
    v0
and method65 () : string =
    let v0 : string = ""
    v0
and method63 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method64(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method65()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method65()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method65()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method65()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method65()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method43 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method44(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US16) = method62()
        let v22 : US16 option = v16 |> Option.map v21 
        let v42 : US16 = US16_1
        let v43 : US16 = v22 |> Option.defaultValue v42 
        let v89 : string =
            match v43 with
            | US16_1 -> (* None *)
                v0
            | US16_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v85 : string = v75 |> string 
                v85
        let v90 : bool = v89 = ""
        let v91 : string =
            if v90 then
                v0
            else
                v89
        let v92 : string = "^\\\\\\\\\\?\\\\"
        let v93 : string = ""
        let v94 : string = method63(v92, v93, v91)
        let v95 : int32 = v94.Length
        let v96 : bool = v95 < 2
        if v96 then
            v0
        else
            let v97 : string = $"{v94.[0] |> string |> _.ToLower()}{v94.[1..]}"
            let v98 : string = "\\"
            let v99 : string = "/"
            let v100 : string = v97.Replace (v98, v99)
            v100
and method32 (v0 : string) : US5 =
    let v1 : US13 = US13_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method33(v2, v3)
    let v5 : US14 = method34(v1, v4, v0)
    match v5 with
    | US14_1(v9) -> (* Error *)
        let v321 : unit = ()
        let v322 : (unit -> unit) = closure17(v0, v9)
        let v323 : unit = (fun () -> v322 (); v321) ()
        US5_1
    | US14_0(v6) -> (* Ok *)
        let v7 : string = method43(v6)
        US5_0(v7)
and method68 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method69 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method67 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : bool = v115 = false
    let v315 : string =
        if v116 then
            let v117 : string = method31()
            let v118 : string = method33(v117, v0)
            let v119 : string = method43(v118)
            let v130 : string = "/"
            let v131 : (string []) = v119.Split v130 
            let v134 : (string []) = [||]
            let v135 : int32 = v131.Length
            let v136 : Mut6 = {l0 = 0; l1 = 0; l2 = v134} : Mut6
            while method68(v135, v136) do
                let v138 : int32 = v136.l0
                let v139 : int32 =  -v138
                let v140 : int32 = v139 + v135
                let v141 : int32 = v140 - 1
                let struct (v142 : int32, v143 : (string [])) = v136.l1, v136.l2
                let v144 : string = v131.[int v141]
                let v145 : bool = ".." = v144
                let struct (v191 : int32, v192 : (string [])) =
                    if v145 then
                        let v146 : int32 = v142 + 1
                        struct (v146, v143)
                    else
                        let v147 : bool = "." = v144
                        if v147 then
                            struct (v142, v143)
                        else
                            let v148 : bool = 0 = v142
                            if v148 then
                                let v151 : string = ":"
                                let v152 : bool = v144.EndsWith (v151, false, null)
                                if v152 then
                                    let v155 : string = $"{v117.[0]}:"
                                    let v156 : (string []) = [|v155|]
                                    let v157 : int32 = v156.Length
                                    let v158 : int32 = v143.Length
                                    let v159 : int32 = v157 + v158
                                    let v160 : (string []) = Array.zeroCreate<string> (v159)
                                    let v161 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v159, v161) do
                                        let v163 : int32 = v161.l0
                                        let v164 : bool = v163 < v157
                                        let v168 : string =
                                            if v164 then
                                                let v165 : string = v156.[int v163]
                                                v165
                                            else
                                                let v166 : int32 = v163 - v157
                                                let v167 : string = v143.[int v166]
                                                v167
                                        v160.[int v163] <- v168
                                        let v169 : int32 = v163 + 1
                                        v161.l0 <- v169
                                        ()
                                    struct (0, v160)
                                else
                                    let v170 : (string []) = [|v144|]
                                    let v171 : int32 = v170.Length
                                    let v172 : int32 = v143.Length
                                    let v173 : int32 = v171 + v172
                                    let v174 : (string []) = Array.zeroCreate<string> (v173)
                                    let v175 : Mut5 = {l0 = 0} : Mut5
                                    while method29(v173, v175) do
                                        let v177 : int32 = v175.l0
                                        let v178 : bool = v177 < v171
                                        let v182 : string =
                                            if v178 then
                                                let v179 : string = v170.[int v177]
                                                v179
                                            else
                                                let v180 : int32 = v177 - v171
                                                let v181 : string = v143.[int v180]
                                                v181
                                        v174.[int v177] <- v182
                                        let v183 : int32 = v177 + 1
                                        v175.l0 <- v183
                                        ()
                                    struct (0, v174)
                            else
                                let v186 : int32 = v142 - 1
                                struct (v186, v143)
                let v193 : int32 = v138 + 1
                v136.l0 <- v193
                v136.l1 <- v191
                v136.l2 <- v192
                ()
            let struct (v194 : int32, v195 : (string [])) = v136.l1, v136.l2
            let v200 : unit = ()
            let _let'_v200 =
                seq {
                    for i = 0 to v195.Length - 1 do yield v195.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v203 : string seq = _let'_v200 
            let v209 : char = method69()
            let v211 : (char -> string) = _.ToString()
            let v212 : string = v211 v209
            let v216 : bool = v212 = "\n"
            let v218 : string =
                if v216 then
                    method28(v212)
                else
                    v212
            let v219 : (string -> (string seq -> string)) = String.concat
            let v220 : (string seq -> string) = v219 v218
            v220 v203
        else
            let v224 : string = "std::fs::canonicalize(&*$0)"
            let v225 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v224 
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "$0.unwrap()"
            let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "$0.unwrap()"
            let v231 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "$0.unwrap()"
            let v233 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v236 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v236 
            #endif
#else
            let v237 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v237 
            #endif
            let v238 : std_path_PathBuf = _run_target_args'_v227 
            (* run_target_args'
            let v245 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v246 : string = "$0.display()"
            let v247 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v246 
            let _run_target_args'_v245 = v247 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v248 : string = "$0.display()"
            let v249 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v248 
            let _run_target_args'_v245 = v249 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v250 : string = "$0.display()"
            let v251 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v250 
            let _run_target_args'_v245 = v251 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v253 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v253 
            #endif
#if FABLE_COMPILER_PYTHON
            let v257 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v257 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v261 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v261 
            #endif
#else
            let v265 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v265 
            #endif
            let v268 : std_path_Display = _run_target_args'_v245 
            (* run_target_args'
            let v281 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v282 : string = "format!(\"{}\", $0)"
            let v283 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v282 
            let _run_target_args'_v281 = v283 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v284 : string = "format!(\"{}\", $0)"
            let v285 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v284 
            let _run_target_args'_v281 = v285 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v286 : string = "format!(\"{}\", $0)"
            let v287 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v286 
            let _run_target_args'_v281 = v287 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v289 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v289 
            #endif
#if FABLE_COMPILER_PYTHON
            let v293 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v293 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v297 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v297 
            #endif
#else
            let v301 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v301 
            #endif
            let v304 : std_string_String = _run_target_args'_v281 
            let v313 : string = "fable_library_rust::String_::fromString($0)"
            let v314 : string = Fable.Core.RustInterop.emitRustExpr v304 v313 
            v314
    let _run_target_args'_v5 = v315 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = null |> unbox<string>
    let _run_target_args'_v5 = v317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = null |> unbox<string>
    let _run_target_args'_v5 = v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v325 : string = null |> unbox<string>
    let _run_target_args'_v5 = v325 
    #endif
#if FABLE_COMPILER_PYTHON
    let v329 : string = null |> unbox<string>
    let _run_target_args'_v5 = v329 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v333 : string = null |> unbox<string>
    let _run_target_args'_v5 = v333 
    #endif
#else
    let v336 : (string -> string) = System.IO.Path.GetFullPath
    let v337 : string = v336 v0
    let _run_target_args'_v5 = v337 
    #endif
    let v338 : string = _run_target_args'_v5 
    v338
and method66 (v0 : string) : string =
    let v1 : string = method67(v0)
    method43(v1)
and method71 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method36(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure26 (v0 : string) () : unit =
    let v1 : string = "CI"
    let v2 : string = method3(v1)
    let v3 : bool = v2 = ""
    let v4 : bool = v3 <> true
    if v4 then
        let v5 : bool = true
        method71(v5, v0)
and method70 (v0 : string) : (unit -> unit) =
    closure26(v0)
and method72 (v0 : string) : (unit -> unit) =
    closure26(v0)
and method73 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method74 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method75 () : string =
    let v0 : string = "\n"
    v0
and method77 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method35(v0)
    let v8 : bool = v7 = false
    let v119 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v68 : Vec<uint8> = method24(v59)
            let v69 : string = "std::string::String::from_utf8($0)"
            let v70 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v68 v69 
            (* run_target_args'
            let v72 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v73 : string = "$0.unwrap()"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v73 
            let _run_target_args'_v72 = v74 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v75 : string = "$0.unwrap()"
            let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v75 
            let _run_target_args'_v72 = v76 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v77 
            let _run_target_args'_v72 = v78 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v79 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v80 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v81 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v81 
            #endif
#else
            let v82 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v82 
            #endif
            let v83 : std_string_String = _run_target_args'_v72 
            let v86 : string = "fable_library_rust::String_::fromString($0)"
            let v87 : string = Fable.Core.RustInterop.emitRustExpr v83 v86 
            let _run_target_args'_v13 = v87 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v89 : string = null |> unbox<string>
            let _run_target_args'_v13 = v89 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v93 : string = null |> unbox<string>
            let _run_target_args'_v13 = v93 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v97 : string = null |> unbox<string>
            let _run_target_args'_v13 = v97 
            #endif
#if FABLE_COMPILER_PYTHON
            let v101 : string = null |> unbox<string>
            let _run_target_args'_v13 = v101 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            let _run_target_args'_v13 = v105 
            #endif
#else
            let v108 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v108 
            #endif
            let v109 : string = _run_target_args'_v13 
            let v118 : bool = v1 = v109
            v118
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v121 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v137 
    #endif
#else
    let v141 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v141 
    #endif
    let v144 : bool = _run_target_args'_v6 
    v144
and closure27 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method79 () : (std_io_Error -> std_string_String) =
    closure27()
and closure28 () () : US17 =
    US17_0
and method80 () : (unit -> US17) =
    closure28()
and closure29 () (v0 : std_string_String) : US17 =
    US17_1(v0)
and method81 () : (std_string_String -> US17) =
    closure29()
and method82 () : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "inline_colorization::color_bright_red"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "String::from($0)"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v24 
    #endif
#else
    let v28 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v28 
    #endif
    let v31 : std_string_String = _run_target_args'_v8 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v31 v40 
    let _run_target_args'_v1 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "inline_colorization::color_bright_red"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v42 
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v48 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v51 
    let _run_target_args'_v48 = v52 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v53 : string = "String::from($0)"
    let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v53 
    let _run_target_args'_v48 = v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v56 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v56 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v64 
    #endif
#else
    let v68 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v68 
    #endif
    let v71 : std_string_String = _run_target_args'_v48 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v71 v80 
    let _run_target_args'_v1 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "inline_colorization::color_bright_red"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v82 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v120 : string = "fable_library_rust::String_::fromString($0)"
    let v121 : string = Fable.Core.RustInterop.emitRustExpr v111 v120 
    let _run_target_args'_v1 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : string = "\u001b[91m"
    let _run_target_args'_v1 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : string = "\u001b[91m"
    let _run_target_args'_v1 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : string = "\u001b[91m"
    let _run_target_args'_v1 = v124 
    #endif
#else
    let v125 : string = "\u001b[91m"
    let _run_target_args'_v1 = v125 
    #endif
    let v126 : string = _run_target_args'_v1 
    
    
    
    
    
    let v131 : string = "Critical"
    let v132 : (unit -> string) = v131.ToLower
    let v133 : string = v132 ()
    let v136 : char = v133.[int 0]
    let v137 : string = method12(v136)
    let v139 : string = v126 + v137 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "inline_colorization::color_reset"
    let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v144 
    (* run_target_args'
    let v150 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v151 
    let _run_target_args'_v150 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v153 
    let _run_target_args'_v150 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = "String::from($0)"
    let v156 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v155 
    let _run_target_args'_v150 = v156 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v166 
    #endif
#else
    let v170 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v170 
    #endif
    let v173 : std_string_String = _run_target_args'_v150 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v173 v182 
    let _run_target_args'_v143 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "inline_colorization::color_reset"
    let v185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v184 
    (* run_target_args'
    let v190 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v191 : string = "String::from($0)"
    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v191 
    let _run_target_args'_v190 = v192 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : string = "String::from($0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v193 
    let _run_target_args'_v190 = v194 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v195 : string = "String::from($0)"
    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v195 
    let _run_target_args'_v190 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v206 
    #endif
#else
    let v210 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v210 
    #endif
    let v213 : std_string_String = _run_target_args'_v190 
    let v222 : string = "fable_library_rust::String_::fromString($0)"
    let v223 : string = Fable.Core.RustInterop.emitRustExpr v213 v222 
    let _run_target_args'_v143 = v223 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v224 : string = "inline_colorization::color_reset"
    let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v224 
    (* run_target_args'
    let v230 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _run_target_args'_v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _run_target_args'_v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _run_target_args'_v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v238 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v238 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v246 
    #endif
#else
    let v250 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v250 
    #endif
    let v253 : std_string_String = _run_target_args'_v230 
    let v262 : string = "fable_library_rust::String_::fromString($0)"
    let v263 : string = Fable.Core.RustInterop.emitRustExpr v253 v262 
    let _run_target_args'_v143 = v263 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v264 : string = "\u001b[0m"
    let _run_target_args'_v143 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : string = "\u001b[0m"
    let _run_target_args'_v143 = v265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v266 : string = "\u001b[0m"
    let _run_target_args'_v143 = v266 
    #endif
#else
    let v267 : string = "\u001b[0m"
    let _run_target_args'_v143 = v267 
    #endif
    let v268 : string = _run_target_args'_v143 
    let v272 : string = v139 + v268 
    v272
and method84 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    (* run_target_args'
    let v137 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v138 : string = "format!(\"{:#?}\", $0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v138 
    let v140 : string = "fable_library_rust::String_::fromString($0)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr v139 v140 
    let _run_target_args'_v137 = v141 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v142 : string = "format!(\"{:#?}\", $0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v142 
    let v144 : string = "fable_library_rust::String_::fromString($0)"
    let v145 : string = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let _run_target_args'_v137 = v145 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v146 : string = "format!(\"{:#?}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v146 
    let v148 : string = "fable_library_rust::String_::fromString($0)"
    let v149 : string = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let _run_target_args'_v137 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string = $"%A{v1}"
    let _run_target_args'_v137 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : string = $"%A{v1}"
    let _run_target_args'_v137 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : string = $"%A{v1}"
    let _run_target_args'_v137 = v159 
    #endif
#else
    let v163 : string = $"%A{v1}"
    let _run_target_args'_v137 = v163 
    #endif
    let v166 : string = _run_target_args'_v137 
    let v176 : string = $"{v166}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v3, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v194 : string = " }"
    let v195 : string = $"{v194}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v3, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v211 : string = v3.l0
    v211
and method83 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method84(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.create_dir"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure30 (v0 : string, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method83(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method85 () : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "inline_colorization::color_bright_black"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "String::from($0)"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v24 
    #endif
#else
    let v28 : std_string_String = v3 |> unbox<std_string_String>
    let _run_target_args'_v8 = v28 
    #endif
    let v31 : std_string_String = _run_target_args'_v8 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v31 v40 
    let _run_target_args'_v1 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "inline_colorization::color_bright_black"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v42 
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v48 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v51 
    let _run_target_args'_v48 = v52 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v53 : string = "String::from($0)"
    let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v43 v53 
    let _run_target_args'_v48 = v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v56 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v56 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v64 
    #endif
#else
    let v68 : std_string_String = v43 |> unbox<std_string_String>
    let _run_target_args'_v48 = v68 
    #endif
    let v71 : std_string_String = _run_target_args'_v48 
    let v80 : string = "fable_library_rust::String_::fromString($0)"
    let v81 : string = Fable.Core.RustInterop.emitRustExpr v71 v80 
    let _run_target_args'_v1 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "inline_colorization::color_bright_black"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v82 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v120 : string = "fable_library_rust::String_::fromString($0)"
    let v121 : string = Fable.Core.RustInterop.emitRustExpr v111 v120 
    let _run_target_args'_v1 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : string = "\u001b[90m"
    let _run_target_args'_v1 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : string = "\u001b[90m"
    let _run_target_args'_v1 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : string = "\u001b[90m"
    let _run_target_args'_v1 = v124 
    #endif
#else
    let v125 : string = "\u001b[90m"
    let _run_target_args'_v1 = v125 
    #endif
    let v126 : string = _run_target_args'_v1 
    
    
    
    
    
    let v131 : string = "Verbose"
    let v132 : (unit -> string) = v131.ToLower
    let v133 : string = v132 ()
    let v136 : char = v133.[int 0]
    let v137 : string = method12(v136)
    let v139 : string = v126 + v137 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "inline_colorization::color_reset"
    let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v144 
    (* run_target_args'
    let v150 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v151 
    let _run_target_args'_v150 = v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v153 
    let _run_target_args'_v150 = v154 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v155 : string = "String::from($0)"
    let v156 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v155 
    let _run_target_args'_v150 = v156 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v166 
    #endif
#else
    let v170 : std_string_String = v145 |> unbox<std_string_String>
    let _run_target_args'_v150 = v170 
    #endif
    let v173 : std_string_String = _run_target_args'_v150 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v173 v182 
    let _run_target_args'_v143 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "inline_colorization::color_reset"
    let v185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v184 
    (* run_target_args'
    let v190 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v191 : string = "String::from($0)"
    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v191 
    let _run_target_args'_v190 = v192 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : string = "String::from($0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v193 
    let _run_target_args'_v190 = v194 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v195 : string = "String::from($0)"
    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v195 
    let _run_target_args'_v190 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v206 
    #endif
#else
    let v210 : std_string_String = v185 |> unbox<std_string_String>
    let _run_target_args'_v190 = v210 
    #endif
    let v213 : std_string_String = _run_target_args'_v190 
    let v222 : string = "fable_library_rust::String_::fromString($0)"
    let v223 : string = Fable.Core.RustInterop.emitRustExpr v213 v222 
    let _run_target_args'_v143 = v223 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v224 : string = "inline_colorization::color_reset"
    let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v224 
    (* run_target_args'
    let v230 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _run_target_args'_v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _run_target_args'_v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _run_target_args'_v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v238 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v238 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v246 
    #endif
#else
    let v250 : std_string_String = v225 |> unbox<std_string_String>
    let _run_target_args'_v230 = v250 
    #endif
    let v253 : std_string_String = _run_target_args'_v230 
    let v262 : string = "fable_library_rust::String_::fromString($0)"
    let v263 : string = Fable.Core.RustInterop.emitRustExpr v253 v262 
    let _run_target_args'_v143 = v263 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v264 : string = "\u001b[0m"
    let _run_target_args'_v143 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : string = "\u001b[0m"
    let _run_target_args'_v143 = v265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v266 : string = "\u001b[0m"
    let _run_target_args'_v143 = v266 
    #endif
#else
    let v267 : string = "\u001b[0m"
    let _run_target_args'_v143 = v267 
    #endif
    let v268 : string = _run_target_args'_v143 
    let v272 : string = v139 + v268 
    v272
and method87 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "dir"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method86 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method87(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.create_dir"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure31 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method85()
            let v124 : string = method86(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure32 (v0 : string) () : unit =
    let v1 : bool = true
    method71(v1, v0)
and method88 (v0 : string) : (unit -> unit) =
    closure32(v0)
and method89 (v0 : string) : (unit -> unit) =
    closure32(v0)
and method78 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "std::fs::create_dir_all(&*$0)"
    let v7 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let v8 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v7, v8) v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v7, v8) v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v7, v8) v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Result<unit, std_string_String> = match v7 with Ok x -> Ok x | Error x -> Error (v8 x)
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Result<unit, std_string_String> = match v7 with Ok x -> Ok x | Error x -> Error (v8 x)
    let _run_target_args'_v10 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Result<unit, std_string_String> = match v7 with Ok x -> Ok x | Error x -> Error (v8 x)
    let _run_target_args'_v10 = v19 
    #endif
#else
    let v20 : Result<unit, std_string_String> = match v7 with Ok x -> Ok x | Error x -> Error (v8 x)
    let _run_target_args'_v10 = v20 
    #endif
    let v21 : Result<unit, std_string_String> = _run_target_args'_v10 
    let v24 : (unit -> US17) = method80()
    let v25 : (std_string_String -> US17) = method81()
    let v27 : US17 = match v21 with Ok () -> v24 () | Error x -> v25 x
    match v27 with
    | US17_1(v658) -> (* Error *)
        let v970 : unit = ()
        let v971 : (unit -> unit) = closure30(v0, v658)
        let v972 : unit = (fun () -> v971 (); v970) ()
        ()
    | US17_0 -> (* Ok *)
        let v341 : unit = ()
        let v342 : (unit -> unit) = closure31(v0)
        let v343 : unit = (fun () -> v342 (); v341) ()
        ()
    (* run_target_args'
    let v1291 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1292 : (unit -> unit) = method88(v0)
    let v1293 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1292 "$0()" )
    let _run_target_args'_v1291 = v1293 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1294 : (unit -> unit) = method88(v0)
    let v1295 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1294 "$0()" )
    let _run_target_args'_v1291 = v1295 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1296 : (unit -> unit) = method88(v0)
    let v1297 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1296 "$0()" )
    let _run_target_args'_v1291 = v1297 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1298 : (unit -> unit) = method89(v0)
    let v1299 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1298 () }
    let _run_target_args'_v1291 = v1299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1300 : (unit -> unit) = method89(v0)
    let v1301 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1300 () }
    let _run_target_args'_v1291 = v1301 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1302 : (unit -> unit) = method89(v0)
    let v1303 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1302 () }
    let _run_target_args'_v1291 = v1303 
    #endif
#else
    let v1304 : (unit -> unit) = method89(v0)
    let v1305 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1304 () }
    let _run_target_args'_v1291 = v1305 
    #endif
    let v1306 : System.IDisposable = _run_target_args'_v1291 
    let _run_target_args'_v5 = v1306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1314 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1314 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1318 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1322 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1322 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1326 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1326 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1330 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1330 
    #endif
#else
    let v1334 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v5 = v1334 
    #endif
    let v1337 : System.IDisposable = _run_target_args'_v5 
    v1337
and method76 (v0 : string, v1 : string) : unit =
    let v2 : bool = method77(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method38(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method36(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method78(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method91 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : string =
    v0
and method93 () : string =
    let v0 : string = ""
    v0
and method94 (v0 : char, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "c"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v67 : string = $"{v0}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "s"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "format!(\"{:#?}\", $0)"
    let v144 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v143 
    let v145 : string = "fable_library_rust::String_::fromString($0)"
    let v146 : string = Fable.Core.RustInterop.emitRustExpr v144 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = "format!(\"{:#?}\", $0)"
    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v147 
    let v149 : string = "fable_library_rust::String_::fromString($0)"
    let v150 : string = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = "format!(\"{:#?}\", $0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v151 
    let v153 : string = "fable_library_rust::String_::fromString($0)"
    let v154 : string = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let _run_target_args'_v142 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v160 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v160 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v164 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v164 
    #endif
#else
    let v168 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v168 
    #endif
    let v171 : string = _run_target_args'_v142 
    let v181 : string = $"{v171}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v181)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v5, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v216 : string = v5.l0
    v216
and method95 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method95(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method96 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v26 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v17 : (char -> string) = _.ToString()
                let v18 : string = v17 v4
                let v22 : (string -> System.Text.StringBuilder) = v1.Append
                let v23 : System.Text.StringBuilder = v22 v18
                v1
        method96(v5, v26, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and method97 (v0 : char, v1 : int32, v2 : int32) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "expected"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "line"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v4, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v84}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v4, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "col"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v4, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v45}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v4, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v214 : string = $"{v2}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v4, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v232 : string = " }"
    let v233 : string = $"{v232}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v4, v233)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v249 : string = v4.l0
    v249
and closure34 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method98(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method98 (v0 : int32, v1 : int32) : (string -> string) =
    closure34(v0, v1)
and closure33 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : char = '"'
        let v6 : string = method94(v5, v1, v2, v3)
        let v9 : string = "parsing.p_char / unexpected end of input / "
        let v10 : string = v9 + v6 
        US19_1(v10)
    else
        let v14 : char = v0.[int 0]
        let v15 : bool = v14 = '"'
        if v15 then
            let v17 : (string -> int32) = String.length
            let v18 : int32 = v17 v0
            let v22 : int32 = 1
            let v28 : int32 = 1 |> int32 
            let v41 : int32 = v18 |> int32 
            let v49 : int32 = v41 - v22
            let v51 : string = v0.[int v28..int v49]
            let v56 : (char -> string) = _.ToString()
            let v57 : string = v56 v14
            let v60 : int64 = System.Convert.ToInt64 v57.Length
            let v61 : int64 = 0L
            let v62 : UH0 = method95(v60, v57, v61)
            let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method96(v62, v1, v2, v3)
            US19_0(v14, v51, v63, v64, v65)
        else
            let v70 : string = "\n"
            let v71 : int32 = v0.IndexOf v70 
            let v74 : int32 = v71 - 1
            let v75 : bool = -2 = v74
            let v83 : int32 =
                if v75 then
                    let v77 : (string -> int32) = String.length
                    let v78 : int32 = v77 v0
                    let v81 : int32 = v78 + 1
                    v81
                else
                    let v82 : int32 = v74 + 1
                    v82
            let v85 : int32 = 1
            let v91 : int32 = 0 |> int32 
            let v104 : int32 = v83 |> int32 
            let v112 : int32 = v104 - v85
            let v114 : string = v0.[int v91..int v112]
            let v118 : char = '"'
            let v119 : string = method97(v118, v2, v3)
            let v122 : string = "parsing.p_char / "
            let v123 : string = v122 + v119 
            let v127 : string = v123 + v70 
            let v131 : (System.Text.StringBuilder -> string) = _.ToString()
            let v132 : string = v131 v1
            let v136 : string = v127 + v132 
            let v140 : string = v136 + v114 
            let v143 : int32 = v3 - 1
            let v144 : int32 = 0
            let v145 : (string -> string) = method98(v143, v144)
            let v146 : string = ""
            let v147 : string = v145 v146
            let v150 : string = "^"
            let v151 : string = v147 + v150 
            let v155 : string = v140 + v70 
            let v159 : string = v155 + v151 
            let v163 : string = v159 + v70 
            US19_1(v163)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : char = '''
        let v6 : string = method94(v5, v1, v2, v3)
        let v9 : string = "parsing.p_char / unexpected end of input / "
        let v10 : string = v9 + v6 
        US19_1(v10)
    else
        let v14 : char = v0.[int 0]
        let v15 : bool = v14 = '''
        if v15 then
            let v17 : (string -> int32) = String.length
            let v18 : int32 = v17 v0
            let v22 : int32 = 1
            let v28 : int32 = 1 |> int32 
            let v41 : int32 = v18 |> int32 
            let v49 : int32 = v41 - v22
            let v51 : string = v0.[int v28..int v49]
            let v56 : (char -> string) = _.ToString()
            let v57 : string = v56 v14
            let v60 : int64 = System.Convert.ToInt64 v57.Length
            let v61 : int64 = 0L
            let v62 : UH0 = method95(v60, v57, v61)
            let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method96(v62, v1, v2, v3)
            US19_0(v14, v51, v63, v64, v65)
        else
            let v70 : string = "\n"
            let v71 : int32 = v0.IndexOf v70 
            let v74 : int32 = v71 - 1
            let v75 : bool = -2 = v74
            let v83 : int32 =
                if v75 then
                    let v77 : (string -> int32) = String.length
                    let v78 : int32 = v77 v0
                    let v81 : int32 = v78 + 1
                    v81
                else
                    let v82 : int32 = v74 + 1
                    v82
            let v85 : int32 = 1
            let v91 : int32 = 0 |> int32 
            let v104 : int32 = v83 |> int32 
            let v112 : int32 = v104 - v85
            let v114 : string = v0.[int v91..int v112]
            let v118 : char = '''
            let v119 : string = method97(v118, v2, v3)
            let v122 : string = "parsing.p_char / "
            let v123 : string = v122 + v119 
            let v127 : string = v123 + v70 
            let v131 : (System.Text.StringBuilder -> string) = _.ToString()
            let v132 : string = v131 v1
            let v136 : string = v127 + v132 
            let v140 : string = v136 + v114 
            let v143 : int32 = v3 - 1
            let v144 : int32 = 0
            let v145 : (string -> string) = method98(v143, v144)
            let v146 : string = ""
            let v147 : string = v145 v146
            let v150 : string = "^"
            let v151 : string = v147 + v150 
            let v155 : string = v140 + v70 
            let v159 : string = v155 + v151 
            let v163 : string = v159 + v70 
            US19_1(v163)
and method99 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US19 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US19 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US19_1(v13) -> (* Error *)
            method99(v0, v1, v6)
        | US19_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US19_1(v3)
and method100 (v0 : (char [])) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = $"%A{v0}"
    let v9 : string = $"{v5}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v2, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v25 : string = v2.l0
    v25
and method101 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "chars"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v64 : string = $"{v0}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v5, v64)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v82 : string = "; "
    let v83 : string = $"{v82}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v5, v83)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v101 : string = "s"
    let v102 : string = $"{v101}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v5, v102)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v119 : string = $"{v46}"
    let v127 : unit = ()
    let v128 : (unit -> unit) = closure7(v5, v119)
    let v129 : unit = (fun () -> v128 (); v127) ()
    (* run_target_args'
    let v139 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v140 : string = "format!(\"{:#?}\", $0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v140 
    let v142 : string = "fable_library_rust::String_::fromString($0)"
    let v143 : string = Fable.Core.RustInterop.emitRustExpr v141 v142 
    let _run_target_args'_v139 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v144 : string = "format!(\"{:#?}\", $0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v144 
    let v146 : string = "fable_library_rust::String_::fromString($0)"
    let v147 : string = Fable.Core.RustInterop.emitRustExpr v145 v146 
    let _run_target_args'_v139 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "format!(\"{:#?}\", $0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v148 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v149 v150 
    let _run_target_args'_v139 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v153 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v157 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v161 
    #endif
#else
    let v165 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v165 
    #endif
    let v168 : string = _run_target_args'_v139 
    let v178 : string = $"{v168}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v196 : string = " }"
    let v197 : string = $"{v196}"
    let v205 : unit = ()
    let v206 : (unit -> unit) = closure7(v5, v197)
    let v207 : unit = (fun () -> v206 (); v205) ()
    let v213 : string = v5.l0
    v213
and method102 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US21_1
        let v15 : char =
            match v11 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method102(v0, v17)
and method103 (v0 : char, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "first_char"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "chars"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "s"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    (* run_target_args'
    let v213 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v214 : string = "format!(\"{:#?}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v214 
    let v216 : string = "fable_library_rust::String_::fromString($0)"
    let v217 : string = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let _run_target_args'_v213 = v217 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v218 : string = "format!(\"{:#?}\", $0)"
    let v219 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v218 
    let v220 : string = "fable_library_rust::String_::fromString($0)"
    let v221 : string = Fable.Core.RustInterop.emitRustExpr v219 v220 
    let _run_target_args'_v213 = v221 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v222 : string = "format!(\"{:#?}\", $0)"
    let v223 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v222 
    let v224 : string = "fable_library_rust::String_::fromString($0)"
    let v225 : string = Fable.Core.RustInterop.emitRustExpr v223 v224 
    let _run_target_args'_v213 = v225 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v227 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v227 
    #endif
#if FABLE_COMPILER_PYTHON
    let v231 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v231 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v235 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v235 
    #endif
#else
    let v239 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v239 
    #endif
    let v242 : string = _run_target_args'_v213 
    let v252 : string = $"{v242}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v6, v252)
    let v262 : unit = (fun () -> v261 (); v260) ()
    let v270 : string = " }"
    let v271 : string = $"{v270}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v6, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v287 : string = v6.l0
    v287
and method104 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v176 : US19 =
        if v5 then
            let v16 : char list = []
            let v18 : char list = ''' :: v16 
            let v22 : char list = '"' :: v18 
            let v30 : (char list -> (char [])) = List.toArray
            let v31 : (char []) = v30 v22
            let v34 : string = method100(v31)
            let v55 : string = method101(v34, v2, v3, v4)
            let v58 : string = "parsing.none_of / unexpected end of input / "
            let v59 : string = v58 + v55 
            US19_1(v59)
        else
            let v63 : char = v1.[int 0]
            let v64 : int64 = 0L
            let v65 : bool = method102(v63, v64)
            let v66 : bool = v65 = false
            if v66 then
                let v68 : (string -> int32) = String.length
                let v69 : int32 = v68 v1
                let v73 : int32 = 1
                let v79 : int32 = 1 |> int32 
                let v92 : int32 = v69 |> int32 
                let v100 : int32 = v92 - v73
                let v102 : string = v1.[int v79..int v100]
                let v107 : (char -> string) = _.ToString()
                let v108 : string = v107 v63
                let v111 : int64 = System.Convert.ToInt64 v108.Length
                let v112 : int64 = 0L
                let v113 : UH0 = method95(v111, v108, v112)
                let struct (v114 : System.Text.StringBuilder, v115 : int32, v116 : int32) = method96(v113, v2, v3, v4)
                US19_0(v63, v102, v114, v115, v116)
            else
                let v128 : char list = []
                let v130 : char list = ''' :: v128 
                let v134 : char list = '"' :: v130 
                let v142 : (char list -> (char [])) = List.toArray
                let v143 : (char []) = v142 v134
                let v146 : string = method100(v143)
                let v167 : string = method103(v63, v146, v2, v3, v4)
                let v170 : string = "parsing.none_of / unexpected char / "
                let v171 : string = v170 + v167 
                US19_1(v171)
    let v188 : US19 =
        match v176 with
        | US19_1(v185) -> (* Error *)
            US19_1(v185)
        | US19_0(v177, v178, v179, v180, v181) -> (* Ok *)
            let v182 : bool = '\\' = v177
            let v183 : char =
                if v182 then
                    '/'
                else
                    v177
            US19_0(v183, v178, v179, v180, v181)
    match v188 with
    | US19_1(v208) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v189, v190, v191, v192, v193) -> (* Ok *)
        let v195 : (char -> string) = _.ToString()
        let v196 : string = v195 v189
        let v200 : string = v0 + v196 
        method104(v200, v190, v191, v192, v193)
and method105 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US19 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method105(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method106 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32, v5 : string, v6 : System.Text.StringBuilder, v7 : int32, v8 : int32, v9 : string, v10 : System.Text.StringBuilder, v11 : int32, v12 : int32) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "e"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v73 : string = $"{v0}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v14, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v14, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "input"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v14, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v55}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v14, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v1}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v14, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = ", "
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v14, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    (* run_target_args'
    let v184 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "format!(\"{:#?}\", $0)"
    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v185 
    let v187 : string = "fable_library_rust::String_::fromString($0)"
    let v188 : string = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let _run_target_args'_v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = "format!(\"{:#?}\", $0)"
    let v190 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v189 
    let v191 : string = "fable_library_rust::String_::fromString($0)"
    let v192 : string = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let _run_target_args'_v184 = v192 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = "format!(\"{:#?}\", $0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v193 
    let v195 : string = "fable_library_rust::String_::fromString($0)"
    let v196 : string = Fable.Core.RustInterop.emitRustExpr v194 v195 
    let _run_target_args'_v184 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v206 
    #endif
#else
    let v210 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v210 
    #endif
    let v213 : string = _run_target_args'_v184 
    let v223 : string = $"{v213}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v14, v223)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v240 : string = $"{v91}"
    let v248 : unit = ()
    let v249 : (unit -> unit) = closure7(v14, v240)
    let v250 : unit = (fun () -> v249 (); v248) ()
    let v258 : string = "rest1"
    let v259 : string = $"{v258}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v14, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v55}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v14, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v293 : string = $"{v5}"
    let v301 : unit = ()
    let v302 : (unit -> unit) = closure7(v14, v293)
    let v303 : unit = (fun () -> v302 (); v301) ()
    let v310 : string = $"{v163}"
    let v318 : unit = ()
    let v319 : (unit -> unit) = closure7(v14, v310)
    let v320 : unit = (fun () -> v319 (); v318) ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = "format!(\"{:#?}\", $0)"
    let v332 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v331 
    let v333 : string = "fable_library_rust::String_::fromString($0)"
    let v334 : string = Fable.Core.RustInterop.emitRustExpr v332 v333 
    let _run_target_args'_v330 = v334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v335 : string = "format!(\"{:#?}\", $0)"
    let v336 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v335 
    let v337 : string = "fable_library_rust::String_::fromString($0)"
    let v338 : string = Fable.Core.RustInterop.emitRustExpr v336 v337 
    let _run_target_args'_v330 = v338 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v339 : string = "format!(\"{:#?}\", $0)"
    let v340 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v339 
    let v341 : string = "fable_library_rust::String_::fromString($0)"
    let v342 : string = Fable.Core.RustInterop.emitRustExpr v340 v341 
    let _run_target_args'_v330 = v342 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v344 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v344 
    #endif
#if FABLE_COMPILER_PYTHON
    let v348 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v352 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v352 
    #endif
#else
    let v356 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v356 
    #endif
    let v359 : string = _run_target_args'_v330 
    let v369 : string = $"{v359}"
    let v377 : unit = ()
    let v378 : (unit -> unit) = closure7(v14, v369)
    let v379 : unit = (fun () -> v378 (); v377) ()
    let v386 : string = $"{v91}"
    let v394 : unit = ()
    let v395 : (unit -> unit) = closure7(v14, v386)
    let v396 : unit = (fun () -> v395 (); v394) ()
    let v404 : string = "rest2"
    let v405 : string = $"{v404}"
    let v413 : unit = ()
    let v414 : (unit -> unit) = closure7(v14, v405)
    let v415 : unit = (fun () -> v414 (); v413) ()
    let v422 : string = $"{v55}"
    let v430 : unit = ()
    let v431 : (unit -> unit) = closure7(v14, v422)
    let v432 : unit = (fun () -> v431 (); v430) ()
    let v439 : string = $"{v9}"
    let v447 : unit = ()
    let v448 : (unit -> unit) = closure7(v14, v439)
    let v449 : unit = (fun () -> v448 (); v447) ()
    let v456 : string = $"{v163}"
    let v464 : unit = ()
    let v465 : (unit -> unit) = closure7(v14, v456)
    let v466 : unit = (fun () -> v465 (); v464) ()
    (* run_target_args'
    let v476 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v477 : string = "format!(\"{:#?}\", $0)"
    let v478 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v477 
    let v479 : string = "fable_library_rust::String_::fromString($0)"
    let v480 : string = Fable.Core.RustInterop.emitRustExpr v478 v479 
    let _run_target_args'_v476 = v480 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v481 : string = "format!(\"{:#?}\", $0)"
    let v482 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v481 
    let v483 : string = "fable_library_rust::String_::fromString($0)"
    let v484 : string = Fable.Core.RustInterop.emitRustExpr v482 v483 
    let _run_target_args'_v476 = v484 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v485 : string = "format!(\"{:#?}\", $0)"
    let v486 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v485 
    let v487 : string = "fable_library_rust::String_::fromString($0)"
    let v488 : string = Fable.Core.RustInterop.emitRustExpr v486 v487 
    let _run_target_args'_v476 = v488 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v490 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v490 
    #endif
#if FABLE_COMPILER_PYTHON
    let v494 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v494 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v498 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v498 
    #endif
#else
    let v502 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v502 
    #endif
    let v505 : string = _run_target_args'_v476 
    let v515 : string = $"{v505}"
    let v523 : unit = ()
    let v524 : (unit -> unit) = closure7(v14, v515)
    let v525 : unit = (fun () -> v524 (); v523) ()
    let v533 : string = " }"
    let v534 : string = $"{v533}"
    let v542 : unit = ()
    let v543 : (unit -> unit) = closure7(v14, v534)
    let v544 : unit = (fun () -> v543 (); v542) ()
    let v550 : string = v14.l0
    v550
and method107 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method107(v0, v21)
and method108 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = ' ' :: v20 
            let v26 : char list = ''' :: v22 
            let v30 : char list = '"' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method100(v39)
            let v67 : string = method101(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method107(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method95(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method96(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = ' ' :: v144 
                let v150 : char list = ''' :: v146 
                let v154 : char list = '"' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method100(v163)
                let v191 : string = method103(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v212 : US19 =
        match v200 with
        | US19_1(v209) -> (* Error *)
            US19_1(v209)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v206 : bool = '\\' = v201
            let v207 : char =
                if v206 then
                    '/'
                else
                    v201
            US19_0(v207, v202, v203, v204, v205)
    match v212 with
    | US19_1(v232) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v219 : (char -> string) = _.ToString()
        let v220 : string = v219 v213
        let v224 : string = v0 + v220 
        method108(v224, v214, v215, v216, v217)
and method109 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "input"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method110 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method110(v0, v6)
        else
            v1
and method111 (v0 : System.Text.StringBuilder, v1 : int32, v2 : int32) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "s"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    (* run_target_args'
    let v66 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "format!(\"{:#?}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v67 
    let v69 : string = "fable_library_rust::String_::fromString($0)"
    let v70 : string = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let _run_target_args'_v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v71 : string = "format!(\"{:#?}\", $0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v71 
    let v73 : string = "fable_library_rust::String_::fromString($0)"
    let v74 : string = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let _run_target_args'_v66 = v74 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v75 : string = "format!(\"{:#?}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _run_target_args'_v66 = v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v80 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v88 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v88 
    #endif
#else
    let v92 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v92 
    #endif
    let v95 : string = _run_target_args'_v66 
    let v105 : string = $"{v95}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v4, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v123 : string = " }"
    let v124 : string = $"{v123}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v4, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v140 : string = v4.l0
    v140
and method112 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US19 =
        if v5 then
            let v6 : string = method111(v2, v3, v4)
            let v9 : string = "parsing.any_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v1.[int 0]
            let v16 : (string -> int32) = String.length
            let v17 : int32 = v16 v1
            let v21 : int32 = 1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v17 |> int32 
            let v48 : int32 = v40 - v21
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v14
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method95(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method96(v61, v2, v3, v4)
            US19_0(v14, v50, v62, v63, v64)
    match v66 with
    | US19_1(v86) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v78 : string = v0 + v74 
        method112(v78, v68, v69, v70, v71)
and method92 (v0 : string) : US18 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method93()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure33()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure35()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US19 = method99(v10, v16, v23)
    let v280 : US20 =
        match v24 with
        | US19_1(v277) -> (* Error *)
            US20_1(v277)
        | US19_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v201 : US19 =
                if v30 then
                    let v41 : char list = []
                    let v43 : char list = ''' :: v41 
                    let v47 : char list = '"' :: v43 
                    let v55 : (char list -> (char [])) = List.toArray
                    let v56 : (char []) = v55 v47
                    let v59 : string = method100(v56)
                    let v80 : string = method101(v59, v27, v28, v29)
                    let v83 : string = "parsing.none_of / unexpected end of input / "
                    let v84 : string = v83 + v80 
                    US19_1(v84)
                else
                    let v88 : char = v26.[int 0]
                    let v89 : int64 = 0L
                    let v90 : bool = method102(v88, v89)
                    let v91 : bool = v90 = false
                    if v91 then
                        let v93 : (string -> int32) = String.length
                        let v94 : int32 = v93 v26
                        let v98 : int32 = 1
                        let v104 : int32 = 1 |> int32 
                        let v117 : int32 = v94 |> int32 
                        let v125 : int32 = v117 - v98
                        let v127 : string = v26.[int v104..int v125]
                        let v132 : (char -> string) = _.ToString()
                        let v133 : string = v132 v88
                        let v136 : int64 = System.Convert.ToInt64 v133.Length
                        let v137 : int64 = 0L
                        let v138 : UH0 = method95(v136, v133, v137)
                        let struct (v139 : System.Text.StringBuilder, v140 : int32, v141 : int32) = method96(v138, v27, v28, v29)
                        US19_0(v88, v127, v139, v140, v141)
                    else
                        let v153 : char list = []
                        let v155 : char list = ''' :: v153 
                        let v159 : char list = '"' :: v155 
                        let v167 : (char list -> (char [])) = List.toArray
                        let v168 : (char []) = v167 v159
                        let v171 : string = method100(v168)
                        let v192 : string = method103(v88, v171, v27, v28, v29)
                        let v195 : string = "parsing.none_of / unexpected char / "
                        let v196 : string = v195 + v192 
                        US19_1(v196)
            let v213 : US19 =
                match v201 with
                | US19_1(v210) -> (* Error *)
                    US19_1(v210)
                | US19_0(v202, v203, v204, v205, v206) -> (* Ok *)
                    let v207 : bool = '\\' = v202
                    let v208 : char =
                        if v207 then
                            '/'
                        else
                            v202
                    US19_0(v208, v203, v204, v205, v206)
            let v233 : US20 =
                match v213 with
                | US19_1(v230) -> (* Error *)
                    US20_1(v230)
                | US19_0(v214, v215, v216, v217, v218) -> (* Ok *)
                    let v220 : (char -> string) = _.ToString()
                    let v221 : string = v220 v214
                    let struct (v224 : string, v225 : string, v226 : System.Text.StringBuilder, v227 : int32, v228 : int32) = method104(v221, v215, v216, v217, v218)
                    US20_0(v224, v225, v226, v227, v228)
            let v243 : US20 =
                match v233 with
                | US20_1(v240) -> (* Error *)
                    US20_0(v9, v26, v27, v28, v29)
                | US20_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    US20_0(v234, v235, v236, v237, v238)
            match v243 with
            | US20_1(v272) -> (* Error *)
                let v273 : string = "parsing.between / expected content"
                US20_1(v273)
            | US20_0(v244, v245, v246, v247, v248) -> (* Ok *)
                let v249 : UH1 = UH1_0
                let v250 : UH1 = UH1_1(v20, v249)
                let v251 : UH1 = UH1_1(v19, v250)
                let v252 : US19 = method105(v245, v246, v247, v248, v251)
                match v252 with
                | US19_1(v259) -> (* Error *)
                    let v260 : int32 = 1
                    let v261 : int32 = 1
                    let v262 : string = method106(v259, v10, v16, v260, v261, v26, v27, v28, v29, v245, v246, v247, v248)
                    let v265 : string = "parsing.between / expected closing delimiter / "
                    let v266 : string = v265 + v262 
                    US20_1(v266)
                | US19_0(v253, v254, v255, v256, v257) -> (* Ok *)
                    US20_0(v244, v254, v255, v256, v257)
    let v602 : US20 =
        match v280 with
        | US20_1(v286) -> (* Error *)
            let v287 : bool = "" = v10
            let v488 : US19 =
                if v287 then
                    let v302 : char list = []
                    let v304 : char list = ' ' :: v302 
                    let v308 : char list = ''' :: v304 
                    let v312 : char list = '"' :: v308 
                    let v320 : (char list -> (char [])) = List.toArray
                    let v321 : (char []) = v320 v312
                    let v324 : string = method100(v321)
                    let v349 : int32 = 1
                    let v350 : int32 = 1
                    let v351 : string = method101(v324, v16, v349, v350)
                    let v354 : string = "parsing.none_of / unexpected end of input / "
                    let v355 : string = v354 + v351 
                    US19_1(v355)
                else
                    let v359 : char = v10.[int 0]
                    let v360 : int64 = 0L
                    let v361 : bool = method107(v359, v360)
                    let v362 : bool = v361 = false
                    if v362 then
                        let v364 : (string -> int32) = String.length
                        let v365 : int32 = v364 v10
                        let v369 : int32 = 1
                        let v375 : int32 = 1 |> int32 
                        let v388 : int32 = v365 |> int32 
                        let v396 : int32 = v388 - v369
                        let v398 : string = v10.[int v375..int v396]
                        let v403 : (char -> string) = _.ToString()
                        let v404 : string = v403 v359
                        let v407 : int64 = System.Convert.ToInt64 v404.Length
                        let v408 : int64 = 0L
                        let v409 : UH0 = method95(v407, v404, v408)
                        let v410 : int32 = 1
                        let v411 : int32 = 1
                        let struct (v412 : System.Text.StringBuilder, v413 : int32, v414 : int32) = method96(v409, v16, v410, v411)
                        US19_0(v359, v398, v412, v413, v414)
                    else
                        let v430 : char list = []
                        let v432 : char list = ' ' :: v430 
                        let v436 : char list = ''' :: v432 
                        let v440 : char list = '"' :: v436 
                        let v448 : (char list -> (char [])) = List.toArray
                        let v449 : (char []) = v448 v440
                        let v452 : string = method100(v449)
                        let v477 : int32 = 1
                        let v478 : int32 = 1
                        let v479 : string = method103(v359, v452, v16, v477, v478)
                        let v482 : string = "parsing.none_of / unexpected char / "
                        let v483 : string = v482 + v479 
                        US19_1(v483)
            let v500 : US19 =
                match v488 with
                | US19_1(v497) -> (* Error *)
                    US19_1(v497)
                | US19_0(v489, v490, v491, v492, v493) -> (* Ok *)
                    let v494 : bool = '\\' = v489
                    let v495 : char =
                        if v494 then
                            '/'
                        else
                            v489
                    US19_0(v495, v490, v491, v492, v493)
            let v520 : US20 =
                match v500 with
                | US19_1(v517) -> (* Error *)
                    US20_1(v517)
                | US19_0(v501, v502, v503, v504, v505) -> (* Ok *)
                    let v507 : (char -> string) = _.ToString()
                    let v508 : string = v507 v501
                    let struct (v511 : string, v512 : string, v513 : System.Text.StringBuilder, v514 : int32, v515 : int32) = method108(v508, v502, v503, v504, v505)
                    US20_0(v511, v512, v513, v514, v515)
            match v520 with
            | US20_1(v526) -> (* Error *)
                let v527 : int32 = v10.Length
                let v528 : bool = v527 = 0
                let v538 : US22 =
                    if v528 then
                        US22_0(v10, v16, 1, 1)
                    else
                        let v530 : string = method109(v10)
                        let v533 : string = "parsing.eof / expected end of input / "
                        let v534 : string = v533 + v530 
                        US22_1(v534)
                let v547 : US20 =
                    match v538 with
                    | US22_1(v544) -> (* Error *)
                        US20_1(v544)
                    | US22_0(v539, v540, v541, v542) -> (* Ok *)
                        US20_0(v9, v539, v540, v541, v542)
                match v547 with
                | US20_1(v595) -> (* Error *)
                    US20_1(v595)
                | US20_0(v548, v549, v550, v551, v552) -> (* Ok *)
                    let v553 : int32 = 0
                    let v554 : int32 = method110(v549, v553)
                    let v556 : (string -> int32) = String.length
                    let v557 : int32 = v556 v549
                    let v561 : int32 = 1
                    let v567 : int32 = v554 |> int32 
                    let v580 : int32 = v557 |> int32 
                    let v588 : int32 = v580 - v561
                    let v590 : string = v549.[int v567..int v588]
                    US20_0(v548, v590, v550, v551, v552)
            | US20_0(v521, v522, v523, v524, v525) -> (* Ok *)
                v520
        | US20_0(v281, v282, v283, v284, v285) -> (* Ok *)
            v280
    let v900 : US23 =
        match v602 with
        | US20_1(v897) -> (* Error *)
            US23_1(v897)
        | US20_0(v603, v604, v605, v606, v607) -> (* Ok *)
            let v608 : bool = "" = v604
            let v771 : US19 =
                if v608 then
                    let v609 : char = ' '
                    let v610 : string = method94(v609, v605, v606, v607)
                    let v613 : string = "parsing.p_char / unexpected end of input / "
                    let v614 : string = v613 + v610 
                    US19_1(v614)
                else
                    let v618 : char = v604.[int 0]
                    let v619 : bool = v618 = ' '
                    if v619 then
                        let v621 : (string -> int32) = String.length
                        let v622 : int32 = v621 v604
                        let v626 : int32 = 1
                        let v632 : int32 = 1 |> int32 
                        let v645 : int32 = v622 |> int32 
                        let v653 : int32 = v645 - v626
                        let v655 : string = v604.[int v632..int v653]
                        let v660 : (char -> string) = _.ToString()
                        let v661 : string = v660 v618
                        let v664 : int64 = System.Convert.ToInt64 v661.Length
                        let v665 : int64 = 0L
                        let v666 : UH0 = method95(v664, v661, v665)
                        let struct (v667 : System.Text.StringBuilder, v668 : int32, v669 : int32) = method96(v666, v605, v606, v607)
                        US19_0(v618, v655, v667, v668, v669)
                    else
                        let v674 : string = "\n"
                        let v675 : int32 = v604.IndexOf v674 
                        let v678 : int32 = v675 - 1
                        let v679 : bool = -2 = v678
                        let v687 : int32 =
                            if v679 then
                                let v681 : (string -> int32) = String.length
                                let v682 : int32 = v681 v604
                                let v685 : int32 = v682 + 1
                                v685
                            else
                                let v686 : int32 = v678 + 1
                                v686
                        let v689 : int32 = 1
                        let v695 : int32 = 0 |> int32 
                        let v708 : int32 = v687 |> int32 
                        let v716 : int32 = v708 - v689
                        let v718 : string = v604.[int v695..int v716]
                        let v722 : char = ' '
                        let v723 : string = method97(v722, v606, v607)
                        let v726 : string = "parsing.p_char / "
                        let v727 : string = v726 + v723 
                        let v731 : string = v727 + v674 
                        let v735 : (System.Text.StringBuilder -> string) = _.ToString()
                        let v736 : string = v735 v605
                        let v740 : string = v731 + v736 
                        let v744 : string = v740 + v718 
                        let v747 : int32 = v607 - 1
                        let v748 : int32 = 0
                        let v749 : (string -> string) = method98(v747, v748)
                        let v750 : string = v749 v9
                        let v753 : string = "^"
                        let v754 : string = v750 + v753 
                        let v758 : string = v744 + v674 
                        let v762 : string = v758 + v754 
                        let v766 : string = v762 + v674 
                        US19_1(v766)
            let v783 : US24 =
                match v771 with
                | US19_1(v779) -> (* Error *)
                    let v780 : US21 = US21_1
                    US24_0(v780, v604, v605, v606, v607)
                | US19_0(v772, v773, v774, v775, v776) -> (* Ok *)
                    let v777 : US21 = US21_0(v772)
                    US24_0(v777, v773, v774, v775, v776)
            let v874 : US20 =
                match v783 with
                | US24_1(v871) -> (* Error *)
                    US20_1(v871)
                | US24_0(v784, v785, v786, v787, v788) -> (* Ok *)
                    let v789 : bool = "" = v785
                    let v850 : US19 =
                        if v789 then
                            let v790 : string = method111(v786, v787, v788)
                            let v793 : string = "parsing.any_char / unexpected end of input / "
                            let v794 : string = v793 + v790 
                            US19_1(v794)
                        else
                            let v798 : char = v785.[int 0]
                            let v800 : (string -> int32) = String.length
                            let v801 : int32 = v800 v785
                            let v805 : int32 = 1
                            let v811 : int32 = 1 |> int32 
                            let v824 : int32 = v801 |> int32 
                            let v832 : int32 = v824 - v805
                            let v834 : string = v785.[int v811..int v832]
                            let v839 : (char -> string) = _.ToString()
                            let v840 : string = v839 v798
                            let v843 : int64 = System.Convert.ToInt64 v840.Length
                            let v844 : int64 = 0L
                            let v845 : UH0 = method95(v843, v840, v844)
                            let struct (v846 : System.Text.StringBuilder, v847 : int32, v848 : int32) = method96(v845, v786, v787, v788)
                            US19_0(v798, v834, v846, v847, v848)
                    match v850 with
                    | US19_1(v867) -> (* Error *)
                        US20_1(v867)
                    | US19_0(v851, v852, v853, v854, v855) -> (* Ok *)
                        let v857 : (char -> string) = _.ToString()
                        let v858 : string = v857 v851
                        let struct (v861 : string, v862 : string, v863 : System.Text.StringBuilder, v864 : int32, v865 : int32) = method112(v858, v852, v853, v854, v855)
                        US20_0(v861, v862, v863, v864, v865)
            let v886 : US25 =
                match v874 with
                | US20_1(v882) -> (* Error *)
                    let v883 : US5 = US5_1
                    US25_0(v883, v604, v605, v606, v607)
                | US20_0(v875, v876, v877, v878, v879) -> (* Ok *)
                    let v880 : US5 = US5_0(v875)
                    US25_0(v880, v876, v877, v878, v879)
            match v886 with
            | US25_1(v893) -> (* Error *)
                US23_1(v893)
            | US25_0(v887, v888, v889, v890, v891) -> (* Ok *)
                US23_0(v603, v887, v888, v889, v890, v891)
    match v900 with
    | US23_1(v908) -> (* Error *)
        US18_1(v908)
    | US23_0(v901, v902, v903, v904, v905, v906) -> (* Ok *)
        US18_0(v901, v902)
and method115 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US21_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US21_1
        let v23 : char =
            match v19 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method115(v0, v25)
and method116 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v224 : US19 =
        if v5 then
            let v24 : char list = []
            let v26 : char list = ' ' :: v24 
            let v30 : char list = '"' :: v26 
            let v34 : char list = '`' :: v30 
            let v38 : char list = '\\' :: v34 
            let v46 : (char list -> (char [])) = List.toArray
            let v47 : (char []) = v46 v38
            let v50 : string = method100(v47)
            let v79 : string = method101(v50, v2, v3, v4)
            let v82 : string = "parsing.none_of / unexpected end of input / "
            let v83 : string = v82 + v79 
            US19_1(v83)
        else
            let v87 : char = v1.[int 0]
            let v88 : int64 = 0L
            let v89 : bool = method115(v87, v88)
            let v90 : bool = v89 = false
            if v90 then
                let v92 : (string -> int32) = String.length
                let v93 : int32 = v92 v1
                let v97 : int32 = 1
                let v103 : int32 = 1 |> int32 
                let v116 : int32 = v93 |> int32 
                let v124 : int32 = v116 - v97
                let v126 : string = v1.[int v103..int v124]
                let v131 : (char -> string) = _.ToString()
                let v132 : string = v131 v87
                let v135 : int64 = System.Convert.ToInt64 v132.Length
                let v136 : int64 = 0L
                let v137 : UH0 = method95(v135, v132, v136)
                let struct (v138 : System.Text.StringBuilder, v139 : int32, v140 : int32) = method96(v137, v2, v3, v4)
                US19_0(v87, v126, v138, v139, v140)
            else
                let v160 : char list = []
                let v162 : char list = ' ' :: v160 
                let v166 : char list = '"' :: v162 
                let v170 : char list = '`' :: v166 
                let v174 : char list = '\\' :: v170 
                let v182 : (char list -> (char [])) = List.toArray
                let v183 : (char []) = v182 v174
                let v186 : string = method100(v183)
                let v215 : string = method103(v87, v186, v2, v3, v4)
                let v218 : string = "parsing.none_of / unexpected char / "
                let v219 : string = v218 + v215 
                US19_1(v219)
    match v224 with
    | US19_1(v244) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v225, v226, v227, v228, v229) -> (* Ok *)
        let v231 : (char -> string) = _.ToString()
        let v232 : string = v231 v225
        let v236 : string = v0 + v232 
        method116(v236, v226, v227, v228, v229)
and method118 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method118(v0, v21)
and closure36 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v168 : US19 =
        if v4 then
            let v5 : char = '\\'
            let v6 : string = method94(v5, v1, v2, v3)
            let v9 : string = "parsing.p_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v0.[int 0]
            let v15 : bool = v14 = '\\'
            if v15 then
                let v17 : (string -> int32) = String.length
                let v18 : int32 = v17 v0
                let v22 : int32 = 1
                let v28 : int32 = 1 |> int32 
                let v41 : int32 = v18 |> int32 
                let v49 : int32 = v41 - v22
                let v51 : string = v0.[int v28..int v49]
                let v56 : (char -> string) = _.ToString()
                let v57 : string = v56 v14
                let v60 : int64 = System.Convert.ToInt64 v57.Length
                let v61 : int64 = 0L
                let v62 : UH0 = method95(v60, v57, v61)
                let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method96(v62, v1, v2, v3)
                US19_0(v14, v51, v63, v64, v65)
            else
                let v70 : string = "\n"
                let v71 : int32 = v0.IndexOf v70 
                let v74 : int32 = v71 - 1
                let v75 : bool = -2 = v74
                let v83 : int32 =
                    if v75 then
                        let v77 : (string -> int32) = String.length
                        let v78 : int32 = v77 v0
                        let v81 : int32 = v78 + 1
                        v81
                    else
                        let v82 : int32 = v74 + 1
                        v82
                let v85 : int32 = 1
                let v91 : int32 = 0 |> int32 
                let v104 : int32 = v83 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v0.[int v91..int v112]
                let v118 : char = '\\'
                let v119 : string = method97(v118, v2, v3)
                let v122 : string = "parsing.p_char / "
                let v123 : string = v122 + v119 
                let v127 : string = v123 + v70 
                let v131 : (System.Text.StringBuilder -> string) = _.ToString()
                let v132 : string = v131 v1
                let v136 : string = v127 + v132 
                let v140 : string = v136 + v114 
                let v143 : int32 = v3 - 1
                let v144 : int32 = 0
                let v145 : (string -> string) = method98(v143, v144)
                let v146 : string = ""
                let v147 : string = v145 v146
                let v150 : string = "^"
                let v151 : string = v147 + v150 
                let v155 : string = v140 + v70 
                let v159 : string = v155 + v151 
                let v163 : string = v159 + v70 
                US19_1(v163)
    let v239 : US19 =
        match v168 with
        | US19_1(v236) -> (* Error *)
            US19_1(v236)
        | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
            let v174 : bool = "" = v170
            if v174 then
                let v175 : string = method111(v171, v172, v173)
                let v178 : string = "parsing.any_char / unexpected end of input / "
                let v179 : string = v178 + v175 
                US19_1(v179)
            else
                let v183 : char = v170.[int 0]
                let v185 : (string -> int32) = String.length
                let v186 : int32 = v185 v170
                let v190 : int32 = 1
                let v196 : int32 = 1 |> int32 
                let v209 : int32 = v186 |> int32 
                let v217 : int32 = v209 - v190
                let v219 : string = v170.[int v196..int v217]
                let v224 : (char -> string) = _.ToString()
                let v225 : string = v224 v183
                let v228 : int64 = System.Convert.ToInt64 v225.Length
                let v229 : int64 = 0L
                let v230 : UH0 = method95(v228, v225, v229)
                let struct (v231 : System.Text.StringBuilder, v232 : int32, v233 : int32) = method96(v230, v171, v172, v173)
                US19_0(v183, v219, v231, v232, v233)
    match v239 with
    | US19_1(v260) -> (* Error *)
        US20_1(v260)
    | US19_0(v240, v241, v242, v243, v244) -> (* Ok *)
        let v246 : (char -> string) = _.ToString()
        let v247 : string = v246 '\\'
        let v251 : (char -> string) = _.ToString()
        let v252 : string = v251 v240
        let v256 : string = v247 + v252 
        US20_0(v256, v241, v242, v243, v244)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v168 : US19 =
        if v4 then
            let v5 : char = '`'
            let v6 : string = method94(v5, v1, v2, v3)
            let v9 : string = "parsing.p_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v0.[int 0]
            let v15 : bool = v14 = '`'
            if v15 then
                let v17 : (string -> int32) = String.length
                let v18 : int32 = v17 v0
                let v22 : int32 = 1
                let v28 : int32 = 1 |> int32 
                let v41 : int32 = v18 |> int32 
                let v49 : int32 = v41 - v22
                let v51 : string = v0.[int v28..int v49]
                let v56 : (char -> string) = _.ToString()
                let v57 : string = v56 v14
                let v60 : int64 = System.Convert.ToInt64 v57.Length
                let v61 : int64 = 0L
                let v62 : UH0 = method95(v60, v57, v61)
                let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method96(v62, v1, v2, v3)
                US19_0(v14, v51, v63, v64, v65)
            else
                let v70 : string = "\n"
                let v71 : int32 = v0.IndexOf v70 
                let v74 : int32 = v71 - 1
                let v75 : bool = -2 = v74
                let v83 : int32 =
                    if v75 then
                        let v77 : (string -> int32) = String.length
                        let v78 : int32 = v77 v0
                        let v81 : int32 = v78 + 1
                        v81
                    else
                        let v82 : int32 = v74 + 1
                        v82
                let v85 : int32 = 1
                let v91 : int32 = 0 |> int32 
                let v104 : int32 = v83 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v0.[int v91..int v112]
                let v118 : char = '`'
                let v119 : string = method97(v118, v2, v3)
                let v122 : string = "parsing.p_char / "
                let v123 : string = v122 + v119 
                let v127 : string = v123 + v70 
                let v131 : (System.Text.StringBuilder -> string) = _.ToString()
                let v132 : string = v131 v1
                let v136 : string = v127 + v132 
                let v140 : string = v136 + v114 
                let v143 : int32 = v3 - 1
                let v144 : int32 = 0
                let v145 : (string -> string) = method98(v143, v144)
                let v146 : string = ""
                let v147 : string = v145 v146
                let v150 : string = "^"
                let v151 : string = v147 + v150 
                let v155 : string = v140 + v70 
                let v159 : string = v155 + v151 
                let v163 : string = v159 + v70 
                US19_1(v163)
    let v239 : US19 =
        match v168 with
        | US19_1(v236) -> (* Error *)
            US19_1(v236)
        | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
            let v174 : bool = "" = v170
            if v174 then
                let v175 : string = method111(v171, v172, v173)
                let v178 : string = "parsing.any_char / unexpected end of input / "
                let v179 : string = v178 + v175 
                US19_1(v179)
            else
                let v183 : char = v170.[int 0]
                let v185 : (string -> int32) = String.length
                let v186 : int32 = v185 v170
                let v190 : int32 = 1
                let v196 : int32 = 1 |> int32 
                let v209 : int32 = v186 |> int32 
                let v217 : int32 = v209 - v190
                let v219 : string = v170.[int v196..int v217]
                let v224 : (char -> string) = _.ToString()
                let v225 : string = v224 v183
                let v228 : int64 = System.Convert.ToInt64 v225.Length
                let v229 : int64 = 0L
                let v230 : UH0 = method95(v228, v225, v229)
                let struct (v231 : System.Text.StringBuilder, v232 : int32, v233 : int32) = method96(v230, v171, v172, v173)
                US19_0(v183, v219, v231, v232, v233)
    match v239 with
    | US19_1(v260) -> (* Error *)
        US20_1(v260)
    | US19_0(v240, v241, v242, v243, v244) -> (* Ok *)
        let v246 : (char -> string) = _.ToString()
        let v247 : string = v246 '`'
        let v251 : (char -> string) = _.ToString()
        let v252 : string = v251 v240
        let v256 : string = v247 + v252 
        US20_0(v256, v241, v242, v243, v244)
and method119 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US20 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US20 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US20_1(v15) -> (* Error *)
            method119(v0, v1, v2, v3, v8)
        | US20_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US20_1(v5)
and method120 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method120(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method117 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = '"' :: v20 
            let v26 : char list = '`' :: v22 
            let v30 : char list = '\\' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method100(v39)
            let v67 : string = method101(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method118(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method95(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method96(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = '"' :: v144 
                let v150 : char list = '`' :: v146 
                let v154 : char list = '\\' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method100(v163)
                let v191 : string = method103(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v215 : US20 =
        match v200 with
        | US19_1(v212) -> (* Error *)
            US20_1(v212)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v207 : (char -> string) = _.ToString()
            let v208 : string = v207 v201
            US20_0(v208, v202, v203, v204, v205)
    let v229 : US20 =
        match v215 with
        | US20_1(v221) -> (* Error *)
            let v222 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure36()
            let v223 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure37()
            let v224 : UH3 = UH3_0
            let v225 : UH3 = UH3_1(v223, v224)
            let v226 : UH3 = UH3_1(v222, v225)
            method119(v1, v2, v3, v4, v226)
        | US20_0(v216, v217, v218, v219, v220) -> (* Ok *)
            v215
    match v229 with
    | US20_1(v237) -> (* Error *)
        let v238 : UH2 = UH2_0
        let v239 : UH2 = method120(v0, v238)
        US27_0(v239, v1, v2, v3, v4)
    | US20_0(v230, v231, v232, v233, v234) -> (* Ok *)
        let v235 : UH2 = UH2_1(v230, v0)
        method117(v235, v231, v232, v233, v234)
and method121 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method121(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method122 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = '"' :: v20 
            let v26 : char list = '`' :: v22 
            let v30 : char list = '\\' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method100(v39)
            let v67 : string = method101(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method118(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method95(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method96(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = '"' :: v144 
                let v150 : char list = '`' :: v146 
                let v154 : char list = '\\' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method100(v163)
                let v191 : string = method103(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v215 : US20 =
        match v200 with
        | US19_1(v212) -> (* Error *)
            US20_1(v212)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v207 : (char -> string) = _.ToString()
            let v208 : string = v207 v201
            US20_0(v208, v202, v203, v204, v205)
    match v215 with
    | US20_1(v223) -> (* Error *)
        let v224 : UH2 = UH2_0
        let v225 : UH2 = method120(v0, v224)
        US27_0(v225, v1, v2, v3, v4)
    | US20_0(v216, v217, v218, v219, v220) -> (* Ok *)
        let v221 : UH2 = UH2_1(v216, v0)
        method122(v221, v217, v218, v219, v220)
and method114 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v224 : US19 =
        if v5 then
            let v24 : char list = []
            let v26 : char list = ' ' :: v24 
            let v30 : char list = '"' :: v26 
            let v34 : char list = '`' :: v30 
            let v38 : char list = '\\' :: v34 
            let v46 : (char list -> (char [])) = List.toArray
            let v47 : (char []) = v46 v38
            let v50 : string = method100(v47)
            let v79 : string = method101(v50, v2, v3, v4)
            let v82 : string = "parsing.none_of / unexpected end of input / "
            let v83 : string = v82 + v79 
            US19_1(v83)
        else
            let v87 : char = v1.[int 0]
            let v88 : int64 = 0L
            let v89 : bool = method115(v87, v88)
            let v90 : bool = v89 = false
            if v90 then
                let v92 : (string -> int32) = String.length
                let v93 : int32 = v92 v1
                let v97 : int32 = 1
                let v103 : int32 = 1 |> int32 
                let v116 : int32 = v93 |> int32 
                let v124 : int32 = v116 - v97
                let v126 : string = v1.[int v103..int v124]
                let v131 : (char -> string) = _.ToString()
                let v132 : string = v131 v87
                let v135 : int64 = System.Convert.ToInt64 v132.Length
                let v136 : int64 = 0L
                let v137 : UH0 = method95(v135, v132, v136)
                let struct (v138 : System.Text.StringBuilder, v139 : int32, v140 : int32) = method96(v137, v2, v3, v4)
                US19_0(v87, v126, v138, v139, v140)
            else
                let v160 : char list = []
                let v162 : char list = ' ' :: v160 
                let v166 : char list = '"' :: v162 
                let v170 : char list = '`' :: v166 
                let v174 : char list = '\\' :: v170 
                let v182 : (char list -> (char [])) = List.toArray
                let v183 : (char []) = v182 v174
                let v186 : string = method100(v183)
                let v215 : string = method103(v87, v186, v2, v3, v4)
                let v218 : string = "parsing.none_of / unexpected char / "
                let v219 : string = v218 + v215 
                US19_1(v219)
    let v244 : US20 =
        match v224 with
        | US19_1(v241) -> (* Error *)
            US20_1(v241)
        | US19_0(v225, v226, v227, v228, v229) -> (* Ok *)
            let v231 : (char -> string) = _.ToString()
            let v232 : string = v231 v225
            let struct (v235 : string, v236 : string, v237 : System.Text.StringBuilder, v238 : int32, v239 : int32) = method116(v232, v226, v227, v228, v229)
            US20_0(v235, v236, v237, v238, v239)
    let v721 : US20 =
        match v244 with
        | US20_1(v250) -> (* Error *)
            let v414 : US19 =
                if v5 then
                    let v251 : char = '"'
                    let v252 : string = method94(v251, v2, v3, v4)
                    let v255 : string = "parsing.p_char / unexpected end of input / "
                    let v256 : string = v255 + v252 
                    US19_1(v256)
                else
                    let v260 : char = v1.[int 0]
                    let v261 : bool = v260 = '"'
                    if v261 then
                        let v263 : (string -> int32) = String.length
                        let v264 : int32 = v263 v1
                        let v268 : int32 = 1
                        let v274 : int32 = 1 |> int32 
                        let v287 : int32 = v264 |> int32 
                        let v295 : int32 = v287 - v268
                        let v297 : string = v1.[int v274..int v295]
                        let v302 : (char -> string) = _.ToString()
                        let v303 : string = v302 v260
                        let v306 : int64 = System.Convert.ToInt64 v303.Length
                        let v307 : int64 = 0L
                        let v308 : UH0 = method95(v306, v303, v307)
                        let struct (v309 : System.Text.StringBuilder, v310 : int32, v311 : int32) = method96(v308, v2, v3, v4)
                        US19_0(v260, v297, v309, v310, v311)
                    else
                        let v316 : string = "\n"
                        let v317 : int32 = v1.IndexOf v316 
                        let v320 : int32 = v317 - 1
                        let v321 : bool = -2 = v320
                        let v329 : int32 =
                            if v321 then
                                let v323 : (string -> int32) = String.length
                                let v324 : int32 = v323 v1
                                let v327 : int32 = v324 + 1
                                v327
                            else
                                let v328 : int32 = v320 + 1
                                v328
                        let v331 : int32 = 1
                        let v337 : int32 = 0 |> int32 
                        let v350 : int32 = v329 |> int32 
                        let v358 : int32 = v350 - v331
                        let v360 : string = v1.[int v337..int v358]
                        let v364 : char = '"'
                        let v365 : string = method97(v364, v3, v4)
                        let v368 : string = "parsing.p_char / "
                        let v369 : string = v368 + v365 
                        let v373 : string = v369 + v316 
                        let v377 : (System.Text.StringBuilder -> string) = _.ToString()
                        let v378 : string = v377 v2
                        let v382 : string = v373 + v378 
                        let v386 : string = v382 + v360 
                        let v389 : int32 = v4 - 1
                        let v390 : int32 = 0
                        let v391 : (string -> string) = method98(v389, v390)
                        let v392 : string = ""
                        let v393 : string = v391 v392
                        let v396 : string = "^"
                        let v397 : string = v393 + v396 
                        let v401 : string = v386 + v316 
                        let v405 : string = v401 + v397 
                        let v409 : string = v405 + v316 
                        US19_1(v409)
            let v650 : US20 =
                match v414 with
                | US19_1(v647) -> (* Error *)
                    US20_1(v647)
                | US19_0(v415, v416, v417, v418, v419) -> (* Ok *)
                    let v420 : UH2 = UH2_0
                    let v421 : US27 = method117(v420, v416, v417, v418, v419)
                    let v454 : US20 =
                        match v421 with
                        | US27_1(v451) -> (* Error *)
                            US20_1(v451)
                        | US27_0(v422, v423, v424, v425, v426) -> (* Ok *)
                            let v427 : string list = []
                            let v428 : string list = method121(v422, v427)
                            let v433 : unit = ()
                            let _let'_v433 =
                                seq {
                                    yield! v428 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v436 : string seq = _let'_v433 
                            let v444 : (string -> (string seq -> string)) = String.concat
                            let v445 : string = ""
                            let v446 : (string seq -> string) = v444 v445
                            let v447 : string = v446 v436
                            US20_0(v447, v423, v424, v425, v426)
                    match v454 with
                    | US20_1(v642) -> (* Error *)
                        let v643 : string = "parsing.between / expected content"
                        US20_1(v643)
                    | US20_0(v455, v456, v457, v458, v459) -> (* Ok *)
                        let v460 : bool = "" = v456
                        let v624 : US19 =
                            if v460 then
                                let v461 : char = '"'
                                let v462 : string = method94(v461, v457, v458, v459)
                                let v465 : string = "parsing.p_char / unexpected end of input / "
                                let v466 : string = v465 + v462 
                                US19_1(v466)
                            else
                                let v470 : char = v456.[int 0]
                                let v471 : bool = v470 = '"'
                                if v471 then
                                    let v473 : (string -> int32) = String.length
                                    let v474 : int32 = v473 v456
                                    let v478 : int32 = 1
                                    let v484 : int32 = 1 |> int32 
                                    let v497 : int32 = v474 |> int32 
                                    let v505 : int32 = v497 - v478
                                    let v507 : string = v456.[int v484..int v505]
                                    let v512 : (char -> string) = _.ToString()
                                    let v513 : string = v512 v470
                                    let v516 : int64 = System.Convert.ToInt64 v513.Length
                                    let v517 : int64 = 0L
                                    let v518 : UH0 = method95(v516, v513, v517)
                                    let struct (v519 : System.Text.StringBuilder, v520 : int32, v521 : int32) = method96(v518, v457, v458, v459)
                                    US19_0(v470, v507, v519, v520, v521)
                                else
                                    let v526 : string = "\n"
                                    let v527 : int32 = v456.IndexOf v526 
                                    let v530 : int32 = v527 - 1
                                    let v531 : bool = -2 = v530
                                    let v539 : int32 =
                                        if v531 then
                                            let v533 : (string -> int32) = String.length
                                            let v534 : int32 = v533 v456
                                            let v537 : int32 = v534 + 1
                                            v537
                                        else
                                            let v538 : int32 = v530 + 1
                                            v538
                                    let v541 : int32 = 1
                                    let v547 : int32 = 0 |> int32 
                                    let v560 : int32 = v539 |> int32 
                                    let v568 : int32 = v560 - v541
                                    let v570 : string = v456.[int v547..int v568]
                                    let v574 : char = '"'
                                    let v575 : string = method97(v574, v458, v459)
                                    let v578 : string = "parsing.p_char / "
                                    let v579 : string = v578 + v575 
                                    let v583 : string = v579 + v526 
                                    let v587 : (System.Text.StringBuilder -> string) = _.ToString()
                                    let v588 : string = v587 v457
                                    let v592 : string = v583 + v588 
                                    let v596 : string = v592 + v570 
                                    let v599 : int32 = v459 - 1
                                    let v600 : int32 = 0
                                    let v601 : (string -> string) = method98(v599, v600)
                                    let v602 : string = ""
                                    let v603 : string = v601 v602
                                    let v606 : string = "^"
                                    let v607 : string = v603 + v606 
                                    let v611 : string = v596 + v526 
                                    let v615 : string = v611 + v607 
                                    let v619 : string = v615 + v526 
                                    US19_1(v619)
                        match v624 with
                        | US19_1(v631) -> (* Error *)
                            let v632 : string = method106(v631, v1, v2, v3, v4, v416, v417, v418, v419, v456, v457, v458, v459)
                            let v635 : string = "parsing.between / expected closing delimiter / "
                            let v636 : string = v635 + v632 
                            US20_1(v636)
                        | US19_0(v625, v626, v627, v628, v629) -> (* Ok *)
                            US20_0(v455, v626, v627, v628, v629)
            match v650 with
            | US20_1(v656) -> (* Error *)
                let v657 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure36()
                let v658 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure37()
                let v659 : UH3 = UH3_0
                let v660 : UH3 = UH3_1(v658, v659)
                let v661 : UH3 = UH3_1(v657, v660)
                let v662 : US20 = method119(v1, v2, v3, v4, v661)
                let v673 : US20 =
                    match v662 with
                    | US20_1(v670) -> (* Error *)
                        US20_1(v670)
                    | US20_0(v663, v664, v665, v666, v667) -> (* Ok *)
                        let v668 : string = ""
                        US20_0(v668, v664, v665, v666, v667)
                let v684 : US27 =
                    match v673 with
                    | US20_1(v681) -> (* Error *)
                        US27_1(v681)
                    | US20_0(v674, v675, v676, v677, v678) -> (* Ok *)
                        let v679 : UH2 = UH2_0
                        method122(v679, v675, v676, v677, v678)
                match v684 with
                | US27_1(v714) -> (* Error *)
                    US20_1(v714)
                | US27_0(v685, v686, v687, v688, v689) -> (* Ok *)
                    let v690 : string list = []
                    let v691 : string list = method121(v685, v690)
                    let v696 : unit = ()
                    let _let'_v696 =
                        seq {
                            yield! v691 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v699 : string seq = _let'_v696 
                    let v707 : (string -> (string seq -> string)) = String.concat
                    let v708 : string = ""
                    let v709 : (string seq -> string) = v707 v708
                    let v710 : string = v709 v699
                    US20_0(v710, v686, v687, v688, v689)
            | US20_0(v651, v652, v653, v654, v655) -> (* Ok *)
                v650
        | US20_0(v245, v246, v247, v248, v249) -> (* Ok *)
            v244
    match v721 with
    | US20_1(v786) -> (* Error *)
        let v787 : UH2 = UH2_0
        let v788 : UH2 = method120(v0, v787)
        US27_0(v788, v1, v2, v3, v4)
    | US20_0(v722, v723, v724, v725, v726) -> (* Ok *)
        let v727 : int32 = 0
        let v728 : int32 = method110(v723, v727)
        let v729 : bool = 0 = v728
        let v772 : US22 =
            if v729 then
                let v730 : string = "parsing.spaces1 / expected at least one space"
                US22_1(v730)
            else
                let v733 : (string -> int32) = String.length
                let v734 : int32 = v733 v723
                let v738 : int32 = 1
                let v744 : int32 = v728 |> int32 
                let v757 : int32 = v734 |> int32 
                let v765 : int32 = v757 - v738
                let v767 : string = v723.[int v744..int v765]
                US22_0(v767, v724, v725, v726)
        match v772 with
        | US22_1(v779) -> (* Error *)
            let v780 : UH2 = UH2_0
            let v781 : UH2 = UH2_1(v722, v780)
            let v782 : UH2 = method120(v0, v781)
            US27_0(v782, v723, v724, v725, v726)
        | US22_0(v773, v774, v775, v776) -> (* Ok *)
            let v777 : UH2 = UH2_1(v722, v0)
            method114(v777, v773, v774, v775, v776)
and method113 (v0 : string) : US26 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method93()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US27 = method114(v19, v10, v16, v20, v21)
    match v22 with
    | US27_1(v38) -> (* Error *)
        US26_1(v38)
    | US27_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method121(v23, v28)
        let v33 : (string list -> (string [])) = List.toArray
        let v34 : (string []) = v33 v29
        US26_0(v34)
and method124 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option, v9 : bool) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "file_name"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v0}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "arguments"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v1}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v159 : string = $"{v88}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v11, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v177 : string = "options"
    let v178 : string = $"{v177}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v11, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v52}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v11, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v212 : string = $"{v14}"
    let v220 : unit = ()
    let v221 : (unit -> unit) = closure7(v11, v212)
    let v222 : unit = (fun () -> v221 (); v220) ()
    let v230 : string = "command"
    let v231 : string = $"{v230}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v11, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v52}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v11, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v2}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v11, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v282 : string = $"{v88}"
    let v290 : unit = ()
    let v291 : (unit -> unit) = closure7(v11, v282)
    let v292 : unit = (fun () -> v291 (); v290) ()
    let v300 : string = "cancellation_token"
    let v301 : string = $"{v300}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v11, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v52}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v11, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    (* run_target_args'
    let v338 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v339 : string = "format!(\"{:#?}\", $0)"
    let v340 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v339 
    let v341 : string = "fable_library_rust::String_::fromString($0)"
    let v342 : string = Fable.Core.RustInterop.emitRustExpr v340 v341 
    let _run_target_args'_v338 = v342 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v343 : string = "format!(\"{:#?}\", $0)"
    let v344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v343 
    let v345 : string = "fable_library_rust::String_::fromString($0)"
    let v346 : string = Fable.Core.RustInterop.emitRustExpr v344 v345 
    let _run_target_args'_v338 = v346 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v347 : string = "format!(\"{:#?}\", $0)"
    let v348 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v347 
    let v349 : string = "fable_library_rust::String_::fromString($0)"
    let v350 : string = Fable.Core.RustInterop.emitRustExpr v348 v349 
    let _run_target_args'_v338 = v350 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v352 : string = $"%A{v3}"
    let _run_target_args'_v338 = v352 
    #endif
#if FABLE_COMPILER_PYTHON
    let v356 : string = $"%A{v3}"
    let _run_target_args'_v338 = v356 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v360 : string = $"%A{v3}"
    let _run_target_args'_v338 = v360 
    #endif
#else
    let v364 : string = $"%A{v3}"
    let _run_target_args'_v338 = v364 
    #endif
    let v367 : string = _run_target_args'_v338 
    let v377 : string = $"{v367}"
    let v385 : unit = ()
    let v386 : (unit -> unit) = closure7(v11, v377)
    let v387 : unit = (fun () -> v386 (); v385) ()
    let v394 : string = $"{v88}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v11, v394)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v412 : string = "environment_variables"
    let v413 : string = $"{v412}"
    let v421 : unit = ()
    let v422 : (unit -> unit) = closure7(v11, v413)
    let v423 : unit = (fun () -> v422 (); v421) ()
    let v430 : string = $"{v52}"
    let v438 : unit = ()
    let v439 : (unit -> unit) = closure7(v11, v430)
    let v440 : unit = (fun () -> v439 (); v438) ()
    let v448 : string = $"%A{v4}"
    let v452 : string = $"{v448}"
    let v460 : unit = ()
    let v461 : (unit -> unit) = closure7(v11, v452)
    let v462 : unit = (fun () -> v461 (); v460) ()
    let v469 : string = $"{v88}"
    let v477 : unit = ()
    let v478 : (unit -> unit) = closure7(v11, v469)
    let v479 : unit = (fun () -> v478 (); v477) ()
    let v487 : string = "on_line"
    let v488 : string = $"{v487}"
    let v496 : unit = ()
    let v497 : (unit -> unit) = closure7(v11, v488)
    let v498 : unit = (fun () -> v497 (); v496) ()
    let v505 : string = $"{v52}"
    let v513 : unit = ()
    let v514 : (unit -> unit) = closure7(v11, v505)
    let v515 : unit = (fun () -> v514 (); v513) ()
    (* run_target_args'
    let v525 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : string = "format!(\"{:#?}\", $0)"
    let v527 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v526 
    let v528 : string = "fable_library_rust::String_::fromString($0)"
    let v529 : string = Fable.Core.RustInterop.emitRustExpr v527 v528 
    let _run_target_args'_v525 = v529 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v530 : string = "format!(\"{:#?}\", $0)"
    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v530 
    let v532 : string = "fable_library_rust::String_::fromString($0)"
    let v533 : string = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let _run_target_args'_v525 = v533 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v534 : string = "format!(\"{:#?}\", $0)"
    let v535 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v534 
    let v536 : string = "fable_library_rust::String_::fromString($0)"
    let v537 : string = Fable.Core.RustInterop.emitRustExpr v535 v536 
    let _run_target_args'_v525 = v537 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v539 : string = $"%A{v5}"
    let _run_target_args'_v525 = v539 
    #endif
#if FABLE_COMPILER_PYTHON
    let v543 : string = $"%A{v5}"
    let _run_target_args'_v525 = v543 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v547 : string = $"%A{v5}"
    let _run_target_args'_v525 = v547 
    #endif
#else
    let v551 : string = $"%A{v5}"
    let _run_target_args'_v525 = v551 
    #endif
    let v554 : string = _run_target_args'_v525 
    let v564 : string = $"{v554}"
    let v572 : unit = ()
    let v573 : (unit -> unit) = closure7(v11, v564)
    let v574 : unit = (fun () -> v573 (); v572) ()
    let v581 : string = $"{v88}"
    let v589 : unit = ()
    let v590 : (unit -> unit) = closure7(v11, v581)
    let v591 : unit = (fun () -> v590 (); v589) ()
    let v599 : string = "stdin"
    let v600 : string = $"{v599}"
    let v608 : unit = ()
    let v609 : (unit -> unit) = closure7(v11, v600)
    let v610 : unit = (fun () -> v609 (); v608) ()
    let v617 : string = $"{v52}"
    let v625 : unit = ()
    let v626 : (unit -> unit) = closure7(v11, v617)
    let v627 : unit = (fun () -> v626 (); v625) ()
    (* run_target_args'
    let v637 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v638 : string = "format!(\"{:#?}\", $0)"
    let v639 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v638 
    let v640 : string = "fable_library_rust::String_::fromString($0)"
    let v641 : string = Fable.Core.RustInterop.emitRustExpr v639 v640 
    let _run_target_args'_v637 = v641 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v637 = v645 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v637 = v649 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v651 : string = $"%A{v6}"
    let _run_target_args'_v637 = v651 
    #endif
#if FABLE_COMPILER_PYTHON
    let v655 : string = $"%A{v6}"
    let _run_target_args'_v637 = v655 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v6}"
    let _run_target_args'_v637 = v659 
    #endif
#else
    let v663 : string = $"%A{v6}"
    let _run_target_args'_v637 = v663 
    #endif
    let v666 : string = _run_target_args'_v637 
    let v676 : string = $"{v666}"
    let v684 : unit = ()
    let v685 : (unit -> unit) = closure7(v11, v676)
    let v686 : unit = (fun () -> v685 (); v684) ()
    let v693 : string = $"{v88}"
    let v701 : unit = ()
    let v702 : (unit -> unit) = closure7(v11, v693)
    let v703 : unit = (fun () -> v702 (); v701) ()
    let v711 : string = "trace"
    let v712 : string = $"{v711}"
    let v720 : unit = ()
    let v721 : (unit -> unit) = closure7(v11, v712)
    let v722 : unit = (fun () -> v721 (); v720) ()
    let v729 : string = $"{v52}"
    let v737 : unit = ()
    let v738 : (unit -> unit) = closure7(v11, v729)
    let v739 : unit = (fun () -> v738 (); v737) ()
    let v747 : string =
        if v7 then
            let v745 : string = "true"
            v745
        else
            let v746 : string = "false"
            v746
    let v749 : string = $"{v747}"
    let v757 : unit = ()
    let v758 : (unit -> unit) = closure7(v11, v749)
    let v759 : unit = (fun () -> v758 (); v757) ()
    let v766 : string = $"{v88}"
    let v774 : unit = ()
    let v775 : (unit -> unit) = closure7(v11, v766)
    let v776 : unit = (fun () -> v775 (); v774) ()
    let v784 : string = "working_directory"
    let v785 : string = $"{v784}"
    let v793 : unit = ()
    let v794 : (unit -> unit) = closure7(v11, v785)
    let v795 : unit = (fun () -> v794 (); v793) ()
    let v802 : string = $"{v52}"
    let v810 : unit = ()
    let v811 : (unit -> unit) = closure7(v11, v802)
    let v812 : unit = (fun () -> v811 (); v810) ()
    (* run_target_args'
    let v822 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v823 : string = "format!(\"{:#?}\", $0)"
    let v824 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v823 
    let v825 : string = "fable_library_rust::String_::fromString($0)"
    let v826 : string = Fable.Core.RustInterop.emitRustExpr v824 v825 
    let _run_target_args'_v822 = v826 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v827 : string = "format!(\"{:#?}\", $0)"
    let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v827 
    let v829 : string = "fable_library_rust::String_::fromString($0)"
    let v830 : string = Fable.Core.RustInterop.emitRustExpr v828 v829 
    let _run_target_args'_v822 = v830 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v831 : string = "format!(\"{:#?}\", $0)"
    let v832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v831 
    let v833 : string = "fable_library_rust::String_::fromString($0)"
    let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
    let _run_target_args'_v822 = v834 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v836 : string = $"%A{v8}"
    let _run_target_args'_v822 = v836 
    #endif
#if FABLE_COMPILER_PYTHON
    let v840 : string = $"%A{v8}"
    let _run_target_args'_v822 = v840 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v844 : string = $"%A{v8}"
    let _run_target_args'_v822 = v844 
    #endif
#else
    let v848 : string = $"%A{v8}"
    let _run_target_args'_v822 = v848 
    #endif
    let v851 : string = _run_target_args'_v822 
    let v861 : string = $"{v851}"
    let v869 : unit = ()
    let v870 : (unit -> unit) = closure7(v11, v861)
    let v871 : unit = (fun () -> v870 (); v869) ()
    let v878 : string = $"{v88}"
    let v886 : unit = ()
    let v887 : (unit -> unit) = closure7(v11, v878)
    let v888 : unit = (fun () -> v887 (); v886) ()
    let v896 : string = "stderr"
    let v897 : string = $"{v896}"
    let v905 : unit = ()
    let v906 : (unit -> unit) = closure7(v11, v897)
    let v907 : unit = (fun () -> v906 (); v905) ()
    let v914 : string = $"{v52}"
    let v922 : unit = ()
    let v923 : (unit -> unit) = closure7(v11, v914)
    let v924 : unit = (fun () -> v923 (); v922) ()
    let v932 : string =
        if v9 then
            let v930 : string = "true"
            v930
        else
            let v931 : string = "false"
            v931
    let v934 : string = $"{v932}"
    let v942 : unit = ()
    let v943 : (unit -> unit) = closure7(v11, v934)
    let v944 : unit = (fun () -> v943 (); v942) ()
    let v952 : string = " }"
    let v953 : string = $"{v952}"
    let v961 : unit = ()
    let v962 : (unit -> unit) = closure7(v11, v953)
    let v963 : unit = (fun () -> v962 (); v961) ()
    let v970 : string = $"{v952}"
    let v978 : unit = ()
    let v979 : (unit -> unit) = closure7(v11, v970)
    let v980 : unit = (fun () -> v979 (); v978) ()
    let v986 : string = v11.l0
    v986
and method123 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option, v17 : bool) : string =
    let v18 : string = method124(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method16(v62)
and closure38 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    let v73 : bool = v72 = false
    let v311 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method11()
            let v134 : string = $"%A{v9}"
            let v137 : string = method123(v113, v114, v115, v116, v117, v118, v131, v132, v8, v134, v0, v1, v2, v3, v4, v5, v6, v7)
            let v152 : unit = ()
            let v153 : unit = (fun () -> v25 (); v152) ()
            let struct (v176 : Mut0, v177 : Mut1, v178 : Mut2, v179 : Mut3, v180 : Mut4, v181 : int64 option) = TraceState.trace_state.Value
            let v196 : unit = ()
            let v197 : (unit -> unit) = closure8(v176)
            let v198 : unit = (fun () -> v197 (); v196) ()
            let v201 : (string -> unit) = closure9()
            (* run_target_args'
            let v202 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v203 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v203 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v205 : string = v179.l0
            let v206 : bool = v205 = ""
            let v221 : string =
                if v206 then
                    v137
                else
                    let v207 : bool = v137 = ""
                    if v207 then
                        let v208 : string = v179.l0
                        v208
                    else
                        let v209 : string = v179.l0
                        let v212 : string = "\n"
                        let v213 : string = v209 + v212 
                        let v217 : string = v213 + v137 
                        v217
            (* run_target_args'
            let v226 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v227 
            let _run_target_args'_v226 = v228 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v229 : string = "&*$0"
            let v230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v229 
            let _run_target_args'_v226 = v230 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v231 : string = "&*$0"
            let v232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v231 
            let _run_target_args'_v226 = v232 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v238 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v242 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v242 
            #endif
#else
            let v246 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v246 
            #endif
            let v249 : Ref<Str> = _run_target_args'_v226 
            let v258 : string = $"$0.chars()"
            let v259 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v249 v258 
            let v260 : string = "$0"
            let v261 : _ = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "$0.collect::<Vec<_>>()"
            let v263 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v265 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v267 : bool = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "x"
            let v269 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v268 
            let v270 : string = "String::from_iter($0)"
            let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v269 v270 
            let v272 : string = "true; $0 }).collect::<Vec<_>>()"
            let v273 : bool = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v274 : string = "_vec_map"
            let v275 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v274 
            let v276 : string = "$0.len()"
            let v277 : unativeint = Fable.Core.RustInterop.emitRustExpr v275 v276 
            let v283 : int32 = v277 |> int32 
            let v293 : string = ""
            let v294 : bool = v137 <> v293 
            let v298 : bool =
                if v294 then
                    let v297 : bool = v283 <= 1
                    v297
                else
                    false
            if v298 then
                v179.l0 <- v221
                ()
            else
                v179.l0 <- v293
                let v299 : string = "true; $0.into_iter().for_each(|x| { //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v275 v299 
                let v301 : string = "x"
                let v302 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
                let v305 : string = $"true"
                let v306 : bool = Fable.Core.RustInterop.emitRustExpr () v305 
                let v307 : string = "true; }); //"
                let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v201 v137
            #endif
#if FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#else
            v201 v137
            #endif
            // run_target_args' is_unit
            let v309 : (string -> unit) = v177.l0
            v309 v137
            US6_0(v176, v177, v178, v179, v180, v181)
    
    ()
and closure39 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method125 () : (std_process_Child option -> std_process_Child option) =
    closure39()
and closure40 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US28 =
    US28_0(v0)
and method126 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) =
    closure40()
and closure41 () (v0 : std_string_String) : US28 =
    US28_1(v0)
and method127 () : (std_string_String -> US28) =
    closure41()
and method129 (v0 : std_string_String, v1 : string, v2 : string, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option, v10 : bool) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "error"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "format!(\"{:#?}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "format!(\"{:#?}\", $0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v79 
    let v81 : string = "fable_library_rust::String_::fromString($0)"
    let v82 : string = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let _run_target_args'_v74 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v83 : string = "format!(\"{:#?}\", $0)"
    let v84 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v83 
    let v85 : string = "fable_library_rust::String_::fromString($0)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let _run_target_args'_v74 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : string = $"%A{v0}"
    let _run_target_args'_v74 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v92 : string = $"%A{v0}"
    let _run_target_args'_v74 = v92 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : string = $"%A{v0}"
    let _run_target_args'_v74 = v96 
    #endif
#else
    let v100 : string = $"%A{v0}"
    let _run_target_args'_v74 = v100 
    #endif
    let v103 : string = _run_target_args'_v74 
    let v113 : string = $"{v103}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v12, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v131 : string = "; "
    let v132 : string = $"{v131}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v12, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v150 : string = "file_name"
    let v151 : string = $"{v150}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v12, v151)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v168 : string = $"{v53}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v12, v168)
    let v178 : unit = (fun () -> v177 (); v176) ()
    let v185 : string = $"{v1}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v12, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v131}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v12, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v220 : string = "arguments"
    let v221 : string = $"{v220}"
    let v229 : unit = ()
    let v230 : (unit -> unit) = closure7(v12, v221)
    let v231 : unit = (fun () -> v230 (); v229) ()
    let v238 : string = $"{v53}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v12, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v255 : string = $"{v2}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v12, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v131}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v12, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v290 : string = "options"
    let v291 : string = $"{v290}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v12, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v53}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v12, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v325 : string = $"{v15}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v12, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    let v343 : string = "command"
    let v344 : string = $"{v343}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v12, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v53}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v12, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v378 : string = $"{v3}"
    let v386 : unit = ()
    let v387 : (unit -> unit) = closure7(v12, v378)
    let v388 : unit = (fun () -> v387 (); v386) ()
    let v395 : string = $"{v131}"
    let v403 : unit = ()
    let v404 : (unit -> unit) = closure7(v12, v395)
    let v405 : unit = (fun () -> v404 (); v403) ()
    let v413 : string = "cancellation_token"
    let v414 : string = $"{v413}"
    let v422 : unit = ()
    let v423 : (unit -> unit) = closure7(v12, v414)
    let v424 : unit = (fun () -> v423 (); v422) ()
    let v431 : string = $"{v53}"
    let v439 : unit = ()
    let v440 : (unit -> unit) = closure7(v12, v431)
    let v441 : unit = (fun () -> v440 (); v439) ()
    (* run_target_args'
    let v451 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v452 : string = "format!(\"{:#?}\", $0)"
    let v453 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v452 
    let v454 : string = "fable_library_rust::String_::fromString($0)"
    let v455 : string = Fable.Core.RustInterop.emitRustExpr v453 v454 
    let _run_target_args'_v451 = v455 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v456 : string = "format!(\"{:#?}\", $0)"
    let v457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v456 
    let v458 : string = "fable_library_rust::String_::fromString($0)"
    let v459 : string = Fable.Core.RustInterop.emitRustExpr v457 v458 
    let _run_target_args'_v451 = v459 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v460 : string = "format!(\"{:#?}\", $0)"
    let v461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v460 
    let v462 : string = "fable_library_rust::String_::fromString($0)"
    let v463 : string = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let _run_target_args'_v451 = v463 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v465 : string = $"%A{v4}"
    let _run_target_args'_v451 = v465 
    #endif
#if FABLE_COMPILER_PYTHON
    let v469 : string = $"%A{v4}"
    let _run_target_args'_v451 = v469 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v473 : string = $"%A{v4}"
    let _run_target_args'_v451 = v473 
    #endif
#else
    let v477 : string = $"%A{v4}"
    let _run_target_args'_v451 = v477 
    #endif
    let v480 : string = _run_target_args'_v451 
    let v490 : string = $"{v480}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v12, v490)
    let v500 : unit = (fun () -> v499 (); v498) ()
    let v507 : string = $"{v131}"
    let v515 : unit = ()
    let v516 : (unit -> unit) = closure7(v12, v507)
    let v517 : unit = (fun () -> v516 (); v515) ()
    let v525 : string = "environment_variables"
    let v526 : string = $"{v525}"
    let v534 : unit = ()
    let v535 : (unit -> unit) = closure7(v12, v526)
    let v536 : unit = (fun () -> v535 (); v534) ()
    let v543 : string = $"{v53}"
    let v551 : unit = ()
    let v552 : (unit -> unit) = closure7(v12, v543)
    let v553 : unit = (fun () -> v552 (); v551) ()
    let v561 : string = $"%A{v5}"
    let v565 : string = $"{v561}"
    let v573 : unit = ()
    let v574 : (unit -> unit) = closure7(v12, v565)
    let v575 : unit = (fun () -> v574 (); v573) ()
    let v582 : string = $"{v131}"
    let v590 : unit = ()
    let v591 : (unit -> unit) = closure7(v12, v582)
    let v592 : unit = (fun () -> v591 (); v590) ()
    let v600 : string = "on_line"
    let v601 : string = $"{v600}"
    let v609 : unit = ()
    let v610 : (unit -> unit) = closure7(v12, v601)
    let v611 : unit = (fun () -> v610 (); v609) ()
    let v618 : string = $"{v53}"
    let v626 : unit = ()
    let v627 : (unit -> unit) = closure7(v12, v618)
    let v628 : unit = (fun () -> v627 (); v626) ()
    (* run_target_args'
    let v638 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v639 : string = "format!(\"{:#?}\", $0)"
    let v640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v639 
    let v641 : string = "fable_library_rust::String_::fromString($0)"
    let v642 : string = Fable.Core.RustInterop.emitRustExpr v640 v641 
    let _run_target_args'_v638 = v642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v643 : string = "format!(\"{:#?}\", $0)"
    let v644 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v643 
    let v645 : string = "fable_library_rust::String_::fromString($0)"
    let v646 : string = Fable.Core.RustInterop.emitRustExpr v644 v645 
    let _run_target_args'_v638 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v647 : string = "format!(\"{:#?}\", $0)"
    let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v647 
    let v649 : string = "fable_library_rust::String_::fromString($0)"
    let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
    let _run_target_args'_v638 = v650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : string = $"%A{v6}"
    let _run_target_args'_v638 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v656 : string = $"%A{v6}"
    let _run_target_args'_v638 = v656 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v660 : string = $"%A{v6}"
    let _run_target_args'_v638 = v660 
    #endif
#else
    let v664 : string = $"%A{v6}"
    let _run_target_args'_v638 = v664 
    #endif
    let v667 : string = _run_target_args'_v638 
    let v677 : string = $"{v667}"
    let v685 : unit = ()
    let v686 : (unit -> unit) = closure7(v12, v677)
    let v687 : unit = (fun () -> v686 (); v685) ()
    let v694 : string = $"{v131}"
    let v702 : unit = ()
    let v703 : (unit -> unit) = closure7(v12, v694)
    let v704 : unit = (fun () -> v703 (); v702) ()
    let v712 : string = "stdin"
    let v713 : string = $"{v712}"
    let v721 : unit = ()
    let v722 : (unit -> unit) = closure7(v12, v713)
    let v723 : unit = (fun () -> v722 (); v721) ()
    let v730 : string = $"{v53}"
    let v738 : unit = ()
    let v739 : (unit -> unit) = closure7(v12, v730)
    let v740 : unit = (fun () -> v739 (); v738) ()
    (* run_target_args'
    let v750 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v751 : string = "format!(\"{:#?}\", $0)"
    let v752 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v751 
    let v753 : string = "fable_library_rust::String_::fromString($0)"
    let v754 : string = Fable.Core.RustInterop.emitRustExpr v752 v753 
    let _run_target_args'_v750 = v754 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v755 : string = "format!(\"{:#?}\", $0)"
    let v756 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v755 
    let v757 : string = "fable_library_rust::String_::fromString($0)"
    let v758 : string = Fable.Core.RustInterop.emitRustExpr v756 v757 
    let _run_target_args'_v750 = v758 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v759 : string = "format!(\"{:#?}\", $0)"
    let v760 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v759 
    let v761 : string = "fable_library_rust::String_::fromString($0)"
    let v762 : string = Fable.Core.RustInterop.emitRustExpr v760 v761 
    let _run_target_args'_v750 = v762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v764 : string = $"%A{v7}"
    let _run_target_args'_v750 = v764 
    #endif
#if FABLE_COMPILER_PYTHON
    let v768 : string = $"%A{v7}"
    let _run_target_args'_v750 = v768 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v772 : string = $"%A{v7}"
    let _run_target_args'_v750 = v772 
    #endif
#else
    let v776 : string = $"%A{v7}"
    let _run_target_args'_v750 = v776 
    #endif
    let v779 : string = _run_target_args'_v750 
    let v789 : string = $"{v779}"
    let v797 : unit = ()
    let v798 : (unit -> unit) = closure7(v12, v789)
    let v799 : unit = (fun () -> v798 (); v797) ()
    let v806 : string = $"{v131}"
    let v814 : unit = ()
    let v815 : (unit -> unit) = closure7(v12, v806)
    let v816 : unit = (fun () -> v815 (); v814) ()
    let v824 : string = "trace"
    let v825 : string = $"{v824}"
    let v833 : unit = ()
    let v834 : (unit -> unit) = closure7(v12, v825)
    let v835 : unit = (fun () -> v834 (); v833) ()
    let v842 : string = $"{v53}"
    let v850 : unit = ()
    let v851 : (unit -> unit) = closure7(v12, v842)
    let v852 : unit = (fun () -> v851 (); v850) ()
    let v860 : string =
        if v8 then
            let v858 : string = "true"
            v858
        else
            let v859 : string = "false"
            v859
    let v862 : string = $"{v860}"
    let v870 : unit = ()
    let v871 : (unit -> unit) = closure7(v12, v862)
    let v872 : unit = (fun () -> v871 (); v870) ()
    let v879 : string = $"{v131}"
    let v887 : unit = ()
    let v888 : (unit -> unit) = closure7(v12, v879)
    let v889 : unit = (fun () -> v888 (); v887) ()
    let v897 : string = "working_directory"
    let v898 : string = $"{v897}"
    let v906 : unit = ()
    let v907 : (unit -> unit) = closure7(v12, v898)
    let v908 : unit = (fun () -> v907 (); v906) ()
    let v915 : string = $"{v53}"
    let v923 : unit = ()
    let v924 : (unit -> unit) = closure7(v12, v915)
    let v925 : unit = (fun () -> v924 (); v923) ()
    (* run_target_args'
    let v935 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v936 : string = "format!(\"{:#?}\", $0)"
    let v937 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v936 
    let v938 : string = "fable_library_rust::String_::fromString($0)"
    let v939 : string = Fable.Core.RustInterop.emitRustExpr v937 v938 
    let _run_target_args'_v935 = v939 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v940 : string = "format!(\"{:#?}\", $0)"
    let v941 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v940 
    let v942 : string = "fable_library_rust::String_::fromString($0)"
    let v943 : string = Fable.Core.RustInterop.emitRustExpr v941 v942 
    let _run_target_args'_v935 = v943 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v944 : string = "format!(\"{:#?}\", $0)"
    let v945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v944 
    let v946 : string = "fable_library_rust::String_::fromString($0)"
    let v947 : string = Fable.Core.RustInterop.emitRustExpr v945 v946 
    let _run_target_args'_v935 = v947 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v949 : string = $"%A{v9}"
    let _run_target_args'_v935 = v949 
    #endif
#if FABLE_COMPILER_PYTHON
    let v953 : string = $"%A{v9}"
    let _run_target_args'_v935 = v953 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v957 : string = $"%A{v9}"
    let _run_target_args'_v935 = v957 
    #endif
#else
    let v961 : string = $"%A{v9}"
    let _run_target_args'_v935 = v961 
    #endif
    let v964 : string = _run_target_args'_v935 
    let v974 : string = $"{v964}"
    let v982 : unit = ()
    let v983 : (unit -> unit) = closure7(v12, v974)
    let v984 : unit = (fun () -> v983 (); v982) ()
    let v991 : string = $"{v131}"
    let v999 : unit = ()
    let v1000 : (unit -> unit) = closure7(v12, v991)
    let v1001 : unit = (fun () -> v1000 (); v999) ()
    let v1009 : string = "stderr"
    let v1010 : string = $"{v1009}"
    let v1018 : unit = ()
    let v1019 : (unit -> unit) = closure7(v12, v1010)
    let v1020 : unit = (fun () -> v1019 (); v1018) ()
    let v1027 : string = $"{v53}"
    let v1035 : unit = ()
    let v1036 : (unit -> unit) = closure7(v12, v1027)
    let v1037 : unit = (fun () -> v1036 (); v1035) ()
    let v1045 : string =
        if v10 then
            let v1043 : string = "true"
            v1043
        else
            let v1044 : string = "false"
            v1044
    let v1047 : string = $"{v1045}"
    let v1055 : unit = ()
    let v1056 : (unit -> unit) = closure7(v12, v1047)
    let v1057 : unit = (fun () -> v1056 (); v1055) ()
    let v1065 : string = " }"
    let v1066 : string = $"{v1065}"
    let v1074 : unit = ()
    let v1075 : (unit -> unit) = closure7(v12, v1066)
    let v1076 : unit = (fun () -> v1075 (); v1074) ()
    let v1083 : string = $"{v1065}"
    let v1091 : unit = ()
    let v1092 : (unit -> unit) = closure7(v12, v1083)
    let v1093 : unit = (fun () -> v1092 (); v1091) ()
    let v1099 : string = v12.l0
    v1099
and method128 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option, v18 : bool) : string =
    let v19 : string = method129(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
    let v20 : int64 = v0.l0
    let v23 : string = " "
    let v24 : string = v6 + v23 
    let v28 : string = v24 + v7 
    let v33 : string = " #"
    let v34 : string = v28 + v33 
    let v38 : (int64 -> string) = _.ToString()
    let v39 : string = v38 v20
    let v43 : string = v34 + v39 
    let v47 : string = v43 + v23 
    let v52 : string = "runtime.execute_with_options / child error"
    let v53 : string = v47 + v52 
    let v58 : string = " / "
    let v59 : string = v53 + v58 
    let v63 : string = v59 + v19 
    method16(v63)
and closure42 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>, v10 : std_string_String) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    let v74 : bool = v73 = false
    let v312 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method82()
            let v135 : string = $"%A{v9}"
            let v138 : string = method128(v114, v115, v116, v117, v118, v119, v132, v133, v10, v8, v135, v0, v1, v2, v3, v4, v5, v6, v7)
            let v153 : unit = ()
            let v154 : unit = (fun () -> v26 (); v153) ()
            let struct (v177 : Mut0, v178 : Mut1, v179 : Mut2, v180 : Mut3, v181 : Mut4, v182 : int64 option) = TraceState.trace_state.Value
            let v197 : unit = ()
            let v198 : (unit -> unit) = closure8(v177)
            let v199 : unit = (fun () -> v198 (); v197) ()
            let v202 : (string -> unit) = closure9()
            (* run_target_args'
            let v203 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v204 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v205 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v205 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v206 : string = v180.l0
            let v207 : bool = v206 = ""
            let v222 : string =
                if v207 then
                    v138
                else
                    let v208 : bool = v138 = ""
                    if v208 then
                        let v209 : string = v180.l0
                        v209
                    else
                        let v210 : string = v180.l0
                        let v213 : string = "\n"
                        let v214 : string = v210 + v213 
                        let v218 : string = v214 + v138 
                        v218
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "&*$0"
            let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "&*$0"
            let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v235 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v235 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v243 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v243 
            #endif
#else
            let v247 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v247 
            #endif
            let v250 : Ref<Str> = _run_target_args'_v227 
            let v259 : string = $"$0.chars()"
            let v260 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "$0"
            let v262 : _ = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0.collect::<Vec<_>>()"
            let v264 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v266 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "x"
            let v270 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "String::from_iter($0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "true; $0 }).collect::<Vec<_>>()"
            let v274 : bool = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v275 : string = "_vec_map"
            let v276 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v275 
            let v277 : string = "$0.len()"
            let v278 : unativeint = Fable.Core.RustInterop.emitRustExpr v276 v277 
            let v284 : int32 = v278 |> int32 
            let v294 : string = ""
            let v295 : bool = v138 <> v294 
            let v299 : bool =
                if v295 then
                    let v298 : bool = v284 <= 1
                    v298
                else
                    false
            if v299 then
                v180.l0 <- v222
                ()
            else
                v180.l0 <- v294
                let v300 : string = "true; $0.into_iter().for_each(|x| { //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v276 v300 
                let v302 : string = "x"
                let v303 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr v303 v304 
                let v306 : string = $"true"
                let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
                let v308 : string = "true; }); //"
                let v309 : bool = Fable.Core.RustInterop.emitRustExpr () v308 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v202 v138
            #endif
#if FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#else
            v202 v138
            #endif
            // run_target_args' is_unit
            let v310 : (string -> unit) = v178.l0
            v310 v138
            US6_0(v177, v178, v179, v180, v181, v182)
    
    ()
and method130 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure43 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method131 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure43()
and closure44 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method132 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure44()
and method133 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure44()
and closure45 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method134 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure45()
and closure46 () (v0 : std_string_String) : US30 =
    US30_0(v0)
and method135 () : (std_string_String -> US30) =
    closure46()
and closure47 () (v0 : std_string_String) : US30 =
    US30_1(v0)
and method136 () : (std_string_String -> US30) =
    closure47()
and method138 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "trace'"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v63 : string =
        if v0 then
            let v61 : string = "true"
            v61
        else
            let v62 : string = "false"
            v62
    let v65 : string = $"{v63}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "e"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    (* run_target_args'
    let v140 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v141 : string = "format!(\"{:#?}\", $0)"
    let v142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v141 
    let v143 : string = "fable_library_rust::String_::fromString($0)"
    let v144 : string = Fable.Core.RustInterop.emitRustExpr v142 v143 
    let _run_target_args'_v140 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "format!(\"{:#?}\", $0)"
    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v145 
    let v147 : string = "fable_library_rust::String_::fromString($0)"
    let v148 : string = Fable.Core.RustInterop.emitRustExpr v146 v147 
    let _run_target_args'_v140 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "format!(\"{:#?}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v149 
    let v151 : string = "fable_library_rust::String_::fromString($0)"
    let v152 : string = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let _run_target_args'_v140 = v152 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = $"%A{v1}"
    let _run_target_args'_v140 = v154 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : string = $"%A{v1}"
    let _run_target_args'_v140 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : string = $"%A{v1}"
    let _run_target_args'_v140 = v162 
    #endif
#else
    let v166 : string = $"%A{v1}"
    let _run_target_args'_v140 = v166 
    #endif
    let v169 : string = _run_target_args'_v140 
    let v179 : string = $"{v169}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v3, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v206 : unit = ()
    let v207 : (unit -> unit) = closure7(v3, v198)
    let v208 : unit = (fun () -> v207 (); v206) ()
    let v214 : string = v3.l0
    v214
and method137 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method138(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "runtime.stdio_line"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure48 (v0 : bool, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method137(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method140 () : string =
    let v0 : string = method13()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method139 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method140()
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v41 : string = v37 + v8 
    let v46 : string = " / "
    let v47 : string = v41 + v46 
    let v51 : string = v47 + v9 
    method16(v51)
and closure49 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v301 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method85()
            let v124 : bool = v0 = ""
            let v127 : string =
                if v124 then
                    let v125 : string = ""
                    v125
                else
                    method139(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v16 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure50 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method141 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure50()
and method142 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure51 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US31 =
    US31_0(v0)
and method143 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) =
    closure51()
and method144 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure52 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US32 =
    US32_0(v0)
and method145 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) =
    closure52()
and method146 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure53 () (v0 : std_process_Output) : US33 =
    US33_0(v0)
and method147 () : (std_process_Output -> US33) =
    closure53()
and closure54 () (v0 : std_string_String) : US33 =
    US33_1(v0)
and method148 () : (std_string_String -> US33) =
    closure54()
and method149 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option, v18 : bool) : string =
    let v19 : string = method129(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
    let v20 : int64 = v0.l0
    let v23 : string = " "
    let v24 : string = v6 + v23 
    let v28 : string = v24 + v7 
    let v33 : string = " #"
    let v34 : string = v28 + v33 
    let v38 : (int64 -> string) = _.ToString()
    let v39 : string = v38 v20
    let v43 : string = v34 + v39 
    let v47 : string = v43 + v23 
    let v52 : string = "runtime.execute_with_options / output error"
    let v53 : string = v47 + v52 
    let v58 : string = " / "
    let v59 : string = v53 + v58 
    let v63 : string = v59 + v19 
    method16(v63)
and closure55 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>, v10 : std_string_String) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    let v74 : bool = v73 = false
    let v312 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method82()
            let v135 : string = $"%A{v9}"
            let v138 : string = method149(v114, v115, v116, v117, v118, v119, v132, v133, v10, v8, v135, v0, v1, v2, v3, v4, v5, v6, v7)
            let v153 : unit = ()
            let v154 : unit = (fun () -> v26 (); v153) ()
            let struct (v177 : Mut0, v178 : Mut1, v179 : Mut2, v180 : Mut3, v181 : Mut4, v182 : int64 option) = TraceState.trace_state.Value
            let v197 : unit = ()
            let v198 : (unit -> unit) = closure8(v177)
            let v199 : unit = (fun () -> v198 (); v197) ()
            let v202 : (string -> unit) = closure9()
            (* run_target_args'
            let v203 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v204 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v205 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v205 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v206 : string = v180.l0
            let v207 : bool = v206 = ""
            let v222 : string =
                if v207 then
                    v138
                else
                    let v208 : bool = v138 = ""
                    if v208 then
                        let v209 : string = v180.l0
                        v209
                    else
                        let v210 : string = v180.l0
                        let v213 : string = "\n"
                        let v214 : string = v210 + v213 
                        let v218 : string = v214 + v138 
                        v218
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "&*$0"
            let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "&*$0"
            let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v235 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v235 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v243 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v243 
            #endif
#else
            let v247 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v247 
            #endif
            let v250 : Ref<Str> = _run_target_args'_v227 
            let v259 : string = $"$0.chars()"
            let v260 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "$0"
            let v262 : _ = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0.collect::<Vec<_>>()"
            let v264 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v266 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "x"
            let v270 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "String::from_iter($0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "true; $0 }).collect::<Vec<_>>()"
            let v274 : bool = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v275 : string = "_vec_map"
            let v276 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v275 
            let v277 : string = "$0.len()"
            let v278 : unativeint = Fable.Core.RustInterop.emitRustExpr v276 v277 
            let v284 : int32 = v278 |> int32 
            let v294 : string = ""
            let v295 : bool = v138 <> v294 
            let v299 : bool =
                if v295 then
                    let v298 : bool = v284 <= 1
                    v298
                else
                    false
            if v299 then
                v180.l0 <- v222
                ()
            else
                v180.l0 <- v294
                let v300 : string = "true; $0.into_iter().for_each(|x| { //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v276 v300 
                let v302 : string = "x"
                let v303 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr v303 v304 
                let v306 : string = $"true"
                let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
                let v308 : string = "true; }); //"
                let v309 : bool = Fable.Core.RustInterop.emitRustExpr () v308 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v202 v138
            #endif
#if FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#else
            v202 v138
            #endif
            // run_target_args' is_unit
            let v310 : (string -> unit) = v178.l0
            v310 v138
            US6_0(v177, v178, v179, v180, v181, v182)
    
    ()
and closure56 () (v0 : int32) : US34 =
    US34_0(v0)
and method150 () : (int32 -> US34) =
    closure56()
and method152 (v0 : string, v1 : int32, v2 : int32) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "file_name"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v63 : string = $"{v0}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v4, v63)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v81 : string = "; "
    let v82 : string = $"{v81}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v4, v82)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v100 : string = "exit_code"
    let v101 : string = $"{v100}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v4, v101)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v118 : string = $"{v45}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v4, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v81}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "std_trace_length"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v211 : string = $"{v2}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v4, v211)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v229 : string = " }"
    let v230 : string = $"{v229}"
    let v238 : unit = ()
    let v239 : (unit -> unit) = closure7(v4, v230)
    let v240 : unit = (fun () -> v239 (); v238) ()
    let v246 : string = v4.l0
    v246
and method151 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : int32, v10 : int32) : string =
    let v11 : string = method152(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "runtime.execute_with_options / result"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method16(v55)
and closure57 (v0 : string, v1 : int32, v2 : string) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    let v66 : bool = v65 = false
    let v301 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method85()
            let v126 : int32 = v2.Length
            let v127 : string = method151(v106, v107, v108, v109, v110, v111, v124, v125, v0, v1, v126)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v18 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method90 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : struct (int32 * string) =
    let v8 : string = method91(v0, v1, v2, v3, v4, v5, v6, v7)
    let v9 : US18 = method92(v8)
    let struct (v21 : string, v22 : US5) =
        match v9 with
        | US18_1(v12) -> (* Error *)
            let v14 : string = $"resultm.get / Error x: {v12}"
            failwith<struct (string * US5)> v14
        | US18_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v26 : string =
        match v22 with
        | US5_1 -> (* None *)
            let v24 : string = ""
            v24
        | US5_0(v23) -> (* Some *)
            v23
    let v27 : US26 = method113(v26)
    let v36 : (string []) =
        match v27 with
        | US26_1(v29) -> (* Error *)
            let v31 : string = $"resultm.get / Error x: {v29}"
            failwith<(string [])> v31
        | US26_0(v28) -> (* Ok *)
            v28
    let v37 : string = "$0.to_vec()"
    let v38 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "x"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr () v41 
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "&*$0"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v42 v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "&*$0"
    let v51 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v42 v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "&*$0"
    let v53 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v42 v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : Ref<Str> = v42 |> unbox<Ref<Str>>
    let _run_target_args'_v47 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : Ref<Str> = v42 |> unbox<Ref<Str>>
    let _run_target_args'_v47 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v42 |> unbox<Ref<Str>>
    let _run_target_args'_v47 = v63 
    #endif
#else
    let v67 : Ref<Str> = v42 |> unbox<Ref<Str>>
    let _run_target_args'_v47 = v67 
    #endif
    let v70 : Ref<Str> = _run_target_args'_v47 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "String::from($0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : std_string_String = v70 |> unbox<std_string_String>
    let _run_target_args'_v83 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_string_String = v70 |> unbox<std_string_String>
    let _run_target_args'_v83 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v70 |> unbox<std_string_String>
    let _run_target_args'_v83 = v99 
    #endif
#else
    let v103 : std_string_String = v70 |> unbox<std_string_String>
    let _run_target_args'_v83 = v103 
    #endif
    let v106 : std_string_String = _run_target_args'_v83 
    let v115 : string = "true; $0 }).collect::<Vec<_>>()"
    let v116 : bool = Fable.Core.RustInterop.emitRustExpr v106 v115 
    let v117 : string = "_vec_map"
    let v118 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v117 
    let v434 : unit = ()
    let v435 : (unit -> unit) = closure38(v0, v1, v2, v3, v4, v5, v6, v7, v21, v118)
    let v436 : unit = (fun () -> v435 (); v434) ()
    let v756 : bool = true
    let mutable _capture_v756 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v757 : string = "std::process::Command::new(&*$0)"
    let v758 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v21 v757 
    let v759 : string = "true; let mut v758 = v758"
    let v760 : bool = Fable.Core.RustInterop.emitRustExpr () v759 
    let v761 : string = "true; std::process::Command::args(&mut v758, &*$0)"
    let v762 : bool = Fable.Core.RustInterop.emitRustExpr v118 v761 
    let v763 : string = "$0"
    let v764 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v758 v763 
    let v765 : string = "std::process::Stdio::piped()"
    let v766 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v765 
    let v767 : string = "true; let mut v764 = v764"
    let v768 : bool = Fable.Core.RustInterop.emitRustExpr () v767 
    let v769 : string = "true; std::process::Command::stdout(&mut v764, std::process::Stdio::piped())"
    let v770 : bool = Fable.Core.RustInterop.emitRustExpr () v769 
    let v771 : string = "$0"
    let v772 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v764 v771 
    let v773 : string = "std::process::Stdio::piped()"
    let v774 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "true; let mut v772 = v772"
    let v776 : bool = Fable.Core.RustInterop.emitRustExpr () v775 
    let v777 : string = "true; std::process::Command::stderr(&mut v772, std::process::Stdio::piped())"
    let v778 : bool = Fable.Core.RustInterop.emitRustExpr () v777 
    let v779 : string = "$0"
    let v780 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v772 v779 
    let v781 : string = "std::process::Stdio::piped()"
    let v782 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v781 
    let v783 : string = "true; let mut v780 = v780"
    let v784 : bool = Fable.Core.RustInterop.emitRustExpr () v783 
    let v785 : string = "true; std::process::Command::stdin(&mut v780, std::process::Stdio::piped())"
    let v786 : bool = Fable.Core.RustInterop.emitRustExpr () v785 
    let v787 : string = "$0"
    let v788 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v780 v787 
    let v791 : (string -> US5) = method6()
    let v792 : US5 option = v6 |> Option.map v791 
    let v812 : US5 = US5_1
    let v813 : US5 = v792 |> Option.defaultValue v812 
    let v829 : std_process_Command =
        match v813 with
        | US5_1 -> (* None *)
            let v824 : string = $"v788"
            let v825 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "$0"
            let v827 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v825 v826 
            v827
        | US5_0(v817) -> (* Some *)
            let v818 : string = "true; let mut v788 = v788"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr () v818 
            let v820 : string = "true; std::process::Command::current_dir(&mut v788, &*$0)"
            let v821 : bool = Fable.Core.RustInterop.emitRustExpr v817 v820 
            let v822 : string = $"v788"
            let v823 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v822 
            v823
    let v830 : uint64 = System.Convert.ToUInt64 v2.Length
    let v831 : bool = v830 = 0UL
    let v851 : std_process_Command =
        if v831 then
            v829
        else
            let v832 : string = "$0.to_vec()"
            let v833 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v832 
            let v834 : string = "true; let _vec_fold_ = $0.into_iter().fold(v829, |acc, x| { //"
            let v835 : bool = Fable.Core.RustInterop.emitRustExpr v833 v834 
            let v836 : string = "acc"
            let v837 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v836 
            let v838 : string = "x"
            let struct (v839 : string, v840 : string) = Fable.Core.RustInterop.emitRustExpr () v838 
            let v841 : string = "true; let mut v837 = v837"
            let v842 : bool = Fable.Core.RustInterop.emitRustExpr () v841 
            let v843 : string = "true; std::process::Command::env(&mut v837, &*$0, &*$1)"
            let v844 : bool = Fable.Core.RustInterop.emitRustExpr struct (v839, v840) v843 
            let v845 : string = "$0"
            let v846 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v837 v845 
            let v847 : string = "true; $0 })"
            let v848 : bool = Fable.Core.RustInterop.emitRustExpr v846 v847 
            let v849 : string = "_vec_fold_"
            let v850 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v849 
            v850
    let v852 : string = "true; let mut v851 = v851"
    let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
    let v854 : string = "std::process::Command::spawn(&mut v851)"
    let v855 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v854 
    let v856 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v858 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v859 : string = "$0.map_err(|x| $1(x))"
    let v860 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v855, v856) v859 
    let _run_target_args'_v858 = v860 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v861 : string = "$0.map_err(|x| $1(x))"
    let v862 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v855, v856) v861 
    let _run_target_args'_v858 = v862 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v863 : string = "$0.map_err(|x| $1(x))"
    let v864 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v855, v856) v863 
    let _run_target_args'_v858 = v864 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v865 : Result<std_process_Child, std_string_String> = match v855 with Ok x -> Ok x | Error x -> Error (v856 x)
    let _run_target_args'_v858 = v865 
    #endif
#if FABLE_COMPILER_PYTHON
    let v866 : Result<std_process_Child, std_string_String> = match v855 with Ok x -> Ok x | Error x -> Error (v856 x)
    let _run_target_args'_v858 = v866 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v867 : Result<std_process_Child, std_string_String> = match v855 with Ok x -> Ok x | Error x -> Error (v856 x)
    let _run_target_args'_v858 = v867 
    #endif
#else
    let v868 : Result<std_process_Child, std_string_String> = match v855 with Ok x -> Ok x | Error x -> Error (v856 x)
    let _run_target_args'_v858 = v868 
    #endif
    let v869 : Result<std_process_Child, std_string_String> = _run_target_args'_v858 
    let v872 : (std_process_Child option -> std_process_Child option) = method125()
    let v873 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v874 : bool = Fable.Core.RustInterop.emitRustExpr v869 v873 
    let v875 : string = "x"
    let v876 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v875 
    let v878 : std_process_Child option = Some v876 
    let v881 : std_process_Child option = v872 v878
    let v882 : string = "std::sync::Mutex::new(v881)"
    let v883 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v882 
    let v884 : string = "std::sync::Arc::new(v883)"
    let v885 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v884 
    let v886 : string = "true; $0 })"
    let v887 : bool = Fable.Core.RustInterop.emitRustExpr v885 v886 
    let v888 : string = "_result_map_"
    let v889 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v888 
    let v890 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) = method126()
    let v891 : (std_string_String -> US28) = method127()
    let v892 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v893 : US28 = Fable.Core.RustInterop.emitRustExpr struct (v890, v891, v889) v892 
    let struct (v5895 : int32, v5896 : US8, v5897 : US29) =
        match v893 with
        | US28_1(v5253) -> (* Error *)
            let v5569 : unit = ()
            let v5570 : (unit -> unit) = closure42(v0, v1, v2, v3, v4, v5, v6, v7, v21, v118, v5253)
            let v5571 : unit = (fun () -> v5570 (); v5569) ()
            let v5890 : US8 = US8_0(v5253)
            let v5891 : US29 = US29_1
            struct (-1, v5890, v5891)
        | US28_0(v894) -> (* Ok *)
            let v895 : string = "true; let _capture = (|| { //"
            let v896 : bool = Fable.Core.RustInterop.emitRustExpr () v895 
            let v897 : string = "$0"
            let v898 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v894 v897 
            let v899 : string = "v898.lock()"
            let v900 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v899 
            (* run_target_args'
            let v902 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v903 : string = "$0.unwrap()"
            let v904 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v900 v903 
            let _run_target_args'_v902 = v904 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v905 : string = "$0.unwrap()"
            let v906 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v900 v905 
            let _run_target_args'_v902 = v906 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v907 : string = "$0.unwrap()"
            let v908 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v900 v907 
            let _run_target_args'_v902 = v908 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v909 : std_sync_MutexGuard<std_process_Child option> = match v900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v902 = v909 
            #endif
#if FABLE_COMPILER_PYTHON
            let v910 : std_sync_MutexGuard<std_process_Child option> = match v900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v902 = v910 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v911 : std_sync_MutexGuard<std_process_Child option> = match v900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v902 = v911 
            #endif
#else
            let v912 : std_sync_MutexGuard<std_process_Child option> = match v900 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v902 = v912 
            #endif
            let v913 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v902 
            let v916 : std_sync_MutexGuard<std_process_Child option> = method130(v913)
            let v917 : string = "true; let mut v916 = v916"
            let v918 : bool = Fable.Core.RustInterop.emitRustExpr () v917 
            let v919 : string = "&mut $0"
            let v920 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v916 v919 
            let v921 : string = "$0.as_mut()"
            let v922 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v920 v921 
            let v923 : string = "$0.unwrap()"
            let v924 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v922 v923 
            let v925 : string = "&mut $0.stdout"
            let v926 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v924 v925 
            let v927 : string = "Option::take($0)"
            let v928 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v926 v927 
            let v929 : string = "$0.unwrap()"
            let v930 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v928 v929 
            let v931 : string = "true; $0 })()"
            let v932 : bool = Fable.Core.RustInterop.emitRustExpr v930 v931 
            let v933 : string = "_capture"
            let v934 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v933 
            let v935 : string = "true; let _capture = (|| { //"
            let v936 : bool = Fable.Core.RustInterop.emitRustExpr () v935 
            let v937 : string = "$0"
            let v938 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v894 v937 
            let v939 : string = "v938.lock()"
            let v940 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v939 
            (* run_target_args'
            let v942 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v943 : string = "$0.unwrap()"
            let v944 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v940 v943 
            let _run_target_args'_v942 = v944 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v945 : string = "$0.unwrap()"
            let v946 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v940 v945 
            let _run_target_args'_v942 = v946 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v947 : string = "$0.unwrap()"
            let v948 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v940 v947 
            let _run_target_args'_v942 = v948 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v949 : std_sync_MutexGuard<std_process_Child option> = match v940 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v942 = v949 
            #endif
#if FABLE_COMPILER_PYTHON
            let v950 : std_sync_MutexGuard<std_process_Child option> = match v940 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v942 = v950 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v951 : std_sync_MutexGuard<std_process_Child option> = match v940 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v942 = v951 
            #endif
#else
            let v952 : std_sync_MutexGuard<std_process_Child option> = match v940 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v942 = v952 
            #endif
            let v953 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v942 
            let v956 : std_sync_MutexGuard<std_process_Child option> = method130(v953)
            let v957 : string = "true; let mut v956 = v956"
            let v958 : bool = Fable.Core.RustInterop.emitRustExpr () v957 
            let v959 : string = "&mut $0"
            let v960 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v956 v959 
            let v961 : string = "$0.as_mut()"
            let v962 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v960 v961 
            let v963 : string = "$0.unwrap()"
            let v964 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v962 v963 
            let v965 : string = "&mut $0.stderr"
            let v966 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v964 v965 
            let v967 : string = "Option::take($0)"
            let v968 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v966 v967 
            let v969 : string = "$0.unwrap()"
            let v970 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v968 v969 
            let v971 : string = "true; $0 })()"
            let v972 : bool = Fable.Core.RustInterop.emitRustExpr v970 v971 
            let v973 : string = "_capture"
            let v974 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v973 
            let v975 : string = "true; let _capture = (|| { //"
            let v976 : bool = Fable.Core.RustInterop.emitRustExpr () v975 
            let v977 : string = "$0"
            let v978 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v894 v977 
            let v979 : string = "v978.lock()"
            let v980 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v979 
            (* run_target_args'
            let v982 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v983 : string = "$0.unwrap()"
            let v984 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v980 v983 
            let _run_target_args'_v982 = v984 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v985 : string = "$0.unwrap()"
            let v986 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v980 v985 
            let _run_target_args'_v982 = v986 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v987 : string = "$0.unwrap()"
            let v988 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v980 v987 
            let _run_target_args'_v982 = v988 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v989 : std_sync_MutexGuard<std_process_Child option> = match v980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v982 = v989 
            #endif
#if FABLE_COMPILER_PYTHON
            let v990 : std_sync_MutexGuard<std_process_Child option> = match v980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v982 = v990 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v991 : std_sync_MutexGuard<std_process_Child option> = match v980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v982 = v991 
            #endif
#else
            let v992 : std_sync_MutexGuard<std_process_Child option> = match v980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v982 = v992 
            #endif
            let v993 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v982 
            let v996 : std_sync_MutexGuard<std_process_Child option> = method130(v993)
            let v997 : string = "true; let mut v996 = v996"
            let v998 : bool = Fable.Core.RustInterop.emitRustExpr () v997 
            let v999 : string = "&mut $0"
            let v1000 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v996 v999 
            let v1001 : string = "$0.as_mut()"
            let v1002 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1000 v1001 
            let v1003 : string = "$0.unwrap()"
            let v1004 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1002 v1003 
            let v1005 : string = "&mut $0.stdin"
            let v1006 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1004 v1005 
            let v1007 : string = "Option::take($0)"
            let v1008 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1006 v1007 
            let v1009 : string = "$0.unwrap()"
            let v1010 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1008 v1009 
            let v1012 : std_process_ChildStdin option = Some v1010 
            let v1015 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method131()
            let v1016 : std_process_ChildStdin option = v1015 v1012
            let v1017 : string = "std::sync::Mutex::new(v1016)"
            let v1018 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v1017 
            let v1019 : string = "std::sync::Arc::new(v1018)"
            let v1020 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1019 
            let v1021 : string = "true; $0 })()"
            let v1022 : bool = Fable.Core.RustInterop.emitRustExpr v1020 v1021 
            let v1023 : string = "_capture"
            let v1024 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1023 
            let v1025 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1026 : std_sync_mpsc_Sender<std_string_String>, v1027 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1025 
            let v1028 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method132()
            let v1029 : std_sync_mpsc_Sender<std_string_String> = v1028 v1026
            let v1030 : string = "std::sync::Mutex::new(v1029)"
            let v1031 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1030 
            let v1032 : string = "std::sync::Arc::new(v1031)"
            let v1033 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1032 
            let v1034 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method133()
            let v1035 : std_sync_mpsc_Sender<std_string_String> = v1034 v1026
            let v1036 : string = "std::sync::Mutex::new(v1035)"
            let v1037 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1036 
            let v1038 : string = "std::sync::Arc::new(v1037)"
            let v1039 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1038 
            let v1040 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method134()
            let v1041 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v1040 v1027
            let v1042 : string = "std::sync::Mutex::new(v1041)"
            let v1043 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1042 
            let v1044 : string = "std::sync::Arc::new(v1043)"
            let v1045 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1044 
            let v1046 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1047 : bool = Fable.Core.RustInterop.emitRustExpr () v1046 
            let v1048 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1049 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v934 v1048 
            let v1050 : string = "std::io::BufReader::new($0)"
            let v1051 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v1049 v1050 
            let v1052 : string = "std::io::BufRead::lines(v1051)"
            let v1053 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1052 
            let v1054 : string = "true; let mut v1053 = v1053; let _iter_try_for_each = v1053.try_for_each(|x| { //"
            let v1055 : bool = Fable.Core.RustInterop.emitRustExpr () v1054 
            let v1056 : string = "x"
            let v1057 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1056 
            let v1058 : string = "$0.clone()"
            let v1059 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1033 v1058 
            let v1060 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v1062 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1063 : string = "$0.map_err(|x| $1(x))"
            let v1064 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1057, v1060) v1063 
            let _run_target_args'_v1062 = v1064 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1065 : string = "$0.map_err(|x| $1(x))"
            let v1066 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1057, v1060) v1065 
            let _run_target_args'_v1062 = v1066 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1067 : string = "$0.map_err(|x| $1(x))"
            let v1068 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1057, v1060) v1067 
            let _run_target_args'_v1062 = v1068 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1069 : Result<std_string_String, std_string_String> = match v1057 with Ok x -> Ok x | Error x -> Error (v1060 x)
            let _run_target_args'_v1062 = v1069 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1070 : Result<std_string_String, std_string_String> = match v1057 with Ok x -> Ok x | Error x -> Error (v1060 x)
            let _run_target_args'_v1062 = v1070 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1071 : Result<std_string_String, std_string_String> = match v1057 with Ok x -> Ok x | Error x -> Error (v1060 x)
            let _run_target_args'_v1062 = v1071 
            #endif
#else
            let v1072 : Result<std_string_String, std_string_String> = match v1057 with Ok x -> Ok x | Error x -> Error (v1060 x)
            let _run_target_args'_v1062 = v1072 
            #endif
            let v1073 : Result<std_string_String, std_string_String> = _run_target_args'_v1062 
            let v1076 : (std_string_String -> US30) = method135()
            let v1077 : (std_string_String -> US30) = method136()
            let v1078 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1079 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v1076, v1077, v1073) v1078 
            let v2487 : std_string_String =
                match v1079 with
                | US30_1(v1784) -> (* Error *)
                    let v2096 : unit = ()
                    let v2097 : (unit -> unit) = closure48(v5, v1784)
                    let v2098 : unit = (fun () -> v2097 (); v2096) ()
                    let v2413 : string = $"\u001b[4;7m{v1784}\u001b[0m"
                    (* run_target_args'
                    let v2418 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2419 : string = "&*$0"
                    let v2420 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2413 v2419 
                    let _run_target_args'_v2418 = v2420 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2421 : string = "&*$0"
                    let v2422 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2413 v2421 
                    let _run_target_args'_v2418 = v2422 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2423 : string = "&*$0"
                    let v2424 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2413 v2423 
                    let _run_target_args'_v2418 = v2424 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2426 : Ref<Str> = v2413 |> unbox<Ref<Str>>
                    let _run_target_args'_v2418 = v2426 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2430 : Ref<Str> = v2413 |> unbox<Ref<Str>>
                    let _run_target_args'_v2418 = v2430 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2434 : Ref<Str> = v2413 |> unbox<Ref<Str>>
                    let _run_target_args'_v2418 = v2434 
                    #endif
#else
                    let v2438 : Ref<Str> = v2413 |> unbox<Ref<Str>>
                    let _run_target_args'_v2418 = v2438 
                    #endif
                    let v2441 : Ref<Str> = _run_target_args'_v2418 
                    (* run_target_args'
                    let v2454 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2455 : string = "String::from($0)"
                    let v2456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2441 v2455 
                    let _run_target_args'_v2454 = v2456 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2457 : string = "String::from($0)"
                    let v2458 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2441 v2457 
                    let _run_target_args'_v2454 = v2458 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2459 : string = "String::from($0)"
                    let v2460 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2441 v2459 
                    let _run_target_args'_v2454 = v2460 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2462 : std_string_String = v2441 |> unbox<std_string_String>
                    let _run_target_args'_v2454 = v2462 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2466 : std_string_String = v2441 |> unbox<std_string_String>
                    let _run_target_args'_v2454 = v2466 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2470 : std_string_String = v2441 |> unbox<std_string_String>
                    let _run_target_args'_v2454 = v2470 
                    #endif
#else
                    let v2474 : std_string_String = v2441 |> unbox<std_string_String>
                    let _run_target_args'_v2454 = v2474 
                    #endif
                    let v2477 : std_string_String = _run_target_args'_v2454 
                    v2477
                | US30_0(v1080) -> (* Ok *)
                    let v1081 : string = "fable_library_rust::String_::fromString($0)"
                    let v1082 : string = Fable.Core.RustInterop.emitRustExpr v1080 v1081 
                    let v1083 : string = "encoding_rs::UTF_8"
                    let v1084 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1083 
                    let v1085 : string = "$0.encode(&*$1).0"
                    let v1086 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1084, v1082) v1085 
                    let v1087 : string = "$0.as_ref()"
                    let v1088 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1086 v1087 
                    let v1089 : string = "std::str::from_utf8($0)"
                    let v1090 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1088 v1089 
                    (* run_target_args'
                    let v1092 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1093 : string = "$0.unwrap()"
                    let v1094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1090 v1093 
                    let _run_target_args'_v1092 = v1094 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1095 : string = "$0.unwrap()"
                    let v1096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1090 v1095 
                    let _run_target_args'_v1092 = v1096 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1097 : string = "$0.unwrap()"
                    let v1098 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1090 v1097 
                    let _run_target_args'_v1092 = v1098 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1099 : Ref<Str> = match v1090 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1092 = v1099 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1100 : Ref<Str> = match v1090 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1092 = v1100 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1101 : Ref<Str> = match v1090 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1092 = v1101 
                    #endif
#else
                    let v1102 : Ref<Str> = match v1090 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1092 = v1102 
                    #endif
                    let v1103 : Ref<Str> = _run_target_args'_v1092 
                    (* run_target_args'
                    let v1110 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1111 : string = "String::from($0)"
                    let v1112 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1103 v1111 
                    let _run_target_args'_v1110 = v1112 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1113 : string = "String::from($0)"
                    let v1114 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1103 v1113 
                    let _run_target_args'_v1110 = v1114 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1115 : string = "String::from($0)"
                    let v1116 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1103 v1115 
                    let _run_target_args'_v1110 = v1116 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1118 : std_string_String = v1103 |> unbox<std_string_String>
                    let _run_target_args'_v1110 = v1118 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1122 : std_string_String = v1103 |> unbox<std_string_String>
                    let _run_target_args'_v1110 = v1122 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1126 : std_string_String = v1103 |> unbox<std_string_String>
                    let _run_target_args'_v1110 = v1126 
                    #endif
#else
                    let v1130 : std_string_String = v1103 |> unbox<std_string_String>
                    let _run_target_args'_v1110 = v1130 
                    #endif
                    let v1133 : std_string_String = _run_target_args'_v1110 
                    let v1142 : string = "fable_library_rust::String_::fromString($0)"
                    let v1143 : string = Fable.Core.RustInterop.emitRustExpr v1133 v1142 
                    let v1144 : string = $"> {v1143}"
                    if v5 then
                        let v1459 : unit = ()
                        let v1460 : (unit -> unit) = closure49(v1144)
                        let v1461 : unit = (fun () -> v1460 (); v1459) ()
                        ()
                    else
                        let v1780 : unit = ()
                        let v1781 : (unit -> unit) = closure10(v1144)
                        let v1782 : unit = (fun () -> v1781 (); v1780) ()
                        ()
                    v1133
            let v2488 : string = "$0"
            let v2489 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1059 v2488 
            let v2490 : string = "v2489.lock()"
            let v2491 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2490 
            (* run_target_args'
            let v2493 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2494 : string = "$0.unwrap()"
            let v2495 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2491 v2494 
            let _run_target_args'_v2493 = v2495 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2496 : string = "$0.unwrap()"
            let v2497 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2491 v2496 
            let _run_target_args'_v2493 = v2497 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2498 : string = "$0.unwrap()"
            let v2499 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2491 v2498 
            let _run_target_args'_v2493 = v2499 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2500 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2491 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2493 = v2500 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2501 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2491 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2493 = v2501 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2502 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2491 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2493 = v2502 
            #endif
#else
            let v2503 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2491 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2493 = v2503 
            #endif
            let v2504 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v2493 
            let v2507 : string = "&$0"
            let v2508 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2504 v2507 
            let v2509 : string = "$0.send($1)"
            let v2510 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v2508, v2487) v2509 
            let v2511 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method141()
            (* run_target_args'
            let v2513 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2514 : string = "$0.map_err(|x| $1(x))"
            let v2515 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2510, v2511) v2514 
            let _run_target_args'_v2513 = v2515 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2516 : string = "$0.map_err(|x| $1(x))"
            let v2517 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2510, v2511) v2516 
            let _run_target_args'_v2513 = v2517 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2518 : string = "$0.map_err(|x| $1(x))"
            let v2519 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2510, v2511) v2518 
            let _run_target_args'_v2513 = v2519 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2520 : Result<unit, std_string_String> = match v2510 with Ok x -> Ok x | Error x -> Error (v2511 x)
            let _run_target_args'_v2513 = v2520 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2521 : Result<unit, std_string_String> = match v2510 with Ok x -> Ok x | Error x -> Error (v2511 x)
            let _run_target_args'_v2513 = v2521 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2522 : Result<unit, std_string_String> = match v2510 with Ok x -> Ok x | Error x -> Error (v2511 x)
            let _run_target_args'_v2513 = v2522 
            #endif
#else
            let v2523 : Result<unit, std_string_String> = match v2510 with Ok x -> Ok x | Error x -> Error (v2511 x)
            let _run_target_args'_v2513 = v2523 
            #endif
            let v2524 : Result<unit, std_string_String> = _run_target_args'_v2513 
            let v2527 : string = "$0"
            let v2528 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v2524 v2527 
            let v2529 : string = "true; $0 }); //"
            let v2530 : bool = Fable.Core.RustInterop.emitRustExpr v2528 v2529 
            let v2531 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v2532 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v2531 
            let v2533 : Result<unit, string> = method142(v2532)
            let v2534 : string = ""
            let v2535 : string = "}"
            let v2536 : string = v2534 + v2535 
            let x = v2533 //
            let v2537 : _ = x
            let v2538 : unit = ()
            (* run_target_args'
            let v2539 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2540 : string = $"true; let _fix_closure_v2538 = $0"
            let v2541 : bool = Fable.Core.RustInterop.emitRustExpr v2537 v2540 
            let _run_target_args'_v2539 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2542 : string = $"true; let _fix_closure_v2538 = $0"
            let v2543 : bool = Fable.Core.RustInterop.emitRustExpr v2537 v2542 
            let _run_target_args'_v2539 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2544 : string = $"true; let _fix_closure_v2538 = $0"
            let v2545 : bool = Fable.Core.RustInterop.emitRustExpr v2537 v2544 
            let _run_target_args'_v2539 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v2539 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v2539 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v2539 = false 
            #endif
#else
            let _run_target_args'_v2539 = false 
            #endif
            let v2546 : bool = _run_target_args'_v2539 
            let v2547 : string = $"true; _fix_closure_v2538 " + v2536 + "); " + v2534 + " // rust.fix_closure'"
            let v2548 : bool = Fable.Core.RustInterop.emitRustExpr () v2547 
            let v2549 : string = "__spawn"
            let v2550 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v2549 
            let v2551 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v2552 : bool = Fable.Core.RustInterop.emitRustExpr () v2551 
            let v2553 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v2554 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v974 v2553 
            let v2555 : string = "std::io::BufReader::new($0)"
            let v2556 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v2554 v2555 
            let v2557 : string = "std::io::BufRead::lines(v2556)"
            let v2558 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2557 
            let v2559 : string = "true; let mut v2558 = v2558; let _iter_try_for_each = v2558.try_for_each(|x| { //"
            let v2560 : bool = Fable.Core.RustInterop.emitRustExpr () v2559 
            let v2561 : string = "x"
            let v2562 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v2561 
            let v2563 : bool = v7 = false
            let v4100 : Result<unit, std_string_String> =
                if v2563 then
                    let v2565 : Result<unit, std_string_String> = Ok () 
                    v2565
                else
                    let v2568 : string = "$0.clone()"
                    let v2569 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1039 v2568 
                    let v2570 : (std_io_Error -> std_string_String) = method79()
                    (* run_target_args'
                    let v2572 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2573 : string = "$0.map_err(|x| $1(x))"
                    let v2574 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2562, v2570) v2573 
                    let _run_target_args'_v2572 = v2574 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2575 : string = "$0.map_err(|x| $1(x))"
                    let v2576 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2562, v2570) v2575 
                    let _run_target_args'_v2572 = v2576 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2577 : string = "$0.map_err(|x| $1(x))"
                    let v2578 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2562, v2570) v2577 
                    let _run_target_args'_v2572 = v2578 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2579 : Result<std_string_String, std_string_String> = match v2562 with Ok x -> Ok x | Error x -> Error (v2570 x)
                    let _run_target_args'_v2572 = v2579 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2580 : Result<std_string_String, std_string_String> = match v2562 with Ok x -> Ok x | Error x -> Error (v2570 x)
                    let _run_target_args'_v2572 = v2580 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2581 : Result<std_string_String, std_string_String> = match v2562 with Ok x -> Ok x | Error x -> Error (v2570 x)
                    let _run_target_args'_v2572 = v2581 
                    #endif
#else
                    let v2582 : Result<std_string_String, std_string_String> = match v2562 with Ok x -> Ok x | Error x -> Error (v2570 x)
                    let _run_target_args'_v2572 = v2582 
                    #endif
                    let v2583 : Result<std_string_String, std_string_String> = _run_target_args'_v2572 
                    let v2586 : (std_string_String -> US30) = method135()
                    let v2587 : (std_string_String -> US30) = method136()
                    let v2588 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
                    let v2589 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v2586, v2587, v2583) v2588 
                    let v4060 : std_string_String =
                        match v2589 with
                        | US30_1(v3361) -> (* Error *)
                            let v3671 : unit = ()
                            let v3672 : (unit -> unit) = closure48(v5, v3361)
                            let v3673 : unit = (fun () -> v3672 (); v3671) ()
                            let v3986 : string = $"\u001b[4;7m{v3361}\u001b[0m"
                            (* run_target_args'
                            let v3991 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3992 : string = "&*$0"
                            let v3993 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3986 v3992 
                            let _run_target_args'_v3991 = v3993 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3994 : string = "&*$0"
                            let v3995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3986 v3994 
                            let _run_target_args'_v3991 = v3995 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3996 : string = "&*$0"
                            let v3997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3986 v3996 
                            let _run_target_args'_v3991 = v3997 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3999 : Ref<Str> = v3986 |> unbox<Ref<Str>>
                            let _run_target_args'_v3991 = v3999 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4003 : Ref<Str> = v3986 |> unbox<Ref<Str>>
                            let _run_target_args'_v3991 = v4003 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4007 : Ref<Str> = v3986 |> unbox<Ref<Str>>
                            let _run_target_args'_v3991 = v4007 
                            #endif
#else
                            let v4011 : Ref<Str> = v3986 |> unbox<Ref<Str>>
                            let _run_target_args'_v3991 = v4011 
                            #endif
                            let v4014 : Ref<Str> = _run_target_args'_v3991 
                            (* run_target_args'
                            let v4027 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v4028 : string = "String::from($0)"
                            let v4029 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4014 v4028 
                            let _run_target_args'_v4027 = v4029 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v4030 : string = "String::from($0)"
                            let v4031 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4014 v4030 
                            let _run_target_args'_v4027 = v4031 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v4032 : string = "String::from($0)"
                            let v4033 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4014 v4032 
                            let _run_target_args'_v4027 = v4033 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v4035 : std_string_String = v4014 |> unbox<std_string_String>
                            let _run_target_args'_v4027 = v4035 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4039 : std_string_String = v4014 |> unbox<std_string_String>
                            let _run_target_args'_v4027 = v4039 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4043 : std_string_String = v4014 |> unbox<std_string_String>
                            let _run_target_args'_v4027 = v4043 
                            #endif
#else
                            let v4047 : std_string_String = v4014 |> unbox<std_string_String>
                            let _run_target_args'_v4027 = v4047 
                            #endif
                            let v4050 : std_string_String = _run_target_args'_v4027 
                            v4050
                        | US30_0(v2590) -> (* Ok *)
                            let v2591 : string = "fable_library_rust::String_::fromString($0)"
                            let v2592 : string = Fable.Core.RustInterop.emitRustExpr v2590 v2591 
                            let v2593 : string = "encoding_rs::UTF_8"
                            let v2594 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v2593 
                            let v2595 : string = "$0.encode(&*$1).0"
                            let v2596 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v2594, v2592) v2595 
                            let v2597 : string = "$0.as_ref()"
                            let v2598 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v2596 v2597 
                            let v2599 : string = "std::str::from_utf8($0)"
                            let v2600 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v2598 v2599 
                            (* run_target_args'
                            let v2602 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2603 : string = "$0.unwrap()"
                            let v2604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2600 v2603 
                            let _run_target_args'_v2602 = v2604 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2605 : string = "$0.unwrap()"
                            let v2606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2600 v2605 
                            let _run_target_args'_v2602 = v2606 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2607 : string = "$0.unwrap()"
                            let v2608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2600 v2607 
                            let _run_target_args'_v2602 = v2608 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2609 : Ref<Str> = match v2600 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2602 = v2609 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2610 : Ref<Str> = match v2600 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2602 = v2610 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2611 : Ref<Str> = match v2600 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2602 = v2611 
                            #endif
#else
                            let v2612 : Ref<Str> = match v2600 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2602 = v2612 
                            #endif
                            let v2613 : Ref<Str> = _run_target_args'_v2602 
                            (* run_target_args'
                            let v2620 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2621 : string = "String::from($0)"
                            let v2622 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2621 
                            let _run_target_args'_v2620 = v2622 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2623 : string = "String::from($0)"
                            let v2624 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2623 
                            let _run_target_args'_v2620 = v2624 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2625 : string = "String::from($0)"
                            let v2626 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2625 
                            let _run_target_args'_v2620 = v2626 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2628 : std_string_String = v2613 |> unbox<std_string_String>
                            let _run_target_args'_v2620 = v2628 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2632 : std_string_String = v2613 |> unbox<std_string_String>
                            let _run_target_args'_v2620 = v2632 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2636 : std_string_String = v2613 |> unbox<std_string_String>
                            let _run_target_args'_v2620 = v2636 
                            #endif
#else
                            let v2640 : std_string_String = v2613 |> unbox<std_string_String>
                            let _run_target_args'_v2620 = v2640 
                            #endif
                            let v2643 : std_string_String = _run_target_args'_v2620 
                            let v2652 : string = "fable_library_rust::String_::fromString($0)"
                            let v2653 : string = Fable.Core.RustInterop.emitRustExpr v2643 v2652 
                            let v2654 : string = $"! {v2653}"
                            if v5 then
                                let v2966 : unit = ()
                                let v2967 : (unit -> unit) = closure49(v2654)
                                let v2968 : unit = (fun () -> v2967 (); v2966) ()
                                ()
                            else
                                let v3284 : unit = ()
                                let v3285 : (unit -> unit) = closure10(v2654)
                                let v3286 : unit = (fun () -> v3285 (); v3284) ()
                                ()
                            let v3288 : string = $"\u001b[4;7m{v2643}\u001b[0m"
                            (* run_target_args'
                            let v3293 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3294 : string = "&*$0"
                            let v3295 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3288 v3294 
                            let _run_target_args'_v3293 = v3295 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3296 : string = "&*$0"
                            let v3297 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3288 v3296 
                            let _run_target_args'_v3293 = v3297 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3298 : string = "&*$0"
                            let v3299 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3288 v3298 
                            let _run_target_args'_v3293 = v3299 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3301 : Ref<Str> = v3288 |> unbox<Ref<Str>>
                            let _run_target_args'_v3293 = v3301 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3305 : Ref<Str> = v3288 |> unbox<Ref<Str>>
                            let _run_target_args'_v3293 = v3305 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3309 : Ref<Str> = v3288 |> unbox<Ref<Str>>
                            let _run_target_args'_v3293 = v3309 
                            #endif
#else
                            let v3313 : Ref<Str> = v3288 |> unbox<Ref<Str>>
                            let _run_target_args'_v3293 = v3313 
                            #endif
                            let v3316 : Ref<Str> = _run_target_args'_v3293 
                            (* run_target_args'
                            let v3329 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3330 : string = "String::from($0)"
                            let v3331 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3316 v3330 
                            let _run_target_args'_v3329 = v3331 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3332 : string = "String::from($0)"
                            let v3333 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3316 v3332 
                            let _run_target_args'_v3329 = v3333 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3334 : string = "String::from($0)"
                            let v3335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3316 v3334 
                            let _run_target_args'_v3329 = v3335 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3337 : std_string_String = v3316 |> unbox<std_string_String>
                            let _run_target_args'_v3329 = v3337 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3341 : std_string_String = v3316 |> unbox<std_string_String>
                            let _run_target_args'_v3329 = v3341 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3345 : std_string_String = v3316 |> unbox<std_string_String>
                            let _run_target_args'_v3329 = v3345 
                            #endif
#else
                            let v3349 : std_string_String = v3316 |> unbox<std_string_String>
                            let _run_target_args'_v3329 = v3349 
                            #endif
                            let v3352 : std_string_String = _run_target_args'_v3329 
                            v3352
                    let v4061 : string = "$0"
                    let v4062 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2569 v4061 
                    let v4063 : string = "v4062.lock()"
                    let v4064 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4063 
                    (* run_target_args'
                    let v4066 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4067 : string = "$0.unwrap()"
                    let v4068 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4064 v4067 
                    let _run_target_args'_v4066 = v4068 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4069 : string = "$0.unwrap()"
                    let v4070 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4064 v4069 
                    let _run_target_args'_v4066 = v4070 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4071 : string = "$0.unwrap()"
                    let v4072 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4064 v4071 
                    let _run_target_args'_v4066 = v4072 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4073 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4066 = v4073 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4074 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4066 = v4074 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4075 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4066 = v4075 
                    #endif
#else
                    let v4076 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4066 = v4076 
                    #endif
                    let v4077 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v4066 
                    let v4080 : string = "&$0"
                    let v4081 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4077 v4080 
                    let v4082 : string = "$0.send($1)"
                    let v4083 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4081, v4060) v4082 
                    let v4084 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method141()
                    (* run_target_args'
                    let v4086 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4087 : string = "$0.map_err(|x| $1(x))"
                    let v4088 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4083, v4084) v4087 
                    let _run_target_args'_v4086 = v4088 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4089 : string = "$0.map_err(|x| $1(x))"
                    let v4090 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4083, v4084) v4089 
                    let _run_target_args'_v4086 = v4090 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4091 : string = "$0.map_err(|x| $1(x))"
                    let v4092 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4083, v4084) v4091 
                    let _run_target_args'_v4086 = v4092 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4093 : Result<unit, std_string_String> = match v4083 with Ok x -> Ok x | Error x -> Error (v4084 x)
                    let _run_target_args'_v4086 = v4093 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4094 : Result<unit, std_string_String> = match v4083 with Ok x -> Ok x | Error x -> Error (v4084 x)
                    let _run_target_args'_v4086 = v4094 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4095 : Result<unit, std_string_String> = match v4083 with Ok x -> Ok x | Error x -> Error (v4084 x)
                    let _run_target_args'_v4086 = v4095 
                    #endif
#else
                    let v4096 : Result<unit, std_string_String> = match v4083 with Ok x -> Ok x | Error x -> Error (v4084 x)
                    let _run_target_args'_v4086 = v4096 
                    #endif
                    let v4097 : Result<unit, std_string_String> = _run_target_args'_v4086 
                    v4097
            let v4101 : string = "$0"
            let v4102 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4100 v4101 
            let v4103 : string = "true; $0 }); //"
            let v4104 : bool = Fable.Core.RustInterop.emitRustExpr v4102 v4103 
            let v4105 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v4106 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4105 
            let v4107 : Result<unit, string> = method142(v4106)
            let v4108 : string = v2534 + v2535 
            let x = v4107 //
            let v4109 : _ = x
            let v4110 : unit = ()
            (* run_target_args'
            let v4111 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4112 : string = $"true; let _fix_closure_v4110 = $0"
            let v4113 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4112 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4114 : string = $"true; let _fix_closure_v4110 = $0"
            let v4115 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4114 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4116 : string = $"true; let _fix_closure_v4110 = $0"
            let v4117 : bool = Fable.Core.RustInterop.emitRustExpr v4109 v4116 
            let _run_target_args'_v4111 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v4111 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v4111 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v4111 = false 
            #endif
#else
            let _run_target_args'_v4111 = false 
            #endif
            let v4118 : bool = _run_target_args'_v4111 
            let v4119 : string = $"true; _fix_closure_v4110 " + v4108 + "); " + v2534 + " // rust.fix_closure'"
            let v4120 : bool = Fable.Core.RustInterop.emitRustExpr () v4119 
            let v4121 : string = "__spawn"
            let v4122 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4121 
            let v4125 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) = method143()
            let v4126 : US31 option = v4 |> Option.map v4125 
            let v4146 : US31 = US31_1
            let v4147 : US31 = v4126 |> Option.defaultValue v4146 
            match v4147 with
            | US31_1 -> (* None *)
                ()
            | US31_0(v4151) -> (* Some *)
                let v4152 : string = "$0"
                let v4153 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1024 v4152 
                let v4154 : string = "v4153.lock()"
                let v4155 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4154 
                (* run_target_args'
                let v4157 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4158 : string = "$0.unwrap()"
                let v4159 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4158 
                let _run_target_args'_v4157 = v4159 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4160 : string = "$0.unwrap()"
                let v4161 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4160 
                let _run_target_args'_v4157 = v4161 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4162 : string = "$0.unwrap()"
                let v4163 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4155 v4162 
                let _run_target_args'_v4157 = v4163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4164 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4164 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4165 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4165 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4166 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4166 
                #endif
#else
                let v4167 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4155 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4157 = v4167 
                #endif
                let v4168 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v4157 
                let v4171 : std_sync_MutexGuard<std_process_ChildStdin option> = method144(v4168)
                let v4172 : string = "true; let mut v4171 = v4171"
                let v4173 : bool = Fable.Core.RustInterop.emitRustExpr () v4172 
                let v4174 : string = "&mut $0"
                let v4175 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4171 v4174 
                let v4176 : string = "Option::take($0)"
                let v4177 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4175 v4176 
                let v4178 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v4179 : bool = Fable.Core.RustInterop.emitRustExpr v4177 v4178 
                let v4180 : string = "x"
                let v4181 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4180 
                let v4182 : string = "std::sync::Mutex::new(v4181)"
                let v4183 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v4182 
                let v4184 : string = "std::sync::Arc::new(v4183)"
                let v4185 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v4184 
                let v4186 : string = "true; $0 })"
                let v4187 : bool = Fable.Core.RustInterop.emitRustExpr v4185 v4186 
                let v4188 : string = "_optionm_map_"
                let v4189 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4188 
                let v4192 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) = method145()
                let v4193 : US32 option = v4189 |> Option.map v4192 
                let v4213 : US32 = US32_1
                let v4214 : US32 = v4193 |> Option.defaultValue v4213 
                match v4214 with
                | US32_1 -> (* None *)
                    ()
                | US32_0(v4218) -> (* Some *)
                    v4151 v4218
                    let v4219 : string = "$0"
                    let v4220 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4218 v4219 
                    let v4221 : string = "v4220.lock()"
                    let v4222 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4221 
                    (* run_target_args'
                    let v4224 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4225 : string = "$0.unwrap()"
                    let v4226 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4225 
                    let _run_target_args'_v4224 = v4226 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4227 : string = "$0.unwrap()"
                    let v4228 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4227 
                    let _run_target_args'_v4224 = v4228 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4229 : string = "$0.unwrap()"
                    let v4230 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4222 v4229 
                    let _run_target_args'_v4224 = v4230 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4231 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4232 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4232 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4233 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4233 
                    #endif
#else
                    let v4234 : std_sync_MutexGuard<std_process_ChildStdin> = match v4222 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4224 = v4234 
                    #endif
                    let v4235 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v4224 
                    let v4238 : std_sync_MutexGuard<std_process_ChildStdin> = method146(v4235)
                    let v4239 : string = "true; let mut v4238 = v4238"
                    let v4240 : bool = Fable.Core.RustInterop.emitRustExpr () v4239 
                    let v4241 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4242 : bool = Fable.Core.RustInterop.emitRustExpr v4238 v4241 
                    ()
            let v4243 : string = "$0"
            let v4244 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v894 v4243 
            let v4245 : string = "v4244.lock()"
            let v4246 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4245 
            (* run_target_args'
            let v4248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4249 : string = "$0.unwrap()"
            let v4250 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4249 
            let _run_target_args'_v4248 = v4250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4251 : string = "$0.unwrap()"
            let v4252 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4251 
            let _run_target_args'_v4248 = v4252 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4253 : string = "$0.unwrap()"
            let v4254 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4246 v4253 
            let _run_target_args'_v4248 = v4254 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4255 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4255 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4256 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4256 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4257 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4257 
            #endif
#else
            let v4258 : std_sync_MutexGuard<std_process_Child option> = match v4246 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4248 = v4258 
            #endif
            let v4259 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v4248 
            let v4262 : std_sync_MutexGuard<std_process_Child option> = method130(v4259)
            let v4263 : string = "true; let mut v4262 = v4262"
            let v4264 : bool = Fable.Core.RustInterop.emitRustExpr () v4263 
            let v4265 : string = "&mut $0"
            let v4266 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4262 v4265 
            let v4267 : string = "Option::take($0)"
            let v4268 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4266 v4267 
            let v4269 : string = "$0.unwrap()"
            let v4270 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4268 v4269 
            let v4271 : string = "$0.wait_with_output()"
            let v4272 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4270 v4271 
            let v4273 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v4275 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4276 : string = "$0.map_err(|x| $1(x))"
            let v4277 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4276 
            let _run_target_args'_v4275 = v4277 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4278 : string = "$0.map_err(|x| $1(x))"
            let v4279 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4278 
            let _run_target_args'_v4275 = v4279 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4280 : string = "$0.map_err(|x| $1(x))"
            let v4281 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4272, v4273) v4280 
            let _run_target_args'_v4275 = v4281 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4282 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4282 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4283 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4283 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4284 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4284 
            #endif
#else
            let v4285 : Result<std_process_Output, std_string_String> = match v4272 with Ok x -> Ok x | Error x -> Error (v4273 x)
            let _run_target_args'_v4275 = v4285 
            #endif
            let v4286 : Result<std_process_Output, std_string_String> = _run_target_args'_v4275 
            let v4289 : string = "v4122"
            let v4290 : string = v4289 + v2534 
            let v4291 : string = v4290 + v2534 
            let v4292 : string = "v2550"
            let v4293 : string = ", "
            let v4294 : string = v4292 + v4293 
            let v4295 : string = v4294 + v4291 
            let v4296 : string = "vec![" + v4295 + "]"
            let v4297 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4296 
            let v4298 : string = "true; $0.into_iter().for_each(|x| { //"
            let v4299 : bool = Fable.Core.RustInterop.emitRustExpr v4297 v4298 
            let v4300 : string = "x"
            let v4301 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4300 
            let v4302 : string = "std::thread::JoinHandle::join($0)"
            let v4303 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4301 v4302 
            (* run_target_args'
            let v4305 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4306 : string = "$0.unwrap()"
            let v4307 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4306 
            let _run_target_args'_v4305 = v4307 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4308 : string = "$0.unwrap()"
            let v4309 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4308 
            let _run_target_args'_v4305 = v4309 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4310 : string = "$0.unwrap()"
            let v4311 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4303 v4310 
            let _run_target_args'_v4305 = v4311 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4312 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4312 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4313 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4313 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4314 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4314 
            #endif
#else
            let v4315 : Result<unit, string> = match v4303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4305 = v4315 
            #endif
            let v4316 : Result<unit, string> = _run_target_args'_v4305 
            (* run_target_args'
            let v4319 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4320 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4320 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4321 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4321 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4322 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4316 v4322 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v4316 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v4323 : string = $"true"
            let v4324 : bool = Fable.Core.RustInterop.emitRustExpr () v4323 
            let v4325 : string = "true; }}); { //"
            let v4326 : bool = Fable.Core.RustInterop.emitRustExpr () v4325 
            let v4327 : (std_process_Output -> US33) = method147()
            let v4328 : (std_string_String -> US33) = method148()
            let v4330 : US33 = match v4286 with Ok x -> v4327 x | Error x -> v4328 x
            match v4330 with
            | US33_1(v4612) -> (* Error *)
                let v4926 : unit = ()
                let v4927 : (unit -> unit) = closure55(v0, v1, v2, v3, v4, v5, v6, v7, v21, v118, v4612)
                let v4928 : unit = (fun () -> v4927 (); v4926) ()
                let v5245 : US8 = US8_0(v4612)
                let v5246 : US29 = US29_1
                struct (-2, v5245, v5246)
            | US33_0(v4333) -> (* Ok *)
                let v4334 : string = "$0.status"
                let v4335 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4333 v4334 
                let v4336 : string = "$0.code()"
                let v4337 : int32 option = Fable.Core.RustInterop.emitRustExpr v4335 v4336 
                let v4340 : (int32 -> US34) = method150()
                let v4341 : US34 option = v4337 |> Option.map v4340 
                let v4361 : US34 = US34_1
                let v4362 : US34 = v4341 |> Option.defaultValue v4361 
                match v4362 with
                | US34_1 -> (* None *)
                    let v4531 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v4536 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4537 : string = "&*$0"
                    let v4538 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4531 v4537 
                    let _run_target_args'_v4536 = v4538 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4539 : string = "&*$0"
                    let v4540 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4531 v4539 
                    let _run_target_args'_v4536 = v4540 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4541 : string = "&*$0"
                    let v4542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4531 v4541 
                    let _run_target_args'_v4536 = v4542 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4544 : Ref<Str> = v4531 |> unbox<Ref<Str>>
                    let _run_target_args'_v4536 = v4544 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4548 : Ref<Str> = v4531 |> unbox<Ref<Str>>
                    let _run_target_args'_v4536 = v4548 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4552 : Ref<Str> = v4531 |> unbox<Ref<Str>>
                    let _run_target_args'_v4536 = v4552 
                    #endif
#else
                    let v4556 : Ref<Str> = v4531 |> unbox<Ref<Str>>
                    let _run_target_args'_v4536 = v4556 
                    #endif
                    let v4559 : Ref<Str> = _run_target_args'_v4536 
                    (* run_target_args'
                    let v4572 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4573 : string = "String::from($0)"
                    let v4574 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4559 v4573 
                    let _run_target_args'_v4572 = v4574 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4575 : string = "String::from($0)"
                    let v4576 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4559 v4575 
                    let _run_target_args'_v4572 = v4576 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4577 : string = "String::from($0)"
                    let v4578 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4559 v4577 
                    let _run_target_args'_v4572 = v4578 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4580 : std_string_String = v4559 |> unbox<std_string_String>
                    let _run_target_args'_v4572 = v4580 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4584 : std_string_String = v4559 |> unbox<std_string_String>
                    let _run_target_args'_v4572 = v4584 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4588 : std_string_String = v4559 |> unbox<std_string_String>
                    let _run_target_args'_v4572 = v4588 
                    #endif
#else
                    let v4592 : std_string_String = v4559 |> unbox<std_string_String>
                    let _run_target_args'_v4572 = v4592 
                    #endif
                    let v4595 : std_string_String = _run_target_args'_v4572 
                    let v4604 : US8 = US8_0(v4595)
                    let v4605 : US29 = US29_0(v1045)
                    struct (-1, v4604, v4605)
                | US34_0(v4366) -> (* Some *)
                    let v4367 : string = "$0.stdout"
                    let v4368 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4333 v4367 
                    let v4369 : Vec<uint8> = method24(v4368)
                    let v4370 : string = "std::string::String::from_utf8($0)"
                    let v4371 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4369 v4370 
                    (* run_target_args'
                    let v4373 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4374 : string = "$0.unwrap()"
                    let v4375 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4371 v4374 
                    let _run_target_args'_v4373 = v4375 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4376 : string = "$0.unwrap()"
                    let v4377 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4371 v4376 
                    let _run_target_args'_v4373 = v4377 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4378 : string = "$0.unwrap()"
                    let v4379 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4371 v4378 
                    let _run_target_args'_v4373 = v4379 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4380 : std_string_String = match v4371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4373 = v4380 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4381 : std_string_String = match v4371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4373 = v4381 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4382 : std_string_String = match v4371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4373 = v4382 
                    #endif
#else
                    let v4383 : std_string_String = match v4371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4373 = v4383 
                    #endif
                    let v4384 : std_string_String = _run_target_args'_v4373 
                    let v4387 : string = "$0.stderr"
                    let v4388 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4333 v4387 
                    let v4389 : Vec<uint8> = method24(v4388)
                    let v4390 : string = "std::string::String::from_utf8($0)"
                    let v4391 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4389 v4390 
                    (* run_target_args'
                    let v4393 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4394 : string = "$0.unwrap()"
                    let v4395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4391 v4394 
                    let _run_target_args'_v4393 = v4395 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4396 : string = "$0.unwrap()"
                    let v4397 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4391 v4396 
                    let _run_target_args'_v4393 = v4397 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4398 : string = "$0.unwrap()"
                    let v4399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4391 v4398 
                    let _run_target_args'_v4393 = v4399 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4400 : std_string_String = match v4391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4393 = v4400 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4401 : std_string_String = match v4391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4393 = v4401 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4402 : std_string_String = match v4391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4393 = v4402 
                    #endif
#else
                    let v4403 : std_string_String = match v4391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4393 = v4403 
                    #endif
                    let v4404 : std_string_String = _run_target_args'_v4393 
                    let v4407 : string = "fable_library_rust::String_::fromString($0)"
                    let v4408 : string = Fable.Core.RustInterop.emitRustExpr v4404 v4407 
                    let v4410 : (unit -> string) = v4408.Trim
                    let v4411 : string = v4410 ()
                    let v4414 : string = "fable_library_rust::String_::fromString($0)"
                    let v4415 : string = Fable.Core.RustInterop.emitRustExpr v4384 v4414 
                    let v4417 : (unit -> string) = v4415.Trim
                    let v4418 : string = v4417 ()
                    let v4421 : int32 = v4411.Length
                    let v4422 : bool = v4421 = 0
                    let v4423 : bool = v4422 = false
                    let v4427 : UH2 =
                        if v4423 then
                            let v4424 : UH2 = UH2_0
                            UH2_1(v4411, v4424)
                        else
                            UH2_0
                    let v4428 : int32 = v4418.Length
                    let v4429 : bool = v4428 = 0
                    let v4430 : bool = v4429 = false
                    let v4432 : UH2 =
                        if v4430 then
                            UH2_1(v4418, v4427)
                        else
                            v4427
                    let v4433 : string list = []
                    let v4434 : string list = method121(v4432, v4433)
                    let v4439 : unit = ()
                    let _let'_v4439 =
                        seq {
                            yield! v4434 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v4442 : string seq = _let'_v4439 
                    let v4450 : string = method75()
                    let v4451 : (string -> (string seq -> string)) = String.concat
                    let v4452 : (string seq -> string) = v4451 v4450
                    let v4453 : string = v4452 v4442
                    (* run_target_args'
                    let v4461 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4462 : string = "&*$0"
                    let v4463 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4453 v4462 
                    let _run_target_args'_v4461 = v4463 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4464 : string = "&*$0"
                    let v4465 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4453 v4464 
                    let _run_target_args'_v4461 = v4465 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4466 : string = "&*$0"
                    let v4467 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4453 v4466 
                    let _run_target_args'_v4461 = v4467 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4469 : Ref<Str> = v4453 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4469 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4473 : Ref<Str> = v4453 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4473 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4477 : Ref<Str> = v4453 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4477 
                    #endif
#else
                    let v4481 : Ref<Str> = v4453 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4481 
                    #endif
                    let v4484 : Ref<Str> = _run_target_args'_v4461 
                    (* run_target_args'
                    let v4497 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4498 : string = "String::from($0)"
                    let v4499 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4484 v4498 
                    let _run_target_args'_v4497 = v4499 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4500 : string = "String::from($0)"
                    let v4501 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4484 v4500 
                    let _run_target_args'_v4497 = v4501 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4502 : string = "String::from($0)"
                    let v4503 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4484 v4502 
                    let _run_target_args'_v4497 = v4503 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4505 : std_string_String = v4484 |> unbox<std_string_String>
                    let _run_target_args'_v4497 = v4505 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4509 : std_string_String = v4484 |> unbox<std_string_String>
                    let _run_target_args'_v4497 = v4509 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4513 : std_string_String = v4484 |> unbox<std_string_String>
                    let _run_target_args'_v4497 = v4513 
                    #endif
#else
                    let v4517 : std_string_String = v4484 |> unbox<std_string_String>
                    let _run_target_args'_v4497 = v4517 
                    #endif
                    let v4520 : std_string_String = _run_target_args'_v4497 
                    let v4529 : US8 = US8_0(v4520)
                    let v4530 : US29 = US29_0(v1045)
                    struct (v4366, v4529, v4530)
    let v5908 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v5897 with
        | US29_1 -> (* None *)
            let v5904 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v5904
        | US29_0(v5898) -> (* Some *)
            let v5900 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v5898 
            v5900
    let v5909 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v5910 : bool = Fable.Core.RustInterop.emitRustExpr v5908 v5909 
    let v5911 : string = "x"
    let v5912 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v5911 
    let v5913 : string = "$0"
    let v5914 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v5912 v5913 
    let v5915 : string = "v5914.lock()"
    let v5916 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v5915 
    (* run_target_args'
    let v5918 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5919 : string = "$0.unwrap()"
    let v5920 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5916 v5919 
    let _run_target_args'_v5918 = v5920 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5921 : string = "$0.unwrap()"
    let v5922 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5916 v5921 
    let _run_target_args'_v5918 = v5922 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5923 : string = "$0.unwrap()"
    let v5924 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5916 v5923 
    let _run_target_args'_v5918 = v5924 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5925 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5916 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5918 = v5925 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5926 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5916 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5918 = v5926 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5927 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5916 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5918 = v5927 
    #endif
#else
    let v5928 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5916 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5918 = v5928 
    #endif
    let v5929 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v5918 
    let v5932 : string = "$0.iter()"
    let v5933 : _ = Fable.Core.RustInterop.emitRustExpr v5929 v5932 
    let v5934 : string = "$0.collect::<Vec<_>>()"
    let v5935 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5933 v5934 
    let v5936 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v5937 : bool = Fable.Core.RustInterop.emitRustExpr v5935 v5936 
    let v5938 : string = "x"
    let v5939 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5938 
    let v5940 : string = "fable_library_rust::String_::fromString($0)"
    let v5941 : string = Fable.Core.RustInterop.emitRustExpr v5939 v5940 
    let v5942 : string = "true; $0 }).collect::<Vec<_>>()"
    let v5943 : bool = Fable.Core.RustInterop.emitRustExpr v5941 v5942 
    let v5944 : string = "_vec_map"
    let v5945 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5944 
    let v5946 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v5947 : (string []) = Fable.Core.RustInterop.emitRustExpr v5945 v5946 
    let v5949 : string seq = v5947 |> Seq.ofArray
    let v5954 : string = method75()
    let v5955 : (string -> (string seq -> string)) = String.concat
    let v5956 : (string seq -> string) = v5955 v5954
    let v5957 : string = v5956 v5949
    let v5961 : string = "true; $0 })"
    let v5962 : bool = Fable.Core.RustInterop.emitRustExpr v5957 v5961 
    let v5963 : string = "_optionm_map_"
    let v5964 : string option = Fable.Core.RustInterop.emitRustExpr () v5963 
    let v5967 : (string -> US5) = method6()
    let v5968 : US5 option = v5964 |> Option.map v5967 
    let v5988 : US5 = US5_1
    let v5989 : US5 = v5968 |> Option.defaultValue v5988 
    let v6007 : US35 =
        match v5989 with
        | US5_1 -> (* None *)
            US35_1
        | US5_0(v5993) -> (* Some *)
            let v5995 : (unit -> string) = v5993.Trim
            let v5996 : string = v5995 ()
            let v5999 : int32 = v5996.Length
            let v6000 : bool = v5999 = 0
            let v6003 : US5 =
                if v6000 then
                    US5_1
                else
                    US5_0(v5996)
            US35_0(v6003)
    let v6014 : US5 =
        match v6007 with
        | US35_0(v6008) -> (* Some *)
            match v6008 with
            | US5_0(v6009) -> (* Some *)
                US5_0(v6009)
            | _ ->
                US5_1
        | _ ->
            US5_1
    let v6021 : US5 =
        match v5896 with
        | US8_1 -> (* None *)
            US5_1
        | US8_0(v6015) -> (* Some *)
            let v6016 : string = "fable_library_rust::String_::fromString($0)"
            let v6017 : string = Fable.Core.RustInterop.emitRustExpr v6015 v6016 
            US5_0(v6017)
    let v6025 : string =
        match v6021 with
        | US5_1 -> (* None *)
            let v6023 : string = ""
            v6023
        | US5_0(v6022) -> (* Some *)
            v6022
    let v6028 : string =
        match v6014 with
        | US5_1 -> (* None *)
            v6025
        | US5_0(v6026) -> (* Some *)
            v6026
    let v6341 : unit = ()
    let v6342 : (unit -> unit) = closure57(v21, v5895, v6028)
    let v6343 : unit = (fun () -> v6342 (); v6341) ()
    let v6660 : (int32 * string) = v5895, v6028 
    v6660 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v756 <- Some x
    let v6663 : (int32 * string) = match _capture_v756 with Some x -> x | None -> failwith "base.capture / _capture_v756=None"
    let (a, b) = v6663 
    let v12569 : int32 = a
    let v12570 : string = b
    struct (v12569, v12570)
and method154 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "run_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "new_code_path"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method153 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method154(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / check error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method16(v55)
and closure58 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method82()
            let v126 : string = method153(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method156 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "exit_code"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v67 : string = $"{v0}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "run_result"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "new_code_path"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v209 : string = $"{v2}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v5, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v226 : string = $"{v85}"
    let v234 : unit = ()
    let v235 : (unit -> unit) = closure7(v5, v226)
    let v236 : unit = (fun () -> v235 (); v234) ()
    let v244 : string = "external_command"
    let v245 : string = $"{v244}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v5, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v262 : string = $"{v46}"
    let v270 : unit = ()
    let v271 : (unit -> unit) = closure7(v5, v262)
    let v272 : unit = (fun () -> v271 (); v270) ()
    let v279 : string = $"{v3}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v5, v279)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v297 : string = " }"
    let v298 : string = $"{v297}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v5, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v314 : string = v5.l0
    v314
and method155 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method156(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure59 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method155(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method157 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method154(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / esbuild error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method16(v55)
and closure60 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method82()
            let v126 : string = method157(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method154(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / trunk error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method16(v55)
and closure61 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method82()
            let v126 : string = method158(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and closure62 () (v0 : string) : US5 =
    US5_0(v0)
and closure64 () (v0 : string) : bool =
    let v3 : string = "{compiling,\""
    let v4 : bool = v0.StartsWith (v3, false, null)
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "{compiled,main"
        let v11 : bool = v0.StartsWith (v10, false, null)
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "main.beam\"}"
            let v18 : bool = v0.EndsWith (v17, false, null)
            let v21 : bool = v18 = false
            if v21 then
                let v24 : string = "main_real.beam\"}"
                let v25 : bool = v0.EndsWith (v24, false, null)
                let v28 : bool = v25 = false
                if v28 then
                    let v31 : string = "src\\main.gleam:"
                    let v32 : bool = v0.StartsWith (v31, false, null)
                    let v35 : bool = v32 = false
                    if v35 then
                        let v38 : string = "src\\main_real.gleam:"
                        let v39 : bool = v0.StartsWith (v38, false, null)
                        let v42 : bool = v39 = false
                        if v42 then
                            let v45 : string = "src/main.gleam:"
                            let v46 : bool = v0.StartsWith (v45, false, null)
                            let v49 : bool = v46 = false
                            if v49 then
                                let v52 : string = "src/main_real.gleam:"
                                let v53 : bool = v0.StartsWith (v52, false, null)
                                let v56 : bool = v53 = false
                                if v56 then
                                    let v59 : string = "% "
                                    let v60 : bool = v0.StartsWith (v59, false, null)
                                    let v63 : bool = v60 = false
                                    v63
                                else
                                    false
                            else
                                false
                        else
                            false
                    else
                        false
                else
                    false
            else
                false
        else
            false
    else
        false
and method159 () : (string -> bool) =
    closure64()
and method160 (v0 : Vec<string>) : Vec<string> =
    v0
and closure63 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v15 : string = "$0.to_vec()"
    let v16 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v12 v15 
    let v17 : (string -> bool) = method159()
    let v18 : Vec<string> = method160(v16)
    let v19 : string = "v18.into_iter().filter(|x| v17(x.clone().clone())).collect::<Vec<_>>()"
    let v20 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v22 : (string []) = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v24 : string seq = v22 |> Seq.ofArray
    let v28 : string = method75()
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : (string seq -> string) = v29 v28
    let v31 : string = v30 v24
    let v34 : char list = []
    let v36 : char list = '\n' :: v34 
    let v45 : (char list -> (char [])) = List.toArray
    let v46 : (char []) = v45 v36
    let v49 : string = v31.TrimStart v46 
    v49
and method162 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result'"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    (* run_target_args'
    let v181 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v182 : string = "format!(\"{:#?}\", $0)"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v182 
    let v184 : string = "fable_library_rust::String_::fromString($0)"
    let v185 : string = Fable.Core.RustInterop.emitRustExpr v183 v184 
    let _run_target_args'_v181 = v185 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v181 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v181 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v195 : string = $"%A{v1}"
    let _run_target_args'_v181 = v195 
    #endif
#if FABLE_COMPILER_PYTHON
    let v199 : string = $"%A{v1}"
    let _run_target_args'_v181 = v199 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v1}"
    let _run_target_args'_v181 = v203 
    #endif
#else
    let v207 : string = $"%A{v1}"
    let _run_target_args'_v181 = v207 
    #endif
    let v210 : string = _run_target_args'_v181 
    let v220 : string = $"{v210}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v5, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v237 : string = $"{v124}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v5, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v255 : string = "new_code_path"
    let v256 : string = $"{v255}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v5, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v46}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v5, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v290 : string = $"{v2}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v5, v290)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v307 : string = $"{v124}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v5, v307)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v325 : string = "external_command"
    let v326 : string = $"{v325}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v5, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v343 : string = $"{v46}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v5, v343)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v360 : string = $"{v3}"
    let v368 : unit = ()
    let v369 : (unit -> unit) = closure7(v5, v360)
    let v370 : unit = (fun () -> v369 (); v368) ()
    let v378 : string = " }"
    let v379 : string = $"{v378}"
    let v387 : unit = ()
    let v388 : (unit -> unit) = closure7(v5, v379)
    let v389 : unit = (fun () -> v388 (); v387) ()
    let v395 : string = v5.l0
    v395
and method161 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method162(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure66 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method161(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v0, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure65 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure66(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method163 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure67 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method163(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method164 () : string =
    let v0 : string = "py-path"
    v0
and method165 () : string =
    let v0 : string = "env"
    v0
and method167 (v0 : US38, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "env"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v64 : string = $"%A{v0}"
    let v68 : string = $"{v64}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v5, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "exit_code"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v46}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v143 : string = $"{v1}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v143)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v160 : string = $"{v86}"
    let v168 : unit = ()
    let v169 : (unit -> unit) = closure7(v5, v160)
    let v170 : unit = (fun () -> v169 (); v168) ()
    let v178 : string = "run_result"
    let v179 : string = $"{v178}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v5, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v196 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v5, v196)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v213 : string = $"{v2}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v5, v213)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v230 : string = $"{v86}"
    let v238 : unit = ()
    let v239 : (unit -> unit) = closure7(v5, v230)
    let v240 : unit = (fun () -> v239 (); v238) ()
    let v248 : string = "new_code_path"
    let v249 : string = $"{v248}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v5, v249)
    let v259 : unit = (fun () -> v258 (); v257) ()
    let v266 : string = $"{v46}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v5, v266)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v283 : string = $"{v3}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v5, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v301 : string = " }"
    let v302 : string = $"{v301}"
    let v310 : unit = ()
    let v311 : (unit -> unit) = closure7(v5, v302)
    let v312 : unit = (fun () -> v311 (); v310) ()
    let v318 : string = v5.l0
    v318
and method166 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method167(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / env install error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure68 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method166(v107, v108, v109, v110, v111, v112, v125, v126, v0, v3, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure69 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method75()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method169 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "new_code_path"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "external_command"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method168 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method169(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure71 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method168(v107, v108, v109, v110, v111, v112, v125, v126, v3, v1, v0, v2)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure70 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure71(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method170 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method156(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure72 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method170(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method171 () : string =
    let v0 : string = "fs-path"
    v0
and method172 () : string =
    let v0 : string = "command"
    v0
and method173 () : string =
    let v0 : string = "path"
    v0
and method175 (v0 : string) : string =
    let v1 : string = method31()
    let v2 : string = method33(v1, v0)
    method66(v2)
and closure73 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method175(v2)
and method174 () : (std_string_String -> string) =
    closure73()
and method176 () : string =
    let v0 : string = "retries"
    v0
and method177 () : string =
    let v0 : string = "working-directory"
    v0
and method180 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "repl_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "retry"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method180(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_dib / repl error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method16(v55)
and closure74 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 3 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method40()
            let v127 : string = $"{v1}/{v0}"
            let v128 : string = method179(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v127)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method178 (v0 : US5, v1 : uint8, v2 : string, v3 : string, v4 : uint8) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    let v22 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v3}\""
    let v23 : string = "TRACE_LEVEL"
    let v24 : string = "Verbose"
    let v25 : string = "AUTOMATION"
    let v26 : string = "True"
    let v27 : (struct (string * string) []) = [|struct (v23, v24); struct (v25, v26)|]
    let v38 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v34 : string option = None
            v34
        | US5_0(v28) -> (* Some *)
            let v30 : string option = Some v28 
            v30
    let v39 : bool = false
    let v40 : bool = true
    let struct (v41 : int32, v42 : string) = method90(v22, v6, v27, v11, v15, v39, v38, v40)
    let v43 : bool = v41 = 0
    let v45 : bool =
        if v43 then
            true
        else
            let v44 : bool = v4 >= v1
            v44
    if v45 then
        (* run_target_args'
        let v50 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        (* run_target_args'
        let v55 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v56 : string = "std::fs::read(&*$0)"
        let v57 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3 v56 
        (* run_target_args'
        let v59 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v60 : string = "$0.unwrap()"
        let v61 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v57 v60 
        let _run_target_args'_v59 = v61 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v62 : string = "$0.unwrap()"
        let v63 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v57 v62 
        let _run_target_args'_v59 = v63 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v64 : string = "$0.unwrap()"
        let v65 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v57 v64 
        let _run_target_args'_v59 = v65 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v66 : Vec<uint8> = match v57 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v59 = v66 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : Vec<uint8> = match v57 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v59 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v68 : Vec<uint8> = match v57 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v59 = v68 
        #endif
#else
        let v69 : Vec<uint8> = match v57 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v59 = v69 
        #endif
        let v70 : Vec<uint8> = _run_target_args'_v59 
        let _run_target_args'_v55 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v74 : Vec<uint8> = null |> unbox<Vec<uint8>>
        let _run_target_args'_v55 = v74 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v78 : Vec<uint8> = null |> unbox<Vec<uint8>>
        let _run_target_args'_v55 = v78 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v82 : Vec<uint8> = null |> unbox<Vec<uint8>>
        let _run_target_args'_v55 = v82 
        #endif
#if FABLE_COMPILER_PYTHON
        let v86 : Vec<uint8> = null |> unbox<Vec<uint8>>
        let _run_target_args'_v55 = v86 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v90 : Vec<uint8> = null |> unbox<Vec<uint8>>
        let _run_target_args'_v55 = v90 
        #endif
#else
        let v93 : (uint8 []) = v3 |> System.IO.File.ReadAllBytes
        let v94 : string = "$0.to_vec()"
        let v95 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v93 v94 
        let _run_target_args'_v55 = v95 
        #endif
        let v96 : Vec<uint8> = _run_target_args'_v55 
        let v105 : Vec<uint8> = method24(v96)
        let v106 : string = "std::string::String::from_utf8($0)"
        let v107 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v105 v106 
        (* run_target_args'
        let v109 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v110 : string = "$0.unwrap()"
        let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr v107 v110 
        let _run_target_args'_v109 = v111 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v112 : string = "$0.unwrap()"
        let v113 : std_string_String = Fable.Core.RustInterop.emitRustExpr v107 v112 
        let _run_target_args'_v109 = v113 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v114 : string = "$0.unwrap()"
        let v115 : std_string_String = Fable.Core.RustInterop.emitRustExpr v107 v114 
        let _run_target_args'_v109 = v115 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v116 : std_string_String = match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v109 = v116 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : std_string_String = match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v109 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v118 : std_string_String = match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v109 = v118 
        #endif
#else
        let v119 : std_string_String = match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _run_target_args'_v109 = v119 
        #endif
        let v120 : std_string_String = _run_target_args'_v109 
        let v123 : string = "fable_library_rust::String_::fromString($0)"
        let v124 : string = Fable.Core.RustInterop.emitRustExpr v120 v123 
        let _run_target_args'_v50 = v124 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v126 : string = null |> unbox<string>
        let _run_target_args'_v50 = v126 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = null |> unbox<string>
        let _run_target_args'_v50 = v130 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v134 : string = null |> unbox<string>
        let _run_target_args'_v50 = v134 
        #endif
#if FABLE_COMPILER_PYTHON
        let v138 : string = null |> unbox<string>
        let _run_target_args'_v50 = v138 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v142 : string = null |> unbox<string>
        let _run_target_args'_v50 = v142 
        #endif
#else
        let v145 : string = v3 |> System.IO.File.ReadAllText
        let _run_target_args'_v50 = v145 
        #endif
        let v146 : string = _run_target_args'_v50 
        let v155 : string = "\r\n"
        let v156 : string = "\n"
        let v157 : string = v146.Replace (v155, v156)
        let v158 : string = "\\r\\n"
        let v159 : string = "\\n"
        let v160 : string = v157.Replace (v158, v159)
        (* run_target_args'
        let v161 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v162 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v3, v160) v162 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v3, v160)
        #endif
        // run_target_args' is_unit
        struct (v41, v42)
    else
        let v475 : unit = ()
        let v476 : (unit -> unit) = closure74(v1, v4, v42, v41)
        let v477 : unit = (fun () -> v476 (); v475) ()
        let v793 : uint8 = v4 + 1uy
        method178(v0, v1, v2, v3, v793)
and method182 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "jupyter_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method181 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method182(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_dib / dib / jupyter nbconvert"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure75 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method181(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method184 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "pwsh_replace_html_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method183 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method184(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib / html cell ids"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure76 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method183(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and closure77 () () : US39 =
    US39_0
and method185 () : (unit -> US39) =
    closure77()
and closure78 () (v0 : string) : US39 =
    US39_1(v0)
and method186 () : (string -> US39) =
    closure78()
and method188 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error'"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method187 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method188(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.file_delete"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure79 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method82()
            let v124 : string = method187(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method190 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method189 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method190(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_dib / dib"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure80 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method189(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method191 () : string =
    let v0 : string = "cleanup"
    v0
and method192 () : string =
    let v0 : string = "wasm"
    v0
and method193 () : string =
    let v0 : string = "contract"
    v0
and method194 (v0 : string, v1 : string, v2 : US40) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "extension"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v63 : string = $"{v0}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v4, v63)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v81 : string = "; "
    let v82 : string = $"{v81}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v4, v82)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v100 : string = "code"
    let v101 : string = $"{v100}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v4, v101)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v118 : string = $"{v45}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v4, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v135 : string = $"{v1}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v4, v135)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v152 : string = $"{v81}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v4, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v170 : string = "runtime"
    let v171 : string = $"{v170}"
    let v179 : unit = ()
    let v180 : (unit -> unit) = closure7(v4, v171)
    let v181 : unit = (fun () -> v180 (); v179) ()
    let v188 : string = $"{v45}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v4, v188)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v205 : string = $"%A{v2}"
    let v209 : string = $"{v205}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v4, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v227 : string = " }"
    let v228 : string = $"{v227}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v4, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v244 : string = v4.l0
    v244
and method195 (v0 : US5, v1 : string, v2 : US43, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method33(v3, v4)
    let v6 : string = method33(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US43_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method33(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US42_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US42_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US42_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method33(v10, v42)
            method33(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method197 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method197(v0, v4, v2)
        let v6 : string = method33(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method198 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method198(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method196 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method78(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method33(v4, v7)
    let v9 : string = method43(v8)
    method76(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method197(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method121(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method198(v3, v35)
    let v37 : string list = []
    let v38 : string list = method121(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method33(v4, v58)
    let v60 : string = method43(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v65 : string = "\n"
    let v66 : string = v61 + v65 
    let v70 : string = v66 + v62 
    let v73 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v75 : string = v70 + v65 
    let v79 : string = v75 + v73 
    let v82 : string = $"    <LangVersion>preview</LangVersion>"
    let v84 : string = v79 + v65 
    let v88 : string = v84 + v82 
    let v91 : string = $"    <RollForward>Major</RollForward>"
    let v93 : string = v88 + v65 
    let v97 : string = v93 + v91 
    let v100 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v102 : string = v97 + v65 
    let v106 : string = v102 + v100 
    let v109 : string = $"    <PublishAot>false</PublishAot>"
    let v111 : string = v106 + v65 
    let v115 : string = v111 + v109 
    let v118 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v120 : string = v115 + v65 
    let v124 : string = v120 + v118 
    let v127 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v129 : string = v124 + v65 
    let v133 : string = v129 + v127 
    let v136 : string = $"    <SelfContained>true</SelfContained>"
    let v138 : string = v133 + v65 
    let v142 : string = v138 + v136 
    let v145 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v147 : string = v142 + v65 
    let v151 : string = v147 + v145 
    let v154 : string = $"    <OutputType>Exe</OutputType>"
    let v156 : string = v151 + v65 
    let v160 : string = v156 + v154 
    let v163 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v165 : string = v160 + v65 
    let v169 : string = v165 + v163 
    let v172 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v174 : string = v169 + v65 
    let v178 : string = v174 + v172 
    let v181 : string = $"</PropertyGroup>"
    let v183 : string = v178 + v65 
    let v187 : string = v183 + v181 
    let v190 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v192 : string = v187 + v65 
    let v196 : string = v192 + v190 
    let v199 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v201 : string = v196 + v65 
    let v205 : string = v201 + v199 
    let v208 : string = $"</PropertyGroup>"
    let v210 : string = v205 + v65 
    let v214 : string = v210 + v208 
    let v217 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v219 : string = v214 + v65 
    let v223 : string = v219 + v217 
    let v226 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v228 : string = v223 + v65 
    let v232 : string = v228 + v226 
    let v235 : string = $"</PropertyGroup>"
    let v237 : string = v232 + v65 
    let v241 : string = v237 + v235 
    let v244 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v246 : string = v241 + v65 
    let v250 : string = v246 + v244 
    let v253 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v255 : string = v250 + v65 
    let v259 : string = v255 + v253 
    let v262 : string = $"</PropertyGroup>"
    let v264 : string = v259 + v65 
    let v268 : string = v264 + v262 
    let v271 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v273 : string = v268 + v65 
    let v277 : string = v273 + v271 
    let v280 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v282 : string = v277 + v65 
    let v286 : string = v282 + v280 
    let v289 : string = $"</PropertyGroup>"
    let v291 : string = v286 + v65 
    let v295 : string = v291 + v289 
    let v298 : string = $"<ItemGroup>"
    let v300 : string = v295 + v65 
    let v304 : string = v300 + v298 
    let v307 : string = $"    {v32}"
    let v309 : string = v304 + v65 
    let v313 : string = v309 + v307 
    let v316 : string = $"    <Compile Include=\"{v9}\" />"
    let v318 : string = v313 + v65 
    let v322 : string = v318 + v316 
    let v325 : string = $"</ItemGroup>"
    let v327 : string = v322 + v65 
    let v331 : string = v327 + v325 
    let v334 : string = $"<ItemGroup>"
    let v336 : string = v331 + v65 
    let v340 : string = v336 + v334 
    let v343 : string = $"    {v55}"
    let v345 : string = v340 + v65 
    let v349 : string = v345 + v343 
    let v352 : string = $"</ItemGroup>"
    let v354 : string = v349 + v65 
    let v358 : string = v354 + v352 
    let v361 : string = $"</Project>"
    let v363 : string = v358 + v65 
    let v367 : string = v363 + v361 
    method76(v60, v367)
    v60
and closure81 () (v0 : chrono_DateTime<chrono_Utc>) : US44 =
    US44_0(v0)
and method200 () : (chrono_DateTime<chrono_Utc> -> US44) =
    closure81()
and method201 () : string =
    let v0 : string = "hh:mm"
    v0
and method202 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method203 () : string =
    let v0 : string = "hhmm"
    v0
and method199 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v741 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v747 : System.DateTime = System.DateTime.UnixEpoch
    let v751 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v752 : System.DateTime = v751 v747
    let v756 : System.DateTimeKind = System.DateTimeKind.Local
    let v757 : System.DateTime = System.DateTime.SpecifyKind (v1, v756)
    let v761 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v762 : System.DateTime = v761 v757
    (* run_target_args'
    let v771 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v772 : (System.DateTime -> int64) = _.Ticks
    let v773 : int64 = v772 v762
    let _run_target_args'_v771 = v773 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v774 : (System.DateTime -> int64) = _.Ticks
    let v775 : int64 = v774 v762
    let _run_target_args'_v771 = v775 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v777 : int64 = null |> unbox<int64>
    let _run_target_args'_v771 = v777 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v780 : (System.DateTime -> int64) = _.Ticks
    let v781 : int64 = v780 v762
    let _run_target_args'_v771 = v781 
    #endif
#if FABLE_COMPILER_PYTHON
    let v782 : (System.DateTime -> int64) = _.Ticks
    let v783 : int64 = v782 v762
    let _run_target_args'_v771 = v783 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v784 : (System.DateTime -> int64) = _.Ticks
    let v785 : int64 = v784 v762
    let _run_target_args'_v771 = v785 
    #endif
#else
    let v786 : (System.DateTime -> int64) = _.Ticks
    let v787 : int64 = v786 v762
    let _run_target_args'_v771 = v787 
    #endif
    let v788 : int64 = _run_target_args'_v771 
    (* run_target_args'
    let v815 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v816 : (System.DateTime -> int64) = _.Ticks
    let v817 : int64 = v816 v752
    let _run_target_args'_v815 = v817 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v818 : (System.DateTime -> int64) = _.Ticks
    let v819 : int64 = v818 v752
    let _run_target_args'_v815 = v819 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v821 : int64 = null |> unbox<int64>
    let _run_target_args'_v815 = v821 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v824 : (System.DateTime -> int64) = _.Ticks
    let v825 : int64 = v824 v752
    let _run_target_args'_v815 = v825 
    #endif
#if FABLE_COMPILER_PYTHON
    let v826 : (System.DateTime -> int64) = _.Ticks
    let v827 : int64 = v826 v752
    let _run_target_args'_v815 = v827 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v828 : (System.DateTime -> int64) = _.Ticks
    let v829 : int64 = v828 v752
    let _run_target_args'_v815 = v829 
    #endif
#else
    let v830 : (System.DateTime -> int64) = _.Ticks
    let v831 : int64 = v830 v752
    let _run_target_args'_v815 = v831 
    #endif
    let v832 : int64 = _run_target_args'_v815 
    let v854 : int64 = v788 |> int64 
    let v858 : int64 = v832 |> int64 
    let v861 : int64 = v854 - v858
    let v862 : int64 = v861 / 10L
    let v863 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v864 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v862 v863 
    let v867 : (chrono_DateTime<chrono_Utc> -> US44) = method200()
    let v868 : US44 option = v864 |> Option.map v867 
    let v888 : US44 = US44_1
    let v889 : US44 = v868 |> Option.defaultValue v888 
    let v909 : US5 =
        match v889 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v893) -> (* Some *)
            let v894 : string = "$0.naive_utc()"
            let v895 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v893 v894 
            let v896 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v897 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v895 v896 
            let v898 : string = "%Y%m%d-%H%M-%S%f"
            let v899 : string = "r#\"" + v898 + "\"#"
            let v900 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v899 
            let v901 : string = "$0.format($1).to_string()"
            let v902 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v897, v900) v901 
            let v903 : string = "fable_library_rust::String_::fromString($0)"
            let v904 : string = Fable.Core.RustInterop.emitRustExpr v902 v903 
            let v905 : string = $"{v904.[0..17]}-{v904.[18..21]}-{v904.[22]}"
            US5_0(v905)
    let v913 : string =
        match v909 with
        | US5_1 -> (* None *)
            let v911 : string = ""
            v911
        | US5_0(v910) -> (* Some *)
            v910
    (* run_target_args'
    let v918 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v919 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v920 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v919 
    let _run_target_args'_v918 = v920 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v922 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v918 = v922 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v926 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v918 = v926 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v930 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v918 = v930 
    #endif
#if FABLE_COMPILER_PYTHON
    let v934 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v918 = v934 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v937 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v918 = v937 
    #endif
#else
    let v938 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v918 = v938 
    #endif
    let v939 : System.TimeZoneInfo = _run_target_args'_v918 
    (* run_target_args'
    let v955 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v962 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v963 : (System.DateTime -> int64) = _.Ticks
    let v964 : int64 = v963 v762
    let _run_target_args'_v962 = v964 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v965 : (System.DateTime -> int64) = _.Ticks
    let v966 : int64 = v965 v762
    let _run_target_args'_v962 = v966 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v968 : int64 = null |> unbox<int64>
    let _run_target_args'_v962 = v968 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v971 : (System.DateTime -> int64) = _.Ticks
    let v972 : int64 = v971 v762
    let _run_target_args'_v962 = v972 
    #endif
#if FABLE_COMPILER_PYTHON
    let v973 : (System.DateTime -> int64) = _.Ticks
    let v974 : int64 = v973 v762
    let _run_target_args'_v962 = v974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v975 : (System.DateTime -> int64) = _.Ticks
    let v976 : int64 = v975 v762
    let _run_target_args'_v962 = v976 
    #endif
#else
    let v977 : (System.DateTime -> int64) = _.Ticks
    let v978 : int64 = v977 v762
    let _run_target_args'_v962 = v978 
    #endif
    let v979 : int64 = _run_target_args'_v962 
    let v1000 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1001 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v762, v979) v1000 
    let v1003 : System.TimeSpan = v1001 |> System.TimeSpan 
    let _run_target_args'_v955 = v1003 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1012 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1013 : (System.DateTime -> int64) = _.Ticks
    let v1014 : int64 = v1013 v762
    let _run_target_args'_v1012 = v1014 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1015 : (System.DateTime -> int64) = _.Ticks
    let v1016 : int64 = v1015 v762
    let _run_target_args'_v1012 = v1016 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1018 : int64 = null |> unbox<int64>
    let _run_target_args'_v1012 = v1018 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1021 : (System.DateTime -> int64) = _.Ticks
    let v1022 : int64 = v1021 v762
    let _run_target_args'_v1012 = v1022 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1023 : (System.DateTime -> int64) = _.Ticks
    let v1024 : int64 = v1023 v762
    let _run_target_args'_v1012 = v1024 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1025 : (System.DateTime -> int64) = _.Ticks
    let v1026 : int64 = v1025 v762
    let _run_target_args'_v1012 = v1026 
    #endif
#else
    let v1027 : (System.DateTime -> int64) = _.Ticks
    let v1028 : int64 = v1027 v762
    let _run_target_args'_v1012 = v1028 
    #endif
    let v1029 : int64 = _run_target_args'_v1012 
    let v1050 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1051 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v762, v1029) v1050 
    let v1053 : System.TimeSpan = v1051 |> System.TimeSpan 
    let _run_target_args'_v955 = v1053 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1057 : US3 = US3_2
    let v1058 : US4 = US4_4(v1057)
    let v1059 : string = $"date_time.get_utc_offset / target: {v1058}"
    let v1060 : System.TimeSpan = failwith<System.TimeSpan> v1059
    let _run_target_args'_v955 = v1060 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1064 : US3 = US3_0
    let v1065 : US4 = US4_5(v1064)
    let v1066 : string = $"date_time.get_utc_offset / target: {v1065}"
    let v1067 : System.TimeSpan = failwith<System.TimeSpan> v1066
    let _run_target_args'_v955 = v1067 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1071 : US3 = US3_0
    let v1072 : US4 = US4_6(v1071)
    let v1073 : string = $"date_time.get_utc_offset / target: {v1072}"
    let v1074 : System.TimeSpan = failwith<System.TimeSpan> v1073
    let _run_target_args'_v955 = v1074 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1077 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1082 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1083 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1084 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1083 
    let _run_target_args'_v1082 = v1084 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1086 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1082 = v1086 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1090 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1082 = v1090 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1094 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1082 = v1094 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1098 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1082 = v1098 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1101 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1082 = v1101 
    #endif
#else
    let v1102 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1082 = v1102 
    #endif
    let v1103 : System.TimeZoneInfo = _run_target_args'_v1082 
    let v1112 : (System.DateTime -> System.TimeSpan) = v1077 v1103
    let v1113 : System.TimeSpan = v1112 v762
    let _run_target_args'_v955 = v1113 
    #endif
#else
    let v1114 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1119 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1120 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1121 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1120 
    let _run_target_args'_v1119 = v1121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1123 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1119 = v1123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1127 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1119 = v1127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1131 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1119 = v1131 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1135 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1119 = v1135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1138 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1119 = v1138 
    #endif
#else
    let v1139 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1119 = v1139 
    #endif
    let v1140 : System.TimeZoneInfo = _run_target_args'_v1119 
    let v1149 : (System.DateTime -> System.TimeSpan) = v1114 v1140
    let v1150 : System.TimeSpan = v1149 v762
    let _run_target_args'_v955 = v1150 
    #endif
    let v1151 : System.TimeSpan = _run_target_args'_v955 
    let v1167 : (System.TimeSpan -> int32) = _.Hours
    let v1168 : int32 = v1167 v1151
    let v1171 : bool = v1168 > 0
    let v1172 : uint8 =
        if v1171 then
            1uy
        else
            0uy
    let v1173 : string = method201()
    (* run_target_args'
    let v1244 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1245 : string = "$0.toString($1)"
    let v1246 : string = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1173) v1245 
    let _run_target_args'_v1244 = v1246 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1247 : string = "$0.toString($1)"
    let v1248 : string = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1173) v1247 
    let _run_target_args'_v1244 = v1248 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1249 : string = "$0.toString($1)"
    let v1250 : string = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1173) v1249 
    let _run_target_args'_v1244 = v1250 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1251 : string = v1151.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1244 = v1251 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1252 : string = v1151.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1244 = v1252 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1254 : string = v1151.ToString v1173 
    let _run_target_args'_v1244 = v1254 
    #endif
#else
    let v1324 : string = v1151.ToString v1173 
    let _run_target_args'_v1244 = v1324 
    #endif
    let v1393 : string = _run_target_args'_v1244 
    let v1534 : string = $"{v1172}{v1393.[0..1]}{v1393.[3..4]}"
    let v1536 : (System.Guid -> string) = _.ToString()
    let v1537 : string = v1536 v0
    let v1540 : int32 = v913.Length
    let v1541 : int32 = v1534.Length
    let v1542 : int32 = v1540 + v1541
    let v1544 : (string -> int32) = String.length
    let v1545 : int32 = v1544 v1537
    let v1549 : int32 = 1
    let v1555 : int32 = v1542 |> int32 
    let v1568 : int32 = v1545 |> int32 
    let v1576 : int32 = v1568 - v1549
    let v1578 : string = v1537.[int v1555..int v1576]
    let v1582 : string = $"{v913}{v1534}{v1578}"
    (* run_target_args'
    let v1587 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1589 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1589 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1593 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1593 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1597 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1587 = v1597 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1601 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1601 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1605 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1605 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1609 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1609 
    #endif
#else
    let v1613 : System.Guid = v1582 |> System.Guid 
    let _run_target_args'_v1587 = v1613 
    #endif
    let v1616 : System.Guid = _run_target_args'_v1587 
    let _run_target_args'_v741 = v1616 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1630 : System.DateTime = System.DateTime.UnixEpoch
    let v1634 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1635 : System.DateTime = v1634 v1630
    let v1639 : System.DateTimeKind = System.DateTimeKind.Local
    let v1640 : System.DateTime = System.DateTime.SpecifyKind (v1, v1639)
    let v1644 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1645 : System.DateTime = v1644 v1640
    (* run_target_args'
    let v1654 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1655 : (System.DateTime -> int64) = _.Ticks
    let v1656 : int64 = v1655 v1645
    let _run_target_args'_v1654 = v1656 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1657 : (System.DateTime -> int64) = _.Ticks
    let v1658 : int64 = v1657 v1645
    let _run_target_args'_v1654 = v1658 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1660 : int64 = null |> unbox<int64>
    let _run_target_args'_v1654 = v1660 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1663 : (System.DateTime -> int64) = _.Ticks
    let v1664 : int64 = v1663 v1645
    let _run_target_args'_v1654 = v1664 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1665 : (System.DateTime -> int64) = _.Ticks
    let v1666 : int64 = v1665 v1645
    let _run_target_args'_v1654 = v1666 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1667 : (System.DateTime -> int64) = _.Ticks
    let v1668 : int64 = v1667 v1645
    let _run_target_args'_v1654 = v1668 
    #endif
#else
    let v1669 : (System.DateTime -> int64) = _.Ticks
    let v1670 : int64 = v1669 v1645
    let _run_target_args'_v1654 = v1670 
    #endif
    let v1671 : int64 = _run_target_args'_v1654 
    (* run_target_args'
    let v1698 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1699 : (System.DateTime -> int64) = _.Ticks
    let v1700 : int64 = v1699 v1635
    let _run_target_args'_v1698 = v1700 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1701 : (System.DateTime -> int64) = _.Ticks
    let v1702 : int64 = v1701 v1635
    let _run_target_args'_v1698 = v1702 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1704 : int64 = null |> unbox<int64>
    let _run_target_args'_v1698 = v1704 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1707 : (System.DateTime -> int64) = _.Ticks
    let v1708 : int64 = v1707 v1635
    let _run_target_args'_v1698 = v1708 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1709 : (System.DateTime -> int64) = _.Ticks
    let v1710 : int64 = v1709 v1635
    let _run_target_args'_v1698 = v1710 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1711 : (System.DateTime -> int64) = _.Ticks
    let v1712 : int64 = v1711 v1635
    let _run_target_args'_v1698 = v1712 
    #endif
#else
    let v1713 : (System.DateTime -> int64) = _.Ticks
    let v1714 : int64 = v1713 v1635
    let _run_target_args'_v1698 = v1714 
    #endif
    let v1715 : int64 = _run_target_args'_v1698 
    let v1737 : int64 = v1671 |> int64 
    let v1741 : int64 = v1715 |> int64 
    let v1744 : int64 = v1737 - v1741
    let v1745 : int64 = v1744 / 10L
    let v1746 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1747 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1745 v1746 
    let v1750 : (chrono_DateTime<chrono_Utc> -> US44) = method200()
    let v1751 : US44 option = v1747 |> Option.map v1750 
    let v1771 : US44 = US44_1
    let v1772 : US44 = v1751 |> Option.defaultValue v1771 
    let v1792 : US5 =
        match v1772 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v1776) -> (* Some *)
            let v1777 : string = "$0.naive_utc()"
            let v1778 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1776 v1777 
            let v1779 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1780 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1778 v1779 
            let v1781 : string = "%Y%m%d-%H%M-%S%f"
            let v1782 : string = "r#\"" + v1781 + "\"#"
            let v1783 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1782 
            let v1784 : string = "$0.format($1).to_string()"
            let v1785 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1780, v1783) v1784 
            let v1786 : string = "fable_library_rust::String_::fromString($0)"
            let v1787 : string = Fable.Core.RustInterop.emitRustExpr v1785 v1786 
            let v1788 : string = $"{v1787.[0..17]}-{v1787.[18..21]}-{v1787.[22]}"
            US5_0(v1788)
    let v1796 : string =
        match v1792 with
        | US5_1 -> (* None *)
            let v1794 : string = ""
            v1794
        | US5_0(v1793) -> (* Some *)
            v1793
    (* run_target_args'
    let v1801 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1802 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1803 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1802 
    let _run_target_args'_v1801 = v1803 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1805 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1801 = v1805 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1809 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1801 = v1809 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1813 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1801 = v1813 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1817 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1801 = v1817 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1820 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1801 = v1820 
    #endif
#else
    let v1821 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1801 = v1821 
    #endif
    let v1822 : System.TimeZoneInfo = _run_target_args'_v1801 
    (* run_target_args'
    let v1838 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1845 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1846 : (System.DateTime -> int64) = _.Ticks
    let v1847 : int64 = v1846 v1645
    let _run_target_args'_v1845 = v1847 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1848 : (System.DateTime -> int64) = _.Ticks
    let v1849 : int64 = v1848 v1645
    let _run_target_args'_v1845 = v1849 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1851 : int64 = null |> unbox<int64>
    let _run_target_args'_v1845 = v1851 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1854 : (System.DateTime -> int64) = _.Ticks
    let v1855 : int64 = v1854 v1645
    let _run_target_args'_v1845 = v1855 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1856 : (System.DateTime -> int64) = _.Ticks
    let v1857 : int64 = v1856 v1645
    let _run_target_args'_v1845 = v1857 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1858 : (System.DateTime -> int64) = _.Ticks
    let v1859 : int64 = v1858 v1645
    let _run_target_args'_v1845 = v1859 
    #endif
#else
    let v1860 : (System.DateTime -> int64) = _.Ticks
    let v1861 : int64 = v1860 v1645
    let _run_target_args'_v1845 = v1861 
    #endif
    let v1862 : int64 = _run_target_args'_v1845 
    let v1883 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1884 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1645, v1862) v1883 
    let v1886 : System.TimeSpan = v1884 |> System.TimeSpan 
    let _run_target_args'_v1838 = v1886 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1895 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1896 : (System.DateTime -> int64) = _.Ticks
    let v1897 : int64 = v1896 v1645
    let _run_target_args'_v1895 = v1897 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1898 : (System.DateTime -> int64) = _.Ticks
    let v1899 : int64 = v1898 v1645
    let _run_target_args'_v1895 = v1899 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1901 : int64 = null |> unbox<int64>
    let _run_target_args'_v1895 = v1901 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1904 : (System.DateTime -> int64) = _.Ticks
    let v1905 : int64 = v1904 v1645
    let _run_target_args'_v1895 = v1905 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1906 : (System.DateTime -> int64) = _.Ticks
    let v1907 : int64 = v1906 v1645
    let _run_target_args'_v1895 = v1907 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1908 : (System.DateTime -> int64) = _.Ticks
    let v1909 : int64 = v1908 v1645
    let _run_target_args'_v1895 = v1909 
    #endif
#else
    let v1910 : (System.DateTime -> int64) = _.Ticks
    let v1911 : int64 = v1910 v1645
    let _run_target_args'_v1895 = v1911 
    #endif
    let v1912 : int64 = _run_target_args'_v1895 
    let v1933 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1934 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1645, v1912) v1933 
    let v1936 : System.TimeSpan = v1934 |> System.TimeSpan 
    let _run_target_args'_v1838 = v1936 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1940 : US3 = US3_2
    let v1941 : US4 = US4_4(v1940)
    let v1942 : string = $"date_time.get_utc_offset / target: {v1941}"
    let v1943 : System.TimeSpan = failwith<System.TimeSpan> v1942
    let _run_target_args'_v1838 = v1943 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1947 : US3 = US3_0
    let v1948 : US4 = US4_5(v1947)
    let v1949 : string = $"date_time.get_utc_offset / target: {v1948}"
    let v1950 : System.TimeSpan = failwith<System.TimeSpan> v1949
    let _run_target_args'_v1838 = v1950 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1954 : US3 = US3_0
    let v1955 : US4 = US4_6(v1954)
    let v1956 : string = $"date_time.get_utc_offset / target: {v1955}"
    let v1957 : System.TimeSpan = failwith<System.TimeSpan> v1956
    let _run_target_args'_v1838 = v1957 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1960 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1965 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1966 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1967 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1966 
    let _run_target_args'_v1965 = v1967 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1969 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1965 = v1969 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1973 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1965 = v1973 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1977 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1965 = v1977 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1981 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1965 = v1981 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1984 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1965 = v1984 
    #endif
#else
    let v1985 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1965 = v1985 
    #endif
    let v1986 : System.TimeZoneInfo = _run_target_args'_v1965 
    let v1995 : (System.DateTime -> System.TimeSpan) = v1960 v1986
    let v1996 : System.TimeSpan = v1995 v1645
    let _run_target_args'_v1838 = v1996 
    #endif
#else
    let v1997 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2002 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2003 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2004 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2003 
    let _run_target_args'_v2002 = v2004 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2006 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2002 = v2006 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2010 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2002 = v2010 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2014 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2002 = v2014 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2018 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2002 = v2018 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2021 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2002 = v2021 
    #endif
#else
    let v2022 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2002 = v2022 
    #endif
    let v2023 : System.TimeZoneInfo = _run_target_args'_v2002 
    let v2032 : (System.DateTime -> System.TimeSpan) = v1997 v2023
    let v2033 : System.TimeSpan = v2032 v1645
    let _run_target_args'_v1838 = v2033 
    #endif
    let v2034 : System.TimeSpan = _run_target_args'_v1838 
    let v2050 : (System.TimeSpan -> int32) = _.Hours
    let v2051 : int32 = v2050 v2034
    let v2054 : bool = v2051 > 0
    let v2055 : uint8 =
        if v2054 then
            1uy
        else
            0uy
    let v2056 : string = method201()
    (* run_target_args'
    let v2127 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2128 : string = "$0.toString($1)"
    let v2129 : string = Fable.Core.RustInterop.emitRustExpr struct (v2034, v2056) v2128 
    let _run_target_args'_v2127 = v2129 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2130 : string = "$0.toString($1)"
    let v2131 : string = Fable.Core.RustInterop.emitRustExpr struct (v2034, v2056) v2130 
    let _run_target_args'_v2127 = v2131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2132 : string = "$0.toString($1)"
    let v2133 : string = Fable.Core.RustInterop.emitRustExpr struct (v2034, v2056) v2132 
    let _run_target_args'_v2127 = v2133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2134 : string = v2034.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2127 = v2134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2135 : string = v2034.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2127 = v2135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2137 : string = v2034.ToString v2056 
    let _run_target_args'_v2127 = v2137 
    #endif
#else
    let v2207 : string = v2034.ToString v2056 
    let _run_target_args'_v2127 = v2207 
    #endif
    let v2276 : string = _run_target_args'_v2127 
    let v2417 : string = $"{v2055}{v2276.[0..1]}{v2276.[3..4]}"
    let v2419 : (System.Guid -> string) = _.ToString()
    let v2420 : string = v2419 v0
    let v2423 : int32 = v1796.Length
    let v2424 : int32 = v2417.Length
    let v2425 : int32 = v2423 + v2424
    let v2427 : (string -> int32) = String.length
    let v2428 : int32 = v2427 v2420
    let v2432 : int32 = 1
    let v2438 : int32 = v2425 |> int32 
    let v2451 : int32 = v2428 |> int32 
    let v2459 : int32 = v2451 - v2432
    let v2461 : string = v2420.[int v2438..int v2459]
    let v2465 : string = $"{v1796}{v2417}{v2461}"
    (* run_target_args'
    let v2470 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2472 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2472 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2476 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2476 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2480 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2470 = v2480 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2484 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2484 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2488 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2488 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2492 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2492 
    #endif
#else
    let v2496 : System.Guid = v2465 |> System.Guid 
    let _run_target_args'_v2470 = v2496 
    #endif
    let v2499 : System.Guid = _run_target_args'_v2470 
    let _run_target_args'_v741 = v2499 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2509 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v741 = v2509 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2512 : string = method202()
    let v2523 : bool = v2512 = ""
    let v2525 : string =
        if v2523 then
            let v2524 : string = "M-d-y hh:mm:ss tt"
            v2524
        else
            v2512
    let v2526 : (string -> string) = v1.ToString
    let v2527 : string = v2526 v2525
    (* run_target_args'
    let v2546 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2547 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2548 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2547 
    let _run_target_args'_v2546 = v2548 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2550 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2546 = v2550 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2554 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2546 = v2554 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2558 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2546 = v2558 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2562 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2546 = v2562 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2565 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2546 = v2565 
    #endif
#else
    let v2566 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2546 = v2566 
    #endif
    let v2567 : System.TimeZoneInfo = _run_target_args'_v2546 
    (* run_target_args'
    let v2583 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2590 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2591 : (System.DateTime -> int64) = _.Ticks
    let v2592 : int64 = v2591 v1
    let _run_target_args'_v2590 = v2592 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2593 : (System.DateTime -> int64) = _.Ticks
    let v2594 : int64 = v2593 v1
    let _run_target_args'_v2590 = v2594 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2596 : int64 = null |> unbox<int64>
    let _run_target_args'_v2590 = v2596 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2599 : (System.DateTime -> int64) = _.Ticks
    let v2600 : int64 = v2599 v1
    let _run_target_args'_v2590 = v2600 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2601 : (System.DateTime -> int64) = _.Ticks
    let v2602 : int64 = v2601 v1
    let _run_target_args'_v2590 = v2602 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2603 : (System.DateTime -> int64) = _.Ticks
    let v2604 : int64 = v2603 v1
    let _run_target_args'_v2590 = v2604 
    #endif
#else
    let v2605 : (System.DateTime -> int64) = _.Ticks
    let v2606 : int64 = v2605 v1
    let _run_target_args'_v2590 = v2606 
    #endif
    let v2607 : int64 = _run_target_args'_v2590 
    let v2628 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2629 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2607) v2628 
    let v2631 : System.TimeSpan = v2629 |> System.TimeSpan 
    let _run_target_args'_v2583 = v2631 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2640 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2641 : (System.DateTime -> int64) = _.Ticks
    let v2642 : int64 = v2641 v1
    let _run_target_args'_v2640 = v2642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2643 : (System.DateTime -> int64) = _.Ticks
    let v2644 : int64 = v2643 v1
    let _run_target_args'_v2640 = v2644 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2646 : int64 = null |> unbox<int64>
    let _run_target_args'_v2640 = v2646 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2649 : (System.DateTime -> int64) = _.Ticks
    let v2650 : int64 = v2649 v1
    let _run_target_args'_v2640 = v2650 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2651 : (System.DateTime -> int64) = _.Ticks
    let v2652 : int64 = v2651 v1
    let _run_target_args'_v2640 = v2652 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2653 : (System.DateTime -> int64) = _.Ticks
    let v2654 : int64 = v2653 v1
    let _run_target_args'_v2640 = v2654 
    #endif
#else
    let v2655 : (System.DateTime -> int64) = _.Ticks
    let v2656 : int64 = v2655 v1
    let _run_target_args'_v2640 = v2656 
    #endif
    let v2657 : int64 = _run_target_args'_v2640 
    let v2678 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2679 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2657) v2678 
    let v2681 : System.TimeSpan = v2679 |> System.TimeSpan 
    let _run_target_args'_v2583 = v2681 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2685 : US3 = US3_2
    let v2686 : US4 = US4_4(v2685)
    let v2687 : string = $"date_time.get_utc_offset / target: {v2686}"
    let v2688 : System.TimeSpan = failwith<System.TimeSpan> v2687
    let _run_target_args'_v2583 = v2688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2692 : US3 = US3_0
    let v2693 : US4 = US4_5(v2692)
    let v2694 : string = $"date_time.get_utc_offset / target: {v2693}"
    let v2695 : System.TimeSpan = failwith<System.TimeSpan> v2694
    let _run_target_args'_v2583 = v2695 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2699 : US3 = US3_0
    let v2700 : US4 = US4_6(v2699)
    let v2701 : string = $"date_time.get_utc_offset / target: {v2700}"
    let v2702 : System.TimeSpan = failwith<System.TimeSpan> v2701
    let _run_target_args'_v2583 = v2702 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2705 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2710 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2711 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2712 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2711 
    let _run_target_args'_v2710 = v2712 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2714 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2710 = v2714 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2718 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2710 = v2718 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2722 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2710 = v2722 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2726 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2710 = v2726 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2729 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2710 = v2729 
    #endif
#else
    let v2730 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2710 = v2730 
    #endif
    let v2731 : System.TimeZoneInfo = _run_target_args'_v2710 
    let v2740 : (System.DateTime -> System.TimeSpan) = v2705 v2731
    let v2741 : System.TimeSpan = v2740 v1
    let _run_target_args'_v2583 = v2741 
    #endif
#else
    let v2742 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2747 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2748 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2749 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2748 
    let _run_target_args'_v2747 = v2749 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2751 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2747 = v2751 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2755 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2747 = v2755 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2759 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2747 = v2759 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2763 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2747 = v2763 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2766 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2747 = v2766 
    #endif
#else
    let v2767 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2747 = v2767 
    #endif
    let v2768 : System.TimeZoneInfo = _run_target_args'_v2747 
    let v2777 : (System.DateTime -> System.TimeSpan) = v2742 v2768
    let v2778 : System.TimeSpan = v2777 v1
    let _run_target_args'_v2583 = v2778 
    #endif
    let v2779 : System.TimeSpan = _run_target_args'_v2583 
    let v2795 : (System.TimeSpan -> int32) = _.Hours
    let v2796 : int32 = v2795 v2779
    let v2799 : bool = v2796 > 0
    let v2800 : uint8 =
        if v2799 then
            1uy
        else
            0uy
    let v2801 : string = method203()
    (* run_target_args'
    let v2872 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2873 : string = "$0.toString($1)"
    let v2874 : string = Fable.Core.RustInterop.emitRustExpr struct (v2779, v2801) v2873 
    let _run_target_args'_v2872 = v2874 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2875 : string = "$0.toString($1)"
    let v2876 : string = Fable.Core.RustInterop.emitRustExpr struct (v2779, v2801) v2875 
    let _run_target_args'_v2872 = v2876 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2877 : string = "$0.toString($1)"
    let v2878 : string = Fable.Core.RustInterop.emitRustExpr struct (v2779, v2801) v2877 
    let _run_target_args'_v2872 = v2878 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2879 : string = v2779.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2872 = v2879 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2880 : string = v2779.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2872 = v2880 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2882 : string = v2779.ToString v2801 
    let _run_target_args'_v2872 = v2882 
    #endif
#else
    let v2952 : string = v2779.ToString v2801 
    let _run_target_args'_v2872 = v2952 
    #endif
    let v3021 : string = _run_target_args'_v2872 
    let v3162 : string = $"{v2800}{v3021}"
    let v3164 : (System.Guid -> string) = _.ToString()
    let v3165 : string = v3164 v0
    let v3168 : int32 = v2527.Length
    let v3169 : int32 = v3162.Length
    let v3170 : int32 = v3168 + v3169
    let v3172 : (string -> int32) = String.length
    let v3173 : int32 = v3172 v3165
    let v3177 : int32 = 1
    let v3183 : int32 = v3170 |> int32 
    let v3196 : int32 = v3173 |> int32 
    let v3204 : int32 = v3196 - v3177
    let v3206 : string = v3165.[int v3183..int v3204]
    let v3210 : string = $"{v2527}{v3162}{v3206}"
    (* run_target_args'
    let v3215 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3217 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3217 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3221 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3221 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3225 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3215 = v3225 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3229 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3229 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3233 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3233 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3237 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3237 
    #endif
#else
    let v3241 : System.Guid = v3210 |> System.Guid 
    let _run_target_args'_v3215 = v3241 
    #endif
    let v3244 : System.Guid = _run_target_args'_v3215 
    let _run_target_args'_v741 = v3244 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3253 : string = method202()
    let v3264 : bool = v3253 = ""
    let v3266 : string =
        if v3264 then
            let v3265 : string = "M-d-y hh:mm:ss tt"
            v3265
        else
            v3253
    let v3267 : (string -> string) = v1.ToString
    let v3268 : string = v3267 v3266
    (* run_target_args'
    let v3287 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3288 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3289 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3288 
    let _run_target_args'_v3287 = v3289 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3291 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3287 = v3291 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3295 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3287 = v3295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3299 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3287 = v3299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3303 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3287 = v3303 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3306 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3287 = v3306 
    #endif
#else
    let v3307 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3287 = v3307 
    #endif
    let v3308 : System.TimeZoneInfo = _run_target_args'_v3287 
    (* run_target_args'
    let v3324 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3331 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3332 : (System.DateTime -> int64) = _.Ticks
    let v3333 : int64 = v3332 v1
    let _run_target_args'_v3331 = v3333 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3334 : (System.DateTime -> int64) = _.Ticks
    let v3335 : int64 = v3334 v1
    let _run_target_args'_v3331 = v3335 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3337 : int64 = null |> unbox<int64>
    let _run_target_args'_v3331 = v3337 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3340 : (System.DateTime -> int64) = _.Ticks
    let v3341 : int64 = v3340 v1
    let _run_target_args'_v3331 = v3341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3342 : (System.DateTime -> int64) = _.Ticks
    let v3343 : int64 = v3342 v1
    let _run_target_args'_v3331 = v3343 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3344 : (System.DateTime -> int64) = _.Ticks
    let v3345 : int64 = v3344 v1
    let _run_target_args'_v3331 = v3345 
    #endif
#else
    let v3346 : (System.DateTime -> int64) = _.Ticks
    let v3347 : int64 = v3346 v1
    let _run_target_args'_v3331 = v3347 
    #endif
    let v3348 : int64 = _run_target_args'_v3331 
    let v3369 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3370 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3348) v3369 
    let v3372 : System.TimeSpan = v3370 |> System.TimeSpan 
    let _run_target_args'_v3324 = v3372 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3381 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3382 : (System.DateTime -> int64) = _.Ticks
    let v3383 : int64 = v3382 v1
    let _run_target_args'_v3381 = v3383 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3384 : (System.DateTime -> int64) = _.Ticks
    let v3385 : int64 = v3384 v1
    let _run_target_args'_v3381 = v3385 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3387 : int64 = null |> unbox<int64>
    let _run_target_args'_v3381 = v3387 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3390 : (System.DateTime -> int64) = _.Ticks
    let v3391 : int64 = v3390 v1
    let _run_target_args'_v3381 = v3391 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3392 : (System.DateTime -> int64) = _.Ticks
    let v3393 : int64 = v3392 v1
    let _run_target_args'_v3381 = v3393 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3394 : (System.DateTime -> int64) = _.Ticks
    let v3395 : int64 = v3394 v1
    let _run_target_args'_v3381 = v3395 
    #endif
#else
    let v3396 : (System.DateTime -> int64) = _.Ticks
    let v3397 : int64 = v3396 v1
    let _run_target_args'_v3381 = v3397 
    #endif
    let v3398 : int64 = _run_target_args'_v3381 
    let v3419 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3420 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3398) v3419 
    let v3422 : System.TimeSpan = v3420 |> System.TimeSpan 
    let _run_target_args'_v3324 = v3422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3426 : US3 = US3_2
    let v3427 : US4 = US4_4(v3426)
    let v3428 : string = $"date_time.get_utc_offset / target: {v3427}"
    let v3429 : System.TimeSpan = failwith<System.TimeSpan> v3428
    let _run_target_args'_v3324 = v3429 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3433 : US3 = US3_0
    let v3434 : US4 = US4_5(v3433)
    let v3435 : string = $"date_time.get_utc_offset / target: {v3434}"
    let v3436 : System.TimeSpan = failwith<System.TimeSpan> v3435
    let _run_target_args'_v3324 = v3436 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3440 : US3 = US3_0
    let v3441 : US4 = US4_6(v3440)
    let v3442 : string = $"date_time.get_utc_offset / target: {v3441}"
    let v3443 : System.TimeSpan = failwith<System.TimeSpan> v3442
    let _run_target_args'_v3324 = v3443 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3446 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3451 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3452 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3453 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3452 
    let _run_target_args'_v3451 = v3453 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3455 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3451 = v3455 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3459 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3451 = v3459 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3463 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3451 = v3463 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3467 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3451 = v3467 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3470 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3451 = v3470 
    #endif
#else
    let v3471 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3451 = v3471 
    #endif
    let v3472 : System.TimeZoneInfo = _run_target_args'_v3451 
    let v3481 : (System.DateTime -> System.TimeSpan) = v3446 v3472
    let v3482 : System.TimeSpan = v3481 v1
    let _run_target_args'_v3324 = v3482 
    #endif
#else
    let v3483 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3488 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3489 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3490 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3489 
    let _run_target_args'_v3488 = v3490 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3492 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3488 = v3492 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3496 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3488 = v3496 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3500 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3488 = v3500 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3504 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3488 = v3504 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3507 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3488 = v3507 
    #endif
#else
    let v3508 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3488 = v3508 
    #endif
    let v3509 : System.TimeZoneInfo = _run_target_args'_v3488 
    let v3518 : (System.DateTime -> System.TimeSpan) = v3483 v3509
    let v3519 : System.TimeSpan = v3518 v1
    let _run_target_args'_v3324 = v3519 
    #endif
    let v3520 : System.TimeSpan = _run_target_args'_v3324 
    let v3536 : (System.TimeSpan -> int32) = _.Hours
    let v3537 : int32 = v3536 v3520
    let v3540 : bool = v3537 > 0
    let v3541 : uint8 =
        if v3540 then
            1uy
        else
            0uy
    let v3542 : string = method203()
    (* run_target_args'
    let v3613 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3614 : string = "$0.toString($1)"
    let v3615 : string = Fable.Core.RustInterop.emitRustExpr struct (v3520, v3542) v3614 
    let _run_target_args'_v3613 = v3615 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3616 : string = "$0.toString($1)"
    let v3617 : string = Fable.Core.RustInterop.emitRustExpr struct (v3520, v3542) v3616 
    let _run_target_args'_v3613 = v3617 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3618 : string = "$0.toString($1)"
    let v3619 : string = Fable.Core.RustInterop.emitRustExpr struct (v3520, v3542) v3618 
    let _run_target_args'_v3613 = v3619 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3620 : string = v3520.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3613 = v3620 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3621 : string = v3520.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3613 = v3621 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3623 : string = v3520.ToString v3542 
    let _run_target_args'_v3613 = v3623 
    #endif
#else
    let v3693 : string = v3520.ToString v3542 
    let _run_target_args'_v3613 = v3693 
    #endif
    let v3762 : string = _run_target_args'_v3613 
    let v3903 : string = $"{v3541}{v3762}"
    let v3905 : (System.Guid -> string) = _.ToString()
    let v3906 : string = v3905 v0
    let v3909 : int32 = v3268.Length
    let v3910 : int32 = v3903.Length
    let v3911 : int32 = v3909 + v3910
    let v3913 : (string -> int32) = String.length
    let v3914 : int32 = v3913 v3906
    let v3918 : int32 = 1
    let v3924 : int32 = v3911 |> int32 
    let v3937 : int32 = v3914 |> int32 
    let v3945 : int32 = v3937 - v3918
    let v3947 : string = v3906.[int v3924..int v3945]
    let v3951 : string = $"{v3268}{v3903}{v3947}"
    (* run_target_args'
    let v3956 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3958 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3958 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3962 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3962 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3966 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3956 = v3966 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3970 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3970 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3974 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3978 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3978 
    #endif
#else
    let v3982 : System.Guid = v3951 |> System.Guid 
    let _run_target_args'_v3956 = v3982 
    #endif
    let v3985 : System.Guid = _run_target_args'_v3956 
    let _run_target_args'_v741 = v3985 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3994 : string = method202()
    let v4005 : bool = v3994 = ""
    let v4007 : string =
        if v4005 then
            let v4006 : string = "M-d-y hh:mm:ss tt"
            v4006
        else
            v3994
    let v4008 : (string -> string) = v1.ToString
    let v4009 : string = v4008 v4007
    (* run_target_args'
    let v4028 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4029 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4030 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4029 
    let _run_target_args'_v4028 = v4030 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4032 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4028 = v4032 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4036 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4028 = v4036 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4040 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4028 = v4040 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4044 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4028 = v4044 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4047 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4028 = v4047 
    #endif
#else
    let v4048 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4028 = v4048 
    #endif
    let v4049 : System.TimeZoneInfo = _run_target_args'_v4028 
    (* run_target_args'
    let v4065 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4072 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4073 : (System.DateTime -> int64) = _.Ticks
    let v4074 : int64 = v4073 v1
    let _run_target_args'_v4072 = v4074 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4075 : (System.DateTime -> int64) = _.Ticks
    let v4076 : int64 = v4075 v1
    let _run_target_args'_v4072 = v4076 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4078 : int64 = null |> unbox<int64>
    let _run_target_args'_v4072 = v4078 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4081 : (System.DateTime -> int64) = _.Ticks
    let v4082 : int64 = v4081 v1
    let _run_target_args'_v4072 = v4082 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4083 : (System.DateTime -> int64) = _.Ticks
    let v4084 : int64 = v4083 v1
    let _run_target_args'_v4072 = v4084 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4085 : (System.DateTime -> int64) = _.Ticks
    let v4086 : int64 = v4085 v1
    let _run_target_args'_v4072 = v4086 
    #endif
#else
    let v4087 : (System.DateTime -> int64) = _.Ticks
    let v4088 : int64 = v4087 v1
    let _run_target_args'_v4072 = v4088 
    #endif
    let v4089 : int64 = _run_target_args'_v4072 
    let v4110 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4111 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4089) v4110 
    let v4113 : System.TimeSpan = v4111 |> System.TimeSpan 
    let _run_target_args'_v4065 = v4113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4122 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4123 : (System.DateTime -> int64) = _.Ticks
    let v4124 : int64 = v4123 v1
    let _run_target_args'_v4122 = v4124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4125 : (System.DateTime -> int64) = _.Ticks
    let v4126 : int64 = v4125 v1
    let _run_target_args'_v4122 = v4126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4128 : int64 = null |> unbox<int64>
    let _run_target_args'_v4122 = v4128 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4131 : (System.DateTime -> int64) = _.Ticks
    let v4132 : int64 = v4131 v1
    let _run_target_args'_v4122 = v4132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4133 : (System.DateTime -> int64) = _.Ticks
    let v4134 : int64 = v4133 v1
    let _run_target_args'_v4122 = v4134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4135 : (System.DateTime -> int64) = _.Ticks
    let v4136 : int64 = v4135 v1
    let _run_target_args'_v4122 = v4136 
    #endif
#else
    let v4137 : (System.DateTime -> int64) = _.Ticks
    let v4138 : int64 = v4137 v1
    let _run_target_args'_v4122 = v4138 
    #endif
    let v4139 : int64 = _run_target_args'_v4122 
    let v4160 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4161 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4139) v4160 
    let v4163 : System.TimeSpan = v4161 |> System.TimeSpan 
    let _run_target_args'_v4065 = v4163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4167 : US3 = US3_2
    let v4168 : US4 = US4_4(v4167)
    let v4169 : string = $"date_time.get_utc_offset / target: {v4168}"
    let v4170 : System.TimeSpan = failwith<System.TimeSpan> v4169
    let _run_target_args'_v4065 = v4170 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4174 : US3 = US3_0
    let v4175 : US4 = US4_5(v4174)
    let v4176 : string = $"date_time.get_utc_offset / target: {v4175}"
    let v4177 : System.TimeSpan = failwith<System.TimeSpan> v4176
    let _run_target_args'_v4065 = v4177 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4181 : US3 = US3_0
    let v4182 : US4 = US4_6(v4181)
    let v4183 : string = $"date_time.get_utc_offset / target: {v4182}"
    let v4184 : System.TimeSpan = failwith<System.TimeSpan> v4183
    let _run_target_args'_v4065 = v4184 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4187 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4192 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4193 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4194 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4193 
    let _run_target_args'_v4192 = v4194 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4196 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4196 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4200 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4200 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4204 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4204 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4208 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4208 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4211 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4192 = v4211 
    #endif
#else
    let v4212 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4192 = v4212 
    #endif
    let v4213 : System.TimeZoneInfo = _run_target_args'_v4192 
    let v4222 : (System.DateTime -> System.TimeSpan) = v4187 v4213
    let v4223 : System.TimeSpan = v4222 v1
    let _run_target_args'_v4065 = v4223 
    #endif
#else
    let v4224 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4230 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4231 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4230 
    let _run_target_args'_v4229 = v4231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4229 = v4233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4237 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4229 = v4237 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4241 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4229 = v4241 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4245 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4229 = v4245 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4248 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4229 = v4248 
    #endif
#else
    let v4249 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4229 = v4249 
    #endif
    let v4250 : System.TimeZoneInfo = _run_target_args'_v4229 
    let v4259 : (System.DateTime -> System.TimeSpan) = v4224 v4250
    let v4260 : System.TimeSpan = v4259 v1
    let _run_target_args'_v4065 = v4260 
    #endif
    let v4261 : System.TimeSpan = _run_target_args'_v4065 
    let v4277 : (System.TimeSpan -> int32) = _.Hours
    let v4278 : int32 = v4277 v4261
    let v4281 : bool = v4278 > 0
    let v4282 : uint8 =
        if v4281 then
            1uy
        else
            0uy
    let v4283 : string = method203()
    (* run_target_args'
    let v4354 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4355 : string = "$0.toString($1)"
    let v4356 : string = Fable.Core.RustInterop.emitRustExpr struct (v4261, v4283) v4355 
    let _run_target_args'_v4354 = v4356 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4357 : string = "$0.toString($1)"
    let v4358 : string = Fable.Core.RustInterop.emitRustExpr struct (v4261, v4283) v4357 
    let _run_target_args'_v4354 = v4358 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4359 : string = "$0.toString($1)"
    let v4360 : string = Fable.Core.RustInterop.emitRustExpr struct (v4261, v4283) v4359 
    let _run_target_args'_v4354 = v4360 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4361 : string = v4261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4354 = v4361 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4362 : string = v4261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4354 = v4362 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4364 : string = v4261.ToString v4283 
    let _run_target_args'_v4354 = v4364 
    #endif
#else
    let v4434 : string = v4261.ToString v4283 
    let _run_target_args'_v4354 = v4434 
    #endif
    let v4503 : string = _run_target_args'_v4354 
    let v4644 : string = $"{v4282}{v4503}"
    let v4646 : (System.Guid -> string) = _.ToString()
    let v4647 : string = v4646 v0
    let v4650 : int32 = v4009.Length
    let v4651 : int32 = v4644.Length
    let v4652 : int32 = v4650 + v4651
    let v4654 : (string -> int32) = String.length
    let v4655 : int32 = v4654 v4647
    let v4659 : int32 = 1
    let v4665 : int32 = v4652 |> int32 
    let v4678 : int32 = v4655 |> int32 
    let v4686 : int32 = v4678 - v4659
    let v4688 : string = v4647.[int v4665..int v4686]
    let v4692 : string = $"{v4009}{v4644}{v4688}"
    (* run_target_args'
    let v4697 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4699 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4699 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4703 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4703 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4707 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4697 = v4707 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4711 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4711 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4715 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4715 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4719 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4719 
    #endif
#else
    let v4723 : System.Guid = v4692 |> System.Guid 
    let _run_target_args'_v4697 = v4723 
    #endif
    let v4726 : System.Guid = _run_target_args'_v4697 
    let _run_target_args'_v741 = v4726 
    #endif
#else
    let v4735 : string = method202()
    let v4746 : bool = v4735 = ""
    let v4748 : string =
        if v4746 then
            let v4747 : string = "M-d-y hh:mm:ss tt"
            v4747
        else
            v4735
    let v4749 : (string -> string) = v1.ToString
    let v4750 : string = v4749 v4748
    (* run_target_args'
    let v4769 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4770 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4771 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4770 
    let _run_target_args'_v4769 = v4771 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4773 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4769 = v4773 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4777 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4769 = v4777 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4781 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4769 = v4781 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4785 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4769 = v4785 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4788 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4769 = v4788 
    #endif
#else
    let v4789 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4769 = v4789 
    #endif
    let v4790 : System.TimeZoneInfo = _run_target_args'_v4769 
    (* run_target_args'
    let v4806 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4813 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4814 : (System.DateTime -> int64) = _.Ticks
    let v4815 : int64 = v4814 v1
    let _run_target_args'_v4813 = v4815 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4816 : (System.DateTime -> int64) = _.Ticks
    let v4817 : int64 = v4816 v1
    let _run_target_args'_v4813 = v4817 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4819 : int64 = null |> unbox<int64>
    let _run_target_args'_v4813 = v4819 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4822 : (System.DateTime -> int64) = _.Ticks
    let v4823 : int64 = v4822 v1
    let _run_target_args'_v4813 = v4823 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4824 : (System.DateTime -> int64) = _.Ticks
    let v4825 : int64 = v4824 v1
    let _run_target_args'_v4813 = v4825 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4826 : (System.DateTime -> int64) = _.Ticks
    let v4827 : int64 = v4826 v1
    let _run_target_args'_v4813 = v4827 
    #endif
#else
    let v4828 : (System.DateTime -> int64) = _.Ticks
    let v4829 : int64 = v4828 v1
    let _run_target_args'_v4813 = v4829 
    #endif
    let v4830 : int64 = _run_target_args'_v4813 
    let v4851 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4852 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4830) v4851 
    let v4854 : System.TimeSpan = v4852 |> System.TimeSpan 
    let _run_target_args'_v4806 = v4854 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4863 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4864 : (System.DateTime -> int64) = _.Ticks
    let v4865 : int64 = v4864 v1
    let _run_target_args'_v4863 = v4865 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4866 : (System.DateTime -> int64) = _.Ticks
    let v4867 : int64 = v4866 v1
    let _run_target_args'_v4863 = v4867 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4869 : int64 = null |> unbox<int64>
    let _run_target_args'_v4863 = v4869 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4872 : (System.DateTime -> int64) = _.Ticks
    let v4873 : int64 = v4872 v1
    let _run_target_args'_v4863 = v4873 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4874 : (System.DateTime -> int64) = _.Ticks
    let v4875 : int64 = v4874 v1
    let _run_target_args'_v4863 = v4875 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4876 : (System.DateTime -> int64) = _.Ticks
    let v4877 : int64 = v4876 v1
    let _run_target_args'_v4863 = v4877 
    #endif
#else
    let v4878 : (System.DateTime -> int64) = _.Ticks
    let v4879 : int64 = v4878 v1
    let _run_target_args'_v4863 = v4879 
    #endif
    let v4880 : int64 = _run_target_args'_v4863 
    let v4901 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4902 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4880) v4901 
    let v4904 : System.TimeSpan = v4902 |> System.TimeSpan 
    let _run_target_args'_v4806 = v4904 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4908 : US3 = US3_2
    let v4909 : US4 = US4_4(v4908)
    let v4910 : string = $"date_time.get_utc_offset / target: {v4909}"
    let v4911 : System.TimeSpan = failwith<System.TimeSpan> v4910
    let _run_target_args'_v4806 = v4911 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4915 : US3 = US3_0
    let v4916 : US4 = US4_5(v4915)
    let v4917 : string = $"date_time.get_utc_offset / target: {v4916}"
    let v4918 : System.TimeSpan = failwith<System.TimeSpan> v4917
    let _run_target_args'_v4806 = v4918 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4922 : US3 = US3_0
    let v4923 : US4 = US4_6(v4922)
    let v4924 : string = $"date_time.get_utc_offset / target: {v4923}"
    let v4925 : System.TimeSpan = failwith<System.TimeSpan> v4924
    let _run_target_args'_v4806 = v4925 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4928 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4933 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4934 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4935 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4934 
    let _run_target_args'_v4933 = v4935 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4937 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4933 = v4937 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4941 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4933 = v4941 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4945 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4933 = v4945 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4949 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4933 = v4949 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4952 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4933 = v4952 
    #endif
#else
    let v4953 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4933 = v4953 
    #endif
    let v4954 : System.TimeZoneInfo = _run_target_args'_v4933 
    let v4963 : (System.DateTime -> System.TimeSpan) = v4928 v4954
    let v4964 : System.TimeSpan = v4963 v1
    let _run_target_args'_v4806 = v4964 
    #endif
#else
    let v4965 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4970 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4971 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4972 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4971 
    let _run_target_args'_v4970 = v4972 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4974 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4970 = v4974 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4978 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4970 = v4978 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4982 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4970 = v4982 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4986 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4970 = v4986 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4989 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4970 = v4989 
    #endif
#else
    let v4990 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4970 = v4990 
    #endif
    let v4991 : System.TimeZoneInfo = _run_target_args'_v4970 
    let v5000 : (System.DateTime -> System.TimeSpan) = v4965 v4991
    let v5001 : System.TimeSpan = v5000 v1
    let _run_target_args'_v4806 = v5001 
    #endif
    let v5002 : System.TimeSpan = _run_target_args'_v4806 
    let v5018 : (System.TimeSpan -> int32) = _.Hours
    let v5019 : int32 = v5018 v5002
    let v5022 : bool = v5019 > 0
    let v5023 : uint8 =
        if v5022 then
            1uy
        else
            0uy
    let v5024 : string = method203()
    (* run_target_args'
    let v5095 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5096 : string = "$0.toString($1)"
    let v5097 : string = Fable.Core.RustInterop.emitRustExpr struct (v5002, v5024) v5096 
    let _run_target_args'_v5095 = v5097 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5098 : string = "$0.toString($1)"
    let v5099 : string = Fable.Core.RustInterop.emitRustExpr struct (v5002, v5024) v5098 
    let _run_target_args'_v5095 = v5099 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5100 : string = "$0.toString($1)"
    let v5101 : string = Fable.Core.RustInterop.emitRustExpr struct (v5002, v5024) v5100 
    let _run_target_args'_v5095 = v5101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5102 : string = v5002.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v5095 = v5102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5103 : string = v5002.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v5095 = v5103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5105 : string = v5002.ToString v5024 
    let _run_target_args'_v5095 = v5105 
    #endif
#else
    let v5175 : string = v5002.ToString v5024 
    let _run_target_args'_v5095 = v5175 
    #endif
    let v5244 : string = _run_target_args'_v5095 
    let v5385 : string = $"{v5023}{v5244}"
    let v5387 : (System.Guid -> string) = _.ToString()
    let v5388 : string = v5387 v0
    let v5391 : int32 = v4750.Length
    let v5392 : int32 = v5385.Length
    let v5393 : int32 = v5391 + v5392
    let v5395 : (string -> int32) = String.length
    let v5396 : int32 = v5395 v5388
    let v5400 : int32 = 1
    let v5406 : int32 = v5393 |> int32 
    let v5419 : int32 = v5396 |> int32 
    let v5427 : int32 = v5419 - v5400
    let v5429 : string = v5388.[int v5406..int v5427]
    let v5433 : string = $"{v4750}{v5385}{v5429}"
    (* run_target_args'
    let v5438 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5440 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5440 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5444 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5448 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v5438 = v5448 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5452 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5452 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5456 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5456 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5460 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5460 
    #endif
#else
    let v5464 : System.Guid = v5433 |> System.Guid 
    let _run_target_args'_v5438 = v5464 
    #endif
    let v5467 : System.Guid = _run_target_args'_v5438 
    let _run_target_args'_v741 = v5467 
    #endif
    let v5476 : System.Guid = _run_target_args'_v741 
    v5476
and method204 (v0 : string, v1 : string) : unit =
    let v2 : bool = method36(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method78(v0)
        ()
    let v5 : string option = method38(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method36(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method78(v9)
        ()
    let v15 : bool = method36(v1)
    let v25 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method44(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v25 then
        let v26 : bool = true
        method71(v26, v1)
    let v27 : bool = method36(v1)
    let v28 : bool = v27 = false
    if v28 then
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v31 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v30 
        let v32 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v33 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v32 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v34 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method206 () : string =
    let v0 : string = "("
    v0
and method207 () : string =
    let v0 : string = " "
    v0
and method208 (v0 : US41) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v24 : string = v2.l0
    v24
and method212 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "is_error"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v65 : string =
        if v0 then
            let v63 : string = "true"
            v63
        else
            let v64 : string = "false"
            v64
    let v67 : string = $"{v65}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "retry"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "result"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v212 : string = $"{v2}"
    let v220 : unit = ()
    let v221 : (unit -> unit) = closure7(v5, v212)
    let v222 : unit = (fun () -> v221 (); v220) ()
    let v230 : string = ", "
    let v231 : string = $"{v230}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v3}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v266 : string = " }"
    let v267 : string = $"{v266}"
    let v275 : unit = ()
    let v276 : (unit -> unit) = closure7(v5, v267)
    let v277 : unit = (fun () -> v276 (); v275) ()
    let v283 : string = v5.l0
    v283
and method211 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method212(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "common.retry_fn' / 루프"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure82 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 1 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method11()
            let v128 : string = $"{v1}/{v0}"
            let v129 : string = method211(v108, v109, v110, v111, v112, v113, v126, v127, v4, v128, v2, v3)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method210 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : bool, v9 : uint8) : struct (int32 * string) =
    let struct (v10 : int32, v11 : string) = method90(v1, v2, v3, v4, v5, v6, v7, v8)
    let v12 : bool = v10 = 0
    let v15 : US45 =
        if v12 then
            US45_0(v10, v11)
        else
            US45_1(v10, v11)
    let struct (v23 : bool, v24 : int32, v25 : string) =
        match v15 with
        | US45_1(v18, v19) -> (* Error *)
            struct (true, v18, v19)
        | US45_0(v16, v17) -> (* Ok *)
            struct (false, v16, v17)
    let v26 : bool = v23 = false
    let v28 : bool =
        if v26 then
            true
        else
            let v27 : bool = v9 >= v0
            v27
    if v28 then
        struct (v24, v25)
    else
        let v341 : unit = ()
        let v342 : (unit -> unit) = closure82(v0, v9, v24, v25, v23)
        let v343 : unit = (fun () -> v342 (); v341) ()
        let v659 : uint8 = v9 + 1uy
        method210(v0, v1, v2, v3, v4, v5, v6, v7, v8, v659)
and method209 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : bool) : struct (int32 * string) =
    let v9 : uint8 = 1uy
    method210(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9)
and method205 (v0 : US40, v1 : string, v2 : string, v3 : string, v4 : US14) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v23 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "cfg!(windows)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let _run_target_args'_v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "cfg!(windows)"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let _run_target_args'_v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "cfg!(windows)"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let _run_target_args'_v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : US3 = US3_0
    let v31 : US4 = US4_5(v30)
    let v32 : string = $"platform.is_windows / target: {v31}"
    let v33 : bool = failwith<bool> v32
    let _run_target_args'_v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : US3 = US3_0
    let v35 : US4 = US4_6(v34)
    let v36 : string = $"platform.is_windows / target: {v35}"
    let v37 : bool = failwith<bool> v36
    let _run_target_args'_v23 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v39 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v40 : bool = v39 v38
    let _run_target_args'_v23 = v40 
    #endif
#else
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v23 = v43 
    #endif
    let v44 : bool = _run_target_args'_v23 
    let v55 : string =
        if v44 then
            let v53 : string = "_WINDOWS"
            v53
        else
            let v54 : string = "_LINUX"
            v54
    let v56 : string = $" --define {v55}"
    let v178 : string =
        match v0 with
        | US40_1 -> (* None *)
            let v176 : string = ""
            v176
        | US40_0(v57) -> (* Some *)
            let v59 : string = Unchecked.defaultof<_>
            let v63 : string = Unchecked.defaultof<_>
            let v68 : bool =
                match v57 with
                | US41_0(v66) -> (* Wasm *)
                    let v67 : bool = v59 = v66
                    v67
                | _ ->
                    false
            let v112 : US5 =
                if v68 then
                    let v69 : string = "Wasm"
                    US5_0(v69)
                else
                    (* run_target_args'
                    let v73 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v74 : string = method206()
                    let _run_target_args'_v73 = v74 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : string = method206()
                    let _run_target_args'_v73 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : string = method206()
                    let _run_target_args'_v73 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v77 : string = method207()
                    let _run_target_args'_v73 = v77 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v78 : string = method207()
                    let _run_target_args'_v73 = v78 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v79 : string = method207()
                    let _run_target_args'_v73 = v79 
                    #endif
#else
                    let v80 : string = method207()
                    let _run_target_args'_v73 = v80 
                    #endif
                    let v81 : string = _run_target_args'_v73 
                    let v85 : US41 = US41_0(v59)
                    let v86 : string = method208(v85)
                    let v96 : (string []) = v86.Split v81 
                    let v100 : string = v96.[int 0]
                    let v103 : string = method208(v57)
                    let v105 : bool = v103.StartsWith (v100, false, null)
                    if v105 then
                        let v108 : string = "Wasm"
                        US5_0(v108)
                    else
                        US5_1
            let v168 : US5 =
                match v112 with
                | US5_1 -> (* None *)
                    let v117 : bool =
                        match v57 with
                        | US41_1(v115) -> (* Contract *)
                            let v116 : bool = v63 = v115
                            v116
                        | _ ->
                            false
                    let v161 : US5 =
                        if v117 then
                            let v118 : string = "Contract"
                            US5_0(v118)
                        else
                            (* run_target_args'
                            let v122 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v123 : string = method206()
                            let _run_target_args'_v122 = v123 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v124 : string = method206()
                            let _run_target_args'_v122 = v124 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v125 : string = method206()
                            let _run_target_args'_v122 = v125 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v126 : string = method207()
                            let _run_target_args'_v122 = v126 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v127 : string = method207()
                            let _run_target_args'_v122 = v127 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v128 : string = method207()
                            let _run_target_args'_v122 = v128 
                            #endif
#else
                            let v129 : string = method207()
                            let _run_target_args'_v122 = v129 
                            #endif
                            let v130 : string = _run_target_args'_v122 
                            let v134 : US41 = US41_1(v63)
                            let v135 : string = method208(v134)
                            let v145 : (string []) = v135.Split v130 
                            let v149 : string = v145.[int 0]
                            let v152 : string = method208(v57)
                            let v154 : bool = v152.StartsWith (v149, false, null)
                            if v154 then
                                let v157 : string = "Contract"
                                US5_0(v157)
                            else
                                US5_1
                    match v161 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v162) -> (* Some *)
                        US5_0(v162)
                | US5_0(v113) -> (* Some *)
                    US5_0(v113)
            let v172 : string =
                match v168 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v169) -> (* Some *)
                    v169
            let v173 : (unit -> string) = v172.ToUpper
            let v174 : string = v173 ()
            let v175 : string = $" --define {v174}"
            v175
    let v179 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v56}{v178}"
    let v191 : Result<string, string> =
        match v4 with
        | US14_1(v185) -> (* Error *)
            let v187 : Result<string, string> = Error v185 
            v187
        | US14_0(v180) -> (* Ok *)
            let v182 : Result<string, string> = Ok v180 
            v182
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.ok()"
    let v195 : string option = Fable.Core.RustInterop.emitRustExpr v191 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.ok()"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr v191 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.ok()"
    let v199 : string option = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v200 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v200 
    #endif
#if FABLE_COMPILER_PYTHON
    let v201 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v201 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v202 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v202 
    #endif
#else
    let v203 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v203 
    #endif
    let v204 : string option = _run_target_args'_v193 
    let v207 : uint8 = 3uy
    let v208 : bool = true
    let v209 : bool = true
    method209(v207, v179, v6, v9, v11, v15, v208, v204, v209)
and method214 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "dotnet_fable_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method213 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method214(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / dotnet fable error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure83 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method213(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure84 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method215 () : (std_string_String -> bool) =
    closure84()
and method216 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method217 () : string =
    let v0 : string = "("
    v0
and method218 () : string =
    let v0 : string = "("
    v0
and method220 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v58 
    #endif
#else
    let v62 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v62 
    #endif
    let v65 : std_string_String = _run_target_args'_v42 
    let v74 : string = "true; let _capture_move = (move || { //"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "Box::new($0)"
    let v77 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v65 v76 
    let v78 : string = "Box::leak($0)"
    let v79 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "$0"
    let v81 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = $"$0.captures_iter(v79)"
    let v83 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "true; let _regex_captures : Vec<_> = v83.map(|x| { //"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = $"x"
    let v87 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "Box::new($0)"
    let v89 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "Box::leak($0)"
    let v91 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = $"$0.capture_names()"
    let v93 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v92 
    let v94 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v93.map(|x| { //"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "x.unwrap_or(\"\").to_string().into()"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : string = "$0.clone()"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = $"v91.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v103 : (string * string) = v99, v101 
    let v106 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    let v108 : string = "_regex_captures"
    let v109 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "true; $0 }).collect::<Vec<_>>()"
    let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "_regex_captures"
    let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "true; $0 })()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = "_capture_move"
    let v117 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v116 
    v117
and closure85 () (v0 : std_collections_HashMap<string, string>) : US46 =
    US46_0(v0)
and method221 () : (std_collections_HashMap<string, string> -> US46) =
    closure85()
and method222 () : string =
    let v0 : string = "a"
    v0
and closure86 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method11()
            let v127 : string = $"{v0}/{3uy}"
            let v128 : string = method211(v107, v108, v109, v110, v111, v112, v125, v126, v3, v127, v1, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method219 (v0 : US14, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US14_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US14_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let v49 : bool = true
    let struct (v50 : int32, v51 : string) = method90(v20, v4, v7, v9, v13, v48, v45, v49)
    let v54 : string = "failed to load manifest for workspace member"
    let v55 : bool = v51.Contains v54 
    let v58 : bool = v55 = false
    let v275 : US45 =
        if v58 then
            let v59 : bool = v50 = 0
            if v59 then
                US45_0(v50, v51)
            else
                US45_1(v50, v51)
        else
            let v63 : string = $"regex::Regex::new(&$0)"
            let v64 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v65 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v64 v63 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "$0.unwrap()"
            let v69 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "$0.unwrap()"
            let v71 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "$0.unwrap()"
            let v73 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v74 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v74 
            #endif
#if FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v75 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v76 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v76 
            #endif
#else
            let v77 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v77 
            #endif
            let v78 : regex_Regex = _run_target_args'_v67 
            let v81 : Vec<std_collections_HashMap<string, string>> = method220(v51, v78)
            let v82 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v83 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v81 v82 
            let v84 : std_collections_HashMap<string, string> option = v83 |> Array.tryItem 0 
            let v87 : (std_collections_HashMap<string, string> -> US46) = method221()
            let v88 : US46 option = v84 |> Option.map v87 
            let v108 : US46 = US46_1
            let v109 : US46 = v88 |> Option.defaultValue v108 
            let v148 : US35 =
                match v109 with
                | US46_1 -> (* None *)
                    US35_1
                | US46_0(v113) -> (* Some *)
                    let v114 : string = method222()
                    let v115 : string = "std::collections::HashMap::get(&$0, &v114).map(|x| x).cloned()"
                    let v116 : string option = Fable.Core.RustInterop.emitRustExpr v113 v115 
                    let v119 : (string -> US5) = method6()
                    let v120 : US5 option = v116 |> Option.map v119 
                    let v140 : US5 = US5_1
                    let v141 : US5 = v120 |> Option.defaultValue v140 
                    US35_0(v141)
            let v155 : US5 =
                match v148 with
                | US35_0(v149) -> (* Some *)
                    match v149 with
                    | US5_0(v150) -> (* Some *)
                        US5_0(v150)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v155 with
            | US5_1 -> (* None *)
                US45_1(v50, v51)
            | US5_0(v157) -> (* Some *)
                let v158 : bool = method35(v157)
                let v159 : bool = v158 = false
                if v159 then
                    let v160 : string option = method38(v157)
                    let v163 : string = ""
                    let v164 : string = v160 |> Option.defaultValue v163 
                    let v167 : System.IDisposable = method78(v164)
                    (* run_target_args'
                    let v174 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v175 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v175 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v176 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v176 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v178 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v174 = v178 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v181 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v181 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v182 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v182 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v183 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v183 
                    #endif
#else
                    let v184 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v184 
                    #endif
                    let v185 : System.DateTime = _run_target_args'_v174 
                    let v191 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v192 : System.Guid = v191 ()
                    let v195 : System.Guid = method199(v192, v185)
                    let v197 : (System.Guid -> string) = _.ToString()
                    let v198 : string = v197 v195
                    let v201 : string = $"[package]"
                    let v202 : string = $"name = \"spiral_{v198}\""
                    let v205 : string = "\n"
                    let v206 : string = v201 + v205 
                    let v210 : string = v206 + v202 
                    let v213 : string = $"version = \"0.0.1\""
                    let v215 : string = v210 + v205 
                    let v219 : string = v215 + v213 
                    let v222 : string = $"edition = \"2021\""
                    let v224 : string = v219 + v205 
                    let v228 : string = v224 + v222 
                    let v231 : string = $""
                    let v233 : string = v228 + v205 
                    let v237 : string = v233 + v231 
                    let v240 : string = $"[[bin]]"
                    let v242 : string = v237 + v205 
                    let v246 : string = v242 + v240 
                    let v249 : string = $"name = \"spiral_{v198}\""
                    let v251 : string = v246 + v205 
                    let v255 : string = v251 + v249 
                    let v258 : string = $"path = \"spiral.rs\""
                    let v260 : string = v255 + v205 
                    let v264 : string = v260 + v258 
                    (* run_target_args'
                    let v267 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v268 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v157, v264) v268 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v157, v264)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v269 : bool = v50 = 0
                if v269 then
                    US45_0(v50, v51)
                else
                    US45_1(v50, v51)
    let struct (v283 : bool, v284 : int32, v285 : string) =
        match v275 with
        | US45_1(v278, v279) -> (* Error *)
            struct (true, v278, v279)
        | US45_0(v276, v277) -> (* Ok *)
            struct (false, v276, v277)
    let v286 : bool = v283 = false
    let v288 : bool =
        if v286 then
            true
        else
            let v287 : bool = v2 >= 3uy
            v287
    if v288 then
        struct (v284, v285)
    else
        let v601 : unit = ()
        let v602 : (unit -> unit) = closure86(v2, v284, v285, v283)
        let v603 : unit = (fun () -> v602 (); v601) ()
        let v919 : uint8 = v2 + 1uy
        method219(v0, v1, v919)
and method224 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "cargo_fmt_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method223 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method224(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / cargo fmt error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure87 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method223(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method225 () : string =
    let v0 : string = "{"
    v0
and closure88 () (v0 : string) : string =
    v0
and closure89 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure90 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method227 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "external_command"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "cargo_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method226 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method227(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method16(v57)
and closure91 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v302 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method82()
            let v128 : string = method226(v108, v109, v110, v111, v112, v113, v126, v127, v3, v1, v4, v0, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v20 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and closure93 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure92 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v15 : (string -> bool) = closure93()
    let v16 : (string []) = v12 |> Array.skipWhile v15 
    let v17 : (string []) = v16 |> Array.skip 2 
    let v19 : string seq = v17 |> Seq.ofArray
    let v23 : string = method75()
    let v24 : (string -> (string seq -> string)) = String.concat
    let v25 : (string seq -> string) = v24 v23
    v25 v19
and method229 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "cargo_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method228 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method229(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_rust / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure95 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method228(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure94 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure95(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method231 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "cargo_result"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "spiral_wasm_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method230 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method231(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / wasm error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method16(v57)
and closure96 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method82()
            let v128 : string = $"\n{v3}"
            let v129 : string = method230(v108, v109, v110, v111, v112, v113, v126, v127, v4, v1, v2, v0, v128)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method233 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method13()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v10 : string = "{ "
    let v11 : string = $"{v10}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v7, v11)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v29 : string = "exit_code"
    let v30 : string = $"{v29}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v30)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v48 : string = " = "
    let v49 : string = $"{v48}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v7, v49)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v69 : string = $"{v0}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v7, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v7, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v106 : string = "new_code_path"
    let v107 : string = $"{v106}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v7, v107)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v124 : string = $"{v48}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v7, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v7, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v87}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v7, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "wasm_path"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v7, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v48}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v7, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v211 : string = $"{v2}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v7, v211)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v228 : string = $"{v87}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v7, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v246 : string = "command"
    let v247 : string = $"{v246}"
    let v255 : unit = ()
    let v256 : (unit -> unit) = closure7(v7, v247)
    let v257 : unit = (fun () -> v256 (); v255) ()
    let v264 : string = $"{v48}"
    let v272 : unit = ()
    let v273 : (unit -> unit) = closure7(v7, v264)
    let v274 : unit = (fun () -> v273 (); v272) ()
    let v281 : string = $"{v3}"
    let v289 : unit = ()
    let v290 : (unit -> unit) = closure7(v7, v281)
    let v291 : unit = (fun () -> v290 (); v289) ()
    let v298 : string = $"{v87}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v7, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v316 : string = "cleanup"
    let v317 : string = $"{v316}"
    let v325 : unit = ()
    let v326 : (unit -> unit) = closure7(v7, v317)
    let v327 : unit = (fun () -> v326 (); v325) ()
    let v334 : string = $"{v48}"
    let v342 : unit = ()
    let v343 : (unit -> unit) = closure7(v7, v334)
    let v344 : unit = (fun () -> v343 (); v342) ()
    let v352 : string =
        if v4 then
            let v350 : string = "true"
            v350
        else
            let v351 : string = "false"
            v351
    let v354 : string = $"{v352}"
    let v362 : unit = ()
    let v363 : (unit -> unit) = closure7(v7, v354)
    let v364 : unit = (fun () -> v363 (); v362) ()
    let v371 : string = $"{v87}"
    let v379 : unit = ()
    let v380 : (unit -> unit) = closure7(v7, v371)
    let v381 : unit = (fun () -> v380 (); v379) ()
    let v389 : string = "cargo_result"
    let v390 : string = $"{v389}"
    let v398 : unit = ()
    let v399 : (unit -> unit) = closure7(v7, v390)
    let v400 : unit = (fun () -> v399 (); v398) ()
    let v407 : string = $"{v48}"
    let v415 : unit = ()
    let v416 : (unit -> unit) = closure7(v7, v407)
    let v417 : unit = (fun () -> v416 (); v415) ()
    let v424 : string = $"{v5}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v7, v424)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v442 : string = " }"
    let v443 : string = $"{v442}"
    let v451 : unit = ()
    let v452 : (unit -> unit) = closure7(v7, v443)
    let v453 : unit = (fun () -> v452 (); v451) ()
    let v459 : string = v7.l0
    v459
and method232 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method233(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v18 : string = " "
    let v19 : string = v6 + v18 
    let v23 : string = v19 + v7 
    let v28 : string = " #"
    let v29 : string = v23 + v28 
    let v33 : (int64 -> string) = _.ToString()
    let v34 : string = v33 v15
    let v38 : string = v29 + v34 
    let v42 : string = v38 + v18 
    let v47 : string = "spiral.process_rust / cargo error"
    let v48 : string = v42 + v47 
    let v53 : string = " / "
    let v54 : string = v48 + v53 
    let v58 : string = v54 + v14 
    method16(v58)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure2()
    let v22 : unit = (fun () -> v21 (); v20) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : Mut4, v50 : int64 option) = TraceState.trace_state.Value
    let v63 : US0 = v49.l0
    let v64 : bool = v47.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    let v69 : bool = v68 = false
    let v304 : US6 =
        if v69 then
            US6_1
        else
            let v85 : unit = ()
            let v86 : unit = (fun () -> v21 (); v85) ()
            let struct (v109 : Mut0, v110 : Mut1, v111 : Mut2, v112 : Mut3, v113 : Mut4, v114 : int64 option) = TraceState.trace_state.Value
            let v127 : string = method7(v109, v110, v111, v112, v113, v114)
            let v128 : string = method82()
            let v129 : string = $"\n{v2}"
            let v130 : string = method232(v109, v110, v111, v112, v113, v114, v127, v128, v3, v1, v4, v5, v0, v129)
            let v145 : unit = ()
            let v146 : unit = (fun () -> v21 (); v145) ()
            let struct (v169 : Mut0, v170 : Mut1, v171 : Mut2, v172 : Mut3, v173 : Mut4, v174 : int64 option) = TraceState.trace_state.Value
            let v189 : unit = ()
            let v190 : (unit -> unit) = closure8(v169)
            let v191 : unit = (fun () -> v190 (); v189) ()
            let v194 : (string -> unit) = closure9()
            (* run_target_args'
            let v195 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v196 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v197 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v197 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v198 : string = v172.l0
            let v199 : bool = v198 = ""
            let v214 : string =
                if v199 then
                    v130
                else
                    let v200 : bool = v130 = ""
                    if v200 then
                        let v201 : string = v172.l0
                        v201
                    else
                        let v202 : string = v172.l0
                        let v205 : string = "\n"
                        let v206 : string = v202 + v205 
                        let v210 : string = v206 + v130 
                        v210
            (* run_target_args'
            let v219 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v220 
            let _run_target_args'_v219 = v221 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v222 
            let _run_target_args'_v219 = v223 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v224 
            let _run_target_args'_v219 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v227 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v227 
            #endif
#if FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v231 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v235 
            #endif
#else
            let v239 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v239 
            #endif
            let v242 : Ref<Str> = _run_target_args'_v219 
            let v251 : string = $"$0.chars()"
            let v252 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v242 v251 
            let v253 : string = "$0"
            let v254 : _ = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.collect::<Vec<_>>()"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v258 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "x"
            let v262 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "String::from_iter($0)"
            let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "true; $0 }).collect::<Vec<_>>()"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "_vec_map"
            let v268 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "$0.len()"
            let v270 : unativeint = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v276 : int32 = v270 |> int32 
            let v286 : string = ""
            let v287 : bool = v130 <> v286 
            let v291 : bool =
                if v287 then
                    let v290 : bool = v276 <= 1
                    v290
                else
                    false
            if v291 then
                v172.l0 <- v214
                ()
            else
                v172.l0 <- v286
                let v292 : string = "true; $0.into_iter().for_each(|x| { //"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v268 v292 
                let v294 : string = "x"
                let v295 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v295 v296 
                let v298 : string = $"true"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = "true; }); //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr () v300 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v194 v130
            #endif
#if FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#else
            v194 v130
            #endif
            // run_target_args' is_unit
            let v302 : (string -> unit) = v170.l0
            v302 v130
            US6_0(v169, v170, v171, v172, v173, v174)
    
    ()
and method235 (v0 : string, v1 : UH5) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "new_code_path"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "cleanup"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"%A{v1}"
    let v138 : string = $"{v134}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v3, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v156 : string = " }"
    let v157 : string = $"{v156}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v3, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v173 : string = v3.l0
    v173
and method234 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method235(v8, v24)
    let v26 : int64 = v0.l0
    let v29 : string = " "
    let v30 : string = v6 + v29 
    let v34 : string = v30 + v7 
    let v39 : string = " #"
    let v40 : string = v34 + v39 
    let v44 : (int64 -> string) = _.ToString()
    let v45 : string = v44 v26
    let v49 : string = v40 + v45 
    let v53 : string = v49 + v29 
    let v58 : string = "spiral.process_rust / cleanup"
    let v59 : string = v53 + v58 
    let v64 : string = " / "
    let v65 : string = v59 + v64 
    let v69 : string = v65 + v25 
    method16(v69)
and closure98 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    let v74 : bool = v73 = false
    let v308 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method85()
            let v134 : string = method234(v114, v115, v116, v117, v118, v119, v132, v133, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
            let v149 : unit = ()
            let v150 : unit = (fun () -> v26 (); v149) ()
            let struct (v173 : Mut0, v174 : Mut1, v175 : Mut2, v176 : Mut3, v177 : Mut4, v178 : int64 option) = TraceState.trace_state.Value
            let v193 : unit = ()
            let v194 : (unit -> unit) = closure8(v173)
            let v195 : unit = (fun () -> v194 (); v193) ()
            let v198 : (string -> unit) = closure9()
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v200 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v201 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v201 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v202 : string = v176.l0
            let v203 : bool = v202 = ""
            let v218 : string =
                if v203 then
                    v134
                else
                    let v204 : bool = v134 = ""
                    if v204 then
                        let v205 : string = v176.l0
                        v205
                    else
                        let v206 : string = v176.l0
                        let v209 : string = "\n"
                        let v210 : string = v206 + v209 
                        let v214 : string = v210 + v134 
                        v214
            (* run_target_args'
            let v223 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v224 
            let _run_target_args'_v223 = v225 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v223 = v227 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v223 = v229 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v239 
            #endif
#else
            let v243 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v243 
            #endif
            let v246 : Ref<Str> = _run_target_args'_v223 
            let v255 : string = $"$0.chars()"
            let v256 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v246 v255 
            let v257 : string = "$0"
            let v258 : _ = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "$0.collect::<Vec<_>>()"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v262 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "x"
            let v266 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "String::from_iter($0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "true; $0 }).collect::<Vec<_>>()"
            let v270 : bool = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v271 : string = "_vec_map"
            let v272 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "$0.len()"
            let v274 : unativeint = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v280 : int32 = v274 |> int32 
            let v290 : string = ""
            let v291 : bool = v134 <> v290 
            let v295 : bool =
                if v291 then
                    let v294 : bool = v280 <= 1
                    v294
                else
                    false
            if v295 then
                v176.l0 <- v218
                ()
            else
                v176.l0 <- v290
                let v296 : string = "true; $0.into_iter().for_each(|x| { //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v272 v296 
                let v298 : string = "x"
                let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
                let v302 : string = $"true"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = "true; }); //"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v198 v134
            #endif
#if FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#else
            v198 v134
            #endif
            // run_target_args' is_unit
            let v306 : (string -> unit) = v174.l0
            v306 v134
            US6_0(v173, v174, v175, v176, v177, v178)
    
    ()
and method236 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method46()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US39) = method185()
        let v24 : (string -> US39) = method186()
        let v26 : US39 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US39_1(v29) -> (* Error *)
            let v341 : unit = ()
            let v342 : (unit -> unit) = closure79(v29)
            let v343 : unit = (fun () -> v342 (); v341) ()
            ()
        | US39_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v658 : (string -> unit) = System.IO.File.Delete
        v658 v1
        #endif
        // run_target_args' is_unit
        method236(v3)
    | UH5_0 -> (* Nil *)
        ()
and method237 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "extension"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "code"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method238 (v0 : string) : string =
    v0
and closure100 () (v0 : std_fs_FileType) : US47 =
    US47_0(v0)
and method239 () : (std_fs_FileType -> US47) =
    closure100()
and closure101 () (v0 : std_string_String) : US47 =
    US47_1(v0)
and method240 () : (std_string_String -> US47) =
    closure101()
and method241 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v209 : string = null |> unbox<string>
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v213 : string = null |> unbox<string>
    let _run_target_args'_v5 = v213 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : (string -> string) = System.IO.Path.GetDirectoryName
    let v217 : string = v216 v0
    let _run_target_args'_v5 = v217 
    #endif
#else
    let v218 : (string -> string) = System.IO.Path.GetDirectoryName
    let v219 : string = v218 v0
    let _run_target_args'_v5 = v219 
    #endif
    let v220 : string = _run_target_args'_v5 
    v220
and closure99 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US47) = method239()
    let v37 : (std_string_String -> US47) = method240()
    let v39 : US47 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v296 : US48 =
        match v39 with
        | US47_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US48_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v89 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90 : string = "format!(\"{}\", $0)"
                let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v90 
                let _run_target_args'_v89 = v91 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v92 : string = "format!(\"{}\", $0)"
                let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v92 
                let _run_target_args'_v89 = v93 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94 : string = "format!(\"{}\", $0)"
                let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v94 
                let _run_target_args'_v89 = v95 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v97 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v97 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v105 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v105 
                #endif
#else
                let v109 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v109 
                #endif
                let v112 : std_string_String = _run_target_args'_v89 
                let v121 : string = "fable_library_rust::String_::fromString($0)"
                let v122 : string = Fable.Core.RustInterop.emitRustExpr v112 v121 
                let v123 : string = method241(v122)
                let v125 : bool = v123.StartsWith (v0, false, null)
                let v128 : bool = v125 = false
                if v128 then
                    US48_1
                else
                    let v130 : string option = method38(v122)
                    let v133 : (string -> US5) = method6()
                    let v134 : US5 option = v130 |> Option.map v133 
                    let v154 : US5 = US5_1
                    let v155 : US5 = v134 |> Option.defaultValue v154 
                    match v155 with
                    | US5_0(v159) -> (* Some *)
                        let v161 : bool = v159.Contains v0 
                        let v164 : bool = v161 = false
                        if v164 then
                            US48_2
                        else
                            US48_1
                    | _ ->
                        US48_1
        | _ ->
            let v172 : string = "async_walkdir::DirEntry::path(&$0)"
            let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v172 
            (* run_target_args'
            let v178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v179 : string = "$0.display()"
            let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
            let _run_target_args'_v178 = v180 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v181 : string = "$0.display()"
            let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
            let _run_target_args'_v178 = v182 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
            let _run_target_args'_v178 = v184 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v186 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v186 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v194 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v194 
            #endif
#else
            let v198 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v198 
            #endif
            let v201 : std_path_Display = _run_target_args'_v178 
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "format!(\"{}\", $0)"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "format!(\"{}\", $0)"
            let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "format!(\"{}\", $0)"
            let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : std_string_String = _run_target_args'_v214 
            let v246 : string = "fable_library_rust::String_::fromString($0)"
            let v247 : string = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = method241(v247)
            let v250 : bool = v248.StartsWith (v0, false, null)
            let v253 : bool = v250 = false
            if v253 then
                US48_1
            else
                let v255 : string option = method38(v247)
                let v258 : (string -> US5) = method6()
                let v259 : US5 option = v255 |> Option.map v258 
                let v279 : US5 = US5_1
                let v280 : US5 = v259 |> Option.defaultValue v279 
                match v280 with
                | US5_0(v284) -> (* Some *)
                    let v286 : bool = v284.Contains v0 
                    let v289 : bool = v286 = false
                    if v289 then
                        US48_2
                    else
                        US48_1
                | _ ->
                    US48_1
    let v297 : string = ""
    let v298 : string = "}"
    let v299 : string = v297 + v298 
    let x = v296 //
    let v300 : _ = x
    let v301 : unit = ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = $"true; let _fix_closure_v301 = $0"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v300 v303 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : string = $"true; let _fix_closure_v301 = $0"
    let v306 : bool = Fable.Core.RustInterop.emitRustExpr v300 v305 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v307 : string = $"true; let _fix_closure_v301 = $0"
    let v308 : bool = Fable.Core.RustInterop.emitRustExpr v300 v307 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v302 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#else
    let _run_target_args'_v302 = false 
    #endif
    let v309 : bool = _run_target_args'_v302 
    let v310 : string = $"true; _fix_closure_v301 " + v299 + "); " + v297 + " // rust.fix_closure'"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "__future_init"
    let v313 : _ = Fable.Core.RustInterop.emitRustExpr () v312 
    let v314 : string = "v313"
    let v315 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US48>>, Send<Dyn<std_future_Future<US48>>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : US48 = Fable.Core.RustInterop.emitRustExpr () v316 
    let v326 : async_walkdir_Filtering =
        match v317 with
        | US48_2 -> (* Continue *)
            let v322 : string = "async_walkdir::Filtering::Continue"
            let v323 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v322 
            v323
        | US48_0 -> (* Ignore *)
            let v318 : string = "async_walkdir::Filtering::Ignore"
            let v319 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v318 
            v319
        | US48_1 -> (* IgnoreDir *)
            let v320 : string = "async_walkdir::Filtering::IgnoreDir"
            let v321 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v320 
            v321
    let v327 : string = v297 + v298 
    let x = v326 //
    let v328 : _ = x
    let v329 : unit = ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = $"true; let _fix_closure_v329 = $0"
    let v332 : bool = Fable.Core.RustInterop.emitRustExpr v328 v331 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = $"true; let _fix_closure_v329 = $0"
    let v334 : bool = Fable.Core.RustInterop.emitRustExpr v328 v333 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v335 : string = $"true; let _fix_closure_v329 = $0"
    let v336 : bool = Fable.Core.RustInterop.emitRustExpr v328 v335 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v330 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#else
    let _run_target_args'_v330 = false 
    #endif
    let v337 : bool = _run_target_args'_v330 
    let v338 : string = $"true; _fix_closure_v329 " + v327 + "); " + v297 + " // rust.fix_closure'"
    let v339 : bool = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "__future_init"
    let v341 : _ = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "v341"
    let v343 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v342 
    v343
and closure103 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method243 () : (async_walkdir_Error -> std_string_String) =
    closure103()
and closure104 () (v0 : async_walkdir_DirEntry) : US49 =
    US49_0(v0)
and method244 () : (async_walkdir_DirEntry -> US49) =
    closure104()
and closure105 () (v0 : std_string_String) : US49 =
    US49_1(v0)
and method245 () : (std_string_String -> US49) =
    closure105()
and method247 (v0 : std_string_String) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "format!(\"{:#?}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v65 
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v64 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v64 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v0}"
    let _run_target_args'_v64 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : string = $"%A{v0}"
    let _run_target_args'_v64 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : string = $"%A{v0}"
    let _run_target_args'_v64 = v86 
    #endif
#else
    let v90 : string = $"%A{v0}"
    let _run_target_args'_v64 = v90 
    #endif
    let v93 : string = _run_target_args'_v64 
    let v103 : string = $"{v93}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v2, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v2, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v138 : string = v2.l0
    v138
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method247(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript / stream_filter_map"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure106 (v0 : std_string_String) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method82()
            let v124 : string = method246(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure102 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method243()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US49) = method244()
    let v19 : (std_string_String -> US49) = method245()
    let v21 : US49 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v830 : US50 =
        match v21 with
        | US49_1(v199) -> (* Error *)
            let v511 : unit = ()
            let v512 : (unit -> unit) = closure106(v199)
            let v513 : unit = (fun () -> v512 (); v511) ()
            US50_1
        | US49_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "format!(\"{}\", $0)"
            let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "format!(\"{}\", $0)"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "format!(\"{}\", $0)"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v75 
            #endif
#if FABLE_COMPILER_PYTHON
            let v79 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v79 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v83 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v83 
            #endif
#else
            let v87 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v87 
            #endif
            let v90 : std_string_String = _run_target_args'_v67 
            let v99 : string = "fable_library_rust::String_::fromString($0)"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v90 v99 
            let v101 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v102 : string = $"regex::Regex::new(&$0)"
            let v103 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v101 v102 
            (* run_target_args'
            let v105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "$0.unwrap()"
            let v107 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v106 
            let _run_target_args'_v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "$0.unwrap()"
            let v109 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v108 
            let _run_target_args'_v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "$0.unwrap()"
            let v111 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v110 
            let _run_target_args'_v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v114 
            #endif
#else
            let v115 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v115 
            #endif
            let v116 : regex_Regex = _run_target_args'_v105 
            let v119 : Vec<std_collections_HashMap<string, string>> = method220(v100, v116)
            let v120 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v121 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v119 v120 
            let v122 : std_collections_HashMap<string, string> option = v121 |> Array.tryItem 0 
            let v125 : (std_collections_HashMap<string, string> -> US46) = method221()
            let v126 : US46 option = v122 |> Option.map v125 
            let v146 : US46 = US46_1
            let v147 : US46 = v126 |> Option.defaultValue v146 
            let v186 : US35 =
                match v147 with
                | US46_1 -> (* None *)
                    US35_1
                | US46_0(v151) -> (* Some *)
                    let v152 : string = method222()
                    let v153 : string = "std::collections::HashMap::get(&$0, &v152).map(|x| x).cloned()"
                    let v154 : string option = Fable.Core.RustInterop.emitRustExpr v151 v153 
                    let v157 : (string -> US5) = method6()
                    let v158 : US5 option = v154 |> Option.map v157 
                    let v178 : US5 = US5_1
                    let v179 : US5 = v158 |> Option.defaultValue v178 
                    US35_0(v179)
            let v193 : US5 =
                match v186 with
                | US35_0(v187) -> (* Some *)
                    match v187 with
                    | US5_0(v188) -> (* Some *)
                        US5_0(v188)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v193 with
            | US5_1 -> (* None *)
                US50_1
            | US5_0(v194) -> (* Some *)
                US50_0(v100, v194)
    match v830 with
    | US50_1 -> (* None *)
        let v838 : struct (string * string) option = None
        v838
    | US50_0(v831, v832) -> (* Some *)
        let v834 : struct (string * string) option = Some struct (v831, v832) 
        v834
and method242 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure102(v0)
and closure107 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure108 () struct (v0 : string, v1 : string) : US50 =
    US50_0(v0, v1)
and method248 () : (struct (string * string) -> US50) =
    closure108()
and method250 (v0 : US50) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "version"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"%A{v0}"
    let v65 : string = $"{v61}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v2, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = " }"
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v2, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v100 : string = v2.l0
    v100
and method249 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US50) : string =
    let v9 : string = method250(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure109 (v0 : US50) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method249(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method251 (v0 : string, v1 : string, v2 : US50) : unit =
    match v2 with
    | US50_1 -> (* None *)
        let v13 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v13
    | US50_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method33(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method33(v0, v8)
        method204(v7, v9)
        let v10 : string = "fable_modules"
        let v11 : string = method33(v7, v10)
        let v12 : bool = true
        method71(v12, v11)
and method252 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method214(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_typescript"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure110 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method252(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method254 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "new_code_path"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method253 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method254(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure111 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method253(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method255 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method255(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method256 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method256(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure112 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method75()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method258 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "run_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method257 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method258(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure114 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method257(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure113 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure114(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method259 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method156(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure115 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method259(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method260 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method214(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_python"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure116 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method82()
            let v125 : string = method260(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method261 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method254(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_python"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method16(v53)
and closure117 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method261(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure118 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method75()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method262 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method258(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure120 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method262(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure119 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure120(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method263 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method156(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method16(v56)
and closure121 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method82()
            let v127 : string = method263(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method265 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "subcommand"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v79 : string = $"%A{v0}"
    let _run_target_args'_v65 = v79 
    #endif
#if FABLE_COMPILER_PYTHON
    let v83 : string = $"%A{v0}"
    let _run_target_args'_v65 = v83 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v0}"
    let _run_target_args'_v65 = v87 
    #endif
#else
    let v91 : string = $"%A{v0}"
    let _run_target_args'_v65 = v91 
    #endif
    let v94 : string = _run_target_args'_v65 
    let v104 : string = $"{v94}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v3, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v122 : string = "; "
    let v123 : string = $"{v122}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v3, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v141 : string = "arg_matches"
    let v142 : string = $"{v141}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v3, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v159 : string = $"{v44}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    (* run_target_args'
    let v179 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v180 : string = "format!(\"{:#?}\", $0)"
    let v181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v180 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v181 v182 
    let _run_target_args'_v179 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "format!(\"{:#?}\", $0)"
    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v184 
    let v186 : string = "fable_library_rust::String_::fromString($0)"
    let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let _run_target_args'_v179 = v187 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v188 : string = "format!(\"{:#?}\", $0)"
    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v188 
    let v190 : string = "fable_library_rust::String_::fromString($0)"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v189 v190 
    let _run_target_args'_v179 = v191 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v193 : string = $"%A{v1}"
    let _run_target_args'_v179 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = $"%A{v1}"
    let _run_target_args'_v179 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v201 : string = $"%A{v1}"
    let _run_target_args'_v179 = v201 
    #endif
#else
    let v205 : string = $"%A{v1}"
    let _run_target_args'_v179 = v205 
    #endif
    let v208 : string = _run_target_args'_v179 
    let v218 : string = $"{v208}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v3, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v236 : string = " }"
    let v237 : string = $"{v236}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v3, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v253 : string = v3.l0
    v253
and method264 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method265(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / invalid subcommand"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method16(v54)
and closure122 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : string = method264(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure123 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v28 v37 
    v38
and method266 () : (serde_json_Error -> string) =
    closure123()
and method17 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US7) = method18()
    let v14 : US7 option = v10 |> Option.map v13 
    let v35 : US7 = US7_1
    let v36 : US7 = v14 |> Option.defaultValue v35 
    let v22893 : (struct (string * string) []) =
        match v36 with
        | US7_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method19()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v82 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v83 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v82 
                let v86 : (std_string_String -> US8) = method20()
                let v87 : US8 option = v83 |> Option.map v86 
                let v107 : US8 = US8_1
                let v108 : US8 = v87 |> Option.defaultValue v107 
                let v115 : std_string_String =
                    match v108 with
                    | US8_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US8_0(v112) -> (* Some *)
                        v112
                let v116 : string = "fable_library_rust::String_::fromString($0)"
                let v117 : string = Fable.Core.RustInterop.emitRustExpr v115 v116 
                let v118 : string = method21()
                (* run_target_args'
                let v123 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v124 : string = "&*$0"
                let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                let _run_target_args'_v123 = v125 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v126 : string = "&*$0"
                let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v126 
                let _run_target_args'_v123 = v127 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v128 : string = "&*$0"
                let v129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v128 
                let _run_target_args'_v123 = v129 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v131 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v131 
                #endif
#if FABLE_COMPILER_PYTHON
                let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v135 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v139 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v139 
                #endif
#else
                let v143 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v143 
                #endif
                let v146 : Ref<Str> = _run_target_args'_v123 
                let v155 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v156 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v146) v155 
                let v159 : (std_string_String -> US8) = method20()
                let v160 : US8 option = v156 |> Option.map v159 
                let v180 : US8 = US8_1
                let v181 : US8 = v160 |> Option.defaultValue v180 
                let v242 : US9 =
                    match v181 with
                    | US8_1 -> (* None *)
                        US9_1
                    | US8_0(v185) -> (* Some *)
                        let v186 : string = "fable_library_rust::String_::fromString($0)"
                        let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
                        
                        
                        
                        
                        let v190 : string = "JavaScript"
                        let v191 : (unit -> string) = v190.ToLower
                        let v192 : string = v191 ()
                        let v197 : string = "Erlang"
                        let v198 : (unit -> string) = v197.ToLower
                        let v199 : string = v198 ()
                        let v202 : bool = "Erlang" = v187
                        let v206 : US10 =
                            if v202 then
                                let v203 : US11 = US11_0
                                US10_0(v203)
                            else
                                US10_1
                        let v238 : US10 =
                            match v206 with
                            | US10_1 -> (* None *)
                                let v209 : bool = "JavaScript" = v187
                                let v213 : US10 =
                                    if v209 then
                                        let v210 : US11 = US11_1
                                        US10_0(v210)
                                    else
                                        US10_1
                                match v213 with
                                | US10_1 -> (* None *)
                                    let v216 : bool = v199 = v187
                                    let v220 : US10 =
                                        if v216 then
                                            let v217 : US11 = US11_0
                                            US10_0(v217)
                                        else
                                            US10_1
                                    match v220 with
                                    | US10_1 -> (* None *)
                                        let v223 : bool = v192 = v187
                                        let v227 : US10 =
                                            if v223 then
                                                let v224 : US11 = US11_1
                                                US10_0(v224)
                                            else
                                                US10_1
                                        match v227 with
                                        | US10_1 -> (* None *)
                                            US10_1
                                        | US10_0(v228) -> (* Some *)
                                            US10_0(v228)
                                    | US10_0(v221) -> (* Some *)
                                        US10_0(v221)
                                | US10_0(v214) -> (* Some *)
                                    US10_0(v214)
                            | US10_0(v207) -> (* Some *)
                                US10_0(v207)
                        US9_0(v238)
                let v249 : US10 =
                    match v242 with
                    | US9_0(v243) -> (* Some *)
                        match v243 with
                        | US10_0(v244) -> (* Some *)
                            US10_0(v244)
                        | _ ->
                            US10_1
                    | _ ->
                        US10_1
                let v253 : US11 =
                    match v249 with
                    | US10_1 -> (* None *)
                        US11_0
                    | US10_0(v250) -> (* Some *)
                        v250
                let v254 : string = method22()
                (* run_target_args'
                let v259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v260 : string = "&*$0"
                let v261 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v259 = v261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v262 : string = "&*$0"
                let v263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v262 
                let _run_target_args'_v259 = v263 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v264 : string = "&*$0"
                let v265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v264 
                let _run_target_args'_v259 = v265 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v267 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v267 
                #endif
#if FABLE_COMPILER_PYTHON
                let v271 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v271 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v275 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v275 
                #endif
#else
                let v279 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v279 
                #endif
                let v282 : Ref<Str> = _run_target_args'_v259 
                let v291 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v292 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v282) v291 
                let v295 : (Vec<std_string_String> -> US12) = method23()
                let v296 : US12 option = v292 |> Option.map v295 
                let v316 : US12 = US12_1
                let v317 : US12 = v296 |> Option.defaultValue v316 
                let v321 : (std_string_String []) = [||]
                let v322 : string = "$0.to_vec()"
                let v323 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v321 v322 
                let v326 : Vec<std_string_String> =
                    match v317 with
                    | US12_1 -> (* None *)
                        v323
                    | US12_0(v324) -> (* Some *)
                        v324
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v336 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v337 : string = "std::fs::read(&*$0)"
                let v338 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v117 v337 
                (* run_target_args'
                let v340 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v341 : string = "$0.unwrap()"
                let v342 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v341 
                let _run_target_args'_v340 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v343 : string = "$0.unwrap()"
                let v344 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v343 
                let _run_target_args'_v340 = v344 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v345 : string = "$0.unwrap()"
                let v346 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v345 
                let _run_target_args'_v340 = v346 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v347 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v347 
                #endif
#if FABLE_COMPILER_PYTHON
                let v348 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v348 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v349 
                #endif
#else
                let v350 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v350 
                #endif
                let v351 : Vec<uint8> = _run_target_args'_v340 
                let _run_target_args'_v336 = v351 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v359 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v363 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v363 
                #endif
#if FABLE_COMPILER_PYTHON
                let v367 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v367 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v371 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v371 
                #endif
#else
                let v374 : (uint8 []) = v117 |> System.IO.File.ReadAllBytes
                let v375 : string = "$0.to_vec()"
                let v376 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                let _run_target_args'_v336 = v376 
                #endif
                let v377 : Vec<uint8> = _run_target_args'_v336 
                let v386 : Vec<uint8> = method24(v377)
                let v387 : string = "std::string::String::from_utf8($0)"
                let v388 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v386 v387 
                (* run_target_args'
                let v390 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v391 : string = "$0.unwrap()"
                let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v391 
                let _run_target_args'_v390 = v392 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v393 : string = "$0.unwrap()"
                let v394 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v393 
                let _run_target_args'_v390 = v394 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v395 : string = "$0.unwrap()"
                let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v395 
                let _run_target_args'_v390 = v396 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v397 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v397 
                #endif
#if FABLE_COMPILER_PYTHON
                let v398 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v398 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v399 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v399 
                #endif
#else
                let v400 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v400 
                #endif
                let v401 : std_string_String = _run_target_args'_v390 
                let v404 : string = "fable_library_rust::String_::fromString($0)"
                let v405 : string = Fable.Core.RustInterop.emitRustExpr v401 v404 
                let _run_target_args'_v331 = v405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v331 = v407 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v331 = v411 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v415 : string = null |> unbox<string>
                let _run_target_args'_v331 = v415 
                #endif
#if FABLE_COMPILER_PYTHON
                let v419 : string = null |> unbox<string>
                let _run_target_args'_v331 = v419 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v423 : string = null |> unbox<string>
                let _run_target_args'_v331 = v423 
                #endif
#else
                let v426 : string = v117 |> System.IO.File.ReadAllText
                let _run_target_args'_v331 = v426 
                #endif
                let v427 : string = _run_target_args'_v331 
                let v436 : string = "gleam"
                let v437 : string = method25(v436, v427)
                let v438 : string = method26(v437)
                let v439 : string = method31()
                let v440 : US5 = method32(v439)
                let v446 : US5 =
                    match v440 with
                    | US5_1 -> (* None *)
                        let v443 : string = __SOURCE_DIRECTORY__
                        method32(v443)
                    | US5_0(v441) -> (* Some *)
                        US5_0(v441)
                let v452 : US5 =
                    match v446 with
                    | US5_1 -> (* None *)
                        let v449 : string = "/workspaces"
                        method32(v449)
                    | US5_0(v447) -> (* Some *)
                        US5_0(v447)
                let v456 : string =
                    match v452 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v453) -> (* Some *)
                        v453
                let v457 : string = method52(v456)
                let v458 : bool = "deps" = v457
                let v469 : string =
                    if v458 then
                        let v459 : string option = method38(v456)
                        let v461 : string = v459 |> Option.get
                        let v464 : US5 = method32(v461)
                        match v464 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v465) -> (* Some *)
                            v465
                    else
                        v456
                let v470 : string = "polyglot"
                let v471 : string = method33(v469, v470)
                let v472 : string = method31()
                let v474 : (unit -> string) = v472.ToLower
                let v475 : string = v474 ()
                let v479 : (unit -> string) = v471.ToLower
                let v480 : string = v479 ()
                let v484 : bool = v475.StartsWith (v480, false, null)
                let v489 : US14 =
                    if v484 then
                        US14_1(v480)
                    else
                        US14_0(v480)
                let v501 : Result<string, string> =
                    match v489 with
                    | US14_1(v495) -> (* Error *)
                        let v497 : Result<string, string> = Error v495 
                        v497
                    | US14_0(v490) -> (* Ok *)
                        let v492 : Result<string, string> = Ok v490 
                        v492
                let v502 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v503 : bool = Fable.Core.RustInterop.emitRustExpr v501 v502 
                let v504 : string = "x"
                let v505 : string = Fable.Core.RustInterop.emitRustExpr () v504 
                let v506 : string = "true; $0 })"
                let v507 : bool = Fable.Core.RustInterop.emitRustExpr v505 v506 
                let v508 : string = "_result_unwrap_or_else"
                let v509 : string = Fable.Core.RustInterop.emitRustExpr () v508 
                let v510 : string = method66(v509)
                let v511 : string option = method38(v117)
                let v514 : string = ""
                let v515 : string = v511 |> Option.defaultValue v514 
                let v518 : string = method66(v515)
                let v519 : string = ".."
                let v520 : string = method33(v518, v519)
                let v521 : string = method66(v520)
                (* run_target_args'
                let v526 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v527 : (unit -> unit) = method70(v521)
                let v528 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v527 "$0()" )
                let _run_target_args'_v526 = v528 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v529 : (unit -> unit) = method70(v521)
                let v530 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v529 "$0()" )
                let _run_target_args'_v526 = v530 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v531 : (unit -> unit) = method70(v521)
                let v532 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v531 "$0()" )
                let _run_target_args'_v526 = v532 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v533 : (unit -> unit) = method72(v521)
                let v534 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v533 () }
                let _run_target_args'_v526 = v534 
                #endif
#if FABLE_COMPILER_PYTHON
                let v535 : (unit -> unit) = method72(v521)
                let v536 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v535 () }
                let _run_target_args'_v526 = v536 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v537 : (unit -> unit) = method72(v521)
                let v538 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v537 () }
                let _run_target_args'_v526 = v538 
                #endif
#else
                let v539 : (unit -> unit) = method72(v521)
                let v540 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v539 () }
                let _run_target_args'_v526 = v540 
                #endif
                let v541 : System.IDisposable = _run_target_args'_v526 
                use v541 = v541 
                let v548 : System.IDisposable = v541 
                let v549 : string = "gleam.toml"
                let v550 : string = method33(v521, v549)
                let v551 : string = "gleam_stdlib=\"0.57.0\""
                let v552 : string = "gleam_time=\">=1.0.0 and <2.0.0\""
                let v553 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v554 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v555 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v556 : string = "gtempo=\">=7.1.0 and <8.0.0\""
                let v557 : (string []) = [|v551; v552; v553; v554; v555; v556|]
                let v558 : string = "$0.to_vec()"
                let v559 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v557 v558 
                let v560 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v561 : bool = Fable.Core.RustInterop.emitRustExpr v559 v560 
                let v562 : string = "x"
                let v563 : string = Fable.Core.RustInterop.emitRustExpr () v562 
                (* run_target_args'
                let v568 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v569 : string = "&*$0"
                let v570 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v563 v569 
                let _run_target_args'_v568 = v570 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v571 : string = "&*$0"
                let v572 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v563 v571 
                let _run_target_args'_v568 = v572 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v573 : string = "&*$0"
                let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v563 v573 
                let _run_target_args'_v568 = v574 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v576 : Ref<Str> = v563 |> unbox<Ref<Str>>
                let _run_target_args'_v568 = v576 
                #endif
#if FABLE_COMPILER_PYTHON
                let v580 : Ref<Str> = v563 |> unbox<Ref<Str>>
                let _run_target_args'_v568 = v580 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v584 : Ref<Str> = v563 |> unbox<Ref<Str>>
                let _run_target_args'_v568 = v584 
                #endif
#else
                let v588 : Ref<Str> = v563 |> unbox<Ref<Str>>
                let _run_target_args'_v568 = v588 
                #endif
                let v591 : Ref<Str> = _run_target_args'_v568 
                (* run_target_args'
                let v604 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v605 : string = "String::from($0)"
                let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr v591 v605 
                let _run_target_args'_v604 = v606 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v607 : string = "String::from($0)"
                let v608 : std_string_String = Fable.Core.RustInterop.emitRustExpr v591 v607 
                let _run_target_args'_v604 = v608 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v609 : string = "String::from($0)"
                let v610 : std_string_String = Fable.Core.RustInterop.emitRustExpr v591 v609 
                let _run_target_args'_v604 = v610 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v612 : std_string_String = v591 |> unbox<std_string_String>
                let _run_target_args'_v604 = v612 
                #endif
#if FABLE_COMPILER_PYTHON
                let v616 : std_string_String = v591 |> unbox<std_string_String>
                let _run_target_args'_v604 = v616 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v620 : std_string_String = v591 |> unbox<std_string_String>
                let _run_target_args'_v604 = v620 
                #endif
#else
                let v624 : std_string_String = v591 |> unbox<std_string_String>
                let _run_target_args'_v604 = v624 
                #endif
                let v627 : std_string_String = _run_target_args'_v604 
                let v636 : string = "true; $0 }).collect::<Vec<_>>()"
                let v637 : bool = Fable.Core.RustInterop.emitRustExpr v627 v636 
                let v638 : string = "_vec_map"
                let v639 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v638 
                let v640 : Vec<std_string_String> = method73(v326)
                let v641 : Vec<std_string_String> = method74(v639)
                let v642 : string = "true; let mut v641 = v641"
                let v643 : bool = Fable.Core.RustInterop.emitRustExpr () v642 
                let v644 : string = "true; v641.extend(v640)"
                let v645 : bool = Fable.Core.RustInterop.emitRustExpr () v644 
                let v646 : string = "v641"
                let v647 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v646 
                let v648 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v649 : bool = Fable.Core.RustInterop.emitRustExpr v647 v648 
                let v650 : string = "x"
                let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v650 
                let v652 : string = "fable_library_rust::String_::fromString($0)"
                let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
                let v656 : string = "="
                let v657 : bool = v653.Contains v656 
                let v672 : string =
                    if v657 then
                        v653
                    else
                        let v662 : string = "]"
                        let v663 : bool = v653.EndsWith (v662, false, null)
                        if v663 then
                            let v666 : string = $"={{version='*',features=["
                            let v667 : string = "["
                            let v668 : string = v653.Replace (v667, v666)
                            let v669 : string = $"{v668}}}"
                            v669
                        else
                            let v670 : string = $"{v653}='*'"
                            v670
                let v673 : string = "true; $0 }).collect::<Vec<_>>()"
                let v674 : bool = Fable.Core.RustInterop.emitRustExpr v672 v673 
                let v675 : string = "_vec_map"
                let v676 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v675 
                let v677 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v678 : (string []) = Fable.Core.RustInterop.emitRustExpr v676 v677 
                let v683 : unit = ()
                let _let'_v683 =
                    seq {
                        for i = 0 to v678.Length - 1 do yield v678.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v686 : string seq = _let'_v683 
                let v694 : string = method75()
                let v695 : (string -> (string seq -> string)) = String.concat
                let v696 : (string seq -> string) = v695 v694
                let v697 : string = v696 v686
                
                
                let v701 : bool =
                    match v253 with
                    | US11_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v705 : US5 =
                    if v701 then
                        let v702 : string = "Erlang"
                        US5_0(v702)
                    else
                        US5_1
                let v719 : US5 =
                    match v705 with
                    | US5_1 -> (* None *)
                        let v708 : bool =
                            match v253 with
                            | US11_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v712 : US5 =
                            if v708 then
                                let v709 : string = "JavaScript"
                                US5_0(v709)
                            else
                                US5_1
                        match v712 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v713) -> (* Some *)
                            US5_0(v713)
                    | US5_0(v706) -> (* Some *)
                        US5_0(v706)
                let v723 : string =
                    match v719 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v720) -> (* Some *)
                        v720
                let v725 : (unit -> string) = v723.ToLower
                let v726 : string = v725 ()
                let v731 : string = "_real"
                let v732 : bool = v117.Contains v731 
                let v737 : string =
                    if v732 then
                        let v735 : string = "main_real"
                        v735
                    else
                        let v736 : string = "main"
                        v736
                let v738 : string = $"name = \"{v737}\""
                let v739 : string = $"target = \"{v726}\""
                let v742 : string = "\n"
                let v743 : string = v738 + v742 
                let v747 : string = v743 + v739 
                let v750 : string = $""
                let v752 : string = v747 + v742 
                let v756 : string = v752 + v750 
                let v759 : string = $"[dependencies]"
                let v761 : string = v756 + v742 
                let v765 : string = v761 + v759 
                let v768 : string = $"{v697}"
                let v770 : string = v765 + v742 
                let v774 : string = v770 + v768 
                method76(v550, v774)
                let v778 : System.Threading.CancellationToken option = None
                let v781 : (struct (string * string) []) = [||]
                let v783 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v787 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v791 : string option = None
                let v794 : string = $"gleam check"
                let v796 : string option = Some v521 
                let v799 : bool = true
                let v800 : bool = true
                let struct (v801 : int32, v802 : string) = method90(v794, v778, v781, v783, v787, v799, v796, v800)
                let v804 : bool = v801 <> 0 
                let struct (v4063 : US5, v4064 : US5, v4065 : US5, v4066 : US5) =
                    if v804 then
                        let v1114 : unit = ()
                        let v1115 : (unit -> unit) = closure58(v117, v802, v801)
                        let v1116 : unit = (fun () -> v1115 (); v1114) ()
                        let v1427 : US5 = US5_0(v436)
                        let v1428 : US5 = US5_1
                        let v1429 : US5 = US5_1
                        let v1430 : US5 = US5_1
                        struct (v1427, v1428, v1429, v1430)
                    else
                        let v1431 : bool =
                            match v253 with
                            | US11_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v1434 : string =
                            if v1431 then
                                let v1432 : string = $"gleam run --no-print-progress \"{v117}\""
                                v1432
                            else
                                let v1433 : string = $"gleam build --no-print-progress"
                                v1433
                        let v1435 : string = "TRACE_LEVEL"
                        let v1436 : string = "GLEAM_LOG"
                        let v1437 : string = "GLEAM_LOG_NOCOLOUR"
                        let v1438 : (struct (string * string) []) = [|struct (v1435, v514); struct (v1436, v514); struct (v1437, v514)|]
                        let v1440 : System.Threading.CancellationToken option = None
                        let v1443 : (struct (string * string) []) = [||]
                        let v1445 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1449 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1453 : string option = None
                        let v1457 : string option = Some v521 
                        let v1460 : bool = true
                        let v1461 : bool = false
                        let struct (v1462 : int32, v1463 : string) = method90(v1434, v1440, v1438, v1445, v1449, v1460, v1457, v1461)
                        let v1464 : int32 = v1438.Length
                        let v1465 : (string []) = Array.zeroCreate<string> (v1464)
                        let v1466 : Mut5 = {l0 = 0} : Mut5
                        while method29(v1464, v1466) do
                            let v1468 : int32 = v1466.l0
                            let struct (v1469 : string, v1470 : string) = v1438.[int v1468]
                            let v1471 : string = $"$env:{v1469}=''{v1470}''"
                            v1465.[int v1468] <- v1471
                            let v1472 : int32 = v1468 + 1
                            v1466.l0 <- v1472
                            ()
                        let v1474 : string seq = v1465 |> Seq.ofArray
                        let v1479 : (string -> (string seq -> string)) = String.concat
                        let v1480 : string = ";"
                        let v1481 : (string seq -> string) = v1479 v1480
                        let v1482 : string = v1481 v1474
                        let v1485 : string = $"pwsh -c '{v1482}; {v1434}'"
                        let v1487 : bool = v1462 <> 0 
                        let struct (v4059 : US5, v4060 : US5, v4061 : US5, v4062 : US5) =
                            if v1487 then
                                let v1797 : unit = ()
                                let v1798 : (unit -> unit) = closure59(v117, v1463, v1462, v1485)
                                let v1799 : unit = (fun () -> v1798 (); v1797) ()
                                let v2110 : US5 = US5_0(v436)
                                let v2111 : US5 = US5_1
                                let v2112 : US5 = US5_1
                                let v2113 : US5 = US5_1
                                struct (v2110, v2111, v2112, v2113)
                            else
                                let v2114 : bool =
                                    match v253 with
                                    | US11_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v3959 : string =
                                    if v2114 then
                                        v1463
                                    else
                                        let v2115 : string = $"{v521}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v2120 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2125 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2126 : string = "std::fs::read(&*$0)"
                                        let v2127 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2115 v2126 
                                        (* run_target_args'
                                        let v2129 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2130 : string = "$0.unwrap()"
                                        let v2131 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2127 v2130 
                                        let _run_target_args'_v2129 = v2131 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2132 : string = "$0.unwrap()"
                                        let v2133 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2127 v2132 
                                        let _run_target_args'_v2129 = v2133 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2134 : string = "$0.unwrap()"
                                        let v2135 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2127 v2134 
                                        let _run_target_args'_v2129 = v2135 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2136 : Vec<uint8> = match v2127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2129 = v2136 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2137 : Vec<uint8> = match v2127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2129 = v2137 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2138 : Vec<uint8> = match v2127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2129 = v2138 
                                        #endif
#else
                                        let v2139 : Vec<uint8> = match v2127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2129 = v2139 
                                        #endif
                                        let v2140 : Vec<uint8> = _run_target_args'_v2129 
                                        let _run_target_args'_v2125 = v2140 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2144 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2125 = v2144 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2148 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2125 = v2148 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2152 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2125 = v2152 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2156 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2125 = v2156 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2160 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2125 = v2160 
                                        #endif
#else
                                        let v2163 : (uint8 []) = v2115 |> System.IO.File.ReadAllBytes
                                        let v2164 : string = "$0.to_vec()"
                                        let v2165 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2163 v2164 
                                        let _run_target_args'_v2125 = v2165 
                                        #endif
                                        let v2166 : Vec<uint8> = _run_target_args'_v2125 
                                        let v2175 : Vec<uint8> = method24(v2166)
                                        let v2176 : string = "std::string::String::from_utf8($0)"
                                        let v2177 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2175 v2176 
                                        (* run_target_args'
                                        let v2179 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2180 : string = "$0.unwrap()"
                                        let v2181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2180 
                                        let _run_target_args'_v2179 = v2181 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2182 : string = "$0.unwrap()"
                                        let v2183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2182 
                                        let _run_target_args'_v2179 = v2183 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2184 : string = "$0.unwrap()"
                                        let v2185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2184 
                                        let _run_target_args'_v2179 = v2185 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2186 : std_string_String = match v2177 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2179 = v2186 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2187 : std_string_String = match v2177 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2179 = v2187 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2188 : std_string_String = match v2177 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2179 = v2188 
                                        #endif
#else
                                        let v2189 : std_string_String = match v2177 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2179 = v2189 
                                        #endif
                                        let v2190 : std_string_String = _run_target_args'_v2179 
                                        let v2193 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2194 : string = Fable.Core.RustInterop.emitRustExpr v2190 v2193 
                                        let _run_target_args'_v2120 = v2194 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2196 : string = null |> unbox<string>
                                        let _run_target_args'_v2120 = v2196 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2200 : string = null |> unbox<string>
                                        let _run_target_args'_v2120 = v2200 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2204 : string = null |> unbox<string>
                                        let _run_target_args'_v2120 = v2204 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2208 : string = null |> unbox<string>
                                        let _run_target_args'_v2120 = v2208 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2212 : string = null |> unbox<string>
                                        let _run_target_args'_v2120 = v2212 
                                        #endif
#else
                                        let v2215 : string = v2115 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2120 = v2215 
                                        #endif
                                        let v2216 : string = _run_target_args'_v2120 
                                        let v2225 : string = $"#app_"
                                        let v2226 : string = $"#app_{v438}"
                                        let v2227 : string = v2216.Replace (v2225, v2226)
                                        let v2230 : string = "main()"
                                        let v2231 : bool = v2227.EndsWith (v2230, false, null)
                                        let v2234 : bool = v2231 = false
                                        if v2234 then
                                            let v2235 : string = $"{v2227}
main()"
                                            method76(v2115, v2235)
                                        let v2237 : System.Threading.CancellationToken option = None
                                        let v2240 : (struct (string * string) []) = [||]
                                        let v2242 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2246 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2250 : string option = None
                                        let v2253 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v518} {v2115}"
                                        let v2254 : string = "PATH"
                                        let v2255 : string = method3(v2254)
                                        let v2256 : bool = v2255 = ""
                                        let v2294 : US5 =
                                            if v2256 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v2259 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2260 : string = "cfg!(windows)"
                                                let v2261 : bool = Fable.Core.RustInterop.emitRustExpr () v2260 
                                                let _run_target_args'_v2259 = v2261 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2262 : string = "cfg!(windows)"
                                                let v2263 : bool = Fable.Core.RustInterop.emitRustExpr () v2262 
                                                let _run_target_args'_v2259 = v2263 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2264 : string = "cfg!(windows)"
                                                let v2265 : bool = Fable.Core.RustInterop.emitRustExpr () v2264 
                                                let _run_target_args'_v2259 = v2265 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2266 : US3 = US3_0
                                                let v2267 : US4 = US4_5(v2266)
                                                let v2268 : string = $"platform.is_windows / target: {v2267}"
                                                let v2269 : bool = failwith<bool> v2268
                                                let _run_target_args'_v2259 = v2269 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2270 : US3 = US3_0
                                                let v2271 : US4 = US4_6(v2270)
                                                let v2272 : string = $"platform.is_windows / target: {v2271}"
                                                let v2273 : bool = failwith<bool> v2272
                                                let _run_target_args'_v2259 = v2273 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2274 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2275 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2276 : bool = v2275 v2274
                                                let _run_target_args'_v2259 = v2276 
                                                #endif
#else
                                                let v2277 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2278 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2279 : bool = v2278 v2277
                                                let _run_target_args'_v2259 = v2279 
                                                #endif
                                                let v2280 : bool = _run_target_args'_v2259 
                                                let v2290 : string =
                                                    if v2280 then
                                                        v1480
                                                    else
                                                        let v2289 : string = ":"
                                                        v2289
                                                let v2291 : string = "~/.bun/bin"
                                                let v2292 : string = $"{v2291}{v2290}{v2255}"
                                                US5_0(v2292)
                                        let v2299 : (struct (string * string) []) =
                                            match v2294 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v2295) -> (* Some *)
                                                [|struct (v2254, v2295)|]
                                        let v2301 : string option = Some v521 
                                        let v2304 : bool = true
                                        let v2305 : bool = true
                                        let struct (v2306 : int32, v2307 : string) = method90(v2253, v2237, v2299, v2242, v2246, v2304, v2301, v2305)
                                        let v2309 : bool = v2306 <> 0 
                                        if v2309 then
                                            let v2619 : unit = ()
                                            let v2620 : (unit -> unit) = closure60(v117, v2307, v2306)
                                            let v2621 : unit = (fun () -> v2620 (); v2619) ()
                                            v514
                                        else
                                            let v2932 : string = $"<!DOCTYPE html>"
                                            let v2933 : string = $"<html lang=\"en\">"
                                            let v2935 : string = v2932 + v742 
                                            let v2939 : string = v2935 + v2933 
                                            let v2942 : string = $"  <head>"
                                            let v2944 : string = v2939 + v742 
                                            let v2948 : string = v2944 + v2942 
                                            let v2951 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v2953 : string = v2948 + v742 
                                            let v2957 : string = v2953 + v2951 
                                            let v2960 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v2962 : string = v2957 + v742 
                                            let v2966 : string = v2962 + v2960 
                                            let v2969 : string = $"    <link"
                                            let v2971 : string = v2966 + v742 
                                            let v2975 : string = v2971 + v2969 
                                            let v2978 : string = $"      data-trunk"
                                            let v2980 : string = v2975 + v742 
                                            let v2984 : string = v2980 + v2978 
                                            let v2987 : string = $"      rel=\"inline\""
                                            let v2989 : string = v2984 + v742 
                                            let v2993 : string = v2989 + v2987 
                                            let v2996 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v2998 : string = v2993 + v742 
                                            let v3002 : string = v2998 + v2996 
                                            let v3005 : string = $"    />"
                                            let v3007 : string = v3002 + v742 
                                            let v3011 : string = v3007 + v3005 
                                            let v3014 : string = $"    <link"
                                            let v3016 : string = v3011 + v742 
                                            let v3020 : string = v3016 + v3014 
                                            let v3023 : string = $"      data-trunk"
                                            let v3025 : string = v3020 + v742 
                                            let v3029 : string = v3025 + v3023 
                                            let v3032 : string = $"      rel=\"inline\""
                                            let v3034 : string = v3029 + v742 
                                            let v3038 : string = v3034 + v3032 
                                            let v3041 : string = $"      type=\"module\""
                                            let v3043 : string = v3038 + v742 
                                            let v3047 : string = v3043 + v3041 
                                            let v3050 : string = $"      href=\"main.js\""
                                            let v3052 : string = v3047 + v742 
                                            let v3056 : string = v3052 + v3050 
                                            let v3059 : string = $"    />"
                                            let v3061 : string = v3056 + v742 
                                            let v3065 : string = v3061 + v3059 
                                            let v3068 : string = $"  </head>"
                                            let v3070 : string = v3065 + v742 
                                            let v3074 : string = v3070 + v3068 
                                            let v3077 : string = $"  <body>"
                                            let v3079 : string = v3074 + v742 
                                            let v3083 : string = v3079 + v3077 
                                            let v3086 : string = $"    <div id=\"app_{v438}\"></div>"
                                            let v3088 : string = v3083 + v742 
                                            let v3092 : string = v3088 + v3086 
                                            let v3095 : string = $"  </body>"
                                            let v3097 : string = v3092 + v742 
                                            let v3101 : string = v3097 + v3095 
                                            let v3104 : string = $"</html>"
                                            let v3106 : string = v3101 + v742 
                                            let v3110 : string = v3106 + v3104 
                                            let v3113 : string = $"{v518}/index.html"
                                            method76(v3113, v3110)
                                            let v3114 : string = $"{v518}/spiral_{v438}.rs"
                                            method76(v3114, v514)
                                            let v3115 : string = $"[package]"
                                            let v3116 : string = $"name = \"spiral_{v438}\""
                                            let v3118 : string = v3115 + v742 
                                            let v3122 : string = v3118 + v3116 
                                            let v3125 : string = $""
                                            let v3127 : string = v3122 + v742 
                                            let v3131 : string = v3127 + v3125 
                                            let v3134 : string = $"[workspace]"
                                            let v3136 : string = v3131 + v742 
                                            let v3140 : string = v3136 + v3134 
                                            let v3143 : string = $""
                                            let v3145 : string = v3140 + v742 
                                            let v3149 : string = v3145 + v3143 
                                            let v3152 : string = $"[lib]"
                                            let v3154 : string = v3149 + v742 
                                            let v3158 : string = v3154 + v3152 
                                            let v3161 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v3163 : string = v3158 + v742 
                                            let v3167 : string = v3163 + v3161 
                                            let v3170 : string = $"path = \"spiral_{v438}.rs\""
                                            let v3172 : string = v3167 + v742 
                                            let v3176 : string = v3172 + v3170 
                                            let v3179 : string = $""
                                            let v3181 : string = v3176 + v742 
                                            let v3185 : string = v3181 + v3179 
                                            let v3188 : string = $"[dependencies]"
                                            let v3190 : string = v3185 + v742 
                                            let v3194 : string = v3190 + v3188 
                                            let v3197 : string = $"{v518}/Cargo.toml"
                                            method76(v3197, v3194)
                                            let v3199 : System.Threading.CancellationToken option = None
                                            let v3202 : (struct (string * string) []) = [||]
                                            let v3204 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v3208 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v3212 : string option = None
                                            let v3215 : string = $"trunk build --release --minify --dist={v518} --public-url=./ --no-sri"
                                            let v3216 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v3217 : string = "0.2.93"
                                            let v3218 : (struct (string * string) []) = [|struct (v3216, v3217)|]
                                            let v3220 : string option = Some v518 
                                            let v3223 : bool = true
                                            let v3224 : bool = true
                                            let struct (v3225 : int32, v3226 : string) = method90(v3215, v3199, v3218, v3204, v3208, v3223, v3220, v3224)
                                            let v3227 : bool = v3225 = 0
                                            if v3227 then
                                                (* run_target_args'
                                                let v3232 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3237 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3238 : string = "std::fs::read(&*$0)"
                                                let v3239 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3113 v3238 
                                                (* run_target_args'
                                                let v3241 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3242 : string = "$0.unwrap()"
                                                let v3243 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3242 
                                                let _run_target_args'_v3241 = v3243 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3244 : string = "$0.unwrap()"
                                                let v3245 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3244 
                                                let _run_target_args'_v3241 = v3245 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3246 : string = "$0.unwrap()"
                                                let v3247 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3246 
                                                let _run_target_args'_v3241 = v3247 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3248 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3241 = v3248 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3249 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3241 = v3249 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3250 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3241 = v3250 
                                                #endif
#else
                                                let v3251 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3241 = v3251 
                                                #endif
                                                let v3252 : Vec<uint8> = _run_target_args'_v3241 
                                                let _run_target_args'_v3237 = v3252 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3237 = v3256 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3260 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3237 = v3260 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3264 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3237 = v3264 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3268 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3237 = v3268 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3272 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3237 = v3272 
                                                #endif
#else
                                                let v3275 : (uint8 []) = v3113 |> System.IO.File.ReadAllBytes
                                                let v3276 : string = "$0.to_vec()"
                                                let v3277 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3275 v3276 
                                                let _run_target_args'_v3237 = v3277 
                                                #endif
                                                let v3278 : Vec<uint8> = _run_target_args'_v3237 
                                                let v3287 : Vec<uint8> = method24(v3278)
                                                let v3288 : string = "std::string::String::from_utf8($0)"
                                                let v3289 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3287 v3288 
                                                (* run_target_args'
                                                let v3291 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3292 : string = "$0.unwrap()"
                                                let v3293 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3289 v3292 
                                                let _run_target_args'_v3291 = v3293 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3294 : string = "$0.unwrap()"
                                                let v3295 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3289 v3294 
                                                let _run_target_args'_v3291 = v3295 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3296 : string = "$0.unwrap()"
                                                let v3297 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3289 v3296 
                                                let _run_target_args'_v3291 = v3297 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3298 : std_string_String = match v3289 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3291 = v3298 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3299 : std_string_String = match v3289 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3291 = v3299 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3300 : std_string_String = match v3289 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3291 = v3300 
                                                #endif
#else
                                                let v3301 : std_string_String = match v3289 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3291 = v3301 
                                                #endif
                                                let v3302 : std_string_String = _run_target_args'_v3291 
                                                let v3305 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3306 : string = Fable.Core.RustInterop.emitRustExpr v3302 v3305 
                                                let _run_target_args'_v3232 = v3306 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3308 : string = null |> unbox<string>
                                                let _run_target_args'_v3232 = v3308 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3312 : string = null |> unbox<string>
                                                let _run_target_args'_v3232 = v3312 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3316 : string = null |> unbox<string>
                                                let _run_target_args'_v3232 = v3316 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3320 : string = null |> unbox<string>
                                                let _run_target_args'_v3232 = v3320 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3324 : string = null |> unbox<string>
                                                let _run_target_args'_v3232 = v3324 
                                                #endif
#else
                                                let v3327 : string = v3113 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3232 = v3327 
                                                #endif
                                                let v3328 : string = _run_target_args'_v3232 
                                                v3328
                                            else
                                                let v3644 : unit = ()
                                                let v3645 : (unit -> unit) = closure61(v117, v3226, v3225)
                                                let v3646 : unit = (fun () -> v3645 (); v3644) ()
                                                v514
                                (* run_target_args'
                                let v3964 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3965 : string = "&*$0"
                                let v3966 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3959 v3965 
                                let _run_target_args'_v3964 = v3966 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3967 : string = "&*$0"
                                let v3968 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3959 v3967 
                                let _run_target_args'_v3964 = v3968 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3969 : string = "&*$0"
                                let v3970 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3959 v3969 
                                let _run_target_args'_v3964 = v3970 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3972 : Ref<Str> = v3959 |> unbox<Ref<Str>>
                                let _run_target_args'_v3964 = v3972 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3976 : Ref<Str> = v3959 |> unbox<Ref<Str>>
                                let _run_target_args'_v3964 = v3976 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3980 : Ref<Str> = v3959 |> unbox<Ref<Str>>
                                let _run_target_args'_v3964 = v3980 
                                #endif
#else
                                let v3984 : Ref<Str> = v3959 |> unbox<Ref<Str>>
                                let _run_target_args'_v3964 = v3984 
                                #endif
                                let v3987 : Ref<Str> = _run_target_args'_v3964 
                                (* run_target_args'
                                let v4000 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v4001 : string = "String::from($0)"
                                let v4002 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3987 v4001 
                                let _run_target_args'_v4000 = v4002 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v4003 : string = "String::from($0)"
                                let v4004 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3987 v4003 
                                let _run_target_args'_v4000 = v4004 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v4005 : string = "String::from($0)"
                                let v4006 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3987 v4005 
                                let _run_target_args'_v4000 = v4006 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v4008 : std_string_String = v3987 |> unbox<std_string_String>
                                let _run_target_args'_v4000 = v4008 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v4012 : std_string_String = v3987 |> unbox<std_string_String>
                                let _run_target_args'_v4000 = v4012 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v4016 : std_string_String = v3987 |> unbox<std_string_String>
                                let _run_target_args'_v4000 = v4016 
                                #endif
#else
                                let v4020 : std_string_String = v3987 |> unbox<std_string_String>
                                let _run_target_args'_v4000 = v4020 
                                #endif
                                let v4023 : std_string_String = _run_target_args'_v4000 
                                let v4032 : (string -> US5) = closure62()
                                let v4033 : (unit -> string) = closure63(v3959)
                                let v4034 : (exn -> US5) = closure65(v117, v1485, v4023)
                                let v4037 : US5 = US5_1
                                let result = ref v4037
                                try
                                    result.Value <- v4033 () |> v4032 
                                with ex ->
                                    result.Value <- v4034 ex 
                                let v4038 : US5 = result.Value
                                let v4052 : string option =
                                    match v4038 with
                                    | US5_1 -> (* None *)
                                        let v4048 : string option = None
                                        v4048
                                    | US5_0(v4042) -> (* Some *)
                                        let v4044 : string option = Some v4042 
                                        v4044
                                let v4053 : string = "$0.unwrap()"
                                let v4054 : string = Fable.Core.RustInterop.emitRustExpr v4052 v4053 
                                let v4055 : US5 = US5_0(v436)
                                let v4056 : US5 = US5_0(v427)
                                let v4057 : US5 = US5_0(v117)
                                let v4058 : US5 = US5_0(v4054)
                                struct (v4055, v4056, v4057, v4058)
                        struct (v4059, v4060, v4061, v4062)
                let v4069 : string =
                    match v4063 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4067) -> (* Some *)
                        v4067
                let v4070 : string = "extension"
                let v4073 : string =
                    match v4064 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4071) -> (* Some *)
                        v4071
                let v4074 : string = "code"
                let v4077 : string =
                    match v4066 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4075) -> (* Some *)
                        v4075
                let v4078 : string = "output"
                let v4079 : (struct (string * string) []) = [|struct (v4070, v4069); struct (v4074, v4073); struct (v4078, v4077)|]
                let v4080 : string = "$0.to_vec()"
                let v4081 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4079 v4080 
                let v4082 : unit = ()
                let v4083 : string = $"true; let _func1_from_v4082 = Func1::from(move |value| {{ //"
                let v4084 : bool = Fable.Core.RustInterop.emitRustExpr () v4083 
                let v4085 : string = $"value"
                let struct (v4086 : string, v4087 : string) = Fable.Core.RustInterop.emitRustExpr () v4085 
                (* run_target_args'
                let v4092 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4093 : string = "&*$0"
                let v4094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4086 v4093 
                let _run_target_args'_v4092 = v4094 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4095 : string = "&*$0"
                let v4096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4086 v4095 
                let _run_target_args'_v4092 = v4096 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4097 : string = "&*$0"
                let v4098 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4086 v4097 
                let _run_target_args'_v4092 = v4098 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4100 : Ref<Str> = v4086 |> unbox<Ref<Str>>
                let _run_target_args'_v4092 = v4100 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4104 : Ref<Str> = v4086 |> unbox<Ref<Str>>
                let _run_target_args'_v4092 = v4104 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4108 : Ref<Str> = v4086 |> unbox<Ref<Str>>
                let _run_target_args'_v4092 = v4108 
                #endif
#else
                let v4112 : Ref<Str> = v4086 |> unbox<Ref<Str>>
                let _run_target_args'_v4092 = v4112 
                #endif
                let v4115 : Ref<Str> = _run_target_args'_v4092 
                (* run_target_args'
                let v4128 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4129 : string = "String::from($0)"
                let v4130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4115 v4129 
                let _run_target_args'_v4128 = v4130 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4131 : string = "String::from($0)"
                let v4132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4115 v4131 
                let _run_target_args'_v4128 = v4132 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4133 : string = "String::from($0)"
                let v4134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4115 v4133 
                let _run_target_args'_v4128 = v4134 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4136 : std_string_String = v4115 |> unbox<std_string_String>
                let _run_target_args'_v4128 = v4136 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4140 : std_string_String = v4115 |> unbox<std_string_String>
                let _run_target_args'_v4128 = v4140 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4144 : std_string_String = v4115 |> unbox<std_string_String>
                let _run_target_args'_v4128 = v4144 
                #endif
#else
                let v4148 : std_string_String = v4115 |> unbox<std_string_String>
                let _run_target_args'_v4128 = v4148 
                #endif
                let v4151 : std_string_String = _run_target_args'_v4128 
                (* run_target_args'
                let v4164 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4165 : string = "&*$0"
                let v4166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4087 v4165 
                let _run_target_args'_v4164 = v4166 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4167 : string = "&*$0"
                let v4168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4087 v4167 
                let _run_target_args'_v4164 = v4168 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4169 : string = "&*$0"
                let v4170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4087 v4169 
                let _run_target_args'_v4164 = v4170 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4172 : Ref<Str> = v4087 |> unbox<Ref<Str>>
                let _run_target_args'_v4164 = v4172 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4176 : Ref<Str> = v4087 |> unbox<Ref<Str>>
                let _run_target_args'_v4164 = v4176 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4180 : Ref<Str> = v4087 |> unbox<Ref<Str>>
                let _run_target_args'_v4164 = v4180 
                #endif
#else
                let v4184 : Ref<Str> = v4087 |> unbox<Ref<Str>>
                let _run_target_args'_v4164 = v4184 
                #endif
                let v4187 : Ref<Str> = _run_target_args'_v4164 
                (* run_target_args'
                let v4200 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4201 : string = "String::from($0)"
                let v4202 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4187 v4201 
                let _run_target_args'_v4200 = v4202 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4203 : string = "String::from($0)"
                let v4204 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4187 v4203 
                let _run_target_args'_v4200 = v4204 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4205 : string = "String::from($0)"
                let v4206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4187 v4205 
                let _run_target_args'_v4200 = v4206 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4208 : std_string_String = v4187 |> unbox<std_string_String>
                let _run_target_args'_v4200 = v4208 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4212 : std_string_String = v4187 |> unbox<std_string_String>
                let _run_target_args'_v4200 = v4212 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4216 : std_string_String = v4187 |> unbox<std_string_String>
                let _run_target_args'_v4200 = v4216 
                #endif
#else
                let v4220 : std_string_String = v4187 |> unbox<std_string_String>
                let _run_target_args'_v4200 = v4220 
                #endif
                let v4223 : std_string_String = _run_target_args'_v4200 
                let v4233 : (std_string_String * std_string_String) = v4151, v4223 
                let func1_from_result = v4233 //
                let v4236 : _ = func1_from_result
                let v4237 : string = $"true; $0 /*"
                let v4238 : bool = Fable.Core.RustInterop.emitRustExpr v4236 v4237 
                let v4239 : string = $"*/ }}); //"
                let v4240 : bool = Fable.Core.RustInterop.emitRustExpr () v4239 
                let v4241 : string = $"_func1_from_v4082"
                let v4242 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v4241 
                let v4243 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v4244 : (struct (string * string) -> (std_string_String * std_string_String)) = closure67(v4242)
                let v4245 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4081, v4244) v4243 
                let v4246 : string = "std::collections::BTreeMap::from_iter(v4245.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v4247 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4246 
                let v4248 : string = "serde_json::to_string(&v4247)"
                let v4249 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4248 
                (* run_target_args'
                let v4251 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4252 : string = "$0.unwrap()"
                let v4253 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4249 v4252 
                let _run_target_args'_v4251 = v4253 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4254 : string = "$0.unwrap()"
                let v4255 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4249 v4254 
                let _run_target_args'_v4251 = v4255 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4256 : string = "$0.unwrap()"
                let v4257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4249 v4256 
                let _run_target_args'_v4251 = v4257 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4258 : std_string_String = match v4249 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4251 = v4258 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4259 : std_string_String = match v4249 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4251 = v4259 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4260 : std_string_String = match v4249 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4251 = v4260 
                #endif
#else
                let v4261 : std_string_String = match v4249 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4251 = v4261 
                #endif
                let v4262 : std_string_String = _run_target_args'_v4251 
                let v4265 : string = "fable_library_rust::String_::fromString($0)"
                let v4266 : string = Fable.Core.RustInterop.emitRustExpr v4262 v4265 
                let v4267 : string = "command_result"
                [|struct (v4267, v4266)|]
            else
                let v4269 : string = "fable_library_rust::String_::fromString($0)"
                let v4270 : string = Fable.Core.RustInterop.emitRustExpr v40 v4269 
                let v4271 : bool = v4270 = "cuda"
                if v4271 then
                    let v4272 : string = method164()
                    (* run_target_args'
                    let v4277 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4278 : string = "&*$0"
                    let v4279 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4272 v4278 
                    let _run_target_args'_v4277 = v4279 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4280 : string = "&*$0"
                    let v4281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4272 v4280 
                    let _run_target_args'_v4277 = v4281 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4282 : string = "&*$0"
                    let v4283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4272 v4282 
                    let _run_target_args'_v4277 = v4283 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4285 : Ref<Str> = v4272 |> unbox<Ref<Str>>
                    let _run_target_args'_v4277 = v4285 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4289 : Ref<Str> = v4272 |> unbox<Ref<Str>>
                    let _run_target_args'_v4277 = v4289 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4293 : Ref<Str> = v4272 |> unbox<Ref<Str>>
                    let _run_target_args'_v4277 = v4293 
                    #endif
#else
                    let v4297 : Ref<Str> = v4272 |> unbox<Ref<Str>>
                    let _run_target_args'_v4277 = v4297 
                    #endif
                    let v4300 : Ref<Str> = _run_target_args'_v4277 
                    let v4309 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4310 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4300) v4309 
                    let v4313 : (std_string_String -> US8) = method20()
                    let v4314 : US8 option = v4310 |> Option.map v4313 
                    let v4334 : US8 = US8_1
                    let v4335 : US8 = v4314 |> Option.defaultValue v4334 
                    let v4342 : std_string_String =
                        match v4335 with
                        | US8_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US8_0(v4339) -> (* Some *)
                            v4339
                    let v4343 : string = "fable_library_rust::String_::fromString($0)"
                    let v4344 : string = Fable.Core.RustInterop.emitRustExpr v4342 v4343 
                    let v4345 : string = method165()
                    (* run_target_args'
                    let v4350 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4351 : string = "&*$0"
                    let v4352 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4345 v4351 
                    let _run_target_args'_v4350 = v4352 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4353 : string = "&*$0"
                    let v4354 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4345 v4353 
                    let _run_target_args'_v4350 = v4354 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4355 : string = "&*$0"
                    let v4356 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4345 v4355 
                    let _run_target_args'_v4350 = v4356 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4358 : Ref<Str> = v4345 |> unbox<Ref<Str>>
                    let _run_target_args'_v4350 = v4358 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4362 : Ref<Str> = v4345 |> unbox<Ref<Str>>
                    let _run_target_args'_v4350 = v4362 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4366 : Ref<Str> = v4345 |> unbox<Ref<Str>>
                    let _run_target_args'_v4350 = v4366 
                    #endif
#else
                    let v4370 : Ref<Str> = v4345 |> unbox<Ref<Str>>
                    let _run_target_args'_v4350 = v4370 
                    #endif
                    let v4373 : Ref<Str> = _run_target_args'_v4350 
                    let v4382 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4383 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4373) v4382 
                    let v4386 : (std_string_String -> US8) = method20()
                    let v4387 : US8 option = v4383 |> Option.map v4386 
                    let v4407 : US8 = US8_1
                    let v4408 : US8 = v4387 |> Option.defaultValue v4407 
                    let v4469 : US36 =
                        match v4408 with
                        | US8_1 -> (* None *)
                            US36_1
                        | US8_0(v4412) -> (* Some *)
                            let v4413 : string = "fable_library_rust::String_::fromString($0)"
                            let v4414 : string = Fable.Core.RustInterop.emitRustExpr v4412 v4413 
                            
                            
                            
                            
                            let v4417 : string = "Poetry"
                            let v4418 : (unit -> string) = v4417.ToLower
                            let v4419 : string = v4418 ()
                            let v4424 : string = "Pip"
                            let v4425 : (unit -> string) = v4424.ToLower
                            let v4426 : string = v4425 ()
                            let v4429 : bool = "Pip" = v4414
                            let v4433 : US37 =
                                if v4429 then
                                    let v4430 : US38 = US38_0
                                    US37_0(v4430)
                                else
                                    US37_1
                            let v4465 : US37 =
                                match v4433 with
                                | US37_1 -> (* None *)
                                    let v4436 : bool = "Poetry" = v4414
                                    let v4440 : US37 =
                                        if v4436 then
                                            let v4437 : US38 = US38_1
                                            US37_0(v4437)
                                        else
                                            US37_1
                                    match v4440 with
                                    | US37_1 -> (* None *)
                                        let v4443 : bool = v4426 = v4414
                                        let v4447 : US37 =
                                            if v4443 then
                                                let v4444 : US38 = US38_0
                                                US37_0(v4444)
                                            else
                                                US37_1
                                        match v4447 with
                                        | US37_1 -> (* None *)
                                            let v4450 : bool = v4419 = v4414
                                            let v4454 : US37 =
                                                if v4450 then
                                                    let v4451 : US38 = US38_1
                                                    US37_0(v4451)
                                                else
                                                    US37_1
                                            match v4454 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v4455) -> (* Some *)
                                                US37_0(v4455)
                                        | US37_0(v4448) -> (* Some *)
                                            US37_0(v4448)
                                    | US37_0(v4441) -> (* Some *)
                                        US37_0(v4441)
                                | US37_0(v4434) -> (* Some *)
                                    US37_0(v4434)
                            US36_0(v4465)
                    let v4476 : US37 =
                        match v4469 with
                        | US36_0(v4470) -> (* Some *)
                            match v4470 with
                            | US37_0(v4471) -> (* Some *)
                                US37_0(v4471)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v4480 : US38 =
                        match v4476 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v4477) -> (* Some *)
                            v4477
                    let v4481 : string = method22()
                    (* run_target_args'
                    let v4486 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4487 : string = "&*$0"
                    let v4488 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4481 v4487 
                    let _run_target_args'_v4486 = v4488 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4489 : string = "&*$0"
                    let v4490 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4481 v4489 
                    let _run_target_args'_v4486 = v4490 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4491 : string = "&*$0"
                    let v4492 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4481 v4491 
                    let _run_target_args'_v4486 = v4492 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4494 : Ref<Str> = v4481 |> unbox<Ref<Str>>
                    let _run_target_args'_v4486 = v4494 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4498 : Ref<Str> = v4481 |> unbox<Ref<Str>>
                    let _run_target_args'_v4486 = v4498 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4502 : Ref<Str> = v4481 |> unbox<Ref<Str>>
                    let _run_target_args'_v4486 = v4502 
                    #endif
#else
                    let v4506 : Ref<Str> = v4481 |> unbox<Ref<Str>>
                    let _run_target_args'_v4486 = v4506 
                    #endif
                    let v4509 : Ref<Str> = _run_target_args'_v4486 
                    let v4518 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v4519 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4509) v4518 
                    let v4522 : (Vec<std_string_String> -> US12) = method23()
                    let v4523 : US12 option = v4519 |> Option.map v4522 
                    let v4543 : US12 = US12_1
                    let v4544 : US12 = v4523 |> Option.defaultValue v4543 
                    let v4548 : (std_string_String []) = [||]
                    let v4549 : string = "$0.to_vec()"
                    let v4550 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4548 v4549 
                    let v4553 : Vec<std_string_String> =
                        match v4544 with
                        | US12_1 -> (* None *)
                            v4550
                        | US12_0(v4551) -> (* Some *)
                            v4551
                    (* run_target_args'
                    let v4558 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v4563 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4564 : string = "std::fs::read(&*$0)"
                    let v4565 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4344 v4564 
                    (* run_target_args'
                    let v4567 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4568 : string = "$0.unwrap()"
                    let v4569 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4565 v4568 
                    let _run_target_args'_v4567 = v4569 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4570 : string = "$0.unwrap()"
                    let v4571 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4565 v4570 
                    let _run_target_args'_v4567 = v4571 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4572 : string = "$0.unwrap()"
                    let v4573 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4565 v4572 
                    let _run_target_args'_v4567 = v4573 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4574 : Vec<uint8> = match v4565 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4567 = v4574 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4575 : Vec<uint8> = match v4565 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4567 = v4575 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4576 : Vec<uint8> = match v4565 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4567 = v4576 
                    #endif
#else
                    let v4577 : Vec<uint8> = match v4565 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4567 = v4577 
                    #endif
                    let v4578 : Vec<uint8> = _run_target_args'_v4567 
                    let _run_target_args'_v4563 = v4578 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4582 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4563 = v4582 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4586 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4563 = v4586 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4590 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4563 = v4590 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4594 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4563 = v4594 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4598 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4563 = v4598 
                    #endif
#else
                    let v4601 : (uint8 []) = v4344 |> System.IO.File.ReadAllBytes
                    let v4602 : string = "$0.to_vec()"
                    let v4603 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4601 v4602 
                    let _run_target_args'_v4563 = v4603 
                    #endif
                    let v4604 : Vec<uint8> = _run_target_args'_v4563 
                    let v4613 : Vec<uint8> = method24(v4604)
                    let v4614 : string = "std::string::String::from_utf8($0)"
                    let v4615 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4613 v4614 
                    (* run_target_args'
                    let v4617 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4618 : string = "$0.unwrap()"
                    let v4619 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4615 v4618 
                    let _run_target_args'_v4617 = v4619 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4620 : string = "$0.unwrap()"
                    let v4621 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4615 v4620 
                    let _run_target_args'_v4617 = v4621 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4622 : string = "$0.unwrap()"
                    let v4623 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4615 v4622 
                    let _run_target_args'_v4617 = v4623 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4624 : std_string_String = match v4615 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4617 = v4624 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4625 : std_string_String = match v4615 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4617 = v4625 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4626 : std_string_String = match v4615 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4617 = v4626 
                    #endif
#else
                    let v4627 : std_string_String = match v4615 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4617 = v4627 
                    #endif
                    let v4628 : std_string_String = _run_target_args'_v4617 
                    let v4631 : string = "fable_library_rust::String_::fromString($0)"
                    let v4632 : string = Fable.Core.RustInterop.emitRustExpr v4628 v4631 
                    let _run_target_args'_v4558 = v4632 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4634 : string = null |> unbox<string>
                    let _run_target_args'_v4558 = v4634 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4638 : string = null |> unbox<string>
                    let _run_target_args'_v4558 = v4638 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4642 : string = null |> unbox<string>
                    let _run_target_args'_v4558 = v4642 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4646 : string = null |> unbox<string>
                    let _run_target_args'_v4558 = v4646 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4650 : string = null |> unbox<string>
                    let _run_target_args'_v4558 = v4650 
                    #endif
#else
                    let v4653 : string = v4344 |> System.IO.File.ReadAllText
                    let _run_target_args'_v4558 = v4653 
                    #endif
                    let v4654 : string = _run_target_args'_v4558 
                    let v4663 : string = method31()
                    let v4664 : US5 = method32(v4663)
                    let v4670 : US5 =
                        match v4664 with
                        | US5_1 -> (* None *)
                            let v4667 : string = __SOURCE_DIRECTORY__
                            method32(v4667)
                        | US5_0(v4665) -> (* Some *)
                            US5_0(v4665)
                    let v4676 : US5 =
                        match v4670 with
                        | US5_1 -> (* None *)
                            let v4673 : string = "/workspaces"
                            method32(v4673)
                        | US5_0(v4671) -> (* Some *)
                            US5_0(v4671)
                    let v4680 : string =
                        match v4676 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v4677) -> (* Some *)
                            v4677
                    let v4681 : string = method52(v4680)
                    let v4682 : bool = "deps" = v4681
                    let v4693 : string =
                        if v4682 then
                            let v4683 : string option = method38(v4680)
                            let v4685 : string = v4683 |> Option.get
                            let v4688 : US5 = method32(v4685)
                            match v4688 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v4689) -> (* Some *)
                                v4689
                        else
                            v4680
                    let v4694 : string = "polyglot"
                    let v4695 : string = method33(v4693, v4694)
                    let v4696 : string = method31()
                    let v4698 : (unit -> string) = v4696.ToLower
                    let v4699 : string = v4698 ()
                    let v4703 : (unit -> string) = v4695.ToLower
                    let v4704 : string = v4703 ()
                    let v4708 : bool = v4699.StartsWith (v4704, false, null)
                    let v4713 : US14 =
                        if v4708 then
                            US14_1(v4704)
                        else
                            US14_0(v4704)
                    let v4725 : Result<string, string> =
                        match v4713 with
                        | US14_1(v4719) -> (* Error *)
                            let v4721 : Result<string, string> = Error v4719 
                            v4721
                        | US14_0(v4714) -> (* Ok *)
                            let v4716 : Result<string, string> = Ok v4714 
                            v4716
                    let v4726 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v4727 : bool = Fable.Core.RustInterop.emitRustExpr v4725 v4726 
                    let v4728 : string = "x"
                    let v4729 : string = Fable.Core.RustInterop.emitRustExpr () v4728 
                    let v4730 : string = "true; $0 })"
                    let v4731 : bool = Fable.Core.RustInterop.emitRustExpr v4729 v4730 
                    let v4732 : string = "_result_unwrap_or_else"
                    let v4733 : string = Fable.Core.RustInterop.emitRustExpr () v4732 
                    let v4734 : string option = method38(v4344)
                    let v4737 : string = ""
                    let v4738 : string = v4734 |> Option.defaultValue v4737 
                    let v4746 : string =
                        match v4480 with
                        | US38_0 -> (* Pip *)
                            let v4741 : string = "requirements.txt"
                            method33(v4738, v4741)
                        | US38_1 -> (* Poetry *)
                            let v4743 : string = "pyproject.toml"
                            method33(v4738, v4743)
                    let v4747 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v4748 : bool = Fable.Core.RustInterop.emitRustExpr v4553 v4747 
                    let v4749 : string = "x"
                    let v4750 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4749 
                    let v4751 : string = "fable_library_rust::String_::fromString($0)"
                    let v4752 : string = Fable.Core.RustInterop.emitRustExpr v4750 v4751 
                    let v4755 : string = "="
                    let v4756 : bool = v4752.Contains v4755 
                    let v4771 : string =
                        if v4756 then
                            v4752
                        else
                            let v4761 : string = "]"
                            let v4762 : bool = v4752.EndsWith (v4761, false, null)
                            if v4762 then
                                let v4765 : string = $"={{version='*',features=["
                                let v4766 : string = "["
                                let v4767 : string = v4752.Replace (v4766, v4765)
                                let v4768 : string = $"{v4767}}}"
                                v4768
                            else
                                let v4769 : string = $"{v4752}='*'"
                                v4769
                    let v4772 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v4773 : bool = Fable.Core.RustInterop.emitRustExpr v4771 v4772 
                    let v4774 : string = "_vec_map"
                    let v4775 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4774 
                    let v4776 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v4777 : (string []) = Fable.Core.RustInterop.emitRustExpr v4775 v4776 
                    let v4782 : unit = ()
                    let _let'_v4782 =
                        seq {
                            for i = 0 to v4777.Length - 1 do yield v4777.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v4785 : string seq = _let'_v4782 
                    let v4793 : string = method75()
                    let v4794 : (string -> (string seq -> string)) = String.concat
                    let v4795 : (string seq -> string) = v4794 v4793
                    let v4796 : string = v4795 v4785
                    let v4800 : bool = v4796 = ""
                    let struct (v4943 : int32, v4944 : string) =
                        if v4800 then
                            struct (0, v4737)
                        else
                            let v4913 : string =
                                match v4480 with
                                | US38_0 -> (* Pip *)
                                    v4796
                                | US38_1 -> (* Poetry *)
                                    let v4801 : string = $"[tool.poetry]"
                                    let v4802 : string = $"name = \"test\""
                                    let v4805 : string = "\n"
                                    let v4806 : string = v4801 + v4805 
                                    let v4810 : string = v4806 + v4802 
                                    let v4813 : string = $"version = \"0.0.1\""
                                    let v4815 : string = v4810 + v4805 
                                    let v4819 : string = v4815 + v4813 
                                    let v4822 : string = $"description = \"\""
                                    let v4824 : string = v4819 + v4805 
                                    let v4828 : string = v4824 + v4822 
                                    let v4831 : string = $"authors = []"
                                    let v4833 : string = v4828 + v4805 
                                    let v4837 : string = v4833 + v4831 
                                    let v4840 : string = $""
                                    let v4842 : string = v4837 + v4805 
                                    let v4846 : string = v4842 + v4840 
                                    let v4849 : string = $"[tool.poetry.dependencies]"
                                    let v4851 : string = v4846 + v4805 
                                    let v4855 : string = v4851 + v4849 
                                    let v4858 : string = $"python=\"~3.12\""
                                    let v4860 : string = v4855 + v4805 
                                    let v4864 : string = v4860 + v4858 
                                    let v4867 : string = $"{v4796}"
                                    let v4869 : string = v4864 + v4805 
                                    let v4873 : string = v4869 + v4867 
                                    let v4876 : string = $""
                                    let v4878 : string = v4873 + v4805 
                                    let v4882 : string = v4878 + v4876 
                                    let v4885 : string = $"[build-system]"
                                    let v4887 : string = v4882 + v4805 
                                    let v4891 : string = v4887 + v4885 
                                    let v4894 : string = $"requires = [\"poetry-core\"]"
                                    let v4896 : string = v4891 + v4805 
                                    let v4900 : string = v4896 + v4894 
                                    let v4903 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v4905 : string = v4900 + v4805 
                                    let v4909 : string = v4905 + v4903 
                                    v4909
                            method76(v4746, v4913)
                            let v4915 : System.Threading.CancellationToken option = None
                            let v4918 : (struct (string * string) []) = [||]
                            let v4920 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v4924 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v4928 : string option = None
                            let v4934 : string =
                                match v4480 with
                                | US38_0 -> (* Pip *)
                                    let v4931 : string = $"pip install -r requirements.txt"
                                    v4931
                                | US38_1 -> (* Poetry *)
                                    let v4932 : string = $"poetry install"
                                    v4932
                            let v4936 : string option = Some v4738 
                            let v4939 : bool = true
                            let v4940 : bool = true
                            method90(v4934, v4915, v4918, v4920, v4924, v4939, v4936, v4940)
                    let v4946 : bool = v4943 <> 0 
                    let struct (v6301 : US5, v6302 : US5, v6303 : US5, v6304 : US5) =
                        if v4946 then
                            let v5258 : unit = ()
                            let v5259 : (unit -> unit) = closure68(v4480, v4344, v4944, v4943)
                            let v5260 : unit = (fun () -> v5259 (); v5258) ()
                            let v5573 : string = "py"
                            let v5574 : US5 = US5_0(v5573)
                            let v5575 : US5 = US5_1
                            let v5576 : US5 = US5_1
                            let v5577 : US5 = US5_1
                            struct (v5574, v5575, v5576, v5577)
                        else
                            let v5581 : string =
                                match v4480 with
                                | US38_0 -> (* Pip *)
                                    let v5578 : string = $"python \"{v4344}\""
                                    v5578
                                | US38_1 -> (* Poetry *)
                                    let v5579 : string = $"poetry run python \"{v4344}\""
                                    v5579
                            let v5582 : string = "TRACE_LEVEL"
                            let v5583 : string = "Verbose"
                            let v5584 : (struct (string * string) []) = [|struct (v5582, v5583)|]
                            let v5586 : System.Threading.CancellationToken option = None
                            let v5589 : (struct (string * string) []) = [||]
                            let v5591 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v5595 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v5599 : string option = None
                            let v5603 : string option = Some v4738 
                            let v5606 : bool = true
                            let v5607 : bool = true
                            let struct (v5608 : int32, v5609 : string) = method90(v5581, v5586, v5584, v5591, v5595, v5606, v5603, v5607)
                            let v5610 : int32 = v5584.Length
                            let v5611 : (string []) = Array.zeroCreate<string> (v5610)
                            let v5612 : Mut5 = {l0 = 0} : Mut5
                            while method29(v5610, v5612) do
                                let v5614 : int32 = v5612.l0
                                let struct (v5615 : string, v5616 : string) = v5584.[int v5614]
                                let v5617 : string = $"$env:{v5615}=''{v5616}''"
                                v5611.[int v5614] <- v5617
                                let v5618 : int32 = v5614 + 1
                                v5612.l0 <- v5618
                                ()
                            let v5620 : string seq = v5611 |> Seq.ofArray
                            let v5625 : (string -> (string seq -> string)) = String.concat
                            let v5626 : string = ";"
                            let v5627 : (string seq -> string) = v5625 v5626
                            let v5628 : string = v5627 v5620
                            let v5631 : string = $"pwsh -c '{v5628}; {v5581}'"
                            let v5632 : bool = v5608 = 0
                            let v5639 : bool =
                                if v5632 then
                                    true
                                else
                                    let v5635 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v5636 : bool = v5609.Contains v5635 
                                    v5636
                            let struct (v6297 : US5, v6298 : US5, v6299 : US5, v6300 : US5) =
                                if v5639 then
                                    let v5640 : (string -> US5) = closure62()
                                    let v5641 : (unit -> string) = closure69(v5609)
                                    let v5642 : (exn -> US5) = closure70(v4344, v5609, v5631)
                                    let v5645 : US5 = US5_1
                                    let result = ref v5645
                                    try
                                        result.Value <- v5641 () |> v5640 
                                    with ex ->
                                        result.Value <- v5642 ex 
                                    let v5646 : US5 = result.Value
                                    let v5660 : string option =
                                        match v5646 with
                                        | US5_1 -> (* None *)
                                            let v5656 : string option = None
                                            v5656
                                        | US5_0(v5650) -> (* Some *)
                                            let v5652 : string option = Some v5650 
                                            v5652
                                    let v5661 : string = "$0.unwrap()"
                                    let v5662 : string = Fable.Core.RustInterop.emitRustExpr v5660 v5661 
                                    let v5663 : string = "py"
                                    let v5664 : US5 = US5_0(v5663)
                                    let v5665 : US5 = US5_0(v4654)
                                    let v5666 : US5 = US5_0(v4344)
                                    let v5667 : US5 = US5_0(v5662)
                                    struct (v5664, v5665, v5666, v5667)
                                else
                                    let v5977 : unit = ()
                                    let v5978 : (unit -> unit) = closure72(v4344, v5609, v5608, v5631)
                                    let v5979 : unit = (fun () -> v5978 (); v5977) ()
                                    let v6292 : string = "py"
                                    let v6293 : US5 = US5_0(v6292)
                                    let v6294 : US5 = US5_1
                                    let v6295 : US5 = US5_1
                                    let v6296 : US5 = US5_1
                                    struct (v6293, v6294, v6295, v6296)
                            struct (v6297, v6298, v6299, v6300)
                    let v6307 : string =
                        match v6301 with
                        | US5_1 -> (* None *)
                            v4737
                        | US5_0(v6305) -> (* Some *)
                            v6305
                    let v6308 : string = "extension"
                    let v6311 : string =
                        match v6302 with
                        | US5_1 -> (* None *)
                            v4737
                        | US5_0(v6309) -> (* Some *)
                            v6309
                    let v6312 : string = "code"
                    let v6315 : string =
                        match v6304 with
                        | US5_1 -> (* None *)
                            v4737
                        | US5_0(v6313) -> (* Some *)
                            v6313
                    let v6316 : string = "output"
                    let v6317 : (struct (string * string) []) = [|struct (v6308, v6307); struct (v6312, v6311); struct (v6316, v6315)|]
                    let v6318 : string = "$0.to_vec()"
                    let v6319 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6317 v6318 
                    let v6320 : unit = ()
                    let v6321 : string = $"true; let _func1_from_v6320 = Func1::from(move |value| {{ //"
                    let v6322 : bool = Fable.Core.RustInterop.emitRustExpr () v6321 
                    let v6323 : string = $"value"
                    let struct (v6324 : string, v6325 : string) = Fable.Core.RustInterop.emitRustExpr () v6323 
                    (* run_target_args'
                    let v6330 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6331 : string = "&*$0"
                    let v6332 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6324 v6331 
                    let _run_target_args'_v6330 = v6332 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6333 : string = "&*$0"
                    let v6334 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6324 v6333 
                    let _run_target_args'_v6330 = v6334 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6335 : string = "&*$0"
                    let v6336 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6324 v6335 
                    let _run_target_args'_v6330 = v6336 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6338 : Ref<Str> = v6324 |> unbox<Ref<Str>>
                    let _run_target_args'_v6330 = v6338 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6342 : Ref<Str> = v6324 |> unbox<Ref<Str>>
                    let _run_target_args'_v6330 = v6342 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6346 : Ref<Str> = v6324 |> unbox<Ref<Str>>
                    let _run_target_args'_v6330 = v6346 
                    #endif
#else
                    let v6350 : Ref<Str> = v6324 |> unbox<Ref<Str>>
                    let _run_target_args'_v6330 = v6350 
                    #endif
                    let v6353 : Ref<Str> = _run_target_args'_v6330 
                    (* run_target_args'
                    let v6366 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6367 : string = "String::from($0)"
                    let v6368 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6353 v6367 
                    let _run_target_args'_v6366 = v6368 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6369 : string = "String::from($0)"
                    let v6370 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6353 v6369 
                    let _run_target_args'_v6366 = v6370 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6371 : string = "String::from($0)"
                    let v6372 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6353 v6371 
                    let _run_target_args'_v6366 = v6372 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6374 : std_string_String = v6353 |> unbox<std_string_String>
                    let _run_target_args'_v6366 = v6374 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6378 : std_string_String = v6353 |> unbox<std_string_String>
                    let _run_target_args'_v6366 = v6378 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6382 : std_string_String = v6353 |> unbox<std_string_String>
                    let _run_target_args'_v6366 = v6382 
                    #endif
#else
                    let v6386 : std_string_String = v6353 |> unbox<std_string_String>
                    let _run_target_args'_v6366 = v6386 
                    #endif
                    let v6389 : std_string_String = _run_target_args'_v6366 
                    (* run_target_args'
                    let v6402 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6403 : string = "&*$0"
                    let v6404 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6325 v6403 
                    let _run_target_args'_v6402 = v6404 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6405 : string = "&*$0"
                    let v6406 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6325 v6405 
                    let _run_target_args'_v6402 = v6406 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6407 : string = "&*$0"
                    let v6408 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6325 v6407 
                    let _run_target_args'_v6402 = v6408 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6410 : Ref<Str> = v6325 |> unbox<Ref<Str>>
                    let _run_target_args'_v6402 = v6410 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6414 : Ref<Str> = v6325 |> unbox<Ref<Str>>
                    let _run_target_args'_v6402 = v6414 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6418 : Ref<Str> = v6325 |> unbox<Ref<Str>>
                    let _run_target_args'_v6402 = v6418 
                    #endif
#else
                    let v6422 : Ref<Str> = v6325 |> unbox<Ref<Str>>
                    let _run_target_args'_v6402 = v6422 
                    #endif
                    let v6425 : Ref<Str> = _run_target_args'_v6402 
                    (* run_target_args'
                    let v6438 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6439 : string = "String::from($0)"
                    let v6440 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6425 v6439 
                    let _run_target_args'_v6438 = v6440 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6441 : string = "String::from($0)"
                    let v6442 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6425 v6441 
                    let _run_target_args'_v6438 = v6442 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6443 : string = "String::from($0)"
                    let v6444 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6425 v6443 
                    let _run_target_args'_v6438 = v6444 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6446 : std_string_String = v6425 |> unbox<std_string_String>
                    let _run_target_args'_v6438 = v6446 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6450 : std_string_String = v6425 |> unbox<std_string_String>
                    let _run_target_args'_v6438 = v6450 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6454 : std_string_String = v6425 |> unbox<std_string_String>
                    let _run_target_args'_v6438 = v6454 
                    #endif
#else
                    let v6458 : std_string_String = v6425 |> unbox<std_string_String>
                    let _run_target_args'_v6438 = v6458 
                    #endif
                    let v6461 : std_string_String = _run_target_args'_v6438 
                    let v6471 : (std_string_String * std_string_String) = v6389, v6461 
                    let func1_from_result = v6471 //
                    let v6474 : _ = func1_from_result
                    let v6475 : string = $"true; $0 /*"
                    let v6476 : bool = Fable.Core.RustInterop.emitRustExpr v6474 v6475 
                    let v6477 : string = $"*/ }}); //"
                    let v6478 : bool = Fable.Core.RustInterop.emitRustExpr () v6477 
                    let v6479 : string = $"_func1_from_v6320"
                    let v6480 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6479 
                    let v6481 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v6482 : (struct (string * string) -> (std_string_String * std_string_String)) = closure67(v6480)
                    let v6483 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6319, v6482) v6481 
                    let v6484 : string = "std::collections::BTreeMap::from_iter(v6483.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v6485 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6484 
                    let v6486 : string = "serde_json::to_string(&v6485)"
                    let v6487 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6486 
                    (* run_target_args'
                    let v6489 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6490 : string = "$0.unwrap()"
                    let v6491 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6487 v6490 
                    let _run_target_args'_v6489 = v6491 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6492 : string = "$0.unwrap()"
                    let v6493 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6487 v6492 
                    let _run_target_args'_v6489 = v6493 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6494 : string = "$0.unwrap()"
                    let v6495 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6487 v6494 
                    let _run_target_args'_v6489 = v6495 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6496 : std_string_String = match v6487 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6489 = v6496 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6497 : std_string_String = match v6487 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6489 = v6497 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6498 : std_string_String = match v6487 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6489 = v6498 
                    #endif
#else
                    let v6499 : std_string_String = match v6487 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6489 = v6499 
                    #endif
                    let v6500 : std_string_String = _run_target_args'_v6489 
                    let v6503 : string = "fable_library_rust::String_::fromString($0)"
                    let v6504 : string = Fable.Core.RustInterop.emitRustExpr v6500 v6503 
                    let v6505 : string = "command_result"
                    [|struct (v6505, v6504)|]
                else
                    let v6507 : string = "fable_library_rust::String_::fromString($0)"
                    let v6508 : string = Fable.Core.RustInterop.emitRustExpr v40 v6507 
                    let v6509 : bool = v6508 = "fable"
                    if v6509 then
                        let v6510 : string = method171()
                        (* run_target_args'
                        let v6515 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6516 : string = "&*$0"
                        let v6517 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6510 v6516 
                        let _run_target_args'_v6515 = v6517 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6518 : string = "&*$0"
                        let v6519 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6510 v6518 
                        let _run_target_args'_v6515 = v6519 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6520 : string = "&*$0"
                        let v6521 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6510 v6520 
                        let _run_target_args'_v6515 = v6521 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6523 : Ref<Str> = v6510 |> unbox<Ref<Str>>
                        let _run_target_args'_v6515 = v6523 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6527 : Ref<Str> = v6510 |> unbox<Ref<Str>>
                        let _run_target_args'_v6515 = v6527 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6531 : Ref<Str> = v6510 |> unbox<Ref<Str>>
                        let _run_target_args'_v6515 = v6531 
                        #endif
#else
                        let v6535 : Ref<Str> = v6510 |> unbox<Ref<Str>>
                        let _run_target_args'_v6515 = v6535 
                        #endif
                        let v6538 : Ref<Str> = _run_target_args'_v6515 
                        let v6547 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6548 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6538) v6547 
                        let v6551 : (std_string_String -> US8) = method20()
                        let v6552 : US8 option = v6548 |> Option.map v6551 
                        let v6572 : US8 = US8_1
                        let v6573 : US8 = v6552 |> Option.defaultValue v6572 
                        let v6580 : std_string_String =
                            match v6573 with
                            | US8_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US8_0(v6577) -> (* Some *)
                                v6577
                        let v6581 : string = "fable_library_rust::String_::fromString($0)"
                        let v6582 : string = Fable.Core.RustInterop.emitRustExpr v6580 v6581 
                        let v6583 : string = method172()
                        (* run_target_args'
                        let v6588 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6589 : string = "&*$0"
                        let v6590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6583 v6589 
                        let _run_target_args'_v6588 = v6590 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6591 : string = "&*$0"
                        let v6592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6583 v6591 
                        let _run_target_args'_v6588 = v6592 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6593 : string = "&*$0"
                        let v6594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6583 v6593 
                        let _run_target_args'_v6588 = v6594 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6596 : Ref<Str> = v6583 |> unbox<Ref<Str>>
                        let _run_target_args'_v6588 = v6596 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6600 : Ref<Str> = v6583 |> unbox<Ref<Str>>
                        let _run_target_args'_v6588 = v6600 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6604 : Ref<Str> = v6583 |> unbox<Ref<Str>>
                        let _run_target_args'_v6588 = v6604 
                        #endif
#else
                        let v6608 : Ref<Str> = v6583 |> unbox<Ref<Str>>
                        let _run_target_args'_v6588 = v6608 
                        #endif
                        let v6611 : Ref<Str> = _run_target_args'_v6588 
                        let v6620 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6621 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6611) v6620 
                        let v6624 : (std_string_String -> US8) = method20()
                        let v6625 : US8 option = v6621 |> Option.map v6624 
                        let v6645 : US8 = US8_1
                        let v6646 : US8 = v6625 |> Option.defaultValue v6645 
                        let v6656 : US5 =
                            match v6646 with
                            | US8_1 -> (* None *)
                                US5_1
                            | US8_0(v6650) -> (* Some *)
                                let v6651 : string = "fable_library_rust::String_::fromString($0)"
                                let v6652 : string = Fable.Core.RustInterop.emitRustExpr v6650 v6651 
                                US5_0(v6652)
                        let v6774 : string =
                            match v6656 with
                            | US5_1 -> (* None *)
                                let v6772 : string = "{}"
                                v6772
                            | US5_0(v6657) -> (* Some *)
                                let v6658 : clap_Command = method0()
                                let v6659 : string = $"_ {v6657} --fs-path \"{v6582}\""
                                let v6660 : US26 = method113(v6659)
                                let v6669 : (string []) =
                                    match v6660 with
                                    | US26_1(v6662) -> (* Error *)
                                        let v6664 : string = $"resultm.get / Error x: {v6662}"
                                        failwith<(string [])> v6664
                                    | US26_0(v6661) -> (* Ok *)
                                        v6661
                                let v6670 : string = "$0.to_vec()"
                                let v6671 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v6669 v6670 
                                let v6672 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v6673 : bool = Fable.Core.RustInterop.emitRustExpr v6671 v6672 
                                let v6674 : string = "x"
                                let v6675 : string = Fable.Core.RustInterop.emitRustExpr () v6674 
                                (* run_target_args'
                                let v6680 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6681 : string = "&*$0"
                                let v6682 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6675 v6681 
                                let _run_target_args'_v6680 = v6682 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6683 : string = "&*$0"
                                let v6684 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6675 v6683 
                                let _run_target_args'_v6680 = v6684 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6685 : string = "&*$0"
                                let v6686 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6675 v6685 
                                let _run_target_args'_v6680 = v6686 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6688 : Ref<Str> = v6675 |> unbox<Ref<Str>>
                                let _run_target_args'_v6680 = v6688 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6692 : Ref<Str> = v6675 |> unbox<Ref<Str>>
                                let _run_target_args'_v6680 = v6692 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6696 : Ref<Str> = v6675 |> unbox<Ref<Str>>
                                let _run_target_args'_v6680 = v6696 
                                #endif
#else
                                let v6700 : Ref<Str> = v6675 |> unbox<Ref<Str>>
                                let _run_target_args'_v6680 = v6700 
                                #endif
                                let v6703 : Ref<Str> = _run_target_args'_v6680 
                                (* run_target_args'
                                let v6716 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6717 : string = "String::from($0)"
                                let v6718 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6703 v6717 
                                let _run_target_args'_v6716 = v6718 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6719 : string = "String::from($0)"
                                let v6720 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6703 v6719 
                                let _run_target_args'_v6716 = v6720 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6721 : string = "String::from($0)"
                                let v6722 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6703 v6721 
                                let _run_target_args'_v6716 = v6722 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6724 : std_string_String = v6703 |> unbox<std_string_String>
                                let _run_target_args'_v6716 = v6724 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6728 : std_string_String = v6703 |> unbox<std_string_String>
                                let _run_target_args'_v6716 = v6728 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6732 : std_string_String = v6703 |> unbox<std_string_String>
                                let _run_target_args'_v6716 = v6732 
                                #endif
#else
                                let v6736 : std_string_String = v6703 |> unbox<std_string_String>
                                let _run_target_args'_v6716 = v6736 
                                #endif
                                let v6739 : std_string_String = _run_target_args'_v6716 
                                let v6748 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v6749 : bool = Fable.Core.RustInterop.emitRustExpr v6739 v6748 
                                let v6750 : string = "_vec_map"
                                let v6751 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6750 
                                let v6752 : string = "clap::Command::get_matches_from($0, v6751)"
                                let v6753 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v6658 v6752 
                                let v6754 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method17(v0, v6753)
                                let v6755 : string = "v6754.await"
                                let v6756 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6755 
                                (* run_target_args'
                                let v6758 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6759 : string = "$0.unwrap()"
                                let v6760 : string = Fable.Core.RustInterop.emitRustExpr v6756 v6759 
                                let _run_target_args'_v6758 = v6760 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6761 : string = "$0.unwrap()"
                                let v6762 : string = Fable.Core.RustInterop.emitRustExpr v6756 v6761 
                                let _run_target_args'_v6758 = v6762 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6763 : string = "$0.unwrap()"
                                let v6764 : string = Fable.Core.RustInterop.emitRustExpr v6756 v6763 
                                let _run_target_args'_v6758 = v6764 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6765 : string = match v6756 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6758 = v6765 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6766 : string = match v6756 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6758 = v6766 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6767 : string = match v6756 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6758 = v6767 
                                #endif
#else
                                let v6768 : string = match v6756 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6758 = v6768 
                                #endif
                                let v6769 : string = _run_target_args'_v6758 
                                v6769
                        let v6775 : string = "command_result"
                        [|struct (v6775, v6774)|]
                    else
                        let v6777 : string = "fable_library_rust::String_::fromString($0)"
                        let v6778 : string = Fable.Core.RustInterop.emitRustExpr v40 v6777 
                        let v6779 : bool = v6778 = "dib"
                        if v6779 then
                            let v6780 : string = method173()
                            (* run_target_args'
                            let v6785 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6786 : string = "&*$0"
                            let v6787 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6780 v6786 
                            let _run_target_args'_v6785 = v6787 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6788 : string = "&*$0"
                            let v6789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6780 v6788 
                            let _run_target_args'_v6785 = v6789 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6790 : string = "&*$0"
                            let v6791 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6780 v6790 
                            let _run_target_args'_v6785 = v6791 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6793 : Ref<Str> = v6780 |> unbox<Ref<Str>>
                            let _run_target_args'_v6785 = v6793 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6797 : Ref<Str> = v6780 |> unbox<Ref<Str>>
                            let _run_target_args'_v6785 = v6797 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6801 : Ref<Str> = v6780 |> unbox<Ref<Str>>
                            let _run_target_args'_v6785 = v6801 
                            #endif
#else
                            let v6805 : Ref<Str> = v6780 |> unbox<Ref<Str>>
                            let _run_target_args'_v6785 = v6805 
                            #endif
                            let v6808 : Ref<Str> = _run_target_args'_v6785 
                            let v6817 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6818 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6808) v6817 
                            let v6821 : (std_string_String -> string) = method174()
                            let v6822 : string option = v6818 |> Option.map v6821 
                            let v6842 : string = "$0.unwrap()"
                            let v6843 : string = Fable.Core.RustInterop.emitRustExpr v6822 v6842 
                            let v6844 : string = method176()
                            (* run_target_args'
                            let v6849 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6850 : string = "&*$0"
                            let v6851 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6844 v6850 
                            let _run_target_args'_v6849 = v6851 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6852 : string = "&*$0"
                            let v6853 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6844 v6852 
                            let _run_target_args'_v6849 = v6853 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6854 : string = "&*$0"
                            let v6855 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6844 v6854 
                            let _run_target_args'_v6849 = v6855 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6857 : Ref<Str> = v6844 |> unbox<Ref<Str>>
                            let _run_target_args'_v6849 = v6857 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6861 : Ref<Str> = v6844 |> unbox<Ref<Str>>
                            let _run_target_args'_v6849 = v6861 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6865 : Ref<Str> = v6844 |> unbox<Ref<Str>>
                            let _run_target_args'_v6849 = v6865 
                            #endif
#else
                            let v6869 : Ref<Str> = v6844 |> unbox<Ref<Str>>
                            let _run_target_args'_v6849 = v6869 
                            #endif
                            let v6872 : Ref<Str> = _run_target_args'_v6849 
                            let v6881 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6882 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6872) v6881 
                            let v6884 : uint8 = v6882 |> Option.defaultValue 1uy 
                            let v6887 : string = method177()
                            (* run_target_args'
                            let v6892 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6893 : string = "&*$0"
                            let v6894 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6887 v6893 
                            let _run_target_args'_v6892 = v6894 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6895 : string = "&*$0"
                            let v6896 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6887 v6895 
                            let _run_target_args'_v6892 = v6896 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6897 : string = "&*$0"
                            let v6898 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6887 v6897 
                            let _run_target_args'_v6892 = v6898 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6900 : Ref<Str> = v6887 |> unbox<Ref<Str>>
                            let _run_target_args'_v6892 = v6900 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6904 : Ref<Str> = v6887 |> unbox<Ref<Str>>
                            let _run_target_args'_v6892 = v6904 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6908 : Ref<Str> = v6887 |> unbox<Ref<Str>>
                            let _run_target_args'_v6892 = v6908 
                            #endif
#else
                            let v6912 : Ref<Str> = v6887 |> unbox<Ref<Str>>
                            let _run_target_args'_v6892 = v6912 
                            #endif
                            let v6915 : Ref<Str> = _run_target_args'_v6892 
                            let v6924 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6925 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6915) v6924 
                            let v6928 : (std_string_String -> US8) = method20()
                            let v6929 : US8 option = v6925 |> Option.map v6928 
                            let v6949 : US8 = US8_1
                            let v6950 : US8 = v6929 |> Option.defaultValue v6949 
                            let v6960 : US5 =
                                match v6950 with
                                | US8_1 -> (* None *)
                                    US5_1
                                | US8_0(v6954) -> (* Some *)
                                    let v6955 : string = "fable_library_rust::String_::fromString($0)"
                                    let v6956 : string = Fable.Core.RustInterop.emitRustExpr v6954 v6955 
                                    US5_0(v6956)
                            let v6961 : string = $"{v6843}.html"
                            let v6962 : string = $"{v6843}.ipynb"
                            let v6963 : uint8 = 1uy
                            let struct (v6964 : int32, v6965 : string) = method178(v6960, v6884, v6843, v6962, v6963)
                            let v6967 : bool = v6964 <> 0 
                            let struct (v8395 : int32, v8396 : string) =
                                if v6967 then
                                    struct (v6964, v6965)
                                else
                                    let v6971 : System.Threading.CancellationToken option = None
                                    let v6974 : (struct (string * string) []) = [||]
                                    let v6976 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v6980 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v6984 : string option = None
                                    let v6987 : string = $"jupyter nbconvert \"{v6962}\" --to html --HTMLExporter.theme=dark"
                                    let v6988 : bool = true
                                    let v6989 : bool = true
                                    let struct (v6990 : int32, v6991 : string) = method90(v6987, v6971, v6974, v6976, v6980, v6988, v6984, v6989)
                                    let v7304 : unit = ()
                                    let v7305 : (unit -> unit) = closure75(v6991, v6990)
                                    let v7306 : unit = (fun () -> v7305 (); v7304) ()
                                    let v7623 : bool = v6990 <> 0 
                                    if v7623 then
                                        let v7626 : string = $"repl_result: {v6965}

jupyter_result: {v6991}"
                                        struct (v6990, v7626)
                                    else
                                        (* run_target_args'
                                        let v7631 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v7636 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v7637 : string = "std::fs::read(&*$0)"
                                        let v7638 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6961 v7637 
                                        (* run_target_args'
                                        let v7640 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v7641 : string = "$0.unwrap()"
                                        let v7642 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7638 v7641 
                                        let _run_target_args'_v7640 = v7642 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v7643 : string = "$0.unwrap()"
                                        let v7644 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7638 v7643 
                                        let _run_target_args'_v7640 = v7644 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v7645 : string = "$0.unwrap()"
                                        let v7646 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7638 v7645 
                                        let _run_target_args'_v7640 = v7646 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v7647 : Vec<uint8> = match v7638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7640 = v7647 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v7648 : Vec<uint8> = match v7638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7640 = v7648 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v7649 : Vec<uint8> = match v7638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7640 = v7649 
                                        #endif
#else
                                        let v7650 : Vec<uint8> = match v7638 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7640 = v7650 
                                        #endif
                                        let v7651 : Vec<uint8> = _run_target_args'_v7640 
                                        let _run_target_args'_v7636 = v7651 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v7655 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v7636 = v7655 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v7659 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v7636 = v7659 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v7663 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v7636 = v7663 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v7667 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v7636 = v7667 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v7671 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v7636 = v7671 
                                        #endif
#else
                                        let v7674 : (uint8 []) = v6961 |> System.IO.File.ReadAllBytes
                                        let v7675 : string = "$0.to_vec()"
                                        let v7676 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7674 v7675 
                                        let _run_target_args'_v7636 = v7676 
                                        #endif
                                        let v7677 : Vec<uint8> = _run_target_args'_v7636 
                                        let v7686 : Vec<uint8> = method24(v7677)
                                        let v7687 : string = "std::string::String::from_utf8($0)"
                                        let v7688 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v7686 v7687 
                                        (* run_target_args'
                                        let v7690 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v7691 : string = "$0.unwrap()"
                                        let v7692 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7688 v7691 
                                        let _run_target_args'_v7690 = v7692 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v7693 : string = "$0.unwrap()"
                                        let v7694 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7688 v7693 
                                        let _run_target_args'_v7690 = v7694 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v7695 : string = "$0.unwrap()"
                                        let v7696 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7688 v7695 
                                        let _run_target_args'_v7690 = v7696 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v7697 : std_string_String = match v7688 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7690 = v7697 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v7698 : std_string_String = match v7688 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7690 = v7698 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v7699 : std_string_String = match v7688 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7690 = v7699 
                                        #endif
#else
                                        let v7700 : std_string_String = match v7688 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v7690 = v7700 
                                        #endif
                                        let v7701 : std_string_String = _run_target_args'_v7690 
                                        let v7704 : string = "fable_library_rust::String_::fromString($0)"
                                        let v7705 : string = Fable.Core.RustInterop.emitRustExpr v7701 v7704 
                                        let _run_target_args'_v7631 = v7705 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v7707 : string = null |> unbox<string>
                                        let _run_target_args'_v7631 = v7707 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v7711 : string = null |> unbox<string>
                                        let _run_target_args'_v7631 = v7711 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v7715 : string = null |> unbox<string>
                                        let _run_target_args'_v7631 = v7715 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v7719 : string = null |> unbox<string>
                                        let _run_target_args'_v7631 = v7719 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v7723 : string = null |> unbox<string>
                                        let _run_target_args'_v7631 = v7723 
                                        #endif
#else
                                        let v7726 : string = v6961 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v7631 = v7726 
                                        #endif
                                        let v7727 : string = _run_target_args'_v7631 
                                        let v7736 : string = "\r\n"
                                        let v7737 : string = "\n"
                                        let v7738 : string = v7727.Replace (v7736, v7737)
                                        (* run_target_args'
                                        let v7739 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v7740 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v6961, v7738) v7740 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v6961, v7738)
                                        #endif
                                        // run_target_args' is_unit
                                        let v7742 : System.Threading.CancellationToken option = None
                                        let v7745 : (struct (string * string) []) = [||]
                                        let v7747 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v7751 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v7755 : string option = None
                                        let v7758 : string = "'"
                                        let v7759 : string = "''"
                                        let v7760 : string = v6961.Replace (v7758, v7759)
                                        let v7761 : string = $"pwsh -c \"$counter = 1; $path = '{v7760}'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v7762 : bool = true
                                        let v7763 : bool = true
                                        let struct (v7764 : int32, v7765 : string) = method90(v7761, v7742, v7745, v7747, v7751, v7762, v7755, v7763)
                                        let v8076 : unit = ()
                                        let v8077 : (unit -> unit) = closure76(v7765, v7764)
                                        let v8078 : unit = (fun () -> v8077 (); v8076) ()
                                        let v8392 : string = $"repl_result: {v6965}

jupyter_result: {v6991}

pwsh_replace_html_result: {v7765}"
                                        struct (v7764, v8392)
                            let v8397 : string = "CI"
                            let v8398 : string = method3(v8397)
                            let v8399 : bool = v8398 = ""
                            if v8399 then
                                (* run_target_args'
                                let v8400 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v8401 : string = "std::fs::remove_file(&*$0)"
                                let v8402 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6962 v8401 
                                let v8403 : (std_io_Error -> string) = method46()
                                (* run_target_args'
                                let v8405 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v8406 : string = "$0.map_err(|x| $1(x))"
                                let v8407 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v8402, v8403) v8406 
                                let _run_target_args'_v8405 = v8407 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v8408 : string = "$0.map_err(|x| $1(x))"
                                let v8409 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v8402, v8403) v8408 
                                let _run_target_args'_v8405 = v8409 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v8410 : string = "$0.map_err(|x| $1(x))"
                                let v8411 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v8402, v8403) v8410 
                                let _run_target_args'_v8405 = v8411 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v8412 : Result<unit, string> = match v8402 with Ok x -> Ok x | Error x -> Error (v8403 x)
                                let _run_target_args'_v8405 = v8412 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v8413 : Result<unit, string> = match v8402 with Ok x -> Ok x | Error x -> Error (v8403 x)
                                let _run_target_args'_v8405 = v8413 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v8414 : Result<unit, string> = match v8402 with Ok x -> Ok x | Error x -> Error (v8403 x)
                                let _run_target_args'_v8405 = v8414 
                                #endif
#else
                                let v8415 : Result<unit, string> = match v8402 with Ok x -> Ok x | Error x -> Error (v8403 x)
                                let _run_target_args'_v8405 = v8415 
                                #endif
                                let v8416 : Result<unit, string> = _run_target_args'_v8405 
                                let v8419 : (unit -> US39) = method185()
                                let v8420 : (string -> US39) = method186()
                                let v8422 : US39 = match v8416 with Ok () -> v8419 () | Error x -> v8420 x
                                match v8422 with
                                | US39_1(v8425) -> (* Error *)
                                    let v8737 : unit = ()
                                    let v8738 : (unit -> unit) = closure79(v8425)
                                    let v8739 : unit = (fun () -> v8738 (); v8737) ()
                                    ()
                                | US39_0 -> (* Ok *)
                                    ()
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                #endif
#if FABLE_COMPILER_PYTHON
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                #endif
#else
                                let v9054 : (string -> unit) = System.IO.File.Delete
                                v9054 v6962
                                #endif
                                // run_target_args' is_unit
                                (* run_target_args'
                                let v9055 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v9056 : string = "std::fs::remove_file(&*$0)"
                                let v9057 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6961 v9056 
                                let v9058 : (std_io_Error -> string) = method46()
                                (* run_target_args'
                                let v9060 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v9061 : string = "$0.map_err(|x| $1(x))"
                                let v9062 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v9057, v9058) v9061 
                                let _run_target_args'_v9060 = v9062 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v9063 : string = "$0.map_err(|x| $1(x))"
                                let v9064 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v9057, v9058) v9063 
                                let _run_target_args'_v9060 = v9064 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v9065 : string = "$0.map_err(|x| $1(x))"
                                let v9066 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v9057, v9058) v9065 
                                let _run_target_args'_v9060 = v9066 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v9067 : Result<unit, string> = match v9057 with Ok x -> Ok x | Error x -> Error (v9058 x)
                                let _run_target_args'_v9060 = v9067 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v9068 : Result<unit, string> = match v9057 with Ok x -> Ok x | Error x -> Error (v9058 x)
                                let _run_target_args'_v9060 = v9068 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v9069 : Result<unit, string> = match v9057 with Ok x -> Ok x | Error x -> Error (v9058 x)
                                let _run_target_args'_v9060 = v9069 
                                #endif
#else
                                let v9070 : Result<unit, string> = match v9057 with Ok x -> Ok x | Error x -> Error (v9058 x)
                                let _run_target_args'_v9060 = v9070 
                                #endif
                                let v9071 : Result<unit, string> = _run_target_args'_v9060 
                                let v9074 : (unit -> US39) = method185()
                                let v9075 : (string -> US39) = method186()
                                let v9077 : US39 = match v9071 with Ok () -> v9074 () | Error x -> v9075 x
                                match v9077 with
                                | US39_1(v9080) -> (* Error *)
                                    let v9392 : unit = ()
                                    let v9393 : (unit -> unit) = closure79(v9080)
                                    let v9394 : unit = (fun () -> v9393 (); v9392) ()
                                    ()
                                | US39_0 -> (* Ok *)
                                    ()
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                #endif
#if FABLE_COMPILER_PYTHON
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                #endif
#else
                                let v9709 : (string -> unit) = System.IO.File.Delete
                                v9709 v6961
                                #endif
                                // run_target_args' is_unit
                                ()
                            let v10022 : unit = ()
                            let v10023 : (unit -> unit) = closure80(v8396, v8395)
                            let v10024 : unit = (fun () -> v10023 (); v10022) ()
                            let v10341 : bool = v8395 <> 0 
                            if v10341 then
                                let v10344 : string = $"spiral.process_dib / dib / exit_code: {v8395} / result: '{v8396}'"
                                failwith<unit> v10344
                            let v10345 : string = "stdio"
                            [|struct (v10345, v8396)|]
                        else
                            let v10347 : string = "fable_library_rust::String_::fromString($0)"
                            let v10348 : string = Fable.Core.RustInterop.emitRustExpr v40 v10347 
                            let v10349 : bool = v10348 = "rust"
                            let struct (v22858 : US5, v22859 : US5, v22860 : US5, v22861 : US5) =
                                if v10349 then
                                    let v10350 : string = method171()
                                    (* run_target_args'
                                    let v10355 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10356 : string = "&*$0"
                                    let v10357 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10350 v10356 
                                    let _run_target_args'_v10355 = v10357 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10358 : string = "&*$0"
                                    let v10359 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10350 v10358 
                                    let _run_target_args'_v10355 = v10359 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10360 : string = "&*$0"
                                    let v10361 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10350 v10360 
                                    let _run_target_args'_v10355 = v10361 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10363 : Ref<Str> = v10350 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10355 = v10363 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10367 : Ref<Str> = v10350 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10355 = v10367 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10371 : Ref<Str> = v10350 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10355 = v10371 
                                    #endif
#else
                                    let v10375 : Ref<Str> = v10350 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10355 = v10375 
                                    #endif
                                    let v10378 : Ref<Str> = _run_target_args'_v10355 
                                    let v10387 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v10388 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v10378) v10387 
                                    let v10391 : (std_string_String -> US8) = method20()
                                    let v10392 : US8 option = v10388 |> Option.map v10391 
                                    let v10412 : US8 = US8_1
                                    let v10413 : US8 = v10392 |> Option.defaultValue v10412 
                                    let v10420 : std_string_String =
                                        match v10413 with
                                        | US8_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US8_0(v10417) -> (* Some *)
                                            v10417
                                    let v10421 : string = "fable_library_rust::String_::fromString($0)"
                                    let v10422 : string = Fable.Core.RustInterop.emitRustExpr v10420 v10421 
                                    let v10423 : string = method22()
                                    (* run_target_args'
                                    let v10428 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10429 : string = "&*$0"
                                    let v10430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10423 v10429 
                                    let _run_target_args'_v10428 = v10430 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10431 : string = "&*$0"
                                    let v10432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10423 v10431 
                                    let _run_target_args'_v10428 = v10432 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10433 : string = "&*$0"
                                    let v10434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10423 v10433 
                                    let _run_target_args'_v10428 = v10434 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10436 : Ref<Str> = v10423 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10428 = v10436 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10440 : Ref<Str> = v10423 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10428 = v10440 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10444 : Ref<Str> = v10423 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10428 = v10444 
                                    #endif
#else
                                    let v10448 : Ref<Str> = v10423 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10428 = v10448 
                                    #endif
                                    let v10451 : Ref<Str> = _run_target_args'_v10428 
                                    let v10460 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v10461 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v10451) v10460 
                                    let v10464 : (Vec<std_string_String> -> US12) = method23()
                                    let v10465 : US12 option = v10461 |> Option.map v10464 
                                    let v10485 : US12 = US12_1
                                    let v10486 : US12 = v10465 |> Option.defaultValue v10485 
                                    let v10490 : (std_string_String []) = [||]
                                    let v10491 : string = "$0.to_vec()"
                                    let v10492 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v10490 v10491 
                                    let v10495 : Vec<std_string_String> =
                                        match v10486 with
                                        | US12_1 -> (* None *)
                                            v10492
                                        | US12_0(v10493) -> (* Some *)
                                            v10493
                                    let v10496 : string = method191()
                                    (* run_target_args'
                                    let v10501 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10502 : string = "&*$0"
                                    let v10503 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10496 v10502 
                                    let _run_target_args'_v10501 = v10503 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10504 : string = "&*$0"
                                    let v10505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10496 v10504 
                                    let _run_target_args'_v10501 = v10505 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10506 : string = "&*$0"
                                    let v10507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10496 v10506 
                                    let _run_target_args'_v10501 = v10507 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10509 : Ref<Str> = v10496 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10501 = v10509 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10513 : Ref<Str> = v10496 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10501 = v10513 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10517 : Ref<Str> = v10496 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10501 = v10517 
                                    #endif
#else
                                    let v10521 : Ref<Str> = v10496 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10501 = v10521 
                                    #endif
                                    let v10524 : Ref<Str> = _run_target_args'_v10501 
                                    let v10533 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v10534 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v10524) v10533 
                                    let v10535 : string = method192()
                                    (* run_target_args'
                                    let v10540 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10541 : string = "&*$0"
                                    let v10542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10535 v10541 
                                    let _run_target_args'_v10540 = v10542 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10543 : string = "&*$0"
                                    let v10544 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10535 v10543 
                                    let _run_target_args'_v10540 = v10544 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10545 : string = "&*$0"
                                    let v10546 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10535 v10545 
                                    let _run_target_args'_v10540 = v10546 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10548 : Ref<Str> = v10535 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10540 = v10548 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10552 : Ref<Str> = v10535 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10540 = v10552 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10556 : Ref<Str> = v10535 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10540 = v10556 
                                    #endif
#else
                                    let v10560 : Ref<Str> = v10535 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10540 = v10560 
                                    #endif
                                    let v10563 : Ref<Str> = _run_target_args'_v10540 
                                    let v10572 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v10573 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v10563) v10572 
                                    let v10576 : (std_string_String -> US8) = method20()
                                    let v10577 : US8 option = v10573 |> Option.map v10576 
                                    let v10597 : US8 = US8_1
                                    let v10598 : US8 = v10577 |> Option.defaultValue v10597 
                                    let v10608 : US5 =
                                        match v10598 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v10602) -> (* Some *)
                                            let v10603 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10604 : string = Fable.Core.RustInterop.emitRustExpr v10602 v10603 
                                            US5_0(v10604)
                                    let v10609 : string = method193()
                                    (* run_target_args'
                                    let v10614 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10615 : string = "&*$0"
                                    let v10616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10609 v10615 
                                    let _run_target_args'_v10614 = v10616 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10617 : string = "&*$0"
                                    let v10618 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10609 v10617 
                                    let _run_target_args'_v10614 = v10618 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10619 : string = "&*$0"
                                    let v10620 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10609 v10619 
                                    let _run_target_args'_v10614 = v10620 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10622 : Ref<Str> = v10609 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10614 = v10622 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10626 : Ref<Str> = v10609 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10614 = v10626 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10630 : Ref<Str> = v10609 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10614 = v10630 
                                    #endif
#else
                                    let v10634 : Ref<Str> = v10609 |> unbox<Ref<Str>>
                                    let _run_target_args'_v10614 = v10634 
                                    #endif
                                    let v10637 : Ref<Str> = _run_target_args'_v10614 
                                    let v10646 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v10647 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v10637) v10646 
                                    let v10650 : (std_string_String -> US8) = method20()
                                    let v10651 : US8 option = v10647 |> Option.map v10650 
                                    let v10671 : US8 = US8_1
                                    let v10672 : US8 = v10651 |> Option.defaultValue v10671 
                                    let v10682 : US5 =
                                        match v10672 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v10676) -> (* Some *)
                                            let v10677 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10678 : string = Fable.Core.RustInterop.emitRustExpr v10676 v10677 
                                            US5_0(v10678)
                                    let v10691 : US40 =
                                        match v10608 with
                                        | US5_0(v10683) -> (* Some *)
                                            let v10684 : US41 = US41_0(v10683)
                                            US40_0(v10684)
                                        | _ ->
                                            match v10682 with
                                            | US5_0(v10686) -> (* Some *)
                                                let v10687 : US41 = US41_1(v10686)
                                                US40_0(v10687)
                                            | _ ->
                                                US40_1
                                    (* run_target_args'
                                    let v10696 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v10701 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10702 : string = "std::fs::read(&*$0)"
                                    let v10703 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10422 v10702 
                                    (* run_target_args'
                                    let v10705 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10706 : string = "$0.unwrap()"
                                    let v10707 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10703 v10706 
                                    let _run_target_args'_v10705 = v10707 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10708 : string = "$0.unwrap()"
                                    let v10709 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10703 v10708 
                                    let _run_target_args'_v10705 = v10709 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10710 : string = "$0.unwrap()"
                                    let v10711 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10703 v10710 
                                    let _run_target_args'_v10705 = v10711 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10712 : Vec<uint8> = match v10703 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10705 = v10712 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10713 : Vec<uint8> = match v10703 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10705 = v10713 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10714 : Vec<uint8> = match v10703 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10705 = v10714 
                                    #endif
#else
                                    let v10715 : Vec<uint8> = match v10703 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10705 = v10715 
                                    #endif
                                    let v10716 : Vec<uint8> = _run_target_args'_v10705 
                                    let _run_target_args'_v10701 = v10716 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10720 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v10701 = v10720 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10724 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v10701 = v10724 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10728 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v10701 = v10728 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10732 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v10701 = v10732 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10736 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v10701 = v10736 
                                    #endif
#else
                                    let v10739 : (uint8 []) = v10422 |> System.IO.File.ReadAllBytes
                                    let v10740 : string = "$0.to_vec()"
                                    let v10741 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10739 v10740 
                                    let _run_target_args'_v10701 = v10741 
                                    #endif
                                    let v10742 : Vec<uint8> = _run_target_args'_v10701 
                                    let v10751 : Vec<uint8> = method24(v10742)
                                    let v10752 : string = "std::string::String::from_utf8($0)"
                                    let v10753 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v10751 v10752 
                                    (* run_target_args'
                                    let v10755 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v10756 : string = "$0.unwrap()"
                                    let v10757 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10753 v10756 
                                    let _run_target_args'_v10755 = v10757 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10758 : string = "$0.unwrap()"
                                    let v10759 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10753 v10758 
                                    let _run_target_args'_v10755 = v10759 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10760 : string = "$0.unwrap()"
                                    let v10761 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10753 v10760 
                                    let _run_target_args'_v10755 = v10761 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10762 : std_string_String = match v10753 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10755 = v10762 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10763 : std_string_String = match v10753 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10755 = v10763 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10764 : std_string_String = match v10753 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10755 = v10764 
                                    #endif
#else
                                    let v10765 : std_string_String = match v10753 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v10755 = v10765 
                                    #endif
                                    let v10766 : std_string_String = _run_target_args'_v10755 
                                    let v10769 : string = "fable_library_rust::String_::fromString($0)"
                                    let v10770 : string = Fable.Core.RustInterop.emitRustExpr v10766 v10769 
                                    let _run_target_args'_v10696 = v10770 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v10772 : string = null |> unbox<string>
                                    let _run_target_args'_v10696 = v10772 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v10776 : string = null |> unbox<string>
                                    let _run_target_args'_v10696 = v10776 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v10780 : string = null |> unbox<string>
                                    let _run_target_args'_v10696 = v10780 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v10784 : string = null |> unbox<string>
                                    let _run_target_args'_v10696 = v10784 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v10788 : string = null |> unbox<string>
                                    let _run_target_args'_v10696 = v10788 
                                    #endif
#else
                                    let v10791 : string = v10422 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v10696 = v10791 
                                    #endif
                                    let v10792 : string = _run_target_args'_v10696 
                                    let v10801 : string = "rs"
                                    let v10802 : string = method194(v10801, v10792, v10691)
                                    let v10803 : string = method26(v10802)
                                    let v10804 : string = method31()
                                    let v10805 : US5 = method32(v10804)
                                    let v10811 : US5 =
                                        match v10805 with
                                        | US5_1 -> (* None *)
                                            let v10808 : string = __SOURCE_DIRECTORY__
                                            method32(v10808)
                                        | US5_0(v10806) -> (* Some *)
                                            US5_0(v10806)
                                    let v10817 : US5 =
                                        match v10811 with
                                        | US5_1 -> (* None *)
                                            let v10814 : string = "/workspaces"
                                            method32(v10814)
                                        | US5_0(v10812) -> (* Some *)
                                            US5_0(v10812)
                                    let v10821 : string =
                                        match v10817 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v10818) -> (* Some *)
                                            v10818
                                    let v10822 : string = method52(v10821)
                                    let v10823 : bool = "deps" = v10822
                                    let v10834 : string =
                                        if v10823 then
                                            let v10824 : string option = method38(v10821)
                                            let v10826 : string = v10824 |> Option.get
                                            let v10829 : US5 = method32(v10826)
                                            match v10829 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v10830) -> (* Some *)
                                                v10830
                                        else
                                            v10821
                                    let v10835 : string = "polyglot"
                                    let v10836 : string = method33(v10834, v10835)
                                    let v10837 : string = method31()
                                    let v10839 : (unit -> string) = v10837.ToLower
                                    let v10840 : string = v10839 ()
                                    let v10844 : (unit -> string) = v10836.ToLower
                                    let v10845 : string = v10844 ()
                                    let v10849 : bool = v10840.StartsWith (v10845, false, null)
                                    let v10854 : US14 =
                                        if v10849 then
                                            US14_1(v10845)
                                        else
                                            US14_0(v10845)
                                    let v10866 : Result<string, string> =
                                        match v10854 with
                                        | US14_1(v10860) -> (* Error *)
                                            let v10862 : Result<string, string> = Error v10860 
                                            v10862
                                        | US14_0(v10855) -> (* Ok *)
                                            let v10857 : Result<string, string> = Ok v10855 
                                            v10857
                                    let v10867 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v10868 : bool = Fable.Core.RustInterop.emitRustExpr v10866 v10867 
                                    let v10869 : string = "x"
                                    let v10870 : string = Fable.Core.RustInterop.emitRustExpr () v10869 
                                    let v10871 : string = "true; $0 })"
                                    let v10872 : bool = Fable.Core.RustInterop.emitRustExpr v10870 v10871 
                                    let v10873 : string = "_result_unwrap_or_else"
                                    let v10874 : string = Fable.Core.RustInterop.emitRustExpr () v10873 
                                    let v10875 : string = "spiral"
                                    let v10876 : US42 = US42_0
                                    let v10877 : US43 = US43_0(v10876)
                                    let v10878 : US5 = US5_0(v10803)
                                    let v10879 : string = method195(v10878, v10875, v10877, v10874)
                                    let v10880 : string = "Fable.Core"
                                    let v10881 : string = "4.3.0"
                                    let v10882 : UH4 = UH4_0
                                    let v10883 : UH4 = UH4_1(v10880, v10881, v10882)
                                    let v10884 : UH2 = UH2_0
                                    let v10885 : string = method196(v10792, v10875, v10884, v10883, v10879, v10874)
                                    let v10886 : string = "../../.."
                                    let v10887 : string = method33(v10879, v10886)
                                    let v10888 : string = "Cargo.toml"
                                    let v10889 : string = method33(v10887, v10888)
                                    let v10890 : bool = method35(v10889)
                                    let v10891 : bool = v10890 = false
                                    if v10891 then
                                        (* run_target_args'
                                        let v10898 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10899 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10899 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v10900 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10900 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v10902 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v10898 = v10902 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v10905 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10905 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v10906 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10906 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v10907 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10907 
                                        #endif
#else
                                        let v10908 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v10898 = v10908 
                                        #endif
                                        let v10909 : System.DateTime = _run_target_args'_v10898 
                                        let v10915 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v10916 : System.Guid = v10915 ()
                                        let v10919 : System.Guid = method199(v10916, v10909)
                                        let v10921 : (System.Guid -> string) = _.ToString()
                                        let v10922 : string = v10921 v10919
                                        let v10925 : string = $"[package]"
                                        let v10926 : string = $"name = \"spiral_{v10922}\""
                                        let v10929 : string = "\n"
                                        let v10930 : string = v10925 + v10929 
                                        let v10934 : string = v10930 + v10926 
                                        let v10937 : string = $"version = \"0.0.1\""
                                        let v10939 : string = v10934 + v10929 
                                        let v10943 : string = v10939 + v10937 
                                        let v10946 : string = $"edition = \"2021\""
                                        let v10948 : string = v10943 + v10929 
                                        let v10952 : string = v10948 + v10946 
                                        let v10955 : string = $""
                                        let v10957 : string = v10952 + v10929 
                                        let v10961 : string = v10957 + v10955 
                                        let v10964 : string = $"[[bin]]"
                                        let v10966 : string = v10961 + v10929 
                                        let v10970 : string = v10966 + v10964 
                                        let v10973 : string = $"name = \"spiral_{v10922}\""
                                        let v10975 : string = v10970 + v10929 
                                        let v10979 : string = v10975 + v10973 
                                        let v10982 : string = $"path = \"spiral.rs\""
                                        let v10984 : string = v10979 + v10929 
                                        let v10988 : string = v10984 + v10982 
                                        (* run_target_args'
                                        let v10991 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v10992 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v10889, v10988) v10992 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v10889, v10988)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v10993 : string = method33(v10879, v10888)
                                    let v10994 : bool = method35(v10993)
                                    let v10995 : bool = v10994 = false
                                    if v10995 then
                                        (* run_target_args'
                                        let v11002 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v11003 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11003 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v11004 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11004 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v11006 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v11002 = v11006 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v11009 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11009 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v11010 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11010 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v11011 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11011 
                                        #endif
#else
                                        let v11012 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v11002 = v11012 
                                        #endif
                                        let v11013 : System.DateTime = _run_target_args'_v11002 
                                        let v11019 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v11020 : System.Guid = v11019 ()
                                        let v11023 : System.Guid = method199(v11020, v11013)
                                        let v11025 : (System.Guid -> string) = _.ToString()
                                        let v11026 : string = v11025 v11023
                                        let v11029 : string = $"[package]"
                                        let v11030 : string = $"name = \"spiral_{v11026}\""
                                        let v11033 : string = "\n"
                                        let v11034 : string = v11029 + v11033 
                                        let v11038 : string = v11034 + v11030 
                                        let v11041 : string = $"version = \"0.0.1\""
                                        let v11043 : string = v11038 + v11033 
                                        let v11047 : string = v11043 + v11041 
                                        let v11050 : string = $"edition = \"2021\""
                                        let v11052 : string = v11047 + v11033 
                                        let v11056 : string = v11052 + v11050 
                                        let v11059 : string = $""
                                        let v11061 : string = v11056 + v11033 
                                        let v11065 : string = v11061 + v11059 
                                        let v11068 : string = $"[[bin]]"
                                        let v11070 : string = v11065 + v11033 
                                        let v11074 : string = v11070 + v11068 
                                        let v11077 : string = $"name = \"spiral_{v11026}\""
                                        let v11079 : string = v11074 + v11033 
                                        let v11083 : string = v11079 + v11077 
                                        let v11086 : string = $"path = \"spiral.rs\""
                                        let v11088 : string = v11083 + v11033 
                                        let v11092 : string = v11088 + v11086 
                                        (* run_target_args'
                                        let v11095 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v11096 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v10993, v11092) v11096 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v10993, v11092)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v11097 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v11098 : string = method33(v10874, v11097)
                                    let v11099 : string = "fable_modules/fable-library-rust"
                                    let v11100 : string = method33(v10879, v11099)
                                    method204(v11098, v11100)
                                    let struct (v11101 : int32, v11102 : string) = method205(v10691, v10879, v10801, v10885, v10854)
                                    let v11104 : bool = v11101 <> 0 
                                    let struct (v16394 : US5, v16395 : US5, v16396 : US5, v16397 : US5) =
                                        if v11104 then
                                            let v11418 : unit = ()
                                            let v11419 : (unit -> unit) = closure83(v11102, v11101)
                                            let v11420 : unit = (fun () -> v11419 (); v11418) ()
                                            let v11735 : US5 = US5_0(v10801)
                                            let v11736 : US5 = US5_1
                                            let v11737 : US5 = US5_1
                                            let v11738 : US5 = US5_0(v11102)
                                            struct (v11735, v11736, v11737, v11738)
                                        else
                                            let v11739 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v11929 : Vec<std_string_String> =
                                                if v11739 then
                                                    v10495
                                                else
                                                    let v11740 : (std_string_String -> bool) = method215()
                                                    let v11741 : Vec<std_string_String> = method216(v10495)
                                                    let v11742 : string = "v11741.into_iter().filter(|x| v11740(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v11743 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v11742 
                                                    let v11744 : string = "$0.len()"
                                                    let v11745 : unativeint = Fable.Core.RustInterop.emitRustExpr v11743 v11744 
                                                    let v11751 : int32 = v11745 |> int32 
                                                    let v11759 : bool = v11751 > 0
                                                    let v11844 : Vec<std_string_String> =
                                                        if v11759 then
                                                            v10495
                                                        else
                                                            let v11760 : string = "near-sdk"
                                                            (* run_target_args'
                                                            let v11765 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v11766 : string = "&*$0"
                                                            let v11767 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11760 v11766 
                                                            let _run_target_args'_v11765 = v11767 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v11768 : string = "&*$0"
                                                            let v11769 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11760 v11768 
                                                            let _run_target_args'_v11765 = v11769 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v11770 : string = "&*$0"
                                                            let v11771 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11760 v11770 
                                                            let _run_target_args'_v11765 = v11771 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v11773 : Ref<Str> = v11760 |> unbox<Ref<Str>>
                                                            let _run_target_args'_v11765 = v11773 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v11777 : Ref<Str> = v11760 |> unbox<Ref<Str>>
                                                            let _run_target_args'_v11765 = v11777 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v11781 : Ref<Str> = v11760 |> unbox<Ref<Str>>
                                                            let _run_target_args'_v11765 = v11781 
                                                            #endif
#else
                                                            let v11785 : Ref<Str> = v11760 |> unbox<Ref<Str>>
                                                            let _run_target_args'_v11765 = v11785 
                                                            #endif
                                                            let v11788 : Ref<Str> = _run_target_args'_v11765 
                                                            (* run_target_args'
                                                            let v11801 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v11802 : string = "String::from($0)"
                                                            let v11803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11788 v11802 
                                                            let _run_target_args'_v11801 = v11803 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v11804 : string = "String::from($0)"
                                                            let v11805 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11788 v11804 
                                                            let _run_target_args'_v11801 = v11805 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v11806 : string = "String::from($0)"
                                                            let v11807 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11788 v11806 
                                                            let _run_target_args'_v11801 = v11807 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v11809 : std_string_String = v11788 |> unbox<std_string_String>
                                                            let _run_target_args'_v11801 = v11809 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v11813 : std_string_String = v11788 |> unbox<std_string_String>
                                                            let _run_target_args'_v11801 = v11813 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v11817 : std_string_String = v11788 |> unbox<std_string_String>
                                                            let _run_target_args'_v11801 = v11817 
                                                            #endif
#else
                                                            let v11821 : std_string_String = v11788 |> unbox<std_string_String>
                                                            let _run_target_args'_v11801 = v11821 
                                                            #endif
                                                            let v11824 : std_string_String = _run_target_args'_v11801 
                                                            let v11833 : (std_string_String []) = [|v11824|]
                                                            let v11834 : string = "$0.to_vec()"
                                                            let v11835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v11833 v11834 
                                                            let v11836 : Vec<std_string_String> = method73(v11835)
                                                            let v11837 : Vec<std_string_String> = method74(v10495)
                                                            let v11838 : string = "true; let mut v11837 = v11837"
                                                            let v11839 : bool = Fable.Core.RustInterop.emitRustExpr () v11838 
                                                            let v11840 : string = "true; v11837.extend(v11836)"
                                                            let v11841 : bool = Fable.Core.RustInterop.emitRustExpr () v11840 
                                                            let v11842 : string = "v11837"
                                                            let v11843 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v11842 
                                                            v11843
                                                    let v11845 : string = "indexmap=\"=2.11.4\""
                                                    (* run_target_args'
                                                    let v11850 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v11851 : string = "&*$0"
                                                    let v11852 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11845 v11851 
                                                    let _run_target_args'_v11850 = v11852 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v11853 : string = "&*$0"
                                                    let v11854 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11845 v11853 
                                                    let _run_target_args'_v11850 = v11854 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v11855 : string = "&*$0"
                                                    let v11856 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11845 v11855 
                                                    let _run_target_args'_v11850 = v11856 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v11858 : Ref<Str> = v11845 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v11850 = v11858 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v11862 : Ref<Str> = v11845 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v11850 = v11862 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v11866 : Ref<Str> = v11845 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v11850 = v11866 
                                                    #endif
#else
                                                    let v11870 : Ref<Str> = v11845 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v11850 = v11870 
                                                    #endif
                                                    let v11873 : Ref<Str> = _run_target_args'_v11850 
                                                    (* run_target_args'
                                                    let v11886 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v11887 : string = "String::from($0)"
                                                    let v11888 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11873 v11887 
                                                    let _run_target_args'_v11886 = v11888 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v11889 : string = "String::from($0)"
                                                    let v11890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11873 v11889 
                                                    let _run_target_args'_v11886 = v11890 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v11891 : string = "String::from($0)"
                                                    let v11892 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11873 v11891 
                                                    let _run_target_args'_v11886 = v11892 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v11894 : std_string_String = v11873 |> unbox<std_string_String>
                                                    let _run_target_args'_v11886 = v11894 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v11898 : std_string_String = v11873 |> unbox<std_string_String>
                                                    let _run_target_args'_v11886 = v11898 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v11902 : std_string_String = v11873 |> unbox<std_string_String>
                                                    let _run_target_args'_v11886 = v11902 
                                                    #endif
#else
                                                    let v11906 : std_string_String = v11873 |> unbox<std_string_String>
                                                    let _run_target_args'_v11886 = v11906 
                                                    #endif
                                                    let v11909 : std_string_String = _run_target_args'_v11886 
                                                    let v11918 : (std_string_String []) = [|v11909|]
                                                    let v11919 : string = "$0.to_vec()"
                                                    let v11920 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v11918 v11919 
                                                    let v11921 : Vec<std_string_String> = method73(v11920)
                                                    let v11922 : Vec<std_string_String> = method74(v11844)
                                                    let v11923 : string = "true; let mut v11922 = v11922"
                                                    let v11924 : bool = Fable.Core.RustInterop.emitRustExpr () v11923 
                                                    let v11925 : string = "true; v11922.extend(v11921)"
                                                    let v11926 : bool = Fable.Core.RustInterop.emitRustExpr () v11925 
                                                    let v11927 : string = "v11922"
                                                    let v11928 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v11927 
                                                    v11928
                                            let v11930 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v11931 : bool = Fable.Core.RustInterop.emitRustExpr v11929 v11930 
                                            let v11932 : string = "x"
                                            let v11933 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11932 
                                            let v11934 : string = "fable_library_rust::String_::fromString($0)"
                                            let v11935 : string = Fable.Core.RustInterop.emitRustExpr v11933 v11934 
                                            let v11938 : string = "="
                                            let v11939 : bool = v11935.Contains v11938 
                                            let v11954 : string =
                                                if v11939 then
                                                    v11935
                                                else
                                                    let v11944 : string = "]"
                                                    let v11945 : bool = v11935.EndsWith (v11944, false, null)
                                                    if v11945 then
                                                        let v11948 : string = $"={{version='*',features=["
                                                        let v11949 : string = "["
                                                        let v11950 : string = v11935.Replace (v11949, v11948)
                                                        let v11951 : string = $"{v11950}}}"
                                                        v11951
                                                    else
                                                        let v11952 : string = $"{v11935}='*'"
                                                        v11952
                                            let v11955 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v11956 : bool = Fable.Core.RustInterop.emitRustExpr v11954 v11955 
                                            let v11957 : string = "_vec_map"
                                            let v11958 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v11957 
                                            let v11959 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v11960 : (string []) = Fable.Core.RustInterop.emitRustExpr v11958 v11959 
                                            let v11965 : unit = ()
                                            let _let'_v11965 =
                                                seq {
                                                    for i = 0 to v11960.Length - 1 do yield v11960.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v11968 : string seq = _let'_v11965 
                                            let v11976 : string = method75()
                                            let v11977 : (string -> (string seq -> string)) = String.concat
                                            let v11978 : (string seq -> string) = v11977 v11976
                                            let v11979 : string = v11978 v11968
                                            let v11983 : string = $"{v10875}.{v10801}"
                                            let v11984 : string = method33(v10879, v11983)
                                            (* run_target_args'
                                            let v11989 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v11994 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11995 : string = "std::fs::read(&*$0)"
                                            let v11996 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v11984 v11995 
                                            (* run_target_args'
                                            let v11998 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11999 : string = "$0.unwrap()"
                                            let v12000 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11996 v11999 
                                            let _run_target_args'_v11998 = v12000 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12001 : string = "$0.unwrap()"
                                            let v12002 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11996 v12001 
                                            let _run_target_args'_v11998 = v12002 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12003 : string = "$0.unwrap()"
                                            let v12004 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11996 v12003 
                                            let _run_target_args'_v11998 = v12004 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12005 : Vec<uint8> = match v11996 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11998 = v12005 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12006 : Vec<uint8> = match v11996 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11998 = v12006 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12007 : Vec<uint8> = match v11996 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11998 = v12007 
                                            #endif
#else
                                            let v12008 : Vec<uint8> = match v11996 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11998 = v12008 
                                            #endif
                                            let v12009 : Vec<uint8> = _run_target_args'_v11998 
                                            let _run_target_args'_v11994 = v12009 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12013 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11994 = v12013 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12017 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11994 = v12017 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12021 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11994 = v12021 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12025 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11994 = v12025 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12029 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11994 = v12029 
                                            #endif
#else
                                            let v12032 : (uint8 []) = v11984 |> System.IO.File.ReadAllBytes
                                            let v12033 : string = "$0.to_vec()"
                                            let v12034 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12032 v12033 
                                            let _run_target_args'_v11994 = v12034 
                                            #endif
                                            let v12035 : Vec<uint8> = _run_target_args'_v11994 
                                            let v12044 : Vec<uint8> = method24(v12035)
                                            let v12045 : string = "std::string::String::from_utf8($0)"
                                            let v12046 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v12044 v12045 
                                            (* run_target_args'
                                            let v12048 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v12049 : string = "$0.unwrap()"
                                            let v12050 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12046 v12049 
                                            let _run_target_args'_v12048 = v12050 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12051 : string = "$0.unwrap()"
                                            let v12052 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12046 v12051 
                                            let _run_target_args'_v12048 = v12052 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12053 : string = "$0.unwrap()"
                                            let v12054 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12046 v12053 
                                            let _run_target_args'_v12048 = v12054 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12055 : std_string_String = match v12046 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v12048 = v12055 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12056 : std_string_String = match v12046 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v12048 = v12056 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12057 : std_string_String = match v12046 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v12048 = v12057 
                                            #endif
#else
                                            let v12058 : std_string_String = match v12046 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v12048 = v12058 
                                            #endif
                                            let v12059 : std_string_String = _run_target_args'_v12048 
                                            let v12062 : string = "fable_library_rust::String_::fromString($0)"
                                            let v12063 : string = Fable.Core.RustInterop.emitRustExpr v12059 v12062 
                                            let _run_target_args'_v11989 = v12063 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12065 : string = null |> unbox<string>
                                            let _run_target_args'_v11989 = v12065 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12069 : string = null |> unbox<string>
                                            let _run_target_args'_v11989 = v12069 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12073 : string = null |> unbox<string>
                                            let _run_target_args'_v11989 = v12073 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12077 : string = null |> unbox<string>
                                            let _run_target_args'_v11989 = v12077 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12081 : string = null |> unbox<string>
                                            let _run_target_args'_v11989 = v12081 
                                            #endif
#else
                                            let v12084 : string = v11984 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v11989 = v12084 
                                            #endif
                                            let v12085 : string = _run_target_args'_v11989 
                                            let v12094 : string = method217()
                                            let v12097 : string = "on_startup!"
                                            let v12098 : string = v12097 + v12094 
                                            let v12101 : string = method218()
                                            let v12104 : string = " method0"
                                            let v12105 : string = v12104 + v12101 
                                            let v12109 : bool = v12085.Contains v12098 
                                            let v12117 : bool =
                                                if v12109 then
                                                    let v12113 : bool = v12085.Contains v12105 
                                                    let v12116 : bool = v12113 = false
                                                    v12116
                                                else
                                                    false
                                            let v12118 : string = $"cargo-features = [\"edition2024\"]"
                                            let v12119 : string = $""
                                            let v12122 : string = "\n"
                                            let v12123 : string = v12118 + v12122 
                                            let v12127 : string = v12123 + v12119 
                                            let v12130 : string = $"[package]"
                                            let v12132 : string = v12127 + v12122 
                                            let v12136 : string = v12132 + v12130 
                                            let v12139 : string = $"name = \"spiral_{v10803}\""
                                            let v12141 : string = v12136 + v12122 
                                            let v12145 : string = v12141 + v12139 
                                            let v12148 : string = $"version = \"0.0.1\""
                                            let v12150 : string = v12145 + v12122 
                                            let v12154 : string = v12150 + v12148 
                                            let v12157 : string = $"edition = \"2024\""
                                            let v12159 : string = v12154 + v12122 
                                            let v12163 : string = v12159 + v12157 
                                            let v12166 : string = $""
                                            let v12168 : string = v12163 + v12122 
                                            let v12172 : string = v12168 + v12166 
                                            let v12175 : string = $"[dependencies]"
                                            let v12177 : string = v12172 + v12122 
                                            let v12181 : string = v12177 + v12175 
                                            let v12186 : US40 = US40_1
                                            let v12187 : bool = v10691 <> v12186 
                                            let v12205 : string =
                                                if v12187 then
                                                    let v12191 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v12191
                                                else
                                                    let v12192 : string = $"fable_library_rust = {{"
                                                    let v12193 : string = $" workspace = true,"
                                                    let v12194 : string = v12192 + v12193 
                                                    let v12195 : string = $" features = ["
                                                    let v12196 : string = v12194 + v12195 
                                                    let v12199 : string =
                                                        if v12117 then
                                                            let v12197 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v12197
                                                        else
                                                            let v12198 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v12198
                                                    let v12200 : string = v12196 + v12199 
                                                    let v12201 : string = $"]"
                                                    let v12202 : string = v12200 + v12201 
                                                    let v12203 : string = $"}}"
                                                    let v12204 : string = v12202 + v12203 
                                                    v12204
                                            let v12207 : string = v12181 + v12122 
                                            let v12211 : string = v12207 + v12205 
                                            let v12214 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v12216 : string = v12211 + v12122 
                                            let v12220 : string = v12216 + v12214 
                                            let v12223 : string = $"{v11979}"
                                            let v12225 : string = v12220 + v12122 
                                            let v12229 : string = v12225 + v12223 
                                            let v12232 : string = $""
                                            let v12234 : string = v12229 + v12122 
                                            let v12238 : string = v12234 + v12232 
                                            let v12241 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12262 : string =
                                                if v12241 then
                                                    let v12242 : string = $"[[bin]]"
                                                    let v12243 : string = $"name = \"spiral_{v10803}\""
                                                    let v12245 : string = v12242 + v12122 
                                                    let v12249 : string = v12245 + v12243 
                                                    v12249
                                                else
                                                    let v12252 : string = $"[lib]"
                                                    let v12253 : string = $"crate-type = [\"cdylib\"]"
                                                    let v12255 : string = v12252 + v12122 
                                                    let v12259 : string = v12255 + v12253 
                                                    v12259
                                            let v12264 : string = v12238 + v12122 
                                            let v12268 : string = v12264 + v12262 
                                            let v12271 : string = $"path = \"spiral.rs\""
                                            let v12273 : string = v12268 + v12122 
                                            let v12277 : string = v12273 + v12271 
                                            let v12280 : string = method43(v10874)
                                            let v12281 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v12282 : string = $""
                                            let v12284 : string = v12281 + v12122 
                                            let v12288 : string = v12284 + v12282 
                                            let v12291 : string = $"[workspace]"
                                            let v12293 : string = v12288 + v12122 
                                            let v12297 : string = v12293 + v12291 
                                            let v12300 : string = $"resolver = \"2\""
                                            let v12302 : string = v12297 + v12122 
                                            let v12306 : string = v12302 + v12300 
                                            let v12309 : string = $"members = [\"packages/Rust/*\"]"
                                            let v12311 : string = v12306 + v12122 
                                            let v12315 : string = v12311 + v12309 
                                            let v12318 : string = $""
                                            let v12320 : string = v12315 + v12122 
                                            let v12324 : string = v12320 + v12318 
                                            let v12327 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v12329 : string = v12324 + v12122 
                                            let v12333 : string = v12329 + v12327 
                                            let v12336 : string = $"path = \"{v12280}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v12338 : string = v12333 + v12122 
                                            let v12342 : string = v12338 + v12336 
                                            let v12345 : string = $"default-features = false"
                                            let v12347 : string = v12342 + v12122 
                                            let v12351 : string = v12347 + v12345 
                                            let v12354 : string = $"features = []"
                                            let v12356 : string = v12351 + v12122 
                                            let v12360 : string = v12356 + v12354 
                                            let v12363 : string = $""
                                            let v12365 : string = v12360 + v12122 
                                            let v12369 : string = v12365 + v12363 
                                            let v12372 : string = $"[workspace.dependencies]"
                                            let v12374 : string = v12369 + v12122 
                                            let v12378 : string = v12374 + v12372 
                                            let v12381 : string = $"inline_colorization = \"~0.1\""
                                            let v12383 : string = v12378 + v12122 
                                            let v12387 : string = v12383 + v12381 
                                            let v12390 : string = $""
                                            let v12392 : string = v12387 + v12122 
                                            let v12396 : string = v12392 + v12390 
                                            let v12399 : string = $"[profile.release]"
                                            let v12401 : string = v12396 + v12122 
                                            let v12405 : string = v12401 + v12399 
                                            let v12408 : string = $"codegen-units = 1"
                                            let v12410 : string = v12405 + v12122 
                                            let v12414 : string = v12410 + v12408 
                                            let v12417 : string = $"opt-level = \"z\""
                                            let v12419 : string = v12414 + v12122 
                                            let v12423 : string = v12419 + v12417 
                                            let v12426 : string = $"lto = true"
                                            let v12428 : string = v12423 + v12122 
                                            let v12432 : string = v12428 + v12426 
                                            let v12435 : string = $"debug = false"
                                            let v12437 : string = v12432 + v12122 
                                            let v12441 : string = v12437 + v12435 
                                            let v12444 : string = $"panic = \"abort\""
                                            let v12446 : string = v12441 + v12122 
                                            let v12450 : string = v12446 + v12444 
                                            let v12453 : string = $"overflow-checks = true"
                                            let v12455 : string = v12450 + v12122 
                                            let v12459 : string = v12455 + v12453 
                                            let v12462 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v12464 : string = v12459 + v12122 
                                            let v12468 : string = v12464 + v12462 
                                            method76(v10993, v12277)
                                            method76(v10889, v12468)
                                            let v12471 : string = "src/Range.rs"
                                            let v12472 : string = method33(v11100, v12471)
                                            let v12473 : bool = method35(v12472)
                                            if v12473 then
                                                (* run_target_args'
                                                let v12478 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v12483 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v12484 : string = "std::fs::read(&*$0)"
                                                let v12485 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v12472 v12484 
                                                (* run_target_args'
                                                let v12487 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v12488 : string = "$0.unwrap()"
                                                let v12489 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12485 v12488 
                                                let _run_target_args'_v12487 = v12489 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v12490 : string = "$0.unwrap()"
                                                let v12491 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12485 v12490 
                                                let _run_target_args'_v12487 = v12491 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v12492 : string = "$0.unwrap()"
                                                let v12493 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12485 v12492 
                                                let _run_target_args'_v12487 = v12493 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v12494 : Vec<uint8> = match v12485 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12487 = v12494 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v12495 : Vec<uint8> = match v12485 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12487 = v12495 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v12496 : Vec<uint8> = match v12485 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12487 = v12496 
                                                #endif
#else
                                                let v12497 : Vec<uint8> = match v12485 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12487 = v12497 
                                                #endif
                                                let v12498 : Vec<uint8> = _run_target_args'_v12487 
                                                let _run_target_args'_v12483 = v12498 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v12502 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v12483 = v12502 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v12506 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v12483 = v12506 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v12510 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v12483 = v12510 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v12514 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v12483 = v12514 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v12518 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v12483 = v12518 
                                                #endif
#else
                                                let v12521 : (uint8 []) = v12472 |> System.IO.File.ReadAllBytes
                                                let v12522 : string = "$0.to_vec()"
                                                let v12523 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12521 v12522 
                                                let _run_target_args'_v12483 = v12523 
                                                #endif
                                                let v12524 : Vec<uint8> = _run_target_args'_v12483 
                                                let v12533 : Vec<uint8> = method24(v12524)
                                                let v12534 : string = "std::string::String::from_utf8($0)"
                                                let v12535 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v12533 v12534 
                                                (* run_target_args'
                                                let v12537 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v12538 : string = "$0.unwrap()"
                                                let v12539 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12535 v12538 
                                                let _run_target_args'_v12537 = v12539 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v12540 : string = "$0.unwrap()"
                                                let v12541 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12535 v12540 
                                                let _run_target_args'_v12537 = v12541 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v12542 : string = "$0.unwrap()"
                                                let v12543 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12535 v12542 
                                                let _run_target_args'_v12537 = v12543 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v12544 : std_string_String = match v12535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12537 = v12544 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v12545 : std_string_String = match v12535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12537 = v12545 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v12546 : std_string_String = match v12535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12537 = v12546 
                                                #endif
#else
                                                let v12547 : std_string_String = match v12535 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v12537 = v12547 
                                                #endif
                                                let v12548 : std_string_String = _run_target_args'_v12537 
                                                let v12551 : string = "fable_library_rust::String_::fromString($0)"
                                                let v12552 : string = Fable.Core.RustInterop.emitRustExpr v12548 v12551 
                                                let _run_target_args'_v12478 = v12552 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v12554 : string = null |> unbox<string>
                                                let _run_target_args'_v12478 = v12554 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v12558 : string = null |> unbox<string>
                                                let _run_target_args'_v12478 = v12558 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v12562 : string = null |> unbox<string>
                                                let _run_target_args'_v12478 = v12562 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v12566 : string = null |> unbox<string>
                                                let _run_target_args'_v12478 = v12566 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v12570 : string = null |> unbox<string>
                                                let _run_target_args'_v12478 = v12570 
                                                #endif
#else
                                                let v12573 : string = v12472 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v12478 = v12573 
                                                #endif
                                                let v12574 : string = _run_target_args'_v12478 
                                                let v12583 : string = "use crate::String_::fromCharCode;"
                                                let v12584 : string = "use crate::String_::fromChar;"
                                                let v12585 : string = v12574.Replace (v12583, v12584)
                                                let v12586 : string = "fromCharCode(c)"
                                                let v12587 : string = "std::char::from_u32(c).unwrap()"
                                                let v12588 : string = v12585.Replace (v12586, v12587)
                                                method76(v12472, v12588)
                                            let v12589 : uint8 = 1uy
                                            let struct (v12590 : int32, v12591 : string) = method219(v10854, v10993, v12589)
                                            let v12593 : bool = v12590 <> 0 
                                            if v12593 then
                                                let v12905 : unit = ()
                                                let v12906 : (unit -> unit) = closure87(v12591, v12590)
                                                let v12907 : unit = (fun () -> v12906 (); v12905) ()
                                                ()
                                            (* run_target_args'
                                            let v13224 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v13229 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v13230 : string = "std::fs::read(&*$0)"
                                            let v13231 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v11984 v13230 
                                            (* run_target_args'
                                            let v13233 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v13234 : string = "$0.unwrap()"
                                            let v13235 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13231 v13234 
                                            let _run_target_args'_v13233 = v13235 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v13236 : string = "$0.unwrap()"
                                            let v13237 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13231 v13236 
                                            let _run_target_args'_v13233 = v13237 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v13238 : string = "$0.unwrap()"
                                            let v13239 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13231 v13238 
                                            let _run_target_args'_v13233 = v13239 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v13240 : Vec<uint8> = match v13231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13233 = v13240 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v13241 : Vec<uint8> = match v13231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13233 = v13241 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v13242 : Vec<uint8> = match v13231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13233 = v13242 
                                            #endif
#else
                                            let v13243 : Vec<uint8> = match v13231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13233 = v13243 
                                            #endif
                                            let v13244 : Vec<uint8> = _run_target_args'_v13233 
                                            let _run_target_args'_v13229 = v13244 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v13248 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v13229 = v13248 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v13252 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v13229 = v13252 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v13256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v13229 = v13256 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v13260 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v13229 = v13260 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v13264 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v13229 = v13264 
                                            #endif
#else
                                            let v13267 : (uint8 []) = v11984 |> System.IO.File.ReadAllBytes
                                            let v13268 : string = "$0.to_vec()"
                                            let v13269 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v13267 v13268 
                                            let _run_target_args'_v13229 = v13269 
                                            #endif
                                            let v13270 : Vec<uint8> = _run_target_args'_v13229 
                                            let v13279 : Vec<uint8> = method24(v13270)
                                            let v13280 : string = "std::string::String::from_utf8($0)"
                                            let v13281 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v13279 v13280 
                                            (* run_target_args'
                                            let v13283 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v13284 : string = "$0.unwrap()"
                                            let v13285 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13281 v13284 
                                            let _run_target_args'_v13283 = v13285 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v13286 : string = "$0.unwrap()"
                                            let v13287 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13281 v13286 
                                            let _run_target_args'_v13283 = v13287 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v13288 : string = "$0.unwrap()"
                                            let v13289 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13281 v13288 
                                            let _run_target_args'_v13283 = v13289 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v13290 : std_string_String = match v13281 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13283 = v13290 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v13291 : std_string_String = match v13281 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13283 = v13291 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v13292 : std_string_String = match v13281 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13283 = v13292 
                                            #endif
#else
                                            let v13293 : std_string_String = match v13281 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v13283 = v13293 
                                            #endif
                                            let v13294 : std_string_String = _run_target_args'_v13283 
                                            let v13297 : string = "fable_library_rust::String_::fromString($0)"
                                            let v13298 : string = Fable.Core.RustInterop.emitRustExpr v13294 v13297 
                                            let _run_target_args'_v13224 = v13298 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v13300 : string = null |> unbox<string>
                                            let _run_target_args'_v13224 = v13300 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v13304 : string = null |> unbox<string>
                                            let _run_target_args'_v13224 = v13304 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v13308 : string = null |> unbox<string>
                                            let _run_target_args'_v13224 = v13308 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v13312 : string = null |> unbox<string>
                                            let _run_target_args'_v13224 = v13312 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v13316 : string = null |> unbox<string>
                                            let _run_target_args'_v13224 = v13316 
                                            #endif
#else
                                            let v13319 : string = v11984 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v13224 = v13319 
                                            #endif
                                            let v13320 : string = _run_target_args'_v13224 
                                            let v13329 : string = method225()
                                            let v13332 : string = "pub fn main() -> Result<(), String> "
                                            let v13333 : string = v13332 + v13329 
                                            let v13336 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v13429 : string =
                                                if v13336 then
                                                    let v13337 : string = ""
                                                    v13337
                                                else
                                                    let v13338 : string = $"#[near_sdk::near_bindgen]"
                                                    let v13339 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v13341 : string = v13338 + v12122 
                                                    let v13345 : string = v13341 + v13339 
                                                    let v13348 : string = $"pub struct MainState {{"
                                                    let v13350 : string = v13345 + v12122 
                                                    let v13354 : string = v13350 + v13348 
                                                    let v13357 : string = $"}}"
                                                    let v13359 : string = v13354 + v12122 
                                                    let v13363 : string = v13359 + v13357 
                                                    let v13366 : string = $""
                                                    let v13368 : string = v13363 + v12122 
                                                    let v13372 : string = v13368 + v13366 
                                                    let v13375 : string = $"#[near_sdk::near_bindgen]"
                                                    let v13377 : string = v13372 + v12122 
                                                    let v13381 : string = v13377 + v13375 
                                                    let v13384 : string = $"impl MainState {{"
                                                    let v13386 : string = v13381 + v12122 
                                                    let v13390 : string = v13386 + v13384 
                                                    let v13393 : string = $"    pub fn state_main() {{"
                                                    let v13395 : string = v13390 + v12122 
                                                    let v13399 : string = v13395 + v13393 
                                                    let v13402 : string = $"        Spiral::method0();"
                                                    let v13404 : string = v13399 + v12122 
                                                    let v13408 : string = v13404 + v13402 
                                                    let v13411 : string = $"    }}"
                                                    let v13413 : string = v13408 + v12122 
                                                    let v13417 : string = v13413 + v13411 
                                                    let v13420 : string = $"}}"
                                                    let v13422 : string = v13417 + v12122 
                                                    let v13426 : string = v13422 + v13420 
                                                    v13426
                                            let v13430 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v13441 : bool =
                                                if v13430 then
                                                    let v13433 : string = "Spiral::method0()"
                                                    let v13434 : string = v12098 + v13433 
                                                    let v13438 : bool = v13320.Contains v13434 
                                                    v13438
                                                else
                                                    false
                                            let v13444 : string =
                                                if v13441 then
                                                    let v13442 : string = $"{v13333} Ok(Spiral::method0()) }}"
                                                    v13442
                                                else
                                                    let v13443 : string = $"{v13333} Ok(()) }}"
                                                    v13443
                                            let v13446 : string = v13429 + v12122 
                                            let v13450 : string = v13446 + v13444 
                                            let v13454 : bool = v13320.Contains v13333 
                                            let v13457 : string = $"{v13320}\n\n{v13450}\n"
                                            let v13650 : string =
                                                if v13454 then
                                                    v13320
                                                else
                                                    let v13461 : bool =
                                                        match v10691 with
                                                        | US40_0(v13458) -> (* Some *)
                                                            match v13458 with
                                                            | US41_1(v13459) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v13462 : string = "\";\".into()"
                                                    let v13463 : string = Fable.Core.RustInterop.emitRustExpr () v13462 
                                                    let v13466 : string = "),)"
                                                    let v13467 : string = v13466 + v13463 
                                                    let v13470 : string = "));"
                                                    let v13471 : string = v13457.Replace (v13467, v13470)
                                                    let v13472 : string = "\";\".into()"
                                                    let v13473 : string = Fable.Core.RustInterop.emitRustExpr () v13472 
                                                    let v13476 : string = "},)"
                                                    let v13477 : string = v13476 + v13473 
                                                    let v13480 : string = "});"
                                                    let v13481 : string = v13471.Replace (v13477, v13480)
                                                    let v13482 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v13483 : string = " defaultOf::<()>();"
                                                    let v13484 : string = method63(v13482, v13483, v13481)
                                                    let v13485 : string = "\\s\\sgetZero\\(\\);"
                                                    let v13486 : string = " getZero::<()>();"
                                                    let v13487 : string = method63(v13485, v13486, v13484)
                                                    let v13488 : string = "\"t\".into()"
                                                    let v13489 : string = Fable.Core.RustInterop.emitRustExpr () v13488 
                                                    let v13492 : string = "(&e.get_Curren"
                                                    let v13493 : string = v13492 + v13489 
                                                    let v13496 : string = "(e.get_Current"
                                                    let v13497 : string = v13487.Replace (v13493, v13496)
                                                    let v13498 : string = "\"::<()>()\".into()"
                                                    let v13499 : string = Fable.Core.RustInterop.emitRustExpr () v13498 
                                                    let v13502 : string = "getNull"
                                                    let v13503 : string = v13502 + v13499 
                                                    let v13506 : string = "fable_library_rust::Native_::getZero()"
                                                    let v13507 : string = v13497.Replace (v13503, v13506)
                                                    let v13508 : string = $"\")\".into()"
                                                    let v13509 : string = Fable.Core.RustInterop.emitRustExpr () v13508 
                                                    let v13512 : string = "null::<()>("
                                                    let v13513 : string = v13512 + v13509 
                                                    let v13516 : string = v13507.Replace (v13513, v13506)
                                                    let v13517 : string = "null::<\\(\\)>\\(\\)"
                                                    let v13518 : string = method63(v13517, v13506, v13516)
                                                    let v13519 : string = "\\(null::<\\(\\)>\\(\\)"
                                                    let v13520 : string = "(null()"
                                                    let v13521 : string = method63(v13519, v13520, v13518)
                                                    let v13522 : string = " null::<\\(\\)>\\(\\)"
                                                    let v13523 : string = " null()"
                                                    let v13524 : string = method63(v13522, v13523, v13521)
                                                    let v13525 : string = "unbox::<bool>\\(null\\(\\)"
                                                    let v13526 : string = "false"
                                                    let v13527 : string = method63(v13525, v13526, v13524)
                                                    let v13528 : string = "unbox::<string>\\(null\\(\\)"
                                                    let v13529 : string = method63(v13528, v13506, v13527)
                                                    let v13530 : string = "unbox::<i32>\\(null\\(\\)"
                                                    let v13531 : string = "0"
                                                    let v13532 : string = method63(v13530, v13531, v13529)
                                                    let v13533 : string = "unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"
                                                    let v13534 : string = method63(v13533, v13531, v13532)
                                                    let v13535 : string = "null\\(\\)"
                                                    let v13536 : string = method63(v13535, v13506, v13534)
                                                    let v13537 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v13538 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v13539 : string = method63(v13537, v13538, v13536)
                                                    let v13540 : string = " gen:"
                                                    let v13541 : string = " f:"
                                                    let v13542 : string = v13539.Replace (v13540, v13541)
                                                    let v13543 : string = "\\(gen\\("
                                                    let v13544 : string = "(f("
                                                    let v13545 : string = method63(v13543, v13544, v13542)
                                                    let v13546 : string = "\\(gen,"
                                                    let v13547 : string = "(f,"
                                                    let v13548 : string = method63(v13546, v13547, v13545)
                                                    let v13549 : string = " gen "
                                                    let v13550 : string = " f "
                                                    let v13551 : string = v13548.Replace (v13549, v13550)
                                                    let v13552 : string = "::Slice'_"
                                                    let v13553 : string = "::Slice__"
                                                    let v13554 : string = v13551.Replace (v13552, v13553)
                                                    let v13555 : string = " Slice'_"
                                                    let v13556 : string = " Slice__"
                                                    let v13557 : string = v13554.Replace (v13555, v13556)
                                                    let v13558 : string = "\",\".into()"
                                                    let v13559 : string = Fable.Core.RustInterop.emitRustExpr () v13558 
                                                    let v13562 : string = "defaultOf()"
                                                    let v13563 : string = v13562 + v13559 
                                                    let v13566 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v13567 : string = v13557.Replace (v13563, v13566)
                                                    let v13568 : string = "\"__.\".into()"
                                                    let v13569 : string = Fable.Core.RustInterop.emitRustExpr () v13568 
                                                    let v13572 : string = "__self"
                                                    let v13573 : string = v13572 + v13569 
                                                    let v13576 : string = "self."
                                                    let v13577 : string = v13567.Replace (v13573, v13576)
                                                    let v13578 : string = "\"_.\".into()"
                                                    let v13579 : string = Fable.Core.RustInterop.emitRustExpr () v13578 
                                                    let v13582 : string = "_self"
                                                    let v13583 : string = v13582 + v13579 
                                                    let v13586 : string = v13577.Replace (v13583, v13576)
                                                    let v13587 : string = "\"h\".into()"
                                                    let v13588 : string = Fable.Core.RustInterop.emitRustExpr () v13587 
                                                    let v13591 : string = "get_or_insert_wit"
                                                    let v13592 : string = v13591 + v13588 
                                                    let v13595 : string = "get_or_init"
                                                    let v13596 : string = v13586.Replace (v13592, v13595)
                                                    let v13597 : string = "\";\".into()"
                                                    let v13598 : string = Fable.Core.RustInterop.emitRustExpr () v13597 
                                                    let v13601 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v13602 : string = v13601 + v13598 
                                                    let v13605 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v13606 : string = v13596.Replace (v13602, v13605)
                                                    let v13607 : string = "\";\".into()"
                                                    let v13608 : string = Fable.Core.RustInterop.emitRustExpr () v13607 
                                                    let v13611 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v13612 : string = v13611 + v13608 
                                                    let v13615 : string = "type TimeZoneInfo = i64;"
                                                    let v13616 : string = v13606.Replace (v13612, v13615)
                                                    let v13617 : string = "\";\".into()"
                                                    let v13618 : string = Fable.Core.RustInterop.emitRustExpr () v13617 
                                                    let v13621 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v13622 : string = v13621 + v13618 
                                                    let v13625 : string = "type TaskCanceledException = ();"
                                                    let v13626 : string = v13616.Replace (v13622, v13625)
                                                    let v13635 : (string -> string) =
                                                        if v12117 then
                                                            closure88()
                                                        else
                                                            let v13630 : string = "// "
                                                            let v13631 : string = v13630 + v12098 
                                                            closure89(v12098, v13631)
                                                    let v13636 : string = v13635 v13626
                                                    let v13637 : bool = v13461 = false
                                                    let v13648 : (string -> string) =
                                                        if v13637 then
                                                            closure88()
                                                        else
                                                            let v13642 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v13643 : string = ";"
                                                            let v13644 : string = v13642 + v13643 
                                                            closure90(v13644)
                                                    v13648 v13636
                                            let v13651 : bool = v13454 = false
                                            if v13651 then
                                                method76(v11984, v13650)
                                            let v13652 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v13653 : bool = v13652 <> true
                                            let v13656 : string =
                                                if v13653 then
                                                    let v13654 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v10993}\""
                                                    v13654
                                                else
                                                    let v13655 : string = $"cargo run --manifest-path \"{v10993}\""
                                                    v13655
                                            let v13657 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v13658 : bool = v13657 <> true
                                            let v13669 : (struct (string * string) []) =
                                                if v13658 then
                                                    [||]
                                                else
                                                    let v13660 : string = "TRACE_LEVEL"
                                                    let v13661 : string = "Verbose"
                                                    let v13662 : string = "RUSTC_WRAPPER"
                                                    let v13663 : string = "sccache"
                                                    let v13664 : string = "RUST_BACKTRACE"
                                                    let v13665 : string = "full"
                                                    let v13666 : string = "RUSTFLAGS"
                                                    let v13667 : string = "-C prefer-dynamic"
                                                    [|struct (v13660, v13661); struct (v13662, v13663); struct (v13664, v13665); struct (v13666, v13667)|]
                                            let v13671 : System.Threading.CancellationToken option = None
                                            let v13674 : (struct (string * string) []) = [||]
                                            let v13676 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v13680 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v13684 : string option = None
                                            let v13698 : Result<string, string> =
                                                match v10854 with
                                                | US14_1(v13692) -> (* Error *)
                                                    let v13694 : Result<string, string> = Error v13692 
                                                    v13694
                                                | US14_0(v13687) -> (* Ok *)
                                                    let v13689 : Result<string, string> = Ok v13687 
                                                    v13689
                                            (* run_target_args'
                                            let v13700 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v13701 : string = "$0.ok()"
                                            let v13702 : string option = Fable.Core.RustInterop.emitRustExpr v13698 v13701 
                                            let _run_target_args'_v13700 = v13702 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v13703 : string = "$0.ok()"
                                            let v13704 : string option = Fable.Core.RustInterop.emitRustExpr v13698 v13703 
                                            let _run_target_args'_v13700 = v13704 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v13705 : string = "$0.ok()"
                                            let v13706 : string option = Fable.Core.RustInterop.emitRustExpr v13698 v13705 
                                            let _run_target_args'_v13700 = v13706 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v13707 : string option = match v13698 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v13700 = v13707 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v13708 : string option = match v13698 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v13700 = v13708 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v13709 : string option = match v13698 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v13700 = v13709 
                                            #endif
#else
                                            let v13710 : string option = match v13698 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v13700 = v13710 
                                            #endif
                                            let v13711 : string option = _run_target_args'_v13700 
                                            let v13714 : bool = true
                                            let v13715 : bool = true
                                            let struct (v13716 : int32, v13717 : string) = method90(v13656, v13671, v13669, v13676, v13680, v13714, v13711, v13715)
                                            let v13718 : bool =
                                                match v10691 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v15727 : US5, v15728 : US5, v15729 : US5, v15730 : US5) =
                                                if v13718 then
                                                    let v13719 : int32 = v13669.Length
                                                    let v13720 : (string []) = Array.zeroCreate<string> (v13719)
                                                    let v13721 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v13719, v13721) do
                                                        let v13723 : int32 = v13721.l0
                                                        let struct (v13724 : string, v13725 : string) = v13669.[int v13723]
                                                        let v13726 : string = $"$env:{v13724}=''{v13725}''"
                                                        v13720.[int v13723] <- v13726
                                                        let v13727 : int32 = v13723 + 1
                                                        v13721.l0 <- v13727
                                                        ()
                                                    let v13729 : string seq = v13720 |> Seq.ofArray
                                                    let v13734 : (string -> (string seq -> string)) = String.concat
                                                    let v13735 : string = ";"
                                                    let v13736 : (string seq -> string) = v13734 v13735
                                                    let v13737 : string = v13736 v13729
                                                    let v13740 : (string []) = [|v13737; v13656|]
                                                    let v13742 : string seq = v13740 |> Seq.ofArray
                                                    let v13746 : (string -> (string seq -> string)) = String.concat
                                                    let v13747 : (string seq -> string) = v13746 v13735
                                                    let v13748 : string = v13747 v13742
                                                    let v13751 : string = $"pwsh -c '{v13748}'"
                                                    let v13753 : bool = v13716 <> 0 
                                                    let struct (v14411 : US5, v14412 : US5, v14413 : US5, v14414 : US5) =
                                                        if v13753 then
                                                            let v14065 : unit = ()
                                                            let v14066 : (unit -> unit) = closure91(v10534, v11984, v13717, v13716, v13751)
                                                            let v14067 : unit = (fun () -> v14066 (); v14065) ()
                                                            let v14380 : US5 = US5_0(v10801)
                                                            let v14381 : US5 = US5_1
                                                            let v14382 : US5 = US5_1
                                                            let v14383 : US5 = US5_1
                                                            struct (v14380, v14381, v14382, v14383)
                                                        else
                                                            let v14384 : (string -> US5) = closure62()
                                                            let v14385 : (unit -> string) = closure92(v13717)
                                                            let v14386 : (exn -> US5) = closure94(v11984, v13717, v13751)
                                                            let v14389 : US5 = US5_1
                                                            let result = ref v14389
                                                            try
                                                                result.Value <- v14385 () |> v14384 
                                                            with ex ->
                                                                result.Value <- v14386 ex 
                                                            let v14390 : US5 = result.Value
                                                            let v14404 : string option =
                                                                match v14390 with
                                                                | US5_1 -> (* None *)
                                                                    let v14400 : string option = None
                                                                    v14400
                                                                | US5_0(v14394) -> (* Some *)
                                                                    let v14396 : string option = Some v14394 
                                                                    v14396
                                                            let v14405 : string = "$0.unwrap()"
                                                            let v14406 : string = Fable.Core.RustInterop.emitRustExpr v14404 v14405 
                                                            let v14407 : US5 = US5_0(v10801)
                                                            let v14408 : US5 = US5_0(v13650)
                                                            let v14409 : US5 = US5_0(v11984)
                                                            let v14410 : US5 = US5_0(v14406)
                                                            struct (v14407, v14408, v14409, v14410)
                                                    struct (v14411, v14412, v14413, v14414)
                                                else
                                                    let v14415 : string = $"target/spiral/{v10875}/target/wasm32-unknown-unknown/release/spiral_{v10803}.wasm"
                                                    let v14422 : string =
                                                        match v10691 with
                                                        | US40_0(v14416) -> (* Some *)
                                                            match v14416 with
                                                            | US41_1(v14418) -> (* Contract *)
                                                                v14418
                                                            | US41_0(v14417) -> (* Wasm *)
                                                                v14417
                                                        | _ ->
                                                            let v14421 : string = ""
                                                            v14421
                                                    let v14423 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v14415} -t debug {v14422}'"
                                                    let v14424 : string = "AUTOMATION"
                                                    let v14425 : string = method3(v14424)
                                                    let v14426 : string = "scripts/invoke-block.ps1"
                                                    let v14427 : string = $"pwsh -c \"pwsh {v14426} {v14423} -Linux -EnvironmentVariables AUTOMATION={v14425}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v14428 : bool = v13716 = 0
                                                    let struct (v15723 : US5, v15724 : US5, v15725 : US5, v15726 : US5) =
                                                        if v14428 then
                                                            let v14430 : System.Threading.CancellationToken option = None
                                                            let v14433 : (struct (string * string) []) = [||]
                                                            let v14435 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v14439 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v14443 : string option = None
                                                            let v14447 : string option = Some v10874 
                                                            let v14450 : bool = true
                                                            let v14451 : bool = true
                                                            let struct (v14452 : int32, v14453 : string) = method90(v14427, v14430, v14433, v14435, v14439, v14450, v14447, v14451)
                                                            let v14454 : bool = v14452 = 0
                                                            let struct (v15089 : US5, v15090 : US5, v15091 : US5, v15092 : US5) =
                                                                if v14454 then
                                                                    let v14455 : US5 = US5_0(v10801)
                                                                    let v14456 : US5 = US5_0(v13650)
                                                                    let v14457 : US5 = US5_0(v11984)
                                                                    let v14458 : US5 = US5_0(v14453)
                                                                    struct (v14455, v14456, v14457, v14458)
                                                                else
                                                                    let v14769 : unit = ()
                                                                    let v14770 : (unit -> unit) = closure96(v10534, v11984, v13717, v14453, v14452)
                                                                    let v14771 : unit = (fun () -> v14770 (); v14769) ()
                                                                    let v15085 : US5 = US5_0(v10801)
                                                                    let v15086 : US5 = US5_1
                                                                    let v15087 : US5 = US5_1
                                                                    let v15088 : US5 = US5_1
                                                                    struct (v15085, v15086, v15087, v15088)
                                                            struct (v15089, v15090, v15091, v15092)
                                                        else
                                                            let v15403 : unit = ()
                                                            let v15404 : (unit -> unit) = closure97(v10534, v11984, v13717, v13716, v14415, v14427)
                                                            let v15405 : unit = (fun () -> v15404 (); v15403) ()
                                                            let v15719 : US5 = US5_0(v10801)
                                                            let v15720 : US5 = US5_1
                                                            let v15721 : US5 = US5_1
                                                            let v15722 : US5 = US5_1
                                                            struct (v15719, v15720, v15721, v15722)
                                                    struct (v15723, v15724, v15725, v15726)
                                            let v15731 : string = "CI"
                                            let v15732 : string = method3(v15731)
                                            let v15735 : bool =
                                                if v10534 then
                                                    true
                                                else
                                                    let v15733 : bool = v15732 = ""
                                                    let v15734 : bool = v15733 <> true
                                                    v15734
                                            if v15735 then
                                                let v15736 : bool = true
                                                method71(v15736, v10879)
                                                let v15737 : bool =
                                                    match v10691 with
                                                    | US40_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v15738 : bool = v15737 <> true
                                                let v15741 : string =
                                                    if v15738 then
                                                        let v15739 : string = "wasm32-unknown-unknown/release"
                                                        v15739
                                                    else
                                                        let v15740 : string = "debug"
                                                        v15740
                                                let v15742 : string = ""
                                                let v15743 : string = $"target/{v15741}/spiral_{v10803}{v15742}"
                                                let v15744 : string = method33(v10887, v15743)
                                                let v15745 : string = ".wasm"
                                                let v15746 : string = $"target/{v15741}/spiral_{v10803}{v15745}"
                                                let v15747 : string = method33(v10887, v15746)
                                                let v15748 : string = ".pdb"
                                                let v15749 : string = $"target/{v15741}/spiral_{v10803}{v15748}"
                                                let v15750 : string = method33(v10887, v15749)
                                                let v15751 : string = ".exe"
                                                let v15752 : string = $"target/{v15741}/spiral_{v10803}{v15751}"
                                                let v15753 : string = method33(v10887, v15752)
                                                let v15754 : string = ".d"
                                                let v15755 : string = $"target/{v15741}/spiral_{v10803}{v15754}"
                                                let v15756 : string = method33(v10887, v15755)
                                                let v15757 : bool = method35(v15744)
                                                let v15758 : bool = method35(v15747)
                                                let v15759 : bool = method35(v15750)
                                                let v15760 : bool = method35(v15753)
                                                let v15761 : bool = method35(v15756)
                                                let v16069 : unit = ()
                                                let v16070 : (unit -> unit) = closure98(v11984, v15756, v15761, v15753, v15760, v15750, v15759, v15747, v15758, v15744, v15757)
                                                let v16071 : unit = (fun () -> v16070 (); v16069) ()
                                                let v16385 : UH5 =
                                                    if v15757 then
                                                        let v16382 : UH5 = UH5_0
                                                        UH5_1(v15744, v15757, v16382)
                                                    else
                                                        UH5_0
                                                let v16387 : UH5 =
                                                    if v15758 then
                                                        UH5_1(v15747, v15758, v16385)
                                                    else
                                                        v16385
                                                let v16389 : UH5 =
                                                    if v15759 then
                                                        UH5_1(v15750, v15759, v16387)
                                                    else
                                                        v16387
                                                let v16391 : UH5 =
                                                    if v15760 then
                                                        UH5_1(v15753, v15760, v16389)
                                                    else
                                                        v16389
                                                let v16393 : UH5 =
                                                    if v15761 then
                                                        UH5_1(v15756, v15761, v16391)
                                                    else
                                                        v16391
                                                method236(v16393)
                                            struct (v15727, v15728, v15729, v15730)
                                    struct (v16394, v16395, v16396, v16397)
                                else
                                    let v16398 : string = "fable_library_rust::String_::fromString($0)"
                                    let v16399 : string = Fable.Core.RustInterop.emitRustExpr v40 v16398 
                                    let v16400 : bool = v16399 = "typescript"
                                    let struct (v22854 : US5, v22855 : US5, v22856 : US5, v22857 : US5) =
                                        if v16400 then
                                            let v16401 : string = method171()
                                            (* run_target_args'
                                            let v16406 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v16407 : string = "&*$0"
                                            let v16408 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16401 v16407 
                                            let _run_target_args'_v16406 = v16408 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16409 : string = "&*$0"
                                            let v16410 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16401 v16409 
                                            let _run_target_args'_v16406 = v16410 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16411 : string = "&*$0"
                                            let v16412 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16401 v16411 
                                            let _run_target_args'_v16406 = v16412 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16414 : Ref<Str> = v16401 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16406 = v16414 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16418 : Ref<Str> = v16401 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16406 = v16418 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16422 : Ref<Str> = v16401 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16406 = v16422 
                                            #endif
#else
                                            let v16426 : Ref<Str> = v16401 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16406 = v16426 
                                            #endif
                                            let v16429 : Ref<Str> = _run_target_args'_v16406 
                                            let v16438 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v16439 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v16429) v16438 
                                            let v16442 : (std_string_String -> US8) = method20()
                                            let v16443 : US8 option = v16439 |> Option.map v16442 
                                            let v16463 : US8 = US8_1
                                            let v16464 : US8 = v16443 |> Option.defaultValue v16463 
                                            let v16471 : std_string_String =
                                                match v16464 with
                                                | US8_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US8_0(v16468) -> (* Some *)
                                                    v16468
                                            let v16472 : string = "fable_library_rust::String_::fromString($0)"
                                            let v16473 : string = Fable.Core.RustInterop.emitRustExpr v16471 v16472 
                                            let v16474 : string = method22()
                                            (* run_target_args'
                                            let v16479 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v16480 : string = "&*$0"
                                            let v16481 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16474 v16480 
                                            let _run_target_args'_v16479 = v16481 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16482 : string = "&*$0"
                                            let v16483 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16474 v16482 
                                            let _run_target_args'_v16479 = v16483 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16484 : string = "&*$0"
                                            let v16485 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16474 v16484 
                                            let _run_target_args'_v16479 = v16485 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16487 : Ref<Str> = v16474 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16479 = v16487 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16491 : Ref<Str> = v16474 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16479 = v16491 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16495 : Ref<Str> = v16474 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16479 = v16495 
                                            #endif
#else
                                            let v16499 : Ref<Str> = v16474 |> unbox<Ref<Str>>
                                            let _run_target_args'_v16479 = v16499 
                                            #endif
                                            let v16502 : Ref<Str> = _run_target_args'_v16479 
                                            let v16511 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v16512 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v16502) v16511 
                                            let v16515 : (Vec<std_string_String> -> US12) = method23()
                                            let v16516 : US12 option = v16512 |> Option.map v16515 
                                            let v16536 : US12 = US12_1
                                            let v16537 : US12 = v16516 |> Option.defaultValue v16536 
                                            let v16541 : (std_string_String []) = [||]
                                            let v16542 : string = "$0.to_vec()"
                                            let v16543 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v16541 v16542 
                                            let v16546 : Vec<std_string_String> =
                                                match v16537 with
                                                | US12_1 -> (* None *)
                                                    v16543
                                                | US12_0(v16544) -> (* Some *)
                                                    v16544
                                            (* run_target_args'
                                            let v16551 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v16556 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v16557 : string = "std::fs::read(&*$0)"
                                            let v16558 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v16473 v16557 
                                            (* run_target_args'
                                            let v16560 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v16561 : string = "$0.unwrap()"
                                            let v16562 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16558 v16561 
                                            let _run_target_args'_v16560 = v16562 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16563 : string = "$0.unwrap()"
                                            let v16564 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16558 v16563 
                                            let _run_target_args'_v16560 = v16564 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16565 : string = "$0.unwrap()"
                                            let v16566 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16558 v16565 
                                            let _run_target_args'_v16560 = v16566 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16567 : Vec<uint8> = match v16558 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16560 = v16567 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16568 : Vec<uint8> = match v16558 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16560 = v16568 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16569 : Vec<uint8> = match v16558 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16560 = v16569 
                                            #endif
#else
                                            let v16570 : Vec<uint8> = match v16558 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16560 = v16570 
                                            #endif
                                            let v16571 : Vec<uint8> = _run_target_args'_v16560 
                                            let _run_target_args'_v16556 = v16571 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16575 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v16556 = v16575 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16579 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v16556 = v16579 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16583 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v16556 = v16583 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16587 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v16556 = v16587 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16591 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v16556 = v16591 
                                            #endif
#else
                                            let v16594 : (uint8 []) = v16473 |> System.IO.File.ReadAllBytes
                                            let v16595 : string = "$0.to_vec()"
                                            let v16596 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16594 v16595 
                                            let _run_target_args'_v16556 = v16596 
                                            #endif
                                            let v16597 : Vec<uint8> = _run_target_args'_v16556 
                                            let v16606 : Vec<uint8> = method24(v16597)
                                            let v16607 : string = "std::string::String::from_utf8($0)"
                                            let v16608 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v16606 v16607 
                                            (* run_target_args'
                                            let v16610 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v16611 : string = "$0.unwrap()"
                                            let v16612 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16608 v16611 
                                            let _run_target_args'_v16610 = v16612 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16613 : string = "$0.unwrap()"
                                            let v16614 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16608 v16613 
                                            let _run_target_args'_v16610 = v16614 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16615 : string = "$0.unwrap()"
                                            let v16616 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16608 v16615 
                                            let _run_target_args'_v16610 = v16616 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16617 : std_string_String = match v16608 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16610 = v16617 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16618 : std_string_String = match v16608 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16610 = v16618 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16619 : std_string_String = match v16608 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16610 = v16619 
                                            #endif
#else
                                            let v16620 : std_string_String = match v16608 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v16610 = v16620 
                                            #endif
                                            let v16621 : std_string_String = _run_target_args'_v16610 
                                            let v16624 : string = "fable_library_rust::String_::fromString($0)"
                                            let v16625 : string = Fable.Core.RustInterop.emitRustExpr v16621 v16624 
                                            let _run_target_args'_v16551 = v16625 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v16627 : string = null |> unbox<string>
                                            let _run_target_args'_v16551 = v16627 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v16631 : string = null |> unbox<string>
                                            let _run_target_args'_v16551 = v16631 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v16635 : string = null |> unbox<string>
                                            let _run_target_args'_v16551 = v16635 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v16639 : string = null |> unbox<string>
                                            let _run_target_args'_v16551 = v16639 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v16643 : string = null |> unbox<string>
                                            let _run_target_args'_v16551 = v16643 
                                            #endif
#else
                                            let v16646 : string = v16473 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v16551 = v16646 
                                            #endif
                                            let v16647 : string = _run_target_args'_v16551 
                                            let v16656 : string = "ts"
                                            let v16657 : string = method237(v16656, v16647)
                                            let v16658 : string = method26(v16657)
                                            let v16659 : string = method31()
                                            let v16660 : US5 = method32(v16659)
                                            let v16666 : US5 =
                                                match v16660 with
                                                | US5_1 -> (* None *)
                                                    let v16663 : string = __SOURCE_DIRECTORY__
                                                    method32(v16663)
                                                | US5_0(v16661) -> (* Some *)
                                                    US5_0(v16661)
                                            let v16672 : US5 =
                                                match v16666 with
                                                | US5_1 -> (* None *)
                                                    let v16669 : string = "/workspaces"
                                                    method32(v16669)
                                                | US5_0(v16667) -> (* Some *)
                                                    US5_0(v16667)
                                            let v16676 : string =
                                                match v16672 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v16673) -> (* Some *)
                                                    v16673
                                            let v16677 : string = method52(v16676)
                                            let v16678 : bool = "deps" = v16677
                                            let v16689 : string =
                                                if v16678 then
                                                    let v16679 : string option = method38(v16676)
                                                    let v16681 : string = v16679 |> Option.get
                                                    let v16684 : US5 = method32(v16681)
                                                    match v16684 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v16685) -> (* Some *)
                                                        v16685
                                                else
                                                    v16676
                                            let v16690 : string = "polyglot"
                                            let v16691 : string = method33(v16689, v16690)
                                            let v16692 : string = method31()
                                            let v16694 : (unit -> string) = v16692.ToLower
                                            let v16695 : string = v16694 ()
                                            let v16699 : (unit -> string) = v16691.ToLower
                                            let v16700 : string = v16699 ()
                                            let v16704 : bool = v16695.StartsWith (v16700, false, null)
                                            let v16709 : US14 =
                                                if v16704 then
                                                    US14_1(v16700)
                                                else
                                                    US14_0(v16700)
                                            let v16721 : Result<string, string> =
                                                match v16709 with
                                                | US14_1(v16715) -> (* Error *)
                                                    let v16717 : Result<string, string> = Error v16715 
                                                    v16717
                                                | US14_0(v16710) -> (* Ok *)
                                                    let v16712 : Result<string, string> = Ok v16710 
                                                    v16712
                                            let v16722 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v16723 : bool = Fable.Core.RustInterop.emitRustExpr v16721 v16722 
                                            let v16724 : string = "x"
                                            let v16725 : string = Fable.Core.RustInterop.emitRustExpr () v16724 
                                            let v16726 : string = "true; $0 })"
                                            let v16727 : bool = Fable.Core.RustInterop.emitRustExpr v16725 v16726 
                                            let v16728 : string = "_result_unwrap_or_else"
                                            let v16729 : string = Fable.Core.RustInterop.emitRustExpr () v16728 
                                            let v16730 : string = "spiral"
                                            let v16731 : US42 = US42_1
                                            let v16732 : US43 = US43_0(v16731)
                                            let v16733 : US5 = US5_0(v16658)
                                            let v16734 : string = method195(v16733, v16730, v16732, v16729)
                                            let v16735 : string = "Fable.Core"
                                            let v16736 : string = "4.3.0"
                                            let v16737 : UH4 = UH4_0
                                            let v16738 : UH4 = UH4_1(v16735, v16736, v16737)
                                            let v16739 : UH2 = UH2_0
                                            let v16740 : string = method196(v16647, v16730, v16739, v16738, v16734, v16729)
                                            let v16741 : string = "lib/typescript/fable/fable_modules"
                                            let v16742 : string = method33(v16729, v16741)
                                            let v16743 : string = $"fable-library-{v16656}"
                                            let v16744 : string = method238(v16743)
                                            let v16745 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v16746 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v16742 v16745 
                                            let v16747 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v16748 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure99(v16743)
                                            let v16749 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v16746, v16748) v16747 
                                            let v16750 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method242(v16744)
                                            let v16751 : string = "futures::stream::StreamExt::filter_map(v16749, |x| async { v16750(x) })"
                                            let v16752 : _ = Fable.Core.RustInterop.emitRustExpr () v16751 
                                            let v16753 : string = "Box::pin(futures::stream::StreamExt::collect(v16752))"
                                            let v16754 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v16753 
                                            let v16755 : string = "v16754.await"
                                            let v16756 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v16755 
                                            let v16757 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v16758 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v16756 v16757 
                                            let v16759 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v16760 : (struct (string * string) -> struct (string * string)) = closure107()
                                            let v16761 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v16758, v16760) v16759 
                                            let v16762 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v16763 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v16761 v16762 
                                            let v16764 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v16765 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v16763 v16764 
                                            let v16766 : struct (string * string) option = v16765 |> Array.tryItem 0 
                                            let v16769 : (struct (string * string) -> US50) = method248()
                                            let v16770 : US50 option = v16766 |> Option.map v16769 
                                            let v16791 : US50 = US50_1
                                            let v16792 : US50 = v16770 |> Option.defaultValue v16791 
                                            let v17107 : unit = ()
                                            let v17108 : (unit -> unit) = closure109(v16792)
                                            let v17109 : unit = (fun () -> v17108 (); v17107) ()
                                            method251(v16734, v16742, v16792)
                                            let v17424 : US40 = US40_1
                                            let struct (v17425 : int32, v17426 : string) = method205(v17424, v16734, v16656, v16740, v16709)
                                            method251(v16734, v16742, v16792)
                                            let v17428 : bool = v17425 <> 0 
                                            let struct (v19673 : US5, v19674 : US5, v19675 : US5, v19676 : US5) =
                                                if v17428 then
                                                    let v17742 : unit = ()
                                                    let v17743 : (unit -> unit) = closure110(v17426, v17425)
                                                    let v17744 : unit = (fun () -> v17743 (); v17742) ()
                                                    let v18059 : US5 = US5_0(v16656)
                                                    let v18060 : US5 = US5_1
                                                    let v18061 : US5 = US5_1
                                                    let v18062 : US5 = US5_0(v17426)
                                                    struct (v18059, v18060, v18061, v18062)
                                                else
                                                    let v18063 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v18064 : bool = Fable.Core.RustInterop.emitRustExpr v16546 v18063 
                                                    let v18065 : string = "x"
                                                    let v18066 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v18065 
                                                    let v18067 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18068 : string = Fable.Core.RustInterop.emitRustExpr v18066 v18067 
                                                    let v18071 : string = "="
                                                    let v18072 : bool = v18068.Contains v18071 
                                                    let v18076 : string =
                                                        if v18072 then
                                                            v18068
                                                        else
                                                            let v18075 : string = $"\"{v18068}\":\"*\""
                                                            v18075
                                                    let v18077 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v18078 : bool = Fable.Core.RustInterop.emitRustExpr v18076 v18077 
                                                    let v18079 : string = "_vec_map"
                                                    let v18080 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v18079 
                                                    let v18081 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v18082 : (string []) = Fable.Core.RustInterop.emitRustExpr v18080 v18081 
                                                    let v18087 : unit = ()
                                                    let _let'_v18087 =
                                                        seq {
                                                            for i = 0 to v18082.Length - 1 do yield v18082.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v18090 : string seq = _let'_v18087 
                                                    let v18098 : (string -> (string seq -> string)) = String.concat
                                                    let v18099 : string = ",\n"
                                                    let v18100 : (string seq -> string) = v18098 v18099
                                                    let v18101 : string = v18100 v18090
                                                    let v18104 : string = $"{{"
                                                    let v18105 : string = $"  \"name\": \"spiral_{v16658}\","
                                                    let v18106 : string = v18104 + v18105 
                                                    let v18107 : string = $"  \"dependencies\": {{"
                                                    let v18108 : string = v18106 + v18107 
                                                    let v18109 : string = v18108 + v18101 
                                                    let v18110 : string = $"  }},"
                                                    let v18111 : string = v18109 + v18110 
                                                    let v18112 : string = $"    \"devDependencies\": {{"
                                                    let v18113 : string = v18111 + v18112 
                                                    let v18114 : string = $"  }},"
                                                    let v18115 : string = v18113 + v18114 
                                                    let v18116 : string = $"}}"
                                                    let v18117 : string = v18115 + v18116 
                                                    let v18118 : string = "package.json"
                                                    let v18119 : string = method33(v16734, v18118)
                                                    let v18120 : string = "../.."
                                                    let v18121 : string = method33(v16734, v18120)
                                                    let v18122 : string = method33(v18121, v18118)
                                                    method76(v18119, v18117)
                                                    let v18123 : string = ""
                                                    method76(v18122, v18123)
                                                    let v18124 : string = $"{v16730}.{v16656}"
                                                    let v18125 : string = method33(v16734, v18124)
                                                    let v18435 : unit = ()
                                                    let v18436 : (unit -> unit) = closure111(v18125)
                                                    let v18437 : unit = (fun () -> v18436 (); v18435) ()
                                                    (* run_target_args'
                                                    let v18754 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v18759 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18760 : string = "std::fs::read(&*$0)"
                                                    let v18761 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v18125 v18760 
                                                    (* run_target_args'
                                                    let v18763 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18764 : string = "$0.unwrap()"
                                                    let v18765 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18761 v18764 
                                                    let _run_target_args'_v18763 = v18765 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18766 : string = "$0.unwrap()"
                                                    let v18767 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18761 v18766 
                                                    let _run_target_args'_v18763 = v18767 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18768 : string = "$0.unwrap()"
                                                    let v18769 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18761 v18768 
                                                    let _run_target_args'_v18763 = v18769 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18770 : Vec<uint8> = match v18761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18763 = v18770 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18771 : Vec<uint8> = match v18761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18763 = v18771 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18772 : Vec<uint8> = match v18761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18763 = v18772 
                                                    #endif
#else
                                                    let v18773 : Vec<uint8> = match v18761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18763 = v18773 
                                                    #endif
                                                    let v18774 : Vec<uint8> = _run_target_args'_v18763 
                                                    let _run_target_args'_v18759 = v18774 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18778 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18759 = v18778 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18782 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18759 = v18782 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18786 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18759 = v18786 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18790 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18759 = v18790 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18794 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18759 = v18794 
                                                    #endif
#else
                                                    let v18797 : (uint8 []) = v18125 |> System.IO.File.ReadAllBytes
                                                    let v18798 : string = "$0.to_vec()"
                                                    let v18799 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18797 v18798 
                                                    let _run_target_args'_v18759 = v18799 
                                                    #endif
                                                    let v18800 : Vec<uint8> = _run_target_args'_v18759 
                                                    let v18809 : Vec<uint8> = method24(v18800)
                                                    let v18810 : string = "std::string::String::from_utf8($0)"
                                                    let v18811 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v18809 v18810 
                                                    (* run_target_args'
                                                    let v18813 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18814 : string = "$0.unwrap()"
                                                    let v18815 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18811 v18814 
                                                    let _run_target_args'_v18813 = v18815 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18816 : string = "$0.unwrap()"
                                                    let v18817 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18811 v18816 
                                                    let _run_target_args'_v18813 = v18817 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18818 : string = "$0.unwrap()"
                                                    let v18819 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18811 v18818 
                                                    let _run_target_args'_v18813 = v18819 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18820 : std_string_String = match v18811 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18813 = v18820 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18821 : std_string_String = match v18811 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18813 = v18821 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18822 : std_string_String = match v18811 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18813 = v18822 
                                                    #endif
#else
                                                    let v18823 : std_string_String = match v18811 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18813 = v18823 
                                                    #endif
                                                    let v18824 : std_string_String = _run_target_args'_v18813 
                                                    let v18827 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18828 : string = Fable.Core.RustInterop.emitRustExpr v18824 v18827 
                                                    let _run_target_args'_v18754 = v18828 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18830 : string = null |> unbox<string>
                                                    let _run_target_args'_v18754 = v18830 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18834 : string = null |> unbox<string>
                                                    let _run_target_args'_v18754 = v18834 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18838 : string = null |> unbox<string>
                                                    let _run_target_args'_v18754 = v18838 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18842 : string = null |> unbox<string>
                                                    let _run_target_args'_v18754 = v18842 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18846 : string = null |> unbox<string>
                                                    let _run_target_args'_v18754 = v18846 
                                                    #endif
#else
                                                    let v18849 : string = v18125 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v18754 = v18849 
                                                    #endif
                                                    let v18850 : string = _run_target_args'_v18754 
                                                    let v18861 : string = "// spiral.process_typescript"
                                                    let v18862 : bool = v18850.Contains v18861 
                                                    let v18871 : string =
                                                        if v18862 then
                                                            v18850
                                                        else
                                                            let v18865 : string = $"\"./fable_modules/fable-library-ts.{v16792}/"
                                                            let v18866 : string = $"\"{v16729}/lib/typescript/fable/fable_modules/fable-library-ts.{v16792}/"
                                                            let v18867 : string = v18850.Replace (v18865, v18866)
                                                            let v18868 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v18869 : string = " defaultOf::<()>();"
                                                            method63(v18868, v18869, v18867)
                                                    let v18872 : bool = v18862 = false
                                                    if v18872 then
                                                        let v18873 : string = $"{v18871}\n\n{v18861}\n"
                                                        method76(v18125, v18873)
                                                    let v18874 : string = $"bun --bun run \"{v18125}\""
                                                    let v18875 : string = "PATH"
                                                    let v18876 : string = method3(v18875)
                                                    let v18877 : bool = v18876 = ""
                                                    let v18916 : US5 =
                                                        if v18877 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v18880 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v18881 : string = "cfg!(windows)"
                                                            let v18882 : bool = Fable.Core.RustInterop.emitRustExpr () v18881 
                                                            let _run_target_args'_v18880 = v18882 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v18883 : string = "cfg!(windows)"
                                                            let v18884 : bool = Fable.Core.RustInterop.emitRustExpr () v18883 
                                                            let _run_target_args'_v18880 = v18884 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v18885 : string = "cfg!(windows)"
                                                            let v18886 : bool = Fable.Core.RustInterop.emitRustExpr () v18885 
                                                            let _run_target_args'_v18880 = v18886 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v18887 : US3 = US3_0
                                                            let v18888 : US4 = US4_5(v18887)
                                                            let v18889 : string = $"platform.is_windows / target: {v18888}"
                                                            let v18890 : bool = failwith<bool> v18889
                                                            let _run_target_args'_v18880 = v18890 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v18891 : US3 = US3_0
                                                            let v18892 : US4 = US4_6(v18891)
                                                            let v18893 : string = $"platform.is_windows / target: {v18892}"
                                                            let v18894 : bool = failwith<bool> v18893
                                                            let _run_target_args'_v18880 = v18894 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v18895 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v18896 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v18897 : bool = v18896 v18895
                                                            let _run_target_args'_v18880 = v18897 
                                                            #endif
#else
                                                            let v18898 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v18899 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v18900 : bool = v18899 v18898
                                                            let _run_target_args'_v18880 = v18900 
                                                            #endif
                                                            let v18901 : bool = _run_target_args'_v18880 
                                                            let v18912 : string =
                                                                if v18901 then
                                                                    let v18910 : string = ";"
                                                                    v18910
                                                                else
                                                                    let v18911 : string = ":"
                                                                    v18911
                                                            let v18913 : string = "~/.bun/bin"
                                                            let v18914 : string = $"{v18913}{v18912}{v18876}"
                                                            US5_0(v18914)
                                                    let v18922 : UH4 =
                                                        match v18916 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v18917) -> (* Some *)
                                                            let v18918 : UH4 = UH4_0
                                                            UH4_1(v18875, v18917, v18918)
                                                    let v18923 : string = "TRACE_LEVEL"
                                                    let v18924 : string = "Verbose"
                                                    let v18925 : UH4 = UH4_0
                                                    let v18926 : UH4 = UH4_1(v18923, v18924, v18925)
                                                    let v18927 : UH4 = method255(v18922, v18926)
                                                    let v18928 : struct (string * string) list = []
                                                    let v18929 : struct (string * string) list = method256(v18927, v18928)
                                                    let v18939 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v18940 : (struct (string * string) []) = v18939 v18929
                                                    let v18944 : System.Threading.CancellationToken option = None
                                                    let v18947 : (struct (string * string) []) = [||]
                                                    let v18949 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v18953 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v18957 : string option = None
                                                    let v18971 : Result<string, string> =
                                                        match v16709 with
                                                        | US14_1(v18965) -> (* Error *)
                                                            let v18967 : Result<string, string> = Error v18965 
                                                            v18967
                                                        | US14_0(v18960) -> (* Ok *)
                                                            let v18962 : Result<string, string> = Ok v18960 
                                                            v18962
                                                    (* run_target_args'
                                                    let v18973 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18974 : string = "$0.ok()"
                                                    let v18975 : string option = Fable.Core.RustInterop.emitRustExpr v18971 v18974 
                                                    let _run_target_args'_v18973 = v18975 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18976 : string = "$0.ok()"
                                                    let v18977 : string option = Fable.Core.RustInterop.emitRustExpr v18971 v18976 
                                                    let _run_target_args'_v18973 = v18977 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18978 : string = "$0.ok()"
                                                    let v18979 : string option = Fable.Core.RustInterop.emitRustExpr v18971 v18978 
                                                    let _run_target_args'_v18973 = v18979 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18980 : string option = match v18971 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v18973 = v18980 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18981 : string option = match v18971 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v18973 = v18981 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18982 : string option = match v18971 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v18973 = v18982 
                                                    #endif
#else
                                                    let v18983 : string option = match v18971 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v18973 = v18983 
                                                    #endif
                                                    let v18984 : string option = _run_target_args'_v18973 
                                                    let v18987 : bool = true
                                                    let v18988 : bool = true
                                                    let struct (v18989 : int32, v18990 : string) = method90(v18874, v18944, v18940, v18949, v18953, v18987, v18984, v18988)
                                                    let v18991 : int32 = v18940.Length
                                                    let v18992 : (string []) = Array.zeroCreate<string> (v18991)
                                                    let v18993 : Mut5 = {l0 = 0} : Mut5
                                                    while method29(v18991, v18993) do
                                                        let v18995 : int32 = v18993.l0
                                                        let struct (v18996 : string, v18997 : string) = v18940.[int v18995]
                                                        let v18998 : string = $"$env:{v18996}=''{v18997}''"
                                                        v18992.[int v18995] <- v18998
                                                        let v18999 : int32 = v18995 + 1
                                                        v18993.l0 <- v18999
                                                        ()
                                                    let v19001 : string seq = v18992 |> Seq.ofArray
                                                    let v19006 : (string -> (string seq -> string)) = String.concat
                                                    let v19007 : string = ";"
                                                    let v19008 : (string seq -> string) = v19006 v19007
                                                    let v19009 : string = v19008 v19001
                                                    let v19012 : string = $"pwsh -c '{v19009}; {v18874}'"
                                                    let v19013 : bool = v18989 = 0
                                                    let struct (v19669 : US5, v19670 : US5, v19671 : US5, v19672 : US5) =
                                                        if v19013 then
                                                            let v19014 : (string -> US5) = closure62()
                                                            let v19015 : (unit -> string) = closure112(v18990)
                                                            let v19016 : (exn -> US5) = closure113(v18125, v18990, v19012)
                                                            let v19019 : US5 = US5_1
                                                            let result = ref v19019
                                                            try
                                                                result.Value <- v19015 () |> v19014 
                                                            with ex ->
                                                                result.Value <- v19016 ex 
                                                            let v19020 : US5 = result.Value
                                                            let v19034 : string option =
                                                                match v19020 with
                                                                | US5_1 -> (* None *)
                                                                    let v19030 : string option = None
                                                                    v19030
                                                                | US5_0(v19024) -> (* Some *)
                                                                    let v19026 : string option = Some v19024 
                                                                    v19026
                                                            let v19035 : string = "$0.unwrap()"
                                                            let v19036 : string = Fable.Core.RustInterop.emitRustExpr v19034 v19035 
                                                            let v19037 : US5 = US5_0(v16656)
                                                            let v19038 : US5 = US5_0(v18871)
                                                            let v19039 : US5 = US5_0(v18125)
                                                            let v19040 : US5 = US5_0(v19036)
                                                            struct (v19037, v19038, v19039, v19040)
                                                        else
                                                            let v19350 : unit = ()
                                                            let v19351 : (unit -> unit) = closure115(v18125, v18990, v18989, v19012)
                                                            let v19352 : unit = (fun () -> v19351 (); v19350) ()
                                                            let v19665 : US5 = US5_0(v16656)
                                                            let v19666 : US5 = US5_1
                                                            let v19667 : US5 = US5_1
                                                            let v19668 : US5 = US5_1
                                                            struct (v19665, v19666, v19667, v19668)
                                                    struct (v19669, v19670, v19671, v19672)
                                            struct (v19673, v19674, v19675, v19676)
                                        else
                                            let v19677 : string = "fable_library_rust::String_::fromString($0)"
                                            let v19678 : string = Fable.Core.RustInterop.emitRustExpr v40 v19677 
                                            let v19679 : bool = v19678 = "python"
                                            let struct (v22850 : US5, v22851 : US5, v22852 : US5, v22853 : US5) =
                                                if v19679 then
                                                    let v19680 : string = method171()
                                                    (* run_target_args'
                                                    let v19685 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v19686 : string = "&*$0"
                                                    let v19687 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19680 v19686 
                                                    let _run_target_args'_v19685 = v19687 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19688 : string = "&*$0"
                                                    let v19689 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19680 v19688 
                                                    let _run_target_args'_v19685 = v19689 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19690 : string = "&*$0"
                                                    let v19691 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19680 v19690 
                                                    let _run_target_args'_v19685 = v19691 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19693 : Ref<Str> = v19680 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19685 = v19693 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19697 : Ref<Str> = v19680 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19685 = v19697 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19701 : Ref<Str> = v19680 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19685 = v19701 
                                                    #endif
#else
                                                    let v19705 : Ref<Str> = v19680 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19685 = v19705 
                                                    #endif
                                                    let v19708 : Ref<Str> = _run_target_args'_v19685 
                                                    let v19717 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v19718 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v19708) v19717 
                                                    let v19721 : (std_string_String -> US8) = method20()
                                                    let v19722 : US8 option = v19718 |> Option.map v19721 
                                                    let v19742 : US8 = US8_1
                                                    let v19743 : US8 = v19722 |> Option.defaultValue v19742 
                                                    let v19750 : std_string_String =
                                                        match v19743 with
                                                        | US8_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US8_0(v19747) -> (* Some *)
                                                            v19747
                                                    let v19751 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v19752 : string = Fable.Core.RustInterop.emitRustExpr v19750 v19751 
                                                    let v19753 : string = method22()
                                                    (* run_target_args'
                                                    let v19758 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v19759 : string = "&*$0"
                                                    let v19760 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19753 v19759 
                                                    let _run_target_args'_v19758 = v19760 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19761 : string = "&*$0"
                                                    let v19762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19753 v19761 
                                                    let _run_target_args'_v19758 = v19762 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19763 : string = "&*$0"
                                                    let v19764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19753 v19763 
                                                    let _run_target_args'_v19758 = v19764 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19766 : Ref<Str> = v19753 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19758 = v19766 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19770 : Ref<Str> = v19753 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19758 = v19770 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19774 : Ref<Str> = v19753 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19758 = v19774 
                                                    #endif
#else
                                                    let v19778 : Ref<Str> = v19753 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v19758 = v19778 
                                                    #endif
                                                    let v19781 : Ref<Str> = _run_target_args'_v19758 
                                                    let v19790 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v19791 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v19781) v19790 
                                                    let v19794 : (Vec<std_string_String> -> US12) = method23()
                                                    let v19795 : US12 option = v19791 |> Option.map v19794 
                                                    let v19815 : US12 = US12_1
                                                    let v19816 : US12 = v19795 |> Option.defaultValue v19815 
                                                    let v19820 : (std_string_String []) = [||]
                                                    let v19821 : string = "$0.to_vec()"
                                                    let v19822 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v19820 v19821 
                                                    let v19825 : Vec<std_string_String> =
                                                        match v19816 with
                                                        | US12_1 -> (* None *)
                                                            v19822
                                                        | US12_0(v19823) -> (* Some *)
                                                            v19823
                                                    let v19826 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v19831 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v19836 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v19837 : string = "std::fs::read(&*$0)"
                                                    let v19838 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v19752 v19837 
                                                    (* run_target_args'
                                                    let v19840 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v19841 : string = "$0.unwrap()"
                                                    let v19842 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19838 v19841 
                                                    let _run_target_args'_v19840 = v19842 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19843 : string = "$0.unwrap()"
                                                    let v19844 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19838 v19843 
                                                    let _run_target_args'_v19840 = v19844 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19845 : string = "$0.unwrap()"
                                                    let v19846 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19838 v19845 
                                                    let _run_target_args'_v19840 = v19846 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19847 : Vec<uint8> = match v19838 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19840 = v19847 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19848 : Vec<uint8> = match v19838 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19840 = v19848 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19849 : Vec<uint8> = match v19838 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19840 = v19849 
                                                    #endif
#else
                                                    let v19850 : Vec<uint8> = match v19838 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19840 = v19850 
                                                    #endif
                                                    let v19851 : Vec<uint8> = _run_target_args'_v19840 
                                                    let _run_target_args'_v19836 = v19851 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19855 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v19836 = v19855 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19859 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v19836 = v19859 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19863 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v19836 = v19863 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19867 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v19836 = v19867 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19871 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v19836 = v19871 
                                                    #endif
#else
                                                    let v19874 : (uint8 []) = v19752 |> System.IO.File.ReadAllBytes
                                                    let v19875 : string = "$0.to_vec()"
                                                    let v19876 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v19874 v19875 
                                                    let _run_target_args'_v19836 = v19876 
                                                    #endif
                                                    let v19877 : Vec<uint8> = _run_target_args'_v19836 
                                                    let v19886 : Vec<uint8> = method24(v19877)
                                                    let v19887 : string = "std::string::String::from_utf8($0)"
                                                    let v19888 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v19886 v19887 
                                                    (* run_target_args'
                                                    let v19890 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v19891 : string = "$0.unwrap()"
                                                    let v19892 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19888 v19891 
                                                    let _run_target_args'_v19890 = v19892 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19893 : string = "$0.unwrap()"
                                                    let v19894 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19888 v19893 
                                                    let _run_target_args'_v19890 = v19894 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19895 : string = "$0.unwrap()"
                                                    let v19896 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19888 v19895 
                                                    let _run_target_args'_v19890 = v19896 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19897 : std_string_String = match v19888 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19890 = v19897 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19898 : std_string_String = match v19888 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19890 = v19898 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19899 : std_string_String = match v19888 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19890 = v19899 
                                                    #endif
#else
                                                    let v19900 : std_string_String = match v19888 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v19890 = v19900 
                                                    #endif
                                                    let v19901 : std_string_String = _run_target_args'_v19890 
                                                    let v19904 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v19905 : string = Fable.Core.RustInterop.emitRustExpr v19901 v19904 
                                                    let _run_target_args'_v19831 = v19905 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v19907 : string = null |> unbox<string>
                                                    let _run_target_args'_v19831 = v19907 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v19911 : string = null |> unbox<string>
                                                    let _run_target_args'_v19831 = v19911 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v19915 : string = null |> unbox<string>
                                                    let _run_target_args'_v19831 = v19915 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v19919 : string = null |> unbox<string>
                                                    let _run_target_args'_v19831 = v19919 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v19923 : string = null |> unbox<string>
                                                    let _run_target_args'_v19831 = v19923 
                                                    #endif
#else
                                                    let v19926 : string = v19752 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v19831 = v19926 
                                                    #endif
                                                    let v19927 : string = _run_target_args'_v19831 
                                                    let v19936 : string = "py"
                                                    let v19937 : string = method237(v19936, v19927)
                                                    let v19938 : string = method26(v19937)
                                                    let v19939 : string = method31()
                                                    let v19940 : US5 = method32(v19939)
                                                    let v19946 : US5 =
                                                        match v19940 with
                                                        | US5_1 -> (* None *)
                                                            let v19943 : string = __SOURCE_DIRECTORY__
                                                            method32(v19943)
                                                        | US5_0(v19941) -> (* Some *)
                                                            US5_0(v19941)
                                                    let v19952 : US5 =
                                                        match v19946 with
                                                        | US5_1 -> (* None *)
                                                            let v19949 : string = "/workspaces"
                                                            method32(v19949)
                                                        | US5_0(v19947) -> (* Some *)
                                                            US5_0(v19947)
                                                    let v19956 : string =
                                                        match v19952 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v19953) -> (* Some *)
                                                            v19953
                                                    let v19957 : string = method52(v19956)
                                                    let v19958 : bool = "deps" = v19957
                                                    let v19969 : string =
                                                        if v19958 then
                                                            let v19959 : string option = method38(v19956)
                                                            let v19961 : string = v19959 |> Option.get
                                                            let v19964 : US5 = method32(v19961)
                                                            match v19964 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v19965) -> (* Some *)
                                                                v19965
                                                        else
                                                            v19956
                                                    let v19970 : string = "polyglot"
                                                    let v19971 : string = method33(v19969, v19970)
                                                    let v19972 : string = method31()
                                                    let v19974 : (unit -> string) = v19972.ToLower
                                                    let v19975 : string = v19974 ()
                                                    let v19979 : (unit -> string) = v19971.ToLower
                                                    let v19980 : string = v19979 ()
                                                    let v19984 : bool = v19975.StartsWith (v19980, false, null)
                                                    let v19989 : US14 =
                                                        if v19984 then
                                                            US14_1(v19980)
                                                        else
                                                            US14_0(v19980)
                                                    let v20001 : Result<string, string> =
                                                        match v19989 with
                                                        | US14_1(v19995) -> (* Error *)
                                                            let v19997 : Result<string, string> = Error v19995 
                                                            v19997
                                                        | US14_0(v19990) -> (* Ok *)
                                                            let v19992 : Result<string, string> = Ok v19990 
                                                            v19992
                                                    let v20002 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v20003 : bool = Fable.Core.RustInterop.emitRustExpr v20001 v20002 
                                                    let v20004 : string = "x"
                                                    let v20005 : string = Fable.Core.RustInterop.emitRustExpr () v20004 
                                                    let v20006 : string = "true; $0 })"
                                                    let v20007 : bool = Fable.Core.RustInterop.emitRustExpr v20005 v20006 
                                                    let v20008 : string = "_result_unwrap_or_else"
                                                    let v20009 : string = Fable.Core.RustInterop.emitRustExpr () v20008 
                                                    let v20010 : string = "spiral"
                                                    let v20011 : US42 = US42_2
                                                    let v20012 : US43 = US43_0(v20011)
                                                    let v20013 : US5 = US5_0(v19938)
                                                    let v20014 : string = method195(v20013, v20010, v20012, v20009)
                                                    let v20015 : string = "Fable.Core"
                                                    let v20016 : string = "4.3.0"
                                                    let v20017 : UH4 = UH4_0
                                                    let v20018 : UH4 = UH4_1(v20015, v20016, v20017)
                                                    let v20019 : UH2 = UH2_0
                                                    let v20020 : string = method196(v19927, v20010, v20019, v20018, v20014, v20009)
                                                    let v20021 : string = "lib/python/fable/fable_modules"
                                                    let v20022 : string = method33(v20009, v20021)
                                                    let v20023 : string = $"fable_library"
                                                    let v20024 : string = method33(v20022, v20023)
                                                    let v20025 : string = $"fable_modules/fable_library"
                                                    let v20026 : string = method33(v20014, v20025)
                                                    method204(v20024, v20026)
                                                    let v20027 : US40 = US40_1
                                                    let struct (v20028 : int32, v20029 : string) = method205(v20027, v20014, v19936, v20020, v19989)
                                                    let v20031 : bool = v20028 <> 0 
                                                    let struct (v22214 : US5, v22215 : US5, v22216 : US5, v22217 : US5) =
                                                        if v20031 then
                                                            let v20345 : unit = ()
                                                            let v20346 : (unit -> unit) = closure116(v20029, v20028)
                                                            let v20347 : unit = (fun () -> v20346 (); v20345) ()
                                                            let v20662 : US5 = US5_0(v19936)
                                                            let v20663 : US5 = US5_1
                                                            let v20664 : US5 = US5_1
                                                            let v20665 : US5 = US5_0(v20029)
                                                            struct (v20662, v20663, v20664, v20665)
                                                        else
                                                            let v20666 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v20667 : bool = Fable.Core.RustInterop.emitRustExpr v19825 v20666 
                                                            let v20668 : string = "x"
                                                            let v20669 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20668 
                                                            let v20670 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20671 : string = Fable.Core.RustInterop.emitRustExpr v20669 v20670 
                                                            let v20674 : string = "="
                                                            let v20675 : bool = v20671.Contains v20674 
                                                            let v20679 : string =
                                                                if v20675 then
                                                                    v20671
                                                                else
                                                                    let v20678 : string = $"\"{v20671}\":\"*\""
                                                                    v20678
                                                            let v20680 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v20681 : bool = Fable.Core.RustInterop.emitRustExpr v20679 v20680 
                                                            let v20682 : string = "_vec_map"
                                                            let v20683 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v20682 
                                                            let v20684 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v20685 : (string []) = Fable.Core.RustInterop.emitRustExpr v20683 v20684 
                                                            let v20690 : unit = ()
                                                            let _let'_v20690 =
                                                                seq {
                                                                    for i = 0 to v20685.Length - 1 do yield v20685.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v20693 : string seq = _let'_v20690 
                                                            let v20701 : (string -> (string seq -> string)) = String.concat
                                                            let v20702 : string = ",\n"
                                                            let v20703 : (string seq -> string) = v20701 v20702
                                                            let v20704 : string = v20703 v20693
                                                            let v20707 : string = $"{{"
                                                            let v20708 : string = $"  \"name\": \"spiral_{v19938}\","
                                                            let v20709 : string = v20707 + v20708 
                                                            let v20710 : string = $"  \"dependencies\": {{"
                                                            let v20711 : string = v20709 + v20710 
                                                            let v20712 : string = v20711 + v20704 
                                                            let v20713 : string = $"  }},"
                                                            let v20714 : string = v20712 + v20713 
                                                            let v20715 : string = $"    \"devDependencies\": {{"
                                                            let v20716 : string = v20714 + v20715 
                                                            let v20717 : string = $"  }},"
                                                            let v20718 : string = v20716 + v20717 
                                                            let v20719 : string = $"}}"
                                                            let v20720 : string = v20718 + v20719 
                                                            let v20721 : string = "package.json"
                                                            let v20722 : string = method33(v20014, v20721)
                                                            let v20723 : string = "../.."
                                                            let v20724 : string = method33(v20014, v20723)
                                                            let v20725 : string = method33(v20724, v20721)
                                                            method76(v20722, v20720)
                                                            let v20726 : string = ""
                                                            method76(v20725, v20726)
                                                            let v20727 : string = $"{v20010}.{v19936}"
                                                            let v20728 : string = method33(v20014, v20727)
                                                            let v21038 : unit = ()
                                                            let v21039 : (unit -> unit) = closure117(v20728)
                                                            let v21040 : unit = (fun () -> v21039 (); v21038) ()
                                                            (* run_target_args'
                                                            let v21357 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v21362 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v21363 : string = "std::fs::read(&*$0)"
                                                            let v21364 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v20728 v21363 
                                                            (* run_target_args'
                                                            let v21366 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v21367 : string = "$0.unwrap()"
                                                            let v21368 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21364 v21367 
                                                            let _run_target_args'_v21366 = v21368 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v21369 : string = "$0.unwrap()"
                                                            let v21370 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21364 v21369 
                                                            let _run_target_args'_v21366 = v21370 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v21371 : string = "$0.unwrap()"
                                                            let v21372 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21364 v21371 
                                                            let _run_target_args'_v21366 = v21372 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v21373 : Vec<uint8> = match v21364 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21366 = v21373 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v21374 : Vec<uint8> = match v21364 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21366 = v21374 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v21375 : Vec<uint8> = match v21364 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21366 = v21375 
                                                            #endif
#else
                                                            let v21376 : Vec<uint8> = match v21364 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21366 = v21376 
                                                            #endif
                                                            let v21377 : Vec<uint8> = _run_target_args'_v21366 
                                                            let _run_target_args'_v21362 = v21377 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v21381 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v21362 = v21381 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v21385 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v21362 = v21385 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v21389 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v21362 = v21389 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v21393 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v21362 = v21393 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v21397 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v21362 = v21397 
                                                            #endif
#else
                                                            let v21400 : (uint8 []) = v20728 |> System.IO.File.ReadAllBytes
                                                            let v21401 : string = "$0.to_vec()"
                                                            let v21402 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v21400 v21401 
                                                            let _run_target_args'_v21362 = v21402 
                                                            #endif
                                                            let v21403 : Vec<uint8> = _run_target_args'_v21362 
                                                            let v21412 : Vec<uint8> = method24(v21403)
                                                            let v21413 : string = "std::string::String::from_utf8($0)"
                                                            let v21414 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v21412 v21413 
                                                            (* run_target_args'
                                                            let v21416 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v21417 : string = "$0.unwrap()"
                                                            let v21418 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21414 v21417 
                                                            let _run_target_args'_v21416 = v21418 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v21419 : string = "$0.unwrap()"
                                                            let v21420 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21414 v21419 
                                                            let _run_target_args'_v21416 = v21420 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v21421 : string = "$0.unwrap()"
                                                            let v21422 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21414 v21421 
                                                            let _run_target_args'_v21416 = v21422 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v21423 : std_string_String = match v21414 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21416 = v21423 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v21424 : std_string_String = match v21414 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21416 = v21424 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v21425 : std_string_String = match v21414 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21416 = v21425 
                                                            #endif
#else
                                                            let v21426 : std_string_String = match v21414 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v21416 = v21426 
                                                            #endif
                                                            let v21427 : std_string_String = _run_target_args'_v21416 
                                                            let v21430 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v21431 : string = Fable.Core.RustInterop.emitRustExpr v21427 v21430 
                                                            let _run_target_args'_v21357 = v21431 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v21433 : string = null |> unbox<string>
                                                            let _run_target_args'_v21357 = v21433 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v21437 : string = null |> unbox<string>
                                                            let _run_target_args'_v21357 = v21437 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v21441 : string = null |> unbox<string>
                                                            let _run_target_args'_v21357 = v21441 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v21445 : string = null |> unbox<string>
                                                            let _run_target_args'_v21357 = v21445 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v21449 : string = null |> unbox<string>
                                                            let _run_target_args'_v21357 = v21449 
                                                            #endif
#else
                                                            let v21452 : string = v20728 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v21357 = v21452 
                                                            #endif
                                                            let v21453 : string = _run_target_args'_v21357 
                                                            let v21464 : string = "# spiral.process_python"
                                                            let v21465 : bool = v21453.Contains v21464 
                                                            let v21477 : string =
                                                                if v21465 then
                                                                    v21453
                                                                else
                                                                    let v21468 : string = "\";\".into()"
                                                                    let v21469 : string = Fable.Core.RustInterop.emitRustExpr () v21468 
                                                                    let v21470 : string = "),)"
                                                                    let v21471 : string = v21470 + v21469 
                                                                    let v21472 : string = "));"
                                                                    let v21473 : string = v21453.Replace (v21471, v21472)
                                                                    let v21474 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v21475 : string = " defaultOf::<()>();"
                                                                    method63(v21474, v21475, v21473)
                                                            let v21478 : bool = v21465 = false
                                                            if v21478 then
                                                                let v21479 : string = $"{v21477}\n\n{v21464}\n"
                                                                method76(v20728, v21479)
                                                            let v21480 : string = $"python \"{v20728}\""
                                                            let v21481 : string = "TRACE_LEVEL"
                                                            let v21482 : string = "Verbose"
                                                            let v21483 : (struct (string * string) []) = [|struct (v21481, v21482)|]
                                                            let v21485 : System.Threading.CancellationToken option = None
                                                            let v21488 : (struct (string * string) []) = [||]
                                                            let v21490 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v21494 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v21498 : string option = None
                                                            let v21512 : Result<string, string> =
                                                                match v19989 with
                                                                | US14_1(v21506) -> (* Error *)
                                                                    let v21508 : Result<string, string> = Error v21506 
                                                                    v21508
                                                                | US14_0(v21501) -> (* Ok *)
                                                                    let v21503 : Result<string, string> = Ok v21501 
                                                                    v21503
                                                            (* run_target_args'
                                                            let v21514 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v21515 : string = "$0.ok()"
                                                            let v21516 : string option = Fable.Core.RustInterop.emitRustExpr v21512 v21515 
                                                            let _run_target_args'_v21514 = v21516 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v21517 : string = "$0.ok()"
                                                            let v21518 : string option = Fable.Core.RustInterop.emitRustExpr v21512 v21517 
                                                            let _run_target_args'_v21514 = v21518 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v21519 : string = "$0.ok()"
                                                            let v21520 : string option = Fable.Core.RustInterop.emitRustExpr v21512 v21519 
                                                            let _run_target_args'_v21514 = v21520 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v21521 : string option = match v21512 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v21514 = v21521 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v21522 : string option = match v21512 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v21514 = v21522 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v21523 : string option = match v21512 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v21514 = v21523 
                                                            #endif
#else
                                                            let v21524 : string option = match v21512 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v21514 = v21524 
                                                            #endif
                                                            let v21525 : string option = _run_target_args'_v21514 
                                                            let v21528 : bool = true
                                                            let v21529 : bool = true
                                                            let struct (v21530 : int32, v21531 : string) = method90(v21480, v21485, v21483, v21490, v21494, v21528, v21525, v21529)
                                                            let v21532 : int32 = v21483.Length
                                                            let v21533 : (string []) = Array.zeroCreate<string> (v21532)
                                                            let v21534 : Mut5 = {l0 = 0} : Mut5
                                                            while method29(v21532, v21534) do
                                                                let v21536 : int32 = v21534.l0
                                                                let struct (v21537 : string, v21538 : string) = v21483.[int v21536]
                                                                let v21539 : string = $"$env:{v21537}=''{v21538}''"
                                                                v21533.[int v21536] <- v21539
                                                                let v21540 : int32 = v21536 + 1
                                                                v21534.l0 <- v21540
                                                                ()
                                                            let v21542 : string seq = v21533 |> Seq.ofArray
                                                            let v21547 : (string -> (string seq -> string)) = String.concat
                                                            let v21548 : string = ";"
                                                            let v21549 : (string seq -> string) = v21547 v21548
                                                            let v21550 : string = v21549 v21542
                                                            let v21553 : string = $"pwsh -c '{v21550}; {v21480}'"
                                                            let v21554 : bool = v21530 = 0
                                                            let struct (v22210 : US5, v22211 : US5, v22212 : US5, v22213 : US5) =
                                                                if v21554 then
                                                                    let v21555 : (string -> US5) = closure62()
                                                                    let v21556 : (unit -> string) = closure118(v21531)
                                                                    let v21557 : (exn -> US5) = closure119(v20728, v21531, v21553)
                                                                    let v21560 : US5 = US5_1
                                                                    let result = ref v21560
                                                                    try
                                                                        result.Value <- v21556 () |> v21555 
                                                                    with ex ->
                                                                        result.Value <- v21557 ex 
                                                                    let v21561 : US5 = result.Value
                                                                    let v21575 : string option =
                                                                        match v21561 with
                                                                        | US5_1 -> (* None *)
                                                                            let v21571 : string option = None
                                                                            v21571
                                                                        | US5_0(v21565) -> (* Some *)
                                                                            let v21567 : string option = Some v21565 
                                                                            v21567
                                                                    let v21576 : string = "$0.unwrap()"
                                                                    let v21577 : string = Fable.Core.RustInterop.emitRustExpr v21575 v21576 
                                                                    let v21578 : US5 = US5_0(v19936)
                                                                    let v21579 : US5 = US5_0(v21477)
                                                                    let v21580 : US5 = US5_0(v20728)
                                                                    let v21581 : US5 = US5_0(v21577)
                                                                    struct (v21578, v21579, v21580, v21581)
                                                                else
                                                                    let v21891 : unit = ()
                                                                    let v21892 : (unit -> unit) = closure121(v20728, v21531, v21530, v21553)
                                                                    let v21893 : unit = (fun () -> v21892 (); v21891) ()
                                                                    let v22206 : US5 = US5_0(v19936)
                                                                    let v22207 : US5 = US5_1
                                                                    let v22208 : US5 = US5_1
                                                                    let v22209 : US5 = US5_1
                                                                    struct (v22206, v22207, v22208, v22209)
                                                            struct (v22210, v22211, v22212, v22213)
                                                    struct (v22214, v22215, v22216, v22217)
                                                else
                                                    let v22529 : unit = ()
                                                    let v22530 : (unit -> unit) = closure122(v41, v40)
                                                    let v22531 : unit = (fun () -> v22530 (); v22529) ()
                                                    let v22846 : US5 = US5_1
                                                    let v22847 : US5 = US5_1
                                                    let v22848 : US5 = US5_1
                                                    let v22849 : US5 = US5_1
                                                    struct (v22846, v22847, v22848, v22849)
                                            struct (v22850, v22851, v22852, v22853)
                                    struct (v22854, v22855, v22856, v22857)
                            let v22865 : string =
                                match v22858 with
                                | US5_1 -> (* None *)
                                    let v22863 : string = ""
                                    v22863
                                | US5_0(v22862) -> (* Some *)
                                    v22862
                            let v22866 : string = "extension"
                            let v22870 : string =
                                match v22859 with
                                | US5_1 -> (* None *)
                                    let v22868 : string = ""
                                    v22868
                                | US5_0(v22867) -> (* Some *)
                                    v22867
                            let v22871 : string = "code"
                            let v22875 : string =
                                match v22860 with
                                | US5_1 -> (* None *)
                                    let v22873 : string = ""
                                    v22873
                                | US5_0(v22872) -> (* Some *)
                                    v22872
                            let v22876 : string = "code_path"
                            let v22880 : string =
                                match v22861 with
                                | US5_1 -> (* None *)
                                    let v22878 : string = ""
                                    v22878
                                | US5_0(v22877) -> (* Some *)
                                    v22877
                            let v22881 : string = "output"
                            [|struct (v22866, v22865); struct (v22871, v22870); struct (v22876, v22875); struct (v22881, v22880)|]
        | _ ->
            let v22887 : string = "extension"
            let v22888 : string = ""
            let v22889 : string = "code"
            let v22890 : string = "code_path"
            let v22891 : string = "output"
            [|struct (v22887, v22888); struct (v22889, v22888); struct (v22890, v22888); struct (v22891, v22888)|]
    let v22894 : string = "$0.to_vec()"
    let v22895 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v22893 v22894 
    let v22896 : unit = ()
    let v22897 : string = $"true; let _func1_from_v22896 = Func1::from(move |value| {{ //"
    let v22898 : bool = Fable.Core.RustInterop.emitRustExpr () v22897 
    let v22899 : string = $"value"
    let struct (v22900 : string, v22901 : string) = Fable.Core.RustInterop.emitRustExpr () v22899 
    (* run_target_args'
    let v22906 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22907 : string = "&*$0"
    let v22908 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22900 v22907 
    let _run_target_args'_v22906 = v22908 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22909 : string = "&*$0"
    let v22910 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22900 v22909 
    let _run_target_args'_v22906 = v22910 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22911 : string = "&*$0"
    let v22912 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22900 v22911 
    let _run_target_args'_v22906 = v22912 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22914 : Ref<Str> = v22900 |> unbox<Ref<Str>>
    let _run_target_args'_v22906 = v22914 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22918 : Ref<Str> = v22900 |> unbox<Ref<Str>>
    let _run_target_args'_v22906 = v22918 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22922 : Ref<Str> = v22900 |> unbox<Ref<Str>>
    let _run_target_args'_v22906 = v22922 
    #endif
#else
    let v22926 : Ref<Str> = v22900 |> unbox<Ref<Str>>
    let _run_target_args'_v22906 = v22926 
    #endif
    let v22929 : Ref<Str> = _run_target_args'_v22906 
    (* run_target_args'
    let v22942 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22943 : string = "String::from($0)"
    let v22944 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22929 v22943 
    let _run_target_args'_v22942 = v22944 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22945 : string = "String::from($0)"
    let v22946 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22929 v22945 
    let _run_target_args'_v22942 = v22946 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22947 : string = "String::from($0)"
    let v22948 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22929 v22947 
    let _run_target_args'_v22942 = v22948 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22950 : std_string_String = v22929 |> unbox<std_string_String>
    let _run_target_args'_v22942 = v22950 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22954 : std_string_String = v22929 |> unbox<std_string_String>
    let _run_target_args'_v22942 = v22954 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22958 : std_string_String = v22929 |> unbox<std_string_String>
    let _run_target_args'_v22942 = v22958 
    #endif
#else
    let v22962 : std_string_String = v22929 |> unbox<std_string_String>
    let _run_target_args'_v22942 = v22962 
    #endif
    let v22965 : std_string_String = _run_target_args'_v22942 
    (* run_target_args'
    let v22978 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22979 : string = "&*$0"
    let v22980 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22901 v22979 
    let _run_target_args'_v22978 = v22980 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22981 : string = "&*$0"
    let v22982 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22901 v22981 
    let _run_target_args'_v22978 = v22982 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22983 : string = "&*$0"
    let v22984 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v22901 v22983 
    let _run_target_args'_v22978 = v22984 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22986 : Ref<Str> = v22901 |> unbox<Ref<Str>>
    let _run_target_args'_v22978 = v22986 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22990 : Ref<Str> = v22901 |> unbox<Ref<Str>>
    let _run_target_args'_v22978 = v22990 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22994 : Ref<Str> = v22901 |> unbox<Ref<Str>>
    let _run_target_args'_v22978 = v22994 
    #endif
#else
    let v22998 : Ref<Str> = v22901 |> unbox<Ref<Str>>
    let _run_target_args'_v22978 = v22998 
    #endif
    let v23001 : Ref<Str> = _run_target_args'_v22978 
    (* run_target_args'
    let v23014 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23015 : string = "String::from($0)"
    let v23016 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23001 v23015 
    let _run_target_args'_v23014 = v23016 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23017 : string = "String::from($0)"
    let v23018 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23001 v23017 
    let _run_target_args'_v23014 = v23018 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23019 : string = "String::from($0)"
    let v23020 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23001 v23019 
    let _run_target_args'_v23014 = v23020 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23022 : std_string_String = v23001 |> unbox<std_string_String>
    let _run_target_args'_v23014 = v23022 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23026 : std_string_String = v23001 |> unbox<std_string_String>
    let _run_target_args'_v23014 = v23026 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23030 : std_string_String = v23001 |> unbox<std_string_String>
    let _run_target_args'_v23014 = v23030 
    #endif
#else
    let v23034 : std_string_String = v23001 |> unbox<std_string_String>
    let _run_target_args'_v23014 = v23034 
    #endif
    let v23037 : std_string_String = _run_target_args'_v23014 
    let v23047 : (std_string_String * std_string_String) = v22965, v23037 
    let func1_from_result = v23047 //
    let v23050 : _ = func1_from_result
    let v23051 : string = $"true; $0 /*"
    let v23052 : bool = Fable.Core.RustInterop.emitRustExpr v23050 v23051 
    let v23053 : string = $"*/ }}); //"
    let v23054 : bool = Fable.Core.RustInterop.emitRustExpr () v23053 
    let v23055 : string = $"_func1_from_v22896"
    let v23056 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v23055 
    let v23057 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v23058 : (struct (string * string) -> (std_string_String * std_string_String)) = closure67(v23056)
    let v23059 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v22895, v23058) v23057 
    let v23060 : string = "std::collections::BTreeMap::from_iter(v23059.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v23061 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v23060 
    let v23062 : string = "serde_json::to_string(&v23061)"
    let v23063 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v23062 
    let v23064 : (serde_json_Error -> string) = method266()
    (* run_target_args'
    let v23066 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23067 : string = "$0.map_err(|x| $1(x))"
    let v23068 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v23063, v23064) v23067 
    let _run_target_args'_v23066 = v23068 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23069 : string = "$0.map_err(|x| $1(x))"
    let v23070 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v23063, v23064) v23069 
    let _run_target_args'_v23066 = v23070 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23071 : string = "$0.map_err(|x| $1(x))"
    let v23072 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v23063, v23064) v23071 
    let _run_target_args'_v23066 = v23072 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23073 : Result<std_string_String, string> = match v23063 with Ok x -> Ok x | Error x -> Error (v23064 x)
    let _run_target_args'_v23066 = v23073 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23074 : Result<std_string_String, string> = match v23063 with Ok x -> Ok x | Error x -> Error (v23064 x)
    let _run_target_args'_v23066 = v23074 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23075 : Result<std_string_String, string> = match v23063 with Ok x -> Ok x | Error x -> Error (v23064 x)
    let _run_target_args'_v23066 = v23075 
    #endif
#else
    let v23076 : Result<std_string_String, string> = match v23063 with Ok x -> Ok x | Error x -> Error (v23064 x)
    let _run_target_args'_v23066 = v23076 
    #endif
    let v23077 : Result<std_string_String, string> = _run_target_args'_v23066 
    let v23080 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v23081 : bool = Fable.Core.RustInterop.emitRustExpr v23077 v23080 
    let v23082 : string = "x"
    let v23083 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v23082 
    let v23084 : string = "fable_library_rust::String_::fromString($0)"
    let v23085 : string = Fable.Core.RustInterop.emitRustExpr v23083 v23084 
    let v23086 : string = "true; $0 })"
    let v23087 : bool = Fable.Core.RustInterop.emitRustExpr v23085 v23086 
    let v23088 : string = "_result_map_"
    let v23089 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v23088 
    let v23090 : string = ""
    let v23091 : string = "}"
    let v23092 : string = v23090 + v23091 
    let x = v23089 //
    let v23093 : _ = x
    let v23094 : unit = ()
    (* run_target_args'
    let v23095 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23096 : string = $"true; let _fix_closure_v23094 = $0"
    let v23097 : bool = Fable.Core.RustInterop.emitRustExpr v23093 v23096 
    let _run_target_args'_v23095 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23098 : string = $"true; let _fix_closure_v23094 = $0"
    let v23099 : bool = Fable.Core.RustInterop.emitRustExpr v23093 v23098 
    let _run_target_args'_v23095 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23100 : string = $"true; let _fix_closure_v23094 = $0"
    let v23101 : bool = Fable.Core.RustInterop.emitRustExpr v23093 v23100 
    let _run_target_args'_v23095 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v23095 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v23095 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v23095 = false 
    #endif
#else
    let _run_target_args'_v23095 = false 
    #endif
    let v23102 : bool = _run_target_args'_v23095 
    let v23103 : string = $"true; _fix_closure_v23094 " + v23092 + "); " + v23090 + " // rust.fix_closure'"
    let v23104 : bool = Fable.Core.RustInterop.emitRustExpr () v23103 
    let v23105 : string = "__future_init"
    let v23106 : _ = Fable.Core.RustInterop.emitRustExpr () v23105 
    let v23107 : string = "v23106"
    let v23108 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v23107 
    v23108
and closure1 () (v0 : (string [])) : int32 =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure5(v0)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v680 : clap_Command = method0()
    let v681 : string = "clap::Command::get_matches($0)"
    let v682 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v680 v681 
    let v683 : US0 = v44.l0
    let v684 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method17(v683, v682)
    let v685 : string = "futures::executor::block_on($0)"
    let v686 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v684 v685 
    (* run_target_args'
    let v688 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v689 : string = "$0.unwrap()"
    let v690 : string = Fable.Core.RustInterop.emitRustExpr v686 v689 
    let _run_target_args'_v688 = v690 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v691 : string = "$0.unwrap()"
    let v692 : string = Fable.Core.RustInterop.emitRustExpr v686 v691 
    let _run_target_args'_v688 = v692 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v693 : string = "$0.unwrap()"
    let v694 : string = Fable.Core.RustInterop.emitRustExpr v686 v693 
    let _run_target_args'_v688 = v694 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v695 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v695 
    #endif
#if FABLE_COMPILER_PYTHON
    let v696 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v696 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v697 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v697 
    #endif
#else
    let v698 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v698 
    #endif
    let v699 : string = _run_target_args'_v688 
    let v702 : US0 = v44.l0
    let v703 : bool =
        match v702 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v703 then
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v699)
        let v707 : unit = (fun () -> v706 (); v705) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
