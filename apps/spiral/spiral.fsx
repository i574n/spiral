#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
type IOsEnviron = abstract environ: x: unit -> obj
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
    | US4_6 of f6_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : Mut0 * f0_1 : Mut1 * f0_2 : Mut2 * f0_3 : Mut3 * f0_4 : Mut4 * f0_5 : int64 option
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : std_string_String
    | US8_1
and [<Struct>] US11 =
    | US11_0
    | US11_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : US11
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US12 =
    | US12_0 of f0_0 : Vec<std_string_String>
    | US12_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US13 =
    | US13_0
    | US13_1
and [<Struct>] US14 =
    | US14_0 of f0_0 : string
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1 of f1_0 : string
and [<Struct>] US16 =
    | US16_0 of f0_0 : std_path_PathBuf
    | US16_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US17 =
    | US17_0
    | US17_1 of f1_0 : std_string_String
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : US5
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH1
and [<Struct>] US20 =
    | US20_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : char
    | US21_1
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US21 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US25_1 of f1_0 : string
and [<Struct>] US26 =
    | US26_0 of f0_0 : (string [])
    | US26_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US27 =
    | US27_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US27_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) * UH3
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US28_1 of f1_0 : std_string_String
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US29_1
and [<Struct>] US30 =
    | US30_0 of f0_0 : std_string_String
    | US30_1 of f1_0 : std_string_String
and [<Struct>] US31 =
    | US31_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : std_process_Output
    | US33_1 of f1_0 : std_string_String
and [<Struct>] US34 =
    | US34_0 of f0_0 : int32
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : System.Threading.CancellationToken
    | US36_1
and [<Struct>] US39 =
    | US39_0
    | US39_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US39
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US41 =
    | US41_0 of f0_0 : string
    | US41_1 of f1_0 : string
and [<Struct>] US40 =
    | US40_0 of f0_0 : US41
    | US40_1
and [<Struct>] US42 =
    | US42_0
    | US42_1
    | US42_2
and [<Struct>] US43 =
    | US43_0 of f0_0 : US42
    | US43_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US44 =
    | US44_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US44_1
and [<Struct>] US45 =
    | US45_0 of f0_0 : int32 * f0_1 : string
    | US45_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US46 =
    | US46_0 of f0_0 : std_collections_HashMap<string, string>
    | US46_1
and [<Struct>] US47 =
    | US47_0 of f0_0 : US5
    | US47_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US48 =
    | US48_0
    | US48_1 of f1_0 : string
and [<Struct>] US49 =
    | US49_0 of f0_0 : std_fs_FileType
    | US49_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0
    | US50_1
    | US50_2
and [<Struct>] US51 =
    | US51_0 of f0_0 : async_walkdir_DirEntry
    | US51_1 of f1_0 : std_string_String
and [<Struct>] US52 =
    | US52_0 of f0_0 : string * f0_1 : string
    | US52_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v87 : (string list -> (string [])) = List.toArray
    let v88 : (string []) = v87 v80
    let v91 : string = "$0.to_vec()"
    let v92 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v88 v91 
    let v93 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v94 : bool = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "x"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    (* run_target_args'
    let v137 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v138 : string = "String::from($0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v138 
    let _run_target_args'_v137 = v139 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v140 : string = "String::from($0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v140 
    let _run_target_args'_v137 = v141 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v142 : string = "String::from($0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v124 v142 
    let _run_target_args'_v137 = v143 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v145 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v145 
    #endif
#if FABLE_COMPILER_PYTHON
    let v149 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v149 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v153 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v153 
    #endif
#else
    let v157 : std_string_String = v124 |> unbox<std_string_String>
    let _run_target_args'_v137 = v157 
    #endif
    let v160 : std_string_String = _run_target_args'_v137 
    let v169 : string = "Box::new($0)"
    let v170 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v160 v169 
    let v171 : string = "Box::leak($0)"
    let v172 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v170 v171 
    let v173 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v174 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let v175 : string = "true; $0 }).collect::<Vec<_>>()"
    let v176 : bool = Fable.Core.RustInterop.emitRustExpr v174 v175 
    let v177 : string = "_vec_map"
    let v178 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v177 
    let v179 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v180 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : string = "$0.value_parser($1)"
    let v182 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v180) v181 
    let v183 : string = "clap::Command::arg($0, $1)"
    let v184 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v182) v183 
    let v185 : string = "NAME"
    let v186 : string = "r#\"" + v185 + "\"#"
    let v187 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "VERSION"
    let v189 : string = "r#\"" + v188 + "\"#"
    let v190 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v189 
    let v191 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v187; v190|]
    let v193 : unativeint = 1 |> unativeint 
    let v197 : unativeint = 0 |> unativeint 
    let v201 : unativeint = 0 |> unativeint 
    let v205 : bool = v197 = v201 
    let v213 : clap_builder_ValueRange =
        if v205 then
            let v208 : string = "clap::builder::ValueRange::new($0..)"
            let v209 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v193 v208 
            v209
        else
            let v210 : string = ""
            let v211 : string = "clap::builder::ValueRange::new($0.." + v210 + "$1)"
            let v212 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v193, v197) v211 
            v212
    let v214 : string = "deps"
    let v215 : string = "r#\"" + v214 + "\"#"
    let v216 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v215 
    let v217 : string = "clap::Arg::new($0)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v216 v217 
    let v219 : string = "$0.short($1)"
    let v220 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v218, 'd') v219 
    let v221 : string = "r#\"" + v214 + "\"#"
    let v222 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v221 
    let v223 : string = "$0.long($1)"
    let v224 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v220, v222) v223 
    let v225 : string = "$0.to_vec()"
    let v226 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v191 v225 
    let v227 : string = "$0.value_names($1)"
    let v228 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v224, v226) v227 
    let v229 : string = "$0.num_args($1)"
    let v230 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v228, v213) v229 
    let v231 : string = "clap::ArgAction::Append"
    let v232 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v231 
    let v233 : string = "$0.action($1)"
    let v234 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v230, v232) v233 
    let v235 : string = "clap::Command::arg($0, $1)"
    let v236 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v184, v234) v235 
    let v237 : string = "clap::Command::subcommand($0, v236)"
    let v238 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v237 
    let v239 : string = "cuda"
    let v240 : string = "r#\"" + v239 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : string = "clap::Command::new($0)"
    let v243 : clap_Command = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : string = "py-path"
    let v245 : string = "r#\"" + v244 + "\"#"
    let v246 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v245 
    let v247 : string = "clap::Arg::new($0)"
    let v248 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v246 v247 
    let v249 : string = "$0.short($1)"
    let v250 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v248, 'p') v249 
    let v251 : string = "r#\"" + v244 + "\"#"
    let v252 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "$0.long($1)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v250, v252) v253 
    let v255 : string = "$0.required($1)"
    let v256 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, true) v255 
    let v257 : string = "clap::Command::arg($0, $1)"
    let v258 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v243, v256) v257 
    let v259 : string = "env"
    let v260 : string = "r#\"" + v259 + "\"#"
    let v261 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v260 
    let v262 : string = "clap::Arg::new($0)"
    let v263 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v261 v262 
    let v264 : string = "$0.short($1)"
    let v265 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v263, 'e') v264 
    let v266 : string = "r#\"" + v259 + "\"#"
    let v267 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v266 
    let v268 : string = "$0.long($1)"
    let v269 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v265, v267) v268 
    
    
    let v272 : string = "Poetry"
    let v273 : (unit -> string) = v272.ToLower
    let v274 : string = v273 ()
    let v279 : string = "Pip"
    let v280 : (unit -> string) = v279.ToLower
    let v281 : string = v280 ()
    let v284 : string list = []
    let v286 : string list = v274 :: v284 
    let v290 : string list = v281 :: v286 
    let v297 : (string list -> (string [])) = List.toArray
    let v298 : (string []) = v297 v290
    let v301 : string = "$0.to_vec()"
    let v302 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v298 v301 
    let v303 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
    let v305 : string = "x"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr () v305 
    (* run_target_args'
    let v311 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v312 : string = "&*$0"
    let v313 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v312 
    let _run_target_args'_v311 = v313 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v314 : string = "&*$0"
    let v315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v314 
    let _run_target_args'_v311 = v315 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v316 : string = "&*$0"
    let v317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v306 v316 
    let _run_target_args'_v311 = v317 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v319 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v319 
    #endif
#if FABLE_COMPILER_PYTHON
    let v323 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v323 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v327 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v327 
    #endif
#else
    let v331 : Ref<Str> = v306 |> unbox<Ref<Str>>
    let _run_target_args'_v311 = v331 
    #endif
    let v334 : Ref<Str> = _run_target_args'_v311 
    (* run_target_args'
    let v347 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v348 : string = "String::from($0)"
    let v349 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v348 
    let _run_target_args'_v347 = v349 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v350 : string = "String::from($0)"
    let v351 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v350 
    let _run_target_args'_v347 = v351 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v352 : string = "String::from($0)"
    let v353 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v352 
    let _run_target_args'_v347 = v353 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v355 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v355 
    #endif
#if FABLE_COMPILER_PYTHON
    let v359 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v359 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v363 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v363 
    #endif
#else
    let v367 : std_string_String = v334 |> unbox<std_string_String>
    let _run_target_args'_v347 = v367 
    #endif
    let v370 : std_string_String = _run_target_args'_v347 
    let v379 : string = "Box::new($0)"
    let v380 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v370 v379 
    let v381 : string = "Box::leak($0)"
    let v382 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v384 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v382 v383 
    let v385 : string = "true; $0 }).collect::<Vec<_>>()"
    let v386 : bool = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let v387 : string = "_vec_map"
    let v388 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v387 
    let v389 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v390 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let v391 : string = "$0.value_parser($1)"
    let v392 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v269, v390) v391 
    let v393 : string = "clap::Command::arg($0, $1)"
    let v394 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v258, v392) v393 
    let v395 : string = "r#\"" + v185 + "\"#"
    let v396 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v395 
    let v397 : string = "r#\"" + v188 + "\"#"
    let v398 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v397 
    let v399 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v396; v398|]
    let v401 : unativeint = 1 |> unativeint 
    let v405 : unativeint = 0 |> unativeint 
    let v409 : unativeint = 0 |> unativeint 
    let v413 : bool = v405 = v409 
    let v421 : clap_builder_ValueRange =
        if v413 then
            let v416 : string = "clap::builder::ValueRange::new($0..)"
            let v417 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v401 v416 
            v417
        else
            let v418 : string = ""
            let v419 : string = "clap::builder::ValueRange::new($0.." + v418 + "$1)"
            let v420 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v401, v405) v419 
            v420
    let v422 : string = "r#\"" + v214 + "\"#"
    let v423 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "clap::Arg::new($0)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v423 v424 
    let v426 : string = "$0.short($1)"
    let v427 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v425, 'd') v426 
    let v428 : string = "r#\"" + v214 + "\"#"
    let v429 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v428 
    let v430 : string = "$0.long($1)"
    let v431 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v427, v429) v430 
    let v432 : string = "$0.to_vec()"
    let v433 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v399 v432 
    let v434 : string = "$0.value_names($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v431, v433) v434 
    let v436 : string = "$0.num_args($1)"
    let v437 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v435, v421) v436 
    let v438 : string = "clap::ArgAction::Append"
    let v439 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v438 
    let v440 : string = "$0.action($1)"
    let v441 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v437, v439) v440 
    let v442 : string = "clap::Command::arg($0, $1)"
    let v443 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v394, v441) v442 
    let v444 : string = "clap::Command::subcommand($0, v443)"
    let v445 : clap_Command = Fable.Core.RustInterop.emitRustExpr v238 v444 
    let v446 : string = "fable"
    let v447 : string = "r#\"" + v446 + "\"#"
    let v448 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v447 
    let v449 : string = "clap::Command::new($0)"
    let v450 : clap_Command = Fable.Core.RustInterop.emitRustExpr v448 v449 
    let v451 : string = "fs-path"
    let v452 : string = "r#\"" + v451 + "\"#"
    let v453 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v452 
    let v454 : string = "clap::Arg::new($0)"
    let v455 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v453 v454 
    let v456 : string = "$0.short($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v455, 'f') v456 
    let v458 : string = "r#\"" + v451 + "\"#"
    let v459 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v458 
    let v460 : string = "$0.long($1)"
    let v461 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v457, v459) v460 
    let v462 : string = "$0.required($1)"
    let v463 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v461, true) v462 
    let v464 : string = "clap::Command::arg($0, $1)"
    let v465 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v450, v463) v464 
    let v466 : string = "r#\"" + v0 + "\"#"
    let v467 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v466 
    let v468 : string = "clap::Arg::new($0)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v467 v468 
    let v470 : string = "$0.short($1)"
    let v471 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, 'c') v470 
    let v472 : string = "r#\"" + v0 + "\"#"
    let v473 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v472 
    let v474 : string = "$0.long($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v471, v473) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v465, v475) v476 
    let v478 : string = "clap::Command::subcommand($0, v477)"
    let v479 : clap_Command = Fable.Core.RustInterop.emitRustExpr v445 v478 
    let v480 : string = "rust"
    let v481 : string = "r#\"" + v480 + "\"#"
    let v482 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "clap::Command::new($0)"
    let v484 : clap_Command = Fable.Core.RustInterop.emitRustExpr v482 v483 
    let v485 : string = "r#\"" + v451 + "\"#"
    let v486 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : string = "clap::Arg::new($0)"
    let v488 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v486 v487 
    let v489 : string = "$0.short($1)"
    let v490 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v488, 'f') v489 
    let v491 : string = "r#\"" + v451 + "\"#"
    let v492 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v491 
    let v493 : string = "$0.long($1)"
    let v494 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v490, v492) v493 
    let v495 : string = "$0.required($1)"
    let v496 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v494, true) v495 
    let v497 : string = "clap::Command::arg($0, $1)"
    let v498 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v484, v496) v497 
    let v499 : string = "r#\"" + v185 + "\"#"
    let v500 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v499 
    let v501 : string = "r#\"" + v188 + "\"#"
    let v502 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v501 
    let v503 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v500; v502|]
    let v505 : unativeint = 1 |> unativeint 
    let v509 : unativeint = 0 |> unativeint 
    let v513 : unativeint = 0 |> unativeint 
    let v517 : bool = v509 = v513 
    let v525 : clap_builder_ValueRange =
        if v517 then
            let v520 : string = "clap::builder::ValueRange::new($0..)"
            let v521 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v505 v520 
            v521
        else
            let v522 : string = ""
            let v523 : string = "clap::builder::ValueRange::new($0.." + v522 + "$1)"
            let v524 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v505, v509) v523 
            v524
    let v526 : string = "r#\"" + v214 + "\"#"
    let v527 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v526 
    let v528 : string = "clap::Arg::new($0)"
    let v529 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v527 v528 
    let v530 : string = "$0.short($1)"
    let v531 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v529, 'd') v530 
    let v532 : string = "r#\"" + v214 + "\"#"
    let v533 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v532 
    let v534 : string = "$0.long($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v531, v533) v534 
    let v536 : string = "$0.to_vec()"
    let v537 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v503 v536 
    let v538 : string = "$0.value_names($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "$0.num_args($1)"
    let v541 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v539, v525) v540 
    let v542 : string = "clap::ArgAction::Append"
    let v543 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v542 
    let v544 : string = "$0.action($1)"
    let v545 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v541, v543) v544 
    let v546 : string = "clap::Command::arg($0, $1)"
    let v547 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v498, v545) v546 
    let v549 : unativeint = 0 |> unativeint 
    let v553 : unativeint = 1 |> unativeint 
    let v557 : unativeint = 0 |> unativeint 
    let v561 : bool = v553 = v557 
    let v569 : clap_builder_ValueRange =
        if v561 then
            let v564 : string = "clap::builder::ValueRange::new($0..)"
            let v565 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v549 v564 
            v565
        else
            let v566 : string = "="
            let v567 : string = "clap::builder::ValueRange::new($0.." + v566 + "$1)"
            let v568 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v549, v553) v567 
            v568
    let v570 : string = "wasm"
    let v571 : string = "r#\"" + v570 + "\"#"
    let v572 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v571 
    let v573 : string = "clap::Arg::new($0)"
    let v574 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v572 v573 
    let v575 : string = "$0.short($1)"
    let v576 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v574, 'w') v575 
    let v577 : string = "r#\"" + v570 + "\"#"
    let v578 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v577 
    let v579 : string = "$0.long($1)"
    let v580 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v576, v578) v579 
    let v581 : string = "$0.num_args($1)"
    let v582 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v580, v569) v581 
    let v583 : string = "$0.require_equals($1)"
    let v584 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v582, true) v583 
    let v585 : string = ""
    let v586 : string = "r#\"" + v585 + "\"#"
    let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
    let v588 : string = "$0.default_missing_value($1)"
    let v589 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v584, v587) v588 
    let v590 : string = "clap::Command::arg($0, $1)"
    let v591 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v547, v589) v590 
    let v593 : unativeint = 0 |> unativeint 
    let v597 : unativeint = 1 |> unativeint 
    let v601 : unativeint = 0 |> unativeint 
    let v605 : bool = v597 = v601 
    let v613 : clap_builder_ValueRange =
        if v605 then
            let v608 : string = "clap::builder::ValueRange::new($0..)"
            let v609 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v593 v608 
            v609
        else
            let v610 : string = "="
            let v611 : string = "clap::builder::ValueRange::new($0.." + v610 + "$1)"
            let v612 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v593, v597) v611 
            v612
    let v614 : string = "contract"
    let v615 : string = "r#\"" + v614 + "\"#"
    let v616 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v615 
    let v617 : string = "clap::Arg::new($0)"
    let v618 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v616 v617 
    let v619 : string = "$0.short($1)"
    let v620 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v618, 'c') v619 
    let v621 : string = "r#\"" + v614 + "\"#"
    let v622 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v621 
    let v623 : string = "$0.long($1)"
    let v624 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v620, v622) v623 
    let v625 : string = "$0.num_args($1)"
    let v626 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v624, v613) v625 
    let v627 : string = "$0.require_equals($1)"
    let v628 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v626, true) v627 
    let v629 : string = "r#\"" + v585 + "\"#"
    let v630 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.default_missing_value($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v628, v630) v631 
    let v633 : string = "clap::Command::arg($0, $1)"
    let v634 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v591, v632) v633 
    let v635 : string = "cleanup"
    let v636 : string = "r#\"" + v635 + "\"#"
    let v637 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v636 
    let v638 : string = "clap::Arg::new($0)"
    let v639 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v637 v638 
    let v640 : string = "$0.short($1)"
    let v641 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v639, 'l') v640 
    let v642 : string = "r#\"" + v635 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "$0.long($1)"
    let v645 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v641, v643) v644 
    let v646 : string = "true"
    let v647 : string = "r#\"" + v646 + "\"#"
    let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v647 
    let v649 : string = "$0.default_value($1)"
    let v650 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v645, v648) v649 
    let v651 : string = "clap::ArgAction::SetFalse"
    let v652 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v651 
    let v653 : string = "$0.action($1)"
    let v654 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v650, v652) v653 
    let v655 : string = "clap::Command::arg($0, $1)"
    let v656 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v634, v654) v655 
    let v657 : string = "clap::Command::subcommand($0, v656)"
    let v658 : clap_Command = Fable.Core.RustInterop.emitRustExpr v479 v657 
    let v659 : string = "typescript"
    let v660 : string = "r#\"" + v659 + "\"#"
    let v661 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v660 
    let v662 : string = "clap::Command::new($0)"
    let v663 : clap_Command = Fable.Core.RustInterop.emitRustExpr v661 v662 
    let v664 : string = "r#\"" + v451 + "\"#"
    let v665 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v664 
    let v666 : string = "clap::Arg::new($0)"
    let v667 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v665 v666 
    let v668 : string = "$0.short($1)"
    let v669 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v667, 'f') v668 
    let v670 : string = "r#\"" + v451 + "\"#"
    let v671 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v670 
    let v672 : string = "$0.long($1)"
    let v673 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v669, v671) v672 
    let v674 : string = "$0.required($1)"
    let v675 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v673, true) v674 
    let v676 : string = "clap::Command::arg($0, $1)"
    let v677 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v663, v675) v676 
    let v678 : string = "r#\"" + v185 + "\"#"
    let v679 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v678 
    let v680 : string = "r#\"" + v188 + "\"#"
    let v681 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v680 
    let v682 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v679; v681|]
    let v684 : unativeint = 1 |> unativeint 
    let v688 : unativeint = 0 |> unativeint 
    let v692 : unativeint = 0 |> unativeint 
    let v696 : bool = v688 = v692 
    let v703 : clap_builder_ValueRange =
        if v696 then
            let v699 : string = "clap::builder::ValueRange::new($0..)"
            let v700 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v684 v699 
            v700
        else
            let v701 : string = "clap::builder::ValueRange::new($0.." + v585 + "$1)"
            let v702 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v684, v688) v701 
            v702
    let v704 : string = "r#\"" + v214 + "\"#"
    let v705 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v704 
    let v706 : string = "clap::Arg::new($0)"
    let v707 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v705 v706 
    let v708 : string = "$0.short($1)"
    let v709 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v707, 'd') v708 
    let v710 : string = "r#\"" + v214 + "\"#"
    let v711 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v710 
    let v712 : string = "$0.long($1)"
    let v713 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v709, v711) v712 
    let v714 : string = "$0.to_vec()"
    let v715 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v682 v714 
    let v716 : string = "$0.value_names($1)"
    let v717 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v713, v715) v716 
    let v718 : string = "$0.num_args($1)"
    let v719 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v717, v703) v718 
    let v720 : string = "clap::ArgAction::Append"
    let v721 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v720 
    let v722 : string = "$0.action($1)"
    let v723 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v719, v721) v722 
    let v724 : string = "clap::Command::arg($0, $1)"
    let v725 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v677, v723) v724 
    let v726 : string = "clap::Command::subcommand($0, v725)"
    let v727 : clap_Command = Fable.Core.RustInterop.emitRustExpr v658 v726 
    let v728 : string = "python"
    let v729 : string = "r#\"" + v728 + "\"#"
    let v730 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "clap::Command::new($0)"
    let v732 : clap_Command = Fable.Core.RustInterop.emitRustExpr v730 v731 
    let v733 : string = "r#\"" + v451 + "\"#"
    let v734 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v733 
    let v735 : string = "clap::Arg::new($0)"
    let v736 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v734 v735 
    let v737 : string = "$0.short($1)"
    let v738 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v736, 'f') v737 
    let v739 : string = "r#\"" + v451 + "\"#"
    let v740 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v739 
    let v741 : string = "$0.long($1)"
    let v742 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v738, v740) v741 
    let v743 : string = "$0.required($1)"
    let v744 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v742, true) v743 
    let v745 : string = "clap::Command::arg($0, $1)"
    let v746 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v732, v744) v745 
    let v747 : string = "r#\"" + v185 + "\"#"
    let v748 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v747 
    let v749 : string = "r#\"" + v188 + "\"#"
    let v750 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v749 
    let v751 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v748; v750|]
    let v753 : unativeint = 1 |> unativeint 
    let v757 : unativeint = 0 |> unativeint 
    let v761 : unativeint = 0 |> unativeint 
    let v765 : bool = v757 = v761 
    let v772 : clap_builder_ValueRange =
        if v765 then
            let v768 : string = "clap::builder::ValueRange::new($0..)"
            let v769 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v753 v768 
            v769
        else
            let v770 : string = "clap::builder::ValueRange::new($0.." + v585 + "$1)"
            let v771 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v753, v757) v770 
            v771
    let v773 : string = "r#\"" + v214 + "\"#"
    let v774 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "clap::Arg::new($0)"
    let v776 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v774 v775 
    let v777 : string = "$0.short($1)"
    let v778 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v776, 'd') v777 
    let v779 : string = "r#\"" + v214 + "\"#"
    let v780 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v779 
    let v781 : string = "$0.long($1)"
    let v782 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v778, v780) v781 
    let v783 : string = "$0.to_vec()"
    let v784 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v751 v783 
    let v785 : string = "$0.value_names($1)"
    let v786 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v782, v784) v785 
    let v787 : string = "$0.num_args($1)"
    let v788 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v786, v772) v787 
    let v789 : string = "clap::ArgAction::Append"
    let v790 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v789 
    let v791 : string = "$0.action($1)"
    let v792 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v788, v790) v791 
    let v793 : string = "clap::Command::arg($0, $1)"
    let v794 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v746, v792) v793 
    let v795 : string = "clap::Command::subcommand($0, v794)"
    let v796 : clap_Command = Fable.Core.RustInterop.emitRustExpr v727 v795 
    let v797 : string = "dib"
    let v798 : string = "r#\"" + v797 + "\"#"
    let v799 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v798 
    let v800 : string = "clap::Command::new($0)"
    let v801 : clap_Command = Fable.Core.RustInterop.emitRustExpr v799 v800 
    let v802 : string = "path"
    let v803 : string = "r#\"" + v802 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "clap::Arg::new($0)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v804 v805 
    let v807 : string = "$0.short($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, 'p') v807 
    let v809 : string = "r#\"" + v802 + "\"#"
    let v810 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v809 
    let v811 : string = "$0.long($1)"
    let v812 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v810) v811 
    let v813 : string = "$0.required($1)"
    let v814 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v812, true) v813 
    let v815 : string = "clap::Command::arg($0, $1)"
    let v816 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v801, v814) v815 
    let v817 : string = "u8"
    let v818 : string = "clap::value_parser!(" + v817 + ").into()"
    let v819 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v818 
    let v820 : string = "retries"
    let v821 : string = "r#\"" + v820 + "\"#"
    let v822 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v821 
    let v823 : string = "clap::Arg::new($0)"
    let v824 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v822 v823 
    let v825 : string = "$0.short($1)"
    let v826 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v824, 'r') v825 
    let v827 : string = "r#\"" + v820 + "\"#"
    let v828 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v827 
    let v829 : string = "$0.long($1)"
    let v830 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v826, v828) v829 
    let v831 : string = "$0.value_parser($1)"
    let v832 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v830, v819) v831 
    let v833 : string = "clap::Command::arg($0, $1)"
    let v834 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v816, v832) v833 
    let v835 : string = "working-directory"
    let v836 : string = "r#\"" + v835 + "\"#"
    let v837 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v836 
    let v838 : string = "clap::Arg::new($0)"
    let v839 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v837 v838 
    let v840 : string = "$0.short($1)"
    let v841 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v839, 'w') v840 
    let v842 : string = "r#\"" + v835 + "\"#"
    let v843 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v842 
    let v844 : string = "$0.long($1)"
    let v845 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v841, v843) v844 
    let v846 : string = "clap::Command::arg($0, $1)"
    let v847 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v834, v845) v846 
    let v848 : string = "clap::Command::subcommand($0, v847)"
    let v849 : clap_Command = Fable.Core.RustInterop.emitRustExpr v796 v848 
    v849
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method4(v0)
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result_map_"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method5()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    let _run_target_args'_v2 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : US3 = US3_1
    let v20 : US4 = US4_4(v19)
    let v21 : string = $"env.get_environment_variable / target: {v20} / var: {v0}"
    let v22 : string = failwith<string> v21
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : US3 = US3_2
    let v24 : US4 = US4_4(v23)
    let v25 : string = $"env.get_environment_variable / target: {v24} / var: {v0}"
    let v26 : string = failwith<string> v25
    let _run_target_args'_v2 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : string = "process.env[$0] ?? \"\""
    let v28 : string = Fable.Core.JsInterop.emitJsExpr v0 v27 
    let _run_target_args'_v2 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = "os"
    let v31 : IOsEnviron = Fable.Core.PyInterop.importAll v30 
    let v32 : string = "v31.environ"
    let v33 : obj = Fable.Core.PyInterop.emitPyExpr () v32 
    let v37 : string = "v33.get($0)"
    let v38 : string = Fable.Core.PyInterop.emitPyExpr v0 v37 
    let mutable _v38 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v42 : (string -> string option) = Option.ofObj
    let v43 : string option = v42 v38
    v43 
    #else
    Some v38 
    #endif
    |> fun x -> _v38 <- Some x
    let v44 : string option = match _v38 with Some x -> x | None -> failwith "optionm'.of_obj / _v38=None"
    let v49 : (string -> US5) = method6()
    let v50 : US5 option = v44 |> Option.map v49 
    let v70 : US5 = US5_1
    let v71 : US5 = v50 |> Option.defaultValue v70 
    let v78 : string =
        match v71 with
        | US5_1 -> (* None *)
            let v76 : string = ""
            v76
        | US5_0(v75) -> (* Some *)
            v75
    let _run_target_args'_v2 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : US3 = US3_1
    let v80 : US4 = US4_1(v79)
    let v81 : string = $"env.get_environment_variable / target: {v80} / var: {v0}"
    let v82 : string = failwith<string> v81
    let _run_target_args'_v2 = v82 
    #endif
#else
    let v83 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v84 : string = v83 v0
    let mutable _v84 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v86 : (string -> string option) = Option.ofObj
    let v87 : string option = v86 v84
    v87 
    #else
    Some v84 
    #endif
    |> fun x -> _v84 <- Some x
    let v88 : string option = match _v84 with Some x -> x | None -> failwith "optionm'.of_obj / _v84=None"
    let v93 : (string -> US5) = method6()
    let v94 : US5 option = v88 |> Option.map v93 
    let v114 : US5 = US5_1
    let v115 : US5 = v94 |> Option.defaultValue v114 
    let v122 : string =
        match v115 with
        | US5_1 -> (* None *)
            let v120 : string = ""
            v120
        | US5_0(v119) -> (* Some *)
            v119
    let _run_target_args'_v2 = v122 
    #endif
    let v123 : string = _run_target_args'_v2 
    v123
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v210 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v143 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v144 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v145 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v147 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v143 = v147 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v150 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v151 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v152 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v152 
            #endif
#else
            let v153 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v143 = v153 
            #endif
            let v154 : System.DateTime = _run_target_args'_v143 
            (* run_target_args'
            let v165 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v154
            let _run_target_args'_v165 = v167 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v154
            let _run_target_args'_v165 = v169 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : int64 = null |> unbox<int64>
            let _run_target_args'_v165 = v171 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : (System.DateTime -> int64) = _.Ticks
            let v175 : int64 = v174 v154
            let _run_target_args'_v165 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : (System.DateTime -> int64) = _.Ticks
            let v177 : int64 = v176 v154
            let _run_target_args'_v165 = v177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : (System.DateTime -> int64) = _.Ticks
            let v179 : int64 = v178 v154
            let _run_target_args'_v165 = v179 
            #endif
#else
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v154
            let _run_target_args'_v165 = v181 
            #endif
            let v182 : int64 = _run_target_args'_v165 
            let v204 : int64 = v182 |> int64 
            US2_0(v204)
    struct (v127, v210)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v43 v52 
    let _run_target_args'_v13 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "String::from($0)"
    let v62 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "String::from($0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v55 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : std_string_String = v55 |> unbox<std_string_String>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : std_string_String = _run_target_args'_v60 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v83 v92 
    let _run_target_args'_v13 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v95 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v94 
    (* run_target_args'
    let v100 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v101 : string = "String::from($0)"
    let v102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v101 
    let _run_target_args'_v100 = v102 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v103 : string = "String::from($0)"
    let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v103 
    let _run_target_args'_v100 = v104 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v105 : string = "String::from($0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v105 
    let _run_target_args'_v100 = v106 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v116 
    #endif
#else
    let v120 : std_string_String = v95 |> unbox<std_string_String>
    let _run_target_args'_v100 = v120 
    #endif
    let v123 : std_string_String = _run_target_args'_v100 
    let v132 : string = "fable_library_rust::String_::fromString($0)"
    let v133 : string = Fable.Core.RustInterop.emitRustExpr v123 v132 
    let _run_target_args'_v13 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v135 : string = null |> unbox<string>
    let _run_target_args'_v13 = v135 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : string = null |> unbox<string>
    let _run_target_args'_v13 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v13 = v143 
    #endif
#else
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v13 = v147 
    #endif
    let v150 : string = _run_target_args'_v13 
    let v161 : string = "True"
    let v162 : bool = v150 <> v161 
    let v174 : US2 =
        if v162 then
            US2_1
        else
            let v166 : string = $"near_sdk::env::block_timestamp()"
            let v167 : uint64 = Fable.Core.RustInterop.emitRustExpr () v166 
            let v169 : (uint64 -> int64) = int64
            let v170 : int64 = v169 v167
            US2_0(v170)
    let v175 : US1 = US1_1
    let _run_target_args'_v3 = struct (v175, v174) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v176 : US1, v177 : US2) = method2()
    let _run_target_args'_v3 = struct (v176, v177) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v178 : US1, v179 : US2) = method2()
    let _run_target_args'_v3 = struct (v178, v179) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v180 : US1, v181 : US2) = method2()
    let _run_target_args'_v3 = struct (v180, v181) 
    #endif
#else
    let struct (v182 : US1, v183 : US2) = method2()
    let _run_target_args'_v3 = struct (v182, v183) 
    #endif
    let struct (v184 : US1, v185 : US2) = _run_target_args'_v3 
    let v190 : Mut0 = {l0 = 1L} : Mut0
    let v191 : (string -> unit) = closure4()
    let v192 : Mut1 = {l0 = v191} : Mut1
    let v193 : Mut2 = {l0 = true} : Mut2
    let v194 : string = ""
    let v195 : Mut3 = {l0 = v194} : Mut3
    let v198 : US0 =
        match v184 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v196) -> (* Some *)
            v196
    let v199 : Mut4 = {l0 = v198} : Mut4
    let v210 : int64 option =
        match v185 with
        | US2_1 -> (* None *)
            let v206 : int64 option = None
            v206
        | US2_0(v200) -> (* Some *)
            let v202 : int64 option = Some v200 
            v202
    struct (v190, v192, v193, v195, v199, v210)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method8 () : (int64 -> US2) =
    closure6()
and method9 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method10 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method7 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v195 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v198 : (int64 -> US2) = method8()
    let v199 : US2 option = v5 |> Option.map v198 
    let v219 : US2 = US2_1
    let v220 : US2 = v199 |> Option.defaultValue v219 
    let v360 : System.DateTime =
        match v220 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v343 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v344 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v344 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v345 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v347 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v343 = v347 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v350 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v351 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v352 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v352 
            #endif
#else
            let v353 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v343 = v353 
            #endif
            let v354 : System.DateTime = _run_target_args'_v343 
            v354
        | US2_0(v224) -> (* Some *)
            (* run_target_args'
            let v231 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v232 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v232 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v233 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v233 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v235 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v231 = v235 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v238 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v238 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v240 
            #endif
#else
            let v241 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v231 = v241 
            #endif
            let v242 : System.DateTime = _run_target_args'_v231 
            (* run_target_args'
            let v253 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v254 : (System.DateTime -> int64) = _.Ticks
            let v255 : int64 = v254 v242
            let _run_target_args'_v253 = v255 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v256 : (System.DateTime -> int64) = _.Ticks
            let v257 : int64 = v256 v242
            let _run_target_args'_v253 = v257 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v259 : int64 = null |> unbox<int64>
            let _run_target_args'_v253 = v259 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : (System.DateTime -> int64) = _.Ticks
            let v263 : int64 = v262 v242
            let _run_target_args'_v253 = v263 
            #endif
#if FABLE_COMPILER_PYTHON
            let v264 : (System.DateTime -> int64) = _.Ticks
            let v265 : int64 = v264 v242
            let _run_target_args'_v253 = v265 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v266 : (System.DateTime -> int64) = _.Ticks
            let v267 : int64 = v266 v242
            let _run_target_args'_v253 = v267 
            #endif
#else
            let v268 : (System.DateTime -> int64) = _.Ticks
            let v269 : int64 = v268 v242
            let _run_target_args'_v253 = v269 
            #endif
            let v270 : int64 = _run_target_args'_v253 
            let v292 : int64 = v270 |> int64 
            let v297 : int64 = v292 - v224
            let v303 : System.TimeSpan = v297 |> System.TimeSpan 
            let v309 : (System.TimeSpan -> int32) = _.Hours
            let v310 : int32 = v309 v303
            let v314 : (System.TimeSpan -> int32) = _.Minutes
            let v315 : int32 = v314 v303
            let v319 : (System.TimeSpan -> int32) = _.Seconds
            let v320 : int32 = v319 v303
            let v324 : (System.TimeSpan -> int32) = _.Milliseconds
            let v325 : int32 = v324 v303
            let v334 : System.DateTime = System.DateTime (1, 1, 1, v310, v315, v320, v325)
            v334
    let v361 : string = method9()
    let v363 : bool = v361 = ""
    let v365 : string =
        if v363 then
            let v364 : string = "M-d-y hh:mm:ss tt"
            v364
        else
            v361
    let v366 : (string -> string) = v360.ToString
    let v367 : string = v366 v365
    let _run_target_args'_v195 = v367 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v384 : (int64 -> US2) = method8()
    let v385 : US2 option = v5 |> Option.map v384 
    let v405 : US2 = US2_1
    let v406 : US2 = v385 |> Option.defaultValue v405 
    let v546 : System.DateTime =
        match v406 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v529 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v530 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v530 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v531 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v531 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v533 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v529 = v533 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v536 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v536 
            #endif
#if FABLE_COMPILER_PYTHON
            let v537 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v537 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v538 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v538 
            #endif
#else
            let v539 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v529 = v539 
            #endif
            let v540 : System.DateTime = _run_target_args'_v529 
            v540
        | US2_0(v410) -> (* Some *)
            (* run_target_args'
            let v417 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v418 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v418 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v419 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v417 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v424 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v424 
            #endif
#if FABLE_COMPILER_PYTHON
            let v425 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v425 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v426 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v426 
            #endif
#else
            let v427 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v417 = v427 
            #endif
            let v428 : System.DateTime = _run_target_args'_v417 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : (System.DateTime -> int64) = _.Ticks
            let v441 : int64 = v440 v428
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : (System.DateTime -> int64) = _.Ticks
            let v443 : int64 = v442 v428
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : int64 = null |> unbox<int64>
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v448 : (System.DateTime -> int64) = _.Ticks
            let v449 : int64 = v448 v428
            let _run_target_args'_v439 = v449 
            #endif
#if FABLE_COMPILER_PYTHON
            let v450 : (System.DateTime -> int64) = _.Ticks
            let v451 : int64 = v450 v428
            let _run_target_args'_v439 = v451 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v452 : (System.DateTime -> int64) = _.Ticks
            let v453 : int64 = v452 v428
            let _run_target_args'_v439 = v453 
            #endif
#else
            let v454 : (System.DateTime -> int64) = _.Ticks
            let v455 : int64 = v454 v428
            let _run_target_args'_v439 = v455 
            #endif
            let v456 : int64 = _run_target_args'_v439 
            let v478 : int64 = v456 |> int64 
            let v483 : int64 = v478 - v410
            let v489 : System.TimeSpan = v483 |> System.TimeSpan 
            let v495 : (System.TimeSpan -> int32) = _.Hours
            let v496 : int32 = v495 v489
            let v500 : (System.TimeSpan -> int32) = _.Minutes
            let v501 : int32 = v500 v489
            let v505 : (System.TimeSpan -> int32) = _.Seconds
            let v506 : int32 = v505 v489
            let v510 : (System.TimeSpan -> int32) = _.Milliseconds
            let v511 : int32 = v510 v489
            let v520 : System.DateTime = System.DateTime (1, 1, 1, v496, v501, v506, v511)
            v520
    let v547 : string = method9()
    let v549 : bool = v547 = ""
    let v551 : string =
        if v549 then
            let v550 : string = "M-d-y hh:mm:ss tt"
            v550
        else
            v547
    let v552 : (string -> string) = v546.ToString
    let v553 : string = v552 v551
    let _run_target_args'_v195 = v553 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v568 : string = $"near_sdk::env::block_timestamp()"
    let v569 : uint64 = Fable.Core.RustInterop.emitRustExpr () v568 
    let v572 : (int64 -> US2) = method8()
    let v573 : US2 option = v5 |> Option.map v572 
    let v593 : US2 = US2_1
    let v594 : US2 = v573 |> Option.defaultValue v593 
    let v606 : uint64 =
        match v594 with
        | US2_1 -> (* None *)
            v569
        | US2_0(v598) -> (* Some *)
            let v600 : (int64 -> uint64) = uint64
            let v601 : uint64 = v600 v598
            let v604 : uint64 = v569 - v601
            v604
    let v607 : uint64 = v606 / 1000000000UL
    let v608 : uint64 = v607 % 60UL
    let v609 : uint64 = v607 / 60UL
    let v610 : uint64 = v609 % 60UL
    let v611 : uint64 = v607 / 3600UL
    let v612 : uint64 = v611 % 24UL
    let v613 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v612, v610, v608) v613 
    let v615 : string = "fable_library_rust::String_::fromString($0)"
    let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
    let _run_target_args'_v195 = v616 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v619 : (int64 -> US2) = method8()
    let v620 : US2 option = v5 |> Option.map v619 
    let v640 : US2 = US2_1
    let v641 : US2 = v620 |> Option.defaultValue v640 
    let v781 : System.DateTime =
        match v641 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v764 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v765 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v765 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v766 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v766 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v768 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v764 = v768 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v771 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v771 
            #endif
#if FABLE_COMPILER_PYTHON
            let v772 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v772 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v773 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v773 
            #endif
#else
            let v774 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v764 = v774 
            #endif
            let v775 : System.DateTime = _run_target_args'_v764 
            v775
        | US2_0(v645) -> (* Some *)
            (* run_target_args'
            let v652 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v653 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v653 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v654 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v654 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v656 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v652 = v656 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v659 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v659 
            #endif
#if FABLE_COMPILER_PYTHON
            let v660 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v660 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v661 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v661 
            #endif
#else
            let v662 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v662 
            #endif
            let v663 : System.DateTime = _run_target_args'_v652 
            (* run_target_args'
            let v674 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v675 : (System.DateTime -> int64) = _.Ticks
            let v676 : int64 = v675 v663
            let _run_target_args'_v674 = v676 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v677 : (System.DateTime -> int64) = _.Ticks
            let v678 : int64 = v677 v663
            let _run_target_args'_v674 = v678 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v680 : int64 = null |> unbox<int64>
            let _run_target_args'_v674 = v680 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v683 : (System.DateTime -> int64) = _.Ticks
            let v684 : int64 = v683 v663
            let _run_target_args'_v674 = v684 
            #endif
#if FABLE_COMPILER_PYTHON
            let v685 : (System.DateTime -> int64) = _.Ticks
            let v686 : int64 = v685 v663
            let _run_target_args'_v674 = v686 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v687 : (System.DateTime -> int64) = _.Ticks
            let v688 : int64 = v687 v663
            let _run_target_args'_v674 = v688 
            #endif
#else
            let v689 : (System.DateTime -> int64) = _.Ticks
            let v690 : int64 = v689 v663
            let _run_target_args'_v674 = v690 
            #endif
            let v691 : int64 = _run_target_args'_v674 
            let v713 : int64 = v691 |> int64 
            let v718 : int64 = v713 - v645
            let v724 : System.TimeSpan = v718 |> System.TimeSpan 
            let v730 : (System.TimeSpan -> int32) = _.Hours
            let v731 : int32 = v730 v724
            let v735 : (System.TimeSpan -> int32) = _.Minutes
            let v736 : int32 = v735 v724
            let v740 : (System.TimeSpan -> int32) = _.Seconds
            let v741 : int32 = v740 v724
            let v745 : (System.TimeSpan -> int32) = _.Milliseconds
            let v746 : int32 = v745 v724
            let v755 : System.DateTime = System.DateTime (1, 1, 1, v731, v736, v741, v746)
            v755
    let v782 : string = method10()
    let v784 : bool = v782 = ""
    let v786 : string =
        if v784 then
            let v785 : string = "M-d-y hh:mm:ss tt"
            v785
        else
            v782
    let v787 : (string -> string) = v781.ToString
    let v788 : string = v787 v786
    let _run_target_args'_v195 = v788 
    #endif
#if FABLE_COMPILER_PYTHON
    let v805 : (int64 -> US2) = method8()
    let v806 : US2 option = v5 |> Option.map v805 
    let v826 : US2 = US2_1
    let v827 : US2 = v806 |> Option.defaultValue v826 
    let v967 : System.DateTime =
        match v827 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v950 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v951 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v951 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v952 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v952 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v954 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v950 = v954 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v957 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v957 
            #endif
#if FABLE_COMPILER_PYTHON
            let v958 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v958 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v959 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v959 
            #endif
#else
            let v960 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v950 = v960 
            #endif
            let v961 : System.DateTime = _run_target_args'_v950 
            v961
        | US2_0(v831) -> (* Some *)
            (* run_target_args'
            let v838 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v839 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v839 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v840 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v840 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v842 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v838 = v842 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v845 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v845 
            #endif
#if FABLE_COMPILER_PYTHON
            let v846 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v846 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v847 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v847 
            #endif
#else
            let v848 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v838 = v848 
            #endif
            let v849 : System.DateTime = _run_target_args'_v838 
            (* run_target_args'
            let v860 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v861 : (System.DateTime -> int64) = _.Ticks
            let v862 : int64 = v861 v849
            let _run_target_args'_v860 = v862 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v863 : (System.DateTime -> int64) = _.Ticks
            let v864 : int64 = v863 v849
            let _run_target_args'_v860 = v864 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v866 : int64 = null |> unbox<int64>
            let _run_target_args'_v860 = v866 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v869 : (System.DateTime -> int64) = _.Ticks
            let v870 : int64 = v869 v849
            let _run_target_args'_v860 = v870 
            #endif
#if FABLE_COMPILER_PYTHON
            let v871 : (System.DateTime -> int64) = _.Ticks
            let v872 : int64 = v871 v849
            let _run_target_args'_v860 = v872 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v873 : (System.DateTime -> int64) = _.Ticks
            let v874 : int64 = v873 v849
            let _run_target_args'_v860 = v874 
            #endif
#else
            let v875 : (System.DateTime -> int64) = _.Ticks
            let v876 : int64 = v875 v849
            let _run_target_args'_v860 = v876 
            #endif
            let v877 : int64 = _run_target_args'_v860 
            let v899 : int64 = v877 |> int64 
            let v904 : int64 = v899 - v831
            let v910 : System.TimeSpan = v904 |> System.TimeSpan 
            let v916 : (System.TimeSpan -> int32) = _.Hours
            let v917 : int32 = v916 v910
            let v921 : (System.TimeSpan -> int32) = _.Minutes
            let v922 : int32 = v921 v910
            let v926 : (System.TimeSpan -> int32) = _.Seconds
            let v927 : int32 = v926 v910
            let v931 : (System.TimeSpan -> int32) = _.Milliseconds
            let v932 : int32 = v931 v910
            let v941 : System.DateTime = System.DateTime (1, 1, 1, v917, v922, v927, v932)
            v941
    let v968 : string = method10()
    let v970 : bool = v968 = ""
    let v972 : string =
        if v970 then
            let v971 : string = "M-d-y hh:mm:ss tt"
            v971
        else
            v968
    let v973 : (string -> string) = v967.ToString
    let v974 : string = v973 v972
    let _run_target_args'_v195 = v974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v991 : (int64 -> US2) = method8()
    let v992 : US2 option = v5 |> Option.map v991 
    let v1012 : US2 = US2_1
    let v1013 : US2 = v992 |> Option.defaultValue v1012 
    let v1153 : System.DateTime =
        match v1013 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1136 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1137 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1137 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1138 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1138 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1140 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1136 = v1140 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1144 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1145 
            #endif
#else
            let v1146 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1136 = v1146 
            #endif
            let v1147 : System.DateTime = _run_target_args'_v1136 
            v1147
        | US2_0(v1017) -> (* Some *)
            (* run_target_args'
            let v1024 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1025 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1025 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1026 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1026 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1028 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1024 = v1028 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1031 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1031 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1032 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1032 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1033 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1033 
            #endif
#else
            let v1034 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1024 = v1034 
            #endif
            let v1035 : System.DateTime = _run_target_args'_v1024 
            (* run_target_args'
            let v1046 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1047 : (System.DateTime -> int64) = _.Ticks
            let v1048 : int64 = v1047 v1035
            let _run_target_args'_v1046 = v1048 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1049 : (System.DateTime -> int64) = _.Ticks
            let v1050 : int64 = v1049 v1035
            let _run_target_args'_v1046 = v1050 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1052 : int64 = null |> unbox<int64>
            let _run_target_args'_v1046 = v1052 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1055 : (System.DateTime -> int64) = _.Ticks
            let v1056 : int64 = v1055 v1035
            let _run_target_args'_v1046 = v1056 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1057 : (System.DateTime -> int64) = _.Ticks
            let v1058 : int64 = v1057 v1035
            let _run_target_args'_v1046 = v1058 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1059 : (System.DateTime -> int64) = _.Ticks
            let v1060 : int64 = v1059 v1035
            let _run_target_args'_v1046 = v1060 
            #endif
#else
            let v1061 : (System.DateTime -> int64) = _.Ticks
            let v1062 : int64 = v1061 v1035
            let _run_target_args'_v1046 = v1062 
            #endif
            let v1063 : int64 = _run_target_args'_v1046 
            let v1085 : int64 = v1063 |> int64 
            let v1090 : int64 = v1085 - v1017
            let v1096 : System.TimeSpan = v1090 |> System.TimeSpan 
            let v1102 : (System.TimeSpan -> int32) = _.Hours
            let v1103 : int32 = v1102 v1096
            let v1107 : (System.TimeSpan -> int32) = _.Minutes
            let v1108 : int32 = v1107 v1096
            let v1112 : (System.TimeSpan -> int32) = _.Seconds
            let v1113 : int32 = v1112 v1096
            let v1117 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1118 : int32 = v1117 v1096
            let v1127 : System.DateTime = System.DateTime (1, 1, 1, v1103, v1108, v1113, v1118)
            v1127
    let v1154 : string = method10()
    let v1156 : bool = v1154 = ""
    let v1158 : string =
        if v1156 then
            let v1157 : string = "M-d-y hh:mm:ss tt"
            v1157
        else
            v1154
    let v1159 : (string -> string) = v1153.ToString
    let v1160 : string = v1159 v1158
    let _run_target_args'_v195 = v1160 
    #endif
#else
    let v1177 : (int64 -> US2) = method8()
    let v1178 : US2 option = v5 |> Option.map v1177 
    let v1198 : US2 = US2_1
    let v1199 : US2 = v1178 |> Option.defaultValue v1198 
    let v1339 : System.DateTime =
        match v1199 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1323 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1323 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1324 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1324 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1326 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1322 = v1326 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1329 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1330 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1331 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1331 
            #endif
#else
            let v1332 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1322 = v1332 
            #endif
            let v1333 : System.DateTime = _run_target_args'_v1322 
            v1333
        | US2_0(v1203) -> (* Some *)
            (* run_target_args'
            let v1210 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1211 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1211 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1212 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1214 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1210 = v1214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1217 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1217 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1218 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1218 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1219 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1219 
            #endif
#else
            let v1220 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1210 = v1220 
            #endif
            let v1221 : System.DateTime = _run_target_args'_v1210 
            (* run_target_args'
            let v1232 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1233 : (System.DateTime -> int64) = _.Ticks
            let v1234 : int64 = v1233 v1221
            let _run_target_args'_v1232 = v1234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1235 : (System.DateTime -> int64) = _.Ticks
            let v1236 : int64 = v1235 v1221
            let _run_target_args'_v1232 = v1236 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1238 : int64 = null |> unbox<int64>
            let _run_target_args'_v1232 = v1238 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1241 : (System.DateTime -> int64) = _.Ticks
            let v1242 : int64 = v1241 v1221
            let _run_target_args'_v1232 = v1242 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1243 : (System.DateTime -> int64) = _.Ticks
            let v1244 : int64 = v1243 v1221
            let _run_target_args'_v1232 = v1244 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1245 : (System.DateTime -> int64) = _.Ticks
            let v1246 : int64 = v1245 v1221
            let _run_target_args'_v1232 = v1246 
            #endif
#else
            let v1247 : (System.DateTime -> int64) = _.Ticks
            let v1248 : int64 = v1247 v1221
            let _run_target_args'_v1232 = v1248 
            #endif
            let v1249 : int64 = _run_target_args'_v1232 
            let v1271 : int64 = v1249 |> int64 
            let v1276 : int64 = v1271 - v1203
            let v1282 : System.TimeSpan = v1276 |> System.TimeSpan 
            let v1288 : (System.TimeSpan -> int32) = _.Hours
            let v1289 : int32 = v1288 v1282
            let v1293 : (System.TimeSpan -> int32) = _.Minutes
            let v1294 : int32 = v1293 v1282
            let v1298 : (System.TimeSpan -> int32) = _.Seconds
            let v1299 : int32 = v1298 v1282
            let v1303 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1304 : int32 = v1303 v1282
            let v1313 : System.DateTime = System.DateTime (1, 1, 1, v1289, v1294, v1299, v1304)
            v1313
    let v1340 : string = method10()
    let v1342 : bool = v1340 = ""
    let v1344 : string =
        if v1342 then
            let v1343 : string = "M-d-y hh:mm:ss tt"
            v1343
        else
            v1340
    let v1345 : (string -> string) = v1339.ToString
    let v1346 : string = v1345 v1344
    let _run_target_args'_v195 = v1346 
    #endif
    let v1361 : string = _run_target_args'_v195 
    v1361
and method13 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v4 : string = v2 + v1 
    v0.l0 <- v4
    ()
and method12 (v0 : char) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v7 : string = $"{v0}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v2, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v23 : string = v2.l0
    v23
and method14 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method11 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_blue"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_blue"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_blue"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[94m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[94m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[94m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[94m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method16 (v0 : (string [])) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "args"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v62 : string = $"%A{v0}"
    let v66 : string = $"{v62}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v2, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = " }"
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v2, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v101 : string = v2.l0
    v101
and method17 (v0 : string) : string =
    let v1 : char list = []
    let v8 : (char list -> (char [])) = List.toArray
    let v9 : (char []) = v8 v1
    let v12 : string = v0.TrimStart v9 
    let v46 : char list = []
    let v48 : char list = '/' :: v46 
    let v52 : char list = ' ' :: v48 
    let v61 : (char list -> (char [])) = List.toArray
    let v62 : (char []) = v61 v52
    let v65 : string = v12.TrimEnd v62 
    v65
and method15 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method16(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.main"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure10(v0)
    let v4 : unit = (fun () -> v3 (); v2) ()
    ()
and closure5 (v0 : (string [])) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method15(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US7 =
    US7_0(v0, v1)
and method19 () : (struct (std_string_String * clap_ArgMatches) -> US7) =
    closure12()
and method20 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US8 =
    US8_0(v0)
and method21 () : (std_string_String -> US8) =
    closure13()
and method22 () : string =
    let v0 : string = "target"
    v0
and method23 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US12 =
    US12_0(v0)
and method24 () : (Vec<std_string_String> -> US12) =
    closure14()
and method25 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method26 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "extension"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "new_code"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method28 () : string =
    let v0 : string = ""
    v0
and method29 (v0 : string) : string =
    v0
and method30 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method31 () : string =
    let v0 : string = ""
    v0
and method27 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method28()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method29(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method30(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method31()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method29(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method32 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v62 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v63 : string = "format!(\"{}\", $0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v63 
    let _run_target_args'_v62 = v64 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : string = "format!(\"{}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v65 
    let _run_target_args'_v62 = v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = "format!(\"{}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v67 
    let _run_target_args'_v62 = v68 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v78 
    #endif
#else
    let v82 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v62 = v82 
    #endif
    let v85 : std_string_String = _run_target_args'_v62 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v85 v94 
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _run_target_args'_v4 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = null |> unbox<string>
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "fs"
    let v105 : IFs = Fable.Core.JsInterop.importAll v104 
    let v106 : string = "fs.realpathSync('.')"
    let v107 : string = Fable.Core.JsInterop.emitJsExpr () v106 
    let _run_target_args'_v4 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : string = null |> unbox<string>
    let _run_target_args'_v4 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v113 : string = null |> unbox<string>
    let _run_target_args'_v4 = v113 
    #endif
#else
    let v116 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v117 : string = v116 ()
    let _run_target_args'_v4 = v117 
    #endif
    let v118 : string = _run_target_args'_v4 
    v118
and method34 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "String::from($0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "String::from($0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v63 
    #endif
#else
    let v67 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v47 = v67 
    #endif
    let v70 : std_string_String = _run_target_args'_v47 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "std::path::PathBuf::from($0)"
    let v85 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "std::path::PathBuf::from($0)"
    let v87 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "std::path::PathBuf::from($0)"
    let v89 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v70 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v99 
    #endif
#else
    let v103 : std_path_PathBuf = v70 |> unbox<std_path_PathBuf>
    let _run_target_args'_v83 = v103 
    #endif
    let v106 : std_path_PathBuf = _run_target_args'_v83 
    (* run_target_args'
    let v119 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v120 : string = "&*$0"
    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let _run_target_args'_v119 = v121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v122 : string = "&*$0"
    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v122 
    let _run_target_args'_v119 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "&*$0"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let _run_target_args'_v119 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v127 
    #endif
#if FABLE_COMPILER_PYTHON
    let v131 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v131 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v135 
    #endif
#else
    let v139 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v119 = v139 
    #endif
    let v142 : Ref<Str> = _run_target_args'_v119 
    (* run_target_args'
    let v155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : string = "String::from($0)"
    let v157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v156 
    let _run_target_args'_v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : string = "String::from($0)"
    let v159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v158 
    let _run_target_args'_v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : string = "String::from($0)"
    let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v160 
    let _run_target_args'_v155 = v161 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v171 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v171 
    #endif
#else
    let v175 : std_string_String = v142 |> unbox<std_string_String>
    let _run_target_args'_v155 = v175 
    #endif
    let v178 : std_string_String = _run_target_args'_v155 
    let v187 : string = "$0.join($1)"
    let v188 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v106, v178) v187 
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.display()"
    let v195 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.display()"
    let v197 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.display()"
    let v199 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v188 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_PYTHON
    let v205 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v209 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v209 
    #endif
#else
    let v213 : std_path_Display = v188 |> unbox<std_path_Display>
    let _run_target_args'_v193 = v213 
    #endif
    let v216 : std_path_Display = _run_target_args'_v193 
    (* run_target_args'
    let v229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : string = "format!(\"{}\", $0)"
    let v231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v230 
    let _run_target_args'_v229 = v231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v232 : string = "format!(\"{}\", $0)"
    let v233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v232 
    let _run_target_args'_v229 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : string = "format!(\"{}\", $0)"
    let v235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v216 v234 
    let _run_target_args'_v229 = v235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v245 
    #endif
#else
    let v249 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v229 = v249 
    #endif
    let v252 : std_string_String = _run_target_args'_v229 
    let v261 : string = "fable_library_rust::String_::fromString($0)"
    let v262 : string = Fable.Core.RustInterop.emitRustExpr v252 v261 
    let _run_target_args'_v6 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : US3 = US3_1
    let v264 : US4 = US4_4(v263)
    let v265 : string = $"file_system.(</>) / target: {v264} / a: {v0} / b: {v1}"
    let v266 : string = failwith<string> v265
    let _run_target_args'_v6 = v266 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v268 : string = null |> unbox<string>
    let _run_target_args'_v6 = v268 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v271 : string = "path"
    let v272 : IPathJoin = Fable.Core.JsInterop.importAll v271 
    let v273 : string = "v272.join($0, $1)"
    let v274 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v273 
    let _run_target_args'_v6 = v274 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : US3 = US3_0
    let v276 : US4 = US4_6(v275)
    let v277 : string = $"file_system.(</>) / target: {v276} / a: {v0} / b: {v1}"
    let v278 : string = failwith<string> v277
    let _run_target_args'_v6 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v279 : US3 = US3_1
    let v280 : US4 = US4_1(v279)
    let v281 : string = $"file_system.(</>) / target: {v280} / a: {v0} / b: {v1}"
    let v282 : string = failwith<string> v281
    let _run_target_args'_v6 = v282 
    #endif
#else
    let v283 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v283 
    #endif
    let v284 : string = _run_target_args'_v6 
    v284
and method36 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_file()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.File.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure15 () (v0 : string) : bool =
    method36(v0)
and method37 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v118 : bool =
        if v115 then
            let v116 : string = "$0.is_dir()"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr v105 v116 
            v117
        else
            false
    let _run_target_args'_v5 = v118 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v120 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v127 : string = "fs"
    let v128 : IFsExistsSync = Fable.Core.JsInterop.importAll v127 
    let v129 : string = "$0.existsSync($1)"
    let v130 : bool = Fable.Core.JsInterop.emitJsExpr struct (v128, v0) v129 
    let _run_target_args'_v5 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v136 
    #endif
#else
    let v139 : (string -> bool) = System.IO.Directory.Exists
    let v140 : bool = v139 v0
    let _run_target_args'_v5 = v140 
    #endif
    let v141 : bool = _run_target_args'_v5 
    v141
and closure16 () (v0 : string) : bool =
    method37(v0)
and method39 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v115 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v118 
    (* run_target_args'
    let v124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "$0.display()"
    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
    let _run_target_args'_v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "$0.display()"
    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
    let _run_target_args'_v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "$0.display()"
    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
    let _run_target_args'_v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v140 
    #endif
#else
    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
    let _run_target_args'_v124 = v144 
    #endif
    let v147 : std_path_Display = _run_target_args'_v124 
    (* run_target_args'
    let v160 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v161 : string = "format!(\"{}\", $0)"
    let v162 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v161 
    let _run_target_args'_v160 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : string = "format!(\"{}\", $0)"
    let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v163 
    let _run_target_args'_v160 = v164 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v165 : string = "format!(\"{}\", $0)"
    let v166 : std_string_String = Fable.Core.RustInterop.emitRustExpr v147 v165 
    let _run_target_args'_v160 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v176 
    #endif
#else
    let v180 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v160 = v180 
    #endif
    let v183 : std_string_String = _run_target_args'_v160 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v183 v192 
    let v194 : string = "true; $0 })"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr v193 v194 
    let v196 : string = "_optionm_map_"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr () v196 
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v199 : string option = None
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v203 : string option = None
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v206 : string = "path"
    let v207 : IPathDirname = Fable.Core.JsInterop.importAll v206 
    let v208 : string = "v207.dirname($0)"
    let v209 : string = Fable.Core.JsInterop.emitJsExpr v0 v208 
    let v210 : bool = v209 = v0
    let v213 : US5 =
        if v210 then
            US5_1
        else
            US5_0(v209)
    let v224 : string option =
        match v213 with
        | US5_1 -> (* None *)
            let v220 : string option = None
            v220
        | US5_0(v214) -> (* Some *)
            let v216 : string option = Some v214 
            v216
    let _run_target_args'_v5 = v224 
    #endif
#if FABLE_COMPILER_PYTHON
    let v226 : string option = None
    let _run_target_args'_v5 = v226 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v230 : string option = None
    let _run_target_args'_v5 = v230 
    #endif
#else
    let v233 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v234 : System_IO_DirectoryInfo = v233 v0
    let v236 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v240 : bool = v234 = v236 
    let v285 : US5 =
        if v240 then
            US5_1
        else
            (* run_target_args'
            let v248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v250 : string = null |> unbox<string>
            let _run_target_args'_v248 = v250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : string = null |> unbox<string>
            let _run_target_args'_v248 = v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v258 : string = null |> unbox<string>
            let _run_target_args'_v248 = v258 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : string = null |> unbox<string>
            let _run_target_args'_v248 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : string = null |> unbox<string>
            let _run_target_args'_v248 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : string = null |> unbox<string>
            let _run_target_args'_v248 = v270 
            #endif
#else
            let v273 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v274 : string = v273 v234
            let _run_target_args'_v248 = v274 
            #endif
            let v275 : string = _run_target_args'_v248 
            US5_0(v275)
    let v296 : string option =
        match v285 with
        | US5_1 -> (* None *)
            let v292 : string option = None
            v292
        | US5_0(v286) -> (* Some *)
            let v288 : string option = Some v286 
            v288
    let _run_target_args'_v5 = v296 
    #endif
    let v297 : string option = _run_target_args'_v5 
    v297
and method40 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US14 =
    let v5 : string = method34(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US14_0(v4)
    else
        let v8 : string option = method39(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US14_1(v41)
        | US5_0(v37) -> (* Some *)
            method40(v0, v1, v2, v3, v37)
and method38 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US14 =
    let v4 : string = method34(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US14_0(v1)
    else
        let v7 : string option = method39(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US14_1(v40)
        | US5_0(v36) -> (* Some *)
            method40(v0, v1, v2, v3, v36)
and method35 (v0 : US13, v1 : string, v2 : string) : US14 =
    let v3 : bool =
        match v0 with
        | US13_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method38(v1, v2, v3, v6)
and method41 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_yellow"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_yellow"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_yellow"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[93m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[93m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[93m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[93m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method43 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method42 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method43(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.get_workspace_root"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure17 (v0 : string, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 3 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method41()
            let v125 : string = method42(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method48 (v0 : std_io_Error) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v46 : string = $"{v36}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v2, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v62 : string = v2.l0
    v62
and closure18 () (v0 : std_io_Error) : string =
    method48(v0)
and method47 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method49 () : (std_path_PathBuf -> US15) =
    closure19()
and closure20 () (v0 : string) : US15 =
    US15_1(v0)
and method50 () : (string -> US15) =
    closure20()
and method53 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v200 : US3 = US3_1
    let v201 : US4 = US4_4(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : string = "path"
    let v209 : IPathBasename = Fable.Core.JsInterop.importAll v208 
    let v210 : string = "v209.basename($0)"
    let v211 : string = Fable.Core.JsInterop.emitJsExpr v0 v210 
    let _run_target_args'_v5 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US3 = US3_0
    let v213 : US4 = US4_6(v212)
    let v214 : string = $"file_system.get_file_name / target: {v213} / path: {v0}"
    let v215 : string = failwith<string> v214
    let _run_target_args'_v5 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : US3 = US3_1
    let v217 : US4 = US4_1(v216)
    let v218 : string = $"file_system.get_file_name / target: {v217} / path: {v0}"
    let v219 : string = failwith<string> v218
    let _run_target_args'_v5 = v219 
    #endif
#else
    let v220 : (string -> string) = System.IO.Path.GetFileName
    let v221 : string = v220 v0
    let _run_target_args'_v5 = v221 
    #endif
    let v222 : string = _run_target_args'_v5 
    v222
and method54 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v2, v4)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v20 : string = v2.l0
    v20
and method52 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method53(v4)
    let v6 : string option = method39(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method54(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method49()
                let v118 : (string -> US15) = method50()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method34(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method51 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US15) = method49()
    let v27 : (string -> US15) = method50()
    let v29 : US15 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US15_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v49, v1, v48, v2)
        | US15_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US15) = method49()
    let v72 : (string -> US15) = method50()
    let v74 : US15 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US15_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v94, v1, v93, v2)
        | US15_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US15) = method49()
    let v117 : (string -> US15) = method50()
    let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US15_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method52(v0, v139, v1, v138, v2)
        | US15_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method51(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method55 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method53(v0)
    let v5 : string option = method39(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method54(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method49()
                let v117 : (string -> US15) = method50()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method34(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method46 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US15) = method49()
    let v26 : (string -> US15) = method50()
    let v28 : US15 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US15_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v48, v1, v47)
        | US15_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US15) = method49()
    let v71 : (string -> US15) = method50()
    let v73 : US15 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US15_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v93, v1, v92)
        | US15_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method47()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US15) = method49()
    let v116 : (string -> US15) = method50()
    let v118 : US15 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US15_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method55(v0, v138, v1, v137)
        | US15_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method57 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method58 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method59 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method61 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method53(v4)
    let v6 : string option = method39(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method48(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v77 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v78 
        let _run_target_args'_v77 = v79 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v80 : string = "Err($0)"
        let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v80 
        let _run_target_args'_v77 = v81 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v82 : string = "Err($0)"
        let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v82 
        let _run_target_args'_v77 = v83 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v84 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v86 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v86 
        #endif
#else
        let v87 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v77 = v87 
        #endif
        let v88 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v77 
        v88
    else
        match v31 with
        | US5_0(v91) -> (* Some *)
            let v94 : string = ""
            let v95 : bool = v4 <> v94 
            if v95 then
                let v98 : uint8 = v2 + 1uy
                let v99 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v98
                let v100 : Result<std_path_PathBuf, std_io_Error> = v99 v91
                let v101 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v104 
                let _run_target_args'_v103 = v105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v106 : string = "$0.map_err(|x| $1(x))"
                let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v106 
                let _run_target_args'_v103 = v107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v108 : string = "$0.map_err(|x| $1(x))"
                let v109 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v108 
                let _run_target_args'_v103 = v109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v110 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v110 
                #endif
#if FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v111 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v112 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v112 
                #endif
#else
                let v113 : Result<std_path_PathBuf, string> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
                let _run_target_args'_v103 = v113 
                #endif
                let v114 : Result<std_path_PathBuf, string> = _run_target_args'_v103 
                let v117 : (std_path_PathBuf -> US15) = method49()
                let v118 : (string -> US15) = method50()
                let v120 : US15 = match v114 with Ok x -> v117 x | Error x -> v118 x
                match v120 with
                | US15_1(v288) -> (* Error *)
                    let v289 : string = $"file_system.read_link / "
                    let v290 : string = $"error': {v288} / error: {v35} / name: {v5}"
                    let v291 : string = v289 + v290 
                    (* run_target_args'
                    let v296 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v297 
                    let _run_target_args'_v296 = v298 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v299 
                    let _run_target_args'_v296 = v300 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v291 v301 
                    let _run_target_args'_v296 = v302 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v304 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v304 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v308 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v308 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v312 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v312 
                    #endif
#else
                    let v316 : std_io_Error = v291 |> unbox<std_io_Error>
                    let _run_target_args'_v296 = v316 
                    #endif
                    let v319 : std_io_Error = _run_target_args'_v296 
                    (* run_target_args'
                    let v329 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : string = "Err($0)"
                    let v331 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v330 
                    let _run_target_args'_v329 = v331 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v332 : string = "Err($0)"
                    let v333 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v332 
                    let _run_target_args'_v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v334 : string = "Err($0)"
                    let v335 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v319 v334 
                    let _run_target_args'_v329 = v335 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v336 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v338 
                    #endif
#else
                    let v339 : Result<std_path_PathBuf, std_io_Error> = v319 |> Error
                    let _run_target_args'_v329 = v339 
                    #endif
                    let v340 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v329 
                    v340
                | US15_0(v123) -> (* Ok *)
                    (* run_target_args'
                    let v128 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v129 
                    let _run_target_args'_v128 = v130 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v131 : string = "$0.display()"
                    let v132 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v131 
                    let _run_target_args'_v128 = v132 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v133 : string = "$0.display()"
                    let v134 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v123 v133 
                    let _run_target_args'_v128 = v134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v136 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v136 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v144 
                    #endif
#else
                    let v148 : std_path_Display = v123 |> unbox<std_path_Display>
                    let _run_target_args'_v128 = v148 
                    #endif
                    let v151 : std_path_Display = _run_target_args'_v128 
                    let v161 : string = v151 |> string 
                    let v164 : string = method34(v161, v5)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "&*$0"
                    let v175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v181 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v181 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v185 
                    #endif
#else
                    let v189 : Ref<Str> = v164 |> unbox<Ref<Str>>
                    let _run_target_args'_v169 = v189 
                    #endif
                    let v192 : Ref<Str> = _run_target_args'_v169 
                    (* run_target_args'
                    let v205 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v206 : string = "String::from($0)"
                    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v206 
                    let _run_target_args'_v205 = v207 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v208 : string = "String::from($0)"
                    let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v208 
                    let _run_target_args'_v205 = v209 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v210 : string = "String::from($0)"
                    let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v192 v210 
                    let _run_target_args'_v205 = v211 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v213 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v213 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v221 
                    #endif
#else
                    let v225 : std_string_String = v192 |> unbox<std_string_String>
                    let _run_target_args'_v205 = v225 
                    #endif
                    let v228 : std_string_String = _run_target_args'_v205 
                    (* run_target_args'
                    let v241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v242 : string = "std::path::PathBuf::from($0)"
                    let v243 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v242 
                    let _run_target_args'_v241 = v243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v244 : string = "std::path::PathBuf::from($0)"
                    let v245 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v244 
                    let _run_target_args'_v241 = v245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v246 : string = "std::path::PathBuf::from($0)"
                    let v247 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v228 v246 
                    let _run_target_args'_v241 = v247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v249 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v253 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v253 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v257 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v257 
                    #endif
#else
                    let v261 : std_path_PathBuf = v228 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v241 = v261 
                    #endif
                    let v264 : std_path_PathBuf = _run_target_args'_v241 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "Ok($0)"
                    let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "Ok($0)"
                    let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "Ok($0)"
                    let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v264 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v281 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v282 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v283 
                    #endif
#else
                    let v284 : Result<std_path_PathBuf, std_io_Error> = v264 |> Ok
                    let _run_target_args'_v274 = v284 
                    #endif
                    let v285 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v274 
                    v285
            else
                let v345 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v346 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v347 : string = v345 + v346 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v354 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v356 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v358 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v347 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v360 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v360 
                #endif
#if FABLE_COMPILER_PYTHON
                let v364 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v364 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v368 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v368 
                #endif
#else
                let v372 : std_io_Error = v347 |> unbox<std_io_Error>
                let _run_target_args'_v352 = v372 
                #endif
                let v375 : std_io_Error = _run_target_args'_v352 
                (* run_target_args'
                let v385 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v386 : string = "Err($0)"
                let v387 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v386 
                let _run_target_args'_v385 = v387 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v388 : string = "Err($0)"
                let v389 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v388 
                let _run_target_args'_v385 = v389 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v390 : string = "Err($0)"
                let v391 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v375 v390 
                let _run_target_args'_v385 = v391 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v392 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v393 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v394 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v394 
                #endif
#else
                let v395 : Result<std_path_PathBuf, std_io_Error> = v375 |> Error
                let _run_target_args'_v385 = v395 
                #endif
                let v396 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v385 
                v396
        | _ ->
            let v400 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v401 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v402 : string = v400 + v401 
            (* run_target_args'
            let v407 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v408 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v409 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v408 
            let _run_target_args'_v407 = v409 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v410 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v411 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v407 = v411 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v412 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v413 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v407 = v413 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v415 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v415 
            #endif
#if FABLE_COMPILER_PYTHON
            let v419 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v419 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v423 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v423 
            #endif
#else
            let v427 : std_io_Error = v402 |> unbox<std_io_Error>
            let _run_target_args'_v407 = v427 
            #endif
            let v430 : std_io_Error = _run_target_args'_v407 
            (* run_target_args'
            let v440 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v441 : string = "Err($0)"
            let v442 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v441 
            let _run_target_args'_v440 = v442 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v443 : string = "Err($0)"
            let v444 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v443 
            let _run_target_args'_v440 = v444 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v445 : string = "Err($0)"
            let v446 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v430 v445 
            let _run_target_args'_v440 = v446 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v447 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v447 
            #endif
#if FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v448 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v449 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v449 
            #endif
#else
            let v450 : Result<std_path_PathBuf, std_io_Error> = v430 |> Error
            let _run_target_args'_v440 = v450 
            #endif
            let v451 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v440 
            v451
and method60 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v45 : System.IO.FileAttributes = method57(v36)
    let v46 : System.IO.FileAttributes = method58()
    let v47 : bool = method59(v46, v45)
    if v47 then
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v62 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v66 
        #endif
#if FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v70 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v74 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v52 = v74 
        #endif
#else
        let v78 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v52 = v78 
        #endif
        let v81 : System_IO_FileInfo = _run_target_args'_v52 
        (* run_target_args'
        let v94 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v96 : string = null |> unbox<string>
        let _run_target_args'_v94 = v96 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v100 : string = null |> unbox<string>
        let _run_target_args'_v94 = v100 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v104 : string = null |> unbox<string>
        let _run_target_args'_v94 = v104 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v108 : string = null |> unbox<string>
        let _run_target_args'_v94 = v108 
        #endif
#if FABLE_COMPILER_PYTHON
        let v112 : string = null |> unbox<string>
        let _run_target_args'_v94 = v112 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v116 : string = null |> unbox<string>
        let _run_target_args'_v94 = v116 
        #endif
#else
        let v119 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v120 : string = v119 v81
        let _run_target_args'_v94 = v120 
        #endif
        let v121 : string = _run_target_args'_v94 
        let v131 : std_path_PathBuf = v121 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v135 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v136 : string = "Ok($0)"
        let v137 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v136 
        let _run_target_args'_v135 = v137 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v138 : string = "Ok($0)"
        let v139 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v138 
        let _run_target_args'_v135 = v139 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v140 : string = "Ok($0)"
        let v141 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v131 v140 
        let _run_target_args'_v135 = v141 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v142 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v142 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v144 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v144 
        #endif
#else
        let v145 : Result<std_path_PathBuf, std_io_Error> = v131 |> Ok
        let _run_target_args'_v135 = v145 
        #endif
        let v146 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v135 
        v146
    else
        let v149 : string = $"file_system.read_link / Fsharp / "
        let v150 : string = $"The file or directory is not a reparse point. / "
        let v151 : string = v149 + v150 
        let v152 : string = $"path: {v0} / result: {v47} / path': {v2} / n: {v1}"
        let v153 : string = v151 + v152 
        (* run_target_args'
        let v158 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v160 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v159 
        let _run_target_args'_v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v162 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v161 
        let _run_target_args'_v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v164 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v153 v163 
        let _run_target_args'_v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v166 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v166 
        #endif
#if FABLE_COMPILER_PYTHON
        let v170 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v170 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v174 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v174 
        #endif
#else
        let v178 : std_io_Error = v153 |> unbox<std_io_Error>
        let _run_target_args'_v158 = v178 
        #endif
        let v181 : std_io_Error = _run_target_args'_v158 
        let v190 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method61(v0, v190, v1, v181, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method60(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method62 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method53(v0)
    let v5 : string option = method39(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method48(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v76 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v77 
        let _run_target_args'_v76 = v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v79 
        let _run_target_args'_v76 = v80 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v81 : string = "Err($0)"
        let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v81 
        let _run_target_args'_v76 = v82 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v83 
        #endif
#if FABLE_COMPILER_PYTHON
        let v84 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v84 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v85 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v85 
        #endif
#else
        let v86 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v76 = v86 
        #endif
        let v87 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v76 
        v87
    else
        match v30 with
        | US5_0(v90) -> (* Some *)
            let v93 : string = ""
            let v94 : bool = v0 <> v93 
            if v94 then
                let v97 : uint8 = v2 + 1uy
                let v98 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v97
                let v99 : Result<std_path_PathBuf, std_io_Error> = v98 v90
                let v100 : (std_io_Error -> string) = method47()
                (* run_target_args'
                let v102 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
                let _run_target_args'_v102 = v104 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
                let _run_target_args'_v102 = v106 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v107 : string = "$0.map_err(|x| $1(x))"
                let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
                let _run_target_args'_v102 = v108 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v110 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v111 
                #endif
#else
                let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
                let _run_target_args'_v102 = v112 
                #endif
                let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
                let v116 : (std_path_PathBuf -> US15) = method49()
                let v117 : (string -> US15) = method50()
                let v119 : US15 = match v113 with Ok x -> v116 x | Error x -> v117 x
                match v119 with
                | US15_1(v287) -> (* Error *)
                    let v288 : string = $"file_system.read_link / "
                    let v289 : string = $"error': {v287} / error: {v34} / name: {v4}"
                    let v290 : string = v288 + v289 
                    (* run_target_args'
                    let v295 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v296 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v297 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v296 
                    let _run_target_args'_v295 = v297 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v298 
                    let _run_target_args'_v295 = v299 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v290 v300 
                    let _run_target_args'_v295 = v301 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v303 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v303 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v307 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v307 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v311 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v311 
                    #endif
#else
                    let v315 : std_io_Error = v290 |> unbox<std_io_Error>
                    let _run_target_args'_v295 = v315 
                    #endif
                    let v318 : std_io_Error = _run_target_args'_v295 
                    (* run_target_args'
                    let v328 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v329 : string = "Err($0)"
                    let v330 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v329 
                    let _run_target_args'_v328 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v331 : string = "Err($0)"
                    let v332 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v331 
                    let _run_target_args'_v328 = v332 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v333 : string = "Err($0)"
                    let v334 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v318 v333 
                    let _run_target_args'_v328 = v334 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v335 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v335 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v336 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v336 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v337 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v337 
                    #endif
#else
                    let v338 : Result<std_path_PathBuf, std_io_Error> = v318 |> Error
                    let _run_target_args'_v328 = v338 
                    #endif
                    let v339 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v328 
                    v339
                | US15_0(v122) -> (* Ok *)
                    (* run_target_args'
                    let v127 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _run_target_args'_v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _run_target_args'_v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "$0.display()"
                    let v133 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _run_target_args'_v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v135 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v135 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v139 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v139 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v143 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v143 
                    #endif
#else
                    let v147 : std_path_Display = v122 |> unbox<std_path_Display>
                    let _run_target_args'_v127 = v147 
                    #endif
                    let v150 : std_path_Display = _run_target_args'_v127 
                    let v160 : string = v150 |> string 
                    let v163 : string = method34(v160, v4)
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "&*$0"
                    let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _run_target_args'_v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "&*$0"
                    let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _run_target_args'_v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _run_target_args'_v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v184 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v184 
                    #endif
#else
                    let v188 : Ref<Str> = v163 |> unbox<Ref<Str>>
                    let _run_target_args'_v168 = v188 
                    #endif
                    let v191 : Ref<Str> = _run_target_args'_v168 
                    (* run_target_args'
                    let v204 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v205 : string = "String::from($0)"
                    let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v205 
                    let _run_target_args'_v204 = v206 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v207 : string = "String::from($0)"
                    let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v207 
                    let _run_target_args'_v204 = v208 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v209 : string = "String::from($0)"
                    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v191 v209 
                    let _run_target_args'_v204 = v210 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v212 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v212 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v216 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v216 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v220 
                    #endif
#else
                    let v224 : std_string_String = v191 |> unbox<std_string_String>
                    let _run_target_args'_v204 = v224 
                    #endif
                    let v227 : std_string_String = _run_target_args'_v204 
                    (* run_target_args'
                    let v240 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v241 : string = "std::path::PathBuf::from($0)"
                    let v242 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v241 
                    let _run_target_args'_v240 = v242 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v243 : string = "std::path::PathBuf::from($0)"
                    let v244 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v243 
                    let _run_target_args'_v240 = v244 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v245 : string = "std::path::PathBuf::from($0)"
                    let v246 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v227 v245 
                    let _run_target_args'_v240 = v246 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v248 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v252 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v256 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v256 
                    #endif
#else
                    let v260 : std_path_PathBuf = v227 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v240 = v260 
                    #endif
                    let v263 : std_path_PathBuf = _run_target_args'_v240 
                    (* run_target_args'
                    let v273 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v274 : string = "Ok($0)"
                    let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v274 
                    let _run_target_args'_v273 = v275 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v276 : string = "Ok($0)"
                    let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v276 
                    let _run_target_args'_v273 = v277 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v278 : string = "Ok($0)"
                    let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v263 v278 
                    let _run_target_args'_v273 = v279 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v280 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v280 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v281 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v281 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v282 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v282 
                    #endif
#else
                    let v283 : Result<std_path_PathBuf, std_io_Error> = v263 |> Ok
                    let _run_target_args'_v273 = v283 
                    #endif
                    let v284 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v273 
                    v284
            else
                let v344 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v345 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v346 : string = v344 + v345 
                (* run_target_args'
                let v351 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v352 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v353 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v352 
                let _run_target_args'_v351 = v353 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v354 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v355 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v354 
                let _run_target_args'_v351 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v356 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v357 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v346 v356 
                let _run_target_args'_v351 = v357 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v363 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v367 
                #endif
#else
                let v371 : std_io_Error = v346 |> unbox<std_io_Error>
                let _run_target_args'_v351 = v371 
                #endif
                let v374 : std_io_Error = _run_target_args'_v351 
                (* run_target_args'
                let v384 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v385 : string = "Err($0)"
                let v386 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v385 
                let _run_target_args'_v384 = v386 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v387 : string = "Err($0)"
                let v388 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v387 
                let _run_target_args'_v384 = v388 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v389 : string = "Err($0)"
                let v390 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v374 v389 
                let _run_target_args'_v384 = v390 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v391 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v391 
                #endif
#if FABLE_COMPILER_PYTHON
                let v392 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v392 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v393 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v393 
                #endif
#else
                let v394 : Result<std_path_PathBuf, std_io_Error> = v374 |> Error
                let _run_target_args'_v384 = v394 
                #endif
                let v395 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v384 
                v395
        | _ ->
            let v399 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v400 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v401 : string = v399 + v400 
            (* run_target_args'
            let v406 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v407 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v408 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v407 
            let _run_target_args'_v406 = v408 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v409 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v410 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v409 
            let _run_target_args'_v406 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v411 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v412 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v401 v411 
            let _run_target_args'_v406 = v412 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v414 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v414 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v422 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v422 
            #endif
#else
            let v426 : std_io_Error = v401 |> unbox<std_io_Error>
            let _run_target_args'_v406 = v426 
            #endif
            let v429 : std_io_Error = _run_target_args'_v406 
            (* run_target_args'
            let v439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v440 : string = "Err($0)"
            let v441 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v440 
            let _run_target_args'_v439 = v441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v442 : string = "Err($0)"
            let v443 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v442 
            let _run_target_args'_v439 = v443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v444 : string = "Err($0)"
            let v445 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v429 v444 
            let _run_target_args'_v439 = v445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v446 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v447 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v447 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v448 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v448 
            #endif
#else
            let v449 : Result<std_path_PathBuf, std_io_Error> = v429 |> Error
            let _run_target_args'_v439 = v449 
            #endif
            let v450 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v439 
            v450
and method56 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v44 : System.IO.FileAttributes = method57(v35)
    let v45 : System.IO.FileAttributes = method58()
    let v46 : bool = method59(v45, v44)
    if v46 then
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v77 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v51 = v77 
        #endif
        let v80 : System_IO_FileInfo = _run_target_args'_v51 
        (* run_target_args'
        let v93 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v95 : string = null |> unbox<string>
        let _run_target_args'_v93 = v95 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v99 : string = null |> unbox<string>
        let _run_target_args'_v93 = v99 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v103 : string = null |> unbox<string>
        let _run_target_args'_v93 = v103 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v107 : string = null |> unbox<string>
        let _run_target_args'_v93 = v107 
        #endif
#if FABLE_COMPILER_PYTHON
        let v111 : string = null |> unbox<string>
        let _run_target_args'_v93 = v111 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v115 : string = null |> unbox<string>
        let _run_target_args'_v93 = v115 
        #endif
#else
        let v118 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v119 : string = v118 v80
        let _run_target_args'_v93 = v119 
        #endif
        let v120 : string = _run_target_args'_v93 
        let v130 : std_path_PathBuf = v120 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "Ok($0)"
        let v136 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "Ok($0)"
        let v138 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "Ok($0)"
        let v140 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v130 v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<std_path_PathBuf, std_io_Error> = v130 |> Ok
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v134 
        v145
    else
        let v148 : string = $"file_system.read_link / Fsharp / "
        let v149 : string = $"The file or directory is not a reparse point. / "
        let v150 : string = v148 + v149 
        let v151 : string = $"path: {v0} / result: {v46} / path': {v0} / n: {v1}"
        let v152 : string = v150 + v151 
        (* run_target_args'
        let v157 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v159 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v158 
        let _run_target_args'_v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v161 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v160 
        let _run_target_args'_v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v163 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v152 v162 
        let _run_target_args'_v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v169 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v169 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v173 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v173 
        #endif
#else
        let v177 : std_io_Error = v152 |> unbox<std_io_Error>
        let _run_target_args'_v157 = v177 
        #endif
        let v180 : std_io_Error = _run_target_args'_v157 
        let v189 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method62(v0, v189, v1, v180)
and method45 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method37(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method46(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method37(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method46(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method37(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method46(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method56(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US16 =
    US16_0(v0)
and method63 () : (std_path_PathBuf -> US16) =
    closure25()
and method65 (v0 : string) : string =
    v0
and method66 () : string =
    let v0 : string = ""
    v0
and method64 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method65(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method66()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method66()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method66()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method66()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method66()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method44 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method45(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US16) = method63()
        let v22 : US16 option = v16 |> Option.map v21 
        let v42 : US16 = US16_1
        let v43 : US16 = v22 |> Option.defaultValue v42 
        let v89 : string =
            match v43 with
            | US16_1 -> (* None *)
                v0
            | US16_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v85 : string = v75 |> string 
                v85
        let v90 : bool = v89 = ""
        let v91 : string =
            if v90 then
                v0
            else
                v89
        let v92 : string = "^\\\\\\\\\\?\\\\"
        let v93 : string = ""
        let v94 : string = method64(v92, v93, v91)
        let v95 : int32 = v94.Length
        let v96 : bool = v95 < 2
        if v96 then
            v0
        else
            let v97 : string = $"{v94.[0] |> string |> _.ToLower()}{v94.[1..]}"
            let v98 : string = "\\"
            let v99 : string = "/"
            let v100 : string = v97.Replace (v98, v99)
            v100
and method33 (v0 : string) : US5 =
    let v1 : US13 = US13_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method34(v2, v3)
    let v5 : US14 = method35(v1, v4, v0)
    match v5 with
    | US14_1(v9) -> (* Error *)
        let v321 : unit = ()
        let v322 : (unit -> unit) = closure17(v0, v9)
        let v323 : unit = (fun () -> v322 (); v321) ()
        US5_1
    | US14_0(v6) -> (* Ok *)
        let v7 : string = method44(v6)
        US5_0(v7)
and method69 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method70 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method68 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.exists()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : bool = v115 = false
    let v315 : string =
        if v116 then
            let v117 : string = method32()
            let v118 : string = method34(v117, v0)
            let v119 : string = method44(v118)
            let v130 : string = "/"
            let v131 : (string []) = v119.Split v130 
            let v134 : (string []) = [||]
            let v135 : int32 = v131.Length
            let v136 : Mut6 = {l0 = 0; l1 = 0; l2 = v134} : Mut6
            while method69(v135, v136) do
                let v138 : int32 = v136.l0
                let v139 : int32 =  -v138
                let v140 : int32 = v139 + v135
                let v141 : int32 = v140 - 1
                let struct (v142 : int32, v143 : (string [])) = v136.l1, v136.l2
                let v144 : string = v131.[int v141]
                let v145 : bool = ".." = v144
                let struct (v191 : int32, v192 : (string [])) =
                    if v145 then
                        let v146 : int32 = v142 + 1
                        struct (v146, v143)
                    else
                        let v147 : bool = "." = v144
                        if v147 then
                            struct (v142, v143)
                        else
                            let v148 : bool = 0 = v142
                            if v148 then
                                let v151 : string = ":"
                                let v152 : bool = v144.EndsWith (v151, false, null)
                                if v152 then
                                    let v155 : string = $"{v117.[0]}:"
                                    let v156 : (string []) = [|v155|]
                                    let v157 : int32 = v156.Length
                                    let v158 : int32 = v143.Length
                                    let v159 : int32 = v157 + v158
                                    let v160 : (string []) = Array.zeroCreate<string> (v159)
                                    let v161 : Mut5 = {l0 = 0} : Mut5
                                    while method30(v159, v161) do
                                        let v163 : int32 = v161.l0
                                        let v164 : bool = v163 < v157
                                        let v168 : string =
                                            if v164 then
                                                let v165 : string = v156.[int v163]
                                                v165
                                            else
                                                let v166 : int32 = v163 - v157
                                                let v167 : string = v143.[int v166]
                                                v167
                                        v160.[int v163] <- v168
                                        let v169 : int32 = v163 + 1
                                        v161.l0 <- v169
                                        ()
                                    struct (0, v160)
                                else
                                    let v170 : (string []) = [|v144|]
                                    let v171 : int32 = v170.Length
                                    let v172 : int32 = v143.Length
                                    let v173 : int32 = v171 + v172
                                    let v174 : (string []) = Array.zeroCreate<string> (v173)
                                    let v175 : Mut5 = {l0 = 0} : Mut5
                                    while method30(v173, v175) do
                                        let v177 : int32 = v175.l0
                                        let v178 : bool = v177 < v171
                                        let v182 : string =
                                            if v178 then
                                                let v179 : string = v170.[int v177]
                                                v179
                                            else
                                                let v180 : int32 = v177 - v171
                                                let v181 : string = v143.[int v180]
                                                v181
                                        v174.[int v177] <- v182
                                        let v183 : int32 = v177 + 1
                                        v175.l0 <- v183
                                        ()
                                    struct (0, v174)
                            else
                                let v186 : int32 = v142 - 1
                                struct (v186, v143)
                let v193 : int32 = v138 + 1
                v136.l0 <- v193
                v136.l1 <- v191
                v136.l2 <- v192
                ()
            let struct (v194 : int32, v195 : (string [])) = v136.l1, v136.l2
            let v200 : unit = ()
            let _let'_v200 =
                seq {
                    for i = 0 to v195.Length - 1 do yield v195.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v203 : string seq = _let'_v200 
            let v209 : char = method70()
            let v211 : (char -> string) = _.ToString()
            let v212 : string = v211 v209
            let v216 : bool = v212 = "\n"
            let v218 : string =
                if v216 then
                    method29(v212)
                else
                    v212
            let v219 : (string -> (string seq -> string)) = String.concat
            let v220 : (string seq -> string) = v219 v218
            v220 v203
        else
            let v224 : string = "std::fs::canonicalize(&*$0)"
            let v225 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v224 
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "$0.unwrap()"
            let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "$0.unwrap()"
            let v231 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "$0.unwrap()"
            let v233 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v225 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v236 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v236 
            #endif
#else
            let v237 : std_path_PathBuf = match v225 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v227 = v237 
            #endif
            let v238 : std_path_PathBuf = _run_target_args'_v227 
            (* run_target_args'
            let v245 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v246 : string = "$0.display()"
            let v247 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v246 
            let _run_target_args'_v245 = v247 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v248 : string = "$0.display()"
            let v249 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v248 
            let _run_target_args'_v245 = v249 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v250 : string = "$0.display()"
            let v251 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v238 v250 
            let _run_target_args'_v245 = v251 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v253 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v253 
            #endif
#if FABLE_COMPILER_PYTHON
            let v257 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v257 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v261 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v261 
            #endif
#else
            let v265 : std_path_Display = v238 |> unbox<std_path_Display>
            let _run_target_args'_v245 = v265 
            #endif
            let v268 : std_path_Display = _run_target_args'_v245 
            (* run_target_args'
            let v281 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v282 : string = "format!(\"{}\", $0)"
            let v283 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v282 
            let _run_target_args'_v281 = v283 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v284 : string = "format!(\"{}\", $0)"
            let v285 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v284 
            let _run_target_args'_v281 = v285 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v286 : string = "format!(\"{}\", $0)"
            let v287 : std_string_String = Fable.Core.RustInterop.emitRustExpr v268 v286 
            let _run_target_args'_v281 = v287 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v289 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v289 
            #endif
#if FABLE_COMPILER_PYTHON
            let v293 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v293 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v297 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v297 
            #endif
#else
            let v301 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v281 = v301 
            #endif
            let v304 : std_string_String = _run_target_args'_v281 
            let v313 : string = "fable_library_rust::String_::fromString($0)"
            let v314 : string = Fable.Core.RustInterop.emitRustExpr v304 v313 
            v314
    let _run_target_args'_v5 = v315 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = null |> unbox<string>
    let _run_target_args'_v5 = v317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = null |> unbox<string>
    let _run_target_args'_v5 = v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v325 : string = null |> unbox<string>
    let _run_target_args'_v5 = v325 
    #endif
#if FABLE_COMPILER_PYTHON
    let v329 : string = null |> unbox<string>
    let _run_target_args'_v5 = v329 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v333 : string = null |> unbox<string>
    let _run_target_args'_v5 = v333 
    #endif
#else
    let v336 : (string -> string) = System.IO.Path.GetFullPath
    let v337 : string = v336 v0
    let _run_target_args'_v5 = v337 
    #endif
    let v338 : string = _run_target_args'_v5 
    v338
and method67 (v0 : string) : string =
    let v1 : string = method68(v0)
    method44(v1)
and method71 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method72 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method73 () : string =
    let v0 : string = "\n"
    v0
and method75 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method36(v0)
    let v8 : bool = v7 = false
    let v119 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v68 : Vec<uint8> = method25(v59)
            let v69 : string = "std::string::String::from_utf8($0)"
            let v70 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v68 v69 
            (* run_target_args'
            let v72 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v73 : string = "$0.unwrap()"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v73 
            let _run_target_args'_v72 = v74 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v75 : string = "$0.unwrap()"
            let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v75 
            let _run_target_args'_v72 = v76 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v70 v77 
            let _run_target_args'_v72 = v78 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v79 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v80 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v81 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v81 
            #endif
#else
            let v82 : std_string_String = match v70 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v72 = v82 
            #endif
            let v83 : std_string_String = _run_target_args'_v72 
            let v86 : string = "fable_library_rust::String_::fromString($0)"
            let v87 : string = Fable.Core.RustInterop.emitRustExpr v83 v86 
            let _run_target_args'_v13 = v87 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v89 : string = null |> unbox<string>
            let _run_target_args'_v13 = v89 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v93 : string = null |> unbox<string>
            let _run_target_args'_v13 = v93 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v97 : string = null |> unbox<string>
            let _run_target_args'_v13 = v97 
            #endif
#if FABLE_COMPILER_PYTHON
            let v101 : string = null |> unbox<string>
            let _run_target_args'_v13 = v101 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            let _run_target_args'_v13 = v105 
            #endif
#else
            let v108 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v108 
            #endif
            let v109 : string = _run_target_args'_v13 
            let v118 : bool = v1 = v109
            v118
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v121 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v137 
    #endif
#else
    let v141 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v141 
    #endif
    let v144 : bool = _run_target_args'_v6 
    v144
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method77 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US17 =
    US17_0
and method78 () : (unit -> US17) =
    closure27()
and closure28 () (v0 : std_string_String) : US17 =
    US17_1(v0)
and method79 () : (std_string_String -> US17) =
    closure28()
and method80 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_red"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_red"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_red"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[91m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[91m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[91m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[91m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method82 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "error"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    (* run_target_args'
    let v137 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v138 : string = "format!(\"{:#?}\", $0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v138 
    let v140 : string = "fable_library_rust::String_::fromString($0)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr v139 v140 
    let _run_target_args'_v137 = v141 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v142 : string = "format!(\"{:#?}\", $0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v142 
    let v144 : string = "fable_library_rust::String_::fromString($0)"
    let v145 : string = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let _run_target_args'_v137 = v145 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v146 : string = "format!(\"{:#?}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v146 
    let v148 : string = "fable_library_rust::String_::fromString($0)"
    let v149 : string = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let _run_target_args'_v137 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string = $"%A{v1}"
    let _run_target_args'_v137 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : string = $"%A{v1}"
    let _run_target_args'_v137 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : string = $"%A{v1}"
    let _run_target_args'_v137 = v159 
    #endif
#else
    let v163 : string = $"%A{v1}"
    let _run_target_args'_v137 = v163 
    #endif
    let v166 : string = _run_target_args'_v137 
    let v176 : string = $"{v166}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v3, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v194 : string = " }"
    let v195 : string = $"{v194}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v3, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v211 : string = v3.l0
    v211
and method81 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method82(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.create_dir"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method81(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method83 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method12(v7)
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "inline_colorization::color_bright_black"
    let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v26 
    (* run_target_args'
    let v32 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v33 : string = "&*$0"
    let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v33 
    let _run_target_args'_v32 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "&*$0"
    let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v35 
    let _run_target_args'_v32 = v36 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v37 
    let _run_target_args'_v32 = v38 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v48 
    #endif
#else
    let v52 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v32 = v52 
    #endif
    let v55 : Ref<Str> = _run_target_args'_v32 
    let v64 : string = "inline_colorization::color_reset"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v27, v55, v65) v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v25 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "inline_colorization::color_bright_black"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v70 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "&*$0"
    let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : Ref<Str> = _run_target_args'_v76 
    let v108 : string = "inline_colorization::color_reset"
    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v71, v99, v109) v110 
    let v112 : string = "fable_library_rust::String_::fromString($0)"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let _run_target_args'_v25 = v113 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v114 : string = "inline_colorization::color_bright_black"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v114 
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "&*$0"
    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v121 
    let _run_target_args'_v120 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v123 : string = "&*$0"
    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v125 
    let _run_target_args'_v120 = v126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v128 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_PYTHON
    let v132 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v132 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v136 
    #endif
#else
    let v140 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v120 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v120 
    let v152 : string = "inline_colorization::color_reset"
    let v153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v152 
    let v154 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v143, v153) v154 
    let v156 : string = "fable_library_rust::String_::fromString($0)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr v155 v156 
    let _run_target_args'_v25 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : string = "\u001b[90m"
    let v163 : string = method14()
    let v167 : string = v159 + v8 
    let v171 : string = v167 + v163 
    let _run_target_args'_v25 = v171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string = "\u001b[90m"
    let v179 : string = method14()
    let v183 : string = v175 + v8 
    let v187 : string = v183 + v179 
    let _run_target_args'_v25 = v187 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v191 : string = "\u001b[90m"
    let v195 : string = method14()
    let v199 : string = v191 + v8 
    let v203 : string = v199 + v195 
    let _run_target_args'_v25 = v203 
    #endif
#else
    let v207 : string = "\u001b[90m"
    let v211 : string = method14()
    let v215 : string = v207 + v8 
    let v219 : string = v215 + v211 
    let _run_target_args'_v25 = v219 
    #endif
    let v222 : string = _run_target_args'_v25 
    v222
and method85 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "dir"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method84 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method85(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.create_dir"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure30 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : string = method84(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method87 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method37(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method87(v1, v0)
and method86 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method88 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method89 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method91 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "dir"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "result"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method90 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method91(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.create_dir"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure32 (v0 : string, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : string = method90(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method97 (v0 : string, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "ex"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "path"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"{v1}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v3, v134)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v152 : string = " }"
    let v153 : string = $"{v152}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v3, v153)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v169 : string = v3.l0
    v169
and method96 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method97(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "file_system.delete_directory_async"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v339 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            (* run_target_args'
            let v129 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v131 : string = $"%A{v1}"
            let _run_target_args'_v129 = v131 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v135 : string = $"%A{v1}"
            let _run_target_args'_v129 = v135 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v139 : string = $"%A{v1}"
            let _run_target_args'_v129 = v139 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v143 : string = $"%A{v1}"
            let _run_target_args'_v129 = v143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v147 : string = $"%A{v1}"
            let _run_target_args'_v129 = v147 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v151 : string = $"%A{v1}"
            let _run_target_args'_v129 = v151 
            #endif
#else
            let v154 : string = $"{v1.GetType ()}: {v1.Message}"
            let _run_target_args'_v129 = v154 
            #endif
            let v155 : string = _run_target_args'_v129 
            let v164 : string = method53(v0)
            let v165 : string = method96(v105, v106, v107, v108, v109, v110, v123, v124, v155, v164)
            let v180 : unit = ()
            let v181 : unit = (fun () -> v17 (); v180) ()
            let struct (v204 : Mut0, v205 : Mut1, v206 : Mut2, v207 : Mut3, v208 : Mut4, v209 : int64 option) = TraceState.trace_state.Value
            let v224 : unit = ()
            let v225 : (unit -> unit) = closure8(v204)
            let v226 : unit = (fun () -> v225 (); v224) ()
            let v229 : (string -> unit) = closure9()
            (* run_target_args'
            let v230 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v231 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v165 v231 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v232 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v165 v232 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v233 : string = v207.l0
            let v234 : bool = v233 = ""
            let v249 : string =
                if v234 then
                    v165
                else
                    let v235 : bool = v165 = ""
                    if v235 then
                        let v236 : string = v207.l0
                        v236
                    else
                        let v237 : string = v207.l0
                        let v240 : string = "\n"
                        let v241 : string = v237 + v240 
                        let v245 : string = v241 + v165 
                        v245
            (* run_target_args'
            let v254 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v255 : string = "&*$0"
            let v256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v255 
            let _run_target_args'_v254 = v256 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v257 : string = "&*$0"
            let v258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v257 
            let _run_target_args'_v254 = v258 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v259 : string = "&*$0"
            let v260 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v249 v259 
            let _run_target_args'_v254 = v260 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v262 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v262 
            #endif
#if FABLE_COMPILER_PYTHON
            let v266 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v266 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v270 
            #endif
#else
            let v274 : Ref<Str> = v249 |> unbox<Ref<Str>>
            let _run_target_args'_v254 = v274 
            #endif
            let v277 : Ref<Str> = _run_target_args'_v254 
            let v286 : string = $"$0.chars()"
            let v287 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v277 v286 
            let v288 : string = "$0"
            let v289 : _ = Fable.Core.RustInterop.emitRustExpr v287 v288 
            let v290 : string = "$0.collect::<Vec<_>>()"
            let v291 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v289 v290 
            let v292 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v293 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v291 v292 
            let v294 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
            let v296 : string = "x"
            let v297 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v296 
            let v298 : string = "String::from_iter($0)"
            let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr v297 v298 
            let v300 : string = "true; $0 }).collect::<Vec<_>>()"
            let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
            let v302 : string = "_vec_map"
            let v303 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v302 
            let v304 : string = "$0.len()"
            let v305 : unativeint = Fable.Core.RustInterop.emitRustExpr v303 v304 
            let v311 : int32 = v305 |> int32 
            let v321 : string = ""
            let v322 : bool = v165 <> v321 
            let v326 : bool =
                if v322 then
                    let v325 : bool = v311 <= 1
                    v325
                else
                    false
            if v326 then
                v207.l0 <- v249
                ()
            else
                v207.l0 <- v321
                let v327 : string = "true; $0.into_iter().for_each(|x| { //"
                let v328 : bool = Fable.Core.RustInterop.emitRustExpr v303 v327 
                let v329 : string = "x"
                let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v329 
                let v331 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v332 : bool = Fable.Core.RustInterop.emitRustExpr v330 v331 
                let v333 : string = $"true"
                let v334 : bool = Fable.Core.RustInterop.emitRustExpr () v333 
                let v335 : string = "true; }); //"
                let v336 : bool = Fable.Core.RustInterop.emitRustExpr () v335 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v229 v165
            #endif
#if FABLE_COMPILER_PYTHON
            v229 v165
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v229 v165
            #endif
#else
            v229 v165
            #endif
            // run_target_args' is_unit
            let v337 : (string -> unit) = v205.l0
            v337 v165
            US6_0(v204, v205, v206, v207, v208, v209)
    
    ()
and method95 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v28819 : bool = true
                method87(v28819, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v29553 : exn = ex
                let v29554 : int64 = v1 % 100L
                let v29555 : bool = v29554 = 0L
                if v29555 then
                    let v29907 : unit = ()
                    let v29908 : (unit -> unit) = closure34(v0, v29553)
                    let v29909 : unit = (fun () -> v29908 (); v29907) ()
                    ()
                (* run_target_args'
                let v30268 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30269 : (int32 -> Async<unit>) = Async.Sleep
                let v30270 : Async<unit> = v30269 10
                let _run_target_args'_v30268 = v30270 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30271 : (int32 -> Async<unit>) = Async.Sleep
                let v30272 : Async<unit> = v30271 10
                let _run_target_args'_v30268 = v30272 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30273 : (int32 -> Async<unit>) = Async.Sleep
                let v30274 : Async<unit> = v30273 10
                let _run_target_args'_v30268 = v30274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30275 : (int32 -> Async<unit>) = Async.Sleep
                let v30276 : Async<unit> = v30275 10
                let _run_target_args'_v30268 = v30276 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30277 : (int32 -> Async<unit>) = Async.Sleep
                let v30278 : Async<unit> = v30277 10
                let _run_target_args'_v30268 = v30278 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30279 : (int32 -> Async<unit>) = Async.Sleep
                let v30280 : Async<unit> = v30279 10
                let _run_target_args'_v30268 = v30280 
                #endif
#else
                let v30281 : (int32 -> Async<unit>) = Async.Sleep
                let v30282 : Async<unit> = v30281 10
                let _run_target_args'_v30268 = v30282 
                #endif
                let v30283 : Async<unit> = _run_target_args'_v30268 
                do! v30283 
                let v30289 : int64 = v1 + 1L
                let v30290 : Async<int64> = method94(v0, v30289)
                return! v30290 
                (* indent
                ()
            indent *)
            (* try_unit
            let v31030 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v59828 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v59828 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59830 : unit = ()
    let _let'_v59830 =
        async {
            try
                let v88629 : bool = true
                method87(v88629, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v89363 : exn = ex
                let v89364 : int64 = v1 % 100L
                let v89365 : bool = v89364 = 0L
                if v89365 then
                    let v89717 : unit = ()
                    let v89718 : (unit -> unit) = closure34(v0, v89363)
                    let v89719 : unit = (fun () -> v89718 (); v89717) ()
                    ()
                (* run_target_args'
                let v90078 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90079 : (int32 -> Async<unit>) = Async.Sleep
                let v90080 : Async<unit> = v90079 10
                let _run_target_args'_v90078 = v90080 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v90081 : (int32 -> Async<unit>) = Async.Sleep
                let v90082 : Async<unit> = v90081 10
                let _run_target_args'_v90078 = v90082 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v90083 : (int32 -> Async<unit>) = Async.Sleep
                let v90084 : Async<unit> = v90083 10
                let _run_target_args'_v90078 = v90084 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v90085 : (int32 -> Async<unit>) = Async.Sleep
                let v90086 : Async<unit> = v90085 10
                let _run_target_args'_v90078 = v90086 
                #endif
#if FABLE_COMPILER_PYTHON
                let v90087 : (int32 -> Async<unit>) = Async.Sleep
                let v90088 : Async<unit> = v90087 10
                let _run_target_args'_v90078 = v90088 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v90089 : (int32 -> Async<unit>) = Async.Sleep
                let v90090 : Async<unit> = v90089 10
                let _run_target_args'_v90078 = v90090 
                #endif
#else
                let v90091 : (int32 -> Async<unit>) = Async.Sleep
                let v90092 : Async<unit> = v90091 10
                let _run_target_args'_v90078 = v90092 
                #endif
                let v90093 : Async<unit> = _run_target_args'_v90078 
                do! v90093 
                let v90099 : int64 = v1 + 1L
                let v90100 : Async<int64> = method94(v0, v90099)
                return! v90100 
                (* indent
                ()
            indent *)
            (* try_unit
            let v90840 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v119638 : Async<int64> = _let'_v59830 
    let _run_target_args'_v6 = v119638 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v119640 : unit = ()
    let _let'_v119640 =
        async {
            try
                let v148439 : bool = true
                method87(v148439, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v149173 : exn = ex
                let v149174 : int64 = v1 % 100L
                let v149175 : bool = v149174 = 0L
                if v149175 then
                    let v149527 : unit = ()
                    let v149528 : (unit -> unit) = closure34(v0, v149173)
                    let v149529 : unit = (fun () -> v149528 (); v149527) ()
                    ()
                (* run_target_args'
                let v149888 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v149889 : (int32 -> Async<unit>) = Async.Sleep
                let v149890 : Async<unit> = v149889 10
                let _run_target_args'_v149888 = v149890 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v149891 : (int32 -> Async<unit>) = Async.Sleep
                let v149892 : Async<unit> = v149891 10
                let _run_target_args'_v149888 = v149892 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v149893 : (int32 -> Async<unit>) = Async.Sleep
                let v149894 : Async<unit> = v149893 10
                let _run_target_args'_v149888 = v149894 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v149895 : (int32 -> Async<unit>) = Async.Sleep
                let v149896 : Async<unit> = v149895 10
                let _run_target_args'_v149888 = v149896 
                #endif
#if FABLE_COMPILER_PYTHON
                let v149897 : (int32 -> Async<unit>) = Async.Sleep
                let v149898 : Async<unit> = v149897 10
                let _run_target_args'_v149888 = v149898 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v149899 : (int32 -> Async<unit>) = Async.Sleep
                let v149900 : Async<unit> = v149899 10
                let _run_target_args'_v149888 = v149900 
                #endif
#else
                let v149901 : (int32 -> Async<unit>) = Async.Sleep
                let v149902 : Async<unit> = v149901 10
                let _run_target_args'_v149888 = v149902 
                #endif
                let v149903 : Async<unit> = _run_target_args'_v149888 
                do! v149903 
                let v149909 : int64 = v1 + 1L
                let v149910 : Async<int64> = method94(v0, v149909)
                return! v149910 
                (* indent
                ()
            indent *)
            (* try_unit
            let v150650 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v179448 : Async<int64> = _let'_v119640 
    let _run_target_args'_v6 = v179448 
    #endif
#else
    let v179450 : unit = ()
    let _let'_v179450 =
        async {
            try
                let v208249 : bool = true
                method87(v208249, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v208983 : exn = ex
                let v208984 : int64 = v1 % 100L
                let v208985 : bool = v208984 = 0L
                if v208985 then
                    let v209337 : unit = ()
                    let v209338 : (unit -> unit) = closure34(v0, v208983)
                    let v209339 : unit = (fun () -> v209338 (); v209337) ()
                    ()
                (* run_target_args'
                let v209698 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v209699 : (int32 -> Async<unit>) = Async.Sleep
                let v209700 : Async<unit> = v209699 10
                let _run_target_args'_v209698 = v209700 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v209701 : (int32 -> Async<unit>) = Async.Sleep
                let v209702 : Async<unit> = v209701 10
                let _run_target_args'_v209698 = v209702 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v209703 : (int32 -> Async<unit>) = Async.Sleep
                let v209704 : Async<unit> = v209703 10
                let _run_target_args'_v209698 = v209704 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v209705 : (int32 -> Async<unit>) = Async.Sleep
                let v209706 : Async<unit> = v209705 10
                let _run_target_args'_v209698 = v209706 
                #endif
#if FABLE_COMPILER_PYTHON
                let v209707 : (int32 -> Async<unit>) = Async.Sleep
                let v209708 : Async<unit> = v209707 10
                let _run_target_args'_v209698 = v209708 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v209709 : (int32 -> Async<unit>) = Async.Sleep
                let v209710 : Async<unit> = v209709 10
                let _run_target_args'_v209698 = v209710 
                #endif
#else
                let v209711 : (int32 -> Async<unit>) = Async.Sleep
                let v209712 : Async<unit> = v209711 10
                let _run_target_args'_v209698 = v209712 
                #endif
                let v209713 : Async<unit> = _run_target_args'_v209698 
                do! v209713 
                let v209719 : int64 = v1 + 1L
                let v209720 : Async<int64> = method94(v0, v209719)
                return! v209720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v210460 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v239258 : Async<int64> = _let'_v179450 
    let _run_target_args'_v6 = v239258 
    #endif
    let v239259 : Async<int64> = _run_target_args'_v6 
    v239259
and method94 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method95(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method93 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method94(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method93(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : (Async<unit> -> unit) = Async.RunSynchronously
    v37 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : (Async<unit> -> unit) = Async.RunSynchronously
    v38 v27
    #endif
#else
    let v39 : (Async<unit> -> unit) = Async.RunSynchronously
    v39 v27
    #endif
    // run_target_args' is_unit
    ()
and method92 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method98 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method76 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v736 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v737 : string = "std::fs::create_dir_all(&*$0)"
    let v738 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v737 
    let v739 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v741 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v742 : string = "$0.map_err(|x| $1(x))"
    let v743 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v742 
    let _run_target_args'_v741 = v743 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v744 : string = "$0.map_err(|x| $1(x))"
    let v745 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v744 
    let _run_target_args'_v741 = v745 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v746 : string = "$0.map_err(|x| $1(x))"
    let v747 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v738, v739) v746 
    let _run_target_args'_v741 = v747 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v748 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v748 
    #endif
#if FABLE_COMPILER_PYTHON
    let v749 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v749 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v750 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v750 
    #endif
#else
    let v751 : Result<unit, std_string_String> = match v738 with Ok x -> Ok x | Error x -> Error (v739 x)
    let _run_target_args'_v741 = v751 
    #endif
    let v752 : Result<unit, std_string_String> = _run_target_args'_v741 
    let v755 : (unit -> US17) = method78()
    let v756 : (std_string_String -> US17) = method79()
    let v758 : US17 = match v752 with Ok () -> v755 () | Error x -> v756 x
    match v758 with
    | US17_1(v1389) -> (* Error *)
        let v1701 : unit = ()
        let v1702 : (unit -> unit) = closure29(v0, v1389)
        let v1703 : unit = (fun () -> v1702 (); v1701) ()
        ()
    | US17_0 -> (* Ok *)
        let v1072 : unit = ()
        let v1073 : (unit -> unit) = closure30(v0)
        let v1074 : unit = (fun () -> v1073 (); v1072) ()
        ()
    (* run_target_args'
    let v2022 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2023 : (unit -> unit) = method86(v0)
    let v2024 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2023 "$0()" )
    let _run_target_args'_v2022 = v2024 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2025 : (unit -> unit) = method86(v0)
    let v2026 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2025 "$0()" )
    let _run_target_args'_v2022 = v2026 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2027 : (unit -> unit) = method86(v0)
    let v2028 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2027 "$0()" )
    let _run_target_args'_v2022 = v2028 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2029 : (unit -> unit) = method88(v0)
    let v2030 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2029 () }
    let _run_target_args'_v2022 = v2030 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2031 : (unit -> unit) = method88(v0)
    let v2032 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2031 () }
    let _run_target_args'_v2022 = v2032 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2033 : (unit -> unit) = method88(v0)
    let v2034 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2033 () }
    let _run_target_args'_v2022 = v2034 
    #endif
#else
    let v2035 : (unit -> unit) = method88(v0)
    let v2036 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2035 () }
    let _run_target_args'_v2022 = v2036 
    #endif
    let v2037 : System.IDisposable = _run_target_args'_v2022 
    let _run_target_args'_v736 = v2037 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2045 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v736 = v2045 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2049 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v736 = v2049 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2052 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v2057 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2059 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2059 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2063 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2063 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2067 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2067 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2071 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2071 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2075 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2075 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2079 : bool = null |> unbox<bool>
    let _run_target_args'_v2057 = v2079 
    #endif
#else
    let v2082 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v2083 : bool = v2082 v2052
    let _run_target_args'_v2057 = v2083 
    #endif
    let v2084 : bool = _run_target_args'_v2057 
    let v2093 : bool = v2084 = false
    if v2093 then
        (* run_target_args'
        let v2098 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2100 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2100 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2104 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2104 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2108 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2108 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2112 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2112 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2116 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2116 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v2120 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2098 = v2120 
        #endif
#else
        let v2123 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v2124 : System.DateTime = v2123 v2052
        let _run_target_args'_v2098 = v2124 
        #endif
        let v2125 : System.DateTime = _run_target_args'_v2098 
        let v2134 : _ = {| Exists = v2084; CreationTime = v2125 |}
        let v2136 : string = $"%A{v2134}"
        let v2450 : unit = ()
        let v2451 : (unit -> unit) = closure32(v0, v2136)
        let v2452 : unit = (fun () -> v2451 (); v2450) ()
        ()
    (* run_target_args'
    let v2771 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2772 : (unit -> unit) = method92(v0)
    let v2773 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2772 "$0()" )
    let _run_target_args'_v2771 = v2773 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2774 : (unit -> unit) = method92(v0)
    let v2775 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2774 "$0()" )
    let _run_target_args'_v2771 = v2775 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2776 : (unit -> unit) = method92(v0)
    let v2777 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2776 "$0()" )
    let _run_target_args'_v2771 = v2777 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2778 : (unit -> unit) = method98(v0)
    let v2779 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2778 () }
    let _run_target_args'_v2771 = v2779 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2780 : (unit -> unit) = method98(v0)
    let v2781 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2780 () }
    let _run_target_args'_v2771 = v2781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2782 : (unit -> unit) = method98(v0)
    let v2783 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2782 () }
    let _run_target_args'_v2771 = v2783 
    #endif
#else
    let v2784 : (unit -> unit) = method98(v0)
    let v2785 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2784 () }
    let _run_target_args'_v2771 = v2785 
    #endif
    let v2786 : System.IDisposable = _run_target_args'_v2771 
    let _run_target_args'_v736 = v2786 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2793 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v2798 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2800 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2800 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2804 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2804 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2808 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2808 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2812 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2812 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2816 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2816 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2820 : bool = null |> unbox<bool>
    let _run_target_args'_v2798 = v2820 
    #endif
#else
    let v2823 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v2824 : bool = v2823 v2793
    let _run_target_args'_v2798 = v2824 
    #endif
    let v2825 : bool = _run_target_args'_v2798 
    let v2834 : bool = v2825 = false
    if v2834 then
        (* run_target_args'
        let v2839 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2841 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2841 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2845 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2845 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2849 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2849 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2853 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2853 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2857 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2857 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v2861 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v2839 = v2861 
        #endif
#else
        let v2864 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v2865 : System.DateTime = v2864 v2793
        let _run_target_args'_v2839 = v2865 
        #endif
        let v2866 : System.DateTime = _run_target_args'_v2839 
        let v2875 : _ = {| Exists = v2825; CreationTime = v2866 |}
        let v2877 : string = $"%A{v2875}"
        let v3191 : unit = ()
        let v3192 : (unit -> unit) = closure32(v0, v2877)
        let v3193 : unit = (fun () -> v3192 (); v3191) ()
        ()
    (* run_target_args'
    let v3512 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3513 : (unit -> unit) = method92(v0)
    let v3514 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3513 "$0()" )
    let _run_target_args'_v3512 = v3514 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3515 : (unit -> unit) = method92(v0)
    let v3516 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3515 "$0()" )
    let _run_target_args'_v3512 = v3516 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3517 : (unit -> unit) = method92(v0)
    let v3518 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3517 "$0()" )
    let _run_target_args'_v3512 = v3518 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3519 : (unit -> unit) = method98(v0)
    let v3520 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3519 () }
    let _run_target_args'_v3512 = v3520 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3521 : (unit -> unit) = method98(v0)
    let v3522 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3521 () }
    let _run_target_args'_v3512 = v3522 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3523 : (unit -> unit) = method98(v0)
    let v3524 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3523 () }
    let _run_target_args'_v3512 = v3524 
    #endif
#else
    let v3525 : (unit -> unit) = method98(v0)
    let v3526 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3525 () }
    let _run_target_args'_v3512 = v3526 
    #endif
    let v3527 : System.IDisposable = _run_target_args'_v3512 
    let _run_target_args'_v736 = v3527 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3534 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v3539 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3541 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3541 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3545 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3545 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3549 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3549 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3553 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3557 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3557 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3561 : bool = null |> unbox<bool>
    let _run_target_args'_v3539 = v3561 
    #endif
#else
    let v3564 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v3565 : bool = v3564 v3534
    let _run_target_args'_v3539 = v3565 
    #endif
    let v3566 : bool = _run_target_args'_v3539 
    let v3575 : bool = v3566 = false
    if v3575 then
        (* run_target_args'
        let v3580 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3582 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3582 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3586 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3586 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3590 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3590 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3594 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3594 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3598 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3598 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v3602 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v3580 = v3602 
        #endif
#else
        let v3605 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v3606 : System.DateTime = v3605 v3534
        let _run_target_args'_v3580 = v3606 
        #endif
        let v3607 : System.DateTime = _run_target_args'_v3580 
        let v3616 : _ = {| Exists = v3566; CreationTime = v3607 |}
        let v3618 : string = $"%A{v3616}"
        let v3932 : unit = ()
        let v3933 : (unit -> unit) = closure32(v0, v3618)
        let v3934 : unit = (fun () -> v3933 (); v3932) ()
        ()
    (* run_target_args'
    let v4253 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4254 : (unit -> unit) = method92(v0)
    let v4255 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4254 "$0()" )
    let _run_target_args'_v4253 = v4255 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4256 : (unit -> unit) = method92(v0)
    let v4257 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4256 "$0()" )
    let _run_target_args'_v4253 = v4257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4258 : (unit -> unit) = method92(v0)
    let v4259 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4258 "$0()" )
    let _run_target_args'_v4253 = v4259 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4260 : (unit -> unit) = method98(v0)
    let v4261 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4260 () }
    let _run_target_args'_v4253 = v4261 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4262 : (unit -> unit) = method98(v0)
    let v4263 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4262 () }
    let _run_target_args'_v4253 = v4263 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4264 : (unit -> unit) = method98(v0)
    let v4265 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4264 () }
    let _run_target_args'_v4253 = v4265 
    #endif
#else
    let v4266 : (unit -> unit) = method98(v0)
    let v4267 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v4266 () }
    let _run_target_args'_v4253 = v4267 
    #endif
    let v4268 : System.IDisposable = _run_target_args'_v4253 
    let _run_target_args'_v736 = v4268 
    #endif
#else
    let v4275 : System_IO_DirectoryInfo = method89(v0)
    (* run_target_args'
    let v4280 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4282 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4282 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4286 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4290 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4290 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4294 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4294 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4298 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4298 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4302 : bool = null |> unbox<bool>
    let _run_target_args'_v4280 = v4302 
    #endif
#else
    let v4305 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v4306 : bool = v4305 v4275
    let _run_target_args'_v4280 = v4306 
    #endif
    let v4307 : bool = _run_target_args'_v4280 
    let v4316 : bool = v4307 = false
    if v4316 then
        (* run_target_args'
        let v4321 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v4323 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4323 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v4327 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4327 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v4331 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4331 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v4335 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4335 
        #endif
#if FABLE_COMPILER_PYTHON
        let v4339 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4339 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v4343 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v4321 = v4343 
        #endif
#else
        let v4346 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v4347 : System.DateTime = v4346 v4275
        let _run_target_args'_v4321 = v4347 
        #endif
        let v4348 : System.DateTime = _run_target_args'_v4321 
        let v4357 : _ = {| Exists = v4307; CreationTime = v4348 |}
        let v4359 : string = $"%A{v4357}"
        let v4673 : unit = ()
        let v4674 : (unit -> unit) = closure32(v0, v4359)
        let v4675 : unit = (fun () -> v4674 (); v4673) ()
        ()
    (* run_target_args'
    let v4994 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4995 : (unit -> unit) = method92(v0)
    let v4996 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4995 "$0()" )
    let _run_target_args'_v4994 = v4996 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4997 : (unit -> unit) = method92(v0)
    let v4998 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4997 "$0()" )
    let _run_target_args'_v4994 = v4998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4999 : (unit -> unit) = method92(v0)
    let v5000 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v4999 "$0()" )
    let _run_target_args'_v4994 = v5000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5001 : (unit -> unit) = method98(v0)
    let v5002 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5001 () }
    let _run_target_args'_v4994 = v5002 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5003 : (unit -> unit) = method98(v0)
    let v5004 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5003 () }
    let _run_target_args'_v4994 = v5004 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5005 : (unit -> unit) = method98(v0)
    let v5006 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5005 () }
    let _run_target_args'_v4994 = v5006 
    #endif
#else
    let v5007 : (unit -> unit) = method98(v0)
    let v5008 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v5007 () }
    let _run_target_args'_v4994 = v5008 
    #endif
    let v5009 : System.IDisposable = _run_target_args'_v4994 
    let _run_target_args'_v736 = v5009 
    #endif
    let v5016 : System.IDisposable = _run_target_args'_v736 
    v5016
and method74 (v0 : string, v1 : string) : unit =
    let v2 : bool = method75(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method39(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method37(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method76(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method100 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : string =
    v0
and method102 () : string =
    let v0 : string = ""
    v0
and method103 (v0 : char, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "c"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v67 : string = $"{v0}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "s"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    (* run_target_args'
    let v142 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v143 : string = "format!(\"{:#?}\", $0)"
    let v144 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v143 
    let v145 : string = "fable_library_rust::String_::fromString($0)"
    let v146 : string = Fable.Core.RustInterop.emitRustExpr v144 v145 
    let _run_target_args'_v142 = v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = "format!(\"{:#?}\", $0)"
    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v147 
    let v149 : string = "fable_library_rust::String_::fromString($0)"
    let v150 : string = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let _run_target_args'_v142 = v150 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = "format!(\"{:#?}\", $0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v151 
    let v153 : string = "fable_library_rust::String_::fromString($0)"
    let v154 : string = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let _run_target_args'_v142 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v160 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v160 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v164 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v164 
    #endif
#else
    let v168 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v142 = v168 
    #endif
    let v171 : string = _run_target_args'_v142 
    let v181 : string = $"{v171}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v181)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v5, v200)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v216 : string = v5.l0
    v216
and method104 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method104(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method105 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v26 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v17 : (char -> string) = _.ToString()
                let v18 : string = v17 v4
                let v22 : (string -> System.Text.StringBuilder) = v1.Append
                let v23 : System.Text.StringBuilder = v22 v18
                v1
        method105(v5, v26, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and method106 (v0 : char, v1 : int32, v2 : int32) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "expected"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "line"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v4, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v84}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v4, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "col"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v4, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v45}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v4, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v214 : string = $"{v2}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v4, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v232 : string = " }"
    let v233 : string = $"{v232}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v4, v233)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v249 : string = v4.l0
    v249
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method107(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method107 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : char = '"'
        let v6 : string = method103(v5, v1, v2, v3)
        let v9 : string = "parsing.p_char / unexpected end of input / "
        let v10 : string = v9 + v6 
        US19_1(v10)
    else
        let v14 : char = v0.[int 0]
        let v15 : bool = v14 = '"'
        if v15 then
            let v17 : (string -> int32) = String.length
            let v18 : int32 = v17 v0
            let v22 : int32 = 1
            let v28 : int32 = 1 |> int32 
            let v41 : int32 = v18 |> int32 
            let v49 : int32 = v41 - v22
            let v51 : string = v0.[int v28..int v49]
            let v56 : (char -> string) = _.ToString()
            let v57 : string = v56 v14
            let v60 : int64 = System.Convert.ToInt64 v57.Length
            let v61 : int64 = 0L
            let v62 : UH0 = method104(v60, v57, v61)
            let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method105(v62, v1, v2, v3)
            US19_0(v14, v51, v63, v64, v65)
        else
            let v70 : string = "\n"
            let v71 : int32 = v0.IndexOf v70 
            let v74 : int32 = v71 - 1
            let v75 : bool = -2 = v74
            let v83 : int32 =
                if v75 then
                    let v77 : (string -> int32) = String.length
                    let v78 : int32 = v77 v0
                    let v81 : int32 = v78 + 1
                    v81
                else
                    let v82 : int32 = v74 + 1
                    v82
            let v85 : int32 = 1
            let v91 : int32 = 0 |> int32 
            let v104 : int32 = v83 |> int32 
            let v112 : int32 = v104 - v85
            let v114 : string = v0.[int v91..int v112]
            let v118 : char = '"'
            let v119 : string = method106(v118, v2, v3)
            let v122 : string = "parsing.p_char / "
            let v123 : string = v122 + v119 
            let v127 : string = v123 + v70 
            let v131 : (System.Text.StringBuilder -> string) = _.ToString()
            let v132 : string = v131 v1
            let v136 : string = v127 + v132 
            let v140 : string = v136 + v114 
            let v143 : int32 = v3 - 1
            let v144 : int32 = 0
            let v145 : (string -> string) = method107(v143, v144)
            let v146 : string = ""
            let v147 : string = v145 v146
            let v150 : string = "^"
            let v151 : string = v147 + v150 
            let v155 : string = v140 + v70 
            let v159 : string = v155 + v151 
            let v163 : string = v159 + v70 
            US19_1(v163)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : char = '''
        let v6 : string = method103(v5, v1, v2, v3)
        let v9 : string = "parsing.p_char / unexpected end of input / "
        let v10 : string = v9 + v6 
        US19_1(v10)
    else
        let v14 : char = v0.[int 0]
        let v15 : bool = v14 = '''
        if v15 then
            let v17 : (string -> int32) = String.length
            let v18 : int32 = v17 v0
            let v22 : int32 = 1
            let v28 : int32 = 1 |> int32 
            let v41 : int32 = v18 |> int32 
            let v49 : int32 = v41 - v22
            let v51 : string = v0.[int v28..int v49]
            let v56 : (char -> string) = _.ToString()
            let v57 : string = v56 v14
            let v60 : int64 = System.Convert.ToInt64 v57.Length
            let v61 : int64 = 0L
            let v62 : UH0 = method104(v60, v57, v61)
            let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method105(v62, v1, v2, v3)
            US19_0(v14, v51, v63, v64, v65)
        else
            let v70 : string = "\n"
            let v71 : int32 = v0.IndexOf v70 
            let v74 : int32 = v71 - 1
            let v75 : bool = -2 = v74
            let v83 : int32 =
                if v75 then
                    let v77 : (string -> int32) = String.length
                    let v78 : int32 = v77 v0
                    let v81 : int32 = v78 + 1
                    v81
                else
                    let v82 : int32 = v74 + 1
                    v82
            let v85 : int32 = 1
            let v91 : int32 = 0 |> int32 
            let v104 : int32 = v83 |> int32 
            let v112 : int32 = v104 - v85
            let v114 : string = v0.[int v91..int v112]
            let v118 : char = '''
            let v119 : string = method106(v118, v2, v3)
            let v122 : string = "parsing.p_char / "
            let v123 : string = v122 + v119 
            let v127 : string = v123 + v70 
            let v131 : (System.Text.StringBuilder -> string) = _.ToString()
            let v132 : string = v131 v1
            let v136 : string = v127 + v132 
            let v140 : string = v136 + v114 
            let v143 : int32 = v3 - 1
            let v144 : int32 = 0
            let v145 : (string -> string) = method107(v143, v144)
            let v146 : string = ""
            let v147 : string = v145 v146
            let v150 : string = "^"
            let v151 : string = v147 + v150 
            let v155 : string = v140 + v70 
            let v159 : string = v155 + v151 
            let v163 : string = v159 + v70 
            US19_1(v163)
and method108 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US19 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US19 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US19_1(v13) -> (* Error *)
            method108(v0, v1, v6)
        | US19_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US19_1(v3)
and method109 (v0 : (char [])) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = $"%A{v0}"
    let v9 : string = $"{v5}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v2, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v25 : string = v2.l0
    v25
and method110 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "chars"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v64 : string = $"{v0}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v5, v64)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v82 : string = "; "
    let v83 : string = $"{v82}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v5, v83)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v101 : string = "s"
    let v102 : string = $"{v101}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v5, v102)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v119 : string = $"{v46}"
    let v127 : unit = ()
    let v128 : (unit -> unit) = closure7(v5, v119)
    let v129 : unit = (fun () -> v128 (); v127) ()
    (* run_target_args'
    let v139 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v140 : string = "format!(\"{:#?}\", $0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v140 
    let v142 : string = "fable_library_rust::String_::fromString($0)"
    let v143 : string = Fable.Core.RustInterop.emitRustExpr v141 v142 
    let _run_target_args'_v139 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v144 : string = "format!(\"{:#?}\", $0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v144 
    let v146 : string = "fable_library_rust::String_::fromString($0)"
    let v147 : string = Fable.Core.RustInterop.emitRustExpr v145 v146 
    let _run_target_args'_v139 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "format!(\"{:#?}\", $0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1, v2, v3) v148 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v149 v150 
    let _run_target_args'_v139 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v153 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v157 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v161 
    #endif
#else
    let v165 : string = $"%A{struct (v1, v2, v3)}"
    let _run_target_args'_v139 = v165 
    #endif
    let v168 : string = _run_target_args'_v139 
    let v178 : string = $"{v168}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v196 : string = " }"
    let v197 : string = $"{v196}"
    let v205 : unit = ()
    let v206 : (unit -> unit) = closure7(v5, v197)
    let v207 : unit = (fun () -> v206 (); v205) ()
    let v213 : string = v5.l0
    v213
and method111 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US21_1
        let v15 : char =
            match v11 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method111(v0, v17)
and method112 (v0 : char, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "first_char"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "chars"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "s"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    (* run_target_args'
    let v213 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v214 : string = "format!(\"{:#?}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v214 
    let v216 : string = "fable_library_rust::String_::fromString($0)"
    let v217 : string = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let _run_target_args'_v213 = v217 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v218 : string = "format!(\"{:#?}\", $0)"
    let v219 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v218 
    let v220 : string = "fable_library_rust::String_::fromString($0)"
    let v221 : string = Fable.Core.RustInterop.emitRustExpr v219 v220 
    let _run_target_args'_v213 = v221 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v222 : string = "format!(\"{:#?}\", $0)"
    let v223 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v222 
    let v224 : string = "fable_library_rust::String_::fromString($0)"
    let v225 : string = Fable.Core.RustInterop.emitRustExpr v223 v224 
    let _run_target_args'_v213 = v225 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v227 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v227 
    #endif
#if FABLE_COMPILER_PYTHON
    let v231 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v231 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v235 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v235 
    #endif
#else
    let v239 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v213 = v239 
    #endif
    let v242 : string = _run_target_args'_v213 
    let v252 : string = $"{v242}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v6, v252)
    let v262 : unit = (fun () -> v261 (); v260) ()
    let v270 : string = " }"
    let v271 : string = $"{v270}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v6, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v287 : string = v6.l0
    v287
and method113 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v176 : US19 =
        if v5 then
            let v16 : char list = []
            let v18 : char list = ''' :: v16 
            let v22 : char list = '"' :: v18 
            let v30 : (char list -> (char [])) = List.toArray
            let v31 : (char []) = v30 v22
            let v34 : string = method109(v31)
            let v55 : string = method110(v34, v2, v3, v4)
            let v58 : string = "parsing.none_of / unexpected end of input / "
            let v59 : string = v58 + v55 
            US19_1(v59)
        else
            let v63 : char = v1.[int 0]
            let v64 : int64 = 0L
            let v65 : bool = method111(v63, v64)
            let v66 : bool = v65 = false
            if v66 then
                let v68 : (string -> int32) = String.length
                let v69 : int32 = v68 v1
                let v73 : int32 = 1
                let v79 : int32 = 1 |> int32 
                let v92 : int32 = v69 |> int32 
                let v100 : int32 = v92 - v73
                let v102 : string = v1.[int v79..int v100]
                let v107 : (char -> string) = _.ToString()
                let v108 : string = v107 v63
                let v111 : int64 = System.Convert.ToInt64 v108.Length
                let v112 : int64 = 0L
                let v113 : UH0 = method104(v111, v108, v112)
                let struct (v114 : System.Text.StringBuilder, v115 : int32, v116 : int32) = method105(v113, v2, v3, v4)
                US19_0(v63, v102, v114, v115, v116)
            else
                let v128 : char list = []
                let v130 : char list = ''' :: v128 
                let v134 : char list = '"' :: v130 
                let v142 : (char list -> (char [])) = List.toArray
                let v143 : (char []) = v142 v134
                let v146 : string = method109(v143)
                let v167 : string = method112(v63, v146, v2, v3, v4)
                let v170 : string = "parsing.none_of / unexpected char / "
                let v171 : string = v170 + v167 
                US19_1(v171)
    let v188 : US19 =
        match v176 with
        | US19_1(v185) -> (* Error *)
            US19_1(v185)
        | US19_0(v177, v178, v179, v180, v181) -> (* Ok *)
            let v182 : bool = '\\' = v177
            let v183 : char =
                if v182 then
                    '/'
                else
                    v177
            US19_0(v183, v178, v179, v180, v181)
    match v188 with
    | US19_1(v208) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v189, v190, v191, v192, v193) -> (* Ok *)
        let v195 : (char -> string) = _.ToString()
        let v196 : string = v195 v189
        let v200 : string = v0 + v196 
        method113(v200, v190, v191, v192, v193)
and method114 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US19 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method114(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method115 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32, v5 : string, v6 : System.Text.StringBuilder, v7 : int32, v8 : int32, v9 : string, v10 : System.Text.StringBuilder, v11 : int32, v12 : int32) : string =
    let v13 : string = method13()
    let v14 : Mut3 = {l0 = v13} : Mut3
    let v17 : string = "{ "
    let v18 : string = $"{v17}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v14, v18)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v36 : string = "e"
    let v37 : string = $"{v36}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v14, v37)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v55 : string = " = "
    let v56 : string = $"{v55}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v14, v56)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v73 : string = $"{v0}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v14, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v14, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "input"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v14, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v55}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v14, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v145 : string = $"{v1}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v14, v145)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v163 : string = ", "
    let v164 : string = $"{v163}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v14, v164)
    let v174 : unit = (fun () -> v173 (); v172) ()
    (* run_target_args'
    let v184 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "format!(\"{:#?}\", $0)"
    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v185 
    let v187 : string = "fable_library_rust::String_::fromString($0)"
    let v188 : string = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let _run_target_args'_v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = "format!(\"{:#?}\", $0)"
    let v190 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v189 
    let v191 : string = "fable_library_rust::String_::fromString($0)"
    let v192 : string = Fable.Core.RustInterop.emitRustExpr v190 v191 
    let _run_target_args'_v184 = v192 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = "format!(\"{:#?}\", $0)"
    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2, v3, v4) v193 
    let v195 : string = "fable_library_rust::String_::fromString($0)"
    let v196 : string = Fable.Core.RustInterop.emitRustExpr v194 v195 
    let _run_target_args'_v184 = v196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v198 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v202 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v206 
    #endif
#else
    let v210 : string = $"%A{struct (v2, v3, v4)}"
    let _run_target_args'_v184 = v210 
    #endif
    let v213 : string = _run_target_args'_v184 
    let v223 : string = $"{v213}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v14, v223)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v240 : string = $"{v91}"
    let v248 : unit = ()
    let v249 : (unit -> unit) = closure7(v14, v240)
    let v250 : unit = (fun () -> v249 (); v248) ()
    let v258 : string = "rest1"
    let v259 : string = $"{v258}"
    let v267 : unit = ()
    let v268 : (unit -> unit) = closure7(v14, v259)
    let v269 : unit = (fun () -> v268 (); v267) ()
    let v276 : string = $"{v55}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v14, v276)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v293 : string = $"{v5}"
    let v301 : unit = ()
    let v302 : (unit -> unit) = closure7(v14, v293)
    let v303 : unit = (fun () -> v302 (); v301) ()
    let v310 : string = $"{v163}"
    let v318 : unit = ()
    let v319 : (unit -> unit) = closure7(v14, v310)
    let v320 : unit = (fun () -> v319 (); v318) ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = "format!(\"{:#?}\", $0)"
    let v332 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v331 
    let v333 : string = "fable_library_rust::String_::fromString($0)"
    let v334 : string = Fable.Core.RustInterop.emitRustExpr v332 v333 
    let _run_target_args'_v330 = v334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v335 : string = "format!(\"{:#?}\", $0)"
    let v336 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v335 
    let v337 : string = "fable_library_rust::String_::fromString($0)"
    let v338 : string = Fable.Core.RustInterop.emitRustExpr v336 v337 
    let _run_target_args'_v330 = v338 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v339 : string = "format!(\"{:#?}\", $0)"
    let v340 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6, v7, v8) v339 
    let v341 : string = "fable_library_rust::String_::fromString($0)"
    let v342 : string = Fable.Core.RustInterop.emitRustExpr v340 v341 
    let _run_target_args'_v330 = v342 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v344 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v344 
    #endif
#if FABLE_COMPILER_PYTHON
    let v348 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v352 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v352 
    #endif
#else
    let v356 : string = $"%A{struct (v6, v7, v8)}"
    let _run_target_args'_v330 = v356 
    #endif
    let v359 : string = _run_target_args'_v330 
    let v369 : string = $"{v359}"
    let v377 : unit = ()
    let v378 : (unit -> unit) = closure7(v14, v369)
    let v379 : unit = (fun () -> v378 (); v377) ()
    let v386 : string = $"{v91}"
    let v394 : unit = ()
    let v395 : (unit -> unit) = closure7(v14, v386)
    let v396 : unit = (fun () -> v395 (); v394) ()
    let v404 : string = "rest2"
    let v405 : string = $"{v404}"
    let v413 : unit = ()
    let v414 : (unit -> unit) = closure7(v14, v405)
    let v415 : unit = (fun () -> v414 (); v413) ()
    let v422 : string = $"{v55}"
    let v430 : unit = ()
    let v431 : (unit -> unit) = closure7(v14, v422)
    let v432 : unit = (fun () -> v431 (); v430) ()
    let v439 : string = $"{v9}"
    let v447 : unit = ()
    let v448 : (unit -> unit) = closure7(v14, v439)
    let v449 : unit = (fun () -> v448 (); v447) ()
    let v456 : string = $"{v163}"
    let v464 : unit = ()
    let v465 : (unit -> unit) = closure7(v14, v456)
    let v466 : unit = (fun () -> v465 (); v464) ()
    (* run_target_args'
    let v476 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v477 : string = "format!(\"{:#?}\", $0)"
    let v478 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v477 
    let v479 : string = "fable_library_rust::String_::fromString($0)"
    let v480 : string = Fable.Core.RustInterop.emitRustExpr v478 v479 
    let _run_target_args'_v476 = v480 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v481 : string = "format!(\"{:#?}\", $0)"
    let v482 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v481 
    let v483 : string = "fable_library_rust::String_::fromString($0)"
    let v484 : string = Fable.Core.RustInterop.emitRustExpr v482 v483 
    let _run_target_args'_v476 = v484 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v485 : string = "format!(\"{:#?}\", $0)"
    let v486 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10, v11, v12) v485 
    let v487 : string = "fable_library_rust::String_::fromString($0)"
    let v488 : string = Fable.Core.RustInterop.emitRustExpr v486 v487 
    let _run_target_args'_v476 = v488 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v490 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v490 
    #endif
#if FABLE_COMPILER_PYTHON
    let v494 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v494 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v498 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v498 
    #endif
#else
    let v502 : string = $"%A{struct (v10, v11, v12)}"
    let _run_target_args'_v476 = v502 
    #endif
    let v505 : string = _run_target_args'_v476 
    let v515 : string = $"{v505}"
    let v523 : unit = ()
    let v524 : (unit -> unit) = closure7(v14, v515)
    let v525 : unit = (fun () -> v524 (); v523) ()
    let v533 : string = " }"
    let v534 : string = $"{v533}"
    let v542 : unit = ()
    let v543 : (unit -> unit) = closure7(v14, v534)
    let v544 : unit = (fun () -> v543 (); v542) ()
    let v550 : string = v14.l0
    v550
and method116 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method116(v0, v21)
and method117 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = ' ' :: v20 
            let v26 : char list = ''' :: v22 
            let v30 : char list = '"' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method109(v39)
            let v67 : string = method110(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method116(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method104(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method105(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = ' ' :: v144 
                let v150 : char list = ''' :: v146 
                let v154 : char list = '"' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method109(v163)
                let v191 : string = method112(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v212 : US19 =
        match v200 with
        | US19_1(v209) -> (* Error *)
            US19_1(v209)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v206 : bool = '\\' = v201
            let v207 : char =
                if v206 then
                    '/'
                else
                    v201
            US19_0(v207, v202, v203, v204, v205)
    match v212 with
    | US19_1(v232) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v219 : (char -> string) = _.ToString()
        let v220 : string = v219 v213
        let v224 : string = v0 + v220 
        method117(v224, v214, v215, v216, v217)
and method118 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "input"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method119 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method119(v0, v6)
        else
            v1
and method120 (v0 : System.Text.StringBuilder, v1 : int32, v2 : int32) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "s"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    (* run_target_args'
    let v66 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "format!(\"{:#?}\", $0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v67 
    let v69 : string = "fable_library_rust::String_::fromString($0)"
    let v70 : string = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let _run_target_args'_v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v71 : string = "format!(\"{:#?}\", $0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v71 
    let v73 : string = "fable_library_rust::String_::fromString($0)"
    let v74 : string = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let _run_target_args'_v66 = v74 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v75 : string = "format!(\"{:#?}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v0, v1, v2) v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _run_target_args'_v66 = v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v80 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v88 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v88 
    #endif
#else
    let v92 : string = $"%A{struct (v0, v1, v2)}"
    let _run_target_args'_v66 = v92 
    #endif
    let v95 : string = _run_target_args'_v66 
    let v105 : string = $"{v95}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v4, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v123 : string = " }"
    let v124 : string = $"{v123}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v4, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v140 : string = v4.l0
    v140
and method121 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US19 =
        if v5 then
            let v6 : string = method120(v2, v3, v4)
            let v9 : string = "parsing.any_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v1.[int 0]
            let v16 : (string -> int32) = String.length
            let v17 : int32 = v16 v1
            let v21 : int32 = 1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v17 |> int32 
            let v48 : int32 = v40 - v21
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v14
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method104(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method105(v61, v2, v3, v4)
            US19_0(v14, v50, v62, v63, v64)
    match v66 with
    | US19_1(v86) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v78 : string = v0 + v74 
        method121(v78, v68, v69, v70, v71)
and method101 (v0 : string) : US18 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method102()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US19 = method108(v10, v16, v23)
    let v280 : US20 =
        match v24 with
        | US19_1(v277) -> (* Error *)
            US20_1(v277)
        | US19_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v201 : US19 =
                if v30 then
                    let v41 : char list = []
                    let v43 : char list = ''' :: v41 
                    let v47 : char list = '"' :: v43 
                    let v55 : (char list -> (char [])) = List.toArray
                    let v56 : (char []) = v55 v47
                    let v59 : string = method109(v56)
                    let v80 : string = method110(v59, v27, v28, v29)
                    let v83 : string = "parsing.none_of / unexpected end of input / "
                    let v84 : string = v83 + v80 
                    US19_1(v84)
                else
                    let v88 : char = v26.[int 0]
                    let v89 : int64 = 0L
                    let v90 : bool = method111(v88, v89)
                    let v91 : bool = v90 = false
                    if v91 then
                        let v93 : (string -> int32) = String.length
                        let v94 : int32 = v93 v26
                        let v98 : int32 = 1
                        let v104 : int32 = 1 |> int32 
                        let v117 : int32 = v94 |> int32 
                        let v125 : int32 = v117 - v98
                        let v127 : string = v26.[int v104..int v125]
                        let v132 : (char -> string) = _.ToString()
                        let v133 : string = v132 v88
                        let v136 : int64 = System.Convert.ToInt64 v133.Length
                        let v137 : int64 = 0L
                        let v138 : UH0 = method104(v136, v133, v137)
                        let struct (v139 : System.Text.StringBuilder, v140 : int32, v141 : int32) = method105(v138, v27, v28, v29)
                        US19_0(v88, v127, v139, v140, v141)
                    else
                        let v153 : char list = []
                        let v155 : char list = ''' :: v153 
                        let v159 : char list = '"' :: v155 
                        let v167 : (char list -> (char [])) = List.toArray
                        let v168 : (char []) = v167 v159
                        let v171 : string = method109(v168)
                        let v192 : string = method112(v88, v171, v27, v28, v29)
                        let v195 : string = "parsing.none_of / unexpected char / "
                        let v196 : string = v195 + v192 
                        US19_1(v196)
            let v213 : US19 =
                match v201 with
                | US19_1(v210) -> (* Error *)
                    US19_1(v210)
                | US19_0(v202, v203, v204, v205, v206) -> (* Ok *)
                    let v207 : bool = '\\' = v202
                    let v208 : char =
                        if v207 then
                            '/'
                        else
                            v202
                    US19_0(v208, v203, v204, v205, v206)
            let v233 : US20 =
                match v213 with
                | US19_1(v230) -> (* Error *)
                    US20_1(v230)
                | US19_0(v214, v215, v216, v217, v218) -> (* Ok *)
                    let v220 : (char -> string) = _.ToString()
                    let v221 : string = v220 v214
                    let struct (v224 : string, v225 : string, v226 : System.Text.StringBuilder, v227 : int32, v228 : int32) = method113(v221, v215, v216, v217, v218)
                    US20_0(v224, v225, v226, v227, v228)
            let v243 : US20 =
                match v233 with
                | US20_1(v240) -> (* Error *)
                    US20_0(v9, v26, v27, v28, v29)
                | US20_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    US20_0(v234, v235, v236, v237, v238)
            match v243 with
            | US20_1(v272) -> (* Error *)
                let v273 : string = "parsing.between / expected content"
                US20_1(v273)
            | US20_0(v244, v245, v246, v247, v248) -> (* Ok *)
                let v249 : UH1 = UH1_0
                let v250 : UH1 = UH1_1(v20, v249)
                let v251 : UH1 = UH1_1(v19, v250)
                let v252 : US19 = method114(v245, v246, v247, v248, v251)
                match v252 with
                | US19_1(v259) -> (* Error *)
                    let v260 : int32 = 1
                    let v261 : int32 = 1
                    let v262 : string = method115(v259, v10, v16, v260, v261, v26, v27, v28, v29, v245, v246, v247, v248)
                    let v265 : string = "parsing.between / expected closing delimiter / "
                    let v266 : string = v265 + v262 
                    US20_1(v266)
                | US19_0(v253, v254, v255, v256, v257) -> (* Ok *)
                    US20_0(v244, v254, v255, v256, v257)
    let v602 : US20 =
        match v280 with
        | US20_1(v286) -> (* Error *)
            let v287 : bool = "" = v10
            let v488 : US19 =
                if v287 then
                    let v302 : char list = []
                    let v304 : char list = ' ' :: v302 
                    let v308 : char list = ''' :: v304 
                    let v312 : char list = '"' :: v308 
                    let v320 : (char list -> (char [])) = List.toArray
                    let v321 : (char []) = v320 v312
                    let v324 : string = method109(v321)
                    let v349 : int32 = 1
                    let v350 : int32 = 1
                    let v351 : string = method110(v324, v16, v349, v350)
                    let v354 : string = "parsing.none_of / unexpected end of input / "
                    let v355 : string = v354 + v351 
                    US19_1(v355)
                else
                    let v359 : char = v10.[int 0]
                    let v360 : int64 = 0L
                    let v361 : bool = method116(v359, v360)
                    let v362 : bool = v361 = false
                    if v362 then
                        let v364 : (string -> int32) = String.length
                        let v365 : int32 = v364 v10
                        let v369 : int32 = 1
                        let v375 : int32 = 1 |> int32 
                        let v388 : int32 = v365 |> int32 
                        let v396 : int32 = v388 - v369
                        let v398 : string = v10.[int v375..int v396]
                        let v403 : (char -> string) = _.ToString()
                        let v404 : string = v403 v359
                        let v407 : int64 = System.Convert.ToInt64 v404.Length
                        let v408 : int64 = 0L
                        let v409 : UH0 = method104(v407, v404, v408)
                        let v410 : int32 = 1
                        let v411 : int32 = 1
                        let struct (v412 : System.Text.StringBuilder, v413 : int32, v414 : int32) = method105(v409, v16, v410, v411)
                        US19_0(v359, v398, v412, v413, v414)
                    else
                        let v430 : char list = []
                        let v432 : char list = ' ' :: v430 
                        let v436 : char list = ''' :: v432 
                        let v440 : char list = '"' :: v436 
                        let v448 : (char list -> (char [])) = List.toArray
                        let v449 : (char []) = v448 v440
                        let v452 : string = method109(v449)
                        let v477 : int32 = 1
                        let v478 : int32 = 1
                        let v479 : string = method112(v359, v452, v16, v477, v478)
                        let v482 : string = "parsing.none_of / unexpected char / "
                        let v483 : string = v482 + v479 
                        US19_1(v483)
            let v500 : US19 =
                match v488 with
                | US19_1(v497) -> (* Error *)
                    US19_1(v497)
                | US19_0(v489, v490, v491, v492, v493) -> (* Ok *)
                    let v494 : bool = '\\' = v489
                    let v495 : char =
                        if v494 then
                            '/'
                        else
                            v489
                    US19_0(v495, v490, v491, v492, v493)
            let v520 : US20 =
                match v500 with
                | US19_1(v517) -> (* Error *)
                    US20_1(v517)
                | US19_0(v501, v502, v503, v504, v505) -> (* Ok *)
                    let v507 : (char -> string) = _.ToString()
                    let v508 : string = v507 v501
                    let struct (v511 : string, v512 : string, v513 : System.Text.StringBuilder, v514 : int32, v515 : int32) = method117(v508, v502, v503, v504, v505)
                    US20_0(v511, v512, v513, v514, v515)
            match v520 with
            | US20_1(v526) -> (* Error *)
                let v527 : int32 = v10.Length
                let v528 : bool = v527 = 0
                let v538 : US22 =
                    if v528 then
                        US22_0(v10, v16, 1, 1)
                    else
                        let v530 : string = method118(v10)
                        let v533 : string = "parsing.eof / expected end of input / "
                        let v534 : string = v533 + v530 
                        US22_1(v534)
                let v547 : US20 =
                    match v538 with
                    | US22_1(v544) -> (* Error *)
                        US20_1(v544)
                    | US22_0(v539, v540, v541, v542) -> (* Ok *)
                        US20_0(v9, v539, v540, v541, v542)
                match v547 with
                | US20_1(v595) -> (* Error *)
                    US20_1(v595)
                | US20_0(v548, v549, v550, v551, v552) -> (* Ok *)
                    let v553 : int32 = 0
                    let v554 : int32 = method119(v549, v553)
                    let v556 : (string -> int32) = String.length
                    let v557 : int32 = v556 v549
                    let v561 : int32 = 1
                    let v567 : int32 = v554 |> int32 
                    let v580 : int32 = v557 |> int32 
                    let v588 : int32 = v580 - v561
                    let v590 : string = v549.[int v567..int v588]
                    US20_0(v548, v590, v550, v551, v552)
            | US20_0(v521, v522, v523, v524, v525) -> (* Ok *)
                v520
        | US20_0(v281, v282, v283, v284, v285) -> (* Ok *)
            v280
    let v900 : US23 =
        match v602 with
        | US20_1(v897) -> (* Error *)
            US23_1(v897)
        | US20_0(v603, v604, v605, v606, v607) -> (* Ok *)
            let v608 : bool = "" = v604
            let v771 : US19 =
                if v608 then
                    let v609 : char = ' '
                    let v610 : string = method103(v609, v605, v606, v607)
                    let v613 : string = "parsing.p_char / unexpected end of input / "
                    let v614 : string = v613 + v610 
                    US19_1(v614)
                else
                    let v618 : char = v604.[int 0]
                    let v619 : bool = v618 = ' '
                    if v619 then
                        let v621 : (string -> int32) = String.length
                        let v622 : int32 = v621 v604
                        let v626 : int32 = 1
                        let v632 : int32 = 1 |> int32 
                        let v645 : int32 = v622 |> int32 
                        let v653 : int32 = v645 - v626
                        let v655 : string = v604.[int v632..int v653]
                        let v660 : (char -> string) = _.ToString()
                        let v661 : string = v660 v618
                        let v664 : int64 = System.Convert.ToInt64 v661.Length
                        let v665 : int64 = 0L
                        let v666 : UH0 = method104(v664, v661, v665)
                        let struct (v667 : System.Text.StringBuilder, v668 : int32, v669 : int32) = method105(v666, v605, v606, v607)
                        US19_0(v618, v655, v667, v668, v669)
                    else
                        let v674 : string = "\n"
                        let v675 : int32 = v604.IndexOf v674 
                        let v678 : int32 = v675 - 1
                        let v679 : bool = -2 = v678
                        let v687 : int32 =
                            if v679 then
                                let v681 : (string -> int32) = String.length
                                let v682 : int32 = v681 v604
                                let v685 : int32 = v682 + 1
                                v685
                            else
                                let v686 : int32 = v678 + 1
                                v686
                        let v689 : int32 = 1
                        let v695 : int32 = 0 |> int32 
                        let v708 : int32 = v687 |> int32 
                        let v716 : int32 = v708 - v689
                        let v718 : string = v604.[int v695..int v716]
                        let v722 : char = ' '
                        let v723 : string = method106(v722, v606, v607)
                        let v726 : string = "parsing.p_char / "
                        let v727 : string = v726 + v723 
                        let v731 : string = v727 + v674 
                        let v735 : (System.Text.StringBuilder -> string) = _.ToString()
                        let v736 : string = v735 v605
                        let v740 : string = v731 + v736 
                        let v744 : string = v740 + v718 
                        let v747 : int32 = v607 - 1
                        let v748 : int32 = 0
                        let v749 : (string -> string) = method107(v747, v748)
                        let v750 : string = v749 v9
                        let v753 : string = "^"
                        let v754 : string = v750 + v753 
                        let v758 : string = v744 + v674 
                        let v762 : string = v758 + v754 
                        let v766 : string = v762 + v674 
                        US19_1(v766)
            let v783 : US24 =
                match v771 with
                | US19_1(v779) -> (* Error *)
                    let v780 : US21 = US21_1
                    US24_0(v780, v604, v605, v606, v607)
                | US19_0(v772, v773, v774, v775, v776) -> (* Ok *)
                    let v777 : US21 = US21_0(v772)
                    US24_0(v777, v773, v774, v775, v776)
            let v874 : US20 =
                match v783 with
                | US24_1(v871) -> (* Error *)
                    US20_1(v871)
                | US24_0(v784, v785, v786, v787, v788) -> (* Ok *)
                    let v789 : bool = "" = v785
                    let v850 : US19 =
                        if v789 then
                            let v790 : string = method120(v786, v787, v788)
                            let v793 : string = "parsing.any_char / unexpected end of input / "
                            let v794 : string = v793 + v790 
                            US19_1(v794)
                        else
                            let v798 : char = v785.[int 0]
                            let v800 : (string -> int32) = String.length
                            let v801 : int32 = v800 v785
                            let v805 : int32 = 1
                            let v811 : int32 = 1 |> int32 
                            let v824 : int32 = v801 |> int32 
                            let v832 : int32 = v824 - v805
                            let v834 : string = v785.[int v811..int v832]
                            let v839 : (char -> string) = _.ToString()
                            let v840 : string = v839 v798
                            let v843 : int64 = System.Convert.ToInt64 v840.Length
                            let v844 : int64 = 0L
                            let v845 : UH0 = method104(v843, v840, v844)
                            let struct (v846 : System.Text.StringBuilder, v847 : int32, v848 : int32) = method105(v845, v786, v787, v788)
                            US19_0(v798, v834, v846, v847, v848)
                    match v850 with
                    | US19_1(v867) -> (* Error *)
                        US20_1(v867)
                    | US19_0(v851, v852, v853, v854, v855) -> (* Ok *)
                        let v857 : (char -> string) = _.ToString()
                        let v858 : string = v857 v851
                        let struct (v861 : string, v862 : string, v863 : System.Text.StringBuilder, v864 : int32, v865 : int32) = method121(v858, v852, v853, v854, v855)
                        US20_0(v861, v862, v863, v864, v865)
            let v886 : US25 =
                match v874 with
                | US20_1(v882) -> (* Error *)
                    let v883 : US5 = US5_1
                    US25_0(v883, v604, v605, v606, v607)
                | US20_0(v875, v876, v877, v878, v879) -> (* Ok *)
                    let v880 : US5 = US5_0(v875)
                    US25_0(v880, v876, v877, v878, v879)
            match v886 with
            | US25_1(v893) -> (* Error *)
                US23_1(v893)
            | US25_0(v887, v888, v889, v890, v891) -> (* Ok *)
                US23_0(v603, v887, v888, v889, v890, v891)
    match v900 with
    | US23_1(v908) -> (* Error *)
        US18_1(v908)
    | US23_0(v901, v902, v903, v904, v905, v906) -> (* Ok *)
        US18_0(v901, v902)
and method124 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US21_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US21_1
        let v23 : char =
            match v19 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method124(v0, v25)
and method125 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v224 : US19 =
        if v5 then
            let v24 : char list = []
            let v26 : char list = ' ' :: v24 
            let v30 : char list = '"' :: v26 
            let v34 : char list = '`' :: v30 
            let v38 : char list = '\\' :: v34 
            let v46 : (char list -> (char [])) = List.toArray
            let v47 : (char []) = v46 v38
            let v50 : string = method109(v47)
            let v79 : string = method110(v50, v2, v3, v4)
            let v82 : string = "parsing.none_of / unexpected end of input / "
            let v83 : string = v82 + v79 
            US19_1(v83)
        else
            let v87 : char = v1.[int 0]
            let v88 : int64 = 0L
            let v89 : bool = method124(v87, v88)
            let v90 : bool = v89 = false
            if v90 then
                let v92 : (string -> int32) = String.length
                let v93 : int32 = v92 v1
                let v97 : int32 = 1
                let v103 : int32 = 1 |> int32 
                let v116 : int32 = v93 |> int32 
                let v124 : int32 = v116 - v97
                let v126 : string = v1.[int v103..int v124]
                let v131 : (char -> string) = _.ToString()
                let v132 : string = v131 v87
                let v135 : int64 = System.Convert.ToInt64 v132.Length
                let v136 : int64 = 0L
                let v137 : UH0 = method104(v135, v132, v136)
                let struct (v138 : System.Text.StringBuilder, v139 : int32, v140 : int32) = method105(v137, v2, v3, v4)
                US19_0(v87, v126, v138, v139, v140)
            else
                let v160 : char list = []
                let v162 : char list = ' ' :: v160 
                let v166 : char list = '"' :: v162 
                let v170 : char list = '`' :: v166 
                let v174 : char list = '\\' :: v170 
                let v182 : (char list -> (char [])) = List.toArray
                let v183 : (char []) = v182 v174
                let v186 : string = method109(v183)
                let v215 : string = method112(v87, v186, v2, v3, v4)
                let v218 : string = "parsing.none_of / unexpected char / "
                let v219 : string = v218 + v215 
                US19_1(v219)
    match v224 with
    | US19_1(v244) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US19_0(v225, v226, v227, v228, v229) -> (* Ok *)
        let v231 : (char -> string) = _.ToString()
        let v232 : string = v231 v225
        let v236 : string = v0 + v232 
        method125(v236, v226, v227, v228, v229)
and method127 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US21 =
            if v3 then
                US21_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US21_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US21_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US21_1
        let v19 : char =
            match v15 with
            | US21_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US21_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method127(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v168 : US19 =
        if v4 then
            let v5 : char = '\\'
            let v6 : string = method103(v5, v1, v2, v3)
            let v9 : string = "parsing.p_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v0.[int 0]
            let v15 : bool = v14 = '\\'
            if v15 then
                let v17 : (string -> int32) = String.length
                let v18 : int32 = v17 v0
                let v22 : int32 = 1
                let v28 : int32 = 1 |> int32 
                let v41 : int32 = v18 |> int32 
                let v49 : int32 = v41 - v22
                let v51 : string = v0.[int v28..int v49]
                let v56 : (char -> string) = _.ToString()
                let v57 : string = v56 v14
                let v60 : int64 = System.Convert.ToInt64 v57.Length
                let v61 : int64 = 0L
                let v62 : UH0 = method104(v60, v57, v61)
                let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method105(v62, v1, v2, v3)
                US19_0(v14, v51, v63, v64, v65)
            else
                let v70 : string = "\n"
                let v71 : int32 = v0.IndexOf v70 
                let v74 : int32 = v71 - 1
                let v75 : bool = -2 = v74
                let v83 : int32 =
                    if v75 then
                        let v77 : (string -> int32) = String.length
                        let v78 : int32 = v77 v0
                        let v81 : int32 = v78 + 1
                        v81
                    else
                        let v82 : int32 = v74 + 1
                        v82
                let v85 : int32 = 1
                let v91 : int32 = 0 |> int32 
                let v104 : int32 = v83 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v0.[int v91..int v112]
                let v118 : char = '\\'
                let v119 : string = method106(v118, v2, v3)
                let v122 : string = "parsing.p_char / "
                let v123 : string = v122 + v119 
                let v127 : string = v123 + v70 
                let v131 : (System.Text.StringBuilder -> string) = _.ToString()
                let v132 : string = v131 v1
                let v136 : string = v127 + v132 
                let v140 : string = v136 + v114 
                let v143 : int32 = v3 - 1
                let v144 : int32 = 0
                let v145 : (string -> string) = method107(v143, v144)
                let v146 : string = ""
                let v147 : string = v145 v146
                let v150 : string = "^"
                let v151 : string = v147 + v150 
                let v155 : string = v140 + v70 
                let v159 : string = v155 + v151 
                let v163 : string = v159 + v70 
                US19_1(v163)
    let v239 : US19 =
        match v168 with
        | US19_1(v236) -> (* Error *)
            US19_1(v236)
        | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
            let v174 : bool = "" = v170
            if v174 then
                let v175 : string = method120(v171, v172, v173)
                let v178 : string = "parsing.any_char / unexpected end of input / "
                let v179 : string = v178 + v175 
                US19_1(v179)
            else
                let v183 : char = v170.[int 0]
                let v185 : (string -> int32) = String.length
                let v186 : int32 = v185 v170
                let v190 : int32 = 1
                let v196 : int32 = 1 |> int32 
                let v209 : int32 = v186 |> int32 
                let v217 : int32 = v209 - v190
                let v219 : string = v170.[int v196..int v217]
                let v224 : (char -> string) = _.ToString()
                let v225 : string = v224 v183
                let v228 : int64 = System.Convert.ToInt64 v225.Length
                let v229 : int64 = 0L
                let v230 : UH0 = method104(v228, v225, v229)
                let struct (v231 : System.Text.StringBuilder, v232 : int32, v233 : int32) = method105(v230, v171, v172, v173)
                US19_0(v183, v219, v231, v232, v233)
    match v239 with
    | US19_1(v260) -> (* Error *)
        US20_1(v260)
    | US19_0(v240, v241, v242, v243, v244) -> (* Ok *)
        let v246 : (char -> string) = _.ToString()
        let v247 : string = v246 '\\'
        let v251 : (char -> string) = _.ToString()
        let v252 : string = v251 v240
        let v256 : string = v247 + v252 
        US20_0(v256, v241, v242, v243, v244)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US20 =
    let v4 : bool = "" = v0
    let v168 : US19 =
        if v4 then
            let v5 : char = '`'
            let v6 : string = method103(v5, v1, v2, v3)
            let v9 : string = "parsing.p_char / unexpected end of input / "
            let v10 : string = v9 + v6 
            US19_1(v10)
        else
            let v14 : char = v0.[int 0]
            let v15 : bool = v14 = '`'
            if v15 then
                let v17 : (string -> int32) = String.length
                let v18 : int32 = v17 v0
                let v22 : int32 = 1
                let v28 : int32 = 1 |> int32 
                let v41 : int32 = v18 |> int32 
                let v49 : int32 = v41 - v22
                let v51 : string = v0.[int v28..int v49]
                let v56 : (char -> string) = _.ToString()
                let v57 : string = v56 v14
                let v60 : int64 = System.Convert.ToInt64 v57.Length
                let v61 : int64 = 0L
                let v62 : UH0 = method104(v60, v57, v61)
                let struct (v63 : System.Text.StringBuilder, v64 : int32, v65 : int32) = method105(v62, v1, v2, v3)
                US19_0(v14, v51, v63, v64, v65)
            else
                let v70 : string = "\n"
                let v71 : int32 = v0.IndexOf v70 
                let v74 : int32 = v71 - 1
                let v75 : bool = -2 = v74
                let v83 : int32 =
                    if v75 then
                        let v77 : (string -> int32) = String.length
                        let v78 : int32 = v77 v0
                        let v81 : int32 = v78 + 1
                        v81
                    else
                        let v82 : int32 = v74 + 1
                        v82
                let v85 : int32 = 1
                let v91 : int32 = 0 |> int32 
                let v104 : int32 = v83 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v0.[int v91..int v112]
                let v118 : char = '`'
                let v119 : string = method106(v118, v2, v3)
                let v122 : string = "parsing.p_char / "
                let v123 : string = v122 + v119 
                let v127 : string = v123 + v70 
                let v131 : (System.Text.StringBuilder -> string) = _.ToString()
                let v132 : string = v131 v1
                let v136 : string = v127 + v132 
                let v140 : string = v136 + v114 
                let v143 : int32 = v3 - 1
                let v144 : int32 = 0
                let v145 : (string -> string) = method107(v143, v144)
                let v146 : string = ""
                let v147 : string = v145 v146
                let v150 : string = "^"
                let v151 : string = v147 + v150 
                let v155 : string = v140 + v70 
                let v159 : string = v155 + v151 
                let v163 : string = v159 + v70 
                US19_1(v163)
    let v239 : US19 =
        match v168 with
        | US19_1(v236) -> (* Error *)
            US19_1(v236)
        | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
            let v174 : bool = "" = v170
            if v174 then
                let v175 : string = method120(v171, v172, v173)
                let v178 : string = "parsing.any_char / unexpected end of input / "
                let v179 : string = v178 + v175 
                US19_1(v179)
            else
                let v183 : char = v170.[int 0]
                let v185 : (string -> int32) = String.length
                let v186 : int32 = v185 v170
                let v190 : int32 = 1
                let v196 : int32 = 1 |> int32 
                let v209 : int32 = v186 |> int32 
                let v217 : int32 = v209 - v190
                let v219 : string = v170.[int v196..int v217]
                let v224 : (char -> string) = _.ToString()
                let v225 : string = v224 v183
                let v228 : int64 = System.Convert.ToInt64 v225.Length
                let v229 : int64 = 0L
                let v230 : UH0 = method104(v228, v225, v229)
                let struct (v231 : System.Text.StringBuilder, v232 : int32, v233 : int32) = method105(v230, v171, v172, v173)
                US19_0(v183, v219, v231, v232, v233)
    match v239 with
    | US19_1(v260) -> (* Error *)
        US20_1(v260)
    | US19_0(v240, v241, v242, v243, v244) -> (* Ok *)
        let v246 : (char -> string) = _.ToString()
        let v247 : string = v246 '`'
        let v251 : (char -> string) = _.ToString()
        let v252 : string = v251 v240
        let v256 : string = v247 + v252 
        US20_0(v256, v241, v242, v243, v244)
and method128 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US20 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US20 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US20_1(v15) -> (* Error *)
            method128(v0, v1, v2, v3, v8)
        | US20_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US20_1(v5)
and method129 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method129(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method126 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = '"' :: v20 
            let v26 : char list = '`' :: v22 
            let v30 : char list = '\\' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method109(v39)
            let v67 : string = method110(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method127(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method104(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method105(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = '"' :: v144 
                let v150 : char list = '`' :: v146 
                let v154 : char list = '\\' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method109(v163)
                let v191 : string = method112(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v215 : US20 =
        match v200 with
        | US19_1(v212) -> (* Error *)
            US20_1(v212)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v207 : (char -> string) = _.ToString()
            let v208 : string = v207 v201
            US20_0(v208, v202, v203, v204, v205)
    let v229 : US20 =
        match v215 with
        | US20_1(v221) -> (* Error *)
            let v222 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure38()
            let v223 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure39()
            let v224 : UH3 = UH3_0
            let v225 : UH3 = UH3_1(v223, v224)
            let v226 : UH3 = UH3_1(v222, v225)
            method128(v1, v2, v3, v4, v226)
        | US20_0(v216, v217, v218, v219, v220) -> (* Ok *)
            v215
    match v229 with
    | US20_1(v237) -> (* Error *)
        let v238 : UH2 = UH2_0
        let v239 : UH2 = method129(v0, v238)
        US27_0(v239, v1, v2, v3, v4)
    | US20_0(v230, v231, v232, v233, v234) -> (* Ok *)
        let v235 : UH2 = UH2_1(v230, v0)
        method126(v235, v231, v232, v233, v234)
and method130 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method130(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method131 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v200 : US19 =
        if v5 then
            let v20 : char list = []
            let v22 : char list = '"' :: v20 
            let v26 : char list = '`' :: v22 
            let v30 : char list = '\\' :: v26 
            let v38 : (char list -> (char [])) = List.toArray
            let v39 : (char []) = v38 v30
            let v42 : string = method109(v39)
            let v67 : string = method110(v42, v2, v3, v4)
            let v70 : string = "parsing.none_of / unexpected end of input / "
            let v71 : string = v70 + v67 
            US19_1(v71)
        else
            let v75 : char = v1.[int 0]
            let v76 : int64 = 0L
            let v77 : bool = method127(v75, v76)
            let v78 : bool = v77 = false
            if v78 then
                let v80 : (string -> int32) = String.length
                let v81 : int32 = v80 v1
                let v85 : int32 = 1
                let v91 : int32 = 1 |> int32 
                let v104 : int32 = v81 |> int32 
                let v112 : int32 = v104 - v85
                let v114 : string = v1.[int v91..int v112]
                let v119 : (char -> string) = _.ToString()
                let v120 : string = v119 v75
                let v123 : int64 = System.Convert.ToInt64 v120.Length
                let v124 : int64 = 0L
                let v125 : UH0 = method104(v123, v120, v124)
                let struct (v126 : System.Text.StringBuilder, v127 : int32, v128 : int32) = method105(v125, v2, v3, v4)
                US19_0(v75, v114, v126, v127, v128)
            else
                let v144 : char list = []
                let v146 : char list = '"' :: v144 
                let v150 : char list = '`' :: v146 
                let v154 : char list = '\\' :: v150 
                let v162 : (char list -> (char [])) = List.toArray
                let v163 : (char []) = v162 v154
                let v166 : string = method109(v163)
                let v191 : string = method112(v75, v166, v2, v3, v4)
                let v194 : string = "parsing.none_of / unexpected char / "
                let v195 : string = v194 + v191 
                US19_1(v195)
    let v215 : US20 =
        match v200 with
        | US19_1(v212) -> (* Error *)
            US20_1(v212)
        | US19_0(v201, v202, v203, v204, v205) -> (* Ok *)
            let v207 : (char -> string) = _.ToString()
            let v208 : string = v207 v201
            US20_0(v208, v202, v203, v204, v205)
    match v215 with
    | US20_1(v223) -> (* Error *)
        let v224 : UH2 = UH2_0
        let v225 : UH2 = method129(v0, v224)
        US27_0(v225, v1, v2, v3, v4)
    | US20_0(v216, v217, v218, v219, v220) -> (* Ok *)
        let v221 : UH2 = UH2_1(v216, v0)
        method131(v221, v217, v218, v219, v220)
and method123 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US27 =
    let v5 : bool = "" = v1
    let v224 : US19 =
        if v5 then
            let v24 : char list = []
            let v26 : char list = ' ' :: v24 
            let v30 : char list = '"' :: v26 
            let v34 : char list = '`' :: v30 
            let v38 : char list = '\\' :: v34 
            let v46 : (char list -> (char [])) = List.toArray
            let v47 : (char []) = v46 v38
            let v50 : string = method109(v47)
            let v79 : string = method110(v50, v2, v3, v4)
            let v82 : string = "parsing.none_of / unexpected end of input / "
            let v83 : string = v82 + v79 
            US19_1(v83)
        else
            let v87 : char = v1.[int 0]
            let v88 : int64 = 0L
            let v89 : bool = method124(v87, v88)
            let v90 : bool = v89 = false
            if v90 then
                let v92 : (string -> int32) = String.length
                let v93 : int32 = v92 v1
                let v97 : int32 = 1
                let v103 : int32 = 1 |> int32 
                let v116 : int32 = v93 |> int32 
                let v124 : int32 = v116 - v97
                let v126 : string = v1.[int v103..int v124]
                let v131 : (char -> string) = _.ToString()
                let v132 : string = v131 v87
                let v135 : int64 = System.Convert.ToInt64 v132.Length
                let v136 : int64 = 0L
                let v137 : UH0 = method104(v135, v132, v136)
                let struct (v138 : System.Text.StringBuilder, v139 : int32, v140 : int32) = method105(v137, v2, v3, v4)
                US19_0(v87, v126, v138, v139, v140)
            else
                let v160 : char list = []
                let v162 : char list = ' ' :: v160 
                let v166 : char list = '"' :: v162 
                let v170 : char list = '`' :: v166 
                let v174 : char list = '\\' :: v170 
                let v182 : (char list -> (char [])) = List.toArray
                let v183 : (char []) = v182 v174
                let v186 : string = method109(v183)
                let v215 : string = method112(v87, v186, v2, v3, v4)
                let v218 : string = "parsing.none_of / unexpected char / "
                let v219 : string = v218 + v215 
                US19_1(v219)
    let v244 : US20 =
        match v224 with
        | US19_1(v241) -> (* Error *)
            US20_1(v241)
        | US19_0(v225, v226, v227, v228, v229) -> (* Ok *)
            let v231 : (char -> string) = _.ToString()
            let v232 : string = v231 v225
            let struct (v235 : string, v236 : string, v237 : System.Text.StringBuilder, v238 : int32, v239 : int32) = method125(v232, v226, v227, v228, v229)
            US20_0(v235, v236, v237, v238, v239)
    let v721 : US20 =
        match v244 with
        | US20_1(v250) -> (* Error *)
            let v414 : US19 =
                if v5 then
                    let v251 : char = '"'
                    let v252 : string = method103(v251, v2, v3, v4)
                    let v255 : string = "parsing.p_char / unexpected end of input / "
                    let v256 : string = v255 + v252 
                    US19_1(v256)
                else
                    let v260 : char = v1.[int 0]
                    let v261 : bool = v260 = '"'
                    if v261 then
                        let v263 : (string -> int32) = String.length
                        let v264 : int32 = v263 v1
                        let v268 : int32 = 1
                        let v274 : int32 = 1 |> int32 
                        let v287 : int32 = v264 |> int32 
                        let v295 : int32 = v287 - v268
                        let v297 : string = v1.[int v274..int v295]
                        let v302 : (char -> string) = _.ToString()
                        let v303 : string = v302 v260
                        let v306 : int64 = System.Convert.ToInt64 v303.Length
                        let v307 : int64 = 0L
                        let v308 : UH0 = method104(v306, v303, v307)
                        let struct (v309 : System.Text.StringBuilder, v310 : int32, v311 : int32) = method105(v308, v2, v3, v4)
                        US19_0(v260, v297, v309, v310, v311)
                    else
                        let v316 : string = "\n"
                        let v317 : int32 = v1.IndexOf v316 
                        let v320 : int32 = v317 - 1
                        let v321 : bool = -2 = v320
                        let v329 : int32 =
                            if v321 then
                                let v323 : (string -> int32) = String.length
                                let v324 : int32 = v323 v1
                                let v327 : int32 = v324 + 1
                                v327
                            else
                                let v328 : int32 = v320 + 1
                                v328
                        let v331 : int32 = 1
                        let v337 : int32 = 0 |> int32 
                        let v350 : int32 = v329 |> int32 
                        let v358 : int32 = v350 - v331
                        let v360 : string = v1.[int v337..int v358]
                        let v364 : char = '"'
                        let v365 : string = method106(v364, v3, v4)
                        let v368 : string = "parsing.p_char / "
                        let v369 : string = v368 + v365 
                        let v373 : string = v369 + v316 
                        let v377 : (System.Text.StringBuilder -> string) = _.ToString()
                        let v378 : string = v377 v2
                        let v382 : string = v373 + v378 
                        let v386 : string = v382 + v360 
                        let v389 : int32 = v4 - 1
                        let v390 : int32 = 0
                        let v391 : (string -> string) = method107(v389, v390)
                        let v392 : string = ""
                        let v393 : string = v391 v392
                        let v396 : string = "^"
                        let v397 : string = v393 + v396 
                        let v401 : string = v386 + v316 
                        let v405 : string = v401 + v397 
                        let v409 : string = v405 + v316 
                        US19_1(v409)
            let v650 : US20 =
                match v414 with
                | US19_1(v647) -> (* Error *)
                    US20_1(v647)
                | US19_0(v415, v416, v417, v418, v419) -> (* Ok *)
                    let v420 : UH2 = UH2_0
                    let v421 : US27 = method126(v420, v416, v417, v418, v419)
                    let v454 : US20 =
                        match v421 with
                        | US27_1(v451) -> (* Error *)
                            US20_1(v451)
                        | US27_0(v422, v423, v424, v425, v426) -> (* Ok *)
                            let v427 : string list = []
                            let v428 : string list = method130(v422, v427)
                            let v433 : unit = ()
                            let _let'_v433 =
                                seq {
                                    yield! v428 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v436 : string seq = _let'_v433 
                            let v444 : (string -> (string seq -> string)) = String.concat
                            let v445 : string = ""
                            let v446 : (string seq -> string) = v444 v445
                            let v447 : string = v446 v436
                            US20_0(v447, v423, v424, v425, v426)
                    match v454 with
                    | US20_1(v642) -> (* Error *)
                        let v643 : string = "parsing.between / expected content"
                        US20_1(v643)
                    | US20_0(v455, v456, v457, v458, v459) -> (* Ok *)
                        let v460 : bool = "" = v456
                        let v624 : US19 =
                            if v460 then
                                let v461 : char = '"'
                                let v462 : string = method103(v461, v457, v458, v459)
                                let v465 : string = "parsing.p_char / unexpected end of input / "
                                let v466 : string = v465 + v462 
                                US19_1(v466)
                            else
                                let v470 : char = v456.[int 0]
                                let v471 : bool = v470 = '"'
                                if v471 then
                                    let v473 : (string -> int32) = String.length
                                    let v474 : int32 = v473 v456
                                    let v478 : int32 = 1
                                    let v484 : int32 = 1 |> int32 
                                    let v497 : int32 = v474 |> int32 
                                    let v505 : int32 = v497 - v478
                                    let v507 : string = v456.[int v484..int v505]
                                    let v512 : (char -> string) = _.ToString()
                                    let v513 : string = v512 v470
                                    let v516 : int64 = System.Convert.ToInt64 v513.Length
                                    let v517 : int64 = 0L
                                    let v518 : UH0 = method104(v516, v513, v517)
                                    let struct (v519 : System.Text.StringBuilder, v520 : int32, v521 : int32) = method105(v518, v457, v458, v459)
                                    US19_0(v470, v507, v519, v520, v521)
                                else
                                    let v526 : string = "\n"
                                    let v527 : int32 = v456.IndexOf v526 
                                    let v530 : int32 = v527 - 1
                                    let v531 : bool = -2 = v530
                                    let v539 : int32 =
                                        if v531 then
                                            let v533 : (string -> int32) = String.length
                                            let v534 : int32 = v533 v456
                                            let v537 : int32 = v534 + 1
                                            v537
                                        else
                                            let v538 : int32 = v530 + 1
                                            v538
                                    let v541 : int32 = 1
                                    let v547 : int32 = 0 |> int32 
                                    let v560 : int32 = v539 |> int32 
                                    let v568 : int32 = v560 - v541
                                    let v570 : string = v456.[int v547..int v568]
                                    let v574 : char = '"'
                                    let v575 : string = method106(v574, v458, v459)
                                    let v578 : string = "parsing.p_char / "
                                    let v579 : string = v578 + v575 
                                    let v583 : string = v579 + v526 
                                    let v587 : (System.Text.StringBuilder -> string) = _.ToString()
                                    let v588 : string = v587 v457
                                    let v592 : string = v583 + v588 
                                    let v596 : string = v592 + v570 
                                    let v599 : int32 = v459 - 1
                                    let v600 : int32 = 0
                                    let v601 : (string -> string) = method107(v599, v600)
                                    let v602 : string = ""
                                    let v603 : string = v601 v602
                                    let v606 : string = "^"
                                    let v607 : string = v603 + v606 
                                    let v611 : string = v596 + v526 
                                    let v615 : string = v611 + v607 
                                    let v619 : string = v615 + v526 
                                    US19_1(v619)
                        match v624 with
                        | US19_1(v631) -> (* Error *)
                            let v632 : string = method115(v631, v1, v2, v3, v4, v416, v417, v418, v419, v456, v457, v458, v459)
                            let v635 : string = "parsing.between / expected closing delimiter / "
                            let v636 : string = v635 + v632 
                            US20_1(v636)
                        | US19_0(v625, v626, v627, v628, v629) -> (* Ok *)
                            US20_0(v455, v626, v627, v628, v629)
            match v650 with
            | US20_1(v656) -> (* Error *)
                let v657 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure38()
                let v658 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US20) = closure39()
                let v659 : UH3 = UH3_0
                let v660 : UH3 = UH3_1(v658, v659)
                let v661 : UH3 = UH3_1(v657, v660)
                let v662 : US20 = method128(v1, v2, v3, v4, v661)
                let v673 : US20 =
                    match v662 with
                    | US20_1(v670) -> (* Error *)
                        US20_1(v670)
                    | US20_0(v663, v664, v665, v666, v667) -> (* Ok *)
                        let v668 : string = ""
                        US20_0(v668, v664, v665, v666, v667)
                let v684 : US27 =
                    match v673 with
                    | US20_1(v681) -> (* Error *)
                        US27_1(v681)
                    | US20_0(v674, v675, v676, v677, v678) -> (* Ok *)
                        let v679 : UH2 = UH2_0
                        method131(v679, v675, v676, v677, v678)
                match v684 with
                | US27_1(v714) -> (* Error *)
                    US20_1(v714)
                | US27_0(v685, v686, v687, v688, v689) -> (* Ok *)
                    let v690 : string list = []
                    let v691 : string list = method130(v685, v690)
                    let v696 : unit = ()
                    let _let'_v696 =
                        seq {
                            yield! v691 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v699 : string seq = _let'_v696 
                    let v707 : (string -> (string seq -> string)) = String.concat
                    let v708 : string = ""
                    let v709 : (string seq -> string) = v707 v708
                    let v710 : string = v709 v699
                    US20_0(v710, v686, v687, v688, v689)
            | US20_0(v651, v652, v653, v654, v655) -> (* Ok *)
                v650
        | US20_0(v245, v246, v247, v248, v249) -> (* Ok *)
            v244
    match v721 with
    | US20_1(v786) -> (* Error *)
        let v787 : UH2 = UH2_0
        let v788 : UH2 = method129(v0, v787)
        US27_0(v788, v1, v2, v3, v4)
    | US20_0(v722, v723, v724, v725, v726) -> (* Ok *)
        let v727 : int32 = 0
        let v728 : int32 = method119(v723, v727)
        let v729 : bool = 0 = v728
        let v772 : US22 =
            if v729 then
                let v730 : string = "parsing.spaces1 / expected at least one space"
                US22_1(v730)
            else
                let v733 : (string -> int32) = String.length
                let v734 : int32 = v733 v723
                let v738 : int32 = 1
                let v744 : int32 = v728 |> int32 
                let v757 : int32 = v734 |> int32 
                let v765 : int32 = v757 - v738
                let v767 : string = v723.[int v744..int v765]
                US22_0(v767, v724, v725, v726)
        match v772 with
        | US22_1(v779) -> (* Error *)
            let v780 : UH2 = UH2_0
            let v781 : UH2 = UH2_1(v722, v780)
            let v782 : UH2 = method129(v0, v781)
            US27_0(v782, v723, v724, v725, v726)
        | US22_0(v773, v774, v775, v776) -> (* Ok *)
            let v777 : UH2 = UH2_1(v722, v0)
            method123(v777, v773, v774, v775, v776)
and method122 (v0 : string) : US26 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method102()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US27 = method123(v19, v10, v16, v20, v21)
    match v22 with
    | US27_1(v38) -> (* Error *)
        US26_1(v38)
    | US27_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method130(v23, v28)
        let v33 : (string list -> (string [])) = List.toArray
        let v34 : (string []) = v33 v29
        US26_0(v34)
and method133 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option, v9 : bool) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "file_name"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v0}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "arguments"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"{v1}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v11, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v159 : string = $"{v88}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v11, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v177 : string = "options"
    let v178 : string = $"{v177}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v11, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v52}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v11, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v212 : string = $"{v14}"
    let v220 : unit = ()
    let v221 : (unit -> unit) = closure7(v11, v212)
    let v222 : unit = (fun () -> v221 (); v220) ()
    let v230 : string = "command"
    let v231 : string = $"{v230}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v11, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v52}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v11, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v2}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v11, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v282 : string = $"{v88}"
    let v290 : unit = ()
    let v291 : (unit -> unit) = closure7(v11, v282)
    let v292 : unit = (fun () -> v291 (); v290) ()
    let v300 : string = "cancellation_token"
    let v301 : string = $"{v300}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v11, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v52}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v11, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    (* run_target_args'
    let v338 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v339 : string = "format!(\"{:#?}\", $0)"
    let v340 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v339 
    let v341 : string = "fable_library_rust::String_::fromString($0)"
    let v342 : string = Fable.Core.RustInterop.emitRustExpr v340 v341 
    let _run_target_args'_v338 = v342 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v343 : string = "format!(\"{:#?}\", $0)"
    let v344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v343 
    let v345 : string = "fable_library_rust::String_::fromString($0)"
    let v346 : string = Fable.Core.RustInterop.emitRustExpr v344 v345 
    let _run_target_args'_v338 = v346 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v347 : string = "format!(\"{:#?}\", $0)"
    let v348 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v347 
    let v349 : string = "fable_library_rust::String_::fromString($0)"
    let v350 : string = Fable.Core.RustInterop.emitRustExpr v348 v349 
    let _run_target_args'_v338 = v350 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v352 : string = $"%A{v3}"
    let _run_target_args'_v338 = v352 
    #endif
#if FABLE_COMPILER_PYTHON
    let v356 : string = $"%A{v3}"
    let _run_target_args'_v338 = v356 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v360 : string = $"%A{v3}"
    let _run_target_args'_v338 = v360 
    #endif
#else
    let v364 : string = $"%A{v3}"
    let _run_target_args'_v338 = v364 
    #endif
    let v367 : string = _run_target_args'_v338 
    let v377 : string = $"{v367}"
    let v385 : unit = ()
    let v386 : (unit -> unit) = closure7(v11, v377)
    let v387 : unit = (fun () -> v386 (); v385) ()
    let v394 : string = $"{v88}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v11, v394)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v412 : string = "environment_variables"
    let v413 : string = $"{v412}"
    let v421 : unit = ()
    let v422 : (unit -> unit) = closure7(v11, v413)
    let v423 : unit = (fun () -> v422 (); v421) ()
    let v430 : string = $"{v52}"
    let v438 : unit = ()
    let v439 : (unit -> unit) = closure7(v11, v430)
    let v440 : unit = (fun () -> v439 (); v438) ()
    let v448 : string = $"%A{v4}"
    let v452 : string = $"{v448}"
    let v460 : unit = ()
    let v461 : (unit -> unit) = closure7(v11, v452)
    let v462 : unit = (fun () -> v461 (); v460) ()
    let v469 : string = $"{v88}"
    let v477 : unit = ()
    let v478 : (unit -> unit) = closure7(v11, v469)
    let v479 : unit = (fun () -> v478 (); v477) ()
    let v487 : string = "on_line"
    let v488 : string = $"{v487}"
    let v496 : unit = ()
    let v497 : (unit -> unit) = closure7(v11, v488)
    let v498 : unit = (fun () -> v497 (); v496) ()
    let v505 : string = $"{v52}"
    let v513 : unit = ()
    let v514 : (unit -> unit) = closure7(v11, v505)
    let v515 : unit = (fun () -> v514 (); v513) ()
    (* run_target_args'
    let v525 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : string = "format!(\"{:#?}\", $0)"
    let v527 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v526 
    let v528 : string = "fable_library_rust::String_::fromString($0)"
    let v529 : string = Fable.Core.RustInterop.emitRustExpr v527 v528 
    let _run_target_args'_v525 = v529 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v530 : string = "format!(\"{:#?}\", $0)"
    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v530 
    let v532 : string = "fable_library_rust::String_::fromString($0)"
    let v533 : string = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let _run_target_args'_v525 = v533 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v534 : string = "format!(\"{:#?}\", $0)"
    let v535 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v534 
    let v536 : string = "fable_library_rust::String_::fromString($0)"
    let v537 : string = Fable.Core.RustInterop.emitRustExpr v535 v536 
    let _run_target_args'_v525 = v537 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v539 : string = $"%A{v5}"
    let _run_target_args'_v525 = v539 
    #endif
#if FABLE_COMPILER_PYTHON
    let v543 : string = $"%A{v5}"
    let _run_target_args'_v525 = v543 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v547 : string = $"%A{v5}"
    let _run_target_args'_v525 = v547 
    #endif
#else
    let v551 : string = $"%A{v5}"
    let _run_target_args'_v525 = v551 
    #endif
    let v554 : string = _run_target_args'_v525 
    let v564 : string = $"{v554}"
    let v572 : unit = ()
    let v573 : (unit -> unit) = closure7(v11, v564)
    let v574 : unit = (fun () -> v573 (); v572) ()
    let v581 : string = $"{v88}"
    let v589 : unit = ()
    let v590 : (unit -> unit) = closure7(v11, v581)
    let v591 : unit = (fun () -> v590 (); v589) ()
    let v599 : string = "stdin"
    let v600 : string = $"{v599}"
    let v608 : unit = ()
    let v609 : (unit -> unit) = closure7(v11, v600)
    let v610 : unit = (fun () -> v609 (); v608) ()
    let v617 : string = $"{v52}"
    let v625 : unit = ()
    let v626 : (unit -> unit) = closure7(v11, v617)
    let v627 : unit = (fun () -> v626 (); v625) ()
    (* run_target_args'
    let v637 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v638 : string = "format!(\"{:#?}\", $0)"
    let v639 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v638 
    let v640 : string = "fable_library_rust::String_::fromString($0)"
    let v641 : string = Fable.Core.RustInterop.emitRustExpr v639 v640 
    let _run_target_args'_v637 = v641 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v637 = v645 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v637 = v649 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v651 : string = $"%A{v6}"
    let _run_target_args'_v637 = v651 
    #endif
#if FABLE_COMPILER_PYTHON
    let v655 : string = $"%A{v6}"
    let _run_target_args'_v637 = v655 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v6}"
    let _run_target_args'_v637 = v659 
    #endif
#else
    let v663 : string = $"%A{v6}"
    let _run_target_args'_v637 = v663 
    #endif
    let v666 : string = _run_target_args'_v637 
    let v676 : string = $"{v666}"
    let v684 : unit = ()
    let v685 : (unit -> unit) = closure7(v11, v676)
    let v686 : unit = (fun () -> v685 (); v684) ()
    let v693 : string = $"{v88}"
    let v701 : unit = ()
    let v702 : (unit -> unit) = closure7(v11, v693)
    let v703 : unit = (fun () -> v702 (); v701) ()
    let v711 : string = "trace"
    let v712 : string = $"{v711}"
    let v720 : unit = ()
    let v721 : (unit -> unit) = closure7(v11, v712)
    let v722 : unit = (fun () -> v721 (); v720) ()
    let v729 : string = $"{v52}"
    let v737 : unit = ()
    let v738 : (unit -> unit) = closure7(v11, v729)
    let v739 : unit = (fun () -> v738 (); v737) ()
    let v747 : string =
        if v7 then
            let v745 : string = "true"
            v745
        else
            let v746 : string = "false"
            v746
    let v749 : string = $"{v747}"
    let v757 : unit = ()
    let v758 : (unit -> unit) = closure7(v11, v749)
    let v759 : unit = (fun () -> v758 (); v757) ()
    let v766 : string = $"{v88}"
    let v774 : unit = ()
    let v775 : (unit -> unit) = closure7(v11, v766)
    let v776 : unit = (fun () -> v775 (); v774) ()
    let v784 : string = "working_directory"
    let v785 : string = $"{v784}"
    let v793 : unit = ()
    let v794 : (unit -> unit) = closure7(v11, v785)
    let v795 : unit = (fun () -> v794 (); v793) ()
    let v802 : string = $"{v52}"
    let v810 : unit = ()
    let v811 : (unit -> unit) = closure7(v11, v802)
    let v812 : unit = (fun () -> v811 (); v810) ()
    (* run_target_args'
    let v822 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v823 : string = "format!(\"{:#?}\", $0)"
    let v824 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v823 
    let v825 : string = "fable_library_rust::String_::fromString($0)"
    let v826 : string = Fable.Core.RustInterop.emitRustExpr v824 v825 
    let _run_target_args'_v822 = v826 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v827 : string = "format!(\"{:#?}\", $0)"
    let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v827 
    let v829 : string = "fable_library_rust::String_::fromString($0)"
    let v830 : string = Fable.Core.RustInterop.emitRustExpr v828 v829 
    let _run_target_args'_v822 = v830 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v831 : string = "format!(\"{:#?}\", $0)"
    let v832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v831 
    let v833 : string = "fable_library_rust::String_::fromString($0)"
    let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
    let _run_target_args'_v822 = v834 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v836 : string = $"%A{v8}"
    let _run_target_args'_v822 = v836 
    #endif
#if FABLE_COMPILER_PYTHON
    let v840 : string = $"%A{v8}"
    let _run_target_args'_v822 = v840 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v844 : string = $"%A{v8}"
    let _run_target_args'_v822 = v844 
    #endif
#else
    let v848 : string = $"%A{v8}"
    let _run_target_args'_v822 = v848 
    #endif
    let v851 : string = _run_target_args'_v822 
    let v861 : string = $"{v851}"
    let v869 : unit = ()
    let v870 : (unit -> unit) = closure7(v11, v861)
    let v871 : unit = (fun () -> v870 (); v869) ()
    let v878 : string = $"{v88}"
    let v886 : unit = ()
    let v887 : (unit -> unit) = closure7(v11, v878)
    let v888 : unit = (fun () -> v887 (); v886) ()
    let v896 : string = "stderr"
    let v897 : string = $"{v896}"
    let v905 : unit = ()
    let v906 : (unit -> unit) = closure7(v11, v897)
    let v907 : unit = (fun () -> v906 (); v905) ()
    let v914 : string = $"{v52}"
    let v922 : unit = ()
    let v923 : (unit -> unit) = closure7(v11, v914)
    let v924 : unit = (fun () -> v923 (); v922) ()
    let v932 : string =
        if v9 then
            let v930 : string = "true"
            v930
        else
            let v931 : string = "false"
            v931
    let v934 : string = $"{v932}"
    let v942 : unit = ()
    let v943 : (unit -> unit) = closure7(v11, v934)
    let v944 : unit = (fun () -> v943 (); v942) ()
    let v952 : string = " }"
    let v953 : string = $"{v952}"
    let v961 : unit = ()
    let v962 : (unit -> unit) = closure7(v11, v953)
    let v963 : unit = (fun () -> v962 (); v961) ()
    let v970 : string = $"{v952}"
    let v978 : unit = ()
    let v979 : (unit -> unit) = closure7(v11, v970)
    let v980 : unit = (fun () -> v979 (); v978) ()
    let v986 : string = v11.l0
    v986
and method132 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option, v17 : bool) : string =
    let v18 : string = method133(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method17(v62)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    let v73 : bool = v72 = false
    let v311 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method11()
            let v134 : string = $"%A{v9}"
            let v137 : string = method132(v113, v114, v115, v116, v117, v118, v131, v132, v8, v134, v0, v1, v2, v3, v4, v5, v6, v7)
            let v152 : unit = ()
            let v153 : unit = (fun () -> v25 (); v152) ()
            let struct (v176 : Mut0, v177 : Mut1, v178 : Mut2, v179 : Mut3, v180 : Mut4, v181 : int64 option) = TraceState.trace_state.Value
            let v196 : unit = ()
            let v197 : (unit -> unit) = closure8(v176)
            let v198 : unit = (fun () -> v197 (); v196) ()
            let v201 : (string -> unit) = closure9()
            (* run_target_args'
            let v202 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v203 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v203 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v137 v204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v205 : string = v179.l0
            let v206 : bool = v205 = ""
            let v221 : string =
                if v206 then
                    v137
                else
                    let v207 : bool = v137 = ""
                    if v207 then
                        let v208 : string = v179.l0
                        v208
                    else
                        let v209 : string = v179.l0
                        let v212 : string = "\n"
                        let v213 : string = v209 + v212 
                        let v217 : string = v213 + v137 
                        v217
            (* run_target_args'
            let v226 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v227 
            let _run_target_args'_v226 = v228 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v229 : string = "&*$0"
            let v230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v229 
            let _run_target_args'_v226 = v230 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v231 : string = "&*$0"
            let v232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v221 v231 
            let _run_target_args'_v226 = v232 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v238 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v242 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v242 
            #endif
#else
            let v246 : Ref<Str> = v221 |> unbox<Ref<Str>>
            let _run_target_args'_v226 = v246 
            #endif
            let v249 : Ref<Str> = _run_target_args'_v226 
            let v258 : string = $"$0.chars()"
            let v259 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v249 v258 
            let v260 : string = "$0"
            let v261 : _ = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "$0.collect::<Vec<_>>()"
            let v263 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v265 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v267 : bool = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "x"
            let v269 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v268 
            let v270 : string = "String::from_iter($0)"
            let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v269 v270 
            let v272 : string = "true; $0 }).collect::<Vec<_>>()"
            let v273 : bool = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v274 : string = "_vec_map"
            let v275 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v274 
            let v276 : string = "$0.len()"
            let v277 : unativeint = Fable.Core.RustInterop.emitRustExpr v275 v276 
            let v283 : int32 = v277 |> int32 
            let v293 : string = ""
            let v294 : bool = v137 <> v293 
            let v298 : bool =
                if v294 then
                    let v297 : bool = v283 <= 1
                    v297
                else
                    false
            if v298 then
                v179.l0 <- v221
                ()
            else
                v179.l0 <- v293
                let v299 : string = "true; $0.into_iter().for_each(|x| { //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v275 v299 
                let v301 : string = "x"
                let v302 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
                let v305 : string = $"true"
                let v306 : bool = Fable.Core.RustInterop.emitRustExpr () v305 
                let v307 : string = "true; }); //"
                let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v201 v137
            #endif
#if FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v201 v137
            #endif
#else
            v201 v137
            #endif
            // run_target_args' is_unit
            let v309 : (string -> unit) = v177.l0
            v309 v137
            US6_0(v176, v177, v178, v179, v180, v181)
    
    ()
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method134 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US28 =
    US28_0(v0)
and method135 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) =
    closure42()
and closure43 () (v0 : std_string_String) : US28 =
    US28_1(v0)
and method136 () : (std_string_String -> US28) =
    closure43()
and method138 (v0 : std_string_String, v1 : string, v2 : string, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option, v10 : bool) : string =
    let v11 : string = method13()
    let v12 : Mut3 = {l0 = v11} : Mut3
    let v15 : string = "{ "
    let v16 : string = $"{v15}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v12, v16)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v34 : string = "error"
    let v35 : string = $"{v34}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v12, v35)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v53 : string = " = "
    let v54 : string = $"{v53}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v12, v54)
    let v64 : unit = (fun () -> v63 (); v62) ()
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "format!(\"{:#?}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "format!(\"{:#?}\", $0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v79 
    let v81 : string = "fable_library_rust::String_::fromString($0)"
    let v82 : string = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let _run_target_args'_v74 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v83 : string = "format!(\"{:#?}\", $0)"
    let v84 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v83 
    let v85 : string = "fable_library_rust::String_::fromString($0)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let _run_target_args'_v74 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : string = $"%A{v0}"
    let _run_target_args'_v74 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v92 : string = $"%A{v0}"
    let _run_target_args'_v74 = v92 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : string = $"%A{v0}"
    let _run_target_args'_v74 = v96 
    #endif
#else
    let v100 : string = $"%A{v0}"
    let _run_target_args'_v74 = v100 
    #endif
    let v103 : string = _run_target_args'_v74 
    let v113 : string = $"{v103}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v12, v113)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v131 : string = "; "
    let v132 : string = $"{v131}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v12, v132)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v150 : string = "file_name"
    let v151 : string = $"{v150}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v12, v151)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v168 : string = $"{v53}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v12, v168)
    let v178 : unit = (fun () -> v177 (); v176) ()
    let v185 : string = $"{v1}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v12, v185)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v202 : string = $"{v131}"
    let v210 : unit = ()
    let v211 : (unit -> unit) = closure7(v12, v202)
    let v212 : unit = (fun () -> v211 (); v210) ()
    let v220 : string = "arguments"
    let v221 : string = $"{v220}"
    let v229 : unit = ()
    let v230 : (unit -> unit) = closure7(v12, v221)
    let v231 : unit = (fun () -> v230 (); v229) ()
    let v238 : string = $"{v53}"
    let v246 : unit = ()
    let v247 : (unit -> unit) = closure7(v12, v238)
    let v248 : unit = (fun () -> v247 (); v246) ()
    let v255 : string = $"{v2}"
    let v263 : unit = ()
    let v264 : (unit -> unit) = closure7(v12, v255)
    let v265 : unit = (fun () -> v264 (); v263) ()
    let v272 : string = $"{v131}"
    let v280 : unit = ()
    let v281 : (unit -> unit) = closure7(v12, v272)
    let v282 : unit = (fun () -> v281 (); v280) ()
    let v290 : string = "options"
    let v291 : string = $"{v290}"
    let v299 : unit = ()
    let v300 : (unit -> unit) = closure7(v12, v291)
    let v301 : unit = (fun () -> v300 (); v299) ()
    let v308 : string = $"{v53}"
    let v316 : unit = ()
    let v317 : (unit -> unit) = closure7(v12, v308)
    let v318 : unit = (fun () -> v317 (); v316) ()
    let v325 : string = $"{v15}"
    let v333 : unit = ()
    let v334 : (unit -> unit) = closure7(v12, v325)
    let v335 : unit = (fun () -> v334 (); v333) ()
    let v343 : string = "command"
    let v344 : string = $"{v343}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v12, v344)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v361 : string = $"{v53}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v12, v361)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v378 : string = $"{v3}"
    let v386 : unit = ()
    let v387 : (unit -> unit) = closure7(v12, v378)
    let v388 : unit = (fun () -> v387 (); v386) ()
    let v395 : string = $"{v131}"
    let v403 : unit = ()
    let v404 : (unit -> unit) = closure7(v12, v395)
    let v405 : unit = (fun () -> v404 (); v403) ()
    let v413 : string = "cancellation_token"
    let v414 : string = $"{v413}"
    let v422 : unit = ()
    let v423 : (unit -> unit) = closure7(v12, v414)
    let v424 : unit = (fun () -> v423 (); v422) ()
    let v431 : string = $"{v53}"
    let v439 : unit = ()
    let v440 : (unit -> unit) = closure7(v12, v431)
    let v441 : unit = (fun () -> v440 (); v439) ()
    (* run_target_args'
    let v451 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v452 : string = "format!(\"{:#?}\", $0)"
    let v453 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v452 
    let v454 : string = "fable_library_rust::String_::fromString($0)"
    let v455 : string = Fable.Core.RustInterop.emitRustExpr v453 v454 
    let _run_target_args'_v451 = v455 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v456 : string = "format!(\"{:#?}\", $0)"
    let v457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v456 
    let v458 : string = "fable_library_rust::String_::fromString($0)"
    let v459 : string = Fable.Core.RustInterop.emitRustExpr v457 v458 
    let _run_target_args'_v451 = v459 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v460 : string = "format!(\"{:#?}\", $0)"
    let v461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v460 
    let v462 : string = "fable_library_rust::String_::fromString($0)"
    let v463 : string = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let _run_target_args'_v451 = v463 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v465 : string = $"%A{v4}"
    let _run_target_args'_v451 = v465 
    #endif
#if FABLE_COMPILER_PYTHON
    let v469 : string = $"%A{v4}"
    let _run_target_args'_v451 = v469 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v473 : string = $"%A{v4}"
    let _run_target_args'_v451 = v473 
    #endif
#else
    let v477 : string = $"%A{v4}"
    let _run_target_args'_v451 = v477 
    #endif
    let v480 : string = _run_target_args'_v451 
    let v490 : string = $"{v480}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v12, v490)
    let v500 : unit = (fun () -> v499 (); v498) ()
    let v507 : string = $"{v131}"
    let v515 : unit = ()
    let v516 : (unit -> unit) = closure7(v12, v507)
    let v517 : unit = (fun () -> v516 (); v515) ()
    let v525 : string = "environment_variables"
    let v526 : string = $"{v525}"
    let v534 : unit = ()
    let v535 : (unit -> unit) = closure7(v12, v526)
    let v536 : unit = (fun () -> v535 (); v534) ()
    let v543 : string = $"{v53}"
    let v551 : unit = ()
    let v552 : (unit -> unit) = closure7(v12, v543)
    let v553 : unit = (fun () -> v552 (); v551) ()
    let v561 : string = $"%A{v5}"
    let v565 : string = $"{v561}"
    let v573 : unit = ()
    let v574 : (unit -> unit) = closure7(v12, v565)
    let v575 : unit = (fun () -> v574 (); v573) ()
    let v582 : string = $"{v131}"
    let v590 : unit = ()
    let v591 : (unit -> unit) = closure7(v12, v582)
    let v592 : unit = (fun () -> v591 (); v590) ()
    let v600 : string = "on_line"
    let v601 : string = $"{v600}"
    let v609 : unit = ()
    let v610 : (unit -> unit) = closure7(v12, v601)
    let v611 : unit = (fun () -> v610 (); v609) ()
    let v618 : string = $"{v53}"
    let v626 : unit = ()
    let v627 : (unit -> unit) = closure7(v12, v618)
    let v628 : unit = (fun () -> v627 (); v626) ()
    (* run_target_args'
    let v638 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v639 : string = "format!(\"{:#?}\", $0)"
    let v640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v639 
    let v641 : string = "fable_library_rust::String_::fromString($0)"
    let v642 : string = Fable.Core.RustInterop.emitRustExpr v640 v641 
    let _run_target_args'_v638 = v642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v643 : string = "format!(\"{:#?}\", $0)"
    let v644 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v643 
    let v645 : string = "fable_library_rust::String_::fromString($0)"
    let v646 : string = Fable.Core.RustInterop.emitRustExpr v644 v645 
    let _run_target_args'_v638 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v647 : string = "format!(\"{:#?}\", $0)"
    let v648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v647 
    let v649 : string = "fable_library_rust::String_::fromString($0)"
    let v650 : string = Fable.Core.RustInterop.emitRustExpr v648 v649 
    let _run_target_args'_v638 = v650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : string = $"%A{v6}"
    let _run_target_args'_v638 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v656 : string = $"%A{v6}"
    let _run_target_args'_v638 = v656 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v660 : string = $"%A{v6}"
    let _run_target_args'_v638 = v660 
    #endif
#else
    let v664 : string = $"%A{v6}"
    let _run_target_args'_v638 = v664 
    #endif
    let v667 : string = _run_target_args'_v638 
    let v677 : string = $"{v667}"
    let v685 : unit = ()
    let v686 : (unit -> unit) = closure7(v12, v677)
    let v687 : unit = (fun () -> v686 (); v685) ()
    let v694 : string = $"{v131}"
    let v702 : unit = ()
    let v703 : (unit -> unit) = closure7(v12, v694)
    let v704 : unit = (fun () -> v703 (); v702) ()
    let v712 : string = "stdin"
    let v713 : string = $"{v712}"
    let v721 : unit = ()
    let v722 : (unit -> unit) = closure7(v12, v713)
    let v723 : unit = (fun () -> v722 (); v721) ()
    let v730 : string = $"{v53}"
    let v738 : unit = ()
    let v739 : (unit -> unit) = closure7(v12, v730)
    let v740 : unit = (fun () -> v739 (); v738) ()
    (* run_target_args'
    let v750 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v751 : string = "format!(\"{:#?}\", $0)"
    let v752 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v751 
    let v753 : string = "fable_library_rust::String_::fromString($0)"
    let v754 : string = Fable.Core.RustInterop.emitRustExpr v752 v753 
    let _run_target_args'_v750 = v754 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v755 : string = "format!(\"{:#?}\", $0)"
    let v756 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v755 
    let v757 : string = "fable_library_rust::String_::fromString($0)"
    let v758 : string = Fable.Core.RustInterop.emitRustExpr v756 v757 
    let _run_target_args'_v750 = v758 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v759 : string = "format!(\"{:#?}\", $0)"
    let v760 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v759 
    let v761 : string = "fable_library_rust::String_::fromString($0)"
    let v762 : string = Fable.Core.RustInterop.emitRustExpr v760 v761 
    let _run_target_args'_v750 = v762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v764 : string = $"%A{v7}"
    let _run_target_args'_v750 = v764 
    #endif
#if FABLE_COMPILER_PYTHON
    let v768 : string = $"%A{v7}"
    let _run_target_args'_v750 = v768 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v772 : string = $"%A{v7}"
    let _run_target_args'_v750 = v772 
    #endif
#else
    let v776 : string = $"%A{v7}"
    let _run_target_args'_v750 = v776 
    #endif
    let v779 : string = _run_target_args'_v750 
    let v789 : string = $"{v779}"
    let v797 : unit = ()
    let v798 : (unit -> unit) = closure7(v12, v789)
    let v799 : unit = (fun () -> v798 (); v797) ()
    let v806 : string = $"{v131}"
    let v814 : unit = ()
    let v815 : (unit -> unit) = closure7(v12, v806)
    let v816 : unit = (fun () -> v815 (); v814) ()
    let v824 : string = "trace"
    let v825 : string = $"{v824}"
    let v833 : unit = ()
    let v834 : (unit -> unit) = closure7(v12, v825)
    let v835 : unit = (fun () -> v834 (); v833) ()
    let v842 : string = $"{v53}"
    let v850 : unit = ()
    let v851 : (unit -> unit) = closure7(v12, v842)
    let v852 : unit = (fun () -> v851 (); v850) ()
    let v860 : string =
        if v8 then
            let v858 : string = "true"
            v858
        else
            let v859 : string = "false"
            v859
    let v862 : string = $"{v860}"
    let v870 : unit = ()
    let v871 : (unit -> unit) = closure7(v12, v862)
    let v872 : unit = (fun () -> v871 (); v870) ()
    let v879 : string = $"{v131}"
    let v887 : unit = ()
    let v888 : (unit -> unit) = closure7(v12, v879)
    let v889 : unit = (fun () -> v888 (); v887) ()
    let v897 : string = "working_directory"
    let v898 : string = $"{v897}"
    let v906 : unit = ()
    let v907 : (unit -> unit) = closure7(v12, v898)
    let v908 : unit = (fun () -> v907 (); v906) ()
    let v915 : string = $"{v53}"
    let v923 : unit = ()
    let v924 : (unit -> unit) = closure7(v12, v915)
    let v925 : unit = (fun () -> v924 (); v923) ()
    (* run_target_args'
    let v935 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v936 : string = "format!(\"{:#?}\", $0)"
    let v937 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v936 
    let v938 : string = "fable_library_rust::String_::fromString($0)"
    let v939 : string = Fable.Core.RustInterop.emitRustExpr v937 v938 
    let _run_target_args'_v935 = v939 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v940 : string = "format!(\"{:#?}\", $0)"
    let v941 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v940 
    let v942 : string = "fable_library_rust::String_::fromString($0)"
    let v943 : string = Fable.Core.RustInterop.emitRustExpr v941 v942 
    let _run_target_args'_v935 = v943 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v944 : string = "format!(\"{:#?}\", $0)"
    let v945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v944 
    let v946 : string = "fable_library_rust::String_::fromString($0)"
    let v947 : string = Fable.Core.RustInterop.emitRustExpr v945 v946 
    let _run_target_args'_v935 = v947 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v949 : string = $"%A{v9}"
    let _run_target_args'_v935 = v949 
    #endif
#if FABLE_COMPILER_PYTHON
    let v953 : string = $"%A{v9}"
    let _run_target_args'_v935 = v953 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v957 : string = $"%A{v9}"
    let _run_target_args'_v935 = v957 
    #endif
#else
    let v961 : string = $"%A{v9}"
    let _run_target_args'_v935 = v961 
    #endif
    let v964 : string = _run_target_args'_v935 
    let v974 : string = $"{v964}"
    let v982 : unit = ()
    let v983 : (unit -> unit) = closure7(v12, v974)
    let v984 : unit = (fun () -> v983 (); v982) ()
    let v991 : string = $"{v131}"
    let v999 : unit = ()
    let v1000 : (unit -> unit) = closure7(v12, v991)
    let v1001 : unit = (fun () -> v1000 (); v999) ()
    let v1009 : string = "stderr"
    let v1010 : string = $"{v1009}"
    let v1018 : unit = ()
    let v1019 : (unit -> unit) = closure7(v12, v1010)
    let v1020 : unit = (fun () -> v1019 (); v1018) ()
    let v1027 : string = $"{v53}"
    let v1035 : unit = ()
    let v1036 : (unit -> unit) = closure7(v12, v1027)
    let v1037 : unit = (fun () -> v1036 (); v1035) ()
    let v1045 : string =
        if v10 then
            let v1043 : string = "true"
            v1043
        else
            let v1044 : string = "false"
            v1044
    let v1047 : string = $"{v1045}"
    let v1055 : unit = ()
    let v1056 : (unit -> unit) = closure7(v12, v1047)
    let v1057 : unit = (fun () -> v1056 (); v1055) ()
    let v1065 : string = " }"
    let v1066 : string = $"{v1065}"
    let v1074 : unit = ()
    let v1075 : (unit -> unit) = closure7(v12, v1066)
    let v1076 : unit = (fun () -> v1075 (); v1074) ()
    let v1083 : string = $"{v1065}"
    let v1091 : unit = ()
    let v1092 : (unit -> unit) = closure7(v12, v1083)
    let v1093 : unit = (fun () -> v1092 (); v1091) ()
    let v1099 : string = v12.l0
    v1099
and method137 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option, v18 : bool) : string =
    let v19 : string = method138(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
    let v20 : int64 = v0.l0
    let v23 : string = " "
    let v24 : string = v6 + v23 
    let v28 : string = v24 + v7 
    let v33 : string = " #"
    let v34 : string = v28 + v33 
    let v38 : (int64 -> string) = _.ToString()
    let v39 : string = v38 v20
    let v43 : string = v34 + v39 
    let v47 : string = v43 + v23 
    let v52 : string = "runtime.execute_with_options / child error"
    let v53 : string = v47 + v52 
    let v58 : string = " / "
    let v59 : string = v53 + v58 
    let v63 : string = v59 + v19 
    method17(v63)
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>, v10 : std_string_String) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    let v74 : bool = v73 = false
    let v312 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method80()
            let v135 : string = $"%A{v9}"
            let v138 : string = method137(v114, v115, v116, v117, v118, v119, v132, v133, v10, v8, v135, v0, v1, v2, v3, v4, v5, v6, v7)
            let v153 : unit = ()
            let v154 : unit = (fun () -> v26 (); v153) ()
            let struct (v177 : Mut0, v178 : Mut1, v179 : Mut2, v180 : Mut3, v181 : Mut4, v182 : int64 option) = TraceState.trace_state.Value
            let v197 : unit = ()
            let v198 : (unit -> unit) = closure8(v177)
            let v199 : unit = (fun () -> v198 (); v197) ()
            let v202 : (string -> unit) = closure9()
            (* run_target_args'
            let v203 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v204 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v205 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v205 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v206 : string = v180.l0
            let v207 : bool = v206 = ""
            let v222 : string =
                if v207 then
                    v138
                else
                    let v208 : bool = v138 = ""
                    if v208 then
                        let v209 : string = v180.l0
                        v209
                    else
                        let v210 : string = v180.l0
                        let v213 : string = "\n"
                        let v214 : string = v210 + v213 
                        let v218 : string = v214 + v138 
                        v218
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "&*$0"
            let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "&*$0"
            let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v235 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v235 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v243 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v243 
            #endif
#else
            let v247 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v247 
            #endif
            let v250 : Ref<Str> = _run_target_args'_v227 
            let v259 : string = $"$0.chars()"
            let v260 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "$0"
            let v262 : _ = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0.collect::<Vec<_>>()"
            let v264 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v266 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "x"
            let v270 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "String::from_iter($0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "true; $0 }).collect::<Vec<_>>()"
            let v274 : bool = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v275 : string = "_vec_map"
            let v276 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v275 
            let v277 : string = "$0.len()"
            let v278 : unativeint = Fable.Core.RustInterop.emitRustExpr v276 v277 
            let v284 : int32 = v278 |> int32 
            let v294 : string = ""
            let v295 : bool = v138 <> v294 
            let v299 : bool =
                if v295 then
                    let v298 : bool = v284 <= 1
                    v298
                else
                    false
            if v299 then
                v180.l0 <- v222
                ()
            else
                v180.l0 <- v294
                let v300 : string = "true; $0.into_iter().for_each(|x| { //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v276 v300 
                let v302 : string = "x"
                let v303 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr v303 v304 
                let v306 : string = $"true"
                let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
                let v308 : string = "true; }); //"
                let v309 : bool = Fable.Core.RustInterop.emitRustExpr () v308 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v202 v138
            #endif
#if FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#else
            v202 v138
            #endif
            // run_target_args' is_unit
            let v310 : (string -> unit) = v178.l0
            v310 v138
            US6_0(v177, v178, v179, v180, v181, v182)
    
    ()
and method139 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method140 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method141 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method142 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method143 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US30 =
    US30_0(v0)
and method144 () : (std_string_String -> US30) =
    closure48()
and closure49 () (v0 : std_string_String) : US30 =
    US30_1(v0)
and method145 () : (std_string_String -> US30) =
    closure49()
and method147 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "trace'"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v63 : string =
        if v0 then
            let v61 : string = "true"
            v61
        else
            let v62 : string = "false"
            v62
    let v65 : string = $"{v63}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "e"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    (* run_target_args'
    let v140 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v141 : string = "format!(\"{:#?}\", $0)"
    let v142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v141 
    let v143 : string = "fable_library_rust::String_::fromString($0)"
    let v144 : string = Fable.Core.RustInterop.emitRustExpr v142 v143 
    let _run_target_args'_v140 = v144 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v145 : string = "format!(\"{:#?}\", $0)"
    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v145 
    let v147 : string = "fable_library_rust::String_::fromString($0)"
    let v148 : string = Fable.Core.RustInterop.emitRustExpr v146 v147 
    let _run_target_args'_v140 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "format!(\"{:#?}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v149 
    let v151 : string = "fable_library_rust::String_::fromString($0)"
    let v152 : string = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let _run_target_args'_v140 = v152 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = $"%A{v1}"
    let _run_target_args'_v140 = v154 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : string = $"%A{v1}"
    let _run_target_args'_v140 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : string = $"%A{v1}"
    let _run_target_args'_v140 = v162 
    #endif
#else
    let v166 : string = $"%A{v1}"
    let _run_target_args'_v140 = v166 
    #endif
    let v169 : string = _run_target_args'_v140 
    let v179 : string = $"{v169}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v3, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v206 : unit = ()
    let v207 : (unit -> unit) = closure7(v3, v198)
    let v208 : unit = (fun () -> v207 (); v206) ()
    let v214 : string = v3.l0
    v214
and method146 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method147(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "runtime.stdio_line"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method146(v105, v106, v107, v108, v109, v110, v123, v124, v0, v1)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method149 () : string =
    let v0 : string = method13()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method148 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method149()
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v41 : string = v37 + v8 
    let v46 : string = " / "
    let v47 : string = v41 + v46 
    let v51 : string = v47 + v9 
    method17(v51)
and closure51 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v301 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : bool = v0 = ""
            let v127 : string =
                if v124 then
                    let v125 : string = ""
                    v125
                else
                    method148(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v16 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method150 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method151 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US31 =
    US31_0(v0)
and method152 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) =
    closure53()
and method153 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US32 =
    US32_0(v0)
and method154 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) =
    closure54()
and method155 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US33 =
    US33_0(v0)
and method156 () : (std_process_Output -> US33) =
    closure55()
and closure56 () (v0 : std_string_String) : US33 =
    US33_1(v0)
and method157 () : (std_string_String -> US33) =
    closure56()
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option, v18 : bool) : string =
    let v19 : string = method138(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
    let v20 : int64 = v0.l0
    let v23 : string = " "
    let v24 : string = v6 + v23 
    let v28 : string = v24 + v7 
    let v33 : string = " #"
    let v34 : string = v28 + v33 
    let v38 : (int64 -> string) = _.ToString()
    let v39 : string = v38 v20
    let v43 : string = v34 + v39 
    let v47 : string = v43 + v23 
    let v52 : string = "runtime.execute_with_options / output error"
    let v53 : string = v47 + v52 
    let v58 : string = " / "
    let v59 : string = v53 + v58 
    let v63 : string = v59 + v19 
    method17(v63)
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : string, v9 : Vec<std_string_String>, v10 : std_string_String) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    let v74 : bool = v73 = false
    let v312 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method80()
            let v135 : string = $"%A{v9}"
            let v138 : string = method158(v114, v115, v116, v117, v118, v119, v132, v133, v10, v8, v135, v0, v1, v2, v3, v4, v5, v6, v7)
            let v153 : unit = ()
            let v154 : unit = (fun () -> v26 (); v153) ()
            let struct (v177 : Mut0, v178 : Mut1, v179 : Mut2, v180 : Mut3, v181 : Mut4, v182 : int64 option) = TraceState.trace_state.Value
            let v197 : unit = ()
            let v198 : (unit -> unit) = closure8(v177)
            let v199 : unit = (fun () -> v198 (); v197) ()
            let v202 : (string -> unit) = closure9()
            (* run_target_args'
            let v203 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v204 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v204 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v205 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v138 v205 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v206 : string = v180.l0
            let v207 : bool = v206 = ""
            let v222 : string =
                if v207 then
                    v138
                else
                    let v208 : bool = v138 = ""
                    if v208 then
                        let v209 : string = v180.l0
                        v209
                    else
                        let v210 : string = v180.l0
                        let v213 : string = "\n"
                        let v214 : string = v210 + v213 
                        let v218 : string = v214 + v138 
                        v218
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "&*$0"
            let v231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "&*$0"
            let v233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v222 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v235 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v235 
            #endif
#if FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v243 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v243 
            #endif
#else
            let v247 : Ref<Str> = v222 |> unbox<Ref<Str>>
            let _run_target_args'_v227 = v247 
            #endif
            let v250 : Ref<Str> = _run_target_args'_v227 
            let v259 : string = $"$0.chars()"
            let v260 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "$0"
            let v262 : _ = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0.collect::<Vec<_>>()"
            let v264 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v266 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "x"
            let v270 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "String::from_iter($0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v270 v271 
            let v273 : string = "true; $0 }).collect::<Vec<_>>()"
            let v274 : bool = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v275 : string = "_vec_map"
            let v276 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v275 
            let v277 : string = "$0.len()"
            let v278 : unativeint = Fable.Core.RustInterop.emitRustExpr v276 v277 
            let v284 : int32 = v278 |> int32 
            let v294 : string = ""
            let v295 : bool = v138 <> v294 
            let v299 : bool =
                if v295 then
                    let v298 : bool = v284 <= 1
                    v298
                else
                    false
            if v299 then
                v180.l0 <- v222
                ()
            else
                v180.l0 <- v294
                let v300 : string = "true; $0.into_iter().for_each(|x| { //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v276 v300 
                let v302 : string = "x"
                let v303 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr v303 v304 
                let v306 : string = $"true"
                let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
                let v308 : string = "true; }); //"
                let v309 : bool = Fable.Core.RustInterop.emitRustExpr () v308 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v202 v138
            #endif
#if FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v202 v138
            #endif
#else
            v202 v138
            #endif
            // run_target_args' is_unit
            let v310 : (string -> unit) = v178.l0
            v310 v138
            US6_0(v177, v178, v179, v180, v181, v182)
    
    ()
and closure58 () (v0 : int32) : US34 =
    US34_0(v0)
and method159 () : (int32 -> US34) =
    closure58()
and method161 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "std_trace_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method160 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method161(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "runtime.execute_with_options / result"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 0 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method83()
            let v125 : int32 = v1.Length
            let v126 : string = method160(v105, v106, v107, v108, v109, v110, v123, v124, v0, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method165 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option, v9 : bool) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "file_name"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v70 : string = $"{v0}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v11, v70)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v88 : string = "; "
    let v89 : string = $"{v88}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v11, v89)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v107 : string = "arguments"
    let v108 : string = $"{v107}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v11, v108)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v125 : string = $"{v52}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v11, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v142 : string = $"%A{v1}"
    let v146 : string = $"{v142}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v11, v146)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v163 : string = $"{v88}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v11, v163)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v181 : string = "options"
    let v182 : string = $"{v181}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v11, v182)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v199 : string = $"{v52}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v11, v199)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v216 : string = $"{v14}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v11, v216)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v234 : string = "command"
    let v235 : string = $"{v234}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v11, v235)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v252 : string = $"{v52}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v11, v252)
    let v262 : unit = (fun () -> v261 (); v260) ()
    let v269 : string = $"{v2}"
    let v277 : unit = ()
    let v278 : (unit -> unit) = closure7(v11, v269)
    let v279 : unit = (fun () -> v278 (); v277) ()
    let v286 : string = $"{v88}"
    let v294 : unit = ()
    let v295 : (unit -> unit) = closure7(v11, v286)
    let v296 : unit = (fun () -> v295 (); v294) ()
    let v304 : string = "cancellation_token"
    let v305 : string = $"{v304}"
    let v313 : unit = ()
    let v314 : (unit -> unit) = closure7(v11, v305)
    let v315 : unit = (fun () -> v314 (); v313) ()
    let v322 : string = $"{v52}"
    let v330 : unit = ()
    let v331 : (unit -> unit) = closure7(v11, v322)
    let v332 : unit = (fun () -> v331 (); v330) ()
    (* run_target_args'
    let v342 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v343 : string = "format!(\"{:#?}\", $0)"
    let v344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v343 
    let v345 : string = "fable_library_rust::String_::fromString($0)"
    let v346 : string = Fable.Core.RustInterop.emitRustExpr v344 v345 
    let _run_target_args'_v342 = v346 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v347 : string = "format!(\"{:#?}\", $0)"
    let v348 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v347 
    let v349 : string = "fable_library_rust::String_::fromString($0)"
    let v350 : string = Fable.Core.RustInterop.emitRustExpr v348 v349 
    let _run_target_args'_v342 = v350 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v351 : string = "format!(\"{:#?}\", $0)"
    let v352 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v351 
    let v353 : string = "fable_library_rust::String_::fromString($0)"
    let v354 : string = Fable.Core.RustInterop.emitRustExpr v352 v353 
    let _run_target_args'_v342 = v354 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v356 : string = $"%A{v3}"
    let _run_target_args'_v342 = v356 
    #endif
#if FABLE_COMPILER_PYTHON
    let v360 : string = $"%A{v3}"
    let _run_target_args'_v342 = v360 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v364 : string = $"%A{v3}"
    let _run_target_args'_v342 = v364 
    #endif
#else
    let v368 : string = $"%A{v3}"
    let _run_target_args'_v342 = v368 
    #endif
    let v371 : string = _run_target_args'_v342 
    let v381 : string = $"{v371}"
    let v389 : unit = ()
    let v390 : (unit -> unit) = closure7(v11, v381)
    let v391 : unit = (fun () -> v390 (); v389) ()
    let v398 : string = $"{v88}"
    let v406 : unit = ()
    let v407 : (unit -> unit) = closure7(v11, v398)
    let v408 : unit = (fun () -> v407 (); v406) ()
    let v416 : string = "environment_variables"
    let v417 : string = $"{v416}"
    let v425 : unit = ()
    let v426 : (unit -> unit) = closure7(v11, v417)
    let v427 : unit = (fun () -> v426 (); v425) ()
    let v434 : string = $"{v52}"
    let v442 : unit = ()
    let v443 : (unit -> unit) = closure7(v11, v434)
    let v444 : unit = (fun () -> v443 (); v442) ()
    let v452 : string = $"%A{v4}"
    let v456 : string = $"{v452}"
    let v464 : unit = ()
    let v465 : (unit -> unit) = closure7(v11, v456)
    let v466 : unit = (fun () -> v465 (); v464) ()
    let v473 : string = $"{v88}"
    let v481 : unit = ()
    let v482 : (unit -> unit) = closure7(v11, v473)
    let v483 : unit = (fun () -> v482 (); v481) ()
    let v491 : string = "on_line"
    let v492 : string = $"{v491}"
    let v500 : unit = ()
    let v501 : (unit -> unit) = closure7(v11, v492)
    let v502 : unit = (fun () -> v501 (); v500) ()
    let v509 : string = $"{v52}"
    let v517 : unit = ()
    let v518 : (unit -> unit) = closure7(v11, v509)
    let v519 : unit = (fun () -> v518 (); v517) ()
    (* run_target_args'
    let v529 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v530 : string = "format!(\"{:#?}\", $0)"
    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v530 
    let v532 : string = "fable_library_rust::String_::fromString($0)"
    let v533 : string = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let _run_target_args'_v529 = v533 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v534 : string = "format!(\"{:#?}\", $0)"
    let v535 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v534 
    let v536 : string = "fable_library_rust::String_::fromString($0)"
    let v537 : string = Fable.Core.RustInterop.emitRustExpr v535 v536 
    let _run_target_args'_v529 = v537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v538 : string = "format!(\"{:#?}\", $0)"
    let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v538 
    let v540 : string = "fable_library_rust::String_::fromString($0)"
    let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
    let _run_target_args'_v529 = v541 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v543 : string = $"%A{v5}"
    let _run_target_args'_v529 = v543 
    #endif
#if FABLE_COMPILER_PYTHON
    let v547 : string = $"%A{v5}"
    let _run_target_args'_v529 = v547 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v551 : string = $"%A{v5}"
    let _run_target_args'_v529 = v551 
    #endif
#else
    let v555 : string = $"%A{v5}"
    let _run_target_args'_v529 = v555 
    #endif
    let v558 : string = _run_target_args'_v529 
    let v568 : string = $"{v558}"
    let v576 : unit = ()
    let v577 : (unit -> unit) = closure7(v11, v568)
    let v578 : unit = (fun () -> v577 (); v576) ()
    let v585 : string = $"{v88}"
    let v593 : unit = ()
    let v594 : (unit -> unit) = closure7(v11, v585)
    let v595 : unit = (fun () -> v594 (); v593) ()
    let v603 : string = "stdin"
    let v604 : string = $"{v603}"
    let v612 : unit = ()
    let v613 : (unit -> unit) = closure7(v11, v604)
    let v614 : unit = (fun () -> v613 (); v612) ()
    let v621 : string = $"{v52}"
    let v629 : unit = ()
    let v630 : (unit -> unit) = closure7(v11, v621)
    let v631 : unit = (fun () -> v630 (); v629) ()
    (* run_target_args'
    let v641 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v642 : string = "format!(\"{:#?}\", $0)"
    let v643 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v642 
    let v644 : string = "fable_library_rust::String_::fromString($0)"
    let v645 : string = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let _run_target_args'_v641 = v645 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v646 : string = "format!(\"{:#?}\", $0)"
    let v647 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v646 
    let v648 : string = "fable_library_rust::String_::fromString($0)"
    let v649 : string = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let _run_target_args'_v641 = v649 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v650 : string = "format!(\"{:#?}\", $0)"
    let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v650 
    let v652 : string = "fable_library_rust::String_::fromString($0)"
    let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
    let _run_target_args'_v641 = v653 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v655 : string = $"%A{v6}"
    let _run_target_args'_v641 = v655 
    #endif
#if FABLE_COMPILER_PYTHON
    let v659 : string = $"%A{v6}"
    let _run_target_args'_v641 = v659 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v663 : string = $"%A{v6}"
    let _run_target_args'_v641 = v663 
    #endif
#else
    let v667 : string = $"%A{v6}"
    let _run_target_args'_v641 = v667 
    #endif
    let v670 : string = _run_target_args'_v641 
    let v680 : string = $"{v670}"
    let v688 : unit = ()
    let v689 : (unit -> unit) = closure7(v11, v680)
    let v690 : unit = (fun () -> v689 (); v688) ()
    let v697 : string = $"{v88}"
    let v705 : unit = ()
    let v706 : (unit -> unit) = closure7(v11, v697)
    let v707 : unit = (fun () -> v706 (); v705) ()
    let v715 : string = "trace"
    let v716 : string = $"{v715}"
    let v724 : unit = ()
    let v725 : (unit -> unit) = closure7(v11, v716)
    let v726 : unit = (fun () -> v725 (); v724) ()
    let v733 : string = $"{v52}"
    let v741 : unit = ()
    let v742 : (unit -> unit) = closure7(v11, v733)
    let v743 : unit = (fun () -> v742 (); v741) ()
    let v751 : string =
        if v7 then
            let v749 : string = "true"
            v749
        else
            let v750 : string = "false"
            v750
    let v753 : string = $"{v751}"
    let v761 : unit = ()
    let v762 : (unit -> unit) = closure7(v11, v753)
    let v763 : unit = (fun () -> v762 (); v761) ()
    let v770 : string = $"{v88}"
    let v778 : unit = ()
    let v779 : (unit -> unit) = closure7(v11, v770)
    let v780 : unit = (fun () -> v779 (); v778) ()
    let v788 : string = "working_directory"
    let v789 : string = $"{v788}"
    let v797 : unit = ()
    let v798 : (unit -> unit) = closure7(v11, v789)
    let v799 : unit = (fun () -> v798 (); v797) ()
    let v806 : string = $"{v52}"
    let v814 : unit = ()
    let v815 : (unit -> unit) = closure7(v11, v806)
    let v816 : unit = (fun () -> v815 (); v814) ()
    (* run_target_args'
    let v826 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v827 : string = "format!(\"{:#?}\", $0)"
    let v828 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v827 
    let v829 : string = "fable_library_rust::String_::fromString($0)"
    let v830 : string = Fable.Core.RustInterop.emitRustExpr v828 v829 
    let _run_target_args'_v826 = v830 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v831 : string = "format!(\"{:#?}\", $0)"
    let v832 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v831 
    let v833 : string = "fable_library_rust::String_::fromString($0)"
    let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
    let _run_target_args'_v826 = v834 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v835 : string = "format!(\"{:#?}\", $0)"
    let v836 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v835 
    let v837 : string = "fable_library_rust::String_::fromString($0)"
    let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
    let _run_target_args'_v826 = v838 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v840 : string = $"%A{v8}"
    let _run_target_args'_v826 = v840 
    #endif
#if FABLE_COMPILER_PYTHON
    let v844 : string = $"%A{v8}"
    let _run_target_args'_v826 = v844 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v848 : string = $"%A{v8}"
    let _run_target_args'_v826 = v848 
    #endif
#else
    let v852 : string = $"%A{v8}"
    let _run_target_args'_v826 = v852 
    #endif
    let v855 : string = _run_target_args'_v826 
    let v865 : string = $"{v855}"
    let v873 : unit = ()
    let v874 : (unit -> unit) = closure7(v11, v865)
    let v875 : unit = (fun () -> v874 (); v873) ()
    let v882 : string = $"{v88}"
    let v890 : unit = ()
    let v891 : (unit -> unit) = closure7(v11, v882)
    let v892 : unit = (fun () -> v891 (); v890) ()
    let v900 : string = "stderr"
    let v901 : string = $"{v900}"
    let v909 : unit = ()
    let v910 : (unit -> unit) = closure7(v11, v901)
    let v911 : unit = (fun () -> v910 (); v909) ()
    let v918 : string = $"{v52}"
    let v926 : unit = ()
    let v927 : (unit -> unit) = closure7(v11, v918)
    let v928 : unit = (fun () -> v927 (); v926) ()
    let v936 : string =
        if v9 then
            let v934 : string = "true"
            v934
        else
            let v935 : string = "false"
            v935
    let v938 : string = $"{v936}"
    let v946 : unit = ()
    let v947 : (unit -> unit) = closure7(v11, v938)
    let v948 : unit = (fun () -> v947 (); v946) ()
    let v956 : string = " }"
    let v957 : string = $"{v956}"
    let v965 : unit = ()
    let v966 : (unit -> unit) = closure7(v11, v957)
    let v967 : unit = (fun () -> v966 (); v965) ()
    let v974 : string = $"{v956}"
    let v982 : unit = ()
    let v983 : (unit -> unit) = closure7(v11, v974)
    let v984 : unit = (fun () -> v983 (); v982) ()
    let v990 : string = v11.l0
    v990
and method164 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option, v17 : bool) : string =
    let v18 : string = method165(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options_async"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method17(v62)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : US5, v9 : string) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    let v73 : bool = v72 = false
    let v307 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method11()
            let v133 : string = method164(v113, v114, v115, v116, v117, v118, v131, v132, v9, v8, v0, v1, v2, v3, v4, v5, v6, v7)
            let v148 : unit = ()
            let v149 : unit = (fun () -> v25 (); v148) ()
            let struct (v172 : Mut0, v173 : Mut1, v174 : Mut2, v175 : Mut3, v176 : Mut4, v177 : int64 option) = TraceState.trace_state.Value
            let v192 : unit = ()
            let v193 : (unit -> unit) = closure8(v172)
            let v194 : unit = (fun () -> v193 (); v192) ()
            let v197 : (string -> unit) = closure9()
            (* run_target_args'
            let v198 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v199 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v133 v199 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v133 v200 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v201 : string = v175.l0
            let v202 : bool = v201 = ""
            let v217 : string =
                if v202 then
                    v133
                else
                    let v203 : bool = v133 = ""
                    if v203 then
                        let v204 : string = v175.l0
                        v204
                    else
                        let v205 : string = v175.l0
                        let v208 : string = "\n"
                        let v209 : string = v205 + v208 
                        let v213 : string = v209 + v133 
                        v213
            (* run_target_args'
            let v222 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v223 
            let _run_target_args'_v222 = v224 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v225 : string = "&*$0"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v225 
            let _run_target_args'_v222 = v226 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v217 v227 
            let _run_target_args'_v222 = v228 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v230 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v230 
            #endif
#if FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v234 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v238 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v238 
            #endif
#else
            let v242 : Ref<Str> = v217 |> unbox<Ref<Str>>
            let _run_target_args'_v222 = v242 
            #endif
            let v245 : Ref<Str> = _run_target_args'_v222 
            let v254 : string = $"$0.chars()"
            let v255 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v245 v254 
            let v256 : string = "$0"
            let v257 : _ = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "$0.collect::<Vec<_>>()"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v261 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "x"
            let v265 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "String::from_iter($0)"
            let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v268 : string = "true; $0 }).collect::<Vec<_>>()"
            let v269 : bool = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v270 : string = "_vec_map"
            let v271 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v270 
            let v272 : string = "$0.len()"
            let v273 : unativeint = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let v279 : int32 = v273 |> int32 
            let v289 : string = ""
            let v290 : bool = v133 <> v289 
            let v294 : bool =
                if v290 then
                    let v293 : bool = v279 <= 1
                    v293
                else
                    false
            if v294 then
                v175.l0 <- v217
                ()
            else
                v175.l0 <- v289
                let v295 : string = "true; $0.into_iter().for_each(|x| { //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v271 v295 
                let v297 : string = "x"
                let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr v298 v299 
                let v301 : string = $"true"
                let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
                let v303 : string = "true; }); //"
                let v304 : bool = Fable.Core.RustInterop.emitRustExpr () v303 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v197 v133
            #endif
#if FABLE_COMPILER_PYTHON
            v197 v133
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v197 v133
            #endif
#else
            v197 v133
            #endif
            // run_target_args' is_unit
            let v305 : (string -> unit) = v173.l0
            v305 v133
            US6_0(v172, v173, v174, v175, v176, v177)
    
    ()
and method166 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : (struct (string * string) []) =
    v2
and method169 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US35 =
    US35_0(v0)
and method170 () : ((struct (int32 * string * bool) -> Async<unit>) -> US35) =
    closure62()
and method171 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 0 >= v61
            v62
    let v64 : bool = v63 = false
    let v301 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method83()
            let v124 : bool = v0 = ""
            let v127 : string =
                if v124 then
                    let v125 : string = ""
                    v125
                else
                    method148(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v16 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method168 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : System.Diagnostics.Process, v9 : System.Collections.Concurrent.ConcurrentStack<string>, v10 : bool, v11 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v16 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : unit = ()
    let _let'_v30 =
        async {
            let v8960 : string = method169(v11)
            let v8962 : string = null |> unbox<string>
            let v8965 : bool = v8960 = v8962
            let v8966 : bool = v8965 <> true
            if v8966 then
                let v8969 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method170()
                let v8970 : US35 option = v3 |> Option.map v8969 
                let v8990 : US35 = US35_1
                let v8991 : US35 = v8970 |> Option.defaultValue v8990 
                match v8991 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v8995) -> (* Some *)
                    let v8996 : int32 = method171(v8)
                    let v8997 : Async<unit> = v8995 struct (v8996, v8960, v10)
                    do! v8997 
                    ()
                let v9000 : string =
                    if v10 then
                        let v8998 : string = $"! {v8960}"
                        v8998
                    else
                        let v8999 : string = $"> {v8960}"
                        v8999
                if v5 then
                    let v9315 : unit = ()
                    let v9316 : (unit -> unit) = closure63(v9000)
                    let v9317 : unit = (fun () -> v9316 (); v9315) ()
                    ()
                else
                    let v9636 : unit = ()
                    let v9637 : (unit -> unit) = closure10(v9000)
                    let v9638 : unit = (fun () -> v9637 (); v9636) ()
                    ()
                let v9642 : string =
                    if v10 then
                        let v9640 : string = "\u001b[7;4m"
                        v9640
                    else
                        let v9641 : string = ""
                        v9641
                let v9645 : string =
                    if v10 then
                        let v9643 : string = "\u001b[0m"
                        v9643
                    else
                        let v9644 : string = ""
                        v9644
                let v9646 : string = $"{v9642}{v8960}{v9645}"
                (* run_target_args'
                let v9647 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9648 : (string -> unit) = v9.Push
                v9648 v9646
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v18582 : Async<unit> = _let'_v30 
    let _run_target_args'_v16 = v18582 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18584 : unit = ()
    let _let'_v18584 =
        async {
            let v27514 : string = method169(v11)
            let v27516 : string = null |> unbox<string>
            let v27519 : bool = v27514 = v27516
            let v27520 : bool = v27519 <> true
            if v27520 then
                let v27523 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method170()
                let v27524 : US35 option = v3 |> Option.map v27523 
                let v27544 : US35 = US35_1
                let v27545 : US35 = v27524 |> Option.defaultValue v27544 
                match v27545 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v27549) -> (* Some *)
                    let v27550 : int32 = method171(v8)
                    let v27551 : Async<unit> = v27549 struct (v27550, v27514, v10)
                    do! v27551 
                    ()
                let v27554 : string =
                    if v10 then
                        let v27552 : string = $"! {v27514}"
                        v27552
                    else
                        let v27553 : string = $"> {v27514}"
                        v27553
                if v5 then
                    let v27869 : unit = ()
                    let v27870 : (unit -> unit) = closure63(v27554)
                    let v27871 : unit = (fun () -> v27870 (); v27869) ()
                    ()
                else
                    let v28190 : unit = ()
                    let v28191 : (unit -> unit) = closure10(v27554)
                    let v28192 : unit = (fun () -> v28191 (); v28190) ()
                    ()
                let v28196 : string =
                    if v10 then
                        let v28194 : string = "\u001b[7;4m"
                        v28194
                    else
                        let v28195 : string = ""
                        v28195
                let v28199 : string =
                    if v10 then
                        let v28197 : string = "\u001b[0m"
                        v28197
                    else
                        let v28198 : string = ""
                        v28198
                let v28200 : string = $"{v28196}{v27514}{v28199}"
                (* run_target_args'
                let v28201 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v28202 : (string -> unit) = v9.Push
                v28202 v28200
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v37136 : Async<unit> = _let'_v18584 
    let _run_target_args'_v16 = v37136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v37138 : unit = ()
    let _let'_v37138 =
        async {
            let v46068 : string = method169(v11)
            let v46070 : string = null |> unbox<string>
            let v46073 : bool = v46068 = v46070
            let v46074 : bool = v46073 <> true
            if v46074 then
                let v46077 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method170()
                let v46078 : US35 option = v3 |> Option.map v46077 
                let v46098 : US35 = US35_1
                let v46099 : US35 = v46078 |> Option.defaultValue v46098 
                match v46099 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v46103) -> (* Some *)
                    let v46104 : int32 = method171(v8)
                    let v46105 : Async<unit> = v46103 struct (v46104, v46068, v10)
                    do! v46105 
                    ()
                let v46108 : string =
                    if v10 then
                        let v46106 : string = $"! {v46068}"
                        v46106
                    else
                        let v46107 : string = $"> {v46068}"
                        v46107
                if v5 then
                    let v46423 : unit = ()
                    let v46424 : (unit -> unit) = closure63(v46108)
                    let v46425 : unit = (fun () -> v46424 (); v46423) ()
                    ()
                else
                    let v46744 : unit = ()
                    let v46745 : (unit -> unit) = closure10(v46108)
                    let v46746 : unit = (fun () -> v46745 (); v46744) ()
                    ()
                let v46750 : string =
                    if v10 then
                        let v46748 : string = "\u001b[7;4m"
                        v46748
                    else
                        let v46749 : string = ""
                        v46749
                let v46753 : string =
                    if v10 then
                        let v46751 : string = "\u001b[0m"
                        v46751
                    else
                        let v46752 : string = ""
                        v46752
                let v46754 : string = $"{v46750}{v46068}{v46753}"
                (* run_target_args'
                let v46755 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v46756 : (string -> unit) = v9.Push
                v46756 v46754
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v55690 : Async<unit> = _let'_v37138 
    let _run_target_args'_v16 = v55690 
    #endif
#else
    let v55692 : unit = ()
    let _let'_v55692 =
        async {
            let v64622 : string = method169(v11)
            let v64624 : string = null |> unbox<string>
            let v64627 : bool = v64622 = v64624
            let v64628 : bool = v64627 <> true
            if v64628 then
                let v64631 : ((struct (int32 * string * bool) -> Async<unit>) -> US35) = method170()
                let v64632 : US35 option = v3 |> Option.map v64631 
                let v64652 : US35 = US35_1
                let v64653 : US35 = v64632 |> Option.defaultValue v64652 
                match v64653 with
                | US35_1 -> (* None *)
                    ()
                | US35_0(v64657) -> (* Some *)
                    let v64658 : int32 = method171(v8)
                    let v64659 : Async<unit> = v64657 struct (v64658, v64622, v10)
                    do! v64659 
                    ()
                let v64662 : string =
                    if v10 then
                        let v64660 : string = $"! {v64622}"
                        v64660
                    else
                        let v64661 : string = $"> {v64622}"
                        v64661
                if v5 then
                    let v64977 : unit = ()
                    let v64978 : (unit -> unit) = closure63(v64662)
                    let v64979 : unit = (fun () -> v64978 (); v64977) ()
                    ()
                else
                    let v65298 : unit = ()
                    let v65299 : (unit -> unit) = closure10(v64662)
                    let v65300 : unit = (fun () -> v65299 (); v65298) ()
                    ()
                let v65304 : string =
                    if v10 then
                        let v65302 : string = "\u001b[7;4m"
                        v65302
                    else
                        let v65303 : string = ""
                        v65303
                let v65307 : string =
                    if v10 then
                        let v65305 : string = "\u001b[0m"
                        v65305
                    else
                        let v65306 : string = ""
                        v65306
                let v65308 : string = $"{v65304}{v64622}{v65307}"
                (* run_target_args'
                let v65309 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v65310 : (string -> unit) = v9.Push
                v65310 v65308
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v74244 : Async<unit> = _let'_v55692 
    let _run_target_args'_v16 = v74244 
    #endif
    let v74245 : Async<unit> = _run_target_args'_v16 
    v74245
and method167 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : System.Diagnostics.Process, v9 : System.Collections.Concurrent.ConcurrentStack<string>, v10 : bool, v11 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method168(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : System.Diagnostics.Process, v9 : System.Collections.Concurrent.ConcurrentStack<string>, v10 : bool) (v11 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v12 : Async<unit> = method167(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v12
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v12
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v12
    #endif
#else
    let v17 : (Async<unit> -> unit) = Async.StartImmediate
    v17 v12
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US36 =
    US36_0(v0)
and method172 () : (System.Threading.CancellationToken -> US36) =
    closure64()
and method173 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v598 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v600 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v600 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v604 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v604 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v608 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v608 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v612 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v612 
            #endif
#if FABLE_COMPILER_PYTHON
            let v616 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v620 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v620 
            #endif
#else
            let v623 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v623 = v623 
            let v624 : System.Threading.CancellationToken = v623 
            let v625 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v626 : (System.Threading.CancellationToken []) = [|v624; v625; v0|]
            let v627 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v628 : System.Threading.CancellationTokenSource = v627 v626
            let v629 : System.Threading.CancellationToken = v628.Token
            return v629 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1210 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v1210 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1212 : unit = ()
    let _let'_v1212 =
        async {
            (* run_target_args'
            let v1791 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1793 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1793 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1797 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1797 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1801 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1805 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1805 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1809 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1809 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1813 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1813 
            #endif
#else
            let v1816 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1816 = v1816 
            let v1817 : System.Threading.CancellationToken = v1816 
            let v1818 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1819 : (System.Threading.CancellationToken []) = [|v1817; v1818; v0|]
            let v1820 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1821 : System.Threading.CancellationTokenSource = v1820 v1819
            let v1822 : System.Threading.CancellationToken = v1821.Token
            return v1822 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2403 : Async<System.Threading.CancellationToken> = _let'_v1212 
    let _run_target_args'_v5 = v2403 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2405 : unit = ()
    let _let'_v2405 =
        async {
            (* run_target_args'
            let v2984 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2986 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2986 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2990 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2990 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2994 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2994 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2998 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v2998 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3002 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3002 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3006 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v3006 
            #endif
#else
            let v3009 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v3009 = v3009 
            let v3010 : System.Threading.CancellationToken = v3009 
            let v3011 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v3012 : (System.Threading.CancellationToken []) = [|v3010; v3011; v0|]
            let v3013 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v3014 : System.Threading.CancellationTokenSource = v3013 v3012
            let v3015 : System.Threading.CancellationToken = v3014.Token
            return v3015 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3596 : Async<System.Threading.CancellationToken> = _let'_v2405 
    let _run_target_args'_v5 = v3596 
    #endif
#else
    let v3598 : unit = ()
    let _let'_v3598 =
        async {
            (* run_target_args'
            let v4177 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4179 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4179 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4183 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4183 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4187 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4187 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4191 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4191 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4195 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4195 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4199 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v4199 
            #endif
#else
            let v4202 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v4202 = v4202 
            let v4203 : System.Threading.CancellationToken = v4202 
            let v4204 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v4205 : (System.Threading.CancellationToken []) = [|v4203; v4204; v0|]
            let v4206 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v4207 : System.Threading.CancellationTokenSource = v4206 v4205
            let v4208 : System.Threading.CancellationToken = v4207.Token
            return v4208 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4789 : Async<System.Threading.CancellationToken> = _let'_v3598 
    let _run_target_args'_v5 = v4789 
    #endif
    let v4790 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v4790
and method174 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method175 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method174(v0)
    let v2 : bool = v1 = false
    if v2 then
        method175(v0)
and method178 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "ex"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "format!(\"{:#?}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v65 
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v64 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v64 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v0}"
    let _run_target_args'_v64 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : string = $"%A{v0}"
    let _run_target_args'_v64 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : string = $"%A{v0}"
    let _run_target_args'_v64 = v86 
    #endif
#else
    let v90 : string = $"%A{v0}"
    let _run_target_args'_v64 = v90 
    #endif
    let v93 : string = _run_target_args'_v64 
    let v103 : string = $"{v93}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v2, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v2, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v138 : string = v2.l0
    v138
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method178(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 3 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method41()
            let v124 : string = method177(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method176 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v30716 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30718 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30718 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30722 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30722 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30726 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30726 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30730 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30730 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30734 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30734 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30738 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v30716 = v30738 
                #endif
#else
                let v30741 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v30716 = v30741 
                #endif
                let v30742 : System.Threading.Tasks.Task = _run_target_args'_v30716 
                (* run_target_args'
                let v30755 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30757 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30757 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30761 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30761 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30765 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v30755 = v30765 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30768 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30769 : Async<unit> = v30768 v30742
                let _run_target_args'_v30755 = v30769 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30770 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30771 : Async<unit> = v30770 v30742
                let _run_target_args'_v30755 = v30771 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30772 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30773 : Async<unit> = v30772 v30742
                let _run_target_args'_v30755 = v30773 
                #endif
#else
                let v30774 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v30775 : Async<unit> = v30774 v30742
                let _run_target_args'_v30755 = v30775 
                #endif
                let v30776 : Async<unit> = _run_target_args'_v30755 
                do! v30776 
                (* run_target_args'
                let v30789 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30791 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30791 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v30795 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30795 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v30799 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30799 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v30803 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30803 
                #endif
#if FABLE_COMPILER_PYTHON
                let v30807 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30807 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v30811 : int32 = null |> unbox<int32>
                let _run_target_args'_v30789 = v30811 
                #endif
#else
                let v30814 : int32 = v0.ExitCode
                let _run_target_args'_v30789 = v30814 
                #endif
                let v30815 : int32 = _run_target_args'_v30789 
                return v30815 
                (* indent
                ()
            indent *)
            with ex ->
                let v31604 : exn = ex
                (* run_target_args'
                let v31609 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v31611 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31611 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v31615 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v31619 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31619 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v31623 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31623 
                #endif
#if FABLE_COMPILER_PYTHON
                let v31627 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31627 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v31631 : string = $"%A{v31604}"
                let _run_target_args'_v31609 = v31631 
                #endif
#else
                let v31634 : string = $"{v31604.GetType ()}: {v31604.Message}"
                let _run_target_args'_v31609 = v31634 
                #endif
                let v31635 : string = _run_target_args'_v31609 
                (* run_target_args'
                let v31644 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v31645 : (string -> unit) = v1.Push
                v31645 v31635
                #endif
                // run_target_args' is_unit
                let v31647 : System.Threading.Tasks.TaskCanceledException = v31604 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v31961 : unit = ()
                let v31962 : (unit -> unit) = closure66(v31647)
                let v31963 : unit = (fun () -> v31962 (); v31961) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v63528 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v63528 
    #endif
#if FABLE_COMPILER_PYTHON
    let v63530 : unit = ()
    let _let'_v63530 =
        async {
            try
                (* run_target_args'
                let v94225 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94227 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94227 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94231 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94231 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94235 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94235 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94239 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94239 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94243 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94243 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94247 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v94225 = v94247 
                #endif
#else
                let v94250 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v94225 = v94250 
                #endif
                let v94251 : System.Threading.Tasks.Task = _run_target_args'_v94225 
                (* run_target_args'
                let v94264 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94266 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94266 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94270 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94270 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94274 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v94264 = v94274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94277 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94278 : Async<unit> = v94277 v94251
                let _run_target_args'_v94264 = v94278 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94279 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94280 : Async<unit> = v94279 v94251
                let _run_target_args'_v94264 = v94280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94281 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94282 : Async<unit> = v94281 v94251
                let _run_target_args'_v94264 = v94282 
                #endif
#else
                let v94283 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v94284 : Async<unit> = v94283 v94251
                let _run_target_args'_v94264 = v94284 
                #endif
                let v94285 : Async<unit> = _run_target_args'_v94264 
                do! v94285 
                (* run_target_args'
                let v94298 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94300 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94300 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v94304 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94304 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94308 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94312 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94312 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94316 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94316 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94320 : int32 = null |> unbox<int32>
                let _run_target_args'_v94298 = v94320 
                #endif
#else
                let v94323 : int32 = v0.ExitCode
                let _run_target_args'_v94298 = v94323 
                #endif
                let v94324 : int32 = _run_target_args'_v94298 
                return v94324 
                (* indent
                ()
            indent *)
            with ex ->
                let v95113 : exn = ex
                (* run_target_args'
                let v95118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95120 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v95124 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95124 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v95128 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95128 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v95132 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95132 
                #endif
#if FABLE_COMPILER_PYTHON
                let v95136 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95136 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v95140 : string = $"%A{v95113}"
                let _run_target_args'_v95118 = v95140 
                #endif
#else
                let v95143 : string = $"{v95113.GetType ()}: {v95113.Message}"
                let _run_target_args'_v95118 = v95143 
                #endif
                let v95144 : string = _run_target_args'_v95118 
                (* run_target_args'
                let v95153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v95154 : (string -> unit) = v1.Push
                v95154 v95144
                #endif
                // run_target_args' is_unit
                let v95156 : System.Threading.Tasks.TaskCanceledException = v95113 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v95470 : unit = ()
                let v95471 : (unit -> unit) = closure66(v95156)
                let v95472 : unit = (fun () -> v95471 (); v95470) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v127037 : Async<int32> = _let'_v63530 
    let _run_target_args'_v7 = v127037 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127039 : unit = ()
    let _let'_v127039 =
        async {
            try
                (* run_target_args'
                let v157734 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157736 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157736 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157740 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157740 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157744 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157744 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157748 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157748 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157752 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157752 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157756 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v157734 = v157756 
                #endif
#else
                let v157759 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v157734 = v157759 
                #endif
                let v157760 : System.Threading.Tasks.Task = _run_target_args'_v157734 
                (* run_target_args'
                let v157773 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157775 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157775 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157779 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157779 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157783 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v157773 = v157783 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157786 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157787 : Async<unit> = v157786 v157760
                let _run_target_args'_v157773 = v157787 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157788 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157789 : Async<unit> = v157788 v157760
                let _run_target_args'_v157773 = v157789 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157790 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157791 : Async<unit> = v157790 v157760
                let _run_target_args'_v157773 = v157791 
                #endif
#else
                let v157792 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v157793 : Async<unit> = v157792 v157760
                let _run_target_args'_v157773 = v157793 
                #endif
                let v157794 : Async<unit> = _run_target_args'_v157773 
                do! v157794 
                (* run_target_args'
                let v157807 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v157809 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157809 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v157813 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157813 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v157817 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157817 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v157821 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157821 
                #endif
#if FABLE_COMPILER_PYTHON
                let v157825 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157825 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v157829 : int32 = null |> unbox<int32>
                let _run_target_args'_v157807 = v157829 
                #endif
#else
                let v157832 : int32 = v0.ExitCode
                let _run_target_args'_v157807 = v157832 
                #endif
                let v157833 : int32 = _run_target_args'_v157807 
                return v157833 
                (* indent
                ()
            indent *)
            with ex ->
                let v158622 : exn = ex
                (* run_target_args'
                let v158627 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v158629 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158629 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v158633 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158633 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v158637 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158637 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v158641 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158641 
                #endif
#if FABLE_COMPILER_PYTHON
                let v158645 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158645 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v158649 : string = $"%A{v158622}"
                let _run_target_args'_v158627 = v158649 
                #endif
#else
                let v158652 : string = $"{v158622.GetType ()}: {v158622.Message}"
                let _run_target_args'_v158627 = v158652 
                #endif
                let v158653 : string = _run_target_args'_v158627 
                (* run_target_args'
                let v158662 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v158663 : (string -> unit) = v1.Push
                v158663 v158653
                #endif
                // run_target_args' is_unit
                let v158665 : System.Threading.Tasks.TaskCanceledException = v158622 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v158979 : unit = ()
                let v158980 : (unit -> unit) = closure66(v158665)
                let v158981 : unit = (fun () -> v158980 (); v158979) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v190546 : Async<int32> = _let'_v127039 
    let _run_target_args'_v7 = v190546 
    #endif
#else
    let v190548 : unit = ()
    let _let'_v190548 =
        async {
            try
                (* run_target_args'
                let v221243 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221245 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221245 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221249 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221249 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221253 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221253 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221257 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221257 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221261 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221261 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221265 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v221243 = v221265 
                #endif
#else
                let v221268 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v221243 = v221268 
                #endif
                let v221269 : System.Threading.Tasks.Task = _run_target_args'_v221243 
                (* run_target_args'
                let v221282 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221284 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221284 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221288 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221288 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221292 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v221282 = v221292 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221295 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221296 : Async<unit> = v221295 v221269
                let _run_target_args'_v221282 = v221296 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221297 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221298 : Async<unit> = v221297 v221269
                let _run_target_args'_v221282 = v221298 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221299 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221300 : Async<unit> = v221299 v221269
                let _run_target_args'_v221282 = v221300 
                #endif
#else
                let v221301 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v221302 : Async<unit> = v221301 v221269
                let _run_target_args'_v221282 = v221302 
                #endif
                let v221303 : Async<unit> = _run_target_args'_v221282 
                do! v221303 
                (* run_target_args'
                let v221316 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v221318 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221318 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v221322 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221322 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v221326 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221326 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v221330 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221330 
                #endif
#if FABLE_COMPILER_PYTHON
                let v221334 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221334 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v221338 : int32 = null |> unbox<int32>
                let _run_target_args'_v221316 = v221338 
                #endif
#else
                let v221341 : int32 = v0.ExitCode
                let _run_target_args'_v221316 = v221341 
                #endif
                let v221342 : int32 = _run_target_args'_v221316 
                return v221342 
                (* indent
                ()
            indent *)
            with ex ->
                let v222131 : exn = ex
                (* run_target_args'
                let v222136 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v222138 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222138 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v222142 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222142 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v222146 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222146 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v222150 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222150 
                #endif
#if FABLE_COMPILER_PYTHON
                let v222154 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222154 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v222158 : string = $"%A{v222131}"
                let _run_target_args'_v222136 = v222158 
                #endif
#else
                let v222161 : string = $"{v222131.GetType ()}: {v222131.Message}"
                let _run_target_args'_v222136 = v222161 
                #endif
                let v222162 : string = _run_target_args'_v222136 
                (* run_target_args'
                let v222171 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v222172 : (string -> unit) = v1.Push
                v222172 v222162
                #endif
                // run_target_args' is_unit
                let v222174 : System.Threading.Tasks.TaskCanceledException = v222131 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v222488 : unit = ()
                let v222489 : (unit -> unit) = closure66(v222174)
                let v222490 : unit = (fun () -> v222489 (); v222488) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v254055 : Async<int32> = _let'_v190548 
    let _run_target_args'_v7 = v254055 
    #endif
    let v254056 : Async<int32> = _run_target_args'_v7 
    v254056
and method180 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option, v9 : bool) : string =
    let v10 : string = method13()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v11, v15)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v33 : string = "exit_code"
    let v34 : string = $"{v33}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v11, v34)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v52 : string = " = "
    let v53 : string = $"{v52}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v11, v53)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v73 : string = $"{v0}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v11, v73)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v91 : string = "; "
    let v92 : string = $"{v91}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v11, v92)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v110 : string = "output_length"
    let v111 : string = $"{v110}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v111)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v128 : string = $"{v52}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v11, v128)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v148 : string = $"{v1}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v11, v148)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v165 : string = $"{v91}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v11, v165)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v183 : string = "options"
    let v184 : string = $"{v183}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v11, v184)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v201 : string = $"{v52}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v11, v201)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v218 : string = $"{v14}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v11, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v236 : string = "command"
    let v237 : string = $"{v236}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v11, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v254 : string = $"{v52}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v11, v254)
    let v264 : unit = (fun () -> v263 (); v262) ()
    let v271 : string = $"{v2}"
    let v279 : unit = ()
    let v280 : (unit -> unit) = closure7(v11, v271)
    let v281 : unit = (fun () -> v280 (); v279) ()
    let v288 : string = $"{v91}"
    let v296 : unit = ()
    let v297 : (unit -> unit) = closure7(v11, v288)
    let v298 : unit = (fun () -> v297 (); v296) ()
    let v306 : string = "cancellation_token"
    let v307 : string = $"{v306}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v11, v307)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v324 : string = $"{v52}"
    let v332 : unit = ()
    let v333 : (unit -> unit) = closure7(v11, v324)
    let v334 : unit = (fun () -> v333 (); v332) ()
    (* run_target_args'
    let v344 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v345 : string = "format!(\"{:#?}\", $0)"
    let v346 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v345 
    let v347 : string = "fable_library_rust::String_::fromString($0)"
    let v348 : string = Fable.Core.RustInterop.emitRustExpr v346 v347 
    let _run_target_args'_v344 = v348 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v349 : string = "format!(\"{:#?}\", $0)"
    let v350 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v349 
    let v351 : string = "fable_library_rust::String_::fromString($0)"
    let v352 : string = Fable.Core.RustInterop.emitRustExpr v350 v351 
    let _run_target_args'_v344 = v352 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v353 : string = "format!(\"{:#?}\", $0)"
    let v354 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v353 
    let v355 : string = "fable_library_rust::String_::fromString($0)"
    let v356 : string = Fable.Core.RustInterop.emitRustExpr v354 v355 
    let _run_target_args'_v344 = v356 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v358 : string = $"%A{v3}"
    let _run_target_args'_v344 = v358 
    #endif
#if FABLE_COMPILER_PYTHON
    let v362 : string = $"%A{v3}"
    let _run_target_args'_v344 = v362 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v366 : string = $"%A{v3}"
    let _run_target_args'_v344 = v366 
    #endif
#else
    let v370 : string = $"%A{v3}"
    let _run_target_args'_v344 = v370 
    #endif
    let v373 : string = _run_target_args'_v344 
    let v383 : string = $"{v373}"
    let v391 : unit = ()
    let v392 : (unit -> unit) = closure7(v11, v383)
    let v393 : unit = (fun () -> v392 (); v391) ()
    let v400 : string = $"{v91}"
    let v408 : unit = ()
    let v409 : (unit -> unit) = closure7(v11, v400)
    let v410 : unit = (fun () -> v409 (); v408) ()
    let v418 : string = "environment_variables"
    let v419 : string = $"{v418}"
    let v427 : unit = ()
    let v428 : (unit -> unit) = closure7(v11, v419)
    let v429 : unit = (fun () -> v428 (); v427) ()
    let v436 : string = $"{v52}"
    let v444 : unit = ()
    let v445 : (unit -> unit) = closure7(v11, v436)
    let v446 : unit = (fun () -> v445 (); v444) ()
    let v454 : string = $"%A{v4}"
    let v458 : string = $"{v454}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v11, v458)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v475 : string = $"{v91}"
    let v483 : unit = ()
    let v484 : (unit -> unit) = closure7(v11, v475)
    let v485 : unit = (fun () -> v484 (); v483) ()
    let v493 : string = "on_line"
    let v494 : string = $"{v493}"
    let v502 : unit = ()
    let v503 : (unit -> unit) = closure7(v11, v494)
    let v504 : unit = (fun () -> v503 (); v502) ()
    let v511 : string = $"{v52}"
    let v519 : unit = ()
    let v520 : (unit -> unit) = closure7(v11, v511)
    let v521 : unit = (fun () -> v520 (); v519) ()
    (* run_target_args'
    let v531 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v532 : string = "format!(\"{:#?}\", $0)"
    let v533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v532 
    let v534 : string = "fable_library_rust::String_::fromString($0)"
    let v535 : string = Fable.Core.RustInterop.emitRustExpr v533 v534 
    let _run_target_args'_v531 = v535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v536 : string = "format!(\"{:#?}\", $0)"
    let v537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v536 
    let v538 : string = "fable_library_rust::String_::fromString($0)"
    let v539 : string = Fable.Core.RustInterop.emitRustExpr v537 v538 
    let _run_target_args'_v531 = v539 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v540 : string = "format!(\"{:#?}\", $0)"
    let v541 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v540 
    let v542 : string = "fable_library_rust::String_::fromString($0)"
    let v543 : string = Fable.Core.RustInterop.emitRustExpr v541 v542 
    let _run_target_args'_v531 = v543 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v545 : string = $"%A{v5}"
    let _run_target_args'_v531 = v545 
    #endif
#if FABLE_COMPILER_PYTHON
    let v549 : string = $"%A{v5}"
    let _run_target_args'_v531 = v549 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v553 : string = $"%A{v5}"
    let _run_target_args'_v531 = v553 
    #endif
#else
    let v557 : string = $"%A{v5}"
    let _run_target_args'_v531 = v557 
    #endif
    let v560 : string = _run_target_args'_v531 
    let v570 : string = $"{v560}"
    let v578 : unit = ()
    let v579 : (unit -> unit) = closure7(v11, v570)
    let v580 : unit = (fun () -> v579 (); v578) ()
    let v587 : string = $"{v91}"
    let v595 : unit = ()
    let v596 : (unit -> unit) = closure7(v11, v587)
    let v597 : unit = (fun () -> v596 (); v595) ()
    let v605 : string = "stdin"
    let v606 : string = $"{v605}"
    let v614 : unit = ()
    let v615 : (unit -> unit) = closure7(v11, v606)
    let v616 : unit = (fun () -> v615 (); v614) ()
    let v623 : string = $"{v52}"
    let v631 : unit = ()
    let v632 : (unit -> unit) = closure7(v11, v623)
    let v633 : unit = (fun () -> v632 (); v631) ()
    (* run_target_args'
    let v643 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v644 : string = "format!(\"{:#?}\", $0)"
    let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v644 
    let v646 : string = "fable_library_rust::String_::fromString($0)"
    let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
    let _run_target_args'_v643 = v647 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v648 : string = "format!(\"{:#?}\", $0)"
    let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v648 
    let v650 : string = "fable_library_rust::String_::fromString($0)"
    let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
    let _run_target_args'_v643 = v651 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v652 : string = "format!(\"{:#?}\", $0)"
    let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v652 
    let v654 : string = "fable_library_rust::String_::fromString($0)"
    let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
    let _run_target_args'_v643 = v655 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v657 : string = $"%A{v6}"
    let _run_target_args'_v643 = v657 
    #endif
#if FABLE_COMPILER_PYTHON
    let v661 : string = $"%A{v6}"
    let _run_target_args'_v643 = v661 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v665 : string = $"%A{v6}"
    let _run_target_args'_v643 = v665 
    #endif
#else
    let v669 : string = $"%A{v6}"
    let _run_target_args'_v643 = v669 
    #endif
    let v672 : string = _run_target_args'_v643 
    let v682 : string = $"{v672}"
    let v690 : unit = ()
    let v691 : (unit -> unit) = closure7(v11, v682)
    let v692 : unit = (fun () -> v691 (); v690) ()
    let v699 : string = $"{v91}"
    let v707 : unit = ()
    let v708 : (unit -> unit) = closure7(v11, v699)
    let v709 : unit = (fun () -> v708 (); v707) ()
    let v717 : string = "trace"
    let v718 : string = $"{v717}"
    let v726 : unit = ()
    let v727 : (unit -> unit) = closure7(v11, v718)
    let v728 : unit = (fun () -> v727 (); v726) ()
    let v735 : string = $"{v52}"
    let v743 : unit = ()
    let v744 : (unit -> unit) = closure7(v11, v735)
    let v745 : unit = (fun () -> v744 (); v743) ()
    let v753 : string =
        if v7 then
            let v751 : string = "true"
            v751
        else
            let v752 : string = "false"
            v752
    let v755 : string = $"{v753}"
    let v763 : unit = ()
    let v764 : (unit -> unit) = closure7(v11, v755)
    let v765 : unit = (fun () -> v764 (); v763) ()
    let v772 : string = $"{v91}"
    let v780 : unit = ()
    let v781 : (unit -> unit) = closure7(v11, v772)
    let v782 : unit = (fun () -> v781 (); v780) ()
    let v790 : string = "working_directory"
    let v791 : string = $"{v790}"
    let v799 : unit = ()
    let v800 : (unit -> unit) = closure7(v11, v791)
    let v801 : unit = (fun () -> v800 (); v799) ()
    let v808 : string = $"{v52}"
    let v816 : unit = ()
    let v817 : (unit -> unit) = closure7(v11, v808)
    let v818 : unit = (fun () -> v817 (); v816) ()
    (* run_target_args'
    let v828 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v829 : string = "format!(\"{:#?}\", $0)"
    let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v829 
    let v831 : string = "fable_library_rust::String_::fromString($0)"
    let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
    let _run_target_args'_v828 = v832 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v833 : string = "format!(\"{:#?}\", $0)"
    let v834 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v833 
    let v835 : string = "fable_library_rust::String_::fromString($0)"
    let v836 : string = Fable.Core.RustInterop.emitRustExpr v834 v835 
    let _run_target_args'_v828 = v836 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v837 : string = "format!(\"{:#?}\", $0)"
    let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v837 
    let v839 : string = "fable_library_rust::String_::fromString($0)"
    let v840 : string = Fable.Core.RustInterop.emitRustExpr v838 v839 
    let _run_target_args'_v828 = v840 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v842 : string = $"%A{v8}"
    let _run_target_args'_v828 = v842 
    #endif
#if FABLE_COMPILER_PYTHON
    let v846 : string = $"%A{v8}"
    let _run_target_args'_v828 = v846 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v850 : string = $"%A{v8}"
    let _run_target_args'_v828 = v850 
    #endif
#else
    let v854 : string = $"%A{v8}"
    let _run_target_args'_v828 = v854 
    #endif
    let v857 : string = _run_target_args'_v828 
    let v867 : string = $"{v857}"
    let v875 : unit = ()
    let v876 : (unit -> unit) = closure7(v11, v867)
    let v877 : unit = (fun () -> v876 (); v875) ()
    let v884 : string = $"{v91}"
    let v892 : unit = ()
    let v893 : (unit -> unit) = closure7(v11, v884)
    let v894 : unit = (fun () -> v893 (); v892) ()
    let v902 : string = "stderr"
    let v903 : string = $"{v902}"
    let v911 : unit = ()
    let v912 : (unit -> unit) = closure7(v11, v903)
    let v913 : unit = (fun () -> v912 (); v911) ()
    let v920 : string = $"{v52}"
    let v928 : unit = ()
    let v929 : (unit -> unit) = closure7(v11, v920)
    let v930 : unit = (fun () -> v929 (); v928) ()
    let v938 : string =
        if v9 then
            let v936 : string = "true"
            v936
        else
            let v937 : string = "false"
            v937
    let v940 : string = $"{v938}"
    let v948 : unit = ()
    let v949 : (unit -> unit) = closure7(v11, v940)
    let v950 : unit = (fun () -> v949 (); v948) ()
    let v958 : string = " }"
    let v959 : string = $"{v958}"
    let v967 : unit = ()
    let v968 : (unit -> unit) = closure7(v11, v959)
    let v969 : unit = (fun () -> v968 (); v967) ()
    let v976 : string = $"{v958}"
    let v984 : unit = ()
    let v985 : (unit -> unit) = closure7(v11, v976)
    let v986 : unit = (fun () -> v985 (); v984) ()
    let v992 : string = v11.l0
    v992
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option, v17 : bool) : string =
    let v18 : string = method180(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v22 : string = " "
    let v23 : string = v6 + v22 
    let v27 : string = v23 + v7 
    let v32 : string = " #"
    let v33 : string = v27 + v32 
    let v37 : (int64 -> string) = _.ToString()
    let v38 : string = v37 v19
    let v42 : string = v33 + v38 
    let v46 : string = v42 + v22 
    let v51 : string = "runtime.execute_with_options_async"
    let v52 : string = v46 + v51 
    let v57 : string = " / "
    let v58 : string = v52 + v57 
    let v62 : string = v58 + v18 
    method17(v62)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool, v8 : int32, v9 : string) () : unit =
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure2()
    let v26 : unit = (fun () -> v25 (); v24) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    let v73 : bool = v72 = false
    let v308 : US6 =
        if v73 then
            US6_1
        else
            let v89 : unit = ()
            let v90 : unit = (fun () -> v25 (); v89) ()
            let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : Mut4, v118 : int64 option) = TraceState.trace_state.Value
            let v131 : string = method7(v113, v114, v115, v116, v117, v118)
            let v132 : string = method11()
            let v133 : int32 = v9.Length
            let v134 : string = method179(v113, v114, v115, v116, v117, v118, v131, v132, v8, v133, v0, v1, v2, v3, v4, v5, v6, v7)
            let v149 : unit = ()
            let v150 : unit = (fun () -> v25 (); v149) ()
            let struct (v173 : Mut0, v174 : Mut1, v175 : Mut2, v176 : Mut3, v177 : Mut4, v178 : int64 option) = TraceState.trace_state.Value
            let v193 : unit = ()
            let v194 : (unit -> unit) = closure8(v173)
            let v195 : unit = (fun () -> v194 (); v193) ()
            let v198 : (string -> unit) = closure9()
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v200 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v201 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v201 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v202 : string = v176.l0
            let v203 : bool = v202 = ""
            let v218 : string =
                if v203 then
                    v134
                else
                    let v204 : bool = v134 = ""
                    if v204 then
                        let v205 : string = v176.l0
                        v205
                    else
                        let v206 : string = v176.l0
                        let v209 : string = "\n"
                        let v210 : string = v206 + v209 
                        let v214 : string = v210 + v134 
                        v214
            (* run_target_args'
            let v223 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v224 
            let _run_target_args'_v223 = v225 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v223 = v227 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v223 = v229 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v239 
            #endif
#else
            let v243 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v243 
            #endif
            let v246 : Ref<Str> = _run_target_args'_v223 
            let v255 : string = $"$0.chars()"
            let v256 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v246 v255 
            let v257 : string = "$0"
            let v258 : _ = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "$0.collect::<Vec<_>>()"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v262 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "x"
            let v266 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "String::from_iter($0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "true; $0 }).collect::<Vec<_>>()"
            let v270 : bool = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v271 : string = "_vec_map"
            let v272 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "$0.len()"
            let v274 : unativeint = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v280 : int32 = v274 |> int32 
            let v290 : string = ""
            let v291 : bool = v134 <> v290 
            let v295 : bool =
                if v291 then
                    let v294 : bool = v280 <= 1
                    v294
                else
                    false
            if v295 then
                v176.l0 <- v218
                ()
            else
                v176.l0 <- v290
                let v296 : string = "true; $0.into_iter().for_each(|x| { //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v272 v296 
                let v298 : string = "x"
                let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
                let v302 : string = $"true"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = "true; }); //"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v198 v134
            #endif
#if FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#else
            v198 v134
            #endif
            // run_target_args' is_unit
            let v306 : (string -> unit) = v174.l0
            v306 v134
            US6_0(v173, v174, v175, v176, v177, v178)
    
    ()
and method163 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v12 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : unit = ()
    let _let'_v26 =
        async {
            (* run_target_args'
            let v19069 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v19072 : int32, v19073 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19072, v19073) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v19080 : int32, v19081 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19080, v19081) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v19088 : int32, v19089 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19088, v19089) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v19096 : int32, v19097 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19096, v19097) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v19104 : int32, v19105 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19104, v19105) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v19112 : int32, v19113 : string) = null |> unbox<struct (int32 * string)>
            return struct (v19112, v19113) 
            #endif
#else
            let v19118 : US18 = method101(v0)
            let struct (v19130 : string, v19131 : US5) =
                match v19118 with
                | US18_1(v19121) -> (* Error *)
                    let v19123 : string = $"resultm.get / Result value was Error: {v19121}"
                    failwith<struct (string * US5)> v19123
                | US18_0(v19119, v19120) -> (* Ok *)
                    struct (v19119, v19120)
            let v19134 : (string -> US5) = method6()
            let v19135 : US5 option = v6 |> Option.map v19134 
            let v19155 : US5 = US5_1
            let v19156 : US5 = v19135 |> Option.defaultValue v19155 
            let v19163 : string =
                match v19156 with
                | US5_1 -> (* None *)
                    let v19161 : string = ""
                    v19161
                | US5_0(v19160) -> (* Some *)
                    v19160
            let v19475 : unit = ()
            let v19476 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v7, v19131, v19130)
            let v19477 : unit = (fun () -> v19476 (); v19475) ()
            let v19792 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v19796 : string =
                match v19131 with
                | US5_1 -> (* None *)
                    let v19794 : string = ""
                    v19794
                | US5_0(v19793) -> (* Some *)
                    v19793
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v19796,
              StandardOutputEncoding = v19792,
              WorkingDirectory = v19163,
              FileName = v19130,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v19797 : System.Diagnostics.ProcessStartInfo = start_info
            let v19798 : (struct (string * string) []) = method166(v0, v1, v2, v3, v4, v5, v6, v7)
            let v19799 : int32 = v19798.Length
            let v19800 : Mut5 = {l0 = 0} : Mut5
            while method30(v19799, v19800) do
                let v19802 : int32 = v19800.l0
                let struct (v19803 : string, v19804 : string) = v19798.[int v19802]
                v19797.EnvironmentVariables.[v19803] <- v19804 
                let v19805 : int32 = v19802 + 1
                v19800.l0 <- v19805
                ()
            let v19806 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v19797)
            use v19806 = v19806 
            let v19807 : System.Diagnostics.Process = v19806 
            let v19808 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v19809 : System.Collections.Concurrent.ConcurrentStack<string> = v19808 ()
            let v19810 : bool = false
            let v19811 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v19807, v19809, v19810)
            v19807.OutputDataReceived.Add v19811 
            if v7 then
                let v19812 : bool = true
                let v19813 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v19807, v19809, v19812)
                v19807.ErrorDataReceived.Add v19813 
                ()
            let v19814 : (unit -> bool) = v19807.Start
            let v19815 : bool = v19814 ()
            let v19816 : bool = v19815 = false
            if v19816 then
                let v19817 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v19817
            let v19818 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v19818 v19807
            let v19819 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v19819 v19807
            let v19822 : (System.Threading.CancellationToken -> US36) = method172()
            let v19823 : US36 option = v1 |> Option.map v19822 
            let v19843 : US36 = US36_1
            let v19844 : US36 = v19823 |> Option.defaultValue v19843 
            let v19851 : System.Threading.CancellationToken =
                match v19844 with
                | US36_1 -> (* None *)
                    let v19849 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v19849
                | US36_0(v19848) -> (* Some *)
                    v19848
            let v19852 : Async<System.Threading.CancellationToken> = method173(v19851)
            let! v19852 = v19852 
            let v19853 : System.Threading.CancellationToken = v19852 
            let v19854 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v19853.Register
            let v19855 : (unit -> unit) = closure65(v19807)
            let v19856 : System.Threading.CancellationTokenRegistration = v19854 v19855
            use v19856 = v19856 
            let v19857 : System.Threading.CancellationTokenRegistration = v19856 
            let v19858 : Async<int32> = method176(v19807, v19809, v19853)
            let! v19858 = v19858 
            let v19859 : int32 = v19858 
            let v19861 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v19862 : string seq = v19861 v19809
            let v19866 : (string seq -> string seq) = Seq.rev
            let v19867 : string seq = v19866 v19862
            let v19872 : string = method73()
            let v19873 : (string -> (string seq -> string)) = String.concat
            let v19874 : (string seq -> string) = v19873 v19872
            let v19875 : string = v19874 v19867
            let v20191 : unit = ()
            let v20192 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7, v19859, v19875)
            let v20193 : unit = (fun () -> v20192 (); v20191) ()
            return struct (v19859, v19875) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v39557 : Async<struct (int32 * string)> = _let'_v26 
    let _run_target_args'_v12 = v39557 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39559 : unit = ()
    let _let'_v39559 =
        async {
            (* run_target_args'
            let v58602 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v58605 : int32, v58606 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58605, v58606) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v58613 : int32, v58614 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58613, v58614) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v58621 : int32, v58622 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58621, v58622) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v58629 : int32, v58630 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58629, v58630) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v58637 : int32, v58638 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58637, v58638) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v58645 : int32, v58646 : string) = null |> unbox<struct (int32 * string)>
            return struct (v58645, v58646) 
            #endif
#else
            let v58651 : US18 = method101(v0)
            let struct (v58663 : string, v58664 : US5) =
                match v58651 with
                | US18_1(v58654) -> (* Error *)
                    let v58656 : string = $"resultm.get / Result value was Error: {v58654}"
                    failwith<struct (string * US5)> v58656
                | US18_0(v58652, v58653) -> (* Ok *)
                    struct (v58652, v58653)
            let v58667 : (string -> US5) = method6()
            let v58668 : US5 option = v6 |> Option.map v58667 
            let v58688 : US5 = US5_1
            let v58689 : US5 = v58668 |> Option.defaultValue v58688 
            let v58696 : string =
                match v58689 with
                | US5_1 -> (* None *)
                    let v58694 : string = ""
                    v58694
                | US5_0(v58693) -> (* Some *)
                    v58693
            let v59008 : unit = ()
            let v59009 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v7, v58664, v58663)
            let v59010 : unit = (fun () -> v59009 (); v59008) ()
            let v59325 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v59329 : string =
                match v58664 with
                | US5_1 -> (* None *)
                    let v59327 : string = ""
                    v59327
                | US5_0(v59326) -> (* Some *)
                    v59326
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v59329,
              StandardOutputEncoding = v59325,
              WorkingDirectory = v58696,
              FileName = v58663,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v59330 : System.Diagnostics.ProcessStartInfo = start_info
            let v59331 : (struct (string * string) []) = method166(v0, v1, v2, v3, v4, v5, v6, v7)
            let v59332 : int32 = v59331.Length
            let v59333 : Mut5 = {l0 = 0} : Mut5
            while method30(v59332, v59333) do
                let v59335 : int32 = v59333.l0
                let struct (v59336 : string, v59337 : string) = v59331.[int v59335]
                v59330.EnvironmentVariables.[v59336] <- v59337 
                let v59338 : int32 = v59335 + 1
                v59333.l0 <- v59338
                ()
            let v59339 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v59330)
            use v59339 = v59339 
            let v59340 : System.Diagnostics.Process = v59339 
            let v59341 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v59342 : System.Collections.Concurrent.ConcurrentStack<string> = v59341 ()
            let v59343 : bool = false
            let v59344 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v59340, v59342, v59343)
            v59340.OutputDataReceived.Add v59344 
            if v7 then
                let v59345 : bool = true
                let v59346 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v59340, v59342, v59345)
                v59340.ErrorDataReceived.Add v59346 
                ()
            let v59347 : (unit -> bool) = v59340.Start
            let v59348 : bool = v59347 ()
            let v59349 : bool = v59348 = false
            if v59349 then
                let v59350 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v59350
            let v59351 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v59351 v59340
            let v59352 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v59352 v59340
            let v59355 : (System.Threading.CancellationToken -> US36) = method172()
            let v59356 : US36 option = v1 |> Option.map v59355 
            let v59376 : US36 = US36_1
            let v59377 : US36 = v59356 |> Option.defaultValue v59376 
            let v59384 : System.Threading.CancellationToken =
                match v59377 with
                | US36_1 -> (* None *)
                    let v59382 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v59382
                | US36_0(v59381) -> (* Some *)
                    v59381
            let v59385 : Async<System.Threading.CancellationToken> = method173(v59384)
            let! v59385 = v59385 
            let v59386 : System.Threading.CancellationToken = v59385 
            let v59387 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v59386.Register
            let v59388 : (unit -> unit) = closure65(v59340)
            let v59389 : System.Threading.CancellationTokenRegistration = v59387 v59388
            use v59389 = v59389 
            let v59390 : System.Threading.CancellationTokenRegistration = v59389 
            let v59391 : Async<int32> = method176(v59340, v59342, v59386)
            let! v59391 = v59391 
            let v59392 : int32 = v59391 
            let v59394 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v59395 : string seq = v59394 v59342
            let v59399 : (string seq -> string seq) = Seq.rev
            let v59400 : string seq = v59399 v59395
            let v59405 : string = method73()
            let v59406 : (string -> (string seq -> string)) = String.concat
            let v59407 : (string seq -> string) = v59406 v59405
            let v59408 : string = v59407 v59400
            let v59724 : unit = ()
            let v59725 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7, v59392, v59408)
            let v59726 : unit = (fun () -> v59725 (); v59724) ()
            return struct (v59392, v59408) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v79090 : Async<struct (int32 * string)> = _let'_v39559 
    let _run_target_args'_v12 = v79090 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79092 : unit = ()
    let _let'_v79092 =
        async {
            (* run_target_args'
            let v98135 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v98138 : int32, v98139 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98138, v98139) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v98146 : int32, v98147 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98146, v98147) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v98154 : int32, v98155 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98154, v98155) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v98162 : int32, v98163 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98162, v98163) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v98170 : int32, v98171 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98170, v98171) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v98178 : int32, v98179 : string) = null |> unbox<struct (int32 * string)>
            return struct (v98178, v98179) 
            #endif
#else
            let v98184 : US18 = method101(v0)
            let struct (v98196 : string, v98197 : US5) =
                match v98184 with
                | US18_1(v98187) -> (* Error *)
                    let v98189 : string = $"resultm.get / Result value was Error: {v98187}"
                    failwith<struct (string * US5)> v98189
                | US18_0(v98185, v98186) -> (* Ok *)
                    struct (v98185, v98186)
            let v98200 : (string -> US5) = method6()
            let v98201 : US5 option = v6 |> Option.map v98200 
            let v98221 : US5 = US5_1
            let v98222 : US5 = v98201 |> Option.defaultValue v98221 
            let v98229 : string =
                match v98222 with
                | US5_1 -> (* None *)
                    let v98227 : string = ""
                    v98227
                | US5_0(v98226) -> (* Some *)
                    v98226
            let v98541 : unit = ()
            let v98542 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v7, v98197, v98196)
            let v98543 : unit = (fun () -> v98542 (); v98541) ()
            let v98858 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v98862 : string =
                match v98197 with
                | US5_1 -> (* None *)
                    let v98860 : string = ""
                    v98860
                | US5_0(v98859) -> (* Some *)
                    v98859
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v98862,
              StandardOutputEncoding = v98858,
              WorkingDirectory = v98229,
              FileName = v98196,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v98863 : System.Diagnostics.ProcessStartInfo = start_info
            let v98864 : (struct (string * string) []) = method166(v0, v1, v2, v3, v4, v5, v6, v7)
            let v98865 : int32 = v98864.Length
            let v98866 : Mut5 = {l0 = 0} : Mut5
            while method30(v98865, v98866) do
                let v98868 : int32 = v98866.l0
                let struct (v98869 : string, v98870 : string) = v98864.[int v98868]
                v98863.EnvironmentVariables.[v98869] <- v98870 
                let v98871 : int32 = v98868 + 1
                v98866.l0 <- v98871
                ()
            let v98872 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v98863)
            use v98872 = v98872 
            let v98873 : System.Diagnostics.Process = v98872 
            let v98874 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v98875 : System.Collections.Concurrent.ConcurrentStack<string> = v98874 ()
            let v98876 : bool = false
            let v98877 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v98873, v98875, v98876)
            v98873.OutputDataReceived.Add v98877 
            if v7 then
                let v98878 : bool = true
                let v98879 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v98873, v98875, v98878)
                v98873.ErrorDataReceived.Add v98879 
                ()
            let v98880 : (unit -> bool) = v98873.Start
            let v98881 : bool = v98880 ()
            let v98882 : bool = v98881 = false
            if v98882 then
                let v98883 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v98883
            let v98884 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v98884 v98873
            let v98885 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v98885 v98873
            let v98888 : (System.Threading.CancellationToken -> US36) = method172()
            let v98889 : US36 option = v1 |> Option.map v98888 
            let v98909 : US36 = US36_1
            let v98910 : US36 = v98889 |> Option.defaultValue v98909 
            let v98917 : System.Threading.CancellationToken =
                match v98910 with
                | US36_1 -> (* None *)
                    let v98915 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v98915
                | US36_0(v98914) -> (* Some *)
                    v98914
            let v98918 : Async<System.Threading.CancellationToken> = method173(v98917)
            let! v98918 = v98918 
            let v98919 : System.Threading.CancellationToken = v98918 
            let v98920 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v98919.Register
            let v98921 : (unit -> unit) = closure65(v98873)
            let v98922 : System.Threading.CancellationTokenRegistration = v98920 v98921
            use v98922 = v98922 
            let v98923 : System.Threading.CancellationTokenRegistration = v98922 
            let v98924 : Async<int32> = method176(v98873, v98875, v98919)
            let! v98924 = v98924 
            let v98925 : int32 = v98924 
            let v98927 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v98928 : string seq = v98927 v98875
            let v98932 : (string seq -> string seq) = Seq.rev
            let v98933 : string seq = v98932 v98928
            let v98938 : string = method73()
            let v98939 : (string -> (string seq -> string)) = String.concat
            let v98940 : (string seq -> string) = v98939 v98938
            let v98941 : string = v98940 v98933
            let v99257 : unit = ()
            let v99258 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7, v98925, v98941)
            let v99259 : unit = (fun () -> v99258 (); v99257) ()
            return struct (v98925, v98941) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v118623 : Async<struct (int32 * string)> = _let'_v79092 
    let _run_target_args'_v12 = v118623 
    #endif
#else
    let v118625 : unit = ()
    let _let'_v118625 =
        async {
            (* run_target_args'
            let v137668 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v137671 : int32, v137672 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137671, v137672) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v137679 : int32, v137680 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137679, v137680) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v137687 : int32, v137688 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137687, v137688) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v137695 : int32, v137696 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137695, v137696) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v137703 : int32, v137704 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137703, v137704) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v137711 : int32, v137712 : string) = null |> unbox<struct (int32 * string)>
            return struct (v137711, v137712) 
            #endif
#else
            let v137717 : US18 = method101(v0)
            let struct (v137729 : string, v137730 : US5) =
                match v137717 with
                | US18_1(v137720) -> (* Error *)
                    let v137722 : string = $"resultm.get / Result value was Error: {v137720}"
                    failwith<struct (string * US5)> v137722
                | US18_0(v137718, v137719) -> (* Ok *)
                    struct (v137718, v137719)
            let v137733 : (string -> US5) = method6()
            let v137734 : US5 option = v6 |> Option.map v137733 
            let v137754 : US5 = US5_1
            let v137755 : US5 = v137734 |> Option.defaultValue v137754 
            let v137762 : string =
                match v137755 with
                | US5_1 -> (* None *)
                    let v137760 : string = ""
                    v137760
                | US5_0(v137759) -> (* Some *)
                    v137759
            let v138074 : unit = ()
            let v138075 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v7, v137730, v137729)
            let v138076 : unit = (fun () -> v138075 (); v138074) ()
            let v138391 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v138395 : string =
                match v137730 with
                | US5_1 -> (* None *)
                    let v138393 : string = ""
                    v138393
                | US5_0(v138392) -> (* Some *)
                    v138392
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v138395,
              StandardOutputEncoding = v138391,
              WorkingDirectory = v137762,
              FileName = v137729,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v138396 : System.Diagnostics.ProcessStartInfo = start_info
            let v138397 : (struct (string * string) []) = method166(v0, v1, v2, v3, v4, v5, v6, v7)
            let v138398 : int32 = v138397.Length
            let v138399 : Mut5 = {l0 = 0} : Mut5
            while method30(v138398, v138399) do
                let v138401 : int32 = v138399.l0
                let struct (v138402 : string, v138403 : string) = v138397.[int v138401]
                v138396.EnvironmentVariables.[v138402] <- v138403 
                let v138404 : int32 = v138401 + 1
                v138399.l0 <- v138404
                ()
            let v138405 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v138396)
            use v138405 = v138405 
            let v138406 : System.Diagnostics.Process = v138405 
            let v138407 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v138408 : System.Collections.Concurrent.ConcurrentStack<string> = v138407 ()
            let v138409 : bool = false
            let v138410 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v138406, v138408, v138409)
            v138406.OutputDataReceived.Add v138410 
            if v7 then
                let v138411 : bool = true
                let v138412 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7, v138406, v138408, v138411)
                v138406.ErrorDataReceived.Add v138412 
                ()
            let v138413 : (unit -> bool) = v138406.Start
            let v138414 : bool = v138413 ()
            let v138415 : bool = v138414 = false
            if v138415 then
                let v138416 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v138416
            let v138417 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v138417 v138406
            let v138418 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v138418 v138406
            let v138421 : (System.Threading.CancellationToken -> US36) = method172()
            let v138422 : US36 option = v1 |> Option.map v138421 
            let v138442 : US36 = US36_1
            let v138443 : US36 = v138422 |> Option.defaultValue v138442 
            let v138450 : System.Threading.CancellationToken =
                match v138443 with
                | US36_1 -> (* None *)
                    let v138448 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v138448
                | US36_0(v138447) -> (* Some *)
                    v138447
            let v138451 : Async<System.Threading.CancellationToken> = method173(v138450)
            let! v138451 = v138451 
            let v138452 : System.Threading.CancellationToken = v138451 
            let v138453 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v138452.Register
            let v138454 : (unit -> unit) = closure65(v138406)
            let v138455 : System.Threading.CancellationTokenRegistration = v138453 v138454
            use v138455 = v138455 
            let v138456 : System.Threading.CancellationTokenRegistration = v138455 
            let v138457 : Async<int32> = method176(v138406, v138408, v138452)
            let! v138457 = v138457 
            let v138458 : int32 = v138457 
            let v138460 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v138461 : string seq = v138460 v138408
            let v138465 : (string seq -> string seq) = Seq.rev
            let v138466 : string seq = v138465 v138461
            let v138471 : string = method73()
            let v138472 : (string -> (string seq -> string)) = String.concat
            let v138473 : (string seq -> string) = v138472 v138471
            let v138474 : string = v138473 v138466
            let v138790 : unit = ()
            let v138791 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7, v138458, v138474)
            let v138792 : unit = (fun () -> v138791 (); v138790) ()
            return struct (v138458, v138474) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v158156 : Async<struct (int32 * string)> = _let'_v118625 
    let _run_target_args'_v12 = v158156 
    #endif
    let v158157 : Async<struct (int32 * string)> = _run_target_args'_v12 
    v158157
and method162 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : Async<struct (int32 * string)> =
    method163(v0, v1, v2, v3, v4, v5, v6, v7)
and method99 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : bool) : struct (int32 * string) =
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = method100(v0, v1, v2, v3, v4, v5, v6, v7)
    let v18 : US18 = method101(v17)
    let struct (v30 : string, v31 : US5) =
        match v18 with
        | US18_1(v21) -> (* Error *)
            let v23 : string = $"resultm.get / Result value was Error: {v21}"
            failwith<struct (string * US5)> v23
        | US18_0(v19, v20) -> (* Ok *)
            struct (v19, v20)
    let v35 : string =
        match v31 with
        | US5_1 -> (* None *)
            let v33 : string = ""
            v33
        | US5_0(v32) -> (* Some *)
            v32
    let v36 : US26 = method122(v35)
    let v45 : (string []) =
        match v36 with
        | US26_1(v38) -> (* Error *)
            let v40 : string = $"resultm.get / Result value was Error: {v38}"
            failwith<(string [])> v40
        | US26_0(v37) -> (* Ok *)
            v37
    let v46 : string = "$0.to_vec()"
    let v47 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v49 : bool = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "x"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr () v50 
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v51 v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v51 v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v51 v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Ref<Str> = v51 |> unbox<Ref<Str>>
    let _run_target_args'_v56 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v68 : Ref<Str> = v51 |> unbox<Ref<Str>>
    let _run_target_args'_v56 = v68 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v51 |> unbox<Ref<Str>>
    let _run_target_args'_v56 = v72 
    #endif
#else
    let v76 : Ref<Str> = v51 |> unbox<Ref<Str>>
    let _run_target_args'_v56 = v76 
    #endif
    let v79 : Ref<Str> = _run_target_args'_v56 
    (* run_target_args'
    let v92 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v93 
    let _run_target_args'_v92 = v94 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v95 
    let _run_target_args'_v92 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v97 
    let _run_target_args'_v92 = v98 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v100 : std_string_String = v79 |> unbox<std_string_String>
    let _run_target_args'_v92 = v100 
    #endif
#if FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v79 |> unbox<std_string_String>
    let _run_target_args'_v92 = v104 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v108 : std_string_String = v79 |> unbox<std_string_String>
    let _run_target_args'_v92 = v108 
    #endif
#else
    let v112 : std_string_String = v79 |> unbox<std_string_String>
    let _run_target_args'_v92 = v112 
    #endif
    let v115 : std_string_String = _run_target_args'_v92 
    let v124 : string = "true; $0 }).collect::<Vec<_>>()"
    let v125 : bool = Fable.Core.RustInterop.emitRustExpr v115 v124 
    let v126 : string = "_vec_map"
    let v127 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v126 
    let v443 : unit = ()
    let v444 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v7, v30, v127)
    let v445 : unit = (fun () -> v444 (); v443) ()
    let v765 : bool = true
    let mutable _capture_v765 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v766 : string = "std::process::Command::new(&*$0)"
    let v767 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v30 v766 
    let v768 : string = "true; let mut v767 = v767"
    let v769 : bool = Fable.Core.RustInterop.emitRustExpr () v768 
    let v770 : string = "true; std::process::Command::args(&mut v767, &*$0)"
    let v771 : bool = Fable.Core.RustInterop.emitRustExpr v127 v770 
    let v772 : string = "$0"
    let v773 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v767 v772 
    let v774 : string = "std::process::Stdio::piped()"
    let v775 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v774 
    let v776 : string = "true; let mut v773 = v773"
    let v777 : bool = Fable.Core.RustInterop.emitRustExpr () v776 
    let v778 : string = "true; std::process::Command::stdout(&mut v773, std::process::Stdio::piped())"
    let v779 : bool = Fable.Core.RustInterop.emitRustExpr () v778 
    let v780 : string = "$0"
    let v781 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v773 v780 
    let v782 : string = "std::process::Stdio::piped()"
    let v783 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v782 
    let v784 : string = "true; let mut v781 = v781"
    let v785 : bool = Fable.Core.RustInterop.emitRustExpr () v784 
    let v786 : string = "true; std::process::Command::stderr(&mut v781, std::process::Stdio::piped())"
    let v787 : bool = Fable.Core.RustInterop.emitRustExpr () v786 
    let v788 : string = "$0"
    let v789 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v781 v788 
    let v790 : string = "std::process::Stdio::piped()"
    let v791 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v790 
    let v792 : string = "true; let mut v789 = v789"
    let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
    let v794 : string = "true; std::process::Command::stdin(&mut v789, std::process::Stdio::piped())"
    let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
    let v796 : string = "$0"
    let v797 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v789 v796 
    let v800 : (string -> US5) = method6()
    let v801 : US5 option = v6 |> Option.map v800 
    let v821 : US5 = US5_1
    let v822 : US5 = v801 |> Option.defaultValue v821 
    let v838 : std_process_Command =
        match v822 with
        | US5_1 -> (* None *)
            let v833 : string = $"v797"
            let v834 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v833 
            let v835 : string = "$0"
            let v836 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v834 v835 
            v836
        | US5_0(v826) -> (* Some *)
            let v827 : string = "true; let mut v797 = v797"
            let v828 : bool = Fable.Core.RustInterop.emitRustExpr () v827 
            let v829 : string = "true; std::process::Command::current_dir(&mut v797, &*$0)"
            let v830 : bool = Fable.Core.RustInterop.emitRustExpr v826 v829 
            let v831 : string = $"v797"
            let v832 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v831 
            v832
    let v839 : uint64 = System.Convert.ToUInt64 v2.Length
    let v840 : bool = v839 = 0UL
    let v860 : std_process_Command =
        if v840 then
            v838
        else
            let v841 : string = "$0.to_vec()"
            let v842 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v841 
            let v843 : string = "true; let _vec_fold_ = $0.into_iter().fold(v838, |acc, x| { //"
            let v844 : bool = Fable.Core.RustInterop.emitRustExpr v842 v843 
            let v845 : string = "acc"
            let v846 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v845 
            let v847 : string = "x"
            let struct (v848 : string, v849 : string) = Fable.Core.RustInterop.emitRustExpr () v847 
            let v850 : string = "true; let mut v846 = v846"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; std::process::Command::env(&mut v846, &*$0, &*$1)"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr struct (v848, v849) v852 
            let v854 : string = "$0"
            let v855 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v846 v854 
            let v856 : string = "true; $0 })"
            let v857 : bool = Fable.Core.RustInterop.emitRustExpr v855 v856 
            let v858 : string = "_vec_fold_"
            let v859 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v858 
            v859
    let v861 : string = "true; let mut v860 = v860"
    let v862 : bool = Fable.Core.RustInterop.emitRustExpr () v861 
    let v863 : string = "std::process::Command::spawn(&mut v860)"
    let v864 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v863 
    let v865 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v867 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v868 : string = "$0.map_err(|x| $1(x))"
    let v869 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v864, v865) v868 
    let _run_target_args'_v867 = v869 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v870 : string = "$0.map_err(|x| $1(x))"
    let v871 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v864, v865) v870 
    let _run_target_args'_v867 = v871 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v872 : string = "$0.map_err(|x| $1(x))"
    let v873 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v864, v865) v872 
    let _run_target_args'_v867 = v873 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v874 : Result<std_process_Child, std_string_String> = match v864 with Ok x -> Ok x | Error x -> Error (v865 x)
    let _run_target_args'_v867 = v874 
    #endif
#if FABLE_COMPILER_PYTHON
    let v875 : Result<std_process_Child, std_string_String> = match v864 with Ok x -> Ok x | Error x -> Error (v865 x)
    let _run_target_args'_v867 = v875 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v876 : Result<std_process_Child, std_string_String> = match v864 with Ok x -> Ok x | Error x -> Error (v865 x)
    let _run_target_args'_v867 = v876 
    #endif
#else
    let v877 : Result<std_process_Child, std_string_String> = match v864 with Ok x -> Ok x | Error x -> Error (v865 x)
    let _run_target_args'_v867 = v877 
    #endif
    let v878 : Result<std_process_Child, std_string_String> = _run_target_args'_v867 
    let v881 : (std_process_Child option -> std_process_Child option) = method134()
    let v882 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v883 : bool = Fable.Core.RustInterop.emitRustExpr v878 v882 
    let v884 : string = "x"
    let v885 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v884 
    let v887 : std_process_Child option = Some v885 
    let v890 : std_process_Child option = v881 v887
    let v891 : string = "std::sync::Mutex::new(v890)"
    let v892 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v891 
    let v893 : string = "std::sync::Arc::new(v892)"
    let v894 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v893 
    let v895 : string = "true; $0 })"
    let v896 : bool = Fable.Core.RustInterop.emitRustExpr v894 v895 
    let v897 : string = "_result_map_"
    let v898 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v897 
    let v899 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US28) = method135()
    let v900 : (std_string_String -> US28) = method136()
    let v901 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v902 : US28 = Fable.Core.RustInterop.emitRustExpr struct (v899, v900, v898) v901 
    let struct (v5742 : int32, v5743 : US8, v5744 : US29) =
        match v902 with
        | US28_1(v5100) -> (* Error *)
            let v5416 : unit = ()
            let v5417 : (unit -> unit) = closure44(v0, v1, v2, v3, v4, v5, v6, v7, v30, v127, v5100)
            let v5418 : unit = (fun () -> v5417 (); v5416) ()
            let v5737 : US8 = US8_0(v5100)
            let v5738 : US29 = US29_1
            struct (-1, v5737, v5738)
        | US28_0(v903) -> (* Ok *)
            let v904 : string = "true; let _capture = (|| { //"
            let v905 : bool = Fable.Core.RustInterop.emitRustExpr () v904 
            let v906 : string = "$0"
            let v907 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v903 v906 
            let v908 : string = "v907.lock()"
            let v909 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v908 
            (* run_target_args'
            let v911 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v912 : string = "$0.unwrap()"
            let v913 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v909 v912 
            let _run_target_args'_v911 = v913 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v914 : string = "$0.unwrap()"
            let v915 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v909 v914 
            let _run_target_args'_v911 = v915 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v916 : string = "$0.unwrap()"
            let v917 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v909 v916 
            let _run_target_args'_v911 = v917 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v918 : std_sync_MutexGuard<std_process_Child option> = match v909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v911 = v918 
            #endif
#if FABLE_COMPILER_PYTHON
            let v919 : std_sync_MutexGuard<std_process_Child option> = match v909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v911 = v919 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v920 : std_sync_MutexGuard<std_process_Child option> = match v909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v911 = v920 
            #endif
#else
            let v921 : std_sync_MutexGuard<std_process_Child option> = match v909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v911 = v921 
            #endif
            let v922 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v911 
            let v925 : std_sync_MutexGuard<std_process_Child option> = method139(v922)
            let v926 : string = "true; let mut v925 = v925"
            let v927 : bool = Fable.Core.RustInterop.emitRustExpr () v926 
            let v928 : string = "&mut $0"
            let v929 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v925 v928 
            let v930 : string = "$0.as_mut()"
            let v931 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v929 v930 
            let v932 : string = "$0.unwrap()"
            let v933 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v931 v932 
            let v934 : string = "&mut $0.stdout"
            let v935 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v933 v934 
            let v936 : string = "Option::take($0)"
            let v937 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v935 v936 
            let v938 : string = "$0.unwrap()"
            let v939 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v937 v938 
            let v940 : string = "true; $0 })()"
            let v941 : bool = Fable.Core.RustInterop.emitRustExpr v939 v940 
            let v942 : string = "_capture"
            let v943 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v942 
            let v944 : string = "true; let _capture = (|| { //"
            let v945 : bool = Fable.Core.RustInterop.emitRustExpr () v944 
            let v946 : string = "$0"
            let v947 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v903 v946 
            let v948 : string = "v947.lock()"
            let v949 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v948 
            (* run_target_args'
            let v951 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v952 : string = "$0.unwrap()"
            let v953 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v949 v952 
            let _run_target_args'_v951 = v953 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v954 : string = "$0.unwrap()"
            let v955 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v949 v954 
            let _run_target_args'_v951 = v955 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v956 : string = "$0.unwrap()"
            let v957 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v949 v956 
            let _run_target_args'_v951 = v957 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v958 : std_sync_MutexGuard<std_process_Child option> = match v949 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v951 = v958 
            #endif
#if FABLE_COMPILER_PYTHON
            let v959 : std_sync_MutexGuard<std_process_Child option> = match v949 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v951 = v959 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v960 : std_sync_MutexGuard<std_process_Child option> = match v949 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v951 = v960 
            #endif
#else
            let v961 : std_sync_MutexGuard<std_process_Child option> = match v949 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v951 = v961 
            #endif
            let v962 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v951 
            let v965 : std_sync_MutexGuard<std_process_Child option> = method139(v962)
            let v966 : string = "true; let mut v965 = v965"
            let v967 : bool = Fable.Core.RustInterop.emitRustExpr () v966 
            let v968 : string = "&mut $0"
            let v969 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v965 v968 
            let v970 : string = "$0.as_mut()"
            let v971 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v969 v970 
            let v972 : string = "$0.unwrap()"
            let v973 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v971 v972 
            let v974 : string = "&mut $0.stderr"
            let v975 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v973 v974 
            let v976 : string = "Option::take($0)"
            let v977 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v975 v976 
            let v978 : string = "$0.unwrap()"
            let v979 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v977 v978 
            let v980 : string = "true; $0 })()"
            let v981 : bool = Fable.Core.RustInterop.emitRustExpr v979 v980 
            let v982 : string = "_capture"
            let v983 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v982 
            let v984 : string = "true; let _capture = (|| { //"
            let v985 : bool = Fable.Core.RustInterop.emitRustExpr () v984 
            let v986 : string = "$0"
            let v987 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v903 v986 
            let v988 : string = "v987.lock()"
            let v989 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v988 
            (* run_target_args'
            let v991 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v992 : string = "$0.unwrap()"
            let v993 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v989 v992 
            let _run_target_args'_v991 = v993 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v994 : string = "$0.unwrap()"
            let v995 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v989 v994 
            let _run_target_args'_v991 = v995 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v996 : string = "$0.unwrap()"
            let v997 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v989 v996 
            let _run_target_args'_v991 = v997 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v998 : std_sync_MutexGuard<std_process_Child option> = match v989 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v991 = v998 
            #endif
#if FABLE_COMPILER_PYTHON
            let v999 : std_sync_MutexGuard<std_process_Child option> = match v989 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v991 = v999 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1000 : std_sync_MutexGuard<std_process_Child option> = match v989 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v991 = v1000 
            #endif
#else
            let v1001 : std_sync_MutexGuard<std_process_Child option> = match v989 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v991 = v1001 
            #endif
            let v1002 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v991 
            let v1005 : std_sync_MutexGuard<std_process_Child option> = method139(v1002)
            let v1006 : string = "true; let mut v1005 = v1005"
            let v1007 : bool = Fable.Core.RustInterop.emitRustExpr () v1006 
            let v1008 : string = "&mut $0"
            let v1009 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1005 v1008 
            let v1010 : string = "$0.as_mut()"
            let v1011 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1009 v1010 
            let v1012 : string = "$0.unwrap()"
            let v1013 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1011 v1012 
            let v1014 : string = "&mut $0.stdin"
            let v1015 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1013 v1014 
            let v1016 : string = "Option::take($0)"
            let v1017 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1015 v1016 
            let v1018 : string = "$0.unwrap()"
            let v1019 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1017 v1018 
            let v1021 : std_process_ChildStdin option = Some v1019 
            let v1024 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method140()
            let v1025 : std_process_ChildStdin option = v1024 v1021
            let v1026 : string = "std::sync::Mutex::new(v1025)"
            let v1027 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v1026 
            let v1028 : string = "std::sync::Arc::new(v1027)"
            let v1029 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1028 
            let v1030 : string = "true; $0 })()"
            let v1031 : bool = Fable.Core.RustInterop.emitRustExpr v1029 v1030 
            let v1032 : string = "_capture"
            let v1033 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1032 
            let v1034 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1035 : std_sync_mpsc_Sender<std_string_String>, v1036 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1034 
            let v1037 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method141()
            let v1038 : std_sync_mpsc_Sender<std_string_String> = v1037 v1035
            let v1039 : string = "std::sync::Mutex::new(v1038)"
            let v1040 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1039 
            let v1041 : string = "std::sync::Arc::new(v1040)"
            let v1042 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1041 
            let v1043 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method142()
            let v1044 : std_sync_mpsc_Sender<std_string_String> = v1043 v1035
            let v1045 : string = "std::sync::Mutex::new(v1044)"
            let v1046 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v1045 
            let v1047 : string = "std::sync::Arc::new(v1046)"
            let v1048 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1047 
            let v1049 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method143()
            let v1050 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v1049 v1036
            let v1051 : string = "std::sync::Mutex::new(v1050)"
            let v1052 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v1051 
            let v1053 : string = "std::sync::Arc::new(v1052)"
            let v1054 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1053 
            let v1055 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v1056 : bool = Fable.Core.RustInterop.emitRustExpr () v1055 
            let v1057 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1058 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v943 v1057 
            let v1059 : string = "std::io::BufReader::new($0)"
            let v1060 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v1058 v1059 
            let v1061 : string = "std::io::BufRead::lines(v1060)"
            let v1062 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1061 
            let v1063 : string = "true; let mut v1062 = v1062; let _iter_try_for_each = v1062.try_for_each(|x| { //"
            let v1064 : bool = Fable.Core.RustInterop.emitRustExpr () v1063 
            let v1065 : string = "x"
            let v1066 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1065 
            let v1067 : string = "$0.clone()"
            let v1068 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1042 v1067 
            let v1069 : (std_io_Error -> std_string_String) = method77()
            (* run_target_args'
            let v1071 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1072 : string = "$0.map_err(|x| $1(x))"
            let v1073 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1066, v1069) v1072 
            let _run_target_args'_v1071 = v1073 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1074 : string = "$0.map_err(|x| $1(x))"
            let v1075 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1066, v1069) v1074 
            let _run_target_args'_v1071 = v1075 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1076 : string = "$0.map_err(|x| $1(x))"
            let v1077 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1066, v1069) v1076 
            let _run_target_args'_v1071 = v1077 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1078 : Result<std_string_String, std_string_String> = match v1066 with Ok x -> Ok x | Error x -> Error (v1069 x)
            let _run_target_args'_v1071 = v1078 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1079 : Result<std_string_String, std_string_String> = match v1066 with Ok x -> Ok x | Error x -> Error (v1069 x)
            let _run_target_args'_v1071 = v1079 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1080 : Result<std_string_String, std_string_String> = match v1066 with Ok x -> Ok x | Error x -> Error (v1069 x)
            let _run_target_args'_v1071 = v1080 
            #endif
#else
            let v1081 : Result<std_string_String, std_string_String> = match v1066 with Ok x -> Ok x | Error x -> Error (v1069 x)
            let _run_target_args'_v1071 = v1081 
            #endif
            let v1082 : Result<std_string_String, std_string_String> = _run_target_args'_v1071 
            let v1085 : (std_string_String -> US30) = method144()
            let v1086 : (std_string_String -> US30) = method145()
            let v1087 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1088 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v1085, v1086, v1082) v1087 
            let v2496 : std_string_String =
                match v1088 with
                | US30_1(v1793) -> (* Error *)
                    let v2105 : unit = ()
                    let v2106 : (unit -> unit) = closure50(v5, v1793)
                    let v2107 : unit = (fun () -> v2106 (); v2105) ()
                    let v2422 : string = $"\u001b[4;7m{v1793}\u001b[0m"
                    (* run_target_args'
                    let v2427 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2428 : string = "&*$0"
                    let v2429 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2422 v2428 
                    let _run_target_args'_v2427 = v2429 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2430 : string = "&*$0"
                    let v2431 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2422 v2430 
                    let _run_target_args'_v2427 = v2431 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2432 : string = "&*$0"
                    let v2433 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2422 v2432 
                    let _run_target_args'_v2427 = v2433 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2435 : Ref<Str> = v2422 |> unbox<Ref<Str>>
                    let _run_target_args'_v2427 = v2435 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2439 : Ref<Str> = v2422 |> unbox<Ref<Str>>
                    let _run_target_args'_v2427 = v2439 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2443 : Ref<Str> = v2422 |> unbox<Ref<Str>>
                    let _run_target_args'_v2427 = v2443 
                    #endif
#else
                    let v2447 : Ref<Str> = v2422 |> unbox<Ref<Str>>
                    let _run_target_args'_v2427 = v2447 
                    #endif
                    let v2450 : Ref<Str> = _run_target_args'_v2427 
                    (* run_target_args'
                    let v2463 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2464 : string = "String::from($0)"
                    let v2465 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2450 v2464 
                    let _run_target_args'_v2463 = v2465 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2466 : string = "String::from($0)"
                    let v2467 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2450 v2466 
                    let _run_target_args'_v2463 = v2467 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2468 : string = "String::from($0)"
                    let v2469 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2450 v2468 
                    let _run_target_args'_v2463 = v2469 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2471 : std_string_String = v2450 |> unbox<std_string_String>
                    let _run_target_args'_v2463 = v2471 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2475 : std_string_String = v2450 |> unbox<std_string_String>
                    let _run_target_args'_v2463 = v2475 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2479 : std_string_String = v2450 |> unbox<std_string_String>
                    let _run_target_args'_v2463 = v2479 
                    #endif
#else
                    let v2483 : std_string_String = v2450 |> unbox<std_string_String>
                    let _run_target_args'_v2463 = v2483 
                    #endif
                    let v2486 : std_string_String = _run_target_args'_v2463 
                    v2486
                | US30_0(v1089) -> (* Ok *)
                    let v1090 : string = "fable_library_rust::String_::fromString($0)"
                    let v1091 : string = Fable.Core.RustInterop.emitRustExpr v1089 v1090 
                    let v1092 : string = "encoding_rs::UTF_8"
                    let v1093 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1092 
                    let v1094 : string = "$0.encode(&*$1).0"
                    let v1095 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1093, v1091) v1094 
                    let v1096 : string = "$0.as_ref()"
                    let v1097 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1095 v1096 
                    let v1098 : string = "std::str::from_utf8($0)"
                    let v1099 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1097 v1098 
                    (* run_target_args'
                    let v1101 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1102 : string = "$0.unwrap()"
                    let v1103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1099 v1102 
                    let _run_target_args'_v1101 = v1103 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1104 : string = "$0.unwrap()"
                    let v1105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1099 v1104 
                    let _run_target_args'_v1101 = v1105 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1106 : string = "$0.unwrap()"
                    let v1107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1099 v1106 
                    let _run_target_args'_v1101 = v1107 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1108 : Ref<Str> = match v1099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1101 = v1108 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1109 : Ref<Str> = match v1099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1101 = v1109 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1110 : Ref<Str> = match v1099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1101 = v1110 
                    #endif
#else
                    let v1111 : Ref<Str> = match v1099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1101 = v1111 
                    #endif
                    let v1112 : Ref<Str> = _run_target_args'_v1101 
                    (* run_target_args'
                    let v1119 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1120 : string = "String::from($0)"
                    let v1121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1112 v1120 
                    let _run_target_args'_v1119 = v1121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1122 : string = "String::from($0)"
                    let v1123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1112 v1122 
                    let _run_target_args'_v1119 = v1123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1124 : string = "String::from($0)"
                    let v1125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1112 v1124 
                    let _run_target_args'_v1119 = v1125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1127 : std_string_String = v1112 |> unbox<std_string_String>
                    let _run_target_args'_v1119 = v1127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1131 : std_string_String = v1112 |> unbox<std_string_String>
                    let _run_target_args'_v1119 = v1131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1135 : std_string_String = v1112 |> unbox<std_string_String>
                    let _run_target_args'_v1119 = v1135 
                    #endif
#else
                    let v1139 : std_string_String = v1112 |> unbox<std_string_String>
                    let _run_target_args'_v1119 = v1139 
                    #endif
                    let v1142 : std_string_String = _run_target_args'_v1119 
                    let v1151 : string = "fable_library_rust::String_::fromString($0)"
                    let v1152 : string = Fable.Core.RustInterop.emitRustExpr v1142 v1151 
                    let v1153 : string = $"> {v1152}"
                    if v5 then
                        let v1468 : unit = ()
                        let v1469 : (unit -> unit) = closure51(v1153)
                        let v1470 : unit = (fun () -> v1469 (); v1468) ()
                        ()
                    else
                        let v1789 : unit = ()
                        let v1790 : (unit -> unit) = closure10(v1153)
                        let v1791 : unit = (fun () -> v1790 (); v1789) ()
                        ()
                    v1142
            let v2497 : string = "$0"
            let v2498 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1068 v2497 
            let v2499 : string = "v2498.lock()"
            let v2500 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2499 
            (* run_target_args'
            let v2502 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2503 : string = "$0.unwrap()"
            let v2504 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2500 v2503 
            let _run_target_args'_v2502 = v2504 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2505 : string = "$0.unwrap()"
            let v2506 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2500 v2505 
            let _run_target_args'_v2502 = v2506 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2507 : string = "$0.unwrap()"
            let v2508 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2500 v2507 
            let _run_target_args'_v2502 = v2508 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2509 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2500 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2502 = v2509 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2510 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2500 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2502 = v2510 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2511 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2500 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2502 = v2511 
            #endif
#else
            let v2512 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v2500 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v2502 = v2512 
            #endif
            let v2513 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v2502 
            let v2516 : string = "&$0"
            let v2517 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2513 v2516 
            let v2518 : string = "$0.send($1)"
            let v2519 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v2517, v2496) v2518 
            let v2520 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method150()
            (* run_target_args'
            let v2522 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2523 : string = "$0.map_err(|x| $1(x))"
            let v2524 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2519, v2520) v2523 
            let _run_target_args'_v2522 = v2524 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2525 : string = "$0.map_err(|x| $1(x))"
            let v2526 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2519, v2520) v2525 
            let _run_target_args'_v2522 = v2526 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2527 : string = "$0.map_err(|x| $1(x))"
            let v2528 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2519, v2520) v2527 
            let _run_target_args'_v2522 = v2528 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2529 : Result<unit, std_string_String> = match v2519 with Ok x -> Ok x | Error x -> Error (v2520 x)
            let _run_target_args'_v2522 = v2529 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2530 : Result<unit, std_string_String> = match v2519 with Ok x -> Ok x | Error x -> Error (v2520 x)
            let _run_target_args'_v2522 = v2530 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2531 : Result<unit, std_string_String> = match v2519 with Ok x -> Ok x | Error x -> Error (v2520 x)
            let _run_target_args'_v2522 = v2531 
            #endif
#else
            let v2532 : Result<unit, std_string_String> = match v2519 with Ok x -> Ok x | Error x -> Error (v2520 x)
            let _run_target_args'_v2522 = v2532 
            #endif
            let v2533 : Result<unit, std_string_String> = _run_target_args'_v2522 
            let v2536 : string = "$0"
            let v2537 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v2533 v2536 
            let v2538 : string = "true; $0 }); //"
            let v2539 : bool = Fable.Core.RustInterop.emitRustExpr v2537 v2538 
            let v2540 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v2541 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v2540 
            let v2542 : Result<unit, string> = method151(v2541)
            let v2543 : string = ""
            let v2544 : string = "}"
            let v2545 : string = v2543 + v2544 
            let x = v2542 //
            let v2546 : _ = x
            let v2547 : unit = ()
            (* run_target_args'
            let v2548 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2549 : string = $"true; let _fix_closure_v2547 = $0"
            let v2550 : bool = Fable.Core.RustInterop.emitRustExpr v2546 v2549 
            let _run_target_args'_v2548 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2551 : string = $"true; let _fix_closure_v2547 = $0"
            let v2552 : bool = Fable.Core.RustInterop.emitRustExpr v2546 v2551 
            let _run_target_args'_v2548 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2553 : string = $"true; let _fix_closure_v2547 = $0"
            let v2554 : bool = Fable.Core.RustInterop.emitRustExpr v2546 v2553 
            let _run_target_args'_v2548 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v2548 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v2548 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v2548 = false 
            #endif
#else
            let _run_target_args'_v2548 = false 
            #endif
            let v2555 : bool = _run_target_args'_v2548 
            let v2556 : string = $"true; _fix_closure_v2547 " + v2545 + "); " + v2543 + " // rust.fix_closure'"
            let v2557 : bool = Fable.Core.RustInterop.emitRustExpr () v2556 
            let v2558 : string = "__spawn"
            let v2559 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v2558 
            let v2560 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v2561 : bool = Fable.Core.RustInterop.emitRustExpr () v2560 
            let v2562 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v2563 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v983 v2562 
            let v2564 : string = "std::io::BufReader::new($0)"
            let v2565 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v2563 v2564 
            let v2566 : string = "std::io::BufRead::lines(v2565)"
            let v2567 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2566 
            let v2568 : string = "true; let mut v2567 = v2567; let _iter_try_for_each = v2567.try_for_each(|x| { //"
            let v2569 : bool = Fable.Core.RustInterop.emitRustExpr () v2568 
            let v2570 : string = "x"
            let v2571 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v2570 
            let v2572 : bool = v7 = false
            let v4109 : Result<unit, std_string_String> =
                if v2572 then
                    let v2574 : Result<unit, std_string_String> = Ok () 
                    v2574
                else
                    let v2577 : string = "$0.clone()"
                    let v2578 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1048 v2577 
                    let v2579 : (std_io_Error -> std_string_String) = method77()
                    (* run_target_args'
                    let v2581 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2582 : string = "$0.map_err(|x| $1(x))"
                    let v2583 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2571, v2579) v2582 
                    let _run_target_args'_v2581 = v2583 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2584 : string = "$0.map_err(|x| $1(x))"
                    let v2585 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2571, v2579) v2584 
                    let _run_target_args'_v2581 = v2585 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2586 : string = "$0.map_err(|x| $1(x))"
                    let v2587 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2571, v2579) v2586 
                    let _run_target_args'_v2581 = v2587 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2588 : Result<std_string_String, std_string_String> = match v2571 with Ok x -> Ok x | Error x -> Error (v2579 x)
                    let _run_target_args'_v2581 = v2588 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2589 : Result<std_string_String, std_string_String> = match v2571 with Ok x -> Ok x | Error x -> Error (v2579 x)
                    let _run_target_args'_v2581 = v2589 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2590 : Result<std_string_String, std_string_String> = match v2571 with Ok x -> Ok x | Error x -> Error (v2579 x)
                    let _run_target_args'_v2581 = v2590 
                    #endif
#else
                    let v2591 : Result<std_string_String, std_string_String> = match v2571 with Ok x -> Ok x | Error x -> Error (v2579 x)
                    let _run_target_args'_v2581 = v2591 
                    #endif
                    let v2592 : Result<std_string_String, std_string_String> = _run_target_args'_v2581 
                    let v2595 : (std_string_String -> US30) = method144()
                    let v2596 : (std_string_String -> US30) = method145()
                    let v2597 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
                    let v2598 : US30 = Fable.Core.RustInterop.emitRustExpr struct (v2595, v2596, v2592) v2597 
                    let v4069 : std_string_String =
                        match v2598 with
                        | US30_1(v3370) -> (* Error *)
                            let v3680 : unit = ()
                            let v3681 : (unit -> unit) = closure50(v5, v3370)
                            let v3682 : unit = (fun () -> v3681 (); v3680) ()
                            let v3995 : string = $"\u001b[4;7m{v3370}\u001b[0m"
                            (* run_target_args'
                            let v4000 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v4001 : string = "&*$0"
                            let v4002 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3995 v4001 
                            let _run_target_args'_v4000 = v4002 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v4003 : string = "&*$0"
                            let v4004 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3995 v4003 
                            let _run_target_args'_v4000 = v4004 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v4005 : string = "&*$0"
                            let v4006 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3995 v4005 
                            let _run_target_args'_v4000 = v4006 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v4008 : Ref<Str> = v3995 |> unbox<Ref<Str>>
                            let _run_target_args'_v4000 = v4008 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4012 : Ref<Str> = v3995 |> unbox<Ref<Str>>
                            let _run_target_args'_v4000 = v4012 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4016 : Ref<Str> = v3995 |> unbox<Ref<Str>>
                            let _run_target_args'_v4000 = v4016 
                            #endif
#else
                            let v4020 : Ref<Str> = v3995 |> unbox<Ref<Str>>
                            let _run_target_args'_v4000 = v4020 
                            #endif
                            let v4023 : Ref<Str> = _run_target_args'_v4000 
                            (* run_target_args'
                            let v4036 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v4037 : string = "String::from($0)"
                            let v4038 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4023 v4037 
                            let _run_target_args'_v4036 = v4038 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v4039 : string = "String::from($0)"
                            let v4040 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4023 v4039 
                            let _run_target_args'_v4036 = v4040 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v4041 : string = "String::from($0)"
                            let v4042 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4023 v4041 
                            let _run_target_args'_v4036 = v4042 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v4044 : std_string_String = v4023 |> unbox<std_string_String>
                            let _run_target_args'_v4036 = v4044 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v4048 : std_string_String = v4023 |> unbox<std_string_String>
                            let _run_target_args'_v4036 = v4048 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v4052 : std_string_String = v4023 |> unbox<std_string_String>
                            let _run_target_args'_v4036 = v4052 
                            #endif
#else
                            let v4056 : std_string_String = v4023 |> unbox<std_string_String>
                            let _run_target_args'_v4036 = v4056 
                            #endif
                            let v4059 : std_string_String = _run_target_args'_v4036 
                            v4059
                        | US30_0(v2599) -> (* Ok *)
                            let v2600 : string = "fable_library_rust::String_::fromString($0)"
                            let v2601 : string = Fable.Core.RustInterop.emitRustExpr v2599 v2600 
                            let v2602 : string = "encoding_rs::UTF_8"
                            let v2603 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v2602 
                            let v2604 : string = "$0.encode(&*$1).0"
                            let v2605 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v2603, v2601) v2604 
                            let v2606 : string = "$0.as_ref()"
                            let v2607 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v2605 v2606 
                            let v2608 : string = "std::str::from_utf8($0)"
                            let v2609 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v2607 v2608 
                            (* run_target_args'
                            let v2611 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2612 : string = "$0.unwrap()"
                            let v2613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2609 v2612 
                            let _run_target_args'_v2611 = v2613 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2614 : string = "$0.unwrap()"
                            let v2615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2609 v2614 
                            let _run_target_args'_v2611 = v2615 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2616 : string = "$0.unwrap()"
                            let v2617 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2609 v2616 
                            let _run_target_args'_v2611 = v2617 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2618 : Ref<Str> = match v2609 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2611 = v2618 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2619 : Ref<Str> = match v2609 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2611 = v2619 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2620 : Ref<Str> = match v2609 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2611 = v2620 
                            #endif
#else
                            let v2621 : Ref<Str> = match v2609 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v2611 = v2621 
                            #endif
                            let v2622 : Ref<Str> = _run_target_args'_v2611 
                            (* run_target_args'
                            let v2629 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2630 : string = "String::from($0)"
                            let v2631 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2622 v2630 
                            let _run_target_args'_v2629 = v2631 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2632 : string = "String::from($0)"
                            let v2633 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2622 v2632 
                            let _run_target_args'_v2629 = v2633 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2634 : string = "String::from($0)"
                            let v2635 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2622 v2634 
                            let _run_target_args'_v2629 = v2635 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2637 : std_string_String = v2622 |> unbox<std_string_String>
                            let _run_target_args'_v2629 = v2637 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2641 : std_string_String = v2622 |> unbox<std_string_String>
                            let _run_target_args'_v2629 = v2641 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2645 : std_string_String = v2622 |> unbox<std_string_String>
                            let _run_target_args'_v2629 = v2645 
                            #endif
#else
                            let v2649 : std_string_String = v2622 |> unbox<std_string_String>
                            let _run_target_args'_v2629 = v2649 
                            #endif
                            let v2652 : std_string_String = _run_target_args'_v2629 
                            let v2661 : string = "fable_library_rust::String_::fromString($0)"
                            let v2662 : string = Fable.Core.RustInterop.emitRustExpr v2652 v2661 
                            let v2663 : string = $"! {v2662}"
                            if v5 then
                                let v2975 : unit = ()
                                let v2976 : (unit -> unit) = closure51(v2663)
                                let v2977 : unit = (fun () -> v2976 (); v2975) ()
                                ()
                            else
                                let v3293 : unit = ()
                                let v3294 : (unit -> unit) = closure10(v2663)
                                let v3295 : unit = (fun () -> v3294 (); v3293) ()
                                ()
                            let v3297 : string = $"\u001b[4;7m{v2652}\u001b[0m"
                            (* run_target_args'
                            let v3302 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3303 : string = "&*$0"
                            let v3304 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3297 v3303 
                            let _run_target_args'_v3302 = v3304 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3305 : string = "&*$0"
                            let v3306 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3297 v3305 
                            let _run_target_args'_v3302 = v3306 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3307 : string = "&*$0"
                            let v3308 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3297 v3307 
                            let _run_target_args'_v3302 = v3308 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3310 : Ref<Str> = v3297 |> unbox<Ref<Str>>
                            let _run_target_args'_v3302 = v3310 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3314 : Ref<Str> = v3297 |> unbox<Ref<Str>>
                            let _run_target_args'_v3302 = v3314 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3318 : Ref<Str> = v3297 |> unbox<Ref<Str>>
                            let _run_target_args'_v3302 = v3318 
                            #endif
#else
                            let v3322 : Ref<Str> = v3297 |> unbox<Ref<Str>>
                            let _run_target_args'_v3302 = v3322 
                            #endif
                            let v3325 : Ref<Str> = _run_target_args'_v3302 
                            (* run_target_args'
                            let v3338 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3339 : string = "String::from($0)"
                            let v3340 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3325 v3339 
                            let _run_target_args'_v3338 = v3340 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3341 : string = "String::from($0)"
                            let v3342 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3325 v3341 
                            let _run_target_args'_v3338 = v3342 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3343 : string = "String::from($0)"
                            let v3344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3325 v3343 
                            let _run_target_args'_v3338 = v3344 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3346 : std_string_String = v3325 |> unbox<std_string_String>
                            let _run_target_args'_v3338 = v3346 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3350 : std_string_String = v3325 |> unbox<std_string_String>
                            let _run_target_args'_v3338 = v3350 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3354 : std_string_String = v3325 |> unbox<std_string_String>
                            let _run_target_args'_v3338 = v3354 
                            #endif
#else
                            let v3358 : std_string_String = v3325 |> unbox<std_string_String>
                            let _run_target_args'_v3338 = v3358 
                            #endif
                            let v3361 : std_string_String = _run_target_args'_v3338 
                            v3361
                    let v4070 : string = "$0"
                    let v4071 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v2578 v4070 
                    let v4072 : string = "v4071.lock()"
                    let v4073 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4072 
                    (* run_target_args'
                    let v4075 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4076 : string = "$0.unwrap()"
                    let v4077 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4073 v4076 
                    let _run_target_args'_v4075 = v4077 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4078 : string = "$0.unwrap()"
                    let v4079 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4073 v4078 
                    let _run_target_args'_v4075 = v4079 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4080 : string = "$0.unwrap()"
                    let v4081 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4073 v4080 
                    let _run_target_args'_v4075 = v4081 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4082 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4073 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4075 = v4082 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4083 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4073 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4075 = v4083 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4084 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4073 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4075 = v4084 
                    #endif
#else
                    let v4085 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v4073 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4075 = v4085 
                    #endif
                    let v4086 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v4075 
                    let v4089 : string = "&$0"
                    let v4090 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4086 v4089 
                    let v4091 : string = "$0.send($1)"
                    let v4092 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4090, v4069) v4091 
                    let v4093 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method150()
                    (* run_target_args'
                    let v4095 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4096 : string = "$0.map_err(|x| $1(x))"
                    let v4097 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4092, v4093) v4096 
                    let _run_target_args'_v4095 = v4097 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4098 : string = "$0.map_err(|x| $1(x))"
                    let v4099 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4092, v4093) v4098 
                    let _run_target_args'_v4095 = v4099 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4100 : string = "$0.map_err(|x| $1(x))"
                    let v4101 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4092, v4093) v4100 
                    let _run_target_args'_v4095 = v4101 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4102 : Result<unit, std_string_String> = match v4092 with Ok x -> Ok x | Error x -> Error (v4093 x)
                    let _run_target_args'_v4095 = v4102 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4103 : Result<unit, std_string_String> = match v4092 with Ok x -> Ok x | Error x -> Error (v4093 x)
                    let _run_target_args'_v4095 = v4103 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4104 : Result<unit, std_string_String> = match v4092 with Ok x -> Ok x | Error x -> Error (v4093 x)
                    let _run_target_args'_v4095 = v4104 
                    #endif
#else
                    let v4105 : Result<unit, std_string_String> = match v4092 with Ok x -> Ok x | Error x -> Error (v4093 x)
                    let _run_target_args'_v4095 = v4105 
                    #endif
                    let v4106 : Result<unit, std_string_String> = _run_target_args'_v4095 
                    v4106
            let v4110 : string = "$0"
            let v4111 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4109 v4110 
            let v4112 : string = "true; $0 }); //"
            let v4113 : bool = Fable.Core.RustInterop.emitRustExpr v4111 v4112 
            let v4114 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v4115 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4114 
            let v4116 : Result<unit, string> = method151(v4115)
            let v4117 : string = v2543 + v2544 
            let x = v4116 //
            let v4118 : _ = x
            let v4119 : unit = ()
            (* run_target_args'
            let v4120 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4121 : string = $"true; let _fix_closure_v4119 = $0"
            let v4122 : bool = Fable.Core.RustInterop.emitRustExpr v4118 v4121 
            let _run_target_args'_v4120 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4123 : string = $"true; let _fix_closure_v4119 = $0"
            let v4124 : bool = Fable.Core.RustInterop.emitRustExpr v4118 v4123 
            let _run_target_args'_v4120 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4125 : string = $"true; let _fix_closure_v4119 = $0"
            let v4126 : bool = Fable.Core.RustInterop.emitRustExpr v4118 v4125 
            let _run_target_args'_v4120 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v4120 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v4120 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v4120 = false 
            #endif
#else
            let _run_target_args'_v4120 = false 
            #endif
            let v4127 : bool = _run_target_args'_v4120 
            let v4128 : string = $"true; _fix_closure_v4119 " + v4117 + "); " + v2543 + " // rust.fix_closure'"
            let v4129 : bool = Fable.Core.RustInterop.emitRustExpr () v4128 
            let v4130 : string = "__spawn"
            let v4131 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4130 
            let v4134 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US31) = method152()
            let v4135 : US31 option = v4 |> Option.map v4134 
            let v4155 : US31 = US31_1
            let v4156 : US31 = v4135 |> Option.defaultValue v4155 
            match v4156 with
            | US31_1 -> (* None *)
                ()
            | US31_0(v4160) -> (* Some *)
                let v4161 : string = "$0"
                let v4162 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1033 v4161 
                let v4163 : string = "v4162.lock()"
                let v4164 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4163 
                (* run_target_args'
                let v4166 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4167 : string = "$0.unwrap()"
                let v4168 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4164 v4167 
                let _run_target_args'_v4166 = v4168 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4169 : string = "$0.unwrap()"
                let v4170 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4164 v4169 
                let _run_target_args'_v4166 = v4170 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4171 : string = "$0.unwrap()"
                let v4172 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4164 v4171 
                let _run_target_args'_v4166 = v4172 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4173 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4164 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4166 = v4173 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4174 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4164 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4166 = v4174 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4175 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4164 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4166 = v4175 
                #endif
#else
                let v4176 : std_sync_MutexGuard<std_process_ChildStdin option> = match v4164 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4166 = v4176 
                #endif
                let v4177 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v4166 
                let v4180 : std_sync_MutexGuard<std_process_ChildStdin option> = method153(v4177)
                let v4181 : string = "true; let mut v4180 = v4180"
                let v4182 : bool = Fable.Core.RustInterop.emitRustExpr () v4181 
                let v4183 : string = "&mut $0"
                let v4184 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4180 v4183 
                let v4185 : string = "Option::take($0)"
                let v4186 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4184 v4185 
                let v4187 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v4188 : bool = Fable.Core.RustInterop.emitRustExpr v4186 v4187 
                let v4189 : string = "x"
                let v4190 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4189 
                let v4191 : string = "std::sync::Mutex::new(v4190)"
                let v4192 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v4191 
                let v4193 : string = "std::sync::Arc::new(v4192)"
                let v4194 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v4193 
                let v4195 : string = "true; $0 })"
                let v4196 : bool = Fable.Core.RustInterop.emitRustExpr v4194 v4195 
                let v4197 : string = "_optionm_map_"
                let v4198 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4197 
                let v4201 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US32) = method154()
                let v4202 : US32 option = v4198 |> Option.map v4201 
                let v4222 : US32 = US32_1
                let v4223 : US32 = v4202 |> Option.defaultValue v4222 
                match v4223 with
                | US32_1 -> (* None *)
                    ()
                | US32_0(v4227) -> (* Some *)
                    v4160 v4227
                    let v4228 : string = "$0"
                    let v4229 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4227 v4228 
                    let v4230 : string = "v4229.lock()"
                    let v4231 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4230 
                    (* run_target_args'
                    let v4233 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4234 : string = "$0.unwrap()"
                    let v4235 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4231 v4234 
                    let _run_target_args'_v4233 = v4235 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4236 : string = "$0.unwrap()"
                    let v4237 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4231 v4236 
                    let _run_target_args'_v4233 = v4237 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4238 : string = "$0.unwrap()"
                    let v4239 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4231 v4238 
                    let _run_target_args'_v4233 = v4239 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4240 : std_sync_MutexGuard<std_process_ChildStdin> = match v4231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4233 = v4240 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4241 : std_sync_MutexGuard<std_process_ChildStdin> = match v4231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4233 = v4241 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4242 : std_sync_MutexGuard<std_process_ChildStdin> = match v4231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4233 = v4242 
                    #endif
#else
                    let v4243 : std_sync_MutexGuard<std_process_ChildStdin> = match v4231 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4233 = v4243 
                    #endif
                    let v4244 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v4233 
                    let v4247 : std_sync_MutexGuard<std_process_ChildStdin> = method155(v4244)
                    let v4248 : string = "true; let mut v4247 = v4247"
                    let v4249 : bool = Fable.Core.RustInterop.emitRustExpr () v4248 
                    let v4250 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4251 : bool = Fable.Core.RustInterop.emitRustExpr v4247 v4250 
                    ()
            let v4252 : string = "$0"
            let v4253 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v903 v4252 
            let v4254 : string = "v4253.lock()"
            let v4255 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4254 
            (* run_target_args'
            let v4257 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4258 : string = "$0.unwrap()"
            let v4259 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4255 v4258 
            let _run_target_args'_v4257 = v4259 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4260 : string = "$0.unwrap()"
            let v4261 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4255 v4260 
            let _run_target_args'_v4257 = v4261 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4262 : string = "$0.unwrap()"
            let v4263 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4255 v4262 
            let _run_target_args'_v4257 = v4263 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4264 : std_sync_MutexGuard<std_process_Child option> = match v4255 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4257 = v4264 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4265 : std_sync_MutexGuard<std_process_Child option> = match v4255 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4257 = v4265 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4266 : std_sync_MutexGuard<std_process_Child option> = match v4255 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4257 = v4266 
            #endif
#else
            let v4267 : std_sync_MutexGuard<std_process_Child option> = match v4255 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4257 = v4267 
            #endif
            let v4268 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v4257 
            let v4271 : std_sync_MutexGuard<std_process_Child option> = method139(v4268)
            let v4272 : string = "true; let mut v4271 = v4271"
            let v4273 : bool = Fable.Core.RustInterop.emitRustExpr () v4272 
            let v4274 : string = "&mut $0"
            let v4275 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4271 v4274 
            let v4276 : string = "Option::take($0)"
            let v4277 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4275 v4276 
            let v4278 : string = "$0.unwrap()"
            let v4279 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4277 v4278 
            let v4280 : string = "$0.wait_with_output()"
            let v4281 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4279 v4280 
            let v4282 : (std_io_Error -> std_string_String) = method77()
            (* run_target_args'
            let v4284 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4285 : string = "$0.map_err(|x| $1(x))"
            let v4286 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4281, v4282) v4285 
            let _run_target_args'_v4284 = v4286 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4287 : string = "$0.map_err(|x| $1(x))"
            let v4288 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4281, v4282) v4287 
            let _run_target_args'_v4284 = v4288 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4289 : string = "$0.map_err(|x| $1(x))"
            let v4290 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4281, v4282) v4289 
            let _run_target_args'_v4284 = v4290 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4291 : Result<std_process_Output, std_string_String> = match v4281 with Ok x -> Ok x | Error x -> Error (v4282 x)
            let _run_target_args'_v4284 = v4291 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4292 : Result<std_process_Output, std_string_String> = match v4281 with Ok x -> Ok x | Error x -> Error (v4282 x)
            let _run_target_args'_v4284 = v4292 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4293 : Result<std_process_Output, std_string_String> = match v4281 with Ok x -> Ok x | Error x -> Error (v4282 x)
            let _run_target_args'_v4284 = v4293 
            #endif
#else
            let v4294 : Result<std_process_Output, std_string_String> = match v4281 with Ok x -> Ok x | Error x -> Error (v4282 x)
            let _run_target_args'_v4284 = v4294 
            #endif
            let v4295 : Result<std_process_Output, std_string_String> = _run_target_args'_v4284 
            let v4298 : string = "v4131"
            let v4299 : string = v4298 + v2543 
            let v4300 : string = v4299 + v2543 
            let v4301 : string = "v2559"
            let v4302 : string = ", "
            let v4303 : string = v4301 + v4302 
            let v4304 : string = v4303 + v4300 
            let v4305 : string = "vec![" + v4304 + "]"
            let v4306 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4305 
            let v4307 : string = "true; $0.into_iter().for_each(|x| { //"
            let v4308 : bool = Fable.Core.RustInterop.emitRustExpr v4306 v4307 
            let v4309 : string = "x"
            let v4310 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4309 
            let v4311 : string = "std::thread::JoinHandle::join($0)"
            let v4312 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4310 v4311 
            (* run_target_args'
            let v4314 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4315 : string = "$0.unwrap()"
            let v4316 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4312 v4315 
            let _run_target_args'_v4314 = v4316 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4317 : string = "$0.unwrap()"
            let v4318 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4312 v4317 
            let _run_target_args'_v4314 = v4318 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4319 : string = "$0.unwrap()"
            let v4320 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4312 v4319 
            let _run_target_args'_v4314 = v4320 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4321 : Result<unit, string> = match v4312 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4314 = v4321 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4322 : Result<unit, string> = match v4312 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4314 = v4322 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4323 : Result<unit, string> = match v4312 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4314 = v4323 
            #endif
#else
            let v4324 : Result<unit, string> = match v4312 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v4314 = v4324 
            #endif
            let v4325 : Result<unit, string> = _run_target_args'_v4314 
            (* run_target_args'
            let v4328 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4329 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4325 v4329 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4330 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4325 v4330 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4331 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4325 v4331 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v4325 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v4325 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v4325 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v4325 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v4332 : string = $"true"
            let v4333 : bool = Fable.Core.RustInterop.emitRustExpr () v4332 
            let v4334 : string = "true; }}); { //"
            let v4335 : bool = Fable.Core.RustInterop.emitRustExpr () v4334 
            let v4336 : (std_process_Output -> US33) = method156()
            let v4337 : (std_string_String -> US33) = method157()
            let v4339 : US33 = match v4295 with Ok x -> v4336 x | Error x -> v4337 x
            match v4339 with
            | US33_1(v4459) -> (* Error *)
                let v4773 : unit = ()
                let v4774 : (unit -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v7, v30, v127, v4459)
                let v4775 : unit = (fun () -> v4774 (); v4773) ()
                let v5092 : US8 = US8_0(v4459)
                let v5093 : US29 = US29_1
                struct (-2, v5092, v5093)
            | US33_0(v4342) -> (* Ok *)
                let v4343 : string = "$0.status"
                let v4344 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4342 v4343 
                let v4345 : string = "$0.code()"
                let v4346 : int32 option = Fable.Core.RustInterop.emitRustExpr v4344 v4345 
                let v4349 : (int32 -> US34) = method159()
                let v4350 : US34 option = v4346 |> Option.map v4349 
                let v4370 : US34 = US34_1
                let v4371 : US34 = v4350 |> Option.defaultValue v4370 
                match v4371 with
                | US34_1 -> (* None *)
                    let v4378 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v4383 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4384 : string = "&*$0"
                    let v4385 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4378 v4384 
                    let _run_target_args'_v4383 = v4385 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4386 : string = "&*$0"
                    let v4387 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4378 v4386 
                    let _run_target_args'_v4383 = v4387 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4388 : string = "&*$0"
                    let v4389 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4378 v4388 
                    let _run_target_args'_v4383 = v4389 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4391 : Ref<Str> = v4378 |> unbox<Ref<Str>>
                    let _run_target_args'_v4383 = v4391 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4395 : Ref<Str> = v4378 |> unbox<Ref<Str>>
                    let _run_target_args'_v4383 = v4395 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4399 : Ref<Str> = v4378 |> unbox<Ref<Str>>
                    let _run_target_args'_v4383 = v4399 
                    #endif
#else
                    let v4403 : Ref<Str> = v4378 |> unbox<Ref<Str>>
                    let _run_target_args'_v4383 = v4403 
                    #endif
                    let v4406 : Ref<Str> = _run_target_args'_v4383 
                    (* run_target_args'
                    let v4419 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4420 : string = "String::from($0)"
                    let v4421 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4406 v4420 
                    let _run_target_args'_v4419 = v4421 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4422 : string = "String::from($0)"
                    let v4423 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4406 v4422 
                    let _run_target_args'_v4419 = v4423 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4424 : string = "String::from($0)"
                    let v4425 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4406 v4424 
                    let _run_target_args'_v4419 = v4425 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4427 : std_string_String = v4406 |> unbox<std_string_String>
                    let _run_target_args'_v4419 = v4427 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4431 : std_string_String = v4406 |> unbox<std_string_String>
                    let _run_target_args'_v4419 = v4431 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4435 : std_string_String = v4406 |> unbox<std_string_String>
                    let _run_target_args'_v4419 = v4435 
                    #endif
#else
                    let v4439 : std_string_String = v4406 |> unbox<std_string_String>
                    let _run_target_args'_v4419 = v4439 
                    #endif
                    let v4442 : std_string_String = _run_target_args'_v4419 
                    let v4451 : US8 = US8_0(v4442)
                    let v4452 : US29 = US29_0(v1054)
                    struct (-1, v4451, v4452)
                | US34_0(v4375) -> (* Some *)
                    let v4376 : US8 = US8_1
                    let v4377 : US29 = US29_0(v1054)
                    struct (v4375, v4376, v4377)
    let v5755 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v5744 with
        | US29_1 -> (* None *)
            let v5751 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v5751
        | US29_0(v5745) -> (* Some *)
            let v5747 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v5745 
            v5747
    let v5756 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v5757 : bool = Fable.Core.RustInterop.emitRustExpr v5755 v5756 
    let v5758 : string = "x"
    let v5759 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v5758 
    let v5760 : string = "$0"
    let v5761 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v5759 v5760 
    let v5762 : string = "v5761.lock()"
    let v5763 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v5762 
    (* run_target_args'
    let v5765 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5766 : string = "$0.unwrap()"
    let v5767 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5763 v5766 
    let _run_target_args'_v5765 = v5767 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5768 : string = "$0.unwrap()"
    let v5769 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5763 v5768 
    let _run_target_args'_v5765 = v5769 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5770 : string = "$0.unwrap()"
    let v5771 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5763 v5770 
    let _run_target_args'_v5765 = v5771 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5772 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5765 = v5772 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5773 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5765 = v5773 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5774 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5765 = v5774 
    #endif
#else
    let v5775 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v5763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v5765 = v5775 
    #endif
    let v5776 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v5765 
    let v5779 : string = "$0.iter()"
    let v5780 : _ = Fable.Core.RustInterop.emitRustExpr v5776 v5779 
    let v5781 : string = "$0.collect::<Vec<_>>()"
    let v5782 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5780 v5781 
    let v5783 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v5784 : bool = Fable.Core.RustInterop.emitRustExpr v5782 v5783 
    let v5785 : string = "x"
    let v5786 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5785 
    let v5787 : string = "fable_library_rust::String_::fromString($0)"
    let v5788 : string = Fable.Core.RustInterop.emitRustExpr v5786 v5787 
    let v5789 : string = "true; $0 }).collect::<Vec<_>>()"
    let v5790 : bool = Fable.Core.RustInterop.emitRustExpr v5788 v5789 
    let v5791 : string = "_vec_map"
    let v5792 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5791 
    let v5793 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v5794 : (string []) = Fable.Core.RustInterop.emitRustExpr v5792 v5793 
    let v5796 : string seq = v5794 |> Seq.ofArray
    let v5801 : string = method73()
    let v5802 : (string -> (string seq -> string)) = String.concat
    let v5803 : (string seq -> string) = v5802 v5801
    let v5804 : string = v5803 v5796
    let v5808 : string = "true; $0 })"
    let v5809 : bool = Fable.Core.RustInterop.emitRustExpr v5804 v5808 
    let v5810 : string = "_optionm_map_"
    let v5811 : string option = Fable.Core.RustInterop.emitRustExpr () v5810 
    let v5818 : US5 =
        match v5743 with
        | US8_1 -> (* None *)
            US5_1
        | US8_0(v5812) -> (* Some *)
            let v5813 : string = "fable_library_rust::String_::fromString($0)"
            let v5814 : string = Fable.Core.RustInterop.emitRustExpr v5812 v5813 
            US5_0(v5814)
    let v5822 : string =
        match v5818 with
        | US5_1 -> (* None *)
            let v5820 : string = ""
            v5820
        | US5_0(v5819) -> (* Some *)
            v5819
    let v5824 : string = v5811 |> Option.defaultValue v5822 
    let v6139 : unit = ()
    let v6140 : (unit -> unit) = closure59(v5742, v5824)
    let v6141 : unit = (fun () -> v6140 (); v6139) ()
    let v6458 : (int32 * string) = v5742, v5824 
    v6458 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v765 <- Some x
    let v6461 : (int32 * string) = match _capture_v765 with Some x -> x | None -> failwith "base.capture / _capture_v765=None"
    let (a, b) = v6461 
    let v12156 : int32 = a
    let v12157 : string = b
    let _run_target_args'_v16 = struct (v12156, v12157) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v12164 : int32, v12165 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v16 = struct (v12164, v12165) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v12172 : int32, v12173 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v16 = struct (v12172, v12173) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v12180 : int32, v12181 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v16 = struct (v12180, v12181) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v12188 : int32, v12189 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v16 = struct (v12188, v12189) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v12196 : int32, v12197 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v16 = struct (v12196, v12197) 
    #endif
#else
    let v12202 : Async<struct (int32 * string)> = method162(v0, v1, v2, v3, v4, v5, v6, v7)
    (* run_target_args'
    let v12211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v12214 : int32, v12215 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12211 = struct (v12214, v12215) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v12222 : int32, v12223 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12211 = struct (v12222, v12223) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v12230 : int32, v12231 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12211 = struct (v12230, v12231) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v12238 : int32, v12239 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v12211 = struct (v12238, v12239) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12244 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12245 : int32, v12246 : string) = v12244 v12202
    let _run_target_args'_v12211 = struct (v12245, v12246) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12247 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12248 : int32, v12249 : string) = v12247 v12202
    let _run_target_args'_v12211 = struct (v12248, v12249) 
    #endif
#else
    let v12250 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v12251 : int32, v12252 : string) = v12250 v12202
    let _run_target_args'_v12211 = struct (v12251, v12252) 
    #endif
    let struct (v12253 : int32, v12254 : string) = _run_target_args'_v12211 
    let _run_target_args'_v16 = struct (v12253, v12254) 
    #endif
    let struct (v12265 : int32, v12266 : string) = _run_target_args'_v16 
    struct (v12265, v12266)
and method182 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "run_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "new_code_path"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method181 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method182(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / check error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method181(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method184 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "exit_code"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v67 : string = $"{v0}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "run_result"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "new_code_path"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v209 : string = $"{v2}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v5, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v226 : string = $"{v85}"
    let v234 : unit = ()
    let v235 : (unit -> unit) = closure7(v5, v226)
    let v236 : unit = (fun () -> v235 (); v234) ()
    let v244 : string = "external_command"
    let v245 : string = $"{v244}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v5, v245)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v262 : string = $"{v46}"
    let v270 : unit = ()
    let v271 : (unit -> unit) = closure7(v5, v262)
    let v272 : unit = (fun () -> v271 (); v270) ()
    let v279 : string = $"{v3}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v5, v279)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v297 : string = " }"
    let v298 : string = $"{v297}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v5, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v314 : string = v5.l0
    v314
and method183 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method184(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure69 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method183(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method185 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method182(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / esbuild error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method185(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method182(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.process_gleam / trunk error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure71 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure2()
    let v19 : unit = (fun () -> v18 (); v17) ()
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : Mut4, v47 : int64 option) = TraceState.trace_state.Value
    let v60 : US0 = v46.l0
    let v61 : bool = v44.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    let v66 : bool = v65 = false
    let v300 : US6 =
        if v66 then
            US6_1
        else
            let v82 : unit = ()
            let v83 : unit = (fun () -> v18 (); v82) ()
            let struct (v106 : Mut0, v107 : Mut1, v108 : Mut2, v109 : Mut3, v110 : Mut4, v111 : int64 option) = TraceState.trace_state.Value
            let v124 : string = method7(v106, v107, v108, v109, v110, v111)
            let v125 : string = method80()
            let v126 : string = method186(v106, v107, v108, v109, v110, v111, v124, v125, v2, v1, v0)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v18 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and closure72 () (v0 : string) : US5 =
    US5_0(v0)
and closure73 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method73()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method188 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result'"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    (* run_target_args'
    let v181 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v182 : string = "format!(\"{:#?}\", $0)"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v182 
    let v184 : string = "fable_library_rust::String_::fromString($0)"
    let v185 : string = Fable.Core.RustInterop.emitRustExpr v183 v184 
    let _run_target_args'_v181 = v185 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v181 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v181 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v195 : string = $"%A{v1}"
    let _run_target_args'_v181 = v195 
    #endif
#if FABLE_COMPILER_PYTHON
    let v199 : string = $"%A{v1}"
    let _run_target_args'_v181 = v199 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v1}"
    let _run_target_args'_v181 = v203 
    #endif
#else
    let v207 : string = $"%A{v1}"
    let _run_target_args'_v181 = v207 
    #endif
    let v210 : string = _run_target_args'_v181 
    let v220 : string = $"{v210}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v5, v220)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v237 : string = $"{v124}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v5, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v255 : string = "new_code_path"
    let v256 : string = $"{v255}"
    let v264 : unit = ()
    let v265 : (unit -> unit) = closure7(v5, v256)
    let v266 : unit = (fun () -> v265 (); v264) ()
    let v273 : string = $"{v46}"
    let v281 : unit = ()
    let v282 : (unit -> unit) = closure7(v5, v273)
    let v283 : unit = (fun () -> v282 (); v281) ()
    let v290 : string = $"{v2}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v5, v290)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v307 : string = $"{v124}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v5, v307)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v325 : string = "external_command"
    let v326 : string = $"{v325}"
    let v334 : unit = ()
    let v335 : (unit -> unit) = closure7(v5, v326)
    let v336 : unit = (fun () -> v335 (); v334) ()
    let v343 : string = $"{v46}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v5, v343)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v360 : string = $"{v3}"
    let v368 : unit = ()
    let v369 : (unit -> unit) = closure7(v5, v360)
    let v370 : unit = (fun () -> v369 (); v368) ()
    let v378 : string = " }"
    let v379 : string = $"{v378}"
    let v387 : unit = ()
    let v388 : (unit -> unit) = closure7(v5, v379)
    let v389 : unit = (fun () -> v388 (); v387) ()
    let v395 : string = v5.l0
    v395
and method187 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method188(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_gleam / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure75 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method187(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v0, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure74 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure75(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method189 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method189(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method190 () : string =
    let v0 : string = "py-path"
    v0
and method191 () : string =
    let v0 : string = "env"
    v0
and method193 (v0 : US39, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "env"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v64 : string = $"%A{v0}"
    let v68 : string = $"{v64}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v5, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "exit_code"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v46}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v143 : string = $"{v1}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v143)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v160 : string = $"{v86}"
    let v168 : unit = ()
    let v169 : (unit -> unit) = closure7(v5, v160)
    let v170 : unit = (fun () -> v169 (); v168) ()
    let v178 : string = "run_result"
    let v179 : string = $"{v178}"
    let v187 : unit = ()
    let v188 : (unit -> unit) = closure7(v5, v179)
    let v189 : unit = (fun () -> v188 (); v187) ()
    let v196 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v5, v196)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v213 : string = $"{v2}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v5, v213)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v230 : string = $"{v86}"
    let v238 : unit = ()
    let v239 : (unit -> unit) = closure7(v5, v230)
    let v240 : unit = (fun () -> v239 (); v238) ()
    let v248 : string = "new_code_path"
    let v249 : string = $"{v248}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v5, v249)
    let v259 : unit = (fun () -> v258 (); v257) ()
    let v266 : string = $"{v46}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v5, v266)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v283 : string = $"{v3}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v5, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v301 : string = " }"
    let v302 : string = $"{v301}"
    let v310 : unit = ()
    let v311 : (unit -> unit) = closure7(v5, v302)
    let v312 : unit = (fun () -> v311 (); v310) ()
    let v318 : string = v5.l0
    v318
and method192 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US39, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method193(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / env install error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure77 (v0 : US39, v1 : string, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method192(v107, v108, v109, v110, v111, v112, v125, v126, v0, v3, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure78 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method73()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method195 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "run_result"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "new_code_path"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "external_command"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method194 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method195(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method194(v107, v108, v109, v110, v111, v112, v125, v126, v3, v1, v0, v2)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method196 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method184(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_cuda / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method196(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method197 () : string =
    let v0 : string = "fs-path"
    v0
and method198 () : string =
    let v0 : string = "command"
    v0
and method199 () : string =
    let v0 : string = "path"
    v0
and method201 (v0 : string) : string =
    let v1 : string = method32()
    let v2 : string = method34(v1, v0)
    method67(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method201(v2)
and method200 () : (std_string_String -> string) =
    closure82()
and method202 () : string =
    let v0 : string = "retries"
    v0
and method203 () : string =
    let v0 : string = "working-directory"
    v0
and method206 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "exit_code"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v66 : string = $"{v0}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v4, v66)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v84 : string = "; "
    let v85 : string = $"{v84}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v4, v85)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v103 : string = "repl_result"
    let v104 : string = $"{v103}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v4, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v121 : string = $"{v45}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v4, v121)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v138 : string = $"{v1}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v4, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v155 : string = $"{v84}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v4, v155)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v173 : string = "retry"
    let v174 : string = $"{v173}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v4, v174)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v191 : string = $"{v45}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v4, v191)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v208 : string = $"{v2}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v4, v208)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v226 : string = " }"
    let v227 : string = $"{v226}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v4, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v243 : string = v4.l0
    v243
and method205 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method206(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v15 : string = " "
    let v16 : string = v6 + v15 
    let v20 : string = v16 + v7 
    let v25 : string = " #"
    let v26 : string = v20 + v25 
    let v30 : (int64 -> string) = _.ToString()
    let v31 : string = v30 v12
    let v35 : string = v26 + v31 
    let v39 : string = v35 + v15 
    let v44 : string = "spiral.run / repl error"
    let v45 : string = v39 + v44 
    let v50 : string = " / "
    let v51 : string = v45 + v50 
    let v55 : string = v51 + v11 
    method17(v55)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method11()
            let v127 : string = $"{v1}/{v0}"
            let v128 : string = method205(v107, v108, v109, v110, v111, v112, v125, v126, v3, v2, v127)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method204 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v8 : (struct (string * string) []) = [||]
    let v10 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v18 : string option = None
    let v21 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v22 : string = "TRACE_LEVEL"
    let v23 : string = "Verbose"
    let v24 : string = "AUTOMATION"
    let v25 : string = "True"
    let v26 : (struct (string * string) []) = [|struct (v22, v23); struct (v24, v25)|]
    let v37 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v33 : string option = None
            v33
        | US5_0(v27) -> (* Some *)
            let v29 : string option = Some v27 
            v29
    let v38 : bool = false
    let v39 : bool = true
    let struct (v40 : int32, v41 : string) = method99(v21, v5, v26, v10, v14, v38, v37, v39)
    let v42 : bool = v40 = 0
    let v44 : bool =
        if v42 then
            true
        else
            let v43 : bool = v3 >= v1
            v43
    if v44 then
        struct (v40, v41)
    else
        let v357 : unit = ()
        let v358 : (unit -> unit) = closure83(v1, v3, v41, v40)
        let v359 : unit = (fun () -> v358 (); v357) ()
        let v675 : uint8 = v3 + 1uy
        method204(v0, v1, v2, v675)
and method208 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "jupyter_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method207 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method208(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib / jupyter nbconvert"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method207(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method210 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "pwsh_replace_html_result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method209 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method210(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib / html cell ids"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method209(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method212 (v0 : int32, v1 : int32) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "result_length"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v3, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v175 : string = v3.l0
    v175
and method211 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method212(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / dib"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v300 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : int32 = v0.Length
            let v126 : string = method211(v105, v106, v107, v108, v109, v110, v123, v124, v1, v125)
            let v141 : unit = ()
            let v142 : unit = (fun () -> v17 (); v141) ()
            let struct (v165 : Mut0, v166 : Mut1, v167 : Mut2, v168 : Mut3, v169 : Mut4, v170 : int64 option) = TraceState.trace_state.Value
            let v185 : unit = ()
            let v186 : (unit -> unit) = closure8(v165)
            let v187 : unit = (fun () -> v186 (); v185) ()
            let v190 : (string -> unit) = closure9()
            (* run_target_args'
            let v191 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v126 v193 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v194 : string = v168.l0
            let v195 : bool = v194 = ""
            let v210 : string =
                if v195 then
                    v126
                else
                    let v196 : bool = v126 = ""
                    if v196 then
                        let v197 : string = v168.l0
                        v197
                    else
                        let v198 : string = v168.l0
                        let v201 : string = "\n"
                        let v202 : string = v198 + v201 
                        let v206 : string = v202 + v126 
                        v206
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v210 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v227 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v227 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v231 
            #endif
#else
            let v235 : Ref<Str> = v210 |> unbox<Ref<Str>>
            let _run_target_args'_v215 = v235 
            #endif
            let v238 : Ref<Str> = _run_target_args'_v215 
            let v247 : string = $"$0.chars()"
            let v248 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v238 v247 
            let v249 : string = "$0"
            let v250 : _ = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.collect::<Vec<_>>()"
            let v252 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v254 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v256 : bool = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "x"
            let v258 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v257 
            let v259 : string = "String::from_iter($0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "true; $0 }).collect::<Vec<_>>()"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "_vec_map"
            let v264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "$0.len()"
            let v266 : unativeint = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v272 : int32 = v266 |> int32 
            let v282 : string = ""
            let v283 : bool = v126 <> v282 
            let v287 : bool =
                if v283 then
                    let v286 : bool = v272 <= 1
                    v286
                else
                    false
            if v287 then
                v168.l0 <- v210
                ()
            else
                v168.l0 <- v282
                let v288 : string = "true; $0.into_iter().for_each(|x| { //"
                let v289 : bool = Fable.Core.RustInterop.emitRustExpr v264 v288 
                let v290 : string = "x"
                let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v290 
                let v292 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v291 v292 
                let v294 : string = $"true"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = "true; }); //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v190 v126
            #endif
#if FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v190 v126
            #endif
#else
            v190 v126
            #endif
            // run_target_args' is_unit
            let v298 : (string -> unit) = v166.l0
            v298 v126
            US6_0(v165, v166, v167, v168, v169, v170)
    
    ()
and method213 () : string =
    let v0 : string = "cleanup"
    v0
and method214 () : string =
    let v0 : string = "wasm"
    v0
and method215 () : string =
    let v0 : string = "contract"
    v0
and method216 (v0 : string, v1 : string, v2 : US40) : string =
    let v3 : string = method13()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v4, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v26 : string = "extension"
    let v27 : string = $"{v26}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v27)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v45 : string = " = "
    let v46 : string = $"{v45}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v4, v46)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v63 : string = $"{v0}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v4, v63)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v81 : string = "; "
    let v82 : string = $"{v81}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v4, v82)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v100 : string = "code"
    let v101 : string = $"{v100}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v4, v101)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v118 : string = $"{v45}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v4, v118)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v135 : string = $"{v1}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v4, v135)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v152 : string = $"{v81}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v4, v152)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v170 : string = "runtime"
    let v171 : string = $"{v170}"
    let v179 : unit = ()
    let v180 : (unit -> unit) = closure7(v4, v171)
    let v181 : unit = (fun () -> v180 (); v179) ()
    let v188 : string = $"{v45}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v4, v188)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v205 : string = $"%A{v2}"
    let v209 : string = $"{v205}"
    let v217 : unit = ()
    let v218 : (unit -> unit) = closure7(v4, v209)
    let v219 : unit = (fun () -> v218 (); v217) ()
    let v227 : string = " }"
    let v228 : string = $"{v227}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v4, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v244 : string = v4.l0
    v244
and method217 (v0 : US5, v1 : string, v2 : US43, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method34(v3, v4)
    let v6 : string = method34(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US43_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method34(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US42_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US42_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US42_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method34(v10, v42)
            method34(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method219 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method219(v0, v4, v2)
        let v6 : string = method34(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method220 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method220(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method218 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method76(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method34(v4, v7)
    let v9 : string = method44(v8)
    method74(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method219(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method130(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method220(v3, v35)
    let v37 : string list = []
    let v38 : string list = method130(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method34(v4, v58)
    let v60 : string = method44(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v65 : string = "\n"
    let v66 : string = v61 + v65 
    let v70 : string = v66 + v62 
    let v73 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v75 : string = v70 + v65 
    let v79 : string = v75 + v73 
    let v82 : string = $"    <LangVersion>preview</LangVersion>"
    let v84 : string = v79 + v65 
    let v88 : string = v84 + v82 
    let v91 : string = $"    <RollForward>Major</RollForward>"
    let v93 : string = v88 + v65 
    let v97 : string = v93 + v91 
    let v100 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v102 : string = v97 + v65 
    let v106 : string = v102 + v100 
    let v109 : string = $"    <PublishAot>false</PublishAot>"
    let v111 : string = v106 + v65 
    let v115 : string = v111 + v109 
    let v118 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v120 : string = v115 + v65 
    let v124 : string = v120 + v118 
    let v127 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v129 : string = v124 + v65 
    let v133 : string = v129 + v127 
    let v136 : string = $"    <SelfContained>true</SelfContained>"
    let v138 : string = v133 + v65 
    let v142 : string = v138 + v136 
    let v145 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v147 : string = v142 + v65 
    let v151 : string = v147 + v145 
    let v154 : string = $"    <OutputType>Exe</OutputType>"
    let v156 : string = v151 + v65 
    let v160 : string = v156 + v154 
    let v163 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v165 : string = v160 + v65 
    let v169 : string = v165 + v163 
    let v172 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v174 : string = v169 + v65 
    let v178 : string = v174 + v172 
    let v181 : string = $"</PropertyGroup>"
    let v183 : string = v178 + v65 
    let v187 : string = v183 + v181 
    let v190 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v192 : string = v187 + v65 
    let v196 : string = v192 + v190 
    let v199 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v201 : string = v196 + v65 
    let v205 : string = v201 + v199 
    let v208 : string = $"</PropertyGroup>"
    let v210 : string = v205 + v65 
    let v214 : string = v210 + v208 
    let v217 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v219 : string = v214 + v65 
    let v223 : string = v219 + v217 
    let v226 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v228 : string = v223 + v65 
    let v232 : string = v228 + v226 
    let v235 : string = $"</PropertyGroup>"
    let v237 : string = v232 + v65 
    let v241 : string = v237 + v235 
    let v244 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v246 : string = v241 + v65 
    let v250 : string = v246 + v244 
    let v253 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v255 : string = v250 + v65 
    let v259 : string = v255 + v253 
    let v262 : string = $"</PropertyGroup>"
    let v264 : string = v259 + v65 
    let v268 : string = v264 + v262 
    let v271 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v273 : string = v268 + v65 
    let v277 : string = v273 + v271 
    let v280 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v282 : string = v277 + v65 
    let v286 : string = v282 + v280 
    let v289 : string = $"</PropertyGroup>"
    let v291 : string = v286 + v65 
    let v295 : string = v291 + v289 
    let v298 : string = $"<ItemGroup>"
    let v300 : string = v295 + v65 
    let v304 : string = v300 + v298 
    let v307 : string = $"    {v32}"
    let v309 : string = v304 + v65 
    let v313 : string = v309 + v307 
    let v316 : string = $"    <Compile Include=\"{v9}\" />"
    let v318 : string = v313 + v65 
    let v322 : string = v318 + v316 
    let v325 : string = $"</ItemGroup>"
    let v327 : string = v322 + v65 
    let v331 : string = v327 + v325 
    let v334 : string = $"<ItemGroup>"
    let v336 : string = v331 + v65 
    let v340 : string = v336 + v334 
    let v343 : string = $"    {v55}"
    let v345 : string = v340 + v65 
    let v349 : string = v345 + v343 
    let v352 : string = $"</ItemGroup>"
    let v354 : string = v349 + v65 
    let v358 : string = v354 + v352 
    let v361 : string = $"</Project>"
    let v363 : string = v358 + v65 
    let v367 : string = v363 + v361 
    method74(v60, v367)
    v60
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US44 =
    US44_0(v0)
and method222 () : (chrono_DateTime<chrono_Utc> -> US44) =
    closure87()
and method223 () : string =
    let v0 : string = "hh:mm"
    v0
and method224 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method225 () : string =
    let v0 : string = "hhmm"
    v0
and method221 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v734 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v740 : System.DateTime = System.DateTime.UnixEpoch
    let v744 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v745 : System.DateTime = v744 v740
    let v749 : System.DateTimeKind = System.DateTimeKind.Local
    let v750 : System.DateTime = System.DateTime.SpecifyKind (v1, v749)
    let v754 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v755 : System.DateTime = v754 v750
    (* run_target_args'
    let v764 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v765 : (System.DateTime -> int64) = _.Ticks
    let v766 : int64 = v765 v755
    let _run_target_args'_v764 = v766 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v767 : (System.DateTime -> int64) = _.Ticks
    let v768 : int64 = v767 v755
    let _run_target_args'_v764 = v768 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v770 : int64 = null |> unbox<int64>
    let _run_target_args'_v764 = v770 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v773 : (System.DateTime -> int64) = _.Ticks
    let v774 : int64 = v773 v755
    let _run_target_args'_v764 = v774 
    #endif
#if FABLE_COMPILER_PYTHON
    let v775 : (System.DateTime -> int64) = _.Ticks
    let v776 : int64 = v775 v755
    let _run_target_args'_v764 = v776 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v777 : (System.DateTime -> int64) = _.Ticks
    let v778 : int64 = v777 v755
    let _run_target_args'_v764 = v778 
    #endif
#else
    let v779 : (System.DateTime -> int64) = _.Ticks
    let v780 : int64 = v779 v755
    let _run_target_args'_v764 = v780 
    #endif
    let v781 : int64 = _run_target_args'_v764 
    (* run_target_args'
    let v808 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v809 : (System.DateTime -> int64) = _.Ticks
    let v810 : int64 = v809 v745
    let _run_target_args'_v808 = v810 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v811 : (System.DateTime -> int64) = _.Ticks
    let v812 : int64 = v811 v745
    let _run_target_args'_v808 = v812 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v814 : int64 = null |> unbox<int64>
    let _run_target_args'_v808 = v814 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v817 : (System.DateTime -> int64) = _.Ticks
    let v818 : int64 = v817 v745
    let _run_target_args'_v808 = v818 
    #endif
#if FABLE_COMPILER_PYTHON
    let v819 : (System.DateTime -> int64) = _.Ticks
    let v820 : int64 = v819 v745
    let _run_target_args'_v808 = v820 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v821 : (System.DateTime -> int64) = _.Ticks
    let v822 : int64 = v821 v745
    let _run_target_args'_v808 = v822 
    #endif
#else
    let v823 : (System.DateTime -> int64) = _.Ticks
    let v824 : int64 = v823 v745
    let _run_target_args'_v808 = v824 
    #endif
    let v825 : int64 = _run_target_args'_v808 
    let v847 : int64 = v781 |> int64 
    let v851 : int64 = v825 |> int64 
    let v854 : int64 = v847 - v851
    let v855 : int64 = v854 / 10L
    let v856 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v857 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v855 v856 
    let v860 : (chrono_DateTime<chrono_Utc> -> US44) = method222()
    let v861 : US44 option = v857 |> Option.map v860 
    let v881 : US44 = US44_1
    let v882 : US44 = v861 |> Option.defaultValue v881 
    let v902 : US5 =
        match v882 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v886) -> (* Some *)
            let v887 : string = "$0.naive_utc()"
            let v888 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v886 v887 
            let v889 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v890 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v888 v889 
            let v891 : string = "%Y%m%d-%H%M-%S%f"
            let v892 : string = "r#\"" + v891 + "\"#"
            let v893 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = "$0.format($1).to_string()"
            let v895 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v890, v893) v894 
            let v896 : string = "fable_library_rust::String_::fromString($0)"
            let v897 : string = Fable.Core.RustInterop.emitRustExpr v895 v896 
            let v898 : string = $"{v897.[0..17]}-{v897.[18..21]}-{v897.[22]}"
            US5_0(v898)
    let v906 : string =
        match v902 with
        | US5_1 -> (* None *)
            let v904 : string = ""
            v904
        | US5_0(v903) -> (* Some *)
            v903
    (* run_target_args'
    let v911 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v912 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v913 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v912 
    let _run_target_args'_v911 = v913 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v915 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v911 = v915 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v911 = v919 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v911 = v923 
    #endif
#if FABLE_COMPILER_PYTHON
    let v927 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v911 = v927 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v930 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v911 = v930 
    #endif
#else
    let v931 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v911 = v931 
    #endif
    let v932 : System.TimeZoneInfo = _run_target_args'_v911 
    (* run_target_args'
    let v948 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v955 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v956 : (System.DateTime -> int64) = _.Ticks
    let v957 : int64 = v956 v755
    let _run_target_args'_v955 = v957 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v958 : (System.DateTime -> int64) = _.Ticks
    let v959 : int64 = v958 v755
    let _run_target_args'_v955 = v959 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v961 : int64 = null |> unbox<int64>
    let _run_target_args'_v955 = v961 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v964 : (System.DateTime -> int64) = _.Ticks
    let v965 : int64 = v964 v755
    let _run_target_args'_v955 = v965 
    #endif
#if FABLE_COMPILER_PYTHON
    let v966 : (System.DateTime -> int64) = _.Ticks
    let v967 : int64 = v966 v755
    let _run_target_args'_v955 = v967 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v968 : (System.DateTime -> int64) = _.Ticks
    let v969 : int64 = v968 v755
    let _run_target_args'_v955 = v969 
    #endif
#else
    let v970 : (System.DateTime -> int64) = _.Ticks
    let v971 : int64 = v970 v755
    let _run_target_args'_v955 = v971 
    #endif
    let v972 : int64 = _run_target_args'_v955 
    let v993 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v994 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v755, v972) v993 
    let v996 : System.TimeSpan = v994 |> System.TimeSpan 
    let _run_target_args'_v948 = v996 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1005 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1006 : (System.DateTime -> int64) = _.Ticks
    let v1007 : int64 = v1006 v755
    let _run_target_args'_v1005 = v1007 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1008 : (System.DateTime -> int64) = _.Ticks
    let v1009 : int64 = v1008 v755
    let _run_target_args'_v1005 = v1009 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1011 : int64 = null |> unbox<int64>
    let _run_target_args'_v1005 = v1011 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1014 : (System.DateTime -> int64) = _.Ticks
    let v1015 : int64 = v1014 v755
    let _run_target_args'_v1005 = v1015 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1016 : (System.DateTime -> int64) = _.Ticks
    let v1017 : int64 = v1016 v755
    let _run_target_args'_v1005 = v1017 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1018 : (System.DateTime -> int64) = _.Ticks
    let v1019 : int64 = v1018 v755
    let _run_target_args'_v1005 = v1019 
    #endif
#else
    let v1020 : (System.DateTime -> int64) = _.Ticks
    let v1021 : int64 = v1020 v755
    let _run_target_args'_v1005 = v1021 
    #endif
    let v1022 : int64 = _run_target_args'_v1005 
    let v1043 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1044 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v755, v1022) v1043 
    let v1046 : System.TimeSpan = v1044 |> System.TimeSpan 
    let _run_target_args'_v948 = v1046 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1050 : US3 = US3_2
    let v1051 : US4 = US4_4(v1050)
    let v1052 : string = $"date_time.get_utc_offset / target: {v1051}"
    let v1053 : System.TimeSpan = failwith<System.TimeSpan> v1052
    let _run_target_args'_v948 = v1053 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1057 : US3 = US3_0
    let v1058 : US4 = US4_5(v1057)
    let v1059 : string = $"date_time.get_utc_offset / target: {v1058}"
    let v1060 : System.TimeSpan = failwith<System.TimeSpan> v1059
    let _run_target_args'_v948 = v1060 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1064 : US3 = US3_0
    let v1065 : US4 = US4_6(v1064)
    let v1066 : string = $"date_time.get_utc_offset / target: {v1065}"
    let v1067 : System.TimeSpan = failwith<System.TimeSpan> v1066
    let _run_target_args'_v948 = v1067 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1070 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1075 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1076 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1077 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1076 
    let _run_target_args'_v1075 = v1077 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1079 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1075 = v1079 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1083 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1075 = v1083 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1087 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1075 = v1087 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1091 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1075 = v1091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1094 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1075 = v1094 
    #endif
#else
    let v1095 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1075 = v1095 
    #endif
    let v1096 : System.TimeZoneInfo = _run_target_args'_v1075 
    let v1105 : (System.DateTime -> System.TimeSpan) = v1070 v1096
    let v1106 : System.TimeSpan = v1105 v755
    let _run_target_args'_v948 = v1106 
    #endif
#else
    let v1107 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1112 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1113 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1114 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1113 
    let _run_target_args'_v1112 = v1114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1116 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1112 = v1116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1120 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1112 = v1120 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1124 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1112 = v1124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1128 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1112 = v1128 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1131 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1112 = v1131 
    #endif
#else
    let v1132 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1112 = v1132 
    #endif
    let v1133 : System.TimeZoneInfo = _run_target_args'_v1112 
    let v1142 : (System.DateTime -> System.TimeSpan) = v1107 v1133
    let v1143 : System.TimeSpan = v1142 v755
    let _run_target_args'_v948 = v1143 
    #endif
    let v1144 : System.TimeSpan = _run_target_args'_v948 
    let v1160 : (System.TimeSpan -> int32) = _.Hours
    let v1161 : int32 = v1160 v1144
    let v1164 : bool = v1161 > 0
    let v1165 : uint8 =
        if v1164 then
            1uy
        else
            0uy
    let v1166 : string = method223()
    (* run_target_args'
    let v1237 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1238 : string = "$0.toString($1)"
    let v1239 : string = Fable.Core.RustInterop.emitRustExpr struct (v1144, v1166) v1238 
    let _run_target_args'_v1237 = v1239 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1240 : string = "$0.toString($1)"
    let v1241 : string = Fable.Core.RustInterop.emitRustExpr struct (v1144, v1166) v1240 
    let _run_target_args'_v1237 = v1241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1242 : string = "$0.toString($1)"
    let v1243 : string = Fable.Core.RustInterop.emitRustExpr struct (v1144, v1166) v1242 
    let _run_target_args'_v1237 = v1243 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1244 : string = v1144.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1237 = v1244 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1245 : string = v1144.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1237 = v1245 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1247 : string = v1144.ToString v1166 
    let _run_target_args'_v1237 = v1247 
    #endif
#else
    let v1317 : string = v1144.ToString v1166 
    let _run_target_args'_v1237 = v1317 
    #endif
    let v1386 : string = _run_target_args'_v1237 
    let v1527 : string = $"{v1165}{v1386.[0..1]}{v1386.[3..4]}"
    let v1529 : (System.Guid -> string) = _.ToString()
    let v1530 : string = v1529 v0
    let v1533 : int32 = v906.Length
    let v1534 : int32 = v1527.Length
    let v1535 : int32 = v1533 + v1534
    let v1537 : (string -> int32) = String.length
    let v1538 : int32 = v1537 v1530
    let v1542 : int32 = 1
    let v1548 : int32 = v1535 |> int32 
    let v1561 : int32 = v1538 |> int32 
    let v1569 : int32 = v1561 - v1542
    let v1571 : string = v1530.[int v1548..int v1569]
    let v1575 : string = $"{v906}{v1527}{v1571}"
    (* run_target_args'
    let v1580 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1582 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1582 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1586 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1586 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1590 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1580 = v1590 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1594 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1594 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1598 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1598 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1602 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1602 
    #endif
#else
    let v1606 : System.Guid = v1575 |> System.Guid 
    let _run_target_args'_v1580 = v1606 
    #endif
    let v1609 : System.Guid = _run_target_args'_v1580 
    let _run_target_args'_v734 = v1609 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1623 : System.DateTime = System.DateTime.UnixEpoch
    let v1627 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1628 : System.DateTime = v1627 v1623
    let v1632 : System.DateTimeKind = System.DateTimeKind.Local
    let v1633 : System.DateTime = System.DateTime.SpecifyKind (v1, v1632)
    let v1637 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1638 : System.DateTime = v1637 v1633
    (* run_target_args'
    let v1647 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1648 : (System.DateTime -> int64) = _.Ticks
    let v1649 : int64 = v1648 v1638
    let _run_target_args'_v1647 = v1649 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1650 : (System.DateTime -> int64) = _.Ticks
    let v1651 : int64 = v1650 v1638
    let _run_target_args'_v1647 = v1651 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1653 : int64 = null |> unbox<int64>
    let _run_target_args'_v1647 = v1653 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1656 : (System.DateTime -> int64) = _.Ticks
    let v1657 : int64 = v1656 v1638
    let _run_target_args'_v1647 = v1657 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1658 : (System.DateTime -> int64) = _.Ticks
    let v1659 : int64 = v1658 v1638
    let _run_target_args'_v1647 = v1659 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1660 : (System.DateTime -> int64) = _.Ticks
    let v1661 : int64 = v1660 v1638
    let _run_target_args'_v1647 = v1661 
    #endif
#else
    let v1662 : (System.DateTime -> int64) = _.Ticks
    let v1663 : int64 = v1662 v1638
    let _run_target_args'_v1647 = v1663 
    #endif
    let v1664 : int64 = _run_target_args'_v1647 
    (* run_target_args'
    let v1691 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1692 : (System.DateTime -> int64) = _.Ticks
    let v1693 : int64 = v1692 v1628
    let _run_target_args'_v1691 = v1693 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1694 : (System.DateTime -> int64) = _.Ticks
    let v1695 : int64 = v1694 v1628
    let _run_target_args'_v1691 = v1695 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1697 : int64 = null |> unbox<int64>
    let _run_target_args'_v1691 = v1697 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1700 : (System.DateTime -> int64) = _.Ticks
    let v1701 : int64 = v1700 v1628
    let _run_target_args'_v1691 = v1701 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1702 : (System.DateTime -> int64) = _.Ticks
    let v1703 : int64 = v1702 v1628
    let _run_target_args'_v1691 = v1703 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1704 : (System.DateTime -> int64) = _.Ticks
    let v1705 : int64 = v1704 v1628
    let _run_target_args'_v1691 = v1705 
    #endif
#else
    let v1706 : (System.DateTime -> int64) = _.Ticks
    let v1707 : int64 = v1706 v1628
    let _run_target_args'_v1691 = v1707 
    #endif
    let v1708 : int64 = _run_target_args'_v1691 
    let v1730 : int64 = v1664 |> int64 
    let v1734 : int64 = v1708 |> int64 
    let v1737 : int64 = v1730 - v1734
    let v1738 : int64 = v1737 / 10L
    let v1739 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1740 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1738 v1739 
    let v1743 : (chrono_DateTime<chrono_Utc> -> US44) = method222()
    let v1744 : US44 option = v1740 |> Option.map v1743 
    let v1764 : US44 = US44_1
    let v1765 : US44 = v1744 |> Option.defaultValue v1764 
    let v1785 : US5 =
        match v1765 with
        | US44_1 -> (* None *)
            US5_1
        | US44_0(v1769) -> (* Some *)
            let v1770 : string = "$0.naive_utc()"
            let v1771 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1769 v1770 
            let v1772 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1773 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1771 v1772 
            let v1774 : string = "%Y%m%d-%H%M-%S%f"
            let v1775 : string = "r#\"" + v1774 + "\"#"
            let v1776 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1775 
            let v1777 : string = "$0.format($1).to_string()"
            let v1778 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1773, v1776) v1777 
            let v1779 : string = "fable_library_rust::String_::fromString($0)"
            let v1780 : string = Fable.Core.RustInterop.emitRustExpr v1778 v1779 
            let v1781 : string = $"{v1780.[0..17]}-{v1780.[18..21]}-{v1780.[22]}"
            US5_0(v1781)
    let v1789 : string =
        match v1785 with
        | US5_1 -> (* None *)
            let v1787 : string = ""
            v1787
        | US5_0(v1786) -> (* Some *)
            v1786
    (* run_target_args'
    let v1794 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1795 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1796 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1795 
    let _run_target_args'_v1794 = v1796 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1798 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1794 = v1798 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1802 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1794 = v1802 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1806 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1794 = v1806 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1810 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1794 = v1810 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1813 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1794 = v1813 
    #endif
#else
    let v1814 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1794 = v1814 
    #endif
    let v1815 : System.TimeZoneInfo = _run_target_args'_v1794 
    (* run_target_args'
    let v1831 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1838 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1839 : (System.DateTime -> int64) = _.Ticks
    let v1840 : int64 = v1839 v1638
    let _run_target_args'_v1838 = v1840 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1841 : (System.DateTime -> int64) = _.Ticks
    let v1842 : int64 = v1841 v1638
    let _run_target_args'_v1838 = v1842 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1844 : int64 = null |> unbox<int64>
    let _run_target_args'_v1838 = v1844 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1847 : (System.DateTime -> int64) = _.Ticks
    let v1848 : int64 = v1847 v1638
    let _run_target_args'_v1838 = v1848 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1849 : (System.DateTime -> int64) = _.Ticks
    let v1850 : int64 = v1849 v1638
    let _run_target_args'_v1838 = v1850 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1851 : (System.DateTime -> int64) = _.Ticks
    let v1852 : int64 = v1851 v1638
    let _run_target_args'_v1838 = v1852 
    #endif
#else
    let v1853 : (System.DateTime -> int64) = _.Ticks
    let v1854 : int64 = v1853 v1638
    let _run_target_args'_v1838 = v1854 
    #endif
    let v1855 : int64 = _run_target_args'_v1838 
    let v1876 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1877 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1638, v1855) v1876 
    let v1879 : System.TimeSpan = v1877 |> System.TimeSpan 
    let _run_target_args'_v1831 = v1879 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1888 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1889 : (System.DateTime -> int64) = _.Ticks
    let v1890 : int64 = v1889 v1638
    let _run_target_args'_v1888 = v1890 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1891 : (System.DateTime -> int64) = _.Ticks
    let v1892 : int64 = v1891 v1638
    let _run_target_args'_v1888 = v1892 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1894 : int64 = null |> unbox<int64>
    let _run_target_args'_v1888 = v1894 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1897 : (System.DateTime -> int64) = _.Ticks
    let v1898 : int64 = v1897 v1638
    let _run_target_args'_v1888 = v1898 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1899 : (System.DateTime -> int64) = _.Ticks
    let v1900 : int64 = v1899 v1638
    let _run_target_args'_v1888 = v1900 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1901 : (System.DateTime -> int64) = _.Ticks
    let v1902 : int64 = v1901 v1638
    let _run_target_args'_v1888 = v1902 
    #endif
#else
    let v1903 : (System.DateTime -> int64) = _.Ticks
    let v1904 : int64 = v1903 v1638
    let _run_target_args'_v1888 = v1904 
    #endif
    let v1905 : int64 = _run_target_args'_v1888 
    let v1926 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1927 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1638, v1905) v1926 
    let v1929 : System.TimeSpan = v1927 |> System.TimeSpan 
    let _run_target_args'_v1831 = v1929 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1933 : US3 = US3_2
    let v1934 : US4 = US4_4(v1933)
    let v1935 : string = $"date_time.get_utc_offset / target: {v1934}"
    let v1936 : System.TimeSpan = failwith<System.TimeSpan> v1935
    let _run_target_args'_v1831 = v1936 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1940 : US3 = US3_0
    let v1941 : US4 = US4_5(v1940)
    let v1942 : string = $"date_time.get_utc_offset / target: {v1941}"
    let v1943 : System.TimeSpan = failwith<System.TimeSpan> v1942
    let _run_target_args'_v1831 = v1943 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1947 : US3 = US3_0
    let v1948 : US4 = US4_6(v1947)
    let v1949 : string = $"date_time.get_utc_offset / target: {v1948}"
    let v1950 : System.TimeSpan = failwith<System.TimeSpan> v1949
    let _run_target_args'_v1831 = v1950 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1953 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1958 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1959 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1960 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1959 
    let _run_target_args'_v1958 = v1960 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1962 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1958 = v1962 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1966 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1958 = v1966 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1970 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1958 = v1970 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1974 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1958 = v1974 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1977 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1958 = v1977 
    #endif
#else
    let v1978 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1958 = v1978 
    #endif
    let v1979 : System.TimeZoneInfo = _run_target_args'_v1958 
    let v1988 : (System.DateTime -> System.TimeSpan) = v1953 v1979
    let v1989 : System.TimeSpan = v1988 v1638
    let _run_target_args'_v1831 = v1989 
    #endif
#else
    let v1990 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1995 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1996 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1997 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1996 
    let _run_target_args'_v1995 = v1997 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1999 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v1999 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2003 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2003 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2007 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2007 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2011 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1995 = v2011 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2014 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1995 = v2014 
    #endif
#else
    let v2015 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1995 = v2015 
    #endif
    let v2016 : System.TimeZoneInfo = _run_target_args'_v1995 
    let v2025 : (System.DateTime -> System.TimeSpan) = v1990 v2016
    let v2026 : System.TimeSpan = v2025 v1638
    let _run_target_args'_v1831 = v2026 
    #endif
    let v2027 : System.TimeSpan = _run_target_args'_v1831 
    let v2043 : (System.TimeSpan -> int32) = _.Hours
    let v2044 : int32 = v2043 v2027
    let v2047 : bool = v2044 > 0
    let v2048 : uint8 =
        if v2047 then
            1uy
        else
            0uy
    let v2049 : string = method223()
    (* run_target_args'
    let v2120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2121 : string = "$0.toString($1)"
    let v2122 : string = Fable.Core.RustInterop.emitRustExpr struct (v2027, v2049) v2121 
    let _run_target_args'_v2120 = v2122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2123 : string = "$0.toString($1)"
    let v2124 : string = Fable.Core.RustInterop.emitRustExpr struct (v2027, v2049) v2123 
    let _run_target_args'_v2120 = v2124 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2125 : string = "$0.toString($1)"
    let v2126 : string = Fable.Core.RustInterop.emitRustExpr struct (v2027, v2049) v2125 
    let _run_target_args'_v2120 = v2126 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2127 : string = v2027.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2120 = v2127 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2128 : string = v2027.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2120 = v2128 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2130 : string = v2027.ToString v2049 
    let _run_target_args'_v2120 = v2130 
    #endif
#else
    let v2200 : string = v2027.ToString v2049 
    let _run_target_args'_v2120 = v2200 
    #endif
    let v2269 : string = _run_target_args'_v2120 
    let v2410 : string = $"{v2048}{v2269.[0..1]}{v2269.[3..4]}"
    let v2412 : (System.Guid -> string) = _.ToString()
    let v2413 : string = v2412 v0
    let v2416 : int32 = v1789.Length
    let v2417 : int32 = v2410.Length
    let v2418 : int32 = v2416 + v2417
    let v2420 : (string -> int32) = String.length
    let v2421 : int32 = v2420 v2413
    let v2425 : int32 = 1
    let v2431 : int32 = v2418 |> int32 
    let v2444 : int32 = v2421 |> int32 
    let v2452 : int32 = v2444 - v2425
    let v2454 : string = v2413.[int v2431..int v2452]
    let v2458 : string = $"{v1789}{v2410}{v2454}"
    (* run_target_args'
    let v2463 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2465 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2465 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2469 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2469 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2473 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2463 = v2473 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2477 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2477 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2481 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2481 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2485 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2485 
    #endif
#else
    let v2489 : System.Guid = v2458 |> System.Guid 
    let _run_target_args'_v2463 = v2489 
    #endif
    let v2492 : System.Guid = _run_target_args'_v2463 
    let _run_target_args'_v734 = v2492 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2502 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v734 = v2502 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2505 : string = method224()
    let v2506 : bool = v2505 = ""
    let v2508 : string =
        if v2506 then
            let v2507 : string = "M-d-y hh:mm:ss tt"
            v2507
        else
            v2505
    let v2509 : (string -> string) = v1.ToString
    let v2510 : string = v2509 v2508
    (* run_target_args'
    let v2529 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2530 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2531 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2530 
    let _run_target_args'_v2529 = v2531 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2533 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2529 = v2533 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2537 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2529 = v2537 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2541 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2529 = v2541 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2545 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2529 = v2545 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2548 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2529 = v2548 
    #endif
#else
    let v2549 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2529 = v2549 
    #endif
    let v2550 : System.TimeZoneInfo = _run_target_args'_v2529 
    (* run_target_args'
    let v2566 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2573 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2574 : (System.DateTime -> int64) = _.Ticks
    let v2575 : int64 = v2574 v1
    let _run_target_args'_v2573 = v2575 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2576 : (System.DateTime -> int64) = _.Ticks
    let v2577 : int64 = v2576 v1
    let _run_target_args'_v2573 = v2577 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2579 : int64 = null |> unbox<int64>
    let _run_target_args'_v2573 = v2579 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2582 : (System.DateTime -> int64) = _.Ticks
    let v2583 : int64 = v2582 v1
    let _run_target_args'_v2573 = v2583 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2584 : (System.DateTime -> int64) = _.Ticks
    let v2585 : int64 = v2584 v1
    let _run_target_args'_v2573 = v2585 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2586 : (System.DateTime -> int64) = _.Ticks
    let v2587 : int64 = v2586 v1
    let _run_target_args'_v2573 = v2587 
    #endif
#else
    let v2588 : (System.DateTime -> int64) = _.Ticks
    let v2589 : int64 = v2588 v1
    let _run_target_args'_v2573 = v2589 
    #endif
    let v2590 : int64 = _run_target_args'_v2573 
    let v2611 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2612 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2590) v2611 
    let v2614 : System.TimeSpan = v2612 |> System.TimeSpan 
    let _run_target_args'_v2566 = v2614 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2623 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2624 : (System.DateTime -> int64) = _.Ticks
    let v2625 : int64 = v2624 v1
    let _run_target_args'_v2623 = v2625 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2626 : (System.DateTime -> int64) = _.Ticks
    let v2627 : int64 = v2626 v1
    let _run_target_args'_v2623 = v2627 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2629 : int64 = null |> unbox<int64>
    let _run_target_args'_v2623 = v2629 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2632 : (System.DateTime -> int64) = _.Ticks
    let v2633 : int64 = v2632 v1
    let _run_target_args'_v2623 = v2633 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2634 : (System.DateTime -> int64) = _.Ticks
    let v2635 : int64 = v2634 v1
    let _run_target_args'_v2623 = v2635 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2636 : (System.DateTime -> int64) = _.Ticks
    let v2637 : int64 = v2636 v1
    let _run_target_args'_v2623 = v2637 
    #endif
#else
    let v2638 : (System.DateTime -> int64) = _.Ticks
    let v2639 : int64 = v2638 v1
    let _run_target_args'_v2623 = v2639 
    #endif
    let v2640 : int64 = _run_target_args'_v2623 
    let v2661 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2662 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2640) v2661 
    let v2664 : System.TimeSpan = v2662 |> System.TimeSpan 
    let _run_target_args'_v2566 = v2664 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2668 : US3 = US3_2
    let v2669 : US4 = US4_4(v2668)
    let v2670 : string = $"date_time.get_utc_offset / target: {v2669}"
    let v2671 : System.TimeSpan = failwith<System.TimeSpan> v2670
    let _run_target_args'_v2566 = v2671 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2675 : US3 = US3_0
    let v2676 : US4 = US4_5(v2675)
    let v2677 : string = $"date_time.get_utc_offset / target: {v2676}"
    let v2678 : System.TimeSpan = failwith<System.TimeSpan> v2677
    let _run_target_args'_v2566 = v2678 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2682 : US3 = US3_0
    let v2683 : US4 = US4_6(v2682)
    let v2684 : string = $"date_time.get_utc_offset / target: {v2683}"
    let v2685 : System.TimeSpan = failwith<System.TimeSpan> v2684
    let _run_target_args'_v2566 = v2685 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2688 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2693 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2694 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2695 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2694 
    let _run_target_args'_v2693 = v2695 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2697 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2693 = v2697 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2701 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2693 = v2701 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2705 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2693 = v2705 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2709 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2693 = v2709 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2712 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2693 = v2712 
    #endif
#else
    let v2713 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2693 = v2713 
    #endif
    let v2714 : System.TimeZoneInfo = _run_target_args'_v2693 
    let v2723 : (System.DateTime -> System.TimeSpan) = v2688 v2714
    let v2724 : System.TimeSpan = v2723 v1
    let _run_target_args'_v2566 = v2724 
    #endif
#else
    let v2725 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2730 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2731 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2732 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2731 
    let _run_target_args'_v2730 = v2732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2734 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2730 = v2734 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2738 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2730 = v2738 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2742 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2730 = v2742 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2746 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2730 = v2746 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2749 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2730 = v2749 
    #endif
#else
    let v2750 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2730 = v2750 
    #endif
    let v2751 : System.TimeZoneInfo = _run_target_args'_v2730 
    let v2760 : (System.DateTime -> System.TimeSpan) = v2725 v2751
    let v2761 : System.TimeSpan = v2760 v1
    let _run_target_args'_v2566 = v2761 
    #endif
    let v2762 : System.TimeSpan = _run_target_args'_v2566 
    let v2778 : (System.TimeSpan -> int32) = _.Hours
    let v2779 : int32 = v2778 v2762
    let v2782 : bool = v2779 > 0
    let v2783 : uint8 =
        if v2782 then
            1uy
        else
            0uy
    let v2784 : string = method225()
    (* run_target_args'
    let v2855 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2856 : string = "$0.toString($1)"
    let v2857 : string = Fable.Core.RustInterop.emitRustExpr struct (v2762, v2784) v2856 
    let _run_target_args'_v2855 = v2857 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2858 : string = "$0.toString($1)"
    let v2859 : string = Fable.Core.RustInterop.emitRustExpr struct (v2762, v2784) v2858 
    let _run_target_args'_v2855 = v2859 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2860 : string = "$0.toString($1)"
    let v2861 : string = Fable.Core.RustInterop.emitRustExpr struct (v2762, v2784) v2860 
    let _run_target_args'_v2855 = v2861 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2862 : string = v2762.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2855 = v2862 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2863 : string = v2762.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2855 = v2863 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2865 : string = v2762.ToString v2784 
    let _run_target_args'_v2855 = v2865 
    #endif
#else
    let v2935 : string = v2762.ToString v2784 
    let _run_target_args'_v2855 = v2935 
    #endif
    let v3004 : string = _run_target_args'_v2855 
    let v3145 : string = $"{v2783}{v3004}"
    let v3147 : (System.Guid -> string) = _.ToString()
    let v3148 : string = v3147 v0
    let v3151 : int32 = v2510.Length
    let v3152 : int32 = v3145.Length
    let v3153 : int32 = v3151 + v3152
    let v3155 : (string -> int32) = String.length
    let v3156 : int32 = v3155 v3148
    let v3160 : int32 = 1
    let v3166 : int32 = v3153 |> int32 
    let v3179 : int32 = v3156 |> int32 
    let v3187 : int32 = v3179 - v3160
    let v3189 : string = v3148.[int v3166..int v3187]
    let v3193 : string = $"{v2510}{v3145}{v3189}"
    (* run_target_args'
    let v3198 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3200 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3200 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3204 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3204 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3208 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3198 = v3208 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3212 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3212 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3216 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3216 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3220 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3220 
    #endif
#else
    let v3224 : System.Guid = v3193 |> System.Guid 
    let _run_target_args'_v3198 = v3224 
    #endif
    let v3227 : System.Guid = _run_target_args'_v3198 
    let _run_target_args'_v734 = v3227 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3236 : string = method224()
    let v3237 : bool = v3236 = ""
    let v3239 : string =
        if v3237 then
            let v3238 : string = "M-d-y hh:mm:ss tt"
            v3238
        else
            v3236
    let v3240 : (string -> string) = v1.ToString
    let v3241 : string = v3240 v3239
    (* run_target_args'
    let v3260 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3261 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3262 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3261 
    let _run_target_args'_v3260 = v3262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3264 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3260 = v3264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3268 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3260 = v3268 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3272 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3260 = v3272 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3276 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3260 = v3276 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3279 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3260 = v3279 
    #endif
#else
    let v3280 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3260 = v3280 
    #endif
    let v3281 : System.TimeZoneInfo = _run_target_args'_v3260 
    (* run_target_args'
    let v3297 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3304 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3305 : (System.DateTime -> int64) = _.Ticks
    let v3306 : int64 = v3305 v1
    let _run_target_args'_v3304 = v3306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3307 : (System.DateTime -> int64) = _.Ticks
    let v3308 : int64 = v3307 v1
    let _run_target_args'_v3304 = v3308 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3310 : int64 = null |> unbox<int64>
    let _run_target_args'_v3304 = v3310 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3313 : (System.DateTime -> int64) = _.Ticks
    let v3314 : int64 = v3313 v1
    let _run_target_args'_v3304 = v3314 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3315 : (System.DateTime -> int64) = _.Ticks
    let v3316 : int64 = v3315 v1
    let _run_target_args'_v3304 = v3316 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3317 : (System.DateTime -> int64) = _.Ticks
    let v3318 : int64 = v3317 v1
    let _run_target_args'_v3304 = v3318 
    #endif
#else
    let v3319 : (System.DateTime -> int64) = _.Ticks
    let v3320 : int64 = v3319 v1
    let _run_target_args'_v3304 = v3320 
    #endif
    let v3321 : int64 = _run_target_args'_v3304 
    let v3342 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3343 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3321) v3342 
    let v3345 : System.TimeSpan = v3343 |> System.TimeSpan 
    let _run_target_args'_v3297 = v3345 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3354 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3355 : (System.DateTime -> int64) = _.Ticks
    let v3356 : int64 = v3355 v1
    let _run_target_args'_v3354 = v3356 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3357 : (System.DateTime -> int64) = _.Ticks
    let v3358 : int64 = v3357 v1
    let _run_target_args'_v3354 = v3358 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3360 : int64 = null |> unbox<int64>
    let _run_target_args'_v3354 = v3360 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3363 : (System.DateTime -> int64) = _.Ticks
    let v3364 : int64 = v3363 v1
    let _run_target_args'_v3354 = v3364 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3365 : (System.DateTime -> int64) = _.Ticks
    let v3366 : int64 = v3365 v1
    let _run_target_args'_v3354 = v3366 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3367 : (System.DateTime -> int64) = _.Ticks
    let v3368 : int64 = v3367 v1
    let _run_target_args'_v3354 = v3368 
    #endif
#else
    let v3369 : (System.DateTime -> int64) = _.Ticks
    let v3370 : int64 = v3369 v1
    let _run_target_args'_v3354 = v3370 
    #endif
    let v3371 : int64 = _run_target_args'_v3354 
    let v3392 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3393 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3371) v3392 
    let v3395 : System.TimeSpan = v3393 |> System.TimeSpan 
    let _run_target_args'_v3297 = v3395 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3399 : US3 = US3_2
    let v3400 : US4 = US4_4(v3399)
    let v3401 : string = $"date_time.get_utc_offset / target: {v3400}"
    let v3402 : System.TimeSpan = failwith<System.TimeSpan> v3401
    let _run_target_args'_v3297 = v3402 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3406 : US3 = US3_0
    let v3407 : US4 = US4_5(v3406)
    let v3408 : string = $"date_time.get_utc_offset / target: {v3407}"
    let v3409 : System.TimeSpan = failwith<System.TimeSpan> v3408
    let _run_target_args'_v3297 = v3409 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3413 : US3 = US3_0
    let v3414 : US4 = US4_6(v3413)
    let v3415 : string = $"date_time.get_utc_offset / target: {v3414}"
    let v3416 : System.TimeSpan = failwith<System.TimeSpan> v3415
    let _run_target_args'_v3297 = v3416 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3419 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3424 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3425 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3426 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3425 
    let _run_target_args'_v3424 = v3426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3428 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3424 = v3428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3432 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3424 = v3432 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3436 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3424 = v3436 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3440 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3424 = v3440 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3443 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3424 = v3443 
    #endif
#else
    let v3444 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3424 = v3444 
    #endif
    let v3445 : System.TimeZoneInfo = _run_target_args'_v3424 
    let v3454 : (System.DateTime -> System.TimeSpan) = v3419 v3445
    let v3455 : System.TimeSpan = v3454 v1
    let _run_target_args'_v3297 = v3455 
    #endif
#else
    let v3456 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3461 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3462 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3463 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3462 
    let _run_target_args'_v3461 = v3463 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3465 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3461 = v3465 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3469 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3461 = v3469 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3473 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3461 = v3473 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3477 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3461 = v3477 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3480 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3461 = v3480 
    #endif
#else
    let v3481 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3461 = v3481 
    #endif
    let v3482 : System.TimeZoneInfo = _run_target_args'_v3461 
    let v3491 : (System.DateTime -> System.TimeSpan) = v3456 v3482
    let v3492 : System.TimeSpan = v3491 v1
    let _run_target_args'_v3297 = v3492 
    #endif
    let v3493 : System.TimeSpan = _run_target_args'_v3297 
    let v3509 : (System.TimeSpan -> int32) = _.Hours
    let v3510 : int32 = v3509 v3493
    let v3513 : bool = v3510 > 0
    let v3514 : uint8 =
        if v3513 then
            1uy
        else
            0uy
    let v3515 : string = method225()
    (* run_target_args'
    let v3586 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3587 : string = "$0.toString($1)"
    let v3588 : string = Fable.Core.RustInterop.emitRustExpr struct (v3493, v3515) v3587 
    let _run_target_args'_v3586 = v3588 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3589 : string = "$0.toString($1)"
    let v3590 : string = Fable.Core.RustInterop.emitRustExpr struct (v3493, v3515) v3589 
    let _run_target_args'_v3586 = v3590 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3591 : string = "$0.toString($1)"
    let v3592 : string = Fable.Core.RustInterop.emitRustExpr struct (v3493, v3515) v3591 
    let _run_target_args'_v3586 = v3592 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3593 : string = v3493.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3586 = v3593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3594 : string = v3493.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3586 = v3594 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3596 : string = v3493.ToString v3515 
    let _run_target_args'_v3586 = v3596 
    #endif
#else
    let v3666 : string = v3493.ToString v3515 
    let _run_target_args'_v3586 = v3666 
    #endif
    let v3735 : string = _run_target_args'_v3586 
    let v3876 : string = $"{v3514}{v3735}"
    let v3878 : (System.Guid -> string) = _.ToString()
    let v3879 : string = v3878 v0
    let v3882 : int32 = v3241.Length
    let v3883 : int32 = v3876.Length
    let v3884 : int32 = v3882 + v3883
    let v3886 : (string -> int32) = String.length
    let v3887 : int32 = v3886 v3879
    let v3891 : int32 = 1
    let v3897 : int32 = v3884 |> int32 
    let v3910 : int32 = v3887 |> int32 
    let v3918 : int32 = v3910 - v3891
    let v3920 : string = v3879.[int v3897..int v3918]
    let v3924 : string = $"{v3241}{v3876}{v3920}"
    (* run_target_args'
    let v3929 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3931 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3931 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3935 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3935 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3939 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3929 = v3939 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3943 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3943 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3947 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3947 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3951 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3951 
    #endif
#else
    let v3955 : System.Guid = v3924 |> System.Guid 
    let _run_target_args'_v3929 = v3955 
    #endif
    let v3958 : System.Guid = _run_target_args'_v3929 
    let _run_target_args'_v734 = v3958 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3967 : string = method224()
    let v3968 : bool = v3967 = ""
    let v3970 : string =
        if v3968 then
            let v3969 : string = "M-d-y hh:mm:ss tt"
            v3969
        else
            v3967
    let v3971 : (string -> string) = v1.ToString
    let v3972 : string = v3971 v3970
    (* run_target_args'
    let v3991 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3992 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3993 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3992 
    let _run_target_args'_v3991 = v3993 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3995 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3991 = v3995 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3999 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3991 = v3999 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4003 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3991 = v4003 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4007 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3991 = v4007 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4010 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3991 = v4010 
    #endif
#else
    let v4011 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3991 = v4011 
    #endif
    let v4012 : System.TimeZoneInfo = _run_target_args'_v3991 
    (* run_target_args'
    let v4028 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4035 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4036 : (System.DateTime -> int64) = _.Ticks
    let v4037 : int64 = v4036 v1
    let _run_target_args'_v4035 = v4037 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4038 : (System.DateTime -> int64) = _.Ticks
    let v4039 : int64 = v4038 v1
    let _run_target_args'_v4035 = v4039 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4041 : int64 = null |> unbox<int64>
    let _run_target_args'_v4035 = v4041 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4044 : (System.DateTime -> int64) = _.Ticks
    let v4045 : int64 = v4044 v1
    let _run_target_args'_v4035 = v4045 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4046 : (System.DateTime -> int64) = _.Ticks
    let v4047 : int64 = v4046 v1
    let _run_target_args'_v4035 = v4047 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4048 : (System.DateTime -> int64) = _.Ticks
    let v4049 : int64 = v4048 v1
    let _run_target_args'_v4035 = v4049 
    #endif
#else
    let v4050 : (System.DateTime -> int64) = _.Ticks
    let v4051 : int64 = v4050 v1
    let _run_target_args'_v4035 = v4051 
    #endif
    let v4052 : int64 = _run_target_args'_v4035 
    let v4073 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4074 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4052) v4073 
    let v4076 : System.TimeSpan = v4074 |> System.TimeSpan 
    let _run_target_args'_v4028 = v4076 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4085 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4086 : (System.DateTime -> int64) = _.Ticks
    let v4087 : int64 = v4086 v1
    let _run_target_args'_v4085 = v4087 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4088 : (System.DateTime -> int64) = _.Ticks
    let v4089 : int64 = v4088 v1
    let _run_target_args'_v4085 = v4089 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4091 : int64 = null |> unbox<int64>
    let _run_target_args'_v4085 = v4091 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4094 : (System.DateTime -> int64) = _.Ticks
    let v4095 : int64 = v4094 v1
    let _run_target_args'_v4085 = v4095 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4096 : (System.DateTime -> int64) = _.Ticks
    let v4097 : int64 = v4096 v1
    let _run_target_args'_v4085 = v4097 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4098 : (System.DateTime -> int64) = _.Ticks
    let v4099 : int64 = v4098 v1
    let _run_target_args'_v4085 = v4099 
    #endif
#else
    let v4100 : (System.DateTime -> int64) = _.Ticks
    let v4101 : int64 = v4100 v1
    let _run_target_args'_v4085 = v4101 
    #endif
    let v4102 : int64 = _run_target_args'_v4085 
    let v4123 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4124 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4102) v4123 
    let v4126 : System.TimeSpan = v4124 |> System.TimeSpan 
    let _run_target_args'_v4028 = v4126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4130 : US3 = US3_2
    let v4131 : US4 = US4_4(v4130)
    let v4132 : string = $"date_time.get_utc_offset / target: {v4131}"
    let v4133 : System.TimeSpan = failwith<System.TimeSpan> v4132
    let _run_target_args'_v4028 = v4133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4137 : US3 = US3_0
    let v4138 : US4 = US4_5(v4137)
    let v4139 : string = $"date_time.get_utc_offset / target: {v4138}"
    let v4140 : System.TimeSpan = failwith<System.TimeSpan> v4139
    let _run_target_args'_v4028 = v4140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4144 : US3 = US3_0
    let v4145 : US4 = US4_6(v4144)
    let v4146 : string = $"date_time.get_utc_offset / target: {v4145}"
    let v4147 : System.TimeSpan = failwith<System.TimeSpan> v4146
    let _run_target_args'_v4028 = v4147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4150 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4156 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4157 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4156 
    let _run_target_args'_v4155 = v4157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4159 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4155 = v4159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4163 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4155 = v4163 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4167 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4155 = v4167 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4171 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4155 = v4171 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4174 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4155 = v4174 
    #endif
#else
    let v4175 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4155 = v4175 
    #endif
    let v4176 : System.TimeZoneInfo = _run_target_args'_v4155 
    let v4185 : (System.DateTime -> System.TimeSpan) = v4150 v4176
    let v4186 : System.TimeSpan = v4185 v1
    let _run_target_args'_v4028 = v4186 
    #endif
#else
    let v4187 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4192 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4193 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4194 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4193 
    let _run_target_args'_v4192 = v4194 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4196 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4196 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4200 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4200 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4204 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4204 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4208 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4192 = v4208 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4211 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4192 = v4211 
    #endif
#else
    let v4212 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4192 = v4212 
    #endif
    let v4213 : System.TimeZoneInfo = _run_target_args'_v4192 
    let v4222 : (System.DateTime -> System.TimeSpan) = v4187 v4213
    let v4223 : System.TimeSpan = v4222 v1
    let _run_target_args'_v4028 = v4223 
    #endif
    let v4224 : System.TimeSpan = _run_target_args'_v4028 
    let v4240 : (System.TimeSpan -> int32) = _.Hours
    let v4241 : int32 = v4240 v4224
    let v4244 : bool = v4241 > 0
    let v4245 : uint8 =
        if v4244 then
            1uy
        else
            0uy
    let v4246 : string = method225()
    (* run_target_args'
    let v4317 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4318 : string = "$0.toString($1)"
    let v4319 : string = Fable.Core.RustInterop.emitRustExpr struct (v4224, v4246) v4318 
    let _run_target_args'_v4317 = v4319 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4320 : string = "$0.toString($1)"
    let v4321 : string = Fable.Core.RustInterop.emitRustExpr struct (v4224, v4246) v4320 
    let _run_target_args'_v4317 = v4321 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4322 : string = "$0.toString($1)"
    let v4323 : string = Fable.Core.RustInterop.emitRustExpr struct (v4224, v4246) v4322 
    let _run_target_args'_v4317 = v4323 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4324 : string = v4224.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4317 = v4324 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4325 : string = v4224.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v4317 = v4325 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4327 : string = v4224.ToString v4246 
    let _run_target_args'_v4317 = v4327 
    #endif
#else
    let v4397 : string = v4224.ToString v4246 
    let _run_target_args'_v4317 = v4397 
    #endif
    let v4466 : string = _run_target_args'_v4317 
    let v4607 : string = $"{v4245}{v4466}"
    let v4609 : (System.Guid -> string) = _.ToString()
    let v4610 : string = v4609 v0
    let v4613 : int32 = v3972.Length
    let v4614 : int32 = v4607.Length
    let v4615 : int32 = v4613 + v4614
    let v4617 : (string -> int32) = String.length
    let v4618 : int32 = v4617 v4610
    let v4622 : int32 = 1
    let v4628 : int32 = v4615 |> int32 
    let v4641 : int32 = v4618 |> int32 
    let v4649 : int32 = v4641 - v4622
    let v4651 : string = v4610.[int v4628..int v4649]
    let v4655 : string = $"{v3972}{v4607}{v4651}"
    (* run_target_args'
    let v4660 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4662 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4662 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4666 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4666 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4670 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4660 = v4670 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4674 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4674 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4678 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4678 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4682 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4682 
    #endif
#else
    let v4686 : System.Guid = v4655 |> System.Guid 
    let _run_target_args'_v4660 = v4686 
    #endif
    let v4689 : System.Guid = _run_target_args'_v4660 
    let _run_target_args'_v734 = v4689 
    #endif
#else
    let v4698 : string = method224()
    let v4699 : bool = v4698 = ""
    let v4701 : string =
        if v4699 then
            let v4700 : string = "M-d-y hh:mm:ss tt"
            v4700
        else
            v4698
    let v4702 : (string -> string) = v1.ToString
    let v4703 : string = v4702 v4701
    (* run_target_args'
    let v4722 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4723 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4724 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4723 
    let _run_target_args'_v4722 = v4724 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4726 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4722 = v4726 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4730 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4722 = v4730 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4734 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4722 = v4734 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4738 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4722 = v4738 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4741 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4722 = v4741 
    #endif
#else
    let v4742 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4722 = v4742 
    #endif
    let v4743 : System.TimeZoneInfo = _run_target_args'_v4722 
    (* run_target_args'
    let v4759 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v4766 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4767 : (System.DateTime -> int64) = _.Ticks
    let v4768 : int64 = v4767 v1
    let _run_target_args'_v4766 = v4768 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4769 : (System.DateTime -> int64) = _.Ticks
    let v4770 : int64 = v4769 v1
    let _run_target_args'_v4766 = v4770 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4772 : int64 = null |> unbox<int64>
    let _run_target_args'_v4766 = v4772 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4775 : (System.DateTime -> int64) = _.Ticks
    let v4776 : int64 = v4775 v1
    let _run_target_args'_v4766 = v4776 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4777 : (System.DateTime -> int64) = _.Ticks
    let v4778 : int64 = v4777 v1
    let _run_target_args'_v4766 = v4778 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4779 : (System.DateTime -> int64) = _.Ticks
    let v4780 : int64 = v4779 v1
    let _run_target_args'_v4766 = v4780 
    #endif
#else
    let v4781 : (System.DateTime -> int64) = _.Ticks
    let v4782 : int64 = v4781 v1
    let _run_target_args'_v4766 = v4782 
    #endif
    let v4783 : int64 = _run_target_args'_v4766 
    let v4804 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4805 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4783) v4804 
    let v4807 : System.TimeSpan = v4805 |> System.TimeSpan 
    let _run_target_args'_v4759 = v4807 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v4816 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4817 : (System.DateTime -> int64) = _.Ticks
    let v4818 : int64 = v4817 v1
    let _run_target_args'_v4816 = v4818 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4819 : (System.DateTime -> int64) = _.Ticks
    let v4820 : int64 = v4819 v1
    let _run_target_args'_v4816 = v4820 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4822 : int64 = null |> unbox<int64>
    let _run_target_args'_v4816 = v4822 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4825 : (System.DateTime -> int64) = _.Ticks
    let v4826 : int64 = v4825 v1
    let _run_target_args'_v4816 = v4826 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4827 : (System.DateTime -> int64) = _.Ticks
    let v4828 : int64 = v4827 v1
    let _run_target_args'_v4816 = v4828 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4829 : (System.DateTime -> int64) = _.Ticks
    let v4830 : int64 = v4829 v1
    let _run_target_args'_v4816 = v4830 
    #endif
#else
    let v4831 : (System.DateTime -> int64) = _.Ticks
    let v4832 : int64 = v4831 v1
    let _run_target_args'_v4816 = v4832 
    #endif
    let v4833 : int64 = _run_target_args'_v4816 
    let v4854 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v4855 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v4833) v4854 
    let v4857 : System.TimeSpan = v4855 |> System.TimeSpan 
    let _run_target_args'_v4759 = v4857 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4861 : US3 = US3_2
    let v4862 : US4 = US4_4(v4861)
    let v4863 : string = $"date_time.get_utc_offset / target: {v4862}"
    let v4864 : System.TimeSpan = failwith<System.TimeSpan> v4863
    let _run_target_args'_v4759 = v4864 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4868 : US3 = US3_0
    let v4869 : US4 = US4_5(v4868)
    let v4870 : string = $"date_time.get_utc_offset / target: {v4869}"
    let v4871 : System.TimeSpan = failwith<System.TimeSpan> v4870
    let _run_target_args'_v4759 = v4871 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4875 : US3 = US3_0
    let v4876 : US4 = US4_6(v4875)
    let v4877 : string = $"date_time.get_utc_offset / target: {v4876}"
    let v4878 : System.TimeSpan = failwith<System.TimeSpan> v4877
    let _run_target_args'_v4759 = v4878 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4881 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4886 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4887 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4888 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4887 
    let _run_target_args'_v4886 = v4888 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4890 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4886 = v4890 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4894 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4886 = v4894 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4898 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4886 = v4898 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4902 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4886 = v4902 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4905 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4886 = v4905 
    #endif
#else
    let v4906 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4886 = v4906 
    #endif
    let v4907 : System.TimeZoneInfo = _run_target_args'_v4886 
    let v4916 : (System.DateTime -> System.TimeSpan) = v4881 v4907
    let v4917 : System.TimeSpan = v4916 v1
    let _run_target_args'_v4759 = v4917 
    #endif
#else
    let v4918 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v4923 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4924 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v4925 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v4924 
    let _run_target_args'_v4923 = v4925 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4927 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4923 = v4927 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4931 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4923 = v4931 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4935 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4923 = v4935 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4939 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v4923 = v4939 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4942 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4923 = v4942 
    #endif
#else
    let v4943 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v4923 = v4943 
    #endif
    let v4944 : System.TimeZoneInfo = _run_target_args'_v4923 
    let v4953 : (System.DateTime -> System.TimeSpan) = v4918 v4944
    let v4954 : System.TimeSpan = v4953 v1
    let _run_target_args'_v4759 = v4954 
    #endif
    let v4955 : System.TimeSpan = _run_target_args'_v4759 
    let v4971 : (System.TimeSpan -> int32) = _.Hours
    let v4972 : int32 = v4971 v4955
    let v4975 : bool = v4972 > 0
    let v4976 : uint8 =
        if v4975 then
            1uy
        else
            0uy
    let v4977 : string = method225()
    (* run_target_args'
    let v5048 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5049 : string = "$0.toString($1)"
    let v5050 : string = Fable.Core.RustInterop.emitRustExpr struct (v4955, v4977) v5049 
    let _run_target_args'_v5048 = v5050 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5051 : string = "$0.toString($1)"
    let v5052 : string = Fable.Core.RustInterop.emitRustExpr struct (v4955, v4977) v5051 
    let _run_target_args'_v5048 = v5052 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5053 : string = "$0.toString($1)"
    let v5054 : string = Fable.Core.RustInterop.emitRustExpr struct (v4955, v4977) v5053 
    let _run_target_args'_v5048 = v5054 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5055 : string = v4955.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v5048 = v5055 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5056 : string = v4955.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v5048 = v5056 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5058 : string = v4955.ToString v4977 
    let _run_target_args'_v5048 = v5058 
    #endif
#else
    let v5128 : string = v4955.ToString v4977 
    let _run_target_args'_v5048 = v5128 
    #endif
    let v5197 : string = _run_target_args'_v5048 
    let v5338 : string = $"{v4976}{v5197}"
    let v5340 : (System.Guid -> string) = _.ToString()
    let v5341 : string = v5340 v0
    let v5344 : int32 = v4703.Length
    let v5345 : int32 = v5338.Length
    let v5346 : int32 = v5344 + v5345
    let v5348 : (string -> int32) = String.length
    let v5349 : int32 = v5348 v5341
    let v5353 : int32 = 1
    let v5359 : int32 = v5346 |> int32 
    let v5372 : int32 = v5349 |> int32 
    let v5380 : int32 = v5372 - v5353
    let v5382 : string = v5341.[int v5359..int v5380]
    let v5386 : string = $"{v4703}{v5338}{v5382}"
    (* run_target_args'
    let v5391 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5393 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5393 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5397 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5397 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5401 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v5391 = v5401 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5405 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5405 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5409 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5409 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5413 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5413 
    #endif
#else
    let v5417 : System.Guid = v5386 |> System.Guid 
    let _run_target_args'_v5391 = v5417 
    #endif
    let v5420 : System.Guid = _run_target_args'_v5391 
    let _run_target_args'_v734 = v5420 
    #endif
    let v5429 : System.Guid = _run_target_args'_v734 
    v5429
and method226 (v0 : string, v1 : string) : unit =
    let v2 : bool = method37(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method76(v0)
        ()
    let v5 : string option = method39(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method37(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method76(v9)
        ()
    let v15 : bool = method37(v1)
    let v25 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method45(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v25 then
        let v26 : bool = true
        method87(v26, v1)
    let v27 : bool = method37(v1)
    let v28 : bool = v27 = false
    if v28 then
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v31 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v30 
        let v32 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v33 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v32 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v34 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method228 () : string =
    let v0 : string = "("
    v0
and method229 () : string =
    let v0 : string = " "
    v0
and method230 (v0 : US41) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v8)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v24 : string = v2.l0
    v24
and method234 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "is_error"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v65 : string =
        if v0 then
            let v63 : string = "true"
            v63
        else
            let v64 : string = "false"
            v64
    let v67 : string = $"{v65}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v67)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v5, v86)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v104 : string = "retry"
    let v105 : string = $"{v104}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v105)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v122 : string = $"{v46}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v139 : string = $"{v1}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v139)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v156 : string = $"{v85}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v5, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v174 : string = "result"
    let v175 : string = $"{v174}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v5, v175)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v192 : string = $"{v46}"
    let v200 : unit = ()
    let v201 : (unit -> unit) = closure7(v5, v192)
    let v202 : unit = (fun () -> v201 (); v200) ()
    let v212 : string = $"{v2}"
    let v220 : unit = ()
    let v221 : (unit -> unit) = closure7(v5, v212)
    let v222 : unit = (fun () -> v221 (); v220) ()
    let v230 : string = ", "
    let v231 : string = $"{v230}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v3}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v266 : string = " }"
    let v267 : string = $"{v266}"
    let v275 : unit = ()
    let v276 : (unit -> unit) = closure7(v5, v267)
    let v277 : unit = (fun () -> v276 (); v275) ()
    let v283 : string = v5.l0
    v283
and method233 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method234(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "common.retry_fn' / 루프"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 1 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method11()
            let v128 : string = $"{v1}/{v0}"
            let v129 : string = method233(v108, v109, v110, v111, v112, v113, v126, v127, v4, v128, v2, v3)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method232 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : bool, v9 : uint8) : struct (int32 * string) =
    let struct (v10 : int32, v11 : string) = method99(v1, v2, v3, v4, v5, v6, v7, v8)
    let v12 : bool = v10 = 0
    let v15 : US45 =
        if v12 then
            US45_0(v10, v11)
        else
            US45_1(v10, v11)
    let struct (v23 : bool, v24 : int32, v25 : string) =
        match v15 with
        | US45_1(v18, v19) -> (* Error *)
            struct (true, v18, v19)
        | US45_0(v16, v17) -> (* Ok *)
            struct (false, v16, v17)
    let v26 : bool = v23 = false
    let v28 : bool =
        if v26 then
            true
        else
            let v27 : bool = v9 >= v0
            v27
    if v28 then
        struct (v24, v25)
    else
        let v341 : unit = ()
        let v342 : (unit -> unit) = closure88(v0, v9, v24, v25, v23)
        let v343 : unit = (fun () -> v342 (); v341) ()
        let v659 : uint8 = v9 + 1uy
        method232(v0, v1, v2, v3, v4, v5, v6, v7, v8, v659)
and method231 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : bool) : struct (int32 * string) =
    let v9 : uint8 = 1uy
    method232(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9)
and method227 (v0 : US40, v1 : string, v2 : string, v3 : string, v4 : US14) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v23 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "cfg!(windows)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let _run_target_args'_v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "cfg!(windows)"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let _run_target_args'_v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "cfg!(windows)"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let _run_target_args'_v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : US3 = US3_0
    let v31 : US4 = US4_5(v30)
    let v32 : string = $"platform.is_windows / target: {v31}"
    let v33 : bool = failwith<bool> v32
    let _run_target_args'_v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : US3 = US3_0
    let v35 : US4 = US4_6(v34)
    let v36 : string = $"platform.is_windows / target: {v35}"
    let v37 : bool = failwith<bool> v36
    let _run_target_args'_v23 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v39 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v40 : bool = v39 v38
    let _run_target_args'_v23 = v40 
    #endif
#else
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v23 = v43 
    #endif
    let v44 : bool = _run_target_args'_v23 
    let v55 : string =
        if v44 then
            let v53 : string = "_WINDOWS"
            v53
        else
            let v54 : string = "_LINUX"
            v54
    let v56 : string = $" --define {v55}"
    let v178 : string =
        match v0 with
        | US40_1 -> (* None *)
            let v176 : string = ""
            v176
        | US40_0(v57) -> (* Some *)
            let v59 : string = Unchecked.defaultof<_>
            let v63 : string = Unchecked.defaultof<_>
            let v68 : bool =
                match v57 with
                | US41_0(v66) -> (* Wasm *)
                    let v67 : bool = v59 = v66
                    v67
                | _ ->
                    false
            let v112 : US5 =
                if v68 then
                    let v69 : string = "Wasm"
                    US5_0(v69)
                else
                    (* run_target_args'
                    let v73 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v74 : string = method228()
                    let _run_target_args'_v73 = v74 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : string = method228()
                    let _run_target_args'_v73 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : string = method228()
                    let _run_target_args'_v73 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v77 : string = method229()
                    let _run_target_args'_v73 = v77 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v78 : string = method229()
                    let _run_target_args'_v73 = v78 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v79 : string = method229()
                    let _run_target_args'_v73 = v79 
                    #endif
#else
                    let v80 : string = method229()
                    let _run_target_args'_v73 = v80 
                    #endif
                    let v81 : string = _run_target_args'_v73 
                    let v85 : US41 = US41_0(v59)
                    let v86 : string = method230(v85)
                    let v96 : (string []) = v86.Split v81 
                    let v100 : string = v96.[int 0]
                    let v103 : string = method230(v57)
                    let v105 : bool = v103.StartsWith (v100, false, null)
                    if v105 then
                        let v108 : string = "Wasm"
                        US5_0(v108)
                    else
                        US5_1
            let v168 : US5 =
                match v112 with
                | US5_1 -> (* None *)
                    let v117 : bool =
                        match v57 with
                        | US41_1(v115) -> (* Contract *)
                            let v116 : bool = v63 = v115
                            v116
                        | _ ->
                            false
                    let v161 : US5 =
                        if v117 then
                            let v118 : string = "Contract"
                            US5_0(v118)
                        else
                            (* run_target_args'
                            let v122 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v123 : string = method228()
                            let _run_target_args'_v122 = v123 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v124 : string = method228()
                            let _run_target_args'_v122 = v124 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v125 : string = method228()
                            let _run_target_args'_v122 = v125 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v126 : string = method229()
                            let _run_target_args'_v122 = v126 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v127 : string = method229()
                            let _run_target_args'_v122 = v127 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v128 : string = method229()
                            let _run_target_args'_v122 = v128 
                            #endif
#else
                            let v129 : string = method229()
                            let _run_target_args'_v122 = v129 
                            #endif
                            let v130 : string = _run_target_args'_v122 
                            let v134 : US41 = US41_1(v63)
                            let v135 : string = method230(v134)
                            let v145 : (string []) = v135.Split v130 
                            let v149 : string = v145.[int 0]
                            let v152 : string = method230(v57)
                            let v154 : bool = v152.StartsWith (v149, false, null)
                            if v154 then
                                let v157 : string = "Contract"
                                US5_0(v157)
                            else
                                US5_1
                    match v161 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v162) -> (* Some *)
                        US5_0(v162)
                | US5_0(v113) -> (* Some *)
                    US5_0(v113)
            let v172 : string =
                match v168 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v169) -> (* Some *)
                    v169
            let v173 : (unit -> string) = v172.ToUpper
            let v174 : string = v173 ()
            let v175 : string = $" --define {v174}"
            v175
    let v179 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v56}{v178}"
    let v191 : Result<string, string> =
        match v4 with
        | US14_1(v185) -> (* Error *)
            let v187 : Result<string, string> = Error v185 
            v187
        | US14_0(v180) -> (* Ok *)
            let v182 : Result<string, string> = Ok v180 
            v182
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "$0.ok()"
    let v195 : string option = Fable.Core.RustInterop.emitRustExpr v191 v194 
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : string = "$0.ok()"
    let v197 : string option = Fable.Core.RustInterop.emitRustExpr v191 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "$0.ok()"
    let v199 : string option = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let _run_target_args'_v193 = v199 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v200 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v200 
    #endif
#if FABLE_COMPILER_PYTHON
    let v201 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v201 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v202 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v202 
    #endif
#else
    let v203 : string option = match v191 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v193 = v203 
    #endif
    let v204 : string option = _run_target_args'_v193 
    let v207 : uint8 = 3uy
    let v208 : bool = true
    let v209 : bool = true
    method231(v207, v179, v6, v9, v11, v15, v208, v204, v209)
and method236 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "dotnet_fable_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method235 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method236(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / dotnet fable error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method235(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method237 () : (std_string_String -> bool) =
    closure90()
and method238 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method239 () : string =
    let v0 : string = "("
    v0
and method240 () : string =
    let v0 : string = "("
    v0
and method242 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v58 
    #endif
#else
    let v62 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v42 = v62 
    #endif
    let v65 : std_string_String = _run_target_args'_v42 
    let v74 : string = "true; let _capture_move = (move || { //"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "Box::new($0)"
    let v77 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v65 v76 
    let v78 : string = "Box::leak($0)"
    let v79 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "$0"
    let v81 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = $"$0.captures_iter(v79)"
    let v83 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "true; let _regex_captures : Vec<_> = v83.map(|x| { //"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = $"x"
    let v87 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "Box::new($0)"
    let v89 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "Box::leak($0)"
    let v91 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = $"$0.capture_names()"
    let v93 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v92 
    let v94 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v93.map(|x| { //"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "x.unwrap_or(\"\").to_string().into()"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : string = "$0.clone()"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = $"v91.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v103 : (string * string) = v99, v101 
    let v106 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    let v108 : string = "_regex_captures"
    let v109 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "true; $0 }).collect::<Vec<_>>()"
    let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "_regex_captures"
    let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "true; $0 })()"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = "_capture_move"
    let v117 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v116 
    v117
and closure91 () (v0 : std_collections_HashMap<string, string>) : US46 =
    US46_0(v0)
and method243 () : (std_collections_HashMap<string, string> -> US46) =
    closure91()
and method244 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 1 >= v64
            v65
    let v67 : bool = v66 = false
    let v302 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method11()
            let v127 : string = $"{v0}/{3uy}"
            let v128 : string = method233(v107, v108, v109, v110, v111, v112, v125, v126, v3, v127, v1, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v19 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and method241 (v0 : US14, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US14_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US14_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let v49 : bool = true
    let struct (v50 : int32, v51 : string) = method99(v20, v4, v7, v9, v13, v48, v45, v49)
    let v54 : string = "failed to load manifest for workspace member"
    let v55 : bool = v51.Contains v54 
    let v58 : bool = v55 = false
    let v275 : US45 =
        if v58 then
            let v59 : bool = v50 = 0
            if v59 then
                US45_0(v50, v51)
            else
                US45_1(v50, v51)
        else
            let v63 : string = $"regex::Regex::new(&$0)"
            let v64 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v65 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v64 v63 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "$0.unwrap()"
            let v69 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "$0.unwrap()"
            let v71 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "$0.unwrap()"
            let v73 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v65 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v74 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v74 
            #endif
#if FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v75 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v76 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v76 
            #endif
#else
            let v77 : regex_Regex = match v65 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v67 = v77 
            #endif
            let v78 : regex_Regex = _run_target_args'_v67 
            let v81 : Vec<std_collections_HashMap<string, string>> = method242(v51, v78)
            let v82 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v83 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v81 v82 
            let v84 : std_collections_HashMap<string, string> option = v83 |> Array.tryItem 0 
            let v87 : (std_collections_HashMap<string, string> -> US46) = method243()
            let v88 : US46 option = v84 |> Option.map v87 
            let v108 : US46 = US46_1
            let v109 : US46 = v88 |> Option.defaultValue v108 
            let v148 : US47 =
                match v109 with
                | US46_1 -> (* None *)
                    US47_1
                | US46_0(v113) -> (* Some *)
                    let v114 : string = method244()
                    let v115 : string = "std::collections::HashMap::get(&$0, &v114).map(|x| x).cloned()"
                    let v116 : string option = Fable.Core.RustInterop.emitRustExpr v113 v115 
                    let v119 : (string -> US5) = method6()
                    let v120 : US5 option = v116 |> Option.map v119 
                    let v140 : US5 = US5_1
                    let v141 : US5 = v120 |> Option.defaultValue v140 
                    US47_0(v141)
            let v155 : US5 =
                match v148 with
                | US47_0(v149) -> (* Some *)
                    match v149 with
                    | US5_0(v150) -> (* Some *)
                        US5_0(v150)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v155 with
            | US5_1 -> (* None *)
                US45_1(v50, v51)
            | US5_0(v157) -> (* Some *)
                let v158 : bool = method36(v157)
                let v159 : bool = v158 = false
                if v159 then
                    let v160 : string option = method39(v157)
                    let v163 : string = ""
                    let v164 : string = v160 |> Option.defaultValue v163 
                    let v167 : System.IDisposable = method76(v164)
                    (* run_target_args'
                    let v174 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v175 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v175 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v176 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v176 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v178 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v174 = v178 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v181 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v181 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v182 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v182 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v183 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v183 
                    #endif
#else
                    let v184 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v174 = v184 
                    #endif
                    let v185 : System.DateTime = _run_target_args'_v174 
                    let v191 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v192 : System.Guid = v191 ()
                    let v195 : System.Guid = method221(v192, v185)
                    let v197 : (System.Guid -> string) = _.ToString()
                    let v198 : string = v197 v195
                    let v201 : string = $"[package]"
                    let v202 : string = $"name = \"spiral_{v198}\""
                    let v205 : string = "\n"
                    let v206 : string = v201 + v205 
                    let v210 : string = v206 + v202 
                    let v213 : string = $"version = \"0.0.1\""
                    let v215 : string = v210 + v205 
                    let v219 : string = v215 + v213 
                    let v222 : string = $"edition = \"2021\""
                    let v224 : string = v219 + v205 
                    let v228 : string = v224 + v222 
                    let v231 : string = $""
                    let v233 : string = v228 + v205 
                    let v237 : string = v233 + v231 
                    let v240 : string = $"[[bin]]"
                    let v242 : string = v237 + v205 
                    let v246 : string = v242 + v240 
                    let v249 : string = $"name = \"spiral_{v198}\""
                    let v251 : string = v246 + v205 
                    let v255 : string = v251 + v249 
                    let v258 : string = $"path = \"spiral.rs\""
                    let v260 : string = v255 + v205 
                    let v264 : string = v260 + v258 
                    (* run_target_args'
                    let v267 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v268 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v157, v264) v268 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v157, v264)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v269 : bool = v50 = 0
                if v269 then
                    US45_0(v50, v51)
                else
                    US45_1(v50, v51)
    let struct (v283 : bool, v284 : int32, v285 : string) =
        match v275 with
        | US45_1(v278, v279) -> (* Error *)
            struct (true, v278, v279)
        | US45_0(v276, v277) -> (* Ok *)
            struct (false, v276, v277)
    let v286 : bool = v283 = false
    let v288 : bool =
        if v286 then
            true
        else
            let v287 : bool = v2 >= 3uy
            v287
    if v288 then
        struct (v284, v285)
    else
        let v601 : unit = ()
        let v602 : (unit -> unit) = closure92(v2, v284, v285, v283)
        let v603 : unit = (fun () -> v602 (); v601) ()
        let v919 : uint8 = v2 + 1uy
        method241(v0, v1, v919)
and method246 (v0 : int32, v1 : string) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "exit_code"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v65 : string = $"{v0}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v102 : string = "cargo_fmt_result"
    let v103 : string = $"{v102}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v120 : string = $"{v44}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v120)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v137 : string = $"{v1}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v3, v137)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v155 : string = " }"
    let v156 : string = $"{v155}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v156)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v172 : string = v3.l0
    v172
and method245 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method246(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_rust / cargo fmt error"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method245(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method247 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method249 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "external_command"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "cargo_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method249(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method17(v57)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v302 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method80()
            let v128 : string = method248(v108, v109, v110, v111, v112, v113, v126, v127, v3, v1, v4, v0, v2)
            let v143 : unit = ()
            let v144 : unit = (fun () -> v20 (); v143) ()
            let struct (v167 : Mut0, v168 : Mut1, v169 : Mut2, v170 : Mut3, v171 : Mut4, v172 : int64 option) = TraceState.trace_state.Value
            let v187 : unit = ()
            let v188 : (unit -> unit) = closure8(v167)
            let v189 : unit = (fun () -> v188 (); v187) ()
            let v192 : (string -> unit) = closure9()
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v128 v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v196 : string = v170.l0
            let v197 : bool = v196 = ""
            let v212 : string =
                if v197 then
                    v128
                else
                    let v198 : bool = v128 = ""
                    if v198 then
                        let v199 : string = v170.l0
                        v199
                    else
                        let v200 : string = v170.l0
                        let v203 : string = "\n"
                        let v204 : string = v200 + v203 
                        let v208 : string = v204 + v128 
                        v208
            (* run_target_args'
            let v217 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v218 
            let _run_target_args'_v217 = v219 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v220 
            let _run_target_args'_v217 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v212 v222 
            let _run_target_args'_v217 = v223 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v225 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v225 
            #endif
#if FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v229 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v233 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v233 
            #endif
#else
            let v237 : Ref<Str> = v212 |> unbox<Ref<Str>>
            let _run_target_args'_v217 = v237 
            #endif
            let v240 : Ref<Str> = _run_target_args'_v217 
            let v249 : string = $"$0.chars()"
            let v250 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v240 v249 
            let v251 : string = "$0"
            let v252 : _ = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "$0.collect::<Vec<_>>()"
            let v254 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v256 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v258 : bool = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "x"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : string = "String::from_iter($0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; $0 }).collect::<Vec<_>>()"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "_vec_map"
            let v266 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "$0.len()"
            let v268 : unativeint = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v274 : int32 = v268 |> int32 
            let v284 : string = ""
            let v285 : bool = v128 <> v284 
            let v289 : bool =
                if v285 then
                    let v288 : bool = v274 <= 1
                    v288
                else
                    false
            if v289 then
                v170.l0 <- v212
                ()
            else
                v170.l0 <- v284
                let v290 : string = "true; $0.into_iter().for_each(|x| { //"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v266 v290 
                let v292 : string = "x"
                let v293 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr v293 v294 
                let v296 : string = $"true"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr () v296 
                let v298 : string = "true; }); //"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v192 v128
            #endif
#if FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v192 v128
            #endif
#else
            v192 v128
            #endif
            // run_target_args' is_unit
            let v300 : (string -> unit) = v168.l0
            v300 v128
            US6_0(v167, v168, v169, v170, v171, v172)
    
    ()
and closure99 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v15 : (string -> bool) = closure99()
    let v16 : (string []) = v12 |> Array.skipWhile v15 
    let v17 : (string []) = v16 |> Array.skip 2 
    let v19 : string seq = v17 |> Seq.ofArray
    let v23 : string = method73()
    let v24 : (string -> (string seq -> string)) = String.concat
    let v25 : (string seq -> string) = v24 v23
    v25 v19
and method251 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "cargo_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method250 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method251(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_rust / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method250(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method253 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method13()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v6, v10)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v28 : string = "exit_code"
    let v29 : string = $"{v28}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v29)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v47 : string = " = "
    let v48 : string = $"{v47}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v6, v48)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v68 : string = $"{v0}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v6, v68)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v86 : string = "; "
    let v87 : string = $"{v86}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v6, v87)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v105 : string = "new_code_path"
    let v106 : string = $"{v105}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v6, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v123 : string = $"{v47}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v140 : string = $"{v1}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v140)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v157 : string = $"{v86}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v175 : string = "cargo_result"
    let v176 : string = $"{v175}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v176)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v193 : string = $"{v47}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v193)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v210 : string = $"{v2}"
    let v218 : unit = ()
    let v219 : (unit -> unit) = closure7(v6, v210)
    let v220 : unit = (fun () -> v219 (); v218) ()
    let v227 : string = $"{v86}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v6, v227)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v245 : string = "cleanup"
    let v246 : string = $"{v245}"
    let v254 : unit = ()
    let v255 : (unit -> unit) = closure7(v6, v246)
    let v256 : unit = (fun () -> v255 (); v254) ()
    let v263 : string = $"{v47}"
    let v271 : unit = ()
    let v272 : (unit -> unit) = closure7(v6, v263)
    let v273 : unit = (fun () -> v272 (); v271) ()
    let v281 : string =
        if v3 then
            let v279 : string = "true"
            v279
        else
            let v280 : string = "false"
            v280
    let v283 : string = $"{v281}"
    let v291 : unit = ()
    let v292 : (unit -> unit) = closure7(v6, v283)
    let v293 : unit = (fun () -> v292 (); v291) ()
    let v300 : string = $"{v86}"
    let v308 : unit = ()
    let v309 : (unit -> unit) = closure7(v6, v300)
    let v310 : unit = (fun () -> v309 (); v308) ()
    let v318 : string = "spiral_wasm_result"
    let v319 : string = $"{v318}"
    let v327 : unit = ()
    let v328 : (unit -> unit) = closure7(v6, v319)
    let v329 : unit = (fun () -> v328 (); v327) ()
    let v336 : string = $"{v47}"
    let v344 : unit = ()
    let v345 : (unit -> unit) = closure7(v6, v336)
    let v346 : unit = (fun () -> v345 (); v344) ()
    let v353 : string = $"{v4}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v6, v353)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v371 : string = " }"
    let v372 : string = $"{v371}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v6, v372)
    let v382 : unit = (fun () -> v381 (); v380) ()
    let v388 : string = v6.l0
    v388
and method252 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method253(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v17 : string = " "
    let v18 : string = v6 + v17 
    let v22 : string = v18 + v7 
    let v27 : string = " #"
    let v28 : string = v22 + v27 
    let v32 : (int64 -> string) = _.ToString()
    let v33 : string = v32 v14
    let v37 : string = v28 + v33 
    let v41 : string = v37 + v17 
    let v46 : string = "spiral.process_rust / wasm error"
    let v47 : string = v41 + v46 
    let v52 : string = " / "
    let v53 : string = v47 + v52 
    let v57 : string = v53 + v13 
    method17(v57)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure2()
    let v21 : unit = (fun () -> v20 (); v19) ()
    let struct (v44 : Mut0, v45 : Mut1, v46 : Mut2, v47 : Mut3, v48 : Mut4, v49 : int64 option) = TraceState.trace_state.Value
    let v62 : US0 = v48.l0
    let v63 : bool = v46.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 4 >= v65
            v66
    let v68 : bool = v67 = false
    let v303 : US6 =
        if v68 then
            US6_1
        else
            let v84 : unit = ()
            let v85 : unit = (fun () -> v20 (); v84) ()
            let struct (v108 : Mut0, v109 : Mut1, v110 : Mut2, v111 : Mut3, v112 : Mut4, v113 : int64 option) = TraceState.trace_state.Value
            let v126 : string = method7(v108, v109, v110, v111, v112, v113)
            let v127 : string = method80()
            let v128 : string = $"\n{v3}"
            let v129 : string = method252(v108, v109, v110, v111, v112, v113, v126, v127, v4, v1, v2, v0, v128)
            let v144 : unit = ()
            let v145 : unit = (fun () -> v20 (); v144) ()
            let struct (v168 : Mut0, v169 : Mut1, v170 : Mut2, v171 : Mut3, v172 : Mut4, v173 : int64 option) = TraceState.trace_state.Value
            let v188 : unit = ()
            let v189 : (unit -> unit) = closure8(v168)
            let v190 : unit = (fun () -> v189 (); v188) ()
            let v193 : (string -> unit) = closure9()
            (* run_target_args'
            let v194 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v195 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v129 v196 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : string = v171.l0
            let v198 : bool = v197 = ""
            let v213 : string =
                if v198 then
                    v129
                else
                    let v199 : bool = v129 = ""
                    if v199 then
                        let v200 : string = v171.l0
                        v200
                    else
                        let v201 : string = v171.l0
                        let v204 : string = "\n"
                        let v205 : string = v201 + v204 
                        let v209 : string = v205 + v129 
                        v209
            (* run_target_args'
            let v218 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v219 
            let _run_target_args'_v218 = v220 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v221 
            let _run_target_args'_v218 = v222 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v223 : string = "&*$0"
            let v224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v213 v223 
            let _run_target_args'_v218 = v224 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v226 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v226 
            #endif
#if FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v230 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v234 
            #endif
#else
            let v238 : Ref<Str> = v213 |> unbox<Ref<Str>>
            let _run_target_args'_v218 = v238 
            #endif
            let v241 : Ref<Str> = _run_target_args'_v218 
            let v250 : string = $"$0.chars()"
            let v251 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v241 v250 
            let v252 : string = "$0"
            let v253 : _ = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.collect::<Vec<_>>()"
            let v255 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v257 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "x"
            let v261 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v260 
            let v262 : string = "String::from_iter($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "true; $0 }).collect::<Vec<_>>()"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_map"
            let v267 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0.len()"
            let v269 : unativeint = Fable.Core.RustInterop.emitRustExpr v267 v268 
            let v275 : int32 = v269 |> int32 
            let v285 : string = ""
            let v286 : bool = v129 <> v285 
            let v290 : bool =
                if v286 then
                    let v289 : bool = v275 <= 1
                    v289
                else
                    false
            if v290 then
                v171.l0 <- v213
                ()
            else
                v171.l0 <- v285
                let v291 : string = "true; $0.into_iter().for_each(|x| { //"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v267 v291 
                let v293 : string = "x"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr v294 v295 
                let v297 : string = $"true"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                let v299 : string = "true; }); //"
                let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v193 v129
            #endif
#if FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v193 v129
            #endif
#else
            v193 v129
            #endif
            // run_target_args' is_unit
            let v301 : (string -> unit) = v169.l0
            v301 v129
            US6_0(v168, v169, v170, v171, v172, v173)
    
    ()
and method255 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method13()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v10 : string = "{ "
    let v11 : string = $"{v10}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v7, v11)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v29 : string = "exit_code"
    let v30 : string = $"{v29}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v30)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v48 : string = " = "
    let v49 : string = $"{v48}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v7, v49)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v69 : string = $"{v0}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v7, v69)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v7, v88)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v106 : string = "new_code_path"
    let v107 : string = $"{v106}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v7, v107)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v124 : string = $"{v48}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v7, v124)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v141 : string = $"{v1}"
    let v149 : unit = ()
    let v150 : (unit -> unit) = closure7(v7, v141)
    let v151 : unit = (fun () -> v150 (); v149) ()
    let v158 : string = $"{v87}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v7, v158)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v176 : string = "wasm_path"
    let v177 : string = $"{v176}"
    let v185 : unit = ()
    let v186 : (unit -> unit) = closure7(v7, v177)
    let v187 : unit = (fun () -> v186 (); v185) ()
    let v194 : string = $"{v48}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v7, v194)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v211 : string = $"{v2}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v7, v211)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v228 : string = $"{v87}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v7, v228)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v246 : string = "command"
    let v247 : string = $"{v246}"
    let v255 : unit = ()
    let v256 : (unit -> unit) = closure7(v7, v247)
    let v257 : unit = (fun () -> v256 (); v255) ()
    let v264 : string = $"{v48}"
    let v272 : unit = ()
    let v273 : (unit -> unit) = closure7(v7, v264)
    let v274 : unit = (fun () -> v273 (); v272) ()
    let v281 : string = $"{v3}"
    let v289 : unit = ()
    let v290 : (unit -> unit) = closure7(v7, v281)
    let v291 : unit = (fun () -> v290 (); v289) ()
    let v298 : string = $"{v87}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v7, v298)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v316 : string = "cleanup"
    let v317 : string = $"{v316}"
    let v325 : unit = ()
    let v326 : (unit -> unit) = closure7(v7, v317)
    let v327 : unit = (fun () -> v326 (); v325) ()
    let v334 : string = $"{v48}"
    let v342 : unit = ()
    let v343 : (unit -> unit) = closure7(v7, v334)
    let v344 : unit = (fun () -> v343 (); v342) ()
    let v352 : string =
        if v4 then
            let v350 : string = "true"
            v350
        else
            let v351 : string = "false"
            v351
    let v354 : string = $"{v352}"
    let v362 : unit = ()
    let v363 : (unit -> unit) = closure7(v7, v354)
    let v364 : unit = (fun () -> v363 (); v362) ()
    let v371 : string = $"{v87}"
    let v379 : unit = ()
    let v380 : (unit -> unit) = closure7(v7, v371)
    let v381 : unit = (fun () -> v380 (); v379) ()
    let v389 : string = "cargo_result"
    let v390 : string = $"{v389}"
    let v398 : unit = ()
    let v399 : (unit -> unit) = closure7(v7, v390)
    let v400 : unit = (fun () -> v399 (); v398) ()
    let v407 : string = $"{v48}"
    let v415 : unit = ()
    let v416 : (unit -> unit) = closure7(v7, v407)
    let v417 : unit = (fun () -> v416 (); v415) ()
    let v424 : string = $"{v5}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v7, v424)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v442 : string = " }"
    let v443 : string = $"{v442}"
    let v451 : unit = ()
    let v452 : (unit -> unit) = closure7(v7, v443)
    let v453 : unit = (fun () -> v452 (); v451) ()
    let v459 : string = v7.l0
    v459
and method254 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method255(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v18 : string = " "
    let v19 : string = v6 + v18 
    let v23 : string = v19 + v7 
    let v28 : string = " #"
    let v29 : string = v23 + v28 
    let v33 : (int64 -> string) = _.ToString()
    let v34 : string = v33 v15
    let v38 : string = v29 + v34 
    let v42 : string = v38 + v18 
    let v47 : string = "spiral.process_rust / cargo error"
    let v48 : string = v42 + v47 
    let v53 : string = " / "
    let v54 : string = v48 + v53 
    let v58 : string = v54 + v14 
    method17(v58)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure2()
    let v22 : unit = (fun () -> v21 (); v20) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : Mut4, v50 : int64 option) = TraceState.trace_state.Value
    let v63 : US0 = v49.l0
    let v64 : bool = v47.l0
    let v65 : bool = v64 = false
    let v68 : bool =
        if v65 then
            false
        else
            let v66 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v63
            let v67 : bool = 4 >= v66
            v67
    let v69 : bool = v68 = false
    let v304 : US6 =
        if v69 then
            US6_1
        else
            let v85 : unit = ()
            let v86 : unit = (fun () -> v21 (); v85) ()
            let struct (v109 : Mut0, v110 : Mut1, v111 : Mut2, v112 : Mut3, v113 : Mut4, v114 : int64 option) = TraceState.trace_state.Value
            let v127 : string = method7(v109, v110, v111, v112, v113, v114)
            let v128 : string = method80()
            let v129 : string = $"\n{v2}"
            let v130 : string = method254(v109, v110, v111, v112, v113, v114, v127, v128, v3, v1, v4, v5, v0, v129)
            let v145 : unit = ()
            let v146 : unit = (fun () -> v21 (); v145) ()
            let struct (v169 : Mut0, v170 : Mut1, v171 : Mut2, v172 : Mut3, v173 : Mut4, v174 : int64 option) = TraceState.trace_state.Value
            let v189 : unit = ()
            let v190 : (unit -> unit) = closure8(v169)
            let v191 : unit = (fun () -> v190 (); v189) ()
            let v194 : (string -> unit) = closure9()
            (* run_target_args'
            let v195 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v196 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v196 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v197 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v130 v197 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v198 : string = v172.l0
            let v199 : bool = v198 = ""
            let v214 : string =
                if v199 then
                    v130
                else
                    let v200 : bool = v130 = ""
                    if v200 then
                        let v201 : string = v172.l0
                        v201
                    else
                        let v202 : string = v172.l0
                        let v205 : string = "\n"
                        let v206 : string = v202 + v205 
                        let v210 : string = v206 + v130 
                        v210
            (* run_target_args'
            let v219 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v220 : string = "&*$0"
            let v221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v220 
            let _run_target_args'_v219 = v221 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v222 : string = "&*$0"
            let v223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v222 
            let _run_target_args'_v219 = v223 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v214 v224 
            let _run_target_args'_v219 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v227 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v227 
            #endif
#if FABLE_COMPILER_PYTHON
            let v231 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v231 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v235 
            #endif
#else
            let v239 : Ref<Str> = v214 |> unbox<Ref<Str>>
            let _run_target_args'_v219 = v239 
            #endif
            let v242 : Ref<Str> = _run_target_args'_v219 
            let v251 : string = $"$0.chars()"
            let v252 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v242 v251 
            let v253 : string = "$0"
            let v254 : _ = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "$0.collect::<Vec<_>>()"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v258 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "x"
            let v262 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "String::from_iter($0)"
            let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "true; $0 }).collect::<Vec<_>>()"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = "_vec_map"
            let v268 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "$0.len()"
            let v270 : unativeint = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v276 : int32 = v270 |> int32 
            let v286 : string = ""
            let v287 : bool = v130 <> v286 
            let v291 : bool =
                if v287 then
                    let v290 : bool = v276 <= 1
                    v290
                else
                    false
            if v291 then
                v172.l0 <- v214
                ()
            else
                v172.l0 <- v286
                let v292 : string = "true; $0.into_iter().for_each(|x| { //"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr v268 v292 
                let v294 : string = "x"
                let v295 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v294 
                let v296 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v295 v296 
                let v298 : string = $"true"
                let v299 : bool = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = "true; }); //"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr () v300 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v194 v130
            #endif
#if FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v194 v130
            #endif
#else
            v194 v130
            #endif
            // run_target_args' is_unit
            let v302 : (string -> unit) = v170.l0
            v302 v130
            US6_0(v169, v170, v171, v172, v173, v174)
    
    ()
and method257 (v0 : string, v1 : UH5) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "new_code_path"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v62 : string = $"{v0}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v62)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v80 : string = "; "
    let v81 : string = $"{v80}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v3, v81)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v99 : string = "cleanup"
    let v100 : string = $"{v99}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v3, v100)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v117 : string = $"{v44}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v117)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v134 : string = $"%A{v1}"
    let v138 : string = $"{v134}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v3, v138)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v156 : string = " }"
    let v157 : string = $"{v156}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v3, v157)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v173 : string = v3.l0
    v173
and method256 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method257(v8, v24)
    let v26 : int64 = v0.l0
    let v29 : string = " "
    let v30 : string = v6 + v29 
    let v34 : string = v30 + v7 
    let v39 : string = " #"
    let v40 : string = v34 + v39 
    let v44 : (int64 -> string) = _.ToString()
    let v45 : string = v44 v26
    let v49 : string = v40 + v45 
    let v53 : string = v49 + v29 
    let v58 : string = "spiral.process_rust / cleanup"
    let v59 : string = v53 + v58 
    let v64 : string = " / "
    let v65 : string = v59 + v64 
    let v69 : string = v65 + v25 
    method17(v69)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure2()
    let v27 : unit = (fun () -> v26 (); v25) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    let v74 : bool = v73 = false
    let v308 : US6 =
        if v74 then
            US6_1
        else
            let v90 : unit = ()
            let v91 : unit = (fun () -> v26 (); v90) ()
            let struct (v114 : Mut0, v115 : Mut1, v116 : Mut2, v117 : Mut3, v118 : Mut4, v119 : int64 option) = TraceState.trace_state.Value
            let v132 : string = method7(v114, v115, v116, v117, v118, v119)
            let v133 : string = method83()
            let v134 : string = method256(v114, v115, v116, v117, v118, v119, v132, v133, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
            let v149 : unit = ()
            let v150 : unit = (fun () -> v26 (); v149) ()
            let struct (v173 : Mut0, v174 : Mut1, v175 : Mut2, v176 : Mut3, v177 : Mut4, v178 : int64 option) = TraceState.trace_state.Value
            let v193 : unit = ()
            let v194 : (unit -> unit) = closure8(v173)
            let v195 : unit = (fun () -> v194 (); v193) ()
            let v198 : (string -> unit) = closure9()
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v200 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v201 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v134 v201 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v202 : string = v176.l0
            let v203 : bool = v202 = ""
            let v218 : string =
                if v203 then
                    v134
                else
                    let v204 : bool = v134 = ""
                    if v204 then
                        let v205 : string = v176.l0
                        v205
                    else
                        let v206 : string = v176.l0
                        let v209 : string = "\n"
                        let v210 : string = v206 + v209 
                        let v214 : string = v210 + v134 
                        v214
            (* run_target_args'
            let v223 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v224 : string = "&*$0"
            let v225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v224 
            let _run_target_args'_v223 = v225 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v226 : string = "&*$0"
            let v227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v223 = v227 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v228 : string = "&*$0"
            let v229 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v223 = v229 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v235 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v239 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v239 
            #endif
#else
            let v243 : Ref<Str> = v218 |> unbox<Ref<Str>>
            let _run_target_args'_v223 = v243 
            #endif
            let v246 : Ref<Str> = _run_target_args'_v223 
            let v255 : string = $"$0.chars()"
            let v256 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v246 v255 
            let v257 : string = "$0"
            let v258 : _ = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "$0.collect::<Vec<_>>()"
            let v260 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v262 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v265 : string = "x"
            let v266 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v265 
            let v267 : string = "String::from_iter($0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v266 v267 
            let v269 : string = "true; $0 }).collect::<Vec<_>>()"
            let v270 : bool = Fable.Core.RustInterop.emitRustExpr v268 v269 
            let v271 : string = "_vec_map"
            let v272 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "$0.len()"
            let v274 : unativeint = Fable.Core.RustInterop.emitRustExpr v272 v273 
            let v280 : int32 = v274 |> int32 
            let v290 : string = ""
            let v291 : bool = v134 <> v290 
            let v295 : bool =
                if v291 then
                    let v294 : bool = v280 <= 1
                    v294
                else
                    false
            if v295 then
                v176.l0 <- v218
                ()
            else
                v176.l0 <- v290
                let v296 : string = "true; $0.into_iter().for_each(|x| { //"
                let v297 : bool = Fable.Core.RustInterop.emitRustExpr v272 v296 
                let v298 : string = "x"
                let v299 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v298 
                let v300 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v301 : bool = Fable.Core.RustInterop.emitRustExpr v299 v300 
                let v302 : string = $"true"
                let v303 : bool = Fable.Core.RustInterop.emitRustExpr () v302 
                let v304 : string = "true; }); //"
                let v305 : bool = Fable.Core.RustInterop.emitRustExpr () v304 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v198 v134
            #endif
#if FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v198 v134
            #endif
#else
            v198 v134
            #endif
            // run_target_args' is_unit
            let v306 : (string -> unit) = v174.l0
            v306 v134
            US6_0(v173, v174, v175, v176, v177, v178)
    
    ()
and closure105 () () : US48 =
    US48_0
and method259 () : (unit -> US48) =
    closure105()
and closure106 () (v0 : string) : US48 =
    US48_1(v0)
and method260 () : (string -> US48) =
    closure106()
and method262 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error'"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method261 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method262(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "file_system.file_delete"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure107 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method80()
            let v124 : string = method261(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method258 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method47()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US48) = method259()
        let v24 : (string -> US48) = method260()
        let v26 : US48 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US48_1(v29) -> (* Error *)
            let v341 : unit = ()
            let v342 : (unit -> unit) = closure107(v29)
            let v343 : unit = (fun () -> v342 (); v341) ()
            ()
        | US48_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v658 : (string -> unit) = System.IO.File.Delete
        v658 v1
        #endif
        // run_target_args' is_unit
        method258(v3)
    | UH5_0 -> (* Nil *)
        ()
and method263 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US49 =
    US49_0(v0)
and method264 () : (std_fs_FileType -> US49) =
    closure109()
and closure110 () (v0 : std_string_String) : US49 =
    US49_1(v0)
and method265 () : (std_string_String -> US49) =
    closure110()
and method266 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v62 
    #endif
#else
    let v66 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v46 = v66 
    #endif
    let v69 : std_string_String = _run_target_args'_v46 
    (* run_target_args'
    let v82 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v83 : string = "std::path::PathBuf::from($0)"
    let v84 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v83 
    let _run_target_args'_v82 = v84 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v85 : string = "std::path::PathBuf::from($0)"
    let v86 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v85 
    let _run_target_args'_v82 = v86 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v87 : string = "std::path::PathBuf::from($0)"
    let v88 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v69 v87 
    let _run_target_args'_v82 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v98 
    #endif
#else
    let v102 : std_path_PathBuf = v69 |> unbox<std_path_PathBuf>
    let _run_target_args'_v82 = v102 
    #endif
    let v105 : std_path_PathBuf = _run_target_args'_v82 
    let v114 : string = "$0.file_name()"
    let v115 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v105 v114 
    let v116 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "x"
    let v119 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "$0.to_os_string()"
    let v121 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "$0.to_str()"
    let v123 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : string = "$0.unwrap()"
    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
    (* run_target_args'
    let v130 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _run_target_args'_v130 = v132 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v133 
    let _run_target_args'_v130 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v125 v135 
    let _run_target_args'_v130 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v146 
    #endif
#else
    let v150 : std_string_String = v125 |> unbox<std_string_String>
    let _run_target_args'_v130 = v150 
    #endif
    let v153 : std_string_String = _run_target_args'_v130 
    let v162 : string = "fable_library_rust::String_::fromString($0)"
    let v163 : string = Fable.Core.RustInterop.emitRustExpr v153 v162 
    let v164 : string = "true; $0 })"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_optionm_map_"
    let v167 : string option = Fable.Core.RustInterop.emitRustExpr () v166 
    let v170 : (string -> US5) = method6()
    let v171 : US5 option = v167 |> Option.map v170 
    let v191 : US5 = US5_1
    let v192 : US5 = v171 |> Option.defaultValue v191 
    let v199 : string =
        match v192 with
        | US5_1 -> (* None *)
            let v197 : string = ""
            v197
        | US5_0(v196) -> (* Some *)
            v196
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v205 : string = null |> unbox<string>
    let _run_target_args'_v5 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v209 : string = null |> unbox<string>
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v213 : string = null |> unbox<string>
    let _run_target_args'_v5 = v213 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v216 : (string -> string) = System.IO.Path.GetDirectoryName
    let v217 : string = v216 v0
    let _run_target_args'_v5 = v217 
    #endif
#else
    let v218 : (string -> string) = System.IO.Path.GetDirectoryName
    let v219 : string = v218 v0
    let _run_target_args'_v5 = v219 
    #endif
    let v220 : string = _run_target_args'_v5 
    v220
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method77()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US49) = method264()
    let v37 : (std_string_String -> US49) = method265()
    let v39 : US49 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v296 : US50 =
        match v39 with
        | US49_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US50_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v89 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v90 : string = "format!(\"{}\", $0)"
                let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v90 
                let _run_target_args'_v89 = v91 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v92 : string = "format!(\"{}\", $0)"
                let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v92 
                let _run_target_args'_v89 = v93 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v94 : string = "format!(\"{}\", $0)"
                let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v94 
                let _run_target_args'_v89 = v95 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v97 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v97 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v105 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v105 
                #endif
#else
                let v109 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v89 = v109 
                #endif
                let v112 : std_string_String = _run_target_args'_v89 
                let v121 : string = "fable_library_rust::String_::fromString($0)"
                let v122 : string = Fable.Core.RustInterop.emitRustExpr v112 v121 
                let v123 : string = method266(v122)
                let v125 : bool = v123.StartsWith (v0, false, null)
                let v128 : bool = v125 = false
                if v128 then
                    US50_1
                else
                    let v130 : string option = method39(v122)
                    let v133 : (string -> US5) = method6()
                    let v134 : US5 option = v130 |> Option.map v133 
                    let v154 : US5 = US5_1
                    let v155 : US5 = v134 |> Option.defaultValue v154 
                    match v155 with
                    | US5_0(v159) -> (* Some *)
                        let v161 : bool = v159.Contains v0 
                        let v164 : bool = v161 = false
                        if v164 then
                            US50_2
                        else
                            US50_1
                    | _ ->
                        US50_1
        | _ ->
            let v172 : string = "async_walkdir::DirEntry::path(&$0)"
            let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v172 
            (* run_target_args'
            let v178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v179 : string = "$0.display()"
            let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
            let _run_target_args'_v178 = v180 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v181 : string = "$0.display()"
            let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
            let _run_target_args'_v178 = v182 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
            let _run_target_args'_v178 = v184 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v186 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v186 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v194 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v194 
            #endif
#else
            let v198 : std_path_Display = v173 |> unbox<std_path_Display>
            let _run_target_args'_v178 = v198 
            #endif
            let v201 : std_path_Display = _run_target_args'_v178 
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "format!(\"{}\", $0)"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "format!(\"{}\", $0)"
            let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "format!(\"{}\", $0)"
            let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : std_string_String = _run_target_args'_v214 
            let v246 : string = "fable_library_rust::String_::fromString($0)"
            let v247 : string = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = method266(v247)
            let v250 : bool = v248.StartsWith (v0, false, null)
            let v253 : bool = v250 = false
            if v253 then
                US50_1
            else
                let v255 : string option = method39(v247)
                let v258 : (string -> US5) = method6()
                let v259 : US5 option = v255 |> Option.map v258 
                let v279 : US5 = US5_1
                let v280 : US5 = v259 |> Option.defaultValue v279 
                match v280 with
                | US5_0(v284) -> (* Some *)
                    let v286 : bool = v284.Contains v0 
                    let v289 : bool = v286 = false
                    if v289 then
                        US50_2
                    else
                        US50_1
                | _ ->
                    US50_1
    let v297 : string = ""
    let v298 : string = "}"
    let v299 : string = v297 + v298 
    let x = v296 //
    let v300 : _ = x
    let v301 : unit = ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = $"true; let _fix_closure_v301 = $0"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v300 v303 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : string = $"true; let _fix_closure_v301 = $0"
    let v306 : bool = Fable.Core.RustInterop.emitRustExpr v300 v305 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v307 : string = $"true; let _fix_closure_v301 = $0"
    let v308 : bool = Fable.Core.RustInterop.emitRustExpr v300 v307 
    let _run_target_args'_v302 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v302 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v302 = false 
    #endif
#else
    let _run_target_args'_v302 = false 
    #endif
    let v309 : bool = _run_target_args'_v302 
    let v310 : string = $"true; _fix_closure_v301 " + v299 + "); " + v297 + " // rust.fix_closure'"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "__future_init"
    let v313 : _ = Fable.Core.RustInterop.emitRustExpr () v312 
    let v314 : string = "v313"
    let v315 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US50>>, Send<Dyn<std_future_Future<US50>>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : US50 = Fable.Core.RustInterop.emitRustExpr () v316 
    let v326 : async_walkdir_Filtering =
        match v317 with
        | US50_2 -> (* Continue *)
            let v322 : string = "async_walkdir::Filtering::Continue"
            let v323 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v322 
            v323
        | US50_0 -> (* Ignore *)
            let v318 : string = "async_walkdir::Filtering::Ignore"
            let v319 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v318 
            v319
        | US50_1 -> (* IgnoreDir *)
            let v320 : string = "async_walkdir::Filtering::IgnoreDir"
            let v321 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v320 
            v321
    let v327 : string = v297 + v298 
    let x = v326 //
    let v328 : _ = x
    let v329 : unit = ()
    (* run_target_args'
    let v330 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v331 : string = $"true; let _fix_closure_v329 = $0"
    let v332 : bool = Fable.Core.RustInterop.emitRustExpr v328 v331 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = $"true; let _fix_closure_v329 = $0"
    let v334 : bool = Fable.Core.RustInterop.emitRustExpr v328 v333 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v335 : string = $"true; let _fix_closure_v329 = $0"
    let v336 : bool = Fable.Core.RustInterop.emitRustExpr v328 v335 
    let _run_target_args'_v330 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v330 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v330 = false 
    #endif
#else
    let _run_target_args'_v330 = false 
    #endif
    let v337 : bool = _run_target_args'_v330 
    let v338 : string = $"true; _fix_closure_v329 " + v327 + "); " + v297 + " // rust.fix_closure'"
    let v339 : bool = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "__future_init"
    let v341 : _ = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "v341"
    let v343 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v342 
    v343
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method268 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US51 =
    US51_0(v0)
and method269 () : (async_walkdir_DirEntry -> US51) =
    closure113()
and closure114 () (v0 : std_string_String) : US51 =
    US51_1(v0)
and method270 () : (std_string_String -> US51) =
    closure114()
and method272 (v0 : std_string_String) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "error"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "format!(\"{:#?}\", $0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v65 
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v64 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v64 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v0}"
    let _run_target_args'_v64 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : string = $"%A{v0}"
    let _run_target_args'_v64 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : string = $"%A{v0}"
    let _run_target_args'_v64 = v86 
    #endif
#else
    let v90 : string = $"%A{v0}"
    let _run_target_args'_v64 = v90 
    #endif
    let v93 : string = _run_target_args'_v64 
    let v103 : string = $"{v93}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v2, v103)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v2, v122)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v138 : string = v2.l0
    v138
and method271 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method272(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript / stream_filter_map"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure115 (v0 : std_string_String) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method80()
            let v124 : string = method271(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method268()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US51) = method269()
    let v19 : (std_string_String -> US51) = method270()
    let v21 : US51 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v830 : US52 =
        match v21 with
        | US51_1(v199) -> (* Error *)
            let v511 : unit = ()
            let v512 : (unit -> unit) = closure115(v199)
            let v513 : unit = (fun () -> v512 (); v511) ()
            US52_1
        | US51_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v67 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v68 : string = "format!(\"{}\", $0)"
            let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v68 
            let _run_target_args'_v67 = v69 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v70 : string = "format!(\"{}\", $0)"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v70 
            let _run_target_args'_v67 = v71 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v72 : string = "format!(\"{}\", $0)"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v72 
            let _run_target_args'_v67 = v73 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v75 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v75 
            #endif
#if FABLE_COMPILER_PYTHON
            let v79 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v79 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v83 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v83 
            #endif
#else
            let v87 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v67 = v87 
            #endif
            let v90 : std_string_String = _run_target_args'_v67 
            let v99 : string = "fable_library_rust::String_::fromString($0)"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v90 v99 
            let v101 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v102 : string = $"regex::Regex::new(&$0)"
            let v103 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v101 v102 
            (* run_target_args'
            let v105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "$0.unwrap()"
            let v107 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v106 
            let _run_target_args'_v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "$0.unwrap()"
            let v109 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v108 
            let _run_target_args'_v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "$0.unwrap()"
            let v111 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v103 v110 
            let _run_target_args'_v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v114 
            #endif
#else
            let v115 : regex_Regex = match v103 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v105 = v115 
            #endif
            let v116 : regex_Regex = _run_target_args'_v105 
            let v119 : Vec<std_collections_HashMap<string, string>> = method242(v100, v116)
            let v120 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v121 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v119 v120 
            let v122 : std_collections_HashMap<string, string> option = v121 |> Array.tryItem 0 
            let v125 : (std_collections_HashMap<string, string> -> US46) = method243()
            let v126 : US46 option = v122 |> Option.map v125 
            let v146 : US46 = US46_1
            let v147 : US46 = v126 |> Option.defaultValue v146 
            let v186 : US47 =
                match v147 with
                | US46_1 -> (* None *)
                    US47_1
                | US46_0(v151) -> (* Some *)
                    let v152 : string = method244()
                    let v153 : string = "std::collections::HashMap::get(&$0, &v152).map(|x| x).cloned()"
                    let v154 : string option = Fable.Core.RustInterop.emitRustExpr v151 v153 
                    let v157 : (string -> US5) = method6()
                    let v158 : US5 option = v154 |> Option.map v157 
                    let v178 : US5 = US5_1
                    let v179 : US5 = v158 |> Option.defaultValue v178 
                    US47_0(v179)
            let v193 : US5 =
                match v186 with
                | US47_0(v187) -> (* Some *)
                    match v187 with
                    | US5_0(v188) -> (* Some *)
                        US5_0(v188)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v193 with
            | US5_1 -> (* None *)
                US52_1
            | US5_0(v194) -> (* Some *)
                US52_0(v100, v194)
    match v830 with
    | US52_1 -> (* None *)
        let v838 : struct (string * string) option = None
        v838
    | US52_0(v831, v832) -> (* Some *)
        let v834 : struct (string * string) option = Some struct (v831, v832) 
        v834
and method267 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US52 =
    US52_0(v0, v1)
and method273 () : (struct (string * string) -> US52) =
    closure117()
and method275 (v0 : US52) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "version"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"%A{v0}"
    let v65 : string = $"{v61}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v2, v65)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v83 : string = " }"
    let v84 : string = $"{v83}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v2, v84)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v100 : string = v2.l0
    v100
and method274 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US52) : string =
    let v9 : string = method275(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure118 (v0 : US52) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method274(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method276 (v0 : string, v1 : string, v2 : US52) : unit =
    match v2 with
    | US52_1 -> (* None *)
        let v13 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v13
    | US52_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method34(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method34(v0, v8)
        method226(v7, v9)
        let v10 : string = "fable_modules"
        let v11 : string = method34(v7, v10)
        let v12 : bool = true
        method87(v12, v11)
and method277 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method236(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_typescript"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method277(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method279 (v0 : string) : string =
    let v1 : string = method13()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v2, v6)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v24 : string = "new_code_path"
    let v25 : string = $"{v24}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v25)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v43 : string = " = "
    let v44 : string = $"{v43}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v2, v44)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v61 : string = $"{v0}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v2, v61)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v79 : string = " }"
    let v80 : string = $"{v79}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v2, v80)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v96 : string = v2.l0
    v96
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method279(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_typescript"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure120 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method278(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and method280 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method280(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method281 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method281(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method73()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method283 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method13()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v5, v9)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v27 : string = "ex"
    let v28 : string = $"{v27}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v28)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v46 : string = " = "
    let v47 : string = $"{v46}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v5, v47)
    let v57 : unit = (fun () -> v56 (); v55) ()
    (* run_target_args'
    let v67 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "format!(\"{:#?}\", $0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = "format!(\"{:#?}\", $0)"
    let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v72 
    let v74 : string = "fable_library_rust::String_::fromString($0)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let _run_target_args'_v67 = v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v76 : string = "format!(\"{:#?}\", $0)"
    let v77 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v76 
    let v78 : string = "fable_library_rust::String_::fromString($0)"
    let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let _run_target_args'_v67 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v0}"
    let _run_target_args'_v67 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : string = $"%A{v0}"
    let _run_target_args'_v67 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : string = $"%A{v0}"
    let _run_target_args'_v67 = v89 
    #endif
#else
    let v93 : string = $"%A{v0}"
    let _run_target_args'_v67 = v93 
    #endif
    let v96 : string = _run_target_args'_v67 
    let v106 : string = $"{v96}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v106)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v124 : string = "; "
    let v125 : string = $"{v124}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v125)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v143 : string = "new_code_path"
    let v144 : string = $"{v143}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v144)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v161 : string = $"{v46}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v161)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v178 : string = $"{v1}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v5, v178)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v195 : string = $"{v124}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v5, v195)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v213 : string = "external_command"
    let v214 : string = $"{v213}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v5, v214)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v231 : string = $"{v46}"
    let v239 : unit = ()
    let v240 : (unit -> unit) = closure7(v5, v231)
    let v241 : unit = (fun () -> v240 (); v239) ()
    let v248 : string = $"{v2}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v5, v248)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v265 : string = $"{v124}"
    let v273 : unit = ()
    let v274 : (unit -> unit) = closure7(v5, v265)
    let v275 : unit = (fun () -> v274 (); v273) ()
    let v283 : string = "run_result"
    let v284 : string = $"{v283}"
    let v292 : unit = ()
    let v293 : (unit -> unit) = closure7(v5, v284)
    let v294 : unit = (fun () -> v293 (); v292) ()
    let v301 : string = $"{v46}"
    let v309 : unit = ()
    let v310 : (unit -> unit) = closure7(v5, v301)
    let v311 : unit = (fun () -> v310 (); v309) ()
    let v318 : string = $"{v3}"
    let v326 : unit = ()
    let v327 : (unit -> unit) = closure7(v5, v318)
    let v328 : unit = (fun () -> v327 (); v326) ()
    let v336 : string = " }"
    let v337 : string = $"{v336}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v5, v337)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v353 : string = v5.l0
    v353
and method282 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method283(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method282(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method284 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method184(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_typescript / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method284(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method285 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method236(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.process_python"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 4 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method80()
            let v125 : string = method285(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and method286 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method279(v8)
    let v10 : int64 = v0.l0
    let v13 : string = " "
    let v14 : string = v6 + v13 
    let v18 : string = v14 + v7 
    let v23 : string = " #"
    let v24 : string = v18 + v23 
    let v28 : (int64 -> string) = _.ToString()
    let v29 : string = v28 v10
    let v33 : string = v24 + v29 
    let v37 : string = v33 + v13 
    let v42 : string = "spiral.process_python"
    let v43 : string = v37 + v42 
    let v48 : string = " / "
    let v49 : string = v43 + v48 
    let v53 : string = v49 + v9 
    method17(v53)
and closure126 (v0 : string) () : unit =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v58 : US0 = v44.l0
    let v59 : bool = v42.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 1 >= v61
            v62
    let v64 : bool = v63 = false
    let v298 : US6 =
        if v64 then
            US6_1
        else
            let v80 : unit = ()
            let v81 : unit = (fun () -> v16 (); v80) ()
            let struct (v104 : Mut0, v105 : Mut1, v106 : Mut2, v107 : Mut3, v108 : Mut4, v109 : int64 option) = TraceState.trace_state.Value
            let v122 : string = method7(v104, v105, v106, v107, v108, v109)
            let v123 : string = method11()
            let v124 : string = method286(v104, v105, v106, v107, v108, v109, v122, v123, v0)
            let v139 : unit = ()
            let v140 : unit = (fun () -> v16 (); v139) ()
            let struct (v163 : Mut0, v164 : Mut1, v165 : Mut2, v166 : Mut3, v167 : Mut4, v168 : int64 option) = TraceState.trace_state.Value
            let v183 : unit = ()
            let v184 : (unit -> unit) = closure8(v163)
            let v185 : unit = (fun () -> v184 (); v183) ()
            let v188 : (string -> unit) = closure9()
            (* run_target_args'
            let v189 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v190 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v124 v191 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v192 : string = v166.l0
            let v193 : bool = v192 = ""
            let v208 : string =
                if v193 then
                    v124
                else
                    let v194 : bool = v124 = ""
                    if v194 then
                        let v195 : string = v166.l0
                        v195
                    else
                        let v196 : string = v166.l0
                        let v199 : string = "\n"
                        let v200 : string = v196 + v199 
                        let v204 : string = v200 + v124 
                        v204
            (* run_target_args'
            let v213 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v214 : string = "&*$0"
            let v215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v214 
            let _run_target_args'_v213 = v215 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v216 : string = "&*$0"
            let v217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v216 
            let _run_target_args'_v213 = v217 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : string = "&*$0"
            let v219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v208 v218 
            let _run_target_args'_v213 = v219 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v225 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v229 
            #endif
#else
            let v233 : Ref<Str> = v208 |> unbox<Ref<Str>>
            let _run_target_args'_v213 = v233 
            #endif
            let v236 : Ref<Str> = _run_target_args'_v213 
            let v245 : string = $"$0.chars()"
            let v246 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v236 v245 
            let v247 : string = "$0"
            let v248 : _ = Fable.Core.RustInterop.emitRustExpr v246 v247 
            let v249 : string = "$0.collect::<Vec<_>>()"
            let v250 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v248 v249 
            let v251 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v252 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "x"
            let v256 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v255 
            let v257 : string = "String::from_iter($0)"
            let v258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "true; $0 }).collect::<Vec<_>>()"
            let v260 : bool = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "_vec_map"
            let v262 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : string = "$0.len()"
            let v264 : unativeint = Fable.Core.RustInterop.emitRustExpr v262 v263 
            let v270 : int32 = v264 |> int32 
            let v280 : string = ""
            let v281 : bool = v124 <> v280 
            let v285 : bool =
                if v281 then
                    let v284 : bool = v270 <= 1
                    v284
                else
                    false
            if v285 then
                v166.l0 <- v208
                ()
            else
                v166.l0 <- v280
                let v286 : string = "true; $0.into_iter().for_each(|x| { //"
                let v287 : bool = Fable.Core.RustInterop.emitRustExpr v262 v286 
                let v288 : string = "x"
                let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v288 
                let v290 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v291 : bool = Fable.Core.RustInterop.emitRustExpr v289 v290 
                let v292 : string = $"true"
                let v293 : bool = Fable.Core.RustInterop.emitRustExpr () v292 
                let v294 : string = "true; }); //"
                let v295 : bool = Fable.Core.RustInterop.emitRustExpr () v294 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v188 v124
            #endif
#if FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v188 v124
            #endif
#else
            v188 v124
            #endif
            // run_target_args' is_unit
            let v296 : (string -> unit) = v164.l0
            v296 v124
            US6_0(v163, v164, v165, v166, v167, v168)
    
    ()
and closure127 (v0 : string) () : string =
    let v11 : string = "\n"
    let v12 : (string []) = v0.Split v11 
    let v16 : string seq = v12 |> Seq.ofArray
    let v20 : string = method73()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method287 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method283(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / Exception"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method287(v107, v108, v109, v110, v111, v112, v125, v126, v3, v0, v2, v1)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v317 : unit = (fun () -> v316 (); v315) ()
    US5_1
and method288 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method184(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v16 : string = " "
    let v17 : string = v6 + v16 
    let v21 : string = v17 + v7 
    let v26 : string = " #"
    let v27 : string = v21 + v26 
    let v31 : (int64 -> string) = _.ToString()
    let v32 : string = v31 v13
    let v36 : string = v27 + v32 
    let v40 : string = v36 + v16 
    let v45 : string = "spiral.process_python / error"
    let v46 : string = v40 + v45 
    let v51 : string = " / "
    let v52 : string = v46 + v51 
    let v56 : string = v52 + v12 
    method17(v56)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure2()
    let v20 : unit = (fun () -> v19 (); v18) ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : Mut4, v48 : int64 option) = TraceState.trace_state.Value
    let v61 : US0 = v47.l0
    let v62 : bool = v45.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 4 >= v64
            v65
    let v67 : bool = v66 = false
    let v301 : US6 =
        if v67 then
            US6_1
        else
            let v83 : unit = ()
            let v84 : unit = (fun () -> v19 (); v83) ()
            let struct (v107 : Mut0, v108 : Mut1, v109 : Mut2, v110 : Mut3, v111 : Mut4, v112 : int64 option) = TraceState.trace_state.Value
            let v125 : string = method7(v107, v108, v109, v110, v111, v112)
            let v126 : string = method80()
            let v127 : string = method288(v107, v108, v109, v110, v111, v112, v125, v126, v2, v1, v0, v3)
            let v142 : unit = ()
            let v143 : unit = (fun () -> v19 (); v142) ()
            let struct (v166 : Mut0, v167 : Mut1, v168 : Mut2, v169 : Mut3, v170 : Mut4, v171 : int64 option) = TraceState.trace_state.Value
            let v186 : unit = ()
            let v187 : (unit -> unit) = closure8(v166)
            let v188 : unit = (fun () -> v187 (); v186) ()
            let v191 : (string -> unit) = closure9()
            (* run_target_args'
            let v192 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v193 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v193 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v194 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v127 v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = v169.l0
            let v196 : bool = v195 = ""
            let v211 : string =
                if v196 then
                    v127
                else
                    let v197 : bool = v127 = ""
                    if v197 then
                        let v198 : string = v169.l0
                        v198
                    else
                        let v199 : string = v169.l0
                        let v202 : string = "\n"
                        let v203 : string = v199 + v202 
                        let v207 : string = v203 + v127 
                        v207
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v211 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v224 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v224 
            #endif
#if FABLE_COMPILER_PYTHON
            let v228 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v228 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v232 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
#else
            let v236 : Ref<Str> = v211 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v236 
            #endif
            let v239 : Ref<Str> = _run_target_args'_v216 
            let v248 : string = $"$0.chars()"
            let v249 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v239 v248 
            let v250 : string = "$0"
            let v251 : _ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.collect::<Vec<_>>()"
            let v253 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v255 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v257 : bool = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : string = "x"
            let v259 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "String::from_iter($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "true; $0 }).collect::<Vec<_>>()"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : string = "_vec_map"
            let v265 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : string = "$0.len()"
            let v267 : unativeint = Fable.Core.RustInterop.emitRustExpr v265 v266 
            let v273 : int32 = v267 |> int32 
            let v283 : string = ""
            let v284 : bool = v127 <> v283 
            let v288 : bool =
                if v284 then
                    let v287 : bool = v273 <= 1
                    v287
                else
                    false
            if v288 then
                v169.l0 <- v211
                ()
            else
                v169.l0 <- v283
                let v289 : string = "true; $0.into_iter().for_each(|x| { //"
                let v290 : bool = Fable.Core.RustInterop.emitRustExpr v265 v289 
                let v291 : string = "x"
                let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v291 
                let v293 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = $"true"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                let v297 : string = "true; }); //"
                let v298 : bool = Fable.Core.RustInterop.emitRustExpr () v297 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v191 v127
            #endif
#if FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v191 v127
            #endif
#else
            v191 v127
            #endif
            // run_target_args' is_unit
            let v299 : (string -> unit) = v167.l0
            v299 v127
            US6_0(v166, v167, v168, v169, v170, v171)
    
    ()
and method290 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method13()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v3, v7)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v25 : string = "subcommand"
    let v26 : string = $"{v25}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v26)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v44 : string = " = "
    let v45 : string = $"{v44}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v3, v45)
    let v55 : unit = (fun () -> v54 (); v53) ()
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v79 : string = $"%A{v0}"
    let _run_target_args'_v65 = v79 
    #endif
#if FABLE_COMPILER_PYTHON
    let v83 : string = $"%A{v0}"
    let _run_target_args'_v65 = v83 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v0}"
    let _run_target_args'_v65 = v87 
    #endif
#else
    let v91 : string = $"%A{v0}"
    let _run_target_args'_v65 = v91 
    #endif
    let v94 : string = _run_target_args'_v65 
    let v104 : string = $"{v94}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v3, v104)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v122 : string = "; "
    let v123 : string = $"{v122}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v3, v123)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v141 : string = "arg_matches"
    let v142 : string = $"{v141}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v3, v142)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v159 : string = $"{v44}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v3, v159)
    let v169 : unit = (fun () -> v168 (); v167) ()
    (* run_target_args'
    let v179 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v180 : string = "format!(\"{:#?}\", $0)"
    let v181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v180 
    let v182 : string = "fable_library_rust::String_::fromString($0)"
    let v183 : string = Fable.Core.RustInterop.emitRustExpr v181 v182 
    let _run_target_args'_v179 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "format!(\"{:#?}\", $0)"
    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v184 
    let v186 : string = "fable_library_rust::String_::fromString($0)"
    let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let _run_target_args'_v179 = v187 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v188 : string = "format!(\"{:#?}\", $0)"
    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v188 
    let v190 : string = "fable_library_rust::String_::fromString($0)"
    let v191 : string = Fable.Core.RustInterop.emitRustExpr v189 v190 
    let _run_target_args'_v179 = v191 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v193 : string = $"%A{v1}"
    let _run_target_args'_v179 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = $"%A{v1}"
    let _run_target_args'_v179 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v201 : string = $"%A{v1}"
    let _run_target_args'_v179 = v201 
    #endif
#else
    let v205 : string = $"%A{v1}"
    let _run_target_args'_v179 = v205 
    #endif
    let v208 : string = _run_target_args'_v179 
    let v218 : string = $"{v208}"
    let v226 : unit = ()
    let v227 : (unit -> unit) = closure7(v3, v218)
    let v228 : unit = (fun () -> v227 (); v226) ()
    let v236 : string = " }"
    let v237 : string = $"{v236}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v3, v237)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v253 : string = v3.l0
    v253
and method289 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method290(v8, v9)
    let v11 : int64 = v0.l0
    let v14 : string = " "
    let v15 : string = v6 + v14 
    let v19 : string = v15 + v7 
    let v24 : string = " #"
    let v25 : string = v19 + v24 
    let v29 : (int64 -> string) = _.ToString()
    let v30 : string = v29 v11
    let v34 : string = v25 + v30 
    let v38 : string = v34 + v14 
    let v43 : string = "spiral.run / invalid subcommand"
    let v44 : string = v38 + v43 
    let v49 : string = " / "
    let v50 : string = v44 + v49 
    let v54 : string = v50 + v10 
    method17(v54)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure2()
    let v18 : unit = (fun () -> v17 (); v16) ()
    let struct (v41 : Mut0, v42 : Mut1, v43 : Mut2, v44 : Mut3, v45 : Mut4, v46 : int64 option) = TraceState.trace_state.Value
    let v59 : US0 = v45.l0
    let v60 : bool = v43.l0
    let v61 : bool = v60 = false
    let v64 : bool =
        if v61 then
            false
        else
            let v62 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v59
            let v63 : bool = 1 >= v62
            v63
    let v65 : bool = v64 = false
    let v299 : US6 =
        if v65 then
            US6_1
        else
            let v81 : unit = ()
            let v82 : unit = (fun () -> v17 (); v81) ()
            let struct (v105 : Mut0, v106 : Mut1, v107 : Mut2, v108 : Mut3, v109 : Mut4, v110 : int64 option) = TraceState.trace_state.Value
            let v123 : string = method7(v105, v106, v107, v108, v109, v110)
            let v124 : string = method11()
            let v125 : string = method289(v105, v106, v107, v108, v109, v110, v123, v124, v1, v0)
            let v140 : unit = ()
            let v141 : unit = (fun () -> v17 (); v140) ()
            let struct (v164 : Mut0, v165 : Mut1, v166 : Mut2, v167 : Mut3, v168 : Mut4, v169 : int64 option) = TraceState.trace_state.Value
            let v184 : unit = ()
            let v185 : (unit -> unit) = closure8(v164)
            let v186 : unit = (fun () -> v185 (); v184) ()
            let v189 : (string -> unit) = closure9()
            (* run_target_args'
            let v190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v191 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v192 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v125 v192 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v193 : string = v167.l0
            let v194 : bool = v193 = ""
            let v209 : string =
                if v194 then
                    v125
                else
                    let v195 : bool = v125 = ""
                    if v195 then
                        let v196 : string = v167.l0
                        v196
                    else
                        let v197 : string = v167.l0
                        let v200 : string = "\n"
                        let v201 : string = v197 + v200 
                        let v205 : string = v201 + v125 
                        v205
            (* run_target_args'
            let v214 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _run_target_args'_v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _run_target_args'_v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _run_target_args'_v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v230 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v230 
            #endif
#else
            let v234 : Ref<Str> = v209 |> unbox<Ref<Str>>
            let _run_target_args'_v214 = v234 
            #endif
            let v237 : Ref<Str> = _run_target_args'_v214 
            let v246 : string = $"$0.chars()"
            let v247 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v237 v246 
            let v248 : string = "$0"
            let v249 : _ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "$0.collect::<Vec<_>>()"
            let v251 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
            let v253 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr v253 v254 
            let v256 : string = "x"
            let v257 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "String::from_iter($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "true; $0 }).collect::<Vec<_>>()"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr v259 v260 
            let v262 : string = "_vec_map"
            let v263 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0.len()"
            let v265 : unativeint = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v271 : int32 = v265 |> int32 
            let v281 : string = ""
            let v282 : bool = v125 <> v281 
            let v286 : bool =
                if v282 then
                    let v285 : bool = v271 <= 1
                    v285
                else
                    false
            if v286 then
                v167.l0 <- v209
                ()
            else
                v167.l0 <- v281
                let v287 : string = "true; $0.into_iter().for_each(|x| { //"
                let v288 : bool = Fable.Core.RustInterop.emitRustExpr v263 v287 
                let v289 : string = "x"
                let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v289 
                let v291 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
                let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = $"true"
                let v294 : bool = Fable.Core.RustInterop.emitRustExpr () v293 
                let v295 : string = "true; }); //"
                let v296 : bool = Fable.Core.RustInterop.emitRustExpr () v295 
                ()
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            v189 v125
            #endif
#if FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            v189 v125
            #endif
#else
            v189 v125
            #endif
            // run_target_args' is_unit
            let v297 : (string -> unit) = v165.l0
            v297 v125
            US6_0(v164, v165, v166, v167, v168, v169)
    
    ()
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v28 v37 
    v38
and method291 () : (serde_json_Error -> string) =
    closure132()
and method18 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US7) = method19()
    let v14 : US7 option = v10 |> Option.map v13 
    let v35 : US7 = US7_1
    let v36 : US7 = v14 |> Option.defaultValue v35 
    let v21600 : (struct (string * string) []) =
        match v36 with
        | US7_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method20()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v82 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v83 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v82 
                let v86 : (std_string_String -> US8) = method21()
                let v87 : US8 option = v83 |> Option.map v86 
                let v107 : US8 = US8_1
                let v108 : US8 = v87 |> Option.defaultValue v107 
                let v115 : std_string_String =
                    match v108 with
                    | US8_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US8_0(v112) -> (* Some *)
                        v112
                let v116 : string = "fable_library_rust::String_::fromString($0)"
                let v117 : string = Fable.Core.RustInterop.emitRustExpr v115 v116 
                let v118 : string = method22()
                (* run_target_args'
                let v123 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v124 : string = "&*$0"
                let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                let _run_target_args'_v123 = v125 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v126 : string = "&*$0"
                let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v126 
                let _run_target_args'_v123 = v127 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v128 : string = "&*$0"
                let v129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v128 
                let _run_target_args'_v123 = v129 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v131 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v131 
                #endif
#if FABLE_COMPILER_PYTHON
                let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v135 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v139 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v139 
                #endif
#else
                let v143 : Ref<Str> = v118 |> unbox<Ref<Str>>
                let _run_target_args'_v123 = v143 
                #endif
                let v146 : Ref<Str> = _run_target_args'_v123 
                let v155 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v156 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v146) v155 
                let v159 : (std_string_String -> US8) = method21()
                let v160 : US8 option = v156 |> Option.map v159 
                let v180 : US8 = US8_1
                let v181 : US8 = v160 |> Option.defaultValue v180 
                let v242 : US9 =
                    match v181 with
                    | US8_1 -> (* None *)
                        US9_1
                    | US8_0(v185) -> (* Some *)
                        let v186 : string = "fable_library_rust::String_::fromString($0)"
                        let v187 : string = Fable.Core.RustInterop.emitRustExpr v185 v186 
                        
                        
                        
                        
                        let v190 : string = "JavaScript"
                        let v191 : (unit -> string) = v190.ToLower
                        let v192 : string = v191 ()
                        let v197 : string = "Erlang"
                        let v198 : (unit -> string) = v197.ToLower
                        let v199 : string = v198 ()
                        let v202 : bool = "Erlang" = v187
                        let v206 : US10 =
                            if v202 then
                                let v203 : US11 = US11_0
                                US10_0(v203)
                            else
                                US10_1
                        let v238 : US10 =
                            match v206 with
                            | US10_1 -> (* None *)
                                let v209 : bool = "JavaScript" = v187
                                let v213 : US10 =
                                    if v209 then
                                        let v210 : US11 = US11_1
                                        US10_0(v210)
                                    else
                                        US10_1
                                match v213 with
                                | US10_1 -> (* None *)
                                    let v216 : bool = v199 = v187
                                    let v220 : US10 =
                                        if v216 then
                                            let v217 : US11 = US11_0
                                            US10_0(v217)
                                        else
                                            US10_1
                                    match v220 with
                                    | US10_1 -> (* None *)
                                        let v223 : bool = v192 = v187
                                        let v227 : US10 =
                                            if v223 then
                                                let v224 : US11 = US11_1
                                                US10_0(v224)
                                            else
                                                US10_1
                                        match v227 with
                                        | US10_1 -> (* None *)
                                            US10_1
                                        | US10_0(v228) -> (* Some *)
                                            US10_0(v228)
                                    | US10_0(v221) -> (* Some *)
                                        US10_0(v221)
                                | US10_0(v214) -> (* Some *)
                                    US10_0(v214)
                            | US10_0(v207) -> (* Some *)
                                US10_0(v207)
                        US9_0(v238)
                let v249 : US10 =
                    match v242 with
                    | US9_0(v243) -> (* Some *)
                        match v243 with
                        | US10_0(v244) -> (* Some *)
                            US10_0(v244)
                        | _ ->
                            US10_1
                    | _ ->
                        US10_1
                let v253 : US11 =
                    match v249 with
                    | US10_1 -> (* None *)
                        US11_0
                    | US10_0(v250) -> (* Some *)
                        v250
                let v254 : string = method23()
                (* run_target_args'
                let v259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v260 : string = "&*$0"
                let v261 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v259 = v261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v262 : string = "&*$0"
                let v263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v262 
                let _run_target_args'_v259 = v263 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v264 : string = "&*$0"
                let v265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v254 v264 
                let _run_target_args'_v259 = v265 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v267 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v267 
                #endif
#if FABLE_COMPILER_PYTHON
                let v271 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v271 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v275 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v275 
                #endif
#else
                let v279 : Ref<Str> = v254 |> unbox<Ref<Str>>
                let _run_target_args'_v259 = v279 
                #endif
                let v282 : Ref<Str> = _run_target_args'_v259 
                let v291 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v292 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v282) v291 
                let v295 : (Vec<std_string_String> -> US12) = method24()
                let v296 : US12 option = v292 |> Option.map v295 
                let v316 : US12 = US12_1
                let v317 : US12 = v296 |> Option.defaultValue v316 
                let v321 : (std_string_String []) = [||]
                let v322 : string = "$0.to_vec()"
                let v323 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v321 v322 
                let v326 : Vec<std_string_String> =
                    match v317 with
                    | US12_1 -> (* None *)
                        v323
                    | US12_0(v324) -> (* Some *)
                        v324
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v336 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v337 : string = "std::fs::read(&*$0)"
                let v338 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v117 v337 
                (* run_target_args'
                let v340 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v341 : string = "$0.unwrap()"
                let v342 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v341 
                let _run_target_args'_v340 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v343 : string = "$0.unwrap()"
                let v344 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v343 
                let _run_target_args'_v340 = v344 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v345 : string = "$0.unwrap()"
                let v346 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v338 v345 
                let _run_target_args'_v340 = v346 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v347 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v347 
                #endif
#if FABLE_COMPILER_PYTHON
                let v348 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v348 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v349 
                #endif
#else
                let v350 : Vec<uint8> = match v338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v340 = v350 
                #endif
                let v351 : Vec<uint8> = _run_target_args'_v340 
                let _run_target_args'_v336 = v351 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v355 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v359 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v359 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v363 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v363 
                #endif
#if FABLE_COMPILER_PYTHON
                let v367 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v367 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v371 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v336 = v371 
                #endif
#else
                let v374 : (uint8 []) = v117 |> System.IO.File.ReadAllBytes
                let v375 : string = "$0.to_vec()"
                let v376 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                let _run_target_args'_v336 = v376 
                #endif
                let v377 : Vec<uint8> = _run_target_args'_v336 
                let v386 : Vec<uint8> = method25(v377)
                let v387 : string = "std::string::String::from_utf8($0)"
                let v388 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v386 v387 
                (* run_target_args'
                let v390 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v391 : string = "$0.unwrap()"
                let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v391 
                let _run_target_args'_v390 = v392 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v393 : string = "$0.unwrap()"
                let v394 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v393 
                let _run_target_args'_v390 = v394 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v395 : string = "$0.unwrap()"
                let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr v388 v395 
                let _run_target_args'_v390 = v396 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v397 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v397 
                #endif
#if FABLE_COMPILER_PYTHON
                let v398 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v398 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v399 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v399 
                #endif
#else
                let v400 : std_string_String = match v388 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v390 = v400 
                #endif
                let v401 : std_string_String = _run_target_args'_v390 
                let v404 : string = "fable_library_rust::String_::fromString($0)"
                let v405 : string = Fable.Core.RustInterop.emitRustExpr v401 v404 
                let _run_target_args'_v331 = v405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v331 = v407 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v331 = v411 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v415 : string = null |> unbox<string>
                let _run_target_args'_v331 = v415 
                #endif
#if FABLE_COMPILER_PYTHON
                let v419 : string = null |> unbox<string>
                let _run_target_args'_v331 = v419 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v423 : string = null |> unbox<string>
                let _run_target_args'_v331 = v423 
                #endif
#else
                let v426 : string = v117 |> System.IO.File.ReadAllText
                let _run_target_args'_v331 = v426 
                #endif
                let v427 : string = _run_target_args'_v331 
                let v436 : string = "gleam"
                let v437 : string = method26(v436, v427)
                let v438 : string = method27(v437)
                let v439 : string = method32()
                let v440 : US5 = method33(v439)
                let v446 : US5 =
                    match v440 with
                    | US5_1 -> (* None *)
                        let v443 : string = __SOURCE_DIRECTORY__
                        method33(v443)
                    | US5_0(v441) -> (* Some *)
                        US5_0(v441)
                let v452 : US5 =
                    match v446 with
                    | US5_1 -> (* None *)
                        let v449 : string = "/workspaces"
                        method33(v449)
                    | US5_0(v447) -> (* Some *)
                        US5_0(v447)
                let v456 : string =
                    match v452 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v453) -> (* Some *)
                        v453
                let v457 : string = method53(v456)
                let v458 : bool = "deps" = v457
                let v469 : string =
                    if v458 then
                        let v459 : string option = method39(v456)
                        let v461 : string = v459 |> Option.get
                        let v464 : US5 = method33(v461)
                        match v464 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v465) -> (* Some *)
                            v465
                    else
                        v456
                let v470 : string = "polyglot"
                let v471 : string = method34(v469, v470)
                let v472 : string = method32()
                let v474 : (unit -> string) = v472.ToLower
                let v475 : string = v474 ()
                let v479 : (unit -> string) = v471.ToLower
                let v480 : string = v479 ()
                let v484 : bool = v475.StartsWith (v480, false, null)
                let v489 : US14 =
                    if v484 then
                        US14_1(v480)
                    else
                        US14_0(v480)
                let v501 : Result<string, string> =
                    match v489 with
                    | US14_1(v495) -> (* Error *)
                        let v497 : Result<string, string> = Error v495 
                        v497
                    | US14_0(v490) -> (* Ok *)
                        let v492 : Result<string, string> = Ok v490 
                        v492
                let v502 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v503 : bool = Fable.Core.RustInterop.emitRustExpr v501 v502 
                let v504 : string = "x"
                let v505 : string = Fable.Core.RustInterop.emitRustExpr () v504 
                let v506 : string = "true; $0 })"
                let v507 : bool = Fable.Core.RustInterop.emitRustExpr v505 v506 
                let v508 : string = "_result_unwrap_or_else"
                let v509 : string = Fable.Core.RustInterop.emitRustExpr () v508 
                let v510 : string = method67(v509)
                let v511 : string option = method39(v117)
                let v514 : string = ""
                let v515 : string = v511 |> Option.defaultValue v514 
                let v518 : string = method67(v515)
                let v519 : string = ".."
                let v520 : string = method34(v518, v519)
                let v521 : string = method67(v520)
                let v522 : string = "gleam.toml"
                let v523 : string = method34(v521, v522)
                let v524 : string = "gleam_stdlib=\"0.57.0\""
                let v525 : string = "gleam_time=\">=1.0.0 and <2.0.0\""
                let v526 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v527 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v528 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v529 : (string []) = [|v524; v525; v526; v527; v528|]
                let v530 : string = "$0.to_vec()"
                let v531 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v529 v530 
                let v532 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v533 : bool = Fable.Core.RustInterop.emitRustExpr v531 v532 
                let v534 : string = "x"
                let v535 : string = Fable.Core.RustInterop.emitRustExpr () v534 
                (* run_target_args'
                let v540 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v541 : string = "&*$0"
                let v542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v541 
                let _run_target_args'_v540 = v542 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v543 : string = "&*$0"
                let v544 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v543 
                let _run_target_args'_v540 = v544 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v545 : string = "&*$0"
                let v546 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v535 v545 
                let _run_target_args'_v540 = v546 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v548 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v548 
                #endif
#if FABLE_COMPILER_PYTHON
                let v552 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v552 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v556 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v556 
                #endif
#else
                let v560 : Ref<Str> = v535 |> unbox<Ref<Str>>
                let _run_target_args'_v540 = v560 
                #endif
                let v563 : Ref<Str> = _run_target_args'_v540 
                (* run_target_args'
                let v576 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v577 : string = "String::from($0)"
                let v578 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v577 
                let _run_target_args'_v576 = v578 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v579 : string = "String::from($0)"
                let v580 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v579 
                let _run_target_args'_v576 = v580 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v581 : string = "String::from($0)"
                let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr v563 v581 
                let _run_target_args'_v576 = v582 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v584 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v584 
                #endif
#if FABLE_COMPILER_PYTHON
                let v588 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v588 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v592 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v592 
                #endif
#else
                let v596 : std_string_String = v563 |> unbox<std_string_String>
                let _run_target_args'_v576 = v596 
                #endif
                let v599 : std_string_String = _run_target_args'_v576 
                let v608 : string = "true; $0 }).collect::<Vec<_>>()"
                let v609 : bool = Fable.Core.RustInterop.emitRustExpr v599 v608 
                let v610 : string = "_vec_map"
                let v611 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v610 
                let v612 : Vec<std_string_String> = method71(v326)
                let v613 : Vec<std_string_String> = method72(v611)
                let v614 : string = "true; let mut v613 = v613"
                let v615 : bool = Fable.Core.RustInterop.emitRustExpr () v614 
                let v616 : string = "true; v613.extend(v612)"
                let v617 : bool = Fable.Core.RustInterop.emitRustExpr () v616 
                let v618 : string = "v613"
                let v619 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v618 
                let v620 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v621 : bool = Fable.Core.RustInterop.emitRustExpr v619 v620 
                let v622 : string = "x"
                let v623 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v622 
                let v624 : string = "fable_library_rust::String_::fromString($0)"
                let v625 : string = Fable.Core.RustInterop.emitRustExpr v623 v624 
                let v628 : string = "="
                let v629 : bool = v625.Contains v628 
                let v644 : string =
                    if v629 then
                        v625
                    else
                        let v634 : string = "]"
                        let v635 : bool = v625.EndsWith (v634, false, null)
                        if v635 then
                            let v638 : string = $"={{version='*',features=["
                            let v639 : string = "["
                            let v640 : string = v625.Replace (v639, v638)
                            let v641 : string = $"{v640}}}"
                            v641
                        else
                            let v642 : string = $"{v625}='*'"
                            v642
                let v645 : string = "true; $0 }).collect::<Vec<_>>()"
                let v646 : bool = Fable.Core.RustInterop.emitRustExpr v644 v645 
                let v647 : string = "_vec_map"
                let v648 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v647 
                let v649 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v650 : (string []) = Fable.Core.RustInterop.emitRustExpr v648 v649 
                let v655 : unit = ()
                let _let'_v655 =
                    seq {
                        for i = 0 to v650.Length - 1 do yield v650.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v658 : string seq = _let'_v655 
                let v666 : string = method73()
                let v667 : (string -> (string seq -> string)) = String.concat
                let v668 : (string seq -> string) = v667 v666
                let v669 : string = v668 v658
                
                
                let v673 : bool =
                    match v253 with
                    | US11_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v677 : US5 =
                    if v673 then
                        let v674 : string = "Erlang"
                        US5_0(v674)
                    else
                        US5_1
                let v691 : US5 =
                    match v677 with
                    | US5_1 -> (* None *)
                        let v680 : bool =
                            match v253 with
                            | US11_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v684 : US5 =
                            if v680 then
                                let v681 : string = "JavaScript"
                                US5_0(v681)
                            else
                                US5_1
                        match v684 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v685) -> (* Some *)
                            US5_0(v685)
                    | US5_0(v678) -> (* Some *)
                        US5_0(v678)
                let v695 : string =
                    match v691 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v692) -> (* Some *)
                        v692
                let v697 : (unit -> string) = v695.ToLower
                let v698 : string = v697 ()
                let v703 : string = "_real"
                let v704 : bool = v117.Contains v703 
                let v709 : string =
                    if v704 then
                        let v707 : string = "main_real"
                        v707
                    else
                        let v708 : string = "main"
                        v708
                let v710 : string = $"name = \"{v709}\""
                let v711 : string = $"target = \"{v698}\""
                let v714 : string = "\n"
                let v715 : string = v710 + v714 
                let v719 : string = v715 + v711 
                let v722 : string = $""
                let v724 : string = v719 + v714 
                let v728 : string = v724 + v722 
                let v731 : string = $"[dependencies]"
                let v733 : string = v728 + v714 
                let v737 : string = v733 + v731 
                let v740 : string = $"{v669}"
                let v742 : string = v737 + v714 
                let v746 : string = v742 + v740 
                method74(v523, v746)
                let v750 : System.Threading.CancellationToken option = None
                let v753 : (struct (string * string) []) = [||]
                let v755 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v759 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v763 : string option = None
                let v766 : string = $"gleam check"
                let v768 : string option = Some v521 
                let v771 : bool = true
                let v772 : bool = true
                let struct (v773 : int32, v774 : string) = method99(v766, v750, v753, v755, v759, v771, v768, v772)
                let v776 : bool = v773 <> 0 
                let struct (v4038 : US5, v4039 : US5, v4040 : US5, v4041 : US5) =
                    if v776 then
                        let v1086 : unit = ()
                        let v1087 : (unit -> unit) = closure68(v117, v774, v773)
                        let v1088 : unit = (fun () -> v1087 (); v1086) ()
                        let v1399 : US5 = US5_0(v436)
                        let v1400 : US5 = US5_1
                        let v1401 : US5 = US5_1
                        let v1402 : US5 = US5_1
                        struct (v1399, v1400, v1401, v1402)
                    else
                        let v1403 : bool =
                            match v253 with
                            | US11_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v1406 : string =
                            if v1403 then
                                let v1404 : string = $"gleam run --no-print-progress \"{v117}\""
                                v1404
                            else
                                let v1405 : string = $"gleam build --no-print-progress"
                                v1405
                        let v1407 : string = "TRACE_LEVEL"
                        let v1408 : string = "GLEAM_LOG"
                        let v1409 : string = "GLEAM_LOG_NOCOLOUR"
                        let v1410 : (struct (string * string) []) = [|struct (v1407, v514); struct (v1408, v514); struct (v1409, v514)|]
                        let v1412 : System.Threading.CancellationToken option = None
                        let v1415 : (struct (string * string) []) = [||]
                        let v1417 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1421 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1425 : string option = None
                        let v1429 : string option = Some v521 
                        let v1432 : bool = true
                        let v1433 : bool = false
                        let struct (v1434 : int32, v1435 : string) = method99(v1406, v1412, v1410, v1417, v1421, v1432, v1429, v1433)
                        let v1436 : int32 = v1410.Length
                        let v1437 : (string []) = Array.zeroCreate<string> (v1436)
                        let v1438 : Mut5 = {l0 = 0} : Mut5
                        while method30(v1436, v1438) do
                            let v1440 : int32 = v1438.l0
                            let struct (v1441 : string, v1442 : string) = v1410.[int v1440]
                            let v1443 : string = $"$env:{v1441}=''{v1442}''"
                            v1437.[int v1440] <- v1443
                            let v1444 : int32 = v1440 + 1
                            v1438.l0 <- v1444
                            ()
                        let v1446 : string seq = v1437 |> Seq.ofArray
                        let v1451 : (string -> (string seq -> string)) = String.concat
                        let v1452 : string = ";"
                        let v1453 : (string seq -> string) = v1451 v1452
                        let v1454 : string = v1453 v1446
                        let v1457 : string = $"pwsh -c '{v1454}; {v1406}'"
                        let v1459 : bool = v1434 <> 0 
                        let struct (v4034 : US5, v4035 : US5, v4036 : US5, v4037 : US5) =
                            if v1459 then
                                let v1769 : unit = ()
                                let v1770 : (unit -> unit) = closure69(v117, v1435, v1434, v1457)
                                let v1771 : unit = (fun () -> v1770 (); v1769) ()
                                let v2082 : US5 = US5_0(v436)
                                let v2083 : US5 = US5_1
                                let v2084 : US5 = US5_1
                                let v2085 : US5 = US5_1
                                struct (v2082, v2083, v2084, v2085)
                            else
                                let v2086 : bool =
                                    match v253 with
                                    | US11_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v3934 : string =
                                    if v2086 then
                                        v1435
                                    else
                                        let v2087 : string = $"{v521}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v2092 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2097 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2098 : string = "std::fs::read(&*$0)"
                                        let v2099 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2087 v2098 
                                        (* run_target_args'
                                        let v2101 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2102 : string = "$0.unwrap()"
                                        let v2103 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2099 v2102 
                                        let _run_target_args'_v2101 = v2103 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2104 : string = "$0.unwrap()"
                                        let v2105 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2099 v2104 
                                        let _run_target_args'_v2101 = v2105 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2106 : string = "$0.unwrap()"
                                        let v2107 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2099 v2106 
                                        let _run_target_args'_v2101 = v2107 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2108 : Vec<uint8> = match v2099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2101 = v2108 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2109 : Vec<uint8> = match v2099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2101 = v2109 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2110 : Vec<uint8> = match v2099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2101 = v2110 
                                        #endif
#else
                                        let v2111 : Vec<uint8> = match v2099 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2101 = v2111 
                                        #endif
                                        let v2112 : Vec<uint8> = _run_target_args'_v2101 
                                        let _run_target_args'_v2097 = v2112 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2116 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2097 = v2116 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2120 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2097 = v2120 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2124 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2097 = v2124 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2128 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2097 = v2128 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2132 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2097 = v2132 
                                        #endif
#else
                                        let v2135 : (uint8 []) = v2087 |> System.IO.File.ReadAllBytes
                                        let v2136 : string = "$0.to_vec()"
                                        let v2137 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2135 v2136 
                                        let _run_target_args'_v2097 = v2137 
                                        #endif
                                        let v2138 : Vec<uint8> = _run_target_args'_v2097 
                                        let v2147 : Vec<uint8> = method25(v2138)
                                        let v2148 : string = "std::string::String::from_utf8($0)"
                                        let v2149 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2147 v2148 
                                        (* run_target_args'
                                        let v2151 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2152 : string = "$0.unwrap()"
                                        let v2153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2149 v2152 
                                        let _run_target_args'_v2151 = v2153 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2154 : string = "$0.unwrap()"
                                        let v2155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2149 v2154 
                                        let _run_target_args'_v2151 = v2155 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2156 : string = "$0.unwrap()"
                                        let v2157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2149 v2156 
                                        let _run_target_args'_v2151 = v2157 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2158 : std_string_String = match v2149 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2151 = v2158 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2159 : std_string_String = match v2149 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2151 = v2159 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2160 : std_string_String = match v2149 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2151 = v2160 
                                        #endif
#else
                                        let v2161 : std_string_String = match v2149 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2151 = v2161 
                                        #endif
                                        let v2162 : std_string_String = _run_target_args'_v2151 
                                        let v2165 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2166 : string = Fable.Core.RustInterop.emitRustExpr v2162 v2165 
                                        let _run_target_args'_v2092 = v2166 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2168 : string = null |> unbox<string>
                                        let _run_target_args'_v2092 = v2168 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2172 : string = null |> unbox<string>
                                        let _run_target_args'_v2092 = v2172 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2176 : string = null |> unbox<string>
                                        let _run_target_args'_v2092 = v2176 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2180 : string = null |> unbox<string>
                                        let _run_target_args'_v2092 = v2180 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2184 : string = null |> unbox<string>
                                        let _run_target_args'_v2092 = v2184 
                                        #endif
#else
                                        let v2187 : string = v2087 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2092 = v2187 
                                        #endif
                                        let v2188 : string = _run_target_args'_v2092 
                                        let v2197 : string = $"#app_"
                                        let v2198 : string = $"#app_{v438}"
                                        let v2199 : string = v2188.Replace (v2197, v2198)
                                        let v2202 : string = "main()"
                                        let v2203 : bool = v2199.EndsWith (v2202, false, null)
                                        let v2206 : bool = v2203 = false
                                        if v2206 then
                                            let v2207 : string = $"{v2199}
main()"
                                            method74(v2087, v2207)
                                        let v2209 : System.Threading.CancellationToken option = None
                                        let v2212 : (struct (string * string) []) = [||]
                                        let v2214 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2218 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2222 : string option = None
                                        let v2225 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v518} {v2087}"
                                        let v2226 : string = "PATH"
                                        let v2227 : string = method3(v2226)
                                        let v2228 : bool = v2227 = ""
                                        let v2266 : US5 =
                                            if v2228 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v2231 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2232 : string = "cfg!(windows)"
                                                let v2233 : bool = Fable.Core.RustInterop.emitRustExpr () v2232 
                                                let _run_target_args'_v2231 = v2233 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2234 : string = "cfg!(windows)"
                                                let v2235 : bool = Fable.Core.RustInterop.emitRustExpr () v2234 
                                                let _run_target_args'_v2231 = v2235 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2236 : string = "cfg!(windows)"
                                                let v2237 : bool = Fable.Core.RustInterop.emitRustExpr () v2236 
                                                let _run_target_args'_v2231 = v2237 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2238 : US3 = US3_0
                                                let v2239 : US4 = US4_5(v2238)
                                                let v2240 : string = $"platform.is_windows / target: {v2239}"
                                                let v2241 : bool = failwith<bool> v2240
                                                let _run_target_args'_v2231 = v2241 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2242 : US3 = US3_0
                                                let v2243 : US4 = US4_6(v2242)
                                                let v2244 : string = $"platform.is_windows / target: {v2243}"
                                                let v2245 : bool = failwith<bool> v2244
                                                let _run_target_args'_v2231 = v2245 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v2246 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2247 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2248 : bool = v2247 v2246
                                                let _run_target_args'_v2231 = v2248 
                                                #endif
#else
                                                let v2249 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v2250 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v2251 : bool = v2250 v2249
                                                let _run_target_args'_v2231 = v2251 
                                                #endif
                                                let v2252 : bool = _run_target_args'_v2231 
                                                let v2262 : string =
                                                    if v2252 then
                                                        v1452
                                                    else
                                                        let v2261 : string = ":"
                                                        v2261
                                                let v2263 : string = "~/.bun/bin"
                                                let v2264 : string = $"{v2263}{v2262}{v2227}"
                                                US5_0(v2264)
                                        let v2271 : (struct (string * string) []) =
                                            match v2266 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v2267) -> (* Some *)
                                                [|struct (v2226, v2267)|]
                                        let v2273 : string option = Some v521 
                                        let v2276 : bool = true
                                        let v2277 : bool = true
                                        let struct (v2278 : int32, v2279 : string) = method99(v2225, v2209, v2271, v2214, v2218, v2276, v2273, v2277)
                                        let v2281 : bool = v2278 <> 0 
                                        if v2281 then
                                            let v2591 : unit = ()
                                            let v2592 : (unit -> unit) = closure70(v117, v2279, v2278)
                                            let v2593 : unit = (fun () -> v2592 (); v2591) ()
                                            v514
                                        else
                                            let v2904 : string = $"<!DOCTYPE html>"
                                            let v2905 : string = $"<html lang=\"en\">"
                                            let v2907 : string = v2904 + v714 
                                            let v2911 : string = v2907 + v2905 
                                            let v2914 : string = $"  <head>"
                                            let v2916 : string = v2911 + v714 
                                            let v2920 : string = v2916 + v2914 
                                            let v2923 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v2925 : string = v2920 + v714 
                                            let v2929 : string = v2925 + v2923 
                                            let v2932 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v2934 : string = v2929 + v714 
                                            let v2938 : string = v2934 + v2932 
                                            let v2941 : string = $"    <link"
                                            let v2943 : string = v2938 + v714 
                                            let v2947 : string = v2943 + v2941 
                                            let v2950 : string = $"      data-trunk"
                                            let v2952 : string = v2947 + v714 
                                            let v2956 : string = v2952 + v2950 
                                            let v2959 : string = $"      rel=\"inline\""
                                            let v2961 : string = v2956 + v714 
                                            let v2965 : string = v2961 + v2959 
                                            let v2968 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v2970 : string = v2965 + v714 
                                            let v2974 : string = v2970 + v2968 
                                            let v2977 : string = $"    />"
                                            let v2979 : string = v2974 + v714 
                                            let v2983 : string = v2979 + v2977 
                                            let v2986 : string = $"    <link"
                                            let v2988 : string = v2983 + v714 
                                            let v2992 : string = v2988 + v2986 
                                            let v2995 : string = $"      data-trunk"
                                            let v2997 : string = v2992 + v714 
                                            let v3001 : string = v2997 + v2995 
                                            let v3004 : string = $"      rel=\"inline\""
                                            let v3006 : string = v3001 + v714 
                                            let v3010 : string = v3006 + v3004 
                                            let v3013 : string = $"      type=\"module\""
                                            let v3015 : string = v3010 + v714 
                                            let v3019 : string = v3015 + v3013 
                                            let v3022 : string = $"      href=\"main.js\""
                                            let v3024 : string = v3019 + v714 
                                            let v3028 : string = v3024 + v3022 
                                            let v3031 : string = $"    />"
                                            let v3033 : string = v3028 + v714 
                                            let v3037 : string = v3033 + v3031 
                                            let v3040 : string = $"  </head>"
                                            let v3042 : string = v3037 + v714 
                                            let v3046 : string = v3042 + v3040 
                                            let v3049 : string = $"  <body>"
                                            let v3051 : string = v3046 + v714 
                                            let v3055 : string = v3051 + v3049 
                                            let v3058 : string = $"    <div id=\"app_{v438}\"></div>"
                                            let v3060 : string = v3055 + v714 
                                            let v3064 : string = v3060 + v3058 
                                            let v3067 : string = $"  </body>"
                                            let v3069 : string = v3064 + v714 
                                            let v3073 : string = v3069 + v3067 
                                            let v3076 : string = $"</html>"
                                            let v3078 : string = v3073 + v714 
                                            let v3082 : string = v3078 + v3076 
                                            let v3085 : string = $"{v518}/index.html"
                                            method74(v3085, v3082)
                                            let v3086 : string = $"{v518}/spiral_{v438}.rs"
                                            method74(v3086, v514)
                                            let v3087 : string = $"[package]"
                                            let v3088 : string = $"name = \"spiral_{v438}\""
                                            let v3090 : string = v3087 + v714 
                                            let v3094 : string = v3090 + v3088 
                                            let v3097 : string = $""
                                            let v3099 : string = v3094 + v714 
                                            let v3103 : string = v3099 + v3097 
                                            let v3106 : string = $"[workspace]"
                                            let v3108 : string = v3103 + v714 
                                            let v3112 : string = v3108 + v3106 
                                            let v3115 : string = $""
                                            let v3117 : string = v3112 + v714 
                                            let v3121 : string = v3117 + v3115 
                                            let v3124 : string = $"[lib]"
                                            let v3126 : string = v3121 + v714 
                                            let v3130 : string = v3126 + v3124 
                                            let v3133 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v3135 : string = v3130 + v714 
                                            let v3139 : string = v3135 + v3133 
                                            let v3142 : string = $"path = \"spiral_{v438}.rs\""
                                            let v3144 : string = v3139 + v714 
                                            let v3148 : string = v3144 + v3142 
                                            let v3151 : string = $""
                                            let v3153 : string = v3148 + v714 
                                            let v3157 : string = v3153 + v3151 
                                            let v3160 : string = $"[dependencies]"
                                            let v3162 : string = v3157 + v714 
                                            let v3166 : string = v3162 + v3160 
                                            let v3169 : string = $"{v518}/Cargo.toml"
                                            method74(v3169, v3166)
                                            let v3171 : System.Threading.CancellationToken option = None
                                            let v3174 : (struct (string * string) []) = [||]
                                            let v3176 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v3180 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v3184 : string option = None
                                            let v3187 : string = $"trunk build --release --minify --dist={v518} --public-url=./ --no-sri"
                                            let v3188 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v3189 : string = "0.2.93"
                                            let v3190 : (struct (string * string) []) = [|struct (v3188, v3189)|]
                                            let v3192 : string option = Some v518 
                                            let v3195 : bool = true
                                            let v3196 : bool = true
                                            let struct (v3197 : int32, v3198 : string) = method99(v3187, v3171, v3190, v3176, v3180, v3195, v3192, v3196)
                                            let v3200 : bool = v3197 <> 0 
                                            if v3200 then
                                                let v3510 : unit = ()
                                                let v3511 : (unit -> unit) = closure71(v117, v3198, v3197)
                                                let v3512 : unit = (fun () -> v3511 (); v3510) ()
                                                v514
                                            else
                                                (* run_target_args'
                                                let v3827 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3832 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3833 : string = "std::fs::read(&*$0)"
                                                let v3834 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3085 v3833 
                                                (* run_target_args'
                                                let v3836 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3837 : string = "$0.unwrap()"
                                                let v3838 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3834 v3837 
                                                let _run_target_args'_v3836 = v3838 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3839 : string = "$0.unwrap()"
                                                let v3840 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3834 v3839 
                                                let _run_target_args'_v3836 = v3840 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3841 : string = "$0.unwrap()"
                                                let v3842 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3834 v3841 
                                                let _run_target_args'_v3836 = v3842 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3843 : Vec<uint8> = match v3834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3836 = v3843 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3844 : Vec<uint8> = match v3834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3836 = v3844 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3845 : Vec<uint8> = match v3834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3836 = v3845 
                                                #endif
#else
                                                let v3846 : Vec<uint8> = match v3834 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3836 = v3846 
                                                #endif
                                                let v3847 : Vec<uint8> = _run_target_args'_v3836 
                                                let _run_target_args'_v3832 = v3847 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3851 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3832 = v3851 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3855 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3832 = v3855 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3859 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3832 = v3859 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3863 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3832 = v3863 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3867 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3832 = v3867 
                                                #endif
#else
                                                let v3870 : (uint8 []) = v3085 |> System.IO.File.ReadAllBytes
                                                let v3871 : string = "$0.to_vec()"
                                                let v3872 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3870 v3871 
                                                let _run_target_args'_v3832 = v3872 
                                                #endif
                                                let v3873 : Vec<uint8> = _run_target_args'_v3832 
                                                let v3882 : Vec<uint8> = method25(v3873)
                                                let v3883 : string = "std::string::String::from_utf8($0)"
                                                let v3884 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3882 v3883 
                                                (* run_target_args'
                                                let v3886 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3887 : string = "$0.unwrap()"
                                                let v3888 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3884 v3887 
                                                let _run_target_args'_v3886 = v3888 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3889 : string = "$0.unwrap()"
                                                let v3890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3884 v3889 
                                                let _run_target_args'_v3886 = v3890 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3891 : string = "$0.unwrap()"
                                                let v3892 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3884 v3891 
                                                let _run_target_args'_v3886 = v3892 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3893 : std_string_String = match v3884 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3886 = v3893 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3894 : std_string_String = match v3884 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3886 = v3894 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3895 : std_string_String = match v3884 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3886 = v3895 
                                                #endif
#else
                                                let v3896 : std_string_String = match v3884 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3886 = v3896 
                                                #endif
                                                let v3897 : std_string_String = _run_target_args'_v3886 
                                                let v3900 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3901 : string = Fable.Core.RustInterop.emitRustExpr v3897 v3900 
                                                let _run_target_args'_v3827 = v3901 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3903 : string = null |> unbox<string>
                                                let _run_target_args'_v3827 = v3903 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3907 : string = null |> unbox<string>
                                                let _run_target_args'_v3827 = v3907 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3911 : string = null |> unbox<string>
                                                let _run_target_args'_v3827 = v3911 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3915 : string = null |> unbox<string>
                                                let _run_target_args'_v3827 = v3915 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3919 : string = null |> unbox<string>
                                                let _run_target_args'_v3827 = v3919 
                                                #endif
#else
                                                let v3922 : string = v3085 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3827 = v3922 
                                                #endif
                                                let v3923 : string = _run_target_args'_v3827 
                                                v3923
                                (* run_target_args'
                                let v3939 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3940 : string = "&*$0"
                                let v3941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3934 v3940 
                                let _run_target_args'_v3939 = v3941 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3942 : string = "&*$0"
                                let v3943 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3934 v3942 
                                let _run_target_args'_v3939 = v3943 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3944 : string = "&*$0"
                                let v3945 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3934 v3944 
                                let _run_target_args'_v3939 = v3945 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3947 : Ref<Str> = v3934 |> unbox<Ref<Str>>
                                let _run_target_args'_v3939 = v3947 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3951 : Ref<Str> = v3934 |> unbox<Ref<Str>>
                                let _run_target_args'_v3939 = v3951 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3955 : Ref<Str> = v3934 |> unbox<Ref<Str>>
                                let _run_target_args'_v3939 = v3955 
                                #endif
#else
                                let v3959 : Ref<Str> = v3934 |> unbox<Ref<Str>>
                                let _run_target_args'_v3939 = v3959 
                                #endif
                                let v3962 : Ref<Str> = _run_target_args'_v3939 
                                (* run_target_args'
                                let v3975 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v3976 : string = "String::from($0)"
                                let v3977 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3962 v3976 
                                let _run_target_args'_v3975 = v3977 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v3978 : string = "String::from($0)"
                                let v3979 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3962 v3978 
                                let _run_target_args'_v3975 = v3979 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v3980 : string = "String::from($0)"
                                let v3981 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3962 v3980 
                                let _run_target_args'_v3975 = v3981 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v3983 : std_string_String = v3962 |> unbox<std_string_String>
                                let _run_target_args'_v3975 = v3983 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v3987 : std_string_String = v3962 |> unbox<std_string_String>
                                let _run_target_args'_v3975 = v3987 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v3991 : std_string_String = v3962 |> unbox<std_string_String>
                                let _run_target_args'_v3975 = v3991 
                                #endif
#else
                                let v3995 : std_string_String = v3962 |> unbox<std_string_String>
                                let _run_target_args'_v3975 = v3995 
                                #endif
                                let v3998 : std_string_String = _run_target_args'_v3975 
                                let v4007 : (string -> US5) = closure72()
                                let v4008 : (unit -> string) = closure73(v3934)
                                let v4009 : (exn -> US5) = closure74(v117, v1457, v3998)
                                let v4012 : US5 = US5_1
                                let result = ref v4012
                                try
                                    result.Value <- v4008 () |> v4007 
                                with ex ->
                                    result.Value <- v4009 ex 
                                let v4013 : US5 = result.Value
                                let v4027 : string option =
                                    match v4013 with
                                    | US5_1 -> (* None *)
                                        let v4023 : string option = None
                                        v4023
                                    | US5_0(v4017) -> (* Some *)
                                        let v4019 : string option = Some v4017 
                                        v4019
                                let v4028 : string = "$0.unwrap()"
                                let v4029 : string = Fable.Core.RustInterop.emitRustExpr v4027 v4028 
                                let v4030 : US5 = US5_0(v436)
                                let v4031 : US5 = US5_0(v427)
                                let v4032 : US5 = US5_0(v117)
                                let v4033 : US5 = US5_0(v4029)
                                struct (v4030, v4031, v4032, v4033)
                        struct (v4034, v4035, v4036, v4037)
                let v4044 : string =
                    match v4038 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4042) -> (* Some *)
                        v4042
                let v4045 : string = "extension"
                let v4048 : string =
                    match v4039 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4046) -> (* Some *)
                        v4046
                let v4049 : string = "code"
                let v4052 : string =
                    match v4041 with
                    | US5_1 -> (* None *)
                        v514
                    | US5_0(v4050) -> (* Some *)
                        v4050
                let v4053 : string = "output"
                let v4054 : (struct (string * string) []) = [|struct (v4045, v4044); struct (v4049, v4048); struct (v4053, v4052)|]
                let v4055 : string = "$0.to_vec()"
                let v4056 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4054 v4055 
                let v4057 : unit = ()
                let v4058 : string = $"true; let _func1_from_v4057 = Func1::from(move |value| {{ //"
                let v4059 : bool = Fable.Core.RustInterop.emitRustExpr () v4058 
                let v4060 : string = $"value"
                let struct (v4061 : string, v4062 : string) = Fable.Core.RustInterop.emitRustExpr () v4060 
                (* run_target_args'
                let v4067 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4068 : string = "&*$0"
                let v4069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4061 v4068 
                let _run_target_args'_v4067 = v4069 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4070 : string = "&*$0"
                let v4071 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4061 v4070 
                let _run_target_args'_v4067 = v4071 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4072 : string = "&*$0"
                let v4073 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4061 v4072 
                let _run_target_args'_v4067 = v4073 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4075 : Ref<Str> = v4061 |> unbox<Ref<Str>>
                let _run_target_args'_v4067 = v4075 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4079 : Ref<Str> = v4061 |> unbox<Ref<Str>>
                let _run_target_args'_v4067 = v4079 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4083 : Ref<Str> = v4061 |> unbox<Ref<Str>>
                let _run_target_args'_v4067 = v4083 
                #endif
#else
                let v4087 : Ref<Str> = v4061 |> unbox<Ref<Str>>
                let _run_target_args'_v4067 = v4087 
                #endif
                let v4090 : Ref<Str> = _run_target_args'_v4067 
                (* run_target_args'
                let v4103 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4104 : string = "String::from($0)"
                let v4105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4090 v4104 
                let _run_target_args'_v4103 = v4105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4106 : string = "String::from($0)"
                let v4107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4090 v4106 
                let _run_target_args'_v4103 = v4107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4108 : string = "String::from($0)"
                let v4109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4090 v4108 
                let _run_target_args'_v4103 = v4109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4111 : std_string_String = v4090 |> unbox<std_string_String>
                let _run_target_args'_v4103 = v4111 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4115 : std_string_String = v4090 |> unbox<std_string_String>
                let _run_target_args'_v4103 = v4115 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4119 : std_string_String = v4090 |> unbox<std_string_String>
                let _run_target_args'_v4103 = v4119 
                #endif
#else
                let v4123 : std_string_String = v4090 |> unbox<std_string_String>
                let _run_target_args'_v4103 = v4123 
                #endif
                let v4126 : std_string_String = _run_target_args'_v4103 
                (* run_target_args'
                let v4139 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4140 : string = "&*$0"
                let v4141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4062 v4140 
                let _run_target_args'_v4139 = v4141 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4142 : string = "&*$0"
                let v4143 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4062 v4142 
                let _run_target_args'_v4139 = v4143 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4144 : string = "&*$0"
                let v4145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4062 v4144 
                let _run_target_args'_v4139 = v4145 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4147 : Ref<Str> = v4062 |> unbox<Ref<Str>>
                let _run_target_args'_v4139 = v4147 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4151 : Ref<Str> = v4062 |> unbox<Ref<Str>>
                let _run_target_args'_v4139 = v4151 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4155 : Ref<Str> = v4062 |> unbox<Ref<Str>>
                let _run_target_args'_v4139 = v4155 
                #endif
#else
                let v4159 : Ref<Str> = v4062 |> unbox<Ref<Str>>
                let _run_target_args'_v4139 = v4159 
                #endif
                let v4162 : Ref<Str> = _run_target_args'_v4139 
                (* run_target_args'
                let v4175 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4176 : string = "String::from($0)"
                let v4177 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4162 v4176 
                let _run_target_args'_v4175 = v4177 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4178 : string = "String::from($0)"
                let v4179 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4162 v4178 
                let _run_target_args'_v4175 = v4179 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4180 : string = "String::from($0)"
                let v4181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4162 v4180 
                let _run_target_args'_v4175 = v4181 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4183 : std_string_String = v4162 |> unbox<std_string_String>
                let _run_target_args'_v4175 = v4183 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4187 : std_string_String = v4162 |> unbox<std_string_String>
                let _run_target_args'_v4175 = v4187 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4191 : std_string_String = v4162 |> unbox<std_string_String>
                let _run_target_args'_v4175 = v4191 
                #endif
#else
                let v4195 : std_string_String = v4162 |> unbox<std_string_String>
                let _run_target_args'_v4175 = v4195 
                #endif
                let v4198 : std_string_String = _run_target_args'_v4175 
                let v4208 : (std_string_String * std_string_String) = v4126, v4198 
                let func1_from_result = v4208 //
                let v4211 : _ = func1_from_result
                let v4212 : string = $"true; $0 /*"
                let v4213 : bool = Fable.Core.RustInterop.emitRustExpr v4211 v4212 
                let v4214 : string = $"*/ }}); //"
                let v4215 : bool = Fable.Core.RustInterop.emitRustExpr () v4214 
                let v4216 : string = $"_func1_from_v4057"
                let v4217 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v4216 
                let v4218 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v4219 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v4217)
                let v4220 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4056, v4219) v4218 
                let v4221 : string = "std::collections::BTreeMap::from_iter(v4220.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v4222 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4221 
                let v4223 : string = "serde_json::to_string(&v4222)"
                let v4224 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4223 
                (* run_target_args'
                let v4226 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4227 : string = "$0.unwrap()"
                let v4228 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4224 v4227 
                let _run_target_args'_v4226 = v4228 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4229 : string = "$0.unwrap()"
                let v4230 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4224 v4229 
                let _run_target_args'_v4226 = v4230 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4231 : string = "$0.unwrap()"
                let v4232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4224 v4231 
                let _run_target_args'_v4226 = v4232 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4233 : std_string_String = match v4224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4226 = v4233 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4234 : std_string_String = match v4224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4226 = v4234 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4235 : std_string_String = match v4224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4226 = v4235 
                #endif
#else
                let v4236 : std_string_String = match v4224 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v4226 = v4236 
                #endif
                let v4237 : std_string_String = _run_target_args'_v4226 
                let v4240 : string = "fable_library_rust::String_::fromString($0)"
                let v4241 : string = Fable.Core.RustInterop.emitRustExpr v4237 v4240 
                let v4242 : string = "command_result"
                [|struct (v4242, v4241)|]
            else
                let v4244 : string = "fable_library_rust::String_::fromString($0)"
                let v4245 : string = Fable.Core.RustInterop.emitRustExpr v40 v4244 
                let v4246 : bool = v4245 = "cuda"
                if v4246 then
                    let v4247 : string = method190()
                    (* run_target_args'
                    let v4252 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4253 : string = "&*$0"
                    let v4254 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4247 v4253 
                    let _run_target_args'_v4252 = v4254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4255 : string = "&*$0"
                    let v4256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4247 v4255 
                    let _run_target_args'_v4252 = v4256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4257 : string = "&*$0"
                    let v4258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4247 v4257 
                    let _run_target_args'_v4252 = v4258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4260 : Ref<Str> = v4247 |> unbox<Ref<Str>>
                    let _run_target_args'_v4252 = v4260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4264 : Ref<Str> = v4247 |> unbox<Ref<Str>>
                    let _run_target_args'_v4252 = v4264 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4268 : Ref<Str> = v4247 |> unbox<Ref<Str>>
                    let _run_target_args'_v4252 = v4268 
                    #endif
#else
                    let v4272 : Ref<Str> = v4247 |> unbox<Ref<Str>>
                    let _run_target_args'_v4252 = v4272 
                    #endif
                    let v4275 : Ref<Str> = _run_target_args'_v4252 
                    let v4284 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4285 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4275) v4284 
                    let v4288 : (std_string_String -> US8) = method21()
                    let v4289 : US8 option = v4285 |> Option.map v4288 
                    let v4309 : US8 = US8_1
                    let v4310 : US8 = v4289 |> Option.defaultValue v4309 
                    let v4317 : std_string_String =
                        match v4310 with
                        | US8_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US8_0(v4314) -> (* Some *)
                            v4314
                    let v4318 : string = "fable_library_rust::String_::fromString($0)"
                    let v4319 : string = Fable.Core.RustInterop.emitRustExpr v4317 v4318 
                    let v4320 : string = method191()
                    (* run_target_args'
                    let v4325 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4326 : string = "&*$0"
                    let v4327 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4320 v4326 
                    let _run_target_args'_v4325 = v4327 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4328 : string = "&*$0"
                    let v4329 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4320 v4328 
                    let _run_target_args'_v4325 = v4329 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4330 : string = "&*$0"
                    let v4331 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4320 v4330 
                    let _run_target_args'_v4325 = v4331 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4333 : Ref<Str> = v4320 |> unbox<Ref<Str>>
                    let _run_target_args'_v4325 = v4333 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4337 : Ref<Str> = v4320 |> unbox<Ref<Str>>
                    let _run_target_args'_v4325 = v4337 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4341 : Ref<Str> = v4320 |> unbox<Ref<Str>>
                    let _run_target_args'_v4325 = v4341 
                    #endif
#else
                    let v4345 : Ref<Str> = v4320 |> unbox<Ref<Str>>
                    let _run_target_args'_v4325 = v4345 
                    #endif
                    let v4348 : Ref<Str> = _run_target_args'_v4325 
                    let v4357 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v4358 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4348) v4357 
                    let v4361 : (std_string_String -> US8) = method21()
                    let v4362 : US8 option = v4358 |> Option.map v4361 
                    let v4382 : US8 = US8_1
                    let v4383 : US8 = v4362 |> Option.defaultValue v4382 
                    let v4444 : US37 =
                        match v4383 with
                        | US8_1 -> (* None *)
                            US37_1
                        | US8_0(v4387) -> (* Some *)
                            let v4388 : string = "fable_library_rust::String_::fromString($0)"
                            let v4389 : string = Fable.Core.RustInterop.emitRustExpr v4387 v4388 
                            
                            
                            
                            
                            let v4392 : string = "Poetry"
                            let v4393 : (unit -> string) = v4392.ToLower
                            let v4394 : string = v4393 ()
                            let v4399 : string = "Pip"
                            let v4400 : (unit -> string) = v4399.ToLower
                            let v4401 : string = v4400 ()
                            let v4404 : bool = "Pip" = v4389
                            let v4408 : US38 =
                                if v4404 then
                                    let v4405 : US39 = US39_0
                                    US38_0(v4405)
                                else
                                    US38_1
                            let v4440 : US38 =
                                match v4408 with
                                | US38_1 -> (* None *)
                                    let v4411 : bool = "Poetry" = v4389
                                    let v4415 : US38 =
                                        if v4411 then
                                            let v4412 : US39 = US39_1
                                            US38_0(v4412)
                                        else
                                            US38_1
                                    match v4415 with
                                    | US38_1 -> (* None *)
                                        let v4418 : bool = v4401 = v4389
                                        let v4422 : US38 =
                                            if v4418 then
                                                let v4419 : US39 = US39_0
                                                US38_0(v4419)
                                            else
                                                US38_1
                                        match v4422 with
                                        | US38_1 -> (* None *)
                                            let v4425 : bool = v4394 = v4389
                                            let v4429 : US38 =
                                                if v4425 then
                                                    let v4426 : US39 = US39_1
                                                    US38_0(v4426)
                                                else
                                                    US38_1
                                            match v4429 with
                                            | US38_1 -> (* None *)
                                                US38_1
                                            | US38_0(v4430) -> (* Some *)
                                                US38_0(v4430)
                                        | US38_0(v4423) -> (* Some *)
                                            US38_0(v4423)
                                    | US38_0(v4416) -> (* Some *)
                                        US38_0(v4416)
                                | US38_0(v4409) -> (* Some *)
                                    US38_0(v4409)
                            US37_0(v4440)
                    let v4451 : US38 =
                        match v4444 with
                        | US37_0(v4445) -> (* Some *)
                            match v4445 with
                            | US38_0(v4446) -> (* Some *)
                                US38_0(v4446)
                            | _ ->
                                US38_1
                        | _ ->
                            US38_1
                    let v4455 : US39 =
                        match v4451 with
                        | US38_1 -> (* None *)
                            US39_0
                        | US38_0(v4452) -> (* Some *)
                            v4452
                    let v4456 : string = method23()
                    (* run_target_args'
                    let v4461 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4462 : string = "&*$0"
                    let v4463 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4456 v4462 
                    let _run_target_args'_v4461 = v4463 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4464 : string = "&*$0"
                    let v4465 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4456 v4464 
                    let _run_target_args'_v4461 = v4465 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4466 : string = "&*$0"
                    let v4467 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4456 v4466 
                    let _run_target_args'_v4461 = v4467 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4469 : Ref<Str> = v4456 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4469 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4473 : Ref<Str> = v4456 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4473 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4477 : Ref<Str> = v4456 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4477 
                    #endif
#else
                    let v4481 : Ref<Str> = v4456 |> unbox<Ref<Str>>
                    let _run_target_args'_v4461 = v4481 
                    #endif
                    let v4484 : Ref<Str> = _run_target_args'_v4461 
                    let v4493 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v4494 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v4484) v4493 
                    let v4497 : (Vec<std_string_String> -> US12) = method24()
                    let v4498 : US12 option = v4494 |> Option.map v4497 
                    let v4518 : US12 = US12_1
                    let v4519 : US12 = v4498 |> Option.defaultValue v4518 
                    let v4523 : (std_string_String []) = [||]
                    let v4524 : string = "$0.to_vec()"
                    let v4525 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4523 v4524 
                    let v4528 : Vec<std_string_String> =
                        match v4519 with
                        | US12_1 -> (* None *)
                            v4525
                        | US12_0(v4526) -> (* Some *)
                            v4526
                    (* run_target_args'
                    let v4533 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v4538 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4539 : string = "std::fs::read(&*$0)"
                    let v4540 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4319 v4539 
                    (* run_target_args'
                    let v4542 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4543 : string = "$0.unwrap()"
                    let v4544 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4543 
                    let _run_target_args'_v4542 = v4544 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4545 : string = "$0.unwrap()"
                    let v4546 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4545 
                    let _run_target_args'_v4542 = v4546 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4547 : string = "$0.unwrap()"
                    let v4548 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4540 v4547 
                    let _run_target_args'_v4542 = v4548 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4549 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4542 = v4549 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4550 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4542 = v4550 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4551 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4542 = v4551 
                    #endif
#else
                    let v4552 : Vec<uint8> = match v4540 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4542 = v4552 
                    #endif
                    let v4553 : Vec<uint8> = _run_target_args'_v4542 
                    let _run_target_args'_v4538 = v4553 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4557 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4538 = v4557 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4561 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4538 = v4561 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4565 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4538 = v4565 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4569 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4538 = v4569 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4573 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v4538 = v4573 
                    #endif
#else
                    let v4576 : (uint8 []) = v4319 |> System.IO.File.ReadAllBytes
                    let v4577 : string = "$0.to_vec()"
                    let v4578 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4576 v4577 
                    let _run_target_args'_v4538 = v4578 
                    #endif
                    let v4579 : Vec<uint8> = _run_target_args'_v4538 
                    let v4588 : Vec<uint8> = method25(v4579)
                    let v4589 : string = "std::string::String::from_utf8($0)"
                    let v4590 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4588 v4589 
                    (* run_target_args'
                    let v4592 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4593 : string = "$0.unwrap()"
                    let v4594 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4593 
                    let _run_target_args'_v4592 = v4594 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4595 : string = "$0.unwrap()"
                    let v4596 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4595 
                    let _run_target_args'_v4592 = v4596 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4597 : string = "$0.unwrap()"
                    let v4598 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4590 v4597 
                    let _run_target_args'_v4592 = v4598 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4599 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4592 = v4599 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4600 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4592 = v4600 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4601 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4592 = v4601 
                    #endif
#else
                    let v4602 : std_string_String = match v4590 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v4592 = v4602 
                    #endif
                    let v4603 : std_string_String = _run_target_args'_v4592 
                    let v4606 : string = "fable_library_rust::String_::fromString($0)"
                    let v4607 : string = Fable.Core.RustInterop.emitRustExpr v4603 v4606 
                    let _run_target_args'_v4533 = v4607 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4609 : string = null |> unbox<string>
                    let _run_target_args'_v4533 = v4609 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4613 : string = null |> unbox<string>
                    let _run_target_args'_v4533 = v4613 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4617 : string = null |> unbox<string>
                    let _run_target_args'_v4533 = v4617 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4621 : string = null |> unbox<string>
                    let _run_target_args'_v4533 = v4621 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4625 : string = null |> unbox<string>
                    let _run_target_args'_v4533 = v4625 
                    #endif
#else
                    let v4628 : string = v4319 |> System.IO.File.ReadAllText
                    let _run_target_args'_v4533 = v4628 
                    #endif
                    let v4629 : string = _run_target_args'_v4533 
                    let v4638 : string = method32()
                    let v4639 : US5 = method33(v4638)
                    let v4645 : US5 =
                        match v4639 with
                        | US5_1 -> (* None *)
                            let v4642 : string = __SOURCE_DIRECTORY__
                            method33(v4642)
                        | US5_0(v4640) -> (* Some *)
                            US5_0(v4640)
                    let v4651 : US5 =
                        match v4645 with
                        | US5_1 -> (* None *)
                            let v4648 : string = "/workspaces"
                            method33(v4648)
                        | US5_0(v4646) -> (* Some *)
                            US5_0(v4646)
                    let v4655 : string =
                        match v4651 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v4652) -> (* Some *)
                            v4652
                    let v4656 : string = method53(v4655)
                    let v4657 : bool = "deps" = v4656
                    let v4668 : string =
                        if v4657 then
                            let v4658 : string option = method39(v4655)
                            let v4660 : string = v4658 |> Option.get
                            let v4663 : US5 = method33(v4660)
                            match v4663 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v4664) -> (* Some *)
                                v4664
                        else
                            v4655
                    let v4669 : string = "polyglot"
                    let v4670 : string = method34(v4668, v4669)
                    let v4671 : string = method32()
                    let v4673 : (unit -> string) = v4671.ToLower
                    let v4674 : string = v4673 ()
                    let v4678 : (unit -> string) = v4670.ToLower
                    let v4679 : string = v4678 ()
                    let v4683 : bool = v4674.StartsWith (v4679, false, null)
                    let v4688 : US14 =
                        if v4683 then
                            US14_1(v4679)
                        else
                            US14_0(v4679)
                    let v4700 : Result<string, string> =
                        match v4688 with
                        | US14_1(v4694) -> (* Error *)
                            let v4696 : Result<string, string> = Error v4694 
                            v4696
                        | US14_0(v4689) -> (* Ok *)
                            let v4691 : Result<string, string> = Ok v4689 
                            v4691
                    let v4701 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v4702 : bool = Fable.Core.RustInterop.emitRustExpr v4700 v4701 
                    let v4703 : string = "x"
                    let v4704 : string = Fable.Core.RustInterop.emitRustExpr () v4703 
                    let v4705 : string = "true; $0 })"
                    let v4706 : bool = Fable.Core.RustInterop.emitRustExpr v4704 v4705 
                    let v4707 : string = "_result_unwrap_or_else"
                    let v4708 : string = Fable.Core.RustInterop.emitRustExpr () v4707 
                    let v4709 : string option = method39(v4319)
                    let v4712 : string = ""
                    let v4713 : string = v4709 |> Option.defaultValue v4712 
                    let v4721 : string =
                        match v4455 with
                        | US39_0 -> (* Pip *)
                            let v4716 : string = "requirements.txt"
                            method34(v4713, v4716)
                        | US39_1 -> (* Poetry *)
                            let v4718 : string = "pyproject.toml"
                            method34(v4713, v4718)
                    let v4722 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v4723 : bool = Fable.Core.RustInterop.emitRustExpr v4528 v4722 
                    let v4724 : string = "x"
                    let v4725 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4724 
                    let v4726 : string = "fable_library_rust::String_::fromString($0)"
                    let v4727 : string = Fable.Core.RustInterop.emitRustExpr v4725 v4726 
                    let v4730 : string = "="
                    let v4731 : bool = v4727.Contains v4730 
                    let v4746 : string =
                        if v4731 then
                            v4727
                        else
                            let v4736 : string = "]"
                            let v4737 : bool = v4727.EndsWith (v4736, false, null)
                            if v4737 then
                                let v4740 : string = $"={{version='*',features=["
                                let v4741 : string = "["
                                let v4742 : string = v4727.Replace (v4741, v4740)
                                let v4743 : string = $"{v4742}}}"
                                v4743
                            else
                                let v4744 : string = $"{v4727}='*'"
                                v4744
                    let v4747 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v4748 : bool = Fable.Core.RustInterop.emitRustExpr v4746 v4747 
                    let v4749 : string = "_vec_map"
                    let v4750 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4749 
                    let v4751 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v4752 : (string []) = Fable.Core.RustInterop.emitRustExpr v4750 v4751 
                    let v4757 : unit = ()
                    let _let'_v4757 =
                        seq {
                            for i = 0 to v4752.Length - 1 do yield v4752.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v4760 : string seq = _let'_v4757 
                    let v4768 : string = method73()
                    let v4769 : (string -> (string seq -> string)) = String.concat
                    let v4770 : (string seq -> string) = v4769 v4768
                    let v4771 : string = v4770 v4760
                    let v4775 : bool = v4771 = ""
                    let struct (v4918 : int32, v4919 : string) =
                        if v4775 then
                            struct (0, v4712)
                        else
                            let v4888 : string =
                                match v4455 with
                                | US39_0 -> (* Pip *)
                                    v4771
                                | US39_1 -> (* Poetry *)
                                    let v4776 : string = $"[tool.poetry]"
                                    let v4777 : string = $"name = \"test\""
                                    let v4780 : string = "\n"
                                    let v4781 : string = v4776 + v4780 
                                    let v4785 : string = v4781 + v4777 
                                    let v4788 : string = $"version = \"0.0.1\""
                                    let v4790 : string = v4785 + v4780 
                                    let v4794 : string = v4790 + v4788 
                                    let v4797 : string = $"description = \"\""
                                    let v4799 : string = v4794 + v4780 
                                    let v4803 : string = v4799 + v4797 
                                    let v4806 : string = $"authors = []"
                                    let v4808 : string = v4803 + v4780 
                                    let v4812 : string = v4808 + v4806 
                                    let v4815 : string = $""
                                    let v4817 : string = v4812 + v4780 
                                    let v4821 : string = v4817 + v4815 
                                    let v4824 : string = $"[tool.poetry.dependencies]"
                                    let v4826 : string = v4821 + v4780 
                                    let v4830 : string = v4826 + v4824 
                                    let v4833 : string = $"python=\"~3.12\""
                                    let v4835 : string = v4830 + v4780 
                                    let v4839 : string = v4835 + v4833 
                                    let v4842 : string = $"{v4771}"
                                    let v4844 : string = v4839 + v4780 
                                    let v4848 : string = v4844 + v4842 
                                    let v4851 : string = $""
                                    let v4853 : string = v4848 + v4780 
                                    let v4857 : string = v4853 + v4851 
                                    let v4860 : string = $"[build-system]"
                                    let v4862 : string = v4857 + v4780 
                                    let v4866 : string = v4862 + v4860 
                                    let v4869 : string = $"requires = [\"poetry-core\"]"
                                    let v4871 : string = v4866 + v4780 
                                    let v4875 : string = v4871 + v4869 
                                    let v4878 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v4880 : string = v4875 + v4780 
                                    let v4884 : string = v4880 + v4878 
                                    v4884
                            method74(v4721, v4888)
                            let v4890 : System.Threading.CancellationToken option = None
                            let v4893 : (struct (string * string) []) = [||]
                            let v4895 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v4899 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v4903 : string option = None
                            let v4909 : string =
                                match v4455 with
                                | US39_0 -> (* Pip *)
                                    let v4906 : string = $"pip install -r requirements.txt"
                                    v4906
                                | US39_1 -> (* Poetry *)
                                    let v4907 : string = $"poetry install"
                                    v4907
                            let v4911 : string option = Some v4713 
                            let v4914 : bool = true
                            let v4915 : bool = true
                            method99(v4909, v4890, v4893, v4895, v4899, v4914, v4911, v4915)
                    let v4921 : bool = v4918 <> 0 
                    let struct (v6276 : US5, v6277 : US5, v6278 : US5, v6279 : US5) =
                        if v4921 then
                            let v5233 : unit = ()
                            let v5234 : (unit -> unit) = closure77(v4455, v4319, v4919, v4918)
                            let v5235 : unit = (fun () -> v5234 (); v5233) ()
                            let v5548 : string = "py"
                            let v5549 : US5 = US5_0(v5548)
                            let v5550 : US5 = US5_1
                            let v5551 : US5 = US5_1
                            let v5552 : US5 = US5_1
                            struct (v5549, v5550, v5551, v5552)
                        else
                            let v5556 : string =
                                match v4455 with
                                | US39_0 -> (* Pip *)
                                    let v5553 : string = $"python \"{v4319}\""
                                    v5553
                                | US39_1 -> (* Poetry *)
                                    let v5554 : string = $"poetry run python \"{v4319}\""
                                    v5554
                            let v5557 : string = "TRACE_LEVEL"
                            let v5558 : string = "Verbose"
                            let v5559 : (struct (string * string) []) = [|struct (v5557, v5558)|]
                            let v5561 : System.Threading.CancellationToken option = None
                            let v5564 : (struct (string * string) []) = [||]
                            let v5566 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v5570 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v5574 : string option = None
                            let v5578 : string option = Some v4713 
                            let v5581 : bool = true
                            let v5582 : bool = true
                            let struct (v5583 : int32, v5584 : string) = method99(v5556, v5561, v5559, v5566, v5570, v5581, v5578, v5582)
                            let v5585 : int32 = v5559.Length
                            let v5586 : (string []) = Array.zeroCreate<string> (v5585)
                            let v5587 : Mut5 = {l0 = 0} : Mut5
                            while method30(v5585, v5587) do
                                let v5589 : int32 = v5587.l0
                                let struct (v5590 : string, v5591 : string) = v5559.[int v5589]
                                let v5592 : string = $"$env:{v5590}=''{v5591}''"
                                v5586.[int v5589] <- v5592
                                let v5593 : int32 = v5589 + 1
                                v5587.l0 <- v5593
                                ()
                            let v5595 : string seq = v5586 |> Seq.ofArray
                            let v5600 : (string -> (string seq -> string)) = String.concat
                            let v5601 : string = ";"
                            let v5602 : (string seq -> string) = v5600 v5601
                            let v5603 : string = v5602 v5595
                            let v5606 : string = $"pwsh -c '{v5603}; {v5556}'"
                            let v5607 : bool = v5583 = 0
                            let v5614 : bool =
                                if v5607 then
                                    true
                                else
                                    let v5610 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v5611 : bool = v5584.Contains v5610 
                                    v5611
                            let struct (v6272 : US5, v6273 : US5, v6274 : US5, v6275 : US5) =
                                if v5614 then
                                    let v5615 : (string -> US5) = closure72()
                                    let v5616 : (unit -> string) = closure78(v5584)
                                    let v5617 : (exn -> US5) = closure79(v4319, v5584, v5606)
                                    let v5620 : US5 = US5_1
                                    let result = ref v5620
                                    try
                                        result.Value <- v5616 () |> v5615 
                                    with ex ->
                                        result.Value <- v5617 ex 
                                    let v5621 : US5 = result.Value
                                    let v5635 : string option =
                                        match v5621 with
                                        | US5_1 -> (* None *)
                                            let v5631 : string option = None
                                            v5631
                                        | US5_0(v5625) -> (* Some *)
                                            let v5627 : string option = Some v5625 
                                            v5627
                                    let v5636 : string = "$0.unwrap()"
                                    let v5637 : string = Fable.Core.RustInterop.emitRustExpr v5635 v5636 
                                    let v5638 : string = "py"
                                    let v5639 : US5 = US5_0(v5638)
                                    let v5640 : US5 = US5_0(v4629)
                                    let v5641 : US5 = US5_0(v4319)
                                    let v5642 : US5 = US5_0(v5637)
                                    struct (v5639, v5640, v5641, v5642)
                                else
                                    let v5952 : unit = ()
                                    let v5953 : (unit -> unit) = closure81(v4319, v5584, v5583, v5606)
                                    let v5954 : unit = (fun () -> v5953 (); v5952) ()
                                    let v6267 : string = "py"
                                    let v6268 : US5 = US5_0(v6267)
                                    let v6269 : US5 = US5_1
                                    let v6270 : US5 = US5_1
                                    let v6271 : US5 = US5_1
                                    struct (v6268, v6269, v6270, v6271)
                            struct (v6272, v6273, v6274, v6275)
                    let v6282 : string =
                        match v6276 with
                        | US5_1 -> (* None *)
                            v4712
                        | US5_0(v6280) -> (* Some *)
                            v6280
                    let v6283 : string = "extension"
                    let v6286 : string =
                        match v6277 with
                        | US5_1 -> (* None *)
                            v4712
                        | US5_0(v6284) -> (* Some *)
                            v6284
                    let v6287 : string = "code"
                    let v6290 : string =
                        match v6279 with
                        | US5_1 -> (* None *)
                            v4712
                        | US5_0(v6288) -> (* Some *)
                            v6288
                    let v6291 : string = "output"
                    let v6292 : (struct (string * string) []) = [|struct (v6283, v6282); struct (v6287, v6286); struct (v6291, v6290)|]
                    let v6293 : string = "$0.to_vec()"
                    let v6294 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6292 v6293 
                    let v6295 : unit = ()
                    let v6296 : string = $"true; let _func1_from_v6295 = Func1::from(move |value| {{ //"
                    let v6297 : bool = Fable.Core.RustInterop.emitRustExpr () v6296 
                    let v6298 : string = $"value"
                    let struct (v6299 : string, v6300 : string) = Fable.Core.RustInterop.emitRustExpr () v6298 
                    (* run_target_args'
                    let v6305 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6306 : string = "&*$0"
                    let v6307 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6299 v6306 
                    let _run_target_args'_v6305 = v6307 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6308 : string = "&*$0"
                    let v6309 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6299 v6308 
                    let _run_target_args'_v6305 = v6309 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6310 : string = "&*$0"
                    let v6311 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6299 v6310 
                    let _run_target_args'_v6305 = v6311 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6313 : Ref<Str> = v6299 |> unbox<Ref<Str>>
                    let _run_target_args'_v6305 = v6313 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6317 : Ref<Str> = v6299 |> unbox<Ref<Str>>
                    let _run_target_args'_v6305 = v6317 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6321 : Ref<Str> = v6299 |> unbox<Ref<Str>>
                    let _run_target_args'_v6305 = v6321 
                    #endif
#else
                    let v6325 : Ref<Str> = v6299 |> unbox<Ref<Str>>
                    let _run_target_args'_v6305 = v6325 
                    #endif
                    let v6328 : Ref<Str> = _run_target_args'_v6305 
                    (* run_target_args'
                    let v6341 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6342 : string = "String::from($0)"
                    let v6343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6328 v6342 
                    let _run_target_args'_v6341 = v6343 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6344 : string = "String::from($0)"
                    let v6345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6328 v6344 
                    let _run_target_args'_v6341 = v6345 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6346 : string = "String::from($0)"
                    let v6347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6328 v6346 
                    let _run_target_args'_v6341 = v6347 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6349 : std_string_String = v6328 |> unbox<std_string_String>
                    let _run_target_args'_v6341 = v6349 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6353 : std_string_String = v6328 |> unbox<std_string_String>
                    let _run_target_args'_v6341 = v6353 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6357 : std_string_String = v6328 |> unbox<std_string_String>
                    let _run_target_args'_v6341 = v6357 
                    #endif
#else
                    let v6361 : std_string_String = v6328 |> unbox<std_string_String>
                    let _run_target_args'_v6341 = v6361 
                    #endif
                    let v6364 : std_string_String = _run_target_args'_v6341 
                    (* run_target_args'
                    let v6377 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6378 : string = "&*$0"
                    let v6379 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6300 v6378 
                    let _run_target_args'_v6377 = v6379 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6380 : string = "&*$0"
                    let v6381 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6300 v6380 
                    let _run_target_args'_v6377 = v6381 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6382 : string = "&*$0"
                    let v6383 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6300 v6382 
                    let _run_target_args'_v6377 = v6383 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6385 : Ref<Str> = v6300 |> unbox<Ref<Str>>
                    let _run_target_args'_v6377 = v6385 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6389 : Ref<Str> = v6300 |> unbox<Ref<Str>>
                    let _run_target_args'_v6377 = v6389 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6393 : Ref<Str> = v6300 |> unbox<Ref<Str>>
                    let _run_target_args'_v6377 = v6393 
                    #endif
#else
                    let v6397 : Ref<Str> = v6300 |> unbox<Ref<Str>>
                    let _run_target_args'_v6377 = v6397 
                    #endif
                    let v6400 : Ref<Str> = _run_target_args'_v6377 
                    (* run_target_args'
                    let v6413 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6414 : string = "String::from($0)"
                    let v6415 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6400 v6414 
                    let _run_target_args'_v6413 = v6415 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6416 : string = "String::from($0)"
                    let v6417 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6400 v6416 
                    let _run_target_args'_v6413 = v6417 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6418 : string = "String::from($0)"
                    let v6419 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6400 v6418 
                    let _run_target_args'_v6413 = v6419 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6421 : std_string_String = v6400 |> unbox<std_string_String>
                    let _run_target_args'_v6413 = v6421 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6425 : std_string_String = v6400 |> unbox<std_string_String>
                    let _run_target_args'_v6413 = v6425 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6429 : std_string_String = v6400 |> unbox<std_string_String>
                    let _run_target_args'_v6413 = v6429 
                    #endif
#else
                    let v6433 : std_string_String = v6400 |> unbox<std_string_String>
                    let _run_target_args'_v6413 = v6433 
                    #endif
                    let v6436 : std_string_String = _run_target_args'_v6413 
                    let v6446 : (std_string_String * std_string_String) = v6364, v6436 
                    let func1_from_result = v6446 //
                    let v6449 : _ = func1_from_result
                    let v6450 : string = $"true; $0 /*"
                    let v6451 : bool = Fable.Core.RustInterop.emitRustExpr v6449 v6450 
                    let v6452 : string = $"*/ }}); //"
                    let v6453 : bool = Fable.Core.RustInterop.emitRustExpr () v6452 
                    let v6454 : string = $"_func1_from_v6295"
                    let v6455 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6454 
                    let v6456 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v6457 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v6455)
                    let v6458 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6294, v6457) v6456 
                    let v6459 : string = "std::collections::BTreeMap::from_iter(v6458.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v6460 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6459 
                    let v6461 : string = "serde_json::to_string(&v6460)"
                    let v6462 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6461 
                    (* run_target_args'
                    let v6464 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v6465 : string = "$0.unwrap()"
                    let v6466 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6462 v6465 
                    let _run_target_args'_v6464 = v6466 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v6467 : string = "$0.unwrap()"
                    let v6468 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6462 v6467 
                    let _run_target_args'_v6464 = v6468 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v6469 : string = "$0.unwrap()"
                    let v6470 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6462 v6469 
                    let _run_target_args'_v6464 = v6470 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v6471 : std_string_String = match v6462 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6464 = v6471 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v6472 : std_string_String = match v6462 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6464 = v6472 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v6473 : std_string_String = match v6462 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6464 = v6473 
                    #endif
#else
                    let v6474 : std_string_String = match v6462 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v6464 = v6474 
                    #endif
                    let v6475 : std_string_String = _run_target_args'_v6464 
                    let v6478 : string = "fable_library_rust::String_::fromString($0)"
                    let v6479 : string = Fable.Core.RustInterop.emitRustExpr v6475 v6478 
                    let v6480 : string = "command_result"
                    [|struct (v6480, v6479)|]
                else
                    let v6482 : string = "fable_library_rust::String_::fromString($0)"
                    let v6483 : string = Fable.Core.RustInterop.emitRustExpr v40 v6482 
                    let v6484 : bool = v6483 = "fable"
                    if v6484 then
                        let v6485 : string = method197()
                        (* run_target_args'
                        let v6490 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6491 : string = "&*$0"
                        let v6492 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6485 v6491 
                        let _run_target_args'_v6490 = v6492 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6493 : string = "&*$0"
                        let v6494 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6485 v6493 
                        let _run_target_args'_v6490 = v6494 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6495 : string = "&*$0"
                        let v6496 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6485 v6495 
                        let _run_target_args'_v6490 = v6496 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6498 : Ref<Str> = v6485 |> unbox<Ref<Str>>
                        let _run_target_args'_v6490 = v6498 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6502 : Ref<Str> = v6485 |> unbox<Ref<Str>>
                        let _run_target_args'_v6490 = v6502 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6506 : Ref<Str> = v6485 |> unbox<Ref<Str>>
                        let _run_target_args'_v6490 = v6506 
                        #endif
#else
                        let v6510 : Ref<Str> = v6485 |> unbox<Ref<Str>>
                        let _run_target_args'_v6490 = v6510 
                        #endif
                        let v6513 : Ref<Str> = _run_target_args'_v6490 
                        let v6522 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6523 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6513) v6522 
                        let v6526 : (std_string_String -> US8) = method21()
                        let v6527 : US8 option = v6523 |> Option.map v6526 
                        let v6547 : US8 = US8_1
                        let v6548 : US8 = v6527 |> Option.defaultValue v6547 
                        let v6555 : std_string_String =
                            match v6548 with
                            | US8_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US8_0(v6552) -> (* Some *)
                                v6552
                        let v6556 : string = "fable_library_rust::String_::fromString($0)"
                        let v6557 : string = Fable.Core.RustInterop.emitRustExpr v6555 v6556 
                        let v6558 : string = method198()
                        (* run_target_args'
                        let v6563 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v6564 : string = "&*$0"
                        let v6565 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6558 v6564 
                        let _run_target_args'_v6563 = v6565 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v6566 : string = "&*$0"
                        let v6567 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6558 v6566 
                        let _run_target_args'_v6563 = v6567 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v6568 : string = "&*$0"
                        let v6569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6558 v6568 
                        let _run_target_args'_v6563 = v6569 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v6571 : Ref<Str> = v6558 |> unbox<Ref<Str>>
                        let _run_target_args'_v6563 = v6571 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v6575 : Ref<Str> = v6558 |> unbox<Ref<Str>>
                        let _run_target_args'_v6563 = v6575 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v6579 : Ref<Str> = v6558 |> unbox<Ref<Str>>
                        let _run_target_args'_v6563 = v6579 
                        #endif
#else
                        let v6583 : Ref<Str> = v6558 |> unbox<Ref<Str>>
                        let _run_target_args'_v6563 = v6583 
                        #endif
                        let v6586 : Ref<Str> = _run_target_args'_v6563 
                        let v6595 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v6596 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6586) v6595 
                        let v6599 : (std_string_String -> US8) = method21()
                        let v6600 : US8 option = v6596 |> Option.map v6599 
                        let v6620 : US8 = US8_1
                        let v6621 : US8 = v6600 |> Option.defaultValue v6620 
                        let v6631 : US5 =
                            match v6621 with
                            | US8_1 -> (* None *)
                                US5_1
                            | US8_0(v6625) -> (* Some *)
                                let v6626 : string = "fable_library_rust::String_::fromString($0)"
                                let v6627 : string = Fable.Core.RustInterop.emitRustExpr v6625 v6626 
                                US5_0(v6627)
                        let v6749 : string =
                            match v6631 with
                            | US5_1 -> (* None *)
                                let v6747 : string = "{}"
                                v6747
                            | US5_0(v6632) -> (* Some *)
                                let v6633 : clap_Command = method0()
                                let v6634 : string = $"_ {v6632} --fs-path \"{v6557}\""
                                let v6635 : US26 = method122(v6634)
                                let v6644 : (string []) =
                                    match v6635 with
                                    | US26_1(v6637) -> (* Error *)
                                        let v6639 : string = $"resultm.get / Result value was Error: {v6637}"
                                        failwith<(string [])> v6639
                                    | US26_0(v6636) -> (* Ok *)
                                        v6636
                                let v6645 : string = "$0.to_vec()"
                                let v6646 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v6644 v6645 
                                let v6647 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v6648 : bool = Fable.Core.RustInterop.emitRustExpr v6646 v6647 
                                let v6649 : string = "x"
                                let v6650 : string = Fable.Core.RustInterop.emitRustExpr () v6649 
                                (* run_target_args'
                                let v6655 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6656 : string = "&*$0"
                                let v6657 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6650 v6656 
                                let _run_target_args'_v6655 = v6657 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6658 : string = "&*$0"
                                let v6659 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6650 v6658 
                                let _run_target_args'_v6655 = v6659 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6660 : string = "&*$0"
                                let v6661 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6650 v6660 
                                let _run_target_args'_v6655 = v6661 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6663 : Ref<Str> = v6650 |> unbox<Ref<Str>>
                                let _run_target_args'_v6655 = v6663 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6667 : Ref<Str> = v6650 |> unbox<Ref<Str>>
                                let _run_target_args'_v6655 = v6667 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6671 : Ref<Str> = v6650 |> unbox<Ref<Str>>
                                let _run_target_args'_v6655 = v6671 
                                #endif
#else
                                let v6675 : Ref<Str> = v6650 |> unbox<Ref<Str>>
                                let _run_target_args'_v6655 = v6675 
                                #endif
                                let v6678 : Ref<Str> = _run_target_args'_v6655 
                                (* run_target_args'
                                let v6691 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6692 : string = "String::from($0)"
                                let v6693 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6678 v6692 
                                let _run_target_args'_v6691 = v6693 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6694 : string = "String::from($0)"
                                let v6695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6678 v6694 
                                let _run_target_args'_v6691 = v6695 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6696 : string = "String::from($0)"
                                let v6697 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6678 v6696 
                                let _run_target_args'_v6691 = v6697 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6699 : std_string_String = v6678 |> unbox<std_string_String>
                                let _run_target_args'_v6691 = v6699 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6703 : std_string_String = v6678 |> unbox<std_string_String>
                                let _run_target_args'_v6691 = v6703 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6707 : std_string_String = v6678 |> unbox<std_string_String>
                                let _run_target_args'_v6691 = v6707 
                                #endif
#else
                                let v6711 : std_string_String = v6678 |> unbox<std_string_String>
                                let _run_target_args'_v6691 = v6711 
                                #endif
                                let v6714 : std_string_String = _run_target_args'_v6691 
                                let v6723 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v6724 : bool = Fable.Core.RustInterop.emitRustExpr v6714 v6723 
                                let v6725 : string = "_vec_map"
                                let v6726 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6725 
                                let v6727 : string = "clap::Command::get_matches_from($0, v6726)"
                                let v6728 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v6633 v6727 
                                let v6729 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v0, v6728)
                                let v6730 : string = "v6729.await"
                                let v6731 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6730 
                                (* run_target_args'
                                let v6733 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v6734 : string = "$0.unwrap()"
                                let v6735 : string = Fable.Core.RustInterop.emitRustExpr v6731 v6734 
                                let _run_target_args'_v6733 = v6735 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v6736 : string = "$0.unwrap()"
                                let v6737 : string = Fable.Core.RustInterop.emitRustExpr v6731 v6736 
                                let _run_target_args'_v6733 = v6737 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v6738 : string = "$0.unwrap()"
                                let v6739 : string = Fable.Core.RustInterop.emitRustExpr v6731 v6738 
                                let _run_target_args'_v6733 = v6739 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v6740 : string = match v6731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6733 = v6740 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v6741 : string = match v6731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6733 = v6741 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v6742 : string = match v6731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6733 = v6742 
                                #endif
#else
                                let v6743 : string = match v6731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v6733 = v6743 
                                #endif
                                let v6744 : string = _run_target_args'_v6733 
                                v6744
                        let v6750 : string = "command_result"
                        [|struct (v6750, v6749)|]
                    else
                        let v6752 : string = "fable_library_rust::String_::fromString($0)"
                        let v6753 : string = Fable.Core.RustInterop.emitRustExpr v40 v6752 
                        let v6754 : bool = v6753 = "dib"
                        if v6754 then
                            let v6755 : string = method199()
                            (* run_target_args'
                            let v6760 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6761 : string = "&*$0"
                            let v6762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6755 v6761 
                            let _run_target_args'_v6760 = v6762 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6763 : string = "&*$0"
                            let v6764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6755 v6763 
                            let _run_target_args'_v6760 = v6764 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6765 : string = "&*$0"
                            let v6766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6755 v6765 
                            let _run_target_args'_v6760 = v6766 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6768 : Ref<Str> = v6755 |> unbox<Ref<Str>>
                            let _run_target_args'_v6760 = v6768 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6772 : Ref<Str> = v6755 |> unbox<Ref<Str>>
                            let _run_target_args'_v6760 = v6772 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6776 : Ref<Str> = v6755 |> unbox<Ref<Str>>
                            let _run_target_args'_v6760 = v6776 
                            #endif
#else
                            let v6780 : Ref<Str> = v6755 |> unbox<Ref<Str>>
                            let _run_target_args'_v6760 = v6780 
                            #endif
                            let v6783 : Ref<Str> = _run_target_args'_v6760 
                            let v6792 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6793 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6783) v6792 
                            let v6796 : (std_string_String -> string) = method200()
                            let v6797 : string option = v6793 |> Option.map v6796 
                            let v6817 : string = "$0.unwrap()"
                            let v6818 : string = Fable.Core.RustInterop.emitRustExpr v6797 v6817 
                            let v6819 : string = method202()
                            (* run_target_args'
                            let v6824 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6825 : string = "&*$0"
                            let v6826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6819 v6825 
                            let _run_target_args'_v6824 = v6826 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6827 : string = "&*$0"
                            let v6828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6819 v6827 
                            let _run_target_args'_v6824 = v6828 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6829 : string = "&*$0"
                            let v6830 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6819 v6829 
                            let _run_target_args'_v6824 = v6830 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6832 : Ref<Str> = v6819 |> unbox<Ref<Str>>
                            let _run_target_args'_v6824 = v6832 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6836 : Ref<Str> = v6819 |> unbox<Ref<Str>>
                            let _run_target_args'_v6824 = v6836 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6840 : Ref<Str> = v6819 |> unbox<Ref<Str>>
                            let _run_target_args'_v6824 = v6840 
                            #endif
#else
                            let v6844 : Ref<Str> = v6819 |> unbox<Ref<Str>>
                            let _run_target_args'_v6824 = v6844 
                            #endif
                            let v6847 : Ref<Str> = _run_target_args'_v6824 
                            let v6856 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6857 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6847) v6856 
                            let v6859 : uint8 = v6857 |> Option.defaultValue 1uy 
                            let v6862 : string = method203()
                            (* run_target_args'
                            let v6867 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v6868 : string = "&*$0"
                            let v6869 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6862 v6868 
                            let _run_target_args'_v6867 = v6869 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v6870 : string = "&*$0"
                            let v6871 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6862 v6870 
                            let _run_target_args'_v6867 = v6871 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v6872 : string = "&*$0"
                            let v6873 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6862 v6872 
                            let _run_target_args'_v6867 = v6873 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v6875 : Ref<Str> = v6862 |> unbox<Ref<Str>>
                            let _run_target_args'_v6867 = v6875 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v6879 : Ref<Str> = v6862 |> unbox<Ref<Str>>
                            let _run_target_args'_v6867 = v6879 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v6883 : Ref<Str> = v6862 |> unbox<Ref<Str>>
                            let _run_target_args'_v6867 = v6883 
                            #endif
#else
                            let v6887 : Ref<Str> = v6862 |> unbox<Ref<Str>>
                            let _run_target_args'_v6867 = v6887 
                            #endif
                            let v6890 : Ref<Str> = _run_target_args'_v6867 
                            let v6899 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v6900 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6890) v6899 
                            let v6903 : (std_string_String -> US8) = method21()
                            let v6904 : US8 option = v6900 |> Option.map v6903 
                            let v6924 : US8 = US8_1
                            let v6925 : US8 = v6904 |> Option.defaultValue v6924 
                            let v6935 : US5 =
                                match v6925 with
                                | US8_1 -> (* None *)
                                    US5_1
                                | US8_0(v6929) -> (* Some *)
                                    let v6930 : string = "fable_library_rust::String_::fromString($0)"
                                    let v6931 : string = Fable.Core.RustInterop.emitRustExpr v6929 v6930 
                                    US5_0(v6931)
                            let v6936 : uint8 = 1uy
                            let struct (v6937 : int32, v6938 : string) = method204(v6935, v6859, v6818, v6936)
                            let v6940 : bool = v6937 <> 0 
                            let struct (v8491 : int32, v8492 : string) =
                                if v6940 then
                                    struct (v6937, v6938)
                                else
                                    let v6944 : System.Threading.CancellationToken option = None
                                    let v6947 : (struct (string * string) []) = [||]
                                    let v6949 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v6953 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v6957 : string option = None
                                    let v6960 : string = $"jupyter nbconvert \"{v6818}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v6961 : bool = true
                                    let v6962 : bool = true
                                    let struct (v6963 : int32, v6964 : string) = method99(v6960, v6944, v6947, v6949, v6953, v6961, v6957, v6962)
                                    let v7277 : unit = ()
                                    let v7278 : (unit -> unit) = closure84(v6964, v6963)
                                    let v7279 : unit = (fun () -> v7278 (); v7277) ()
                                    let v7596 : bool = v6963 <> 0 
                                    if v7596 then
                                        let v7599 : string = $"repl_result: {v6938}

jupyter_result: {v6964}"
                                        struct (v6963, v7599)
                                    else
                                        let v7600 : string = "'"
                                        let v7601 : string = "''"
                                        let v7602 : string = v6818.Replace (v7600, v7601)
                                        let v7604 : System.Threading.CancellationToken option = None
                                        let v7607 : (struct (string * string) []) = [||]
                                        let v7609 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v7613 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v7617 : string option = None
                                        let v7620 : string = $"pwsh -c \"$counter = 1; $path = '{v7602}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v7621 : bool = true
                                        let v7622 : bool = true
                                        let struct (v7623 : int32, v7624 : string) = method99(v7620, v7604, v7607, v7609, v7613, v7621, v7617, v7622)
                                        let v7937 : unit = ()
                                        let v7938 : (unit -> unit) = closure85(v7624, v7623)
                                        let v7939 : unit = (fun () -> v7938 (); v7937) ()
                                        let v8255 : string = $"{v6818}.html"
                                        (* run_target_args'
                                        let v8260 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v8265 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8266 : string = "std::fs::read(&*$0)"
                                        let v8267 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8255 v8266 
                                        (* run_target_args'
                                        let v8269 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8270 : string = "$0.unwrap()"
                                        let v8271 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8267 v8270 
                                        let _run_target_args'_v8269 = v8271 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8272 : string = "$0.unwrap()"
                                        let v8273 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8267 v8272 
                                        let _run_target_args'_v8269 = v8273 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8274 : string = "$0.unwrap()"
                                        let v8275 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8267 v8274 
                                        let _run_target_args'_v8269 = v8275 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8276 : Vec<uint8> = match v8267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8269 = v8276 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8277 : Vec<uint8> = match v8267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8269 = v8277 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8278 : Vec<uint8> = match v8267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8269 = v8278 
                                        #endif
#else
                                        let v8279 : Vec<uint8> = match v8267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8269 = v8279 
                                        #endif
                                        let v8280 : Vec<uint8> = _run_target_args'_v8269 
                                        let _run_target_args'_v8265 = v8280 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8284 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8265 = v8284 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8288 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8265 = v8288 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8292 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8265 = v8292 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8296 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8265 = v8296 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8300 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8265 = v8300 
                                        #endif
#else
                                        let v8303 : (uint8 []) = v8255 |> System.IO.File.ReadAllBytes
                                        let v8304 : string = "$0.to_vec()"
                                        let v8305 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8303 v8304 
                                        let _run_target_args'_v8265 = v8305 
                                        #endif
                                        let v8306 : Vec<uint8> = _run_target_args'_v8265 
                                        let v8315 : Vec<uint8> = method25(v8306)
                                        let v8316 : string = "std::string::String::from_utf8($0)"
                                        let v8317 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8315 v8316 
                                        (* run_target_args'
                                        let v8319 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8320 : string = "$0.unwrap()"
                                        let v8321 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8317 v8320 
                                        let _run_target_args'_v8319 = v8321 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8322 : string = "$0.unwrap()"
                                        let v8323 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8317 v8322 
                                        let _run_target_args'_v8319 = v8323 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8324 : string = "$0.unwrap()"
                                        let v8325 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8317 v8324 
                                        let _run_target_args'_v8319 = v8325 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8326 : std_string_String = match v8317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8319 = v8326 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8327 : std_string_String = match v8317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8319 = v8327 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8328 : std_string_String = match v8317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8319 = v8328 
                                        #endif
#else
                                        let v8329 : std_string_String = match v8317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8319 = v8329 
                                        #endif
                                        let v8330 : std_string_String = _run_target_args'_v8319 
                                        let v8333 : string = "fable_library_rust::String_::fromString($0)"
                                        let v8334 : string = Fable.Core.RustInterop.emitRustExpr v8330 v8333 
                                        let _run_target_args'_v8260 = v8334 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8336 : string = null |> unbox<string>
                                        let _run_target_args'_v8260 = v8336 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8340 : string = null |> unbox<string>
                                        let _run_target_args'_v8260 = v8340 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8344 : string = null |> unbox<string>
                                        let _run_target_args'_v8260 = v8344 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8348 : string = null |> unbox<string>
                                        let _run_target_args'_v8260 = v8348 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8352 : string = null |> unbox<string>
                                        let _run_target_args'_v8260 = v8352 
                                        #endif
#else
                                        let v8355 : string = v8255 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v8260 = v8355 
                                        #endif
                                        let v8356 : string = _run_target_args'_v8260 
                                        let v8365 : string = "\r\n"
                                        let v8366 : string = "\n"
                                        let v8367 : string = v8356.Replace (v8365, v8366)
                                        let v8368 : string = $"{v6818}.html"
                                        (* run_target_args'
                                        let v8369 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8370 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v8368, v8367) v8370 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v8368, v8367)
                                        #endif
                                        // run_target_args' is_unit
                                        let v8371 : string = $"{v6818}.ipynb"
                                        (* run_target_args'
                                        let v8376 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v8381 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8382 : string = "std::fs::read(&*$0)"
                                        let v8383 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8371 v8382 
                                        (* run_target_args'
                                        let v8385 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8386 : string = "$0.unwrap()"
                                        let v8387 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8383 v8386 
                                        let _run_target_args'_v8385 = v8387 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8388 : string = "$0.unwrap()"
                                        let v8389 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8383 v8388 
                                        let _run_target_args'_v8385 = v8389 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8390 : string = "$0.unwrap()"
                                        let v8391 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8383 v8390 
                                        let _run_target_args'_v8385 = v8391 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8392 : Vec<uint8> = match v8383 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8385 = v8392 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8393 : Vec<uint8> = match v8383 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8385 = v8393 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8394 : Vec<uint8> = match v8383 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8385 = v8394 
                                        #endif
#else
                                        let v8395 : Vec<uint8> = match v8383 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8385 = v8395 
                                        #endif
                                        let v8396 : Vec<uint8> = _run_target_args'_v8385 
                                        let _run_target_args'_v8381 = v8396 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8400 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8381 = v8400 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8404 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8381 = v8404 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8408 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8381 = v8408 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8412 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8381 = v8412 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8416 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v8381 = v8416 
                                        #endif
#else
                                        let v8419 : (uint8 []) = v8371 |> System.IO.File.ReadAllBytes
                                        let v8420 : string = "$0.to_vec()"
                                        let v8421 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8419 v8420 
                                        let _run_target_args'_v8381 = v8421 
                                        #endif
                                        let v8422 : Vec<uint8> = _run_target_args'_v8381 
                                        let v8431 : Vec<uint8> = method25(v8422)
                                        let v8432 : string = "std::string::String::from_utf8($0)"
                                        let v8433 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8431 v8432 
                                        (* run_target_args'
                                        let v8435 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8436 : string = "$0.unwrap()"
                                        let v8437 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8433 v8436 
                                        let _run_target_args'_v8435 = v8437 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8438 : string = "$0.unwrap()"
                                        let v8439 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8433 v8438 
                                        let _run_target_args'_v8435 = v8439 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8440 : string = "$0.unwrap()"
                                        let v8441 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8433 v8440 
                                        let _run_target_args'_v8435 = v8441 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8442 : std_string_String = match v8433 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8435 = v8442 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8443 : std_string_String = match v8433 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8435 = v8443 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8444 : std_string_String = match v8433 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8435 = v8444 
                                        #endif
#else
                                        let v8445 : std_string_String = match v8433 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v8435 = v8445 
                                        #endif
                                        let v8446 : std_string_String = _run_target_args'_v8435 
                                        let v8449 : string = "fable_library_rust::String_::fromString($0)"
                                        let v8450 : string = Fable.Core.RustInterop.emitRustExpr v8446 v8449 
                                        let _run_target_args'_v8376 = v8450 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v8452 : string = null |> unbox<string>
                                        let _run_target_args'_v8376 = v8452 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v8456 : string = null |> unbox<string>
                                        let _run_target_args'_v8376 = v8456 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v8460 : string = null |> unbox<string>
                                        let _run_target_args'_v8376 = v8460 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v8464 : string = null |> unbox<string>
                                        let _run_target_args'_v8376 = v8464 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v8468 : string = null |> unbox<string>
                                        let _run_target_args'_v8376 = v8468 
                                        #endif
#else
                                        let v8471 : string = v8371 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v8376 = v8471 
                                        #endif
                                        let v8472 : string = _run_target_args'_v8376 
                                        let v8481 : string = v8472.Replace (v8365, v8366)
                                        let v8482 : string = "\\r\\n"
                                        let v8483 : string = "\\n"
                                        let v8484 : string = v8481.Replace (v8482, v8483)
                                        let v8485 : string = $"{v6818}.ipynb"
                                        (* run_target_args'
                                        let v8486 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v8487 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v8485, v8484) v8487 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v8485, v8484)
                                        #endif
                                        // run_target_args' is_unit
                                        let v8488 : string = $"repl_result: {v6938}

jupyter_result: {v6964}

pwsh_replace_html_result: {v7624}"
                                        struct (v7623, v8488)
                            let v8805 : unit = ()
                            let v8806 : (unit -> unit) = closure86(v8492, v8491)
                            let v8807 : unit = (fun () -> v8806 (); v8805) ()
                            let v9124 : bool = v8491 <> 0 
                            if v9124 then
                                let v9127 : string = $"spiral.run / dib / exit_code: {v8491} / result: {v8492}"
                                failwith<unit> v9127
                            let v9128 : string = "stdio"
                            [|struct (v9128, v8492)|]
                        else
                            let v9130 : string = "fable_library_rust::String_::fromString($0)"
                            let v9131 : string = Fable.Core.RustInterop.emitRustExpr v40 v9130 
                            let v9132 : bool = v9131 = "rust"
                            let struct (v21565 : US5, v21566 : US5, v21567 : US5, v21568 : US5) =
                                if v9132 then
                                    let v9133 : string = method197()
                                    (* run_target_args'
                                    let v9138 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9139 : string = "&*$0"
                                    let v9140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9133 v9139 
                                    let _run_target_args'_v9138 = v9140 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9141 : string = "&*$0"
                                    let v9142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9133 v9141 
                                    let _run_target_args'_v9138 = v9142 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9143 : string = "&*$0"
                                    let v9144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9133 v9143 
                                    let _run_target_args'_v9138 = v9144 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9146 : Ref<Str> = v9133 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9138 = v9146 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9150 : Ref<Str> = v9133 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9138 = v9150 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9154 : Ref<Str> = v9133 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9138 = v9154 
                                    #endif
#else
                                    let v9158 : Ref<Str> = v9133 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9138 = v9158 
                                    #endif
                                    let v9161 : Ref<Str> = _run_target_args'_v9138 
                                    let v9170 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9171 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9161) v9170 
                                    let v9174 : (std_string_String -> US8) = method21()
                                    let v9175 : US8 option = v9171 |> Option.map v9174 
                                    let v9195 : US8 = US8_1
                                    let v9196 : US8 = v9175 |> Option.defaultValue v9195 
                                    let v9203 : std_string_String =
                                        match v9196 with
                                        | US8_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US8_0(v9200) -> (* Some *)
                                            v9200
                                    let v9204 : string = "fable_library_rust::String_::fromString($0)"
                                    let v9205 : string = Fable.Core.RustInterop.emitRustExpr v9203 v9204 
                                    let v9206 : string = method23()
                                    (* run_target_args'
                                    let v9211 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9212 : string = "&*$0"
                                    let v9213 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9206 v9212 
                                    let _run_target_args'_v9211 = v9213 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9214 : string = "&*$0"
                                    let v9215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9206 v9214 
                                    let _run_target_args'_v9211 = v9215 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9216 : string = "&*$0"
                                    let v9217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9206 v9216 
                                    let _run_target_args'_v9211 = v9217 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9219 : Ref<Str> = v9206 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9211 = v9219 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9223 : Ref<Str> = v9206 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9211 = v9223 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9227 : Ref<Str> = v9206 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9211 = v9227 
                                    #endif
#else
                                    let v9231 : Ref<Str> = v9206 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9211 = v9231 
                                    #endif
                                    let v9234 : Ref<Str> = _run_target_args'_v9211 
                                    let v9243 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v9244 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9234) v9243 
                                    let v9247 : (Vec<std_string_String> -> US12) = method24()
                                    let v9248 : US12 option = v9244 |> Option.map v9247 
                                    let v9268 : US12 = US12_1
                                    let v9269 : US12 = v9248 |> Option.defaultValue v9268 
                                    let v9273 : (std_string_String []) = [||]
                                    let v9274 : string = "$0.to_vec()"
                                    let v9275 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v9273 v9274 
                                    let v9278 : Vec<std_string_String> =
                                        match v9269 with
                                        | US12_1 -> (* None *)
                                            v9275
                                        | US12_0(v9276) -> (* Some *)
                                            v9276
                                    let v9279 : string = method213()
                                    (* run_target_args'
                                    let v9284 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9285 : string = "&*$0"
                                    let v9286 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9279 v9285 
                                    let _run_target_args'_v9284 = v9286 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9287 : string = "&*$0"
                                    let v9288 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9279 v9287 
                                    let _run_target_args'_v9284 = v9288 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9289 : string = "&*$0"
                                    let v9290 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9279 v9289 
                                    let _run_target_args'_v9284 = v9290 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9292 : Ref<Str> = v9279 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9284 = v9292 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9296 : Ref<Str> = v9279 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9284 = v9296 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9300 : Ref<Str> = v9279 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9284 = v9300 
                                    #endif
#else
                                    let v9304 : Ref<Str> = v9279 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9284 = v9304 
                                    #endif
                                    let v9307 : Ref<Str> = _run_target_args'_v9284 
                                    let v9316 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v9317 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v9307) v9316 
                                    let v9318 : string = method214()
                                    (* run_target_args'
                                    let v9323 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9324 : string = "&*$0"
                                    let v9325 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9318 v9324 
                                    let _run_target_args'_v9323 = v9325 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9326 : string = "&*$0"
                                    let v9327 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9318 v9326 
                                    let _run_target_args'_v9323 = v9327 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9328 : string = "&*$0"
                                    let v9329 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9318 v9328 
                                    let _run_target_args'_v9323 = v9329 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9331 : Ref<Str> = v9318 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9323 = v9331 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9335 : Ref<Str> = v9318 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9323 = v9335 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9339 : Ref<Str> = v9318 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9323 = v9339 
                                    #endif
#else
                                    let v9343 : Ref<Str> = v9318 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9323 = v9343 
                                    #endif
                                    let v9346 : Ref<Str> = _run_target_args'_v9323 
                                    let v9355 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9356 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9346) v9355 
                                    let v9359 : (std_string_String -> US8) = method21()
                                    let v9360 : US8 option = v9356 |> Option.map v9359 
                                    let v9380 : US8 = US8_1
                                    let v9381 : US8 = v9360 |> Option.defaultValue v9380 
                                    let v9391 : US5 =
                                        match v9381 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v9385) -> (* Some *)
                                            let v9386 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9387 : string = Fable.Core.RustInterop.emitRustExpr v9385 v9386 
                                            US5_0(v9387)
                                    let v9392 : string = method215()
                                    (* run_target_args'
                                    let v9397 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9398 : string = "&*$0"
                                    let v9399 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9392 v9398 
                                    let _run_target_args'_v9397 = v9399 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9400 : string = "&*$0"
                                    let v9401 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9392 v9400 
                                    let _run_target_args'_v9397 = v9401 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9402 : string = "&*$0"
                                    let v9403 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9392 v9402 
                                    let _run_target_args'_v9397 = v9403 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9405 : Ref<Str> = v9392 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9397 = v9405 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9409 : Ref<Str> = v9392 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9397 = v9409 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9413 : Ref<Str> = v9392 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9397 = v9413 
                                    #endif
#else
                                    let v9417 : Ref<Str> = v9392 |> unbox<Ref<Str>>
                                    let _run_target_args'_v9397 = v9417 
                                    #endif
                                    let v9420 : Ref<Str> = _run_target_args'_v9397 
                                    let v9429 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v9430 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v9420) v9429 
                                    let v9433 : (std_string_String -> US8) = method21()
                                    let v9434 : US8 option = v9430 |> Option.map v9433 
                                    let v9454 : US8 = US8_1
                                    let v9455 : US8 = v9434 |> Option.defaultValue v9454 
                                    let v9465 : US5 =
                                        match v9455 with
                                        | US8_1 -> (* None *)
                                            US5_1
                                        | US8_0(v9459) -> (* Some *)
                                            let v9460 : string = "fable_library_rust::String_::fromString($0)"
                                            let v9461 : string = Fable.Core.RustInterop.emitRustExpr v9459 v9460 
                                            US5_0(v9461)
                                    let v9474 : US40 =
                                        match v9391 with
                                        | US5_0(v9466) -> (* Some *)
                                            let v9467 : US41 = US41_0(v9466)
                                            US40_0(v9467)
                                        | _ ->
                                            match v9465 with
                                            | US5_0(v9469) -> (* Some *)
                                                let v9470 : US41 = US41_1(v9469)
                                                US40_0(v9470)
                                            | _ ->
                                                US40_1
                                    (* run_target_args'
                                    let v9479 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v9484 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9485 : string = "std::fs::read(&*$0)"
                                    let v9486 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9205 v9485 
                                    (* run_target_args'
                                    let v9488 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9489 : string = "$0.unwrap()"
                                    let v9490 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9486 v9489 
                                    let _run_target_args'_v9488 = v9490 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9491 : string = "$0.unwrap()"
                                    let v9492 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9486 v9491 
                                    let _run_target_args'_v9488 = v9492 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9493 : string = "$0.unwrap()"
                                    let v9494 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9486 v9493 
                                    let _run_target_args'_v9488 = v9494 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9495 : Vec<uint8> = match v9486 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9488 = v9495 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9496 : Vec<uint8> = match v9486 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9488 = v9496 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9497 : Vec<uint8> = match v9486 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9488 = v9497 
                                    #endif
#else
                                    let v9498 : Vec<uint8> = match v9486 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9488 = v9498 
                                    #endif
                                    let v9499 : Vec<uint8> = _run_target_args'_v9488 
                                    let _run_target_args'_v9484 = v9499 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9503 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9484 = v9503 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9507 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9484 = v9507 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9511 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9484 = v9511 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9515 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9484 = v9515 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9519 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v9484 = v9519 
                                    #endif
#else
                                    let v9522 : (uint8 []) = v9205 |> System.IO.File.ReadAllBytes
                                    let v9523 : string = "$0.to_vec()"
                                    let v9524 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9522 v9523 
                                    let _run_target_args'_v9484 = v9524 
                                    #endif
                                    let v9525 : Vec<uint8> = _run_target_args'_v9484 
                                    let v9534 : Vec<uint8> = method25(v9525)
                                    let v9535 : string = "std::string::String::from_utf8($0)"
                                    let v9536 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9534 v9535 
                                    (* run_target_args'
                                    let v9538 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v9539 : string = "$0.unwrap()"
                                    let v9540 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9536 v9539 
                                    let _run_target_args'_v9538 = v9540 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9541 : string = "$0.unwrap()"
                                    let v9542 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9536 v9541 
                                    let _run_target_args'_v9538 = v9542 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9543 : string = "$0.unwrap()"
                                    let v9544 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9536 v9543 
                                    let _run_target_args'_v9538 = v9544 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9545 : std_string_String = match v9536 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9538 = v9545 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9546 : std_string_String = match v9536 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9538 = v9546 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9547 : std_string_String = match v9536 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9538 = v9547 
                                    #endif
#else
                                    let v9548 : std_string_String = match v9536 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v9538 = v9548 
                                    #endif
                                    let v9549 : std_string_String = _run_target_args'_v9538 
                                    let v9552 : string = "fable_library_rust::String_::fromString($0)"
                                    let v9553 : string = Fable.Core.RustInterop.emitRustExpr v9549 v9552 
                                    let _run_target_args'_v9479 = v9553 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v9555 : string = null |> unbox<string>
                                    let _run_target_args'_v9479 = v9555 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v9559 : string = null |> unbox<string>
                                    let _run_target_args'_v9479 = v9559 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v9563 : string = null |> unbox<string>
                                    let _run_target_args'_v9479 = v9563 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v9567 : string = null |> unbox<string>
                                    let _run_target_args'_v9479 = v9567 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v9571 : string = null |> unbox<string>
                                    let _run_target_args'_v9479 = v9571 
                                    #endif
#else
                                    let v9574 : string = v9205 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v9479 = v9574 
                                    #endif
                                    let v9575 : string = _run_target_args'_v9479 
                                    let v9584 : string = "rs"
                                    let v9585 : string = method216(v9584, v9575, v9474)
                                    let v9586 : string = method27(v9585)
                                    let v9587 : string = method32()
                                    let v9588 : US5 = method33(v9587)
                                    let v9594 : US5 =
                                        match v9588 with
                                        | US5_1 -> (* None *)
                                            let v9591 : string = __SOURCE_DIRECTORY__
                                            method33(v9591)
                                        | US5_0(v9589) -> (* Some *)
                                            US5_0(v9589)
                                    let v9600 : US5 =
                                        match v9594 with
                                        | US5_1 -> (* None *)
                                            let v9597 : string = "/workspaces"
                                            method33(v9597)
                                        | US5_0(v9595) -> (* Some *)
                                            US5_0(v9595)
                                    let v9604 : string =
                                        match v9600 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v9601) -> (* Some *)
                                            v9601
                                    let v9605 : string = method53(v9604)
                                    let v9606 : bool = "deps" = v9605
                                    let v9617 : string =
                                        if v9606 then
                                            let v9607 : string option = method39(v9604)
                                            let v9609 : string = v9607 |> Option.get
                                            let v9612 : US5 = method33(v9609)
                                            match v9612 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v9613) -> (* Some *)
                                                v9613
                                        else
                                            v9604
                                    let v9618 : string = "polyglot"
                                    let v9619 : string = method34(v9617, v9618)
                                    let v9620 : string = method32()
                                    let v9622 : (unit -> string) = v9620.ToLower
                                    let v9623 : string = v9622 ()
                                    let v9627 : (unit -> string) = v9619.ToLower
                                    let v9628 : string = v9627 ()
                                    let v9632 : bool = v9623.StartsWith (v9628, false, null)
                                    let v9637 : US14 =
                                        if v9632 then
                                            US14_1(v9628)
                                        else
                                            US14_0(v9628)
                                    let v9649 : Result<string, string> =
                                        match v9637 with
                                        | US14_1(v9643) -> (* Error *)
                                            let v9645 : Result<string, string> = Error v9643 
                                            v9645
                                        | US14_0(v9638) -> (* Ok *)
                                            let v9640 : Result<string, string> = Ok v9638 
                                            v9640
                                    let v9650 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v9651 : bool = Fable.Core.RustInterop.emitRustExpr v9649 v9650 
                                    let v9652 : string = "x"
                                    let v9653 : string = Fable.Core.RustInterop.emitRustExpr () v9652 
                                    let v9654 : string = "true; $0 })"
                                    let v9655 : bool = Fable.Core.RustInterop.emitRustExpr v9653 v9654 
                                    let v9656 : string = "_result_unwrap_or_else"
                                    let v9657 : string = Fable.Core.RustInterop.emitRustExpr () v9656 
                                    let v9658 : string = "spiral"
                                    let v9659 : US42 = US42_0
                                    let v9660 : US43 = US43_0(v9659)
                                    let v9661 : US5 = US5_0(v9586)
                                    let v9662 : string = method217(v9661, v9658, v9660, v9657)
                                    let v9663 : string = "Fable.Core"
                                    let v9664 : string = "4.3.0"
                                    let v9665 : UH4 = UH4_0
                                    let v9666 : UH4 = UH4_1(v9663, v9664, v9665)
                                    let v9667 : UH2 = UH2_0
                                    let v9668 : string = method218(v9575, v9658, v9667, v9666, v9662, v9657)
                                    let v9669 : string = "../../.."
                                    let v9670 : string = method34(v9662, v9669)
                                    let v9671 : string = "Cargo.toml"
                                    let v9672 : string = method34(v9670, v9671)
                                    let v9673 : bool = method36(v9672)
                                    let v9674 : bool = v9673 = false
                                    if v9674 then
                                        (* run_target_args'
                                        let v9681 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9682 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9682 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9683 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9683 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9685 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v9681 = v9685 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9688 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9688 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9689 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9689 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v9690 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9690 
                                        #endif
#else
                                        let v9691 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9681 = v9691 
                                        #endif
                                        let v9692 : System.DateTime = _run_target_args'_v9681 
                                        let v9698 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v9699 : System.Guid = v9698 ()
                                        let v9702 : System.Guid = method221(v9699, v9692)
                                        let v9704 : (System.Guid -> string) = _.ToString()
                                        let v9705 : string = v9704 v9702
                                        let v9708 : string = $"[package]"
                                        let v9709 : string = $"name = \"spiral_{v9705}\""
                                        let v9712 : string = "\n"
                                        let v9713 : string = v9708 + v9712 
                                        let v9717 : string = v9713 + v9709 
                                        let v9720 : string = $"version = \"0.0.1\""
                                        let v9722 : string = v9717 + v9712 
                                        let v9726 : string = v9722 + v9720 
                                        let v9729 : string = $"edition = \"2021\""
                                        let v9731 : string = v9726 + v9712 
                                        let v9735 : string = v9731 + v9729 
                                        let v9738 : string = $""
                                        let v9740 : string = v9735 + v9712 
                                        let v9744 : string = v9740 + v9738 
                                        let v9747 : string = $"[[bin]]"
                                        let v9749 : string = v9744 + v9712 
                                        let v9753 : string = v9749 + v9747 
                                        let v9756 : string = $"name = \"spiral_{v9705}\""
                                        let v9758 : string = v9753 + v9712 
                                        let v9762 : string = v9758 + v9756 
                                        let v9765 : string = $"path = \"spiral.rs\""
                                        let v9767 : string = v9762 + v9712 
                                        let v9771 : string = v9767 + v9765 
                                        (* run_target_args'
                                        let v9774 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9775 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v9672, v9771) v9775 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v9672, v9771)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v9776 : string = method34(v9662, v9671)
                                    let v9777 : bool = method36(v9776)
                                    let v9778 : bool = v9777 = false
                                    if v9778 then
                                        (* run_target_args'
                                        let v9785 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9786 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9786 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9787 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9787 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9789 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v9785 = v9789 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9792 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9792 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9793 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9793 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v9794 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9794 
                                        #endif
#else
                                        let v9795 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v9785 = v9795 
                                        #endif
                                        let v9796 : System.DateTime = _run_target_args'_v9785 
                                        let v9802 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v9803 : System.Guid = v9802 ()
                                        let v9806 : System.Guid = method221(v9803, v9796)
                                        let v9808 : (System.Guid -> string) = _.ToString()
                                        let v9809 : string = v9808 v9806
                                        let v9812 : string = $"[package]"
                                        let v9813 : string = $"name = \"spiral_{v9809}\""
                                        let v9816 : string = "\n"
                                        let v9817 : string = v9812 + v9816 
                                        let v9821 : string = v9817 + v9813 
                                        let v9824 : string = $"version = \"0.0.1\""
                                        let v9826 : string = v9821 + v9816 
                                        let v9830 : string = v9826 + v9824 
                                        let v9833 : string = $"edition = \"2021\""
                                        let v9835 : string = v9830 + v9816 
                                        let v9839 : string = v9835 + v9833 
                                        let v9842 : string = $""
                                        let v9844 : string = v9839 + v9816 
                                        let v9848 : string = v9844 + v9842 
                                        let v9851 : string = $"[[bin]]"
                                        let v9853 : string = v9848 + v9816 
                                        let v9857 : string = v9853 + v9851 
                                        let v9860 : string = $"name = \"spiral_{v9809}\""
                                        let v9862 : string = v9857 + v9816 
                                        let v9866 : string = v9862 + v9860 
                                        let v9869 : string = $"path = \"spiral.rs\""
                                        let v9871 : string = v9866 + v9816 
                                        let v9875 : string = v9871 + v9869 
                                        (* run_target_args'
                                        let v9878 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9879 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v9776, v9875) v9879 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v9776, v9875)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v9880 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v9881 : string = method34(v9657, v9880)
                                    let v9882 : string = "fable_modules/fable-library-rust"
                                    let v9883 : string = method34(v9662, v9882)
                                    method226(v9881, v9883)
                                    let struct (v9884 : int32, v9885 : string) = method227(v9474, v9662, v9584, v9668, v9637)
                                    let v9887 : bool = v9884 <> 0 
                                    let struct (v15093 : US5, v15094 : US5, v15095 : US5, v15096 : US5) =
                                        if v9887 then
                                            let v10201 : unit = ()
                                            let v10202 : (unit -> unit) = closure89(v9885, v9884)
                                            let v10203 : unit = (fun () -> v10202 (); v10201) ()
                                            let v10518 : US5 = US5_0(v9584)
                                            let v10519 : US5 = US5_1
                                            let v10520 : US5 = US5_1
                                            let v10521 : US5 = US5_0(v9885)
                                            struct (v10518, v10519, v10520, v10521)
                                        else
                                            let v10522 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v10628 : Vec<std_string_String> =
                                                if v10522 then
                                                    v9278
                                                else
                                                    let v10523 : (std_string_String -> bool) = method237()
                                                    let v10524 : Vec<std_string_String> = method238(v9278)
                                                    let v10525 : string = "v10524.into_iter().filter(|x| v10523(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v10526 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10525 
                                                    let v10527 : string = "$0.len()"
                                                    let v10528 : unativeint = Fable.Core.RustInterop.emitRustExpr v10526 v10527 
                                                    let v10534 : int32 = v10528 |> int32 
                                                    let v10542 : bool = v10534 > 0
                                                    if v10542 then
                                                        v9278
                                                    else
                                                        let v10543 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v10548 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v10549 : string = "&*$0"
                                                        let v10550 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10543 v10549 
                                                        let _run_target_args'_v10548 = v10550 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v10551 : string = "&*$0"
                                                        let v10552 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10543 v10551 
                                                        let _run_target_args'_v10548 = v10552 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v10553 : string = "&*$0"
                                                        let v10554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10543 v10553 
                                                        let _run_target_args'_v10548 = v10554 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v10556 : Ref<Str> = v10543 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10548 = v10556 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v10560 : Ref<Str> = v10543 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10548 = v10560 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v10564 : Ref<Str> = v10543 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10548 = v10564 
                                                        #endif
#else
                                                        let v10568 : Ref<Str> = v10543 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v10548 = v10568 
                                                        #endif
                                                        let v10571 : Ref<Str> = _run_target_args'_v10548 
                                                        (* run_target_args'
                                                        let v10584 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v10585 : string = "String::from($0)"
                                                        let v10586 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10571 v10585 
                                                        let _run_target_args'_v10584 = v10586 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v10587 : string = "String::from($0)"
                                                        let v10588 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10571 v10587 
                                                        let _run_target_args'_v10584 = v10588 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v10589 : string = "String::from($0)"
                                                        let v10590 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10571 v10589 
                                                        let _run_target_args'_v10584 = v10590 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v10592 : std_string_String = v10571 |> unbox<std_string_String>
                                                        let _run_target_args'_v10584 = v10592 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v10596 : std_string_String = v10571 |> unbox<std_string_String>
                                                        let _run_target_args'_v10584 = v10596 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v10600 : std_string_String = v10571 |> unbox<std_string_String>
                                                        let _run_target_args'_v10584 = v10600 
                                                        #endif
#else
                                                        let v10604 : std_string_String = v10571 |> unbox<std_string_String>
                                                        let _run_target_args'_v10584 = v10604 
                                                        #endif
                                                        let v10607 : std_string_String = _run_target_args'_v10584 
                                                        let v10616 : (std_string_String []) = [|v10607|]
                                                        let v10617 : string = "$0.to_vec()"
                                                        let v10618 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v10616 v10617 
                                                        let v10619 : Vec<std_string_String> = method71(v10618)
                                                        let v10620 : Vec<std_string_String> = method72(v9278)
                                                        let v10621 : string = "true; let mut v10620 = v10620"
                                                        let v10622 : bool = Fable.Core.RustInterop.emitRustExpr () v10621 
                                                        let v10623 : string = "true; v10620.extend(v10619)"
                                                        let v10624 : bool = Fable.Core.RustInterop.emitRustExpr () v10623 
                                                        let v10625 : string = "v10620"
                                                        let v10626 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v10625 
                                                        v10626
                                            let v10629 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v10630 : bool = Fable.Core.RustInterop.emitRustExpr v10628 v10629 
                                            let v10631 : string = "x"
                                            let v10632 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10631 
                                            let v10633 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10634 : string = Fable.Core.RustInterop.emitRustExpr v10632 v10633 
                                            let v10637 : string = "="
                                            let v10638 : bool = v10634.Contains v10637 
                                            let v10653 : string =
                                                if v10638 then
                                                    v10634
                                                else
                                                    let v10643 : string = "]"
                                                    let v10644 : bool = v10634.EndsWith (v10643, false, null)
                                                    if v10644 then
                                                        let v10647 : string = $"={{version='*',features=["
                                                        let v10648 : string = "["
                                                        let v10649 : string = v10634.Replace (v10648, v10647)
                                                        let v10650 : string = $"{v10649}}}"
                                                        v10650
                                                    else
                                                        let v10651 : string = $"{v10634}='*'"
                                                        v10651
                                            let v10654 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v10655 : bool = Fable.Core.RustInterop.emitRustExpr v10653 v10654 
                                            let v10656 : string = "_vec_map"
                                            let v10657 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v10656 
                                            let v10658 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v10659 : (string []) = Fable.Core.RustInterop.emitRustExpr v10657 v10658 
                                            let v10664 : unit = ()
                                            let _let'_v10664 =
                                                seq {
                                                    for i = 0 to v10659.Length - 1 do yield v10659.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v10667 : string seq = _let'_v10664 
                                            let v10675 : string = method73()
                                            let v10676 : (string -> (string seq -> string)) = String.concat
                                            let v10677 : (string seq -> string) = v10676 v10675
                                            let v10678 : string = v10677 v10667
                                            let v10682 : string = $"{v9658}.{v9584}"
                                            let v10683 : string = method34(v9662, v10682)
                                            (* run_target_args'
                                            let v10688 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v10693 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10694 : string = "std::fs::read(&*$0)"
                                            let v10695 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10683 v10694 
                                            (* run_target_args'
                                            let v10697 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10698 : string = "$0.unwrap()"
                                            let v10699 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10695 v10698 
                                            let _run_target_args'_v10697 = v10699 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10700 : string = "$0.unwrap()"
                                            let v10701 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10695 v10700 
                                            let _run_target_args'_v10697 = v10701 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10702 : string = "$0.unwrap()"
                                            let v10703 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10695 v10702 
                                            let _run_target_args'_v10697 = v10703 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10704 : Vec<uint8> = match v10695 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10697 = v10704 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10705 : Vec<uint8> = match v10695 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10697 = v10705 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10706 : Vec<uint8> = match v10695 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10697 = v10706 
                                            #endif
#else
                                            let v10707 : Vec<uint8> = match v10695 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10697 = v10707 
                                            #endif
                                            let v10708 : Vec<uint8> = _run_target_args'_v10697 
                                            let _run_target_args'_v10693 = v10708 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10712 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10693 = v10712 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10716 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10693 = v10716 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10720 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10693 = v10720 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10724 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10693 = v10724 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10728 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v10693 = v10728 
                                            #endif
#else
                                            let v10731 : (uint8 []) = v10683 |> System.IO.File.ReadAllBytes
                                            let v10732 : string = "$0.to_vec()"
                                            let v10733 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v10731 v10732 
                                            let _run_target_args'_v10693 = v10733 
                                            #endif
                                            let v10734 : Vec<uint8> = _run_target_args'_v10693 
                                            let v10743 : Vec<uint8> = method25(v10734)
                                            let v10744 : string = "std::string::String::from_utf8($0)"
                                            let v10745 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v10743 v10744 
                                            (* run_target_args'
                                            let v10747 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v10748 : string = "$0.unwrap()"
                                            let v10749 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10745 v10748 
                                            let _run_target_args'_v10747 = v10749 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10750 : string = "$0.unwrap()"
                                            let v10751 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10745 v10750 
                                            let _run_target_args'_v10747 = v10751 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10752 : string = "$0.unwrap()"
                                            let v10753 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10745 v10752 
                                            let _run_target_args'_v10747 = v10753 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10754 : std_string_String = match v10745 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10747 = v10754 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10755 : std_string_String = match v10745 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10747 = v10755 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10756 : std_string_String = match v10745 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10747 = v10756 
                                            #endif
#else
                                            let v10757 : std_string_String = match v10745 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v10747 = v10757 
                                            #endif
                                            let v10758 : std_string_String = _run_target_args'_v10747 
                                            let v10761 : string = "fable_library_rust::String_::fromString($0)"
                                            let v10762 : string = Fable.Core.RustInterop.emitRustExpr v10758 v10761 
                                            let _run_target_args'_v10688 = v10762 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v10764 : string = null |> unbox<string>
                                            let _run_target_args'_v10688 = v10764 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v10768 : string = null |> unbox<string>
                                            let _run_target_args'_v10688 = v10768 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v10772 : string = null |> unbox<string>
                                            let _run_target_args'_v10688 = v10772 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v10776 : string = null |> unbox<string>
                                            let _run_target_args'_v10688 = v10776 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v10780 : string = null |> unbox<string>
                                            let _run_target_args'_v10688 = v10780 
                                            #endif
#else
                                            let v10783 : string = v10683 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v10688 = v10783 
                                            #endif
                                            let v10784 : string = _run_target_args'_v10688 
                                            let v10793 : string = method239()
                                            let v10796 : string = "on_startup!"
                                            let v10797 : string = v10796 + v10793 
                                            let v10800 : string = method240()
                                            let v10803 : string = " method0"
                                            let v10804 : string = v10803 + v10800 
                                            let v10808 : bool = v10784.Contains v10797 
                                            let v10816 : bool =
                                                if v10808 then
                                                    let v10812 : bool = v10784.Contains v10804 
                                                    let v10815 : bool = v10812 = false
                                                    v10815
                                                else
                                                    false
                                            let v10817 : string = $"cargo-features = [\"edition2024\"]"
                                            let v10818 : string = $""
                                            let v10821 : string = "\n"
                                            let v10822 : string = v10817 + v10821 
                                            let v10826 : string = v10822 + v10818 
                                            let v10829 : string = $"[package]"
                                            let v10831 : string = v10826 + v10821 
                                            let v10835 : string = v10831 + v10829 
                                            let v10838 : string = $"name = \"spiral_{v9586}\""
                                            let v10840 : string = v10835 + v10821 
                                            let v10844 : string = v10840 + v10838 
                                            let v10847 : string = $"version = \"0.0.1\""
                                            let v10849 : string = v10844 + v10821 
                                            let v10853 : string = v10849 + v10847 
                                            let v10856 : string = $"edition = \"2024\""
                                            let v10858 : string = v10853 + v10821 
                                            let v10862 : string = v10858 + v10856 
                                            let v10865 : string = $""
                                            let v10867 : string = v10862 + v10821 
                                            let v10871 : string = v10867 + v10865 
                                            let v10874 : string = $"[dependencies]"
                                            let v10876 : string = v10871 + v10821 
                                            let v10880 : string = v10876 + v10874 
                                            let v10885 : US40 = US40_1
                                            let v10886 : bool = v9474 <> v10885 
                                            let v10904 : string =
                                                if v10886 then
                                                    let v10890 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v10890
                                                else
                                                    let v10891 : string = $"fable_library_rust = {{"
                                                    let v10892 : string = $" workspace = true,"
                                                    let v10893 : string = v10891 + v10892 
                                                    let v10894 : string = $" features = ["
                                                    let v10895 : string = v10893 + v10894 
                                                    let v10898 : string =
                                                        if v10816 then
                                                            let v10896 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v10896
                                                        else
                                                            let v10897 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v10897
                                                    let v10899 : string = v10895 + v10898 
                                                    let v10900 : string = $"]"
                                                    let v10901 : string = v10899 + v10900 
                                                    let v10902 : string = $"}}"
                                                    let v10903 : string = v10901 + v10902 
                                                    v10903
                                            let v10906 : string = v10880 + v10821 
                                            let v10910 : string = v10906 + v10904 
                                            let v10913 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v10915 : string = v10910 + v10821 
                                            let v10919 : string = v10915 + v10913 
                                            let v10922 : string = $"{v10678}"
                                            let v10924 : string = v10919 + v10821 
                                            let v10928 : string = v10924 + v10922 
                                            let v10931 : string = $""
                                            let v10933 : string = v10928 + v10821 
                                            let v10937 : string = v10933 + v10931 
                                            let v10940 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v10961 : string =
                                                if v10940 then
                                                    let v10941 : string = $"[[bin]]"
                                                    let v10942 : string = $"name = \"spiral_{v9586}\""
                                                    let v10944 : string = v10941 + v10821 
                                                    let v10948 : string = v10944 + v10942 
                                                    v10948
                                                else
                                                    let v10951 : string = $"[lib]"
                                                    let v10952 : string = $"crate-type = [\"cdylib\"]"
                                                    let v10954 : string = v10951 + v10821 
                                                    let v10958 : string = v10954 + v10952 
                                                    v10958
                                            let v10963 : string = v10937 + v10821 
                                            let v10967 : string = v10963 + v10961 
                                            let v10970 : string = $"path = \"spiral.rs\""
                                            let v10972 : string = v10967 + v10821 
                                            let v10976 : string = v10972 + v10970 
                                            let v10979 : string = method44(v9657)
                                            let v10980 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v10981 : string = $""
                                            let v10983 : string = v10980 + v10821 
                                            let v10987 : string = v10983 + v10981 
                                            let v10990 : string = $"[workspace]"
                                            let v10992 : string = v10987 + v10821 
                                            let v10996 : string = v10992 + v10990 
                                            let v10999 : string = $"resolver = \"2\""
                                            let v11001 : string = v10996 + v10821 
                                            let v11005 : string = v11001 + v10999 
                                            let v11008 : string = $"members = [\"packages/Rust/*\"]"
                                            let v11010 : string = v11005 + v10821 
                                            let v11014 : string = v11010 + v11008 
                                            let v11017 : string = $""
                                            let v11019 : string = v11014 + v10821 
                                            let v11023 : string = v11019 + v11017 
                                            let v11026 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v11028 : string = v11023 + v10821 
                                            let v11032 : string = v11028 + v11026 
                                            let v11035 : string = $"path = \"{v10979}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v11037 : string = v11032 + v10821 
                                            let v11041 : string = v11037 + v11035 
                                            let v11044 : string = $"default-features = false"
                                            let v11046 : string = v11041 + v10821 
                                            let v11050 : string = v11046 + v11044 
                                            let v11053 : string = $"features = []"
                                            let v11055 : string = v11050 + v10821 
                                            let v11059 : string = v11055 + v11053 
                                            let v11062 : string = $""
                                            let v11064 : string = v11059 + v10821 
                                            let v11068 : string = v11064 + v11062 
                                            let v11071 : string = $"[workspace.dependencies]"
                                            let v11073 : string = v11068 + v10821 
                                            let v11077 : string = v11073 + v11071 
                                            let v11080 : string = $"inline_colorization = \"~0.1\""
                                            let v11082 : string = v11077 + v10821 
                                            let v11086 : string = v11082 + v11080 
                                            let v11089 : string = $""
                                            let v11091 : string = v11086 + v10821 
                                            let v11095 : string = v11091 + v11089 
                                            let v11098 : string = $"[profile.release]"
                                            let v11100 : string = v11095 + v10821 
                                            let v11104 : string = v11100 + v11098 
                                            let v11107 : string = $"codegen-units = 1"
                                            let v11109 : string = v11104 + v10821 
                                            let v11113 : string = v11109 + v11107 
                                            let v11116 : string = $"opt-level = \"z\""
                                            let v11118 : string = v11113 + v10821 
                                            let v11122 : string = v11118 + v11116 
                                            let v11125 : string = $"lto = true"
                                            let v11127 : string = v11122 + v10821 
                                            let v11131 : string = v11127 + v11125 
                                            let v11134 : string = $"debug = false"
                                            let v11136 : string = v11131 + v10821 
                                            let v11140 : string = v11136 + v11134 
                                            let v11143 : string = $"panic = \"abort\""
                                            let v11145 : string = v11140 + v10821 
                                            let v11149 : string = v11145 + v11143 
                                            let v11152 : string = $"overflow-checks = true"
                                            let v11154 : string = v11149 + v10821 
                                            let v11158 : string = v11154 + v11152 
                                            let v11161 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v11163 : string = v11158 + v10821 
                                            let v11167 : string = v11163 + v11161 
                                            method74(v9776, v10976)
                                            method74(v9672, v11167)
                                            let v11170 : string = "src/Range.rs"
                                            let v11171 : string = method34(v9883, v11170)
                                            let v11172 : bool = method36(v11171)
                                            if v11172 then
                                                (* run_target_args'
                                                let v11177 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v11182 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11183 : string = "std::fs::read(&*$0)"
                                                let v11184 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v11171 v11183 
                                                (* run_target_args'
                                                let v11186 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11187 : string = "$0.unwrap()"
                                                let v11188 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11184 v11187 
                                                let _run_target_args'_v11186 = v11188 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11189 : string = "$0.unwrap()"
                                                let v11190 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11184 v11189 
                                                let _run_target_args'_v11186 = v11190 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11191 : string = "$0.unwrap()"
                                                let v11192 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11184 v11191 
                                                let _run_target_args'_v11186 = v11192 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11193 : Vec<uint8> = match v11184 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11186 = v11193 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11194 : Vec<uint8> = match v11184 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11186 = v11194 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11195 : Vec<uint8> = match v11184 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11186 = v11195 
                                                #endif
#else
                                                let v11196 : Vec<uint8> = match v11184 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11186 = v11196 
                                                #endif
                                                let v11197 : Vec<uint8> = _run_target_args'_v11186 
                                                let _run_target_args'_v11182 = v11197 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11201 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11182 = v11201 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11205 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11182 = v11205 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11209 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11182 = v11209 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11213 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11182 = v11213 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11217 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v11182 = v11217 
                                                #endif
#else
                                                let v11220 : (uint8 []) = v11171 |> System.IO.File.ReadAllBytes
                                                let v11221 : string = "$0.to_vec()"
                                                let v11222 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11220 v11221 
                                                let _run_target_args'_v11182 = v11222 
                                                #endif
                                                let v11223 : Vec<uint8> = _run_target_args'_v11182 
                                                let v11232 : Vec<uint8> = method25(v11223)
                                                let v11233 : string = "std::string::String::from_utf8($0)"
                                                let v11234 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v11232 v11233 
                                                (* run_target_args'
                                                let v11236 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v11237 : string = "$0.unwrap()"
                                                let v11238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11234 v11237 
                                                let _run_target_args'_v11236 = v11238 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11239 : string = "$0.unwrap()"
                                                let v11240 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11234 v11239 
                                                let _run_target_args'_v11236 = v11240 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11241 : string = "$0.unwrap()"
                                                let v11242 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11234 v11241 
                                                let _run_target_args'_v11236 = v11242 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11243 : std_string_String = match v11234 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11236 = v11243 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11244 : std_string_String = match v11234 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11236 = v11244 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11245 : std_string_String = match v11234 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11236 = v11245 
                                                #endif
#else
                                                let v11246 : std_string_String = match v11234 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v11236 = v11246 
                                                #endif
                                                let v11247 : std_string_String = _run_target_args'_v11236 
                                                let v11250 : string = "fable_library_rust::String_::fromString($0)"
                                                let v11251 : string = Fable.Core.RustInterop.emitRustExpr v11247 v11250 
                                                let _run_target_args'_v11177 = v11251 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v11253 : string = null |> unbox<string>
                                                let _run_target_args'_v11177 = v11253 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v11257 : string = null |> unbox<string>
                                                let _run_target_args'_v11177 = v11257 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v11261 : string = null |> unbox<string>
                                                let _run_target_args'_v11177 = v11261 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v11265 : string = null |> unbox<string>
                                                let _run_target_args'_v11177 = v11265 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v11269 : string = null |> unbox<string>
                                                let _run_target_args'_v11177 = v11269 
                                                #endif
#else
                                                let v11272 : string = v11171 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v11177 = v11272 
                                                #endif
                                                let v11273 : string = _run_target_args'_v11177 
                                                let v11282 : string = "use crate::String_::fromCharCode;"
                                                let v11283 : string = "use crate::String_::fromChar;"
                                                let v11284 : string = v11273.Replace (v11282, v11283)
                                                let v11285 : string = "fromCharCode(c)"
                                                let v11286 : string = "std::char::from_u32(c).unwrap()"
                                                let v11287 : string = v11284.Replace (v11285, v11286)
                                                method74(v11171, v11287)
                                            let v11288 : uint8 = 1uy
                                            let struct (v11289 : int32, v11290 : string) = method241(v9637, v9776, v11288)
                                            let v11292 : bool = v11289 <> 0 
                                            if v11292 then
                                                let v11604 : unit = ()
                                                let v11605 : (unit -> unit) = closure93(v11290, v11289)
                                                let v11606 : unit = (fun () -> v11605 (); v11604) ()
                                                ()
                                            (* run_target_args'
                                            let v11923 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v11928 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11929 : string = "std::fs::read(&*$0)"
                                            let v11930 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v10683 v11929 
                                            (* run_target_args'
                                            let v11932 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11933 : string = "$0.unwrap()"
                                            let v11934 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11930 v11933 
                                            let _run_target_args'_v11932 = v11934 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11935 : string = "$0.unwrap()"
                                            let v11936 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11930 v11935 
                                            let _run_target_args'_v11932 = v11936 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11937 : string = "$0.unwrap()"
                                            let v11938 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11930 v11937 
                                            let _run_target_args'_v11932 = v11938 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11939 : Vec<uint8> = match v11930 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11932 = v11939 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11940 : Vec<uint8> = match v11930 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11932 = v11940 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11941 : Vec<uint8> = match v11930 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11932 = v11941 
                                            #endif
#else
                                            let v11942 : Vec<uint8> = match v11930 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11932 = v11942 
                                            #endif
                                            let v11943 : Vec<uint8> = _run_target_args'_v11932 
                                            let _run_target_args'_v11928 = v11943 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11947 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11928 = v11947 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11951 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11928 = v11951 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11955 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11928 = v11955 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11959 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11928 = v11959 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11963 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v11928 = v11963 
                                            #endif
#else
                                            let v11966 : (uint8 []) = v10683 |> System.IO.File.ReadAllBytes
                                            let v11967 : string = "$0.to_vec()"
                                            let v11968 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v11966 v11967 
                                            let _run_target_args'_v11928 = v11968 
                                            #endif
                                            let v11969 : Vec<uint8> = _run_target_args'_v11928 
                                            let v11978 : Vec<uint8> = method25(v11969)
                                            let v11979 : string = "std::string::String::from_utf8($0)"
                                            let v11980 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v11978 v11979 
                                            (* run_target_args'
                                            let v11982 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11983 : string = "$0.unwrap()"
                                            let v11984 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11980 v11983 
                                            let _run_target_args'_v11982 = v11984 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11985 : string = "$0.unwrap()"
                                            let v11986 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11980 v11985 
                                            let _run_target_args'_v11982 = v11986 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11987 : string = "$0.unwrap()"
                                            let v11988 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11980 v11987 
                                            let _run_target_args'_v11982 = v11988 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11989 : std_string_String = match v11980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11982 = v11989 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v11990 : std_string_String = match v11980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11982 = v11990 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v11991 : std_string_String = match v11980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11982 = v11991 
                                            #endif
#else
                                            let v11992 : std_string_String = match v11980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v11982 = v11992 
                                            #endif
                                            let v11993 : std_string_String = _run_target_args'_v11982 
                                            let v11996 : string = "fable_library_rust::String_::fromString($0)"
                                            let v11997 : string = Fable.Core.RustInterop.emitRustExpr v11993 v11996 
                                            let _run_target_args'_v11923 = v11997 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11999 : string = null |> unbox<string>
                                            let _run_target_args'_v11923 = v11999 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12003 : string = null |> unbox<string>
                                            let _run_target_args'_v11923 = v12003 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12007 : string = null |> unbox<string>
                                            let _run_target_args'_v11923 = v12007 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12011 : string = null |> unbox<string>
                                            let _run_target_args'_v11923 = v12011 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12015 : string = null |> unbox<string>
                                            let _run_target_args'_v11923 = v12015 
                                            #endif
#else
                                            let v12018 : string = v10683 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v11923 = v12018 
                                            #endif
                                            let v12019 : string = _run_target_args'_v11923 
                                            let v12028 : string = method247()
                                            let v12031 : string = "pub fn main() -> Result<(), String> "
                                            let v12032 : string = v12031 + v12028 
                                            let v12035 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12128 : string =
                                                if v12035 then
                                                    let v12036 : string = ""
                                                    v12036
                                                else
                                                    let v12037 : string = $"#[near_sdk::near_bindgen]"
                                                    let v12038 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v12040 : string = v12037 + v10821 
                                                    let v12044 : string = v12040 + v12038 
                                                    let v12047 : string = $"pub struct MainState {{"
                                                    let v12049 : string = v12044 + v10821 
                                                    let v12053 : string = v12049 + v12047 
                                                    let v12056 : string = $"}}"
                                                    let v12058 : string = v12053 + v10821 
                                                    let v12062 : string = v12058 + v12056 
                                                    let v12065 : string = $""
                                                    let v12067 : string = v12062 + v10821 
                                                    let v12071 : string = v12067 + v12065 
                                                    let v12074 : string = $"#[near_sdk::near_bindgen]"
                                                    let v12076 : string = v12071 + v10821 
                                                    let v12080 : string = v12076 + v12074 
                                                    let v12083 : string = $"impl MainState {{"
                                                    let v12085 : string = v12080 + v10821 
                                                    let v12089 : string = v12085 + v12083 
                                                    let v12092 : string = $"    pub fn state_main() {{"
                                                    let v12094 : string = v12089 + v10821 
                                                    let v12098 : string = v12094 + v12092 
                                                    let v12101 : string = $"        Spiral::method0();"
                                                    let v12103 : string = v12098 + v10821 
                                                    let v12107 : string = v12103 + v12101 
                                                    let v12110 : string = $"    }}"
                                                    let v12112 : string = v12107 + v10821 
                                                    let v12116 : string = v12112 + v12110 
                                                    let v12119 : string = $"}}"
                                                    let v12121 : string = v12116 + v10821 
                                                    let v12125 : string = v12121 + v12119 
                                                    v12125
                                            let v12129 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12140 : bool =
                                                if v12129 then
                                                    let v12132 : string = "Spiral::method0()"
                                                    let v12133 : string = v10797 + v12132 
                                                    let v12137 : bool = v12019.Contains v12133 
                                                    v12137
                                                else
                                                    false
                                            let v12143 : string =
                                                if v12140 then
                                                    let v12141 : string = $"{v12032} Ok(Spiral::method0()) }}"
                                                    v12141
                                                else
                                                    let v12142 : string = $"{v12032} Ok(()) }}"
                                                    v12142
                                            let v12145 : string = v12128 + v10821 
                                            let v12149 : string = v12145 + v12143 
                                            let v12153 : bool = v12019.Contains v12032 
                                            let v12156 : string = $"{v12019}\n\n{v12149}\n"
                                            let v12349 : string =
                                                if v12153 then
                                                    v12019
                                                else
                                                    let v12160 : bool =
                                                        match v9474 with
                                                        | US40_0(v12157) -> (* Some *)
                                                            match v12157 with
                                                            | US41_1(v12158) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v12161 : string = "\";\".into()"
                                                    let v12162 : string = Fable.Core.RustInterop.emitRustExpr () v12161 
                                                    let v12165 : string = "),)"
                                                    let v12166 : string = v12165 + v12162 
                                                    let v12169 : string = "));"
                                                    let v12170 : string = v12156.Replace (v12166, v12169)
                                                    let v12171 : string = "\";\".into()"
                                                    let v12172 : string = Fable.Core.RustInterop.emitRustExpr () v12171 
                                                    let v12175 : string = "},)"
                                                    let v12176 : string = v12175 + v12172 
                                                    let v12179 : string = "});"
                                                    let v12180 : string = v12170.Replace (v12176, v12179)
                                                    let v12181 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v12182 : string = " defaultOf::<()>();"
                                                    let v12183 : string = method64(v12181, v12182, v12180)
                                                    let v12184 : string = "\\s\\sgetZero\\(\\);"
                                                    let v12185 : string = " getZero::<()>();"
                                                    let v12186 : string = method64(v12184, v12185, v12183)
                                                    let v12187 : string = "\"t\".into()"
                                                    let v12188 : string = Fable.Core.RustInterop.emitRustExpr () v12187 
                                                    let v12191 : string = "(&e.get_Curren"
                                                    let v12192 : string = v12191 + v12188 
                                                    let v12195 : string = "(e.get_Current"
                                                    let v12196 : string = v12186.Replace (v12192, v12195)
                                                    let v12197 : string = "\"::<()>()\".into()"
                                                    let v12198 : string = Fable.Core.RustInterop.emitRustExpr () v12197 
                                                    let v12201 : string = "getNull"
                                                    let v12202 : string = v12201 + v12198 
                                                    let v12205 : string = "fable_library_rust::Native_::getZero()"
                                                    let v12206 : string = v12196.Replace (v12202, v12205)
                                                    let v12207 : string = $"\")\".into()"
                                                    let v12208 : string = Fable.Core.RustInterop.emitRustExpr () v12207 
                                                    let v12211 : string = "null::<()>("
                                                    let v12212 : string = v12211 + v12208 
                                                    let v12215 : string = v12206.Replace (v12212, v12205)
                                                    let v12216 : string = "null::<\\(\\)>\\(\\)"
                                                    let v12217 : string = method64(v12216, v12205, v12215)
                                                    let v12218 : string = "\\(null::<\\(\\)>\\(\\)"
                                                    let v12219 : string = "(null()"
                                                    let v12220 : string = method64(v12218, v12219, v12217)
                                                    let v12221 : string = " null::<\\(\\)>\\(\\)"
                                                    let v12222 : string = " null()"
                                                    let v12223 : string = method64(v12221, v12222, v12220)
                                                    let v12224 : string = "unbox::<bool>\\(null\\(\\)"
                                                    let v12225 : string = "false"
                                                    let v12226 : string = method64(v12224, v12225, v12223)
                                                    let v12227 : string = "unbox::<string>\\(null\\(\\)"
                                                    let v12228 : string = method64(v12227, v12205, v12226)
                                                    let v12229 : string = "unbox::<i32>\\(null\\(\\)"
                                                    let v12230 : string = "0"
                                                    let v12231 : string = method64(v12229, v12230, v12228)
                                                    let v12232 : string = "unbox::<i32>\\(null::<\\(\\)>\\(\\)\\)"
                                                    let v12233 : string = method64(v12232, v12230, v12231)
                                                    let v12234 : string = "null\\(\\)"
                                                    let v12235 : string = method64(v12234, v12205, v12233)
                                                    let v12236 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v12237 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v12238 : string = method64(v12236, v12237, v12235)
                                                    let v12239 : string = " gen:"
                                                    let v12240 : string = " f:"
                                                    let v12241 : string = v12238.Replace (v12239, v12240)
                                                    let v12242 : string = "\\(gen\\("
                                                    let v12243 : string = "(f("
                                                    let v12244 : string = method64(v12242, v12243, v12241)
                                                    let v12245 : string = "\\(gen,"
                                                    let v12246 : string = "(f,"
                                                    let v12247 : string = method64(v12245, v12246, v12244)
                                                    let v12248 : string = " gen "
                                                    let v12249 : string = " f "
                                                    let v12250 : string = v12247.Replace (v12248, v12249)
                                                    let v12251 : string = "::Slice'_"
                                                    let v12252 : string = "::Slice__"
                                                    let v12253 : string = v12250.Replace (v12251, v12252)
                                                    let v12254 : string = " Slice'_"
                                                    let v12255 : string = " Slice__"
                                                    let v12256 : string = v12253.Replace (v12254, v12255)
                                                    let v12257 : string = "\",\".into()"
                                                    let v12258 : string = Fable.Core.RustInterop.emitRustExpr () v12257 
                                                    let v12261 : string = "defaultOf()"
                                                    let v12262 : string = v12261 + v12258 
                                                    let v12265 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v12266 : string = v12256.Replace (v12262, v12265)
                                                    let v12267 : string = "\"__.\".into()"
                                                    let v12268 : string = Fable.Core.RustInterop.emitRustExpr () v12267 
                                                    let v12271 : string = "__self"
                                                    let v12272 : string = v12271 + v12268 
                                                    let v12275 : string = "self."
                                                    let v12276 : string = v12266.Replace (v12272, v12275)
                                                    let v12277 : string = "\"_.\".into()"
                                                    let v12278 : string = Fable.Core.RustInterop.emitRustExpr () v12277 
                                                    let v12281 : string = "_self"
                                                    let v12282 : string = v12281 + v12278 
                                                    let v12285 : string = v12276.Replace (v12282, v12275)
                                                    let v12286 : string = "\"h\".into()"
                                                    let v12287 : string = Fable.Core.RustInterop.emitRustExpr () v12286 
                                                    let v12290 : string = "get_or_insert_wit"
                                                    let v12291 : string = v12290 + v12287 
                                                    let v12294 : string = "get_or_init"
                                                    let v12295 : string = v12285.Replace (v12291, v12294)
                                                    let v12296 : string = "\";\".into()"
                                                    let v12297 : string = Fable.Core.RustInterop.emitRustExpr () v12296 
                                                    let v12300 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v12301 : string = v12300 + v12297 
                                                    let v12304 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v12305 : string = v12295.Replace (v12301, v12304)
                                                    let v12306 : string = "\";\".into()"
                                                    let v12307 : string = Fable.Core.RustInterop.emitRustExpr () v12306 
                                                    let v12310 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v12311 : string = v12310 + v12307 
                                                    let v12314 : string = "type TimeZoneInfo = i64;"
                                                    let v12315 : string = v12305.Replace (v12311, v12314)
                                                    let v12316 : string = "\";\".into()"
                                                    let v12317 : string = Fable.Core.RustInterop.emitRustExpr () v12316 
                                                    let v12320 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v12321 : string = v12320 + v12317 
                                                    let v12324 : string = "type TaskCanceledException = ();"
                                                    let v12325 : string = v12315.Replace (v12321, v12324)
                                                    let v12334 : (string -> string) =
                                                        if v10816 then
                                                            closure94()
                                                        else
                                                            let v12329 : string = "// "
                                                            let v12330 : string = v12329 + v10797 
                                                            closure95(v10797, v12330)
                                                    let v12335 : string = v12334 v12325
                                                    let v12336 : bool = v12160 = false
                                                    let v12347 : (string -> string) =
                                                        if v12336 then
                                                            closure94()
                                                        else
                                                            let v12341 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v12342 : string = ";"
                                                            let v12343 : string = v12341 + v12342 
                                                            closure96(v12343)
                                                    v12347 v12335
                                            let v12350 : bool = v12153 = false
                                            if v12350 then
                                                method74(v10683, v12349)
                                            let v12351 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12352 : bool = v12351 <> true
                                            let v12355 : string =
                                                if v12352 then
                                                    let v12353 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v9776}\""
                                                    v12353
                                                else
                                                    let v12354 : string = $"cargo run --manifest-path \"{v9776}\""
                                                    v12354
                                            let v12356 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v12357 : bool = v12356 <> true
                                            let v12368 : (struct (string * string) []) =
                                                if v12357 then
                                                    [||]
                                                else
                                                    let v12359 : string = "TRACE_LEVEL"
                                                    let v12360 : string = "Verbose"
                                                    let v12361 : string = "RUSTC_WRAPPER"
                                                    let v12362 : string = "sccache"
                                                    let v12363 : string = "RUST_BACKTRACE"
                                                    let v12364 : string = "full"
                                                    let v12365 : string = "RUSTFLAGS"
                                                    let v12366 : string = "-C prefer-dynamic"
                                                    [|struct (v12359, v12360); struct (v12361, v12362); struct (v12363, v12364); struct (v12365, v12366)|]
                                            let v12370 : System.Threading.CancellationToken option = None
                                            let v12373 : (struct (string * string) []) = [||]
                                            let v12375 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v12379 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v12383 : string option = None
                                            let v12397 : Result<string, string> =
                                                match v9637 with
                                                | US14_1(v12391) -> (* Error *)
                                                    let v12393 : Result<string, string> = Error v12391 
                                                    v12393
                                                | US14_0(v12386) -> (* Ok *)
                                                    let v12388 : Result<string, string> = Ok v12386 
                                                    v12388
                                            (* run_target_args'
                                            let v12399 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v12400 : string = "$0.ok()"
                                            let v12401 : string option = Fable.Core.RustInterop.emitRustExpr v12397 v12400 
                                            let _run_target_args'_v12399 = v12401 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12402 : string = "$0.ok()"
                                            let v12403 : string option = Fable.Core.RustInterop.emitRustExpr v12397 v12402 
                                            let _run_target_args'_v12399 = v12403 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12404 : string = "$0.ok()"
                                            let v12405 : string option = Fable.Core.RustInterop.emitRustExpr v12397 v12404 
                                            let _run_target_args'_v12399 = v12405 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12406 : string option = match v12397 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12399 = v12406 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12407 : string option = match v12397 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12399 = v12407 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v12408 : string option = match v12397 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12399 = v12408 
                                            #endif
#else
                                            let v12409 : string option = match v12397 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v12399 = v12409 
                                            #endif
                                            let v12410 : string option = _run_target_args'_v12399 
                                            let v12413 : bool = true
                                            let v12414 : bool = true
                                            let struct (v12415 : int32, v12416 : string) = method99(v12355, v12370, v12368, v12375, v12379, v12413, v12410, v12414)
                                            let v12417 : bool =
                                                match v9474 with
                                                | US40_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v14426 : US5, v14427 : US5, v14428 : US5, v14429 : US5) =
                                                if v12417 then
                                                    let v12418 : int32 = v12368.Length
                                                    let v12419 : (string []) = Array.zeroCreate<string> (v12418)
                                                    let v12420 : Mut5 = {l0 = 0} : Mut5
                                                    while method30(v12418, v12420) do
                                                        let v12422 : int32 = v12420.l0
                                                        let struct (v12423 : string, v12424 : string) = v12368.[int v12422]
                                                        let v12425 : string = $"$env:{v12423}=''{v12424}''"
                                                        v12419.[int v12422] <- v12425
                                                        let v12426 : int32 = v12422 + 1
                                                        v12420.l0 <- v12426
                                                        ()
                                                    let v12428 : string seq = v12419 |> Seq.ofArray
                                                    let v12433 : (string -> (string seq -> string)) = String.concat
                                                    let v12434 : string = ";"
                                                    let v12435 : (string seq -> string) = v12433 v12434
                                                    let v12436 : string = v12435 v12428
                                                    let v12439 : (string []) = [|v12436; v12355|]
                                                    let v12441 : string seq = v12439 |> Seq.ofArray
                                                    let v12445 : (string -> (string seq -> string)) = String.concat
                                                    let v12446 : (string seq -> string) = v12445 v12434
                                                    let v12447 : string = v12446 v12441
                                                    let v12450 : string = $"pwsh -c '{v12447}'"
                                                    let v12452 : bool = v12415 <> 0 
                                                    let struct (v13110 : US5, v13111 : US5, v13112 : US5, v13113 : US5) =
                                                        if v12452 then
                                                            let v12764 : unit = ()
                                                            let v12765 : (unit -> unit) = closure97(v9317, v10683, v12416, v12415, v12450)
                                                            let v12766 : unit = (fun () -> v12765 (); v12764) ()
                                                            let v13079 : US5 = US5_0(v9584)
                                                            let v13080 : US5 = US5_1
                                                            let v13081 : US5 = US5_1
                                                            let v13082 : US5 = US5_1
                                                            struct (v13079, v13080, v13081, v13082)
                                                        else
                                                            let v13083 : (string -> US5) = closure72()
                                                            let v13084 : (unit -> string) = closure98(v12416)
                                                            let v13085 : (exn -> US5) = closure100(v10683, v12416, v12450)
                                                            let v13088 : US5 = US5_1
                                                            let result = ref v13088
                                                            try
                                                                result.Value <- v13084 () |> v13083 
                                                            with ex ->
                                                                result.Value <- v13085 ex 
                                                            let v13089 : US5 = result.Value
                                                            let v13103 : string option =
                                                                match v13089 with
                                                                | US5_1 -> (* None *)
                                                                    let v13099 : string option = None
                                                                    v13099
                                                                | US5_0(v13093) -> (* Some *)
                                                                    let v13095 : string option = Some v13093 
                                                                    v13095
                                                            let v13104 : string = "$0.unwrap()"
                                                            let v13105 : string = Fable.Core.RustInterop.emitRustExpr v13103 v13104 
                                                            let v13106 : US5 = US5_0(v9584)
                                                            let v13107 : US5 = US5_0(v12349)
                                                            let v13108 : US5 = US5_0(v10683)
                                                            let v13109 : US5 = US5_0(v13105)
                                                            struct (v13106, v13107, v13108, v13109)
                                                    struct (v13110, v13111, v13112, v13113)
                                                else
                                                    let v13114 : string = $"target/spiral/{v9658}/target/wasm32-unknown-unknown/release/spiral_{v9586}.wasm"
                                                    let v13121 : string =
                                                        match v9474 with
                                                        | US40_0(v13115) -> (* Some *)
                                                            match v13115 with
                                                            | US41_1(v13117) -> (* Contract *)
                                                                v13117
                                                            | US41_0(v13116) -> (* Wasm *)
                                                                v13116
                                                        | _ ->
                                                            let v13120 : string = ""
                                                            v13120
                                                    let v13122 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v13114} -t debug {v13121}'"
                                                    let v13123 : string = "AUTOMATION"
                                                    let v13124 : string = method3(v13123)
                                                    let v13125 : string = "scripts/invoke-block.ps1"
                                                    let v13126 : string = $"pwsh -c \"pwsh {v13125} {v13122} -Linux -EnvironmentVariables AUTOMATION={v13124}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v13127 : bool = v12415 = 0
                                                    let struct (v14422 : US5, v14423 : US5, v14424 : US5, v14425 : US5) =
                                                        if v13127 then
                                                            let v13129 : System.Threading.CancellationToken option = None
                                                            let v13132 : (struct (string * string) []) = [||]
                                                            let v13134 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v13138 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v13142 : string option = None
                                                            let v13146 : string option = Some v9657 
                                                            let v13149 : bool = true
                                                            let v13150 : bool = true
                                                            let struct (v13151 : int32, v13152 : string) = method99(v13126, v13129, v13132, v13134, v13138, v13149, v13146, v13150)
                                                            let v13153 : bool = v13151 = 0
                                                            let struct (v13788 : US5, v13789 : US5, v13790 : US5, v13791 : US5) =
                                                                if v13153 then
                                                                    let v13154 : US5 = US5_0(v9584)
                                                                    let v13155 : US5 = US5_0(v12349)
                                                                    let v13156 : US5 = US5_0(v10683)
                                                                    let v13157 : US5 = US5_0(v13152)
                                                                    struct (v13154, v13155, v13156, v13157)
                                                                else
                                                                    let v13468 : unit = ()
                                                                    let v13469 : (unit -> unit) = closure102(v9317, v10683, v12416, v13152, v13151)
                                                                    let v13470 : unit = (fun () -> v13469 (); v13468) ()
                                                                    let v13784 : US5 = US5_0(v9584)
                                                                    let v13785 : US5 = US5_1
                                                                    let v13786 : US5 = US5_1
                                                                    let v13787 : US5 = US5_1
                                                                    struct (v13784, v13785, v13786, v13787)
                                                            struct (v13788, v13789, v13790, v13791)
                                                        else
                                                            let v14102 : unit = ()
                                                            let v14103 : (unit -> unit) = closure103(v9317, v10683, v12416, v12415, v13114, v13126)
                                                            let v14104 : unit = (fun () -> v14103 (); v14102) ()
                                                            let v14418 : US5 = US5_0(v9584)
                                                            let v14419 : US5 = US5_1
                                                            let v14420 : US5 = US5_1
                                                            let v14421 : US5 = US5_1
                                                            struct (v14418, v14419, v14420, v14421)
                                                    struct (v14422, v14423, v14424, v14425)
                                            let v14430 : string = "CI"
                                            let v14431 : string = method3(v14430)
                                            let v14434 : bool =
                                                if v9317 then
                                                    true
                                                else
                                                    let v14432 : bool = v14431 = ""
                                                    let v14433 : bool = v14432 <> true
                                                    v14433
                                            if v14434 then
                                                let v14435 : bool = true
                                                method87(v14435, v9662)
                                                let v14436 : bool =
                                                    match v9474 with
                                                    | US40_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v14437 : bool = v14436 <> true
                                                let v14440 : string =
                                                    if v14437 then
                                                        let v14438 : string = "wasm32-unknown-unknown/release"
                                                        v14438
                                                    else
                                                        let v14439 : string = "debug"
                                                        v14439
                                                let v14441 : string = ""
                                                let v14442 : string = $"target/{v14440}/spiral_{v9586}{v14441}"
                                                let v14443 : string = method34(v9670, v14442)
                                                let v14444 : string = ".wasm"
                                                let v14445 : string = $"target/{v14440}/spiral_{v9586}{v14444}"
                                                let v14446 : string = method34(v9670, v14445)
                                                let v14447 : string = ".pdb"
                                                let v14448 : string = $"target/{v14440}/spiral_{v9586}{v14447}"
                                                let v14449 : string = method34(v9670, v14448)
                                                let v14450 : string = ".exe"
                                                let v14451 : string = $"target/{v14440}/spiral_{v9586}{v14450}"
                                                let v14452 : string = method34(v9670, v14451)
                                                let v14453 : string = ".d"
                                                let v14454 : string = $"target/{v14440}/spiral_{v9586}{v14453}"
                                                let v14455 : string = method34(v9670, v14454)
                                                let v14456 : bool = method36(v14443)
                                                let v14457 : bool = method36(v14446)
                                                let v14458 : bool = method36(v14449)
                                                let v14459 : bool = method36(v14452)
                                                let v14460 : bool = method36(v14455)
                                                let v14768 : unit = ()
                                                let v14769 : (unit -> unit) = closure104(v10683, v14455, v14460, v14452, v14459, v14449, v14458, v14446, v14457, v14443, v14456)
                                                let v14770 : unit = (fun () -> v14769 (); v14768) ()
                                                let v15084 : UH5 =
                                                    if v14456 then
                                                        let v15081 : UH5 = UH5_0
                                                        UH5_1(v14443, v14456, v15081)
                                                    else
                                                        UH5_0
                                                let v15086 : UH5 =
                                                    if v14457 then
                                                        UH5_1(v14446, v14457, v15084)
                                                    else
                                                        v15084
                                                let v15088 : UH5 =
                                                    if v14458 then
                                                        UH5_1(v14449, v14458, v15086)
                                                    else
                                                        v15086
                                                let v15090 : UH5 =
                                                    if v14459 then
                                                        UH5_1(v14452, v14459, v15088)
                                                    else
                                                        v15088
                                                let v15092 : UH5 =
                                                    if v14460 then
                                                        UH5_1(v14455, v14460, v15090)
                                                    else
                                                        v15090
                                                method258(v15092)
                                            struct (v14426, v14427, v14428, v14429)
                                    struct (v15093, v15094, v15095, v15096)
                                else
                                    let v15097 : string = "fable_library_rust::String_::fromString($0)"
                                    let v15098 : string = Fable.Core.RustInterop.emitRustExpr v40 v15097 
                                    let v15099 : bool = v15098 = "typescript"
                                    let struct (v21561 : US5, v21562 : US5, v21563 : US5, v21564 : US5) =
                                        if v15099 then
                                            let v15100 : string = method197()
                                            (* run_target_args'
                                            let v15105 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15106 : string = "&*$0"
                                            let v15107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15100 v15106 
                                            let _run_target_args'_v15105 = v15107 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15108 : string = "&*$0"
                                            let v15109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15100 v15108 
                                            let _run_target_args'_v15105 = v15109 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15110 : string = "&*$0"
                                            let v15111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15100 v15110 
                                            let _run_target_args'_v15105 = v15111 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15113 : Ref<Str> = v15100 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15105 = v15113 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15117 : Ref<Str> = v15100 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15105 = v15117 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15121 : Ref<Str> = v15100 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15105 = v15121 
                                            #endif
#else
                                            let v15125 : Ref<Str> = v15100 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15105 = v15125 
                                            #endif
                                            let v15128 : Ref<Str> = _run_target_args'_v15105 
                                            let v15137 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v15138 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v15128) v15137 
                                            let v15141 : (std_string_String -> US8) = method21()
                                            let v15142 : US8 option = v15138 |> Option.map v15141 
                                            let v15162 : US8 = US8_1
                                            let v15163 : US8 = v15142 |> Option.defaultValue v15162 
                                            let v15170 : std_string_String =
                                                match v15163 with
                                                | US8_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US8_0(v15167) -> (* Some *)
                                                    v15167
                                            let v15171 : string = "fable_library_rust::String_::fromString($0)"
                                            let v15172 : string = Fable.Core.RustInterop.emitRustExpr v15170 v15171 
                                            let v15173 : string = method23()
                                            (* run_target_args'
                                            let v15178 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15179 : string = "&*$0"
                                            let v15180 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15173 v15179 
                                            let _run_target_args'_v15178 = v15180 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15181 : string = "&*$0"
                                            let v15182 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15173 v15181 
                                            let _run_target_args'_v15178 = v15182 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15183 : string = "&*$0"
                                            let v15184 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15173 v15183 
                                            let _run_target_args'_v15178 = v15184 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15186 : Ref<Str> = v15173 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15178 = v15186 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15190 : Ref<Str> = v15173 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15178 = v15190 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15194 : Ref<Str> = v15173 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15178 = v15194 
                                            #endif
#else
                                            let v15198 : Ref<Str> = v15173 |> unbox<Ref<Str>>
                                            let _run_target_args'_v15178 = v15198 
                                            #endif
                                            let v15201 : Ref<Str> = _run_target_args'_v15178 
                                            let v15210 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v15211 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v15201) v15210 
                                            let v15214 : (Vec<std_string_String> -> US12) = method24()
                                            let v15215 : US12 option = v15211 |> Option.map v15214 
                                            let v15235 : US12 = US12_1
                                            let v15236 : US12 = v15215 |> Option.defaultValue v15235 
                                            let v15240 : (std_string_String []) = [||]
                                            let v15241 : string = "$0.to_vec()"
                                            let v15242 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v15240 v15241 
                                            let v15245 : Vec<std_string_String> =
                                                match v15236 with
                                                | US12_1 -> (* None *)
                                                    v15242
                                                | US12_0(v15243) -> (* Some *)
                                                    v15243
                                            (* run_target_args'
                                            let v15250 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v15255 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15256 : string = "std::fs::read(&*$0)"
                                            let v15257 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v15172 v15256 
                                            (* run_target_args'
                                            let v15259 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15260 : string = "$0.unwrap()"
                                            let v15261 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15257 v15260 
                                            let _run_target_args'_v15259 = v15261 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15262 : string = "$0.unwrap()"
                                            let v15263 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15257 v15262 
                                            let _run_target_args'_v15259 = v15263 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15264 : string = "$0.unwrap()"
                                            let v15265 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15257 v15264 
                                            let _run_target_args'_v15259 = v15265 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15266 : Vec<uint8> = match v15257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15259 = v15266 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15267 : Vec<uint8> = match v15257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15259 = v15267 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15268 : Vec<uint8> = match v15257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15259 = v15268 
                                            #endif
#else
                                            let v15269 : Vec<uint8> = match v15257 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15259 = v15269 
                                            #endif
                                            let v15270 : Vec<uint8> = _run_target_args'_v15259 
                                            let _run_target_args'_v15255 = v15270 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15274 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15255 = v15274 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15278 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15255 = v15278 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15282 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15255 = v15282 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15286 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15255 = v15286 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15290 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v15255 = v15290 
                                            #endif
#else
                                            let v15293 : (uint8 []) = v15172 |> System.IO.File.ReadAllBytes
                                            let v15294 : string = "$0.to_vec()"
                                            let v15295 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v15293 v15294 
                                            let _run_target_args'_v15255 = v15295 
                                            #endif
                                            let v15296 : Vec<uint8> = _run_target_args'_v15255 
                                            let v15305 : Vec<uint8> = method25(v15296)
                                            let v15306 : string = "std::string::String::from_utf8($0)"
                                            let v15307 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v15305 v15306 
                                            (* run_target_args'
                                            let v15309 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v15310 : string = "$0.unwrap()"
                                            let v15311 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15307 v15310 
                                            let _run_target_args'_v15309 = v15311 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15312 : string = "$0.unwrap()"
                                            let v15313 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15307 v15312 
                                            let _run_target_args'_v15309 = v15313 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15314 : string = "$0.unwrap()"
                                            let v15315 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15307 v15314 
                                            let _run_target_args'_v15309 = v15315 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15316 : std_string_String = match v15307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15309 = v15316 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15317 : std_string_String = match v15307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15309 = v15317 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15318 : std_string_String = match v15307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15309 = v15318 
                                            #endif
#else
                                            let v15319 : std_string_String = match v15307 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v15309 = v15319 
                                            #endif
                                            let v15320 : std_string_String = _run_target_args'_v15309 
                                            let v15323 : string = "fable_library_rust::String_::fromString($0)"
                                            let v15324 : string = Fable.Core.RustInterop.emitRustExpr v15320 v15323 
                                            let _run_target_args'_v15250 = v15324 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v15326 : string = null |> unbox<string>
                                            let _run_target_args'_v15250 = v15326 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v15330 : string = null |> unbox<string>
                                            let _run_target_args'_v15250 = v15330 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v15334 : string = null |> unbox<string>
                                            let _run_target_args'_v15250 = v15334 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v15338 : string = null |> unbox<string>
                                            let _run_target_args'_v15250 = v15338 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v15342 : string = null |> unbox<string>
                                            let _run_target_args'_v15250 = v15342 
                                            #endif
#else
                                            let v15345 : string = v15172 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v15250 = v15345 
                                            #endif
                                            let v15346 : string = _run_target_args'_v15250 
                                            let v15357 : string = "ts"
                                            let v15358 : string = $"%A{struct (v15357, v15346)}"
                                            let v15361 : string = method27(v15358)
                                            let v15362 : string = method32()
                                            let v15363 : US5 = method33(v15362)
                                            let v15369 : US5 =
                                                match v15363 with
                                                | US5_1 -> (* None *)
                                                    let v15366 : string = __SOURCE_DIRECTORY__
                                                    method33(v15366)
                                                | US5_0(v15364) -> (* Some *)
                                                    US5_0(v15364)
                                            let v15375 : US5 =
                                                match v15369 with
                                                | US5_1 -> (* None *)
                                                    let v15372 : string = "/workspaces"
                                                    method33(v15372)
                                                | US5_0(v15370) -> (* Some *)
                                                    US5_0(v15370)
                                            let v15379 : string =
                                                match v15375 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v15376) -> (* Some *)
                                                    v15376
                                            let v15380 : string = method53(v15379)
                                            let v15381 : bool = "deps" = v15380
                                            let v15392 : string =
                                                if v15381 then
                                                    let v15382 : string option = method39(v15379)
                                                    let v15384 : string = v15382 |> Option.get
                                                    let v15387 : US5 = method33(v15384)
                                                    match v15387 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v15388) -> (* Some *)
                                                        v15388
                                                else
                                                    v15379
                                            let v15393 : string = "polyglot"
                                            let v15394 : string = method34(v15392, v15393)
                                            let v15395 : string = method32()
                                            let v15397 : (unit -> string) = v15395.ToLower
                                            let v15398 : string = v15397 ()
                                            let v15402 : (unit -> string) = v15394.ToLower
                                            let v15403 : string = v15402 ()
                                            let v15407 : bool = v15398.StartsWith (v15403, false, null)
                                            let v15412 : US14 =
                                                if v15407 then
                                                    US14_1(v15403)
                                                else
                                                    US14_0(v15403)
                                            let v15424 : Result<string, string> =
                                                match v15412 with
                                                | US14_1(v15418) -> (* Error *)
                                                    let v15420 : Result<string, string> = Error v15418 
                                                    v15420
                                                | US14_0(v15413) -> (* Ok *)
                                                    let v15415 : Result<string, string> = Ok v15413 
                                                    v15415
                                            let v15425 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v15426 : bool = Fable.Core.RustInterop.emitRustExpr v15424 v15425 
                                            let v15427 : string = "x"
                                            let v15428 : string = Fable.Core.RustInterop.emitRustExpr () v15427 
                                            let v15429 : string = "true; $0 })"
                                            let v15430 : bool = Fable.Core.RustInterop.emitRustExpr v15428 v15429 
                                            let v15431 : string = "_result_unwrap_or_else"
                                            let v15432 : string = Fable.Core.RustInterop.emitRustExpr () v15431 
                                            let v15433 : string = "spiral"
                                            let v15434 : US42 = US42_1
                                            let v15435 : US43 = US43_0(v15434)
                                            let v15436 : US5 = US5_0(v15361)
                                            let v15437 : string = method217(v15436, v15433, v15435, v15432)
                                            let v15438 : string = "Fable.Core"
                                            let v15439 : string = "4.3.0"
                                            let v15440 : UH4 = UH4_0
                                            let v15441 : UH4 = UH4_1(v15438, v15439, v15440)
                                            let v15442 : UH2 = UH2_0
                                            let v15443 : string = method218(v15346, v15433, v15442, v15441, v15437, v15432)
                                            let v15444 : string = "lib/typescript/fable/fable_modules"
                                            let v15445 : string = method34(v15432, v15444)
                                            let v15446 : string = $"fable-library-{v15357}"
                                            let v15447 : string = method263(v15446)
                                            let v15448 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v15449 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v15445 v15448 
                                            let v15450 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v15451 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v15446)
                                            let v15452 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v15449, v15451) v15450 
                                            let v15453 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method267(v15447)
                                            let v15454 : string = "futures::stream::StreamExt::filter_map(v15452, |x| async { v15453(x) })"
                                            let v15455 : _ = Fable.Core.RustInterop.emitRustExpr () v15454 
                                            let v15456 : string = "Box::pin(futures::stream::StreamExt::collect(v15455))"
                                            let v15457 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v15456 
                                            let v15458 : string = "v15457.await"
                                            let v15459 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v15458 
                                            let v15460 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v15461 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15459 v15460 
                                            let v15462 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v15463 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v15464 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v15461, v15463) v15462 
                                            let v15465 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v15466 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v15464 v15465 
                                            let v15467 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v15468 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v15466 v15467 
                                            let v15469 : struct (string * string) option = v15468 |> Array.tryItem 0 
                                            let v15472 : (struct (string * string) -> US52) = method273()
                                            let v15473 : US52 option = v15469 |> Option.map v15472 
                                            let v15494 : US52 = US52_1
                                            let v15495 : US52 = v15473 |> Option.defaultValue v15494 
                                            let v15810 : unit = ()
                                            let v15811 : (unit -> unit) = closure118(v15495)
                                            let v15812 : unit = (fun () -> v15811 (); v15810) ()
                                            method276(v15437, v15445, v15495)
                                            let v16127 : US40 = US40_1
                                            let struct (v16128 : int32, v16129 : string) = method227(v16127, v15437, v15357, v15443, v15412)
                                            method276(v15437, v15445, v15495)
                                            let v16131 : bool = v16128 <> 0 
                                            let struct (v18376 : US5, v18377 : US5, v18378 : US5, v18379 : US5) =
                                                if v16131 then
                                                    let v16445 : unit = ()
                                                    let v16446 : (unit -> unit) = closure119(v16129, v16128)
                                                    let v16447 : unit = (fun () -> v16446 (); v16445) ()
                                                    let v16762 : US5 = US5_0(v15357)
                                                    let v16763 : US5 = US5_1
                                                    let v16764 : US5 = US5_1
                                                    let v16765 : US5 = US5_0(v16129)
                                                    struct (v16762, v16763, v16764, v16765)
                                                else
                                                    let v16766 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v16767 : bool = Fable.Core.RustInterop.emitRustExpr v15245 v16766 
                                                    let v16768 : string = "x"
                                                    let v16769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16768 
                                                    let v16770 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v16771 : string = Fable.Core.RustInterop.emitRustExpr v16769 v16770 
                                                    let v16774 : string = "="
                                                    let v16775 : bool = v16771.Contains v16774 
                                                    let v16779 : string =
                                                        if v16775 then
                                                            v16771
                                                        else
                                                            let v16778 : string = $"\"{v16771}\":\"*\""
                                                            v16778
                                                    let v16780 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v16781 : bool = Fable.Core.RustInterop.emitRustExpr v16779 v16780 
                                                    let v16782 : string = "_vec_map"
                                                    let v16783 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v16782 
                                                    let v16784 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v16785 : (string []) = Fable.Core.RustInterop.emitRustExpr v16783 v16784 
                                                    let v16790 : unit = ()
                                                    let _let'_v16790 =
                                                        seq {
                                                            for i = 0 to v16785.Length - 1 do yield v16785.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v16793 : string seq = _let'_v16790 
                                                    let v16801 : (string -> (string seq -> string)) = String.concat
                                                    let v16802 : string = ",\n"
                                                    let v16803 : (string seq -> string) = v16801 v16802
                                                    let v16804 : string = v16803 v16793
                                                    let v16807 : string = $"{{"
                                                    let v16808 : string = $"  \"name\": \"spiral_{v15361}\","
                                                    let v16809 : string = v16807 + v16808 
                                                    let v16810 : string = $"  \"dependencies\": {{"
                                                    let v16811 : string = v16809 + v16810 
                                                    let v16812 : string = v16811 + v16804 
                                                    let v16813 : string = $"  }},"
                                                    let v16814 : string = v16812 + v16813 
                                                    let v16815 : string = $"    \"devDependencies\": {{"
                                                    let v16816 : string = v16814 + v16815 
                                                    let v16817 : string = $"  }},"
                                                    let v16818 : string = v16816 + v16817 
                                                    let v16819 : string = $"}}"
                                                    let v16820 : string = v16818 + v16819 
                                                    let v16821 : string = "package.json"
                                                    let v16822 : string = method34(v15437, v16821)
                                                    let v16823 : string = "../.."
                                                    let v16824 : string = method34(v15437, v16823)
                                                    let v16825 : string = method34(v16824, v16821)
                                                    method74(v16822, v16820)
                                                    let v16826 : string = ""
                                                    method74(v16825, v16826)
                                                    let v16827 : string = $"{v15433}.{v15357}"
                                                    let v16828 : string = method34(v15437, v16827)
                                                    let v17138 : unit = ()
                                                    let v17139 : (unit -> unit) = closure120(v16828)
                                                    let v17140 : unit = (fun () -> v17139 (); v17138) ()
                                                    (* run_target_args'
                                                    let v17457 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v17462 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17463 : string = "std::fs::read(&*$0)"
                                                    let v17464 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v16828 v17463 
                                                    (* run_target_args'
                                                    let v17466 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17467 : string = "$0.unwrap()"
                                                    let v17468 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17464 v17467 
                                                    let _run_target_args'_v17466 = v17468 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17469 : string = "$0.unwrap()"
                                                    let v17470 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17464 v17469 
                                                    let _run_target_args'_v17466 = v17470 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17471 : string = "$0.unwrap()"
                                                    let v17472 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17464 v17471 
                                                    let _run_target_args'_v17466 = v17472 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17473 : Vec<uint8> = match v17464 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17466 = v17473 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17474 : Vec<uint8> = match v17464 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17466 = v17474 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17475 : Vec<uint8> = match v17464 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17466 = v17475 
                                                    #endif
#else
                                                    let v17476 : Vec<uint8> = match v17464 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17466 = v17476 
                                                    #endif
                                                    let v17477 : Vec<uint8> = _run_target_args'_v17466 
                                                    let _run_target_args'_v17462 = v17477 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17481 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17462 = v17481 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17485 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17462 = v17485 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17489 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17462 = v17489 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17493 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17462 = v17493 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17497 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v17462 = v17497 
                                                    #endif
#else
                                                    let v17500 : (uint8 []) = v16828 |> System.IO.File.ReadAllBytes
                                                    let v17501 : string = "$0.to_vec()"
                                                    let v17502 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17500 v17501 
                                                    let _run_target_args'_v17462 = v17502 
                                                    #endif
                                                    let v17503 : Vec<uint8> = _run_target_args'_v17462 
                                                    let v17512 : Vec<uint8> = method25(v17503)
                                                    let v17513 : string = "std::string::String::from_utf8($0)"
                                                    let v17514 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v17512 v17513 
                                                    (* run_target_args'
                                                    let v17516 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17517 : string = "$0.unwrap()"
                                                    let v17518 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17514 v17517 
                                                    let _run_target_args'_v17516 = v17518 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17519 : string = "$0.unwrap()"
                                                    let v17520 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17514 v17519 
                                                    let _run_target_args'_v17516 = v17520 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17521 : string = "$0.unwrap()"
                                                    let v17522 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17514 v17521 
                                                    let _run_target_args'_v17516 = v17522 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17523 : std_string_String = match v17514 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17516 = v17523 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17524 : std_string_String = match v17514 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17516 = v17524 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17525 : std_string_String = match v17514 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17516 = v17525 
                                                    #endif
#else
                                                    let v17526 : std_string_String = match v17514 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v17516 = v17526 
                                                    #endif
                                                    let v17527 : std_string_String = _run_target_args'_v17516 
                                                    let v17530 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v17531 : string = Fable.Core.RustInterop.emitRustExpr v17527 v17530 
                                                    let _run_target_args'_v17457 = v17531 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17533 : string = null |> unbox<string>
                                                    let _run_target_args'_v17457 = v17533 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17537 : string = null |> unbox<string>
                                                    let _run_target_args'_v17457 = v17537 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17541 : string = null |> unbox<string>
                                                    let _run_target_args'_v17457 = v17541 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17545 : string = null |> unbox<string>
                                                    let _run_target_args'_v17457 = v17545 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17549 : string = null |> unbox<string>
                                                    let _run_target_args'_v17457 = v17549 
                                                    #endif
#else
                                                    let v17552 : string = v16828 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v17457 = v17552 
                                                    #endif
                                                    let v17553 : string = _run_target_args'_v17457 
                                                    let v17564 : string = "// spiral.process_typescript"
                                                    let v17565 : bool = v17553.Contains v17564 
                                                    let v17574 : string =
                                                        if v17565 then
                                                            v17553
                                                        else
                                                            let v17568 : string = $"\"./fable_modules/fable-library-ts.{v15495}/"
                                                            let v17569 : string = $"\"{v15432}/lib/typescript/fable/fable_modules/fable-library-ts.{v15495}/"
                                                            let v17570 : string = v17553.Replace (v17568, v17569)
                                                            let v17571 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v17572 : string = " defaultOf::<()>();"
                                                            method64(v17571, v17572, v17570)
                                                    let v17575 : bool = v17565 = false
                                                    if v17575 then
                                                        let v17576 : string = $"{v17574}\n\n{v17564}\n"
                                                        method74(v16828, v17576)
                                                    let v17577 : string = $"bun --bun run \"{v16828}\""
                                                    let v17578 : string = "PATH"
                                                    let v17579 : string = method3(v17578)
                                                    let v17580 : bool = v17579 = ""
                                                    let v17619 : US5 =
                                                        if v17580 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v17583 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17584 : string = "cfg!(windows)"
                                                            let v17585 : bool = Fable.Core.RustInterop.emitRustExpr () v17584 
                                                            let _run_target_args'_v17583 = v17585 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17586 : string = "cfg!(windows)"
                                                            let v17587 : bool = Fable.Core.RustInterop.emitRustExpr () v17586 
                                                            let _run_target_args'_v17583 = v17587 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17588 : string = "cfg!(windows)"
                                                            let v17589 : bool = Fable.Core.RustInterop.emitRustExpr () v17588 
                                                            let _run_target_args'_v17583 = v17589 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v17590 : US3 = US3_0
                                                            let v17591 : US4 = US4_5(v17590)
                                                            let v17592 : string = $"platform.is_windows / target: {v17591}"
                                                            let v17593 : bool = failwith<bool> v17592
                                                            let _run_target_args'_v17583 = v17593 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v17594 : US3 = US3_0
                                                            let v17595 : US4 = US4_6(v17594)
                                                            let v17596 : string = $"platform.is_windows / target: {v17595}"
                                                            let v17597 : bool = failwith<bool> v17596
                                                            let _run_target_args'_v17583 = v17597 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v17598 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v17599 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v17600 : bool = v17599 v17598
                                                            let _run_target_args'_v17583 = v17600 
                                                            #endif
#else
                                                            let v17601 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v17602 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v17603 : bool = v17602 v17601
                                                            let _run_target_args'_v17583 = v17603 
                                                            #endif
                                                            let v17604 : bool = _run_target_args'_v17583 
                                                            let v17615 : string =
                                                                if v17604 then
                                                                    let v17613 : string = ";"
                                                                    v17613
                                                                else
                                                                    let v17614 : string = ":"
                                                                    v17614
                                                            let v17616 : string = "~/.bun/bin"
                                                            let v17617 : string = $"{v17616}{v17615}{v17579}"
                                                            US5_0(v17617)
                                                    let v17625 : UH4 =
                                                        match v17619 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v17620) -> (* Some *)
                                                            let v17621 : UH4 = UH4_0
                                                            UH4_1(v17578, v17620, v17621)
                                                    let v17626 : string = "TRACE_LEVEL"
                                                    let v17627 : string = "Verbose"
                                                    let v17628 : UH4 = UH4_0
                                                    let v17629 : UH4 = UH4_1(v17626, v17627, v17628)
                                                    let v17630 : UH4 = method280(v17625, v17629)
                                                    let v17631 : struct (string * string) list = []
                                                    let v17632 : struct (string * string) list = method281(v17630, v17631)
                                                    let v17642 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v17643 : (struct (string * string) []) = v17642 v17632
                                                    let v17647 : System.Threading.CancellationToken option = None
                                                    let v17650 : (struct (string * string) []) = [||]
                                                    let v17652 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v17656 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v17660 : string option = None
                                                    let v17674 : Result<string, string> =
                                                        match v15412 with
                                                        | US14_1(v17668) -> (* Error *)
                                                            let v17670 : Result<string, string> = Error v17668 
                                                            v17670
                                                        | US14_0(v17663) -> (* Ok *)
                                                            let v17665 : Result<string, string> = Ok v17663 
                                                            v17665
                                                    (* run_target_args'
                                                    let v17676 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v17677 : string = "$0.ok()"
                                                    let v17678 : string option = Fable.Core.RustInterop.emitRustExpr v17674 v17677 
                                                    let _run_target_args'_v17676 = v17678 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v17679 : string = "$0.ok()"
                                                    let v17680 : string option = Fable.Core.RustInterop.emitRustExpr v17674 v17679 
                                                    let _run_target_args'_v17676 = v17680 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v17681 : string = "$0.ok()"
                                                    let v17682 : string option = Fable.Core.RustInterop.emitRustExpr v17674 v17681 
                                                    let _run_target_args'_v17676 = v17682 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v17683 : string option = match v17674 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17676 = v17683 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v17684 : string option = match v17674 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17676 = v17684 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v17685 : string option = match v17674 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17676 = v17685 
                                                    #endif
#else
                                                    let v17686 : string option = match v17674 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v17676 = v17686 
                                                    #endif
                                                    let v17687 : string option = _run_target_args'_v17676 
                                                    let v17690 : bool = true
                                                    let v17691 : bool = true
                                                    let struct (v17692 : int32, v17693 : string) = method99(v17577, v17647, v17643, v17652, v17656, v17690, v17687, v17691)
                                                    let v17694 : int32 = v17643.Length
                                                    let v17695 : (string []) = Array.zeroCreate<string> (v17694)
                                                    let v17696 : Mut5 = {l0 = 0} : Mut5
                                                    while method30(v17694, v17696) do
                                                        let v17698 : int32 = v17696.l0
                                                        let struct (v17699 : string, v17700 : string) = v17643.[int v17698]
                                                        let v17701 : string = $"$env:{v17699}=''{v17700}''"
                                                        v17695.[int v17698] <- v17701
                                                        let v17702 : int32 = v17698 + 1
                                                        v17696.l0 <- v17702
                                                        ()
                                                    let v17704 : string seq = v17695 |> Seq.ofArray
                                                    let v17709 : (string -> (string seq -> string)) = String.concat
                                                    let v17710 : string = ";"
                                                    let v17711 : (string seq -> string) = v17709 v17710
                                                    let v17712 : string = v17711 v17704
                                                    let v17715 : string = $"pwsh -c '{v17712}; {v17577}'"
                                                    let v17716 : bool = v17692 = 0
                                                    let struct (v18372 : US5, v18373 : US5, v18374 : US5, v18375 : US5) =
                                                        if v17716 then
                                                            let v17717 : (string -> US5) = closure72()
                                                            let v17718 : (unit -> string) = closure121(v17693)
                                                            let v17719 : (exn -> US5) = closure122(v16828, v17693, v17715)
                                                            let v17722 : US5 = US5_1
                                                            let result = ref v17722
                                                            try
                                                                result.Value <- v17718 () |> v17717 
                                                            with ex ->
                                                                result.Value <- v17719 ex 
                                                            let v17723 : US5 = result.Value
                                                            let v17737 : string option =
                                                                match v17723 with
                                                                | US5_1 -> (* None *)
                                                                    let v17733 : string option = None
                                                                    v17733
                                                                | US5_0(v17727) -> (* Some *)
                                                                    let v17729 : string option = Some v17727 
                                                                    v17729
                                                            let v17738 : string = "$0.unwrap()"
                                                            let v17739 : string = Fable.Core.RustInterop.emitRustExpr v17737 v17738 
                                                            let v17740 : US5 = US5_0(v15357)
                                                            let v17741 : US5 = US5_0(v17574)
                                                            let v17742 : US5 = US5_0(v16828)
                                                            let v17743 : US5 = US5_0(v17739)
                                                            struct (v17740, v17741, v17742, v17743)
                                                        else
                                                            let v18053 : unit = ()
                                                            let v18054 : (unit -> unit) = closure124(v16828, v17693, v17692, v17715)
                                                            let v18055 : unit = (fun () -> v18054 (); v18053) ()
                                                            let v18368 : US5 = US5_0(v15357)
                                                            let v18369 : US5 = US5_1
                                                            let v18370 : US5 = US5_1
                                                            let v18371 : US5 = US5_1
                                                            struct (v18368, v18369, v18370, v18371)
                                                    struct (v18372, v18373, v18374, v18375)
                                            struct (v18376, v18377, v18378, v18379)
                                        else
                                            let v18380 : string = "fable_library_rust::String_::fromString($0)"
                                            let v18381 : string = Fable.Core.RustInterop.emitRustExpr v40 v18380 
                                            let v18382 : bool = v18381 = "python"
                                            let struct (v21557 : US5, v21558 : US5, v21559 : US5, v21560 : US5) =
                                                if v18382 then
                                                    let v18383 : string = method197()
                                                    (* run_target_args'
                                                    let v18388 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18389 : string = "&*$0"
                                                    let v18390 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18383 v18389 
                                                    let _run_target_args'_v18388 = v18390 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18391 : string = "&*$0"
                                                    let v18392 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18383 v18391 
                                                    let _run_target_args'_v18388 = v18392 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18393 : string = "&*$0"
                                                    let v18394 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18383 v18393 
                                                    let _run_target_args'_v18388 = v18394 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18396 : Ref<Str> = v18383 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18388 = v18396 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18400 : Ref<Str> = v18383 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18388 = v18400 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18404 : Ref<Str> = v18383 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18388 = v18404 
                                                    #endif
#else
                                                    let v18408 : Ref<Str> = v18383 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18388 = v18408 
                                                    #endif
                                                    let v18411 : Ref<Str> = _run_target_args'_v18388 
                                                    let v18420 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v18421 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v18411) v18420 
                                                    let v18424 : (std_string_String -> US8) = method21()
                                                    let v18425 : US8 option = v18421 |> Option.map v18424 
                                                    let v18445 : US8 = US8_1
                                                    let v18446 : US8 = v18425 |> Option.defaultValue v18445 
                                                    let v18453 : std_string_String =
                                                        match v18446 with
                                                        | US8_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US8_0(v18450) -> (* Some *)
                                                            v18450
                                                    let v18454 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18455 : string = Fable.Core.RustInterop.emitRustExpr v18453 v18454 
                                                    let v18456 : string = method23()
                                                    (* run_target_args'
                                                    let v18461 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18462 : string = "&*$0"
                                                    let v18463 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18456 v18462 
                                                    let _run_target_args'_v18461 = v18463 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18464 : string = "&*$0"
                                                    let v18465 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18456 v18464 
                                                    let _run_target_args'_v18461 = v18465 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18466 : string = "&*$0"
                                                    let v18467 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18456 v18466 
                                                    let _run_target_args'_v18461 = v18467 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18469 : Ref<Str> = v18456 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18461 = v18469 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18473 : Ref<Str> = v18456 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18461 = v18473 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18477 : Ref<Str> = v18456 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18461 = v18477 
                                                    #endif
#else
                                                    let v18481 : Ref<Str> = v18456 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v18461 = v18481 
                                                    #endif
                                                    let v18484 : Ref<Str> = _run_target_args'_v18461 
                                                    let v18493 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v18494 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v18484) v18493 
                                                    let v18497 : (Vec<std_string_String> -> US12) = method24()
                                                    let v18498 : US12 option = v18494 |> Option.map v18497 
                                                    let v18518 : US12 = US12_1
                                                    let v18519 : US12 = v18498 |> Option.defaultValue v18518 
                                                    let v18523 : (std_string_String []) = [||]
                                                    let v18524 : string = "$0.to_vec()"
                                                    let v18525 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v18523 v18524 
                                                    let v18528 : Vec<std_string_String> =
                                                        match v18519 with
                                                        | US12_1 -> (* None *)
                                                            v18525
                                                        | US12_0(v18526) -> (* Some *)
                                                            v18526
                                                    let v18529 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v18534 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v18539 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18540 : string = "std::fs::read(&*$0)"
                                                    let v18541 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v18455 v18540 
                                                    (* run_target_args'
                                                    let v18543 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18544 : string = "$0.unwrap()"
                                                    let v18545 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18541 v18544 
                                                    let _run_target_args'_v18543 = v18545 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18546 : string = "$0.unwrap()"
                                                    let v18547 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18541 v18546 
                                                    let _run_target_args'_v18543 = v18547 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18548 : string = "$0.unwrap()"
                                                    let v18549 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18541 v18548 
                                                    let _run_target_args'_v18543 = v18549 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18550 : Vec<uint8> = match v18541 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18543 = v18550 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18551 : Vec<uint8> = match v18541 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18543 = v18551 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18552 : Vec<uint8> = match v18541 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18543 = v18552 
                                                    #endif
#else
                                                    let v18553 : Vec<uint8> = match v18541 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18543 = v18553 
                                                    #endif
                                                    let v18554 : Vec<uint8> = _run_target_args'_v18543 
                                                    let _run_target_args'_v18539 = v18554 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18558 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18539 = v18558 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18562 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18539 = v18562 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18566 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18539 = v18566 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18570 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18539 = v18570 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18574 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v18539 = v18574 
                                                    #endif
#else
                                                    let v18577 : (uint8 []) = v18455 |> System.IO.File.ReadAllBytes
                                                    let v18578 : string = "$0.to_vec()"
                                                    let v18579 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v18577 v18578 
                                                    let _run_target_args'_v18539 = v18579 
                                                    #endif
                                                    let v18580 : Vec<uint8> = _run_target_args'_v18539 
                                                    let v18589 : Vec<uint8> = method25(v18580)
                                                    let v18590 : string = "std::string::String::from_utf8($0)"
                                                    let v18591 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v18589 v18590 
                                                    (* run_target_args'
                                                    let v18593 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v18594 : string = "$0.unwrap()"
                                                    let v18595 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18591 v18594 
                                                    let _run_target_args'_v18593 = v18595 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18596 : string = "$0.unwrap()"
                                                    let v18597 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18591 v18596 
                                                    let _run_target_args'_v18593 = v18597 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18598 : string = "$0.unwrap()"
                                                    let v18599 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18591 v18598 
                                                    let _run_target_args'_v18593 = v18599 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18600 : std_string_String = match v18591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18593 = v18600 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18601 : std_string_String = match v18591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18593 = v18601 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18602 : std_string_String = match v18591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18593 = v18602 
                                                    #endif
#else
                                                    let v18603 : std_string_String = match v18591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v18593 = v18603 
                                                    #endif
                                                    let v18604 : std_string_String = _run_target_args'_v18593 
                                                    let v18607 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v18608 : string = Fable.Core.RustInterop.emitRustExpr v18604 v18607 
                                                    let _run_target_args'_v18534 = v18608 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v18610 : string = null |> unbox<string>
                                                    let _run_target_args'_v18534 = v18610 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v18614 : string = null |> unbox<string>
                                                    let _run_target_args'_v18534 = v18614 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v18618 : string = null |> unbox<string>
                                                    let _run_target_args'_v18534 = v18618 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v18622 : string = null |> unbox<string>
                                                    let _run_target_args'_v18534 = v18622 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v18626 : string = null |> unbox<string>
                                                    let _run_target_args'_v18534 = v18626 
                                                    #endif
#else
                                                    let v18629 : string = v18455 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v18534 = v18629 
                                                    #endif
                                                    let v18630 : string = _run_target_args'_v18534 
                                                    let v18641 : string = "py"
                                                    let v18642 : string = $"%A{struct (v18641, v18630)}"
                                                    let v18645 : string = method27(v18642)
                                                    let v18646 : string = method32()
                                                    let v18647 : US5 = method33(v18646)
                                                    let v18653 : US5 =
                                                        match v18647 with
                                                        | US5_1 -> (* None *)
                                                            let v18650 : string = __SOURCE_DIRECTORY__
                                                            method33(v18650)
                                                        | US5_0(v18648) -> (* Some *)
                                                            US5_0(v18648)
                                                    let v18659 : US5 =
                                                        match v18653 with
                                                        | US5_1 -> (* None *)
                                                            let v18656 : string = "/workspaces"
                                                            method33(v18656)
                                                        | US5_0(v18654) -> (* Some *)
                                                            US5_0(v18654)
                                                    let v18663 : string =
                                                        match v18659 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v18660) -> (* Some *)
                                                            v18660
                                                    let v18664 : string = method53(v18663)
                                                    let v18665 : bool = "deps" = v18664
                                                    let v18676 : string =
                                                        if v18665 then
                                                            let v18666 : string option = method39(v18663)
                                                            let v18668 : string = v18666 |> Option.get
                                                            let v18671 : US5 = method33(v18668)
                                                            match v18671 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v18672) -> (* Some *)
                                                                v18672
                                                        else
                                                            v18663
                                                    let v18677 : string = "polyglot"
                                                    let v18678 : string = method34(v18676, v18677)
                                                    let v18679 : string = method32()
                                                    let v18681 : (unit -> string) = v18679.ToLower
                                                    let v18682 : string = v18681 ()
                                                    let v18686 : (unit -> string) = v18678.ToLower
                                                    let v18687 : string = v18686 ()
                                                    let v18691 : bool = v18682.StartsWith (v18687, false, null)
                                                    let v18696 : US14 =
                                                        if v18691 then
                                                            US14_1(v18687)
                                                        else
                                                            US14_0(v18687)
                                                    let v18708 : Result<string, string> =
                                                        match v18696 with
                                                        | US14_1(v18702) -> (* Error *)
                                                            let v18704 : Result<string, string> = Error v18702 
                                                            v18704
                                                        | US14_0(v18697) -> (* Ok *)
                                                            let v18699 : Result<string, string> = Ok v18697 
                                                            v18699
                                                    let v18709 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v18710 : bool = Fable.Core.RustInterop.emitRustExpr v18708 v18709 
                                                    let v18711 : string = "x"
                                                    let v18712 : string = Fable.Core.RustInterop.emitRustExpr () v18711 
                                                    let v18713 : string = "true; $0 })"
                                                    let v18714 : bool = Fable.Core.RustInterop.emitRustExpr v18712 v18713 
                                                    let v18715 : string = "_result_unwrap_or_else"
                                                    let v18716 : string = Fable.Core.RustInterop.emitRustExpr () v18715 
                                                    let v18717 : string = "spiral"
                                                    let v18718 : US42 = US42_2
                                                    let v18719 : US43 = US43_0(v18718)
                                                    let v18720 : US5 = US5_0(v18645)
                                                    let v18721 : string = method217(v18720, v18717, v18719, v18716)
                                                    let v18722 : string = "Fable.Core"
                                                    let v18723 : string = "4.3.0"
                                                    let v18724 : UH4 = UH4_0
                                                    let v18725 : UH4 = UH4_1(v18722, v18723, v18724)
                                                    let v18726 : UH2 = UH2_0
                                                    let v18727 : string = method218(v18630, v18717, v18726, v18725, v18721, v18716)
                                                    let v18728 : string = "lib/python/fable/fable_modules"
                                                    let v18729 : string = method34(v18716, v18728)
                                                    let v18730 : string = $"fable_library"
                                                    let v18731 : string = method34(v18729, v18730)
                                                    let v18732 : string = $"fable_modules/fable_library"
                                                    let v18733 : string = method34(v18721, v18732)
                                                    method226(v18731, v18733)
                                                    let v18734 : US40 = US40_1
                                                    let struct (v18735 : int32, v18736 : string) = method227(v18734, v18721, v18641, v18727, v18696)
                                                    let v18738 : bool = v18735 <> 0 
                                                    let struct (v20921 : US5, v20922 : US5, v20923 : US5, v20924 : US5) =
                                                        if v18738 then
                                                            let v19052 : unit = ()
                                                            let v19053 : (unit -> unit) = closure125(v18736, v18735)
                                                            let v19054 : unit = (fun () -> v19053 (); v19052) ()
                                                            let v19369 : US5 = US5_0(v18641)
                                                            let v19370 : US5 = US5_1
                                                            let v19371 : US5 = US5_1
                                                            let v19372 : US5 = US5_0(v18736)
                                                            struct (v19369, v19370, v19371, v19372)
                                                        else
                                                            let v19373 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v19374 : bool = Fable.Core.RustInterop.emitRustExpr v18528 v19373 
                                                            let v19375 : string = "x"
                                                            let v19376 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19375 
                                                            let v19377 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19378 : string = Fable.Core.RustInterop.emitRustExpr v19376 v19377 
                                                            let v19381 : string = "="
                                                            let v19382 : bool = v19378.Contains v19381 
                                                            let v19386 : string =
                                                                if v19382 then
                                                                    v19378
                                                                else
                                                                    let v19385 : string = $"\"{v19378}\":\"*\""
                                                                    v19385
                                                            let v19387 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v19388 : bool = Fable.Core.RustInterop.emitRustExpr v19386 v19387 
                                                            let v19389 : string = "_vec_map"
                                                            let v19390 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v19389 
                                                            let v19391 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v19392 : (string []) = Fable.Core.RustInterop.emitRustExpr v19390 v19391 
                                                            let v19397 : unit = ()
                                                            let _let'_v19397 =
                                                                seq {
                                                                    for i = 0 to v19392.Length - 1 do yield v19392.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v19400 : string seq = _let'_v19397 
                                                            let v19408 : (string -> (string seq -> string)) = String.concat
                                                            let v19409 : string = ",\n"
                                                            let v19410 : (string seq -> string) = v19408 v19409
                                                            let v19411 : string = v19410 v19400
                                                            let v19414 : string = $"{{"
                                                            let v19415 : string = $"  \"name\": \"spiral_{v18645}\","
                                                            let v19416 : string = v19414 + v19415 
                                                            let v19417 : string = $"  \"dependencies\": {{"
                                                            let v19418 : string = v19416 + v19417 
                                                            let v19419 : string = v19418 + v19411 
                                                            let v19420 : string = $"  }},"
                                                            let v19421 : string = v19419 + v19420 
                                                            let v19422 : string = $"    \"devDependencies\": {{"
                                                            let v19423 : string = v19421 + v19422 
                                                            let v19424 : string = $"  }},"
                                                            let v19425 : string = v19423 + v19424 
                                                            let v19426 : string = $"}}"
                                                            let v19427 : string = v19425 + v19426 
                                                            let v19428 : string = "package.json"
                                                            let v19429 : string = method34(v18721, v19428)
                                                            let v19430 : string = "../.."
                                                            let v19431 : string = method34(v18721, v19430)
                                                            let v19432 : string = method34(v19431, v19428)
                                                            method74(v19429, v19427)
                                                            let v19433 : string = ""
                                                            method74(v19432, v19433)
                                                            let v19434 : string = $"{v18717}.{v18641}"
                                                            let v19435 : string = method34(v18721, v19434)
                                                            let v19745 : unit = ()
                                                            let v19746 : (unit -> unit) = closure126(v19435)
                                                            let v19747 : unit = (fun () -> v19746 (); v19745) ()
                                                            (* run_target_args'
                                                            let v20064 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v20069 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20070 : string = "std::fs::read(&*$0)"
                                                            let v20071 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v19435 v20070 
                                                            (* run_target_args'
                                                            let v20073 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20074 : string = "$0.unwrap()"
                                                            let v20075 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20071 v20074 
                                                            let _run_target_args'_v20073 = v20075 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20076 : string = "$0.unwrap()"
                                                            let v20077 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20071 v20076 
                                                            let _run_target_args'_v20073 = v20077 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20078 : string = "$0.unwrap()"
                                                            let v20079 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20071 v20078 
                                                            let _run_target_args'_v20073 = v20079 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20080 : Vec<uint8> = match v20071 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20073 = v20080 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20081 : Vec<uint8> = match v20071 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20073 = v20081 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20082 : Vec<uint8> = match v20071 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20073 = v20082 
                                                            #endif
#else
                                                            let v20083 : Vec<uint8> = match v20071 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20073 = v20083 
                                                            #endif
                                                            let v20084 : Vec<uint8> = _run_target_args'_v20073 
                                                            let _run_target_args'_v20069 = v20084 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20088 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20069 = v20088 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20092 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20069 = v20092 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20096 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20069 = v20096 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20100 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20069 = v20100 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20104 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v20069 = v20104 
                                                            #endif
#else
                                                            let v20107 : (uint8 []) = v19435 |> System.IO.File.ReadAllBytes
                                                            let v20108 : string = "$0.to_vec()"
                                                            let v20109 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20107 v20108 
                                                            let _run_target_args'_v20069 = v20109 
                                                            #endif
                                                            let v20110 : Vec<uint8> = _run_target_args'_v20069 
                                                            let v20119 : Vec<uint8> = method25(v20110)
                                                            let v20120 : string = "std::string::String::from_utf8($0)"
                                                            let v20121 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v20119 v20120 
                                                            (* run_target_args'
                                                            let v20123 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20124 : string = "$0.unwrap()"
                                                            let v20125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20121 v20124 
                                                            let _run_target_args'_v20123 = v20125 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20126 : string = "$0.unwrap()"
                                                            let v20127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20121 v20126 
                                                            let _run_target_args'_v20123 = v20127 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20128 : string = "$0.unwrap()"
                                                            let v20129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20121 v20128 
                                                            let _run_target_args'_v20123 = v20129 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20130 : std_string_String = match v20121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20123 = v20130 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20131 : std_string_String = match v20121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20123 = v20131 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20132 : std_string_String = match v20121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20123 = v20132 
                                                            #endif
#else
                                                            let v20133 : std_string_String = match v20121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v20123 = v20133 
                                                            #endif
                                                            let v20134 : std_string_String = _run_target_args'_v20123 
                                                            let v20137 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20138 : string = Fable.Core.RustInterop.emitRustExpr v20134 v20137 
                                                            let _run_target_args'_v20064 = v20138 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20140 : string = null |> unbox<string>
                                                            let _run_target_args'_v20064 = v20140 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20144 : string = null |> unbox<string>
                                                            let _run_target_args'_v20064 = v20144 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20148 : string = null |> unbox<string>
                                                            let _run_target_args'_v20064 = v20148 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20152 : string = null |> unbox<string>
                                                            let _run_target_args'_v20064 = v20152 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20156 : string = null |> unbox<string>
                                                            let _run_target_args'_v20064 = v20156 
                                                            #endif
#else
                                                            let v20159 : string = v19435 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v20064 = v20159 
                                                            #endif
                                                            let v20160 : string = _run_target_args'_v20064 
                                                            let v20171 : string = "# spiral.process_python"
                                                            let v20172 : bool = v20160.Contains v20171 
                                                            let v20184 : string =
                                                                if v20172 then
                                                                    v20160
                                                                else
                                                                    let v20175 : string = "\";\".into()"
                                                                    let v20176 : string = Fable.Core.RustInterop.emitRustExpr () v20175 
                                                                    let v20177 : string = "),)"
                                                                    let v20178 : string = v20177 + v20176 
                                                                    let v20179 : string = "));"
                                                                    let v20180 : string = v20160.Replace (v20178, v20179)
                                                                    let v20181 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v20182 : string = " defaultOf::<()>();"
                                                                    method64(v20181, v20182, v20180)
                                                            let v20185 : bool = v20172 = false
                                                            if v20185 then
                                                                let v20186 : string = $"{v20184}\n\n{v20171}\n"
                                                                method74(v19435, v20186)
                                                            let v20187 : string = $"python \"{v19435}\""
                                                            let v20188 : string = "TRACE_LEVEL"
                                                            let v20189 : string = "Verbose"
                                                            let v20190 : (struct (string * string) []) = [|struct (v20188, v20189)|]
                                                            let v20192 : System.Threading.CancellationToken option = None
                                                            let v20195 : (struct (string * string) []) = [||]
                                                            let v20197 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v20201 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v20205 : string option = None
                                                            let v20219 : Result<string, string> =
                                                                match v18696 with
                                                                | US14_1(v20213) -> (* Error *)
                                                                    let v20215 : Result<string, string> = Error v20213 
                                                                    v20215
                                                                | US14_0(v20208) -> (* Ok *)
                                                                    let v20210 : Result<string, string> = Ok v20208 
                                                                    v20210
                                                            (* run_target_args'
                                                            let v20221 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20222 : string = "$0.ok()"
                                                            let v20223 : string option = Fable.Core.RustInterop.emitRustExpr v20219 v20222 
                                                            let _run_target_args'_v20221 = v20223 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20224 : string = "$0.ok()"
                                                            let v20225 : string option = Fable.Core.RustInterop.emitRustExpr v20219 v20224 
                                                            let _run_target_args'_v20221 = v20225 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20226 : string = "$0.ok()"
                                                            let v20227 : string option = Fable.Core.RustInterop.emitRustExpr v20219 v20226 
                                                            let _run_target_args'_v20221 = v20227 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20228 : string option = match v20219 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20221 = v20228 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20229 : string option = match v20219 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20221 = v20229 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v20230 : string option = match v20219 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20221 = v20230 
                                                            #endif
#else
                                                            let v20231 : string option = match v20219 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v20221 = v20231 
                                                            #endif
                                                            let v20232 : string option = _run_target_args'_v20221 
                                                            let v20235 : bool = true
                                                            let v20236 : bool = true
                                                            let struct (v20237 : int32, v20238 : string) = method99(v20187, v20192, v20190, v20197, v20201, v20235, v20232, v20236)
                                                            let v20239 : int32 = v20190.Length
                                                            let v20240 : (string []) = Array.zeroCreate<string> (v20239)
                                                            let v20241 : Mut5 = {l0 = 0} : Mut5
                                                            while method30(v20239, v20241) do
                                                                let v20243 : int32 = v20241.l0
                                                                let struct (v20244 : string, v20245 : string) = v20190.[int v20243]
                                                                let v20246 : string = $"$env:{v20244}=''{v20245}''"
                                                                v20240.[int v20243] <- v20246
                                                                let v20247 : int32 = v20243 + 1
                                                                v20241.l0 <- v20247
                                                                ()
                                                            let v20249 : string seq = v20240 |> Seq.ofArray
                                                            let v20254 : (string -> (string seq -> string)) = String.concat
                                                            let v20255 : string = ";"
                                                            let v20256 : (string seq -> string) = v20254 v20255
                                                            let v20257 : string = v20256 v20249
                                                            let v20260 : string = $"pwsh -c '{v20257}; {v20187}'"
                                                            let v20261 : bool = v20237 = 0
                                                            let struct (v20917 : US5, v20918 : US5, v20919 : US5, v20920 : US5) =
                                                                if v20261 then
                                                                    let v20262 : (string -> US5) = closure72()
                                                                    let v20263 : (unit -> string) = closure127(v20238)
                                                                    let v20264 : (exn -> US5) = closure128(v19435, v20238, v20260)
                                                                    let v20267 : US5 = US5_1
                                                                    let result = ref v20267
                                                                    try
                                                                        result.Value <- v20263 () |> v20262 
                                                                    with ex ->
                                                                        result.Value <- v20264 ex 
                                                                    let v20268 : US5 = result.Value
                                                                    let v20282 : string option =
                                                                        match v20268 with
                                                                        | US5_1 -> (* None *)
                                                                            let v20278 : string option = None
                                                                            v20278
                                                                        | US5_0(v20272) -> (* Some *)
                                                                            let v20274 : string option = Some v20272 
                                                                            v20274
                                                                    let v20283 : string = "$0.unwrap()"
                                                                    let v20284 : string = Fable.Core.RustInterop.emitRustExpr v20282 v20283 
                                                                    let v20285 : US5 = US5_0(v18641)
                                                                    let v20286 : US5 = US5_0(v20184)
                                                                    let v20287 : US5 = US5_0(v19435)
                                                                    let v20288 : US5 = US5_0(v20284)
                                                                    struct (v20285, v20286, v20287, v20288)
                                                                else
                                                                    let v20598 : unit = ()
                                                                    let v20599 : (unit -> unit) = closure130(v19435, v20238, v20237, v20260)
                                                                    let v20600 : unit = (fun () -> v20599 (); v20598) ()
                                                                    let v20913 : US5 = US5_0(v18641)
                                                                    let v20914 : US5 = US5_1
                                                                    let v20915 : US5 = US5_1
                                                                    let v20916 : US5 = US5_1
                                                                    struct (v20913, v20914, v20915, v20916)
                                                            struct (v20917, v20918, v20919, v20920)
                                                    struct (v20921, v20922, v20923, v20924)
                                                else
                                                    let v21236 : unit = ()
                                                    let v21237 : (unit -> unit) = closure131(v41, v40)
                                                    let v21238 : unit = (fun () -> v21237 (); v21236) ()
                                                    let v21553 : US5 = US5_1
                                                    let v21554 : US5 = US5_1
                                                    let v21555 : US5 = US5_1
                                                    let v21556 : US5 = US5_1
                                                    struct (v21553, v21554, v21555, v21556)
                                            struct (v21557, v21558, v21559, v21560)
                                    struct (v21561, v21562, v21563, v21564)
                            let v21572 : string =
                                match v21565 with
                                | US5_1 -> (* None *)
                                    let v21570 : string = ""
                                    v21570
                                | US5_0(v21569) -> (* Some *)
                                    v21569
                            let v21573 : string = "extension"
                            let v21577 : string =
                                match v21566 with
                                | US5_1 -> (* None *)
                                    let v21575 : string = ""
                                    v21575
                                | US5_0(v21574) -> (* Some *)
                                    v21574
                            let v21578 : string = "code"
                            let v21582 : string =
                                match v21567 with
                                | US5_1 -> (* None *)
                                    let v21580 : string = ""
                                    v21580
                                | US5_0(v21579) -> (* Some *)
                                    v21579
                            let v21583 : string = "code_path"
                            let v21587 : string =
                                match v21568 with
                                | US5_1 -> (* None *)
                                    let v21585 : string = ""
                                    v21585
                                | US5_0(v21584) -> (* Some *)
                                    v21584
                            let v21588 : string = "output"
                            [|struct (v21573, v21572); struct (v21578, v21577); struct (v21583, v21582); struct (v21588, v21587)|]
        | _ ->
            let v21594 : string = "extension"
            let v21595 : string = ""
            let v21596 : string = "code"
            let v21597 : string = "code_path"
            let v21598 : string = "output"
            [|struct (v21594, v21595); struct (v21596, v21595); struct (v21597, v21595); struct (v21598, v21595)|]
    let v21601 : string = "$0.to_vec()"
    let v21602 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v21600 v21601 
    let v21603 : unit = ()
    let v21604 : string = $"true; let _func1_from_v21603 = Func1::from(move |value| {{ //"
    let v21605 : bool = Fable.Core.RustInterop.emitRustExpr () v21604 
    let v21606 : string = $"value"
    let struct (v21607 : string, v21608 : string) = Fable.Core.RustInterop.emitRustExpr () v21606 
    (* run_target_args'
    let v21613 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21614 : string = "&*$0"
    let v21615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21607 v21614 
    let _run_target_args'_v21613 = v21615 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21616 : string = "&*$0"
    let v21617 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21607 v21616 
    let _run_target_args'_v21613 = v21617 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21618 : string = "&*$0"
    let v21619 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21607 v21618 
    let _run_target_args'_v21613 = v21619 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21621 : Ref<Str> = v21607 |> unbox<Ref<Str>>
    let _run_target_args'_v21613 = v21621 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21625 : Ref<Str> = v21607 |> unbox<Ref<Str>>
    let _run_target_args'_v21613 = v21625 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21629 : Ref<Str> = v21607 |> unbox<Ref<Str>>
    let _run_target_args'_v21613 = v21629 
    #endif
#else
    let v21633 : Ref<Str> = v21607 |> unbox<Ref<Str>>
    let _run_target_args'_v21613 = v21633 
    #endif
    let v21636 : Ref<Str> = _run_target_args'_v21613 
    (* run_target_args'
    let v21649 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21650 : string = "String::from($0)"
    let v21651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21636 v21650 
    let _run_target_args'_v21649 = v21651 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21652 : string = "String::from($0)"
    let v21653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21636 v21652 
    let _run_target_args'_v21649 = v21653 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21654 : string = "String::from($0)"
    let v21655 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21636 v21654 
    let _run_target_args'_v21649 = v21655 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21657 : std_string_String = v21636 |> unbox<std_string_String>
    let _run_target_args'_v21649 = v21657 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21661 : std_string_String = v21636 |> unbox<std_string_String>
    let _run_target_args'_v21649 = v21661 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21665 : std_string_String = v21636 |> unbox<std_string_String>
    let _run_target_args'_v21649 = v21665 
    #endif
#else
    let v21669 : std_string_String = v21636 |> unbox<std_string_String>
    let _run_target_args'_v21649 = v21669 
    #endif
    let v21672 : std_string_String = _run_target_args'_v21649 
    (* run_target_args'
    let v21685 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21686 : string = "&*$0"
    let v21687 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21608 v21686 
    let _run_target_args'_v21685 = v21687 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21688 : string = "&*$0"
    let v21689 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21608 v21688 
    let _run_target_args'_v21685 = v21689 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21690 : string = "&*$0"
    let v21691 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21608 v21690 
    let _run_target_args'_v21685 = v21691 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21693 : Ref<Str> = v21608 |> unbox<Ref<Str>>
    let _run_target_args'_v21685 = v21693 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21697 : Ref<Str> = v21608 |> unbox<Ref<Str>>
    let _run_target_args'_v21685 = v21697 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21701 : Ref<Str> = v21608 |> unbox<Ref<Str>>
    let _run_target_args'_v21685 = v21701 
    #endif
#else
    let v21705 : Ref<Str> = v21608 |> unbox<Ref<Str>>
    let _run_target_args'_v21685 = v21705 
    #endif
    let v21708 : Ref<Str> = _run_target_args'_v21685 
    (* run_target_args'
    let v21721 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21722 : string = "String::from($0)"
    let v21723 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21708 v21722 
    let _run_target_args'_v21721 = v21723 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21724 : string = "String::from($0)"
    let v21725 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21708 v21724 
    let _run_target_args'_v21721 = v21725 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21726 : string = "String::from($0)"
    let v21727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21708 v21726 
    let _run_target_args'_v21721 = v21727 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21729 : std_string_String = v21708 |> unbox<std_string_String>
    let _run_target_args'_v21721 = v21729 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21733 : std_string_String = v21708 |> unbox<std_string_String>
    let _run_target_args'_v21721 = v21733 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21737 : std_string_String = v21708 |> unbox<std_string_String>
    let _run_target_args'_v21721 = v21737 
    #endif
#else
    let v21741 : std_string_String = v21708 |> unbox<std_string_String>
    let _run_target_args'_v21721 = v21741 
    #endif
    let v21744 : std_string_String = _run_target_args'_v21721 
    let v21754 : (std_string_String * std_string_String) = v21672, v21744 
    let func1_from_result = v21754 //
    let v21757 : _ = func1_from_result
    let v21758 : string = $"true; $0 /*"
    let v21759 : bool = Fable.Core.RustInterop.emitRustExpr v21757 v21758 
    let v21760 : string = $"*/ }}); //"
    let v21761 : bool = Fable.Core.RustInterop.emitRustExpr () v21760 
    let v21762 : string = $"_func1_from_v21603"
    let v21763 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v21762 
    let v21764 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v21765 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v21763)
    let v21766 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v21602, v21765) v21764 
    let v21767 : string = "std::collections::BTreeMap::from_iter(v21766.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v21768 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v21767 
    let v21769 : string = "serde_json::to_string(&v21768)"
    let v21770 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v21769 
    let v21771 : (serde_json_Error -> string) = method291()
    (* run_target_args'
    let v21773 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21774 : string = "$0.map_err(|x| $1(x))"
    let v21775 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21770, v21771) v21774 
    let _run_target_args'_v21773 = v21775 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21776 : string = "$0.map_err(|x| $1(x))"
    let v21777 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21770, v21771) v21776 
    let _run_target_args'_v21773 = v21777 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21778 : string = "$0.map_err(|x| $1(x))"
    let v21779 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21770, v21771) v21778 
    let _run_target_args'_v21773 = v21779 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21780 : Result<std_string_String, string> = match v21770 with Ok x -> Ok x | Error x -> Error (v21771 x)
    let _run_target_args'_v21773 = v21780 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21781 : Result<std_string_String, string> = match v21770 with Ok x -> Ok x | Error x -> Error (v21771 x)
    let _run_target_args'_v21773 = v21781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21782 : Result<std_string_String, string> = match v21770 with Ok x -> Ok x | Error x -> Error (v21771 x)
    let _run_target_args'_v21773 = v21782 
    #endif
#else
    let v21783 : Result<std_string_String, string> = match v21770 with Ok x -> Ok x | Error x -> Error (v21771 x)
    let _run_target_args'_v21773 = v21783 
    #endif
    let v21784 : Result<std_string_String, string> = _run_target_args'_v21773 
    let v21787 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v21788 : bool = Fable.Core.RustInterop.emitRustExpr v21784 v21787 
    let v21789 : string = "x"
    let v21790 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21789 
    let v21791 : string = "fable_library_rust::String_::fromString($0)"
    let v21792 : string = Fable.Core.RustInterop.emitRustExpr v21790 v21791 
    let v21793 : string = "true; $0 })"
    let v21794 : bool = Fable.Core.RustInterop.emitRustExpr v21792 v21793 
    let v21795 : string = "_result_map_"
    let v21796 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v21795 
    let v21797 : string = ""
    let v21798 : string = "}"
    let v21799 : string = v21797 + v21798 
    let x = v21796 //
    let v21800 : _ = x
    let v21801 : unit = ()
    (* run_target_args'
    let v21802 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21803 : string = $"true; let _fix_closure_v21801 = $0"
    let v21804 : bool = Fable.Core.RustInterop.emitRustExpr v21800 v21803 
    let _run_target_args'_v21802 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21805 : string = $"true; let _fix_closure_v21801 = $0"
    let v21806 : bool = Fable.Core.RustInterop.emitRustExpr v21800 v21805 
    let _run_target_args'_v21802 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21807 : string = $"true; let _fix_closure_v21801 = $0"
    let v21808 : bool = Fable.Core.RustInterop.emitRustExpr v21800 v21807 
    let _run_target_args'_v21802 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v21802 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v21802 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v21802 = false 
    #endif
#else
    let _run_target_args'_v21802 = false 
    #endif
    let v21809 : bool = _run_target_args'_v21802 
    let v21810 : string = $"true; _fix_closure_v21801 " + v21799 + "); " + v21797 + " // rust.fix_closure'"
    let v21811 : bool = Fable.Core.RustInterop.emitRustExpr () v21810 
    let v21812 : string = "__future_init"
    let v21813 : _ = Fable.Core.RustInterop.emitRustExpr () v21812 
    let v21814 : string = "v21813"
    let v21815 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v21814 
    v21815
and closure1 () (v0 : (string [])) : int32 =
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure2()
    let v17 : unit = (fun () -> v16 (); v15) ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : Mut4, v45 : int64 option) = TraceState.trace_state.Value
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure5(v0)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v680 : clap_Command = method0()
    let v681 : string = "clap::Command::get_matches($0)"
    let v682 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v680 v681 
    let v683 : US0 = v44.l0
    let v684 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method18(v683, v682)
    let v685 : string = "futures::executor::block_on($0)"
    let v686 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v684 v685 
    (* run_target_args'
    let v688 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v689 : string = "$0.unwrap()"
    let v690 : string = Fable.Core.RustInterop.emitRustExpr v686 v689 
    let _run_target_args'_v688 = v690 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v691 : string = "$0.unwrap()"
    let v692 : string = Fable.Core.RustInterop.emitRustExpr v686 v691 
    let _run_target_args'_v688 = v692 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v693 : string = "$0.unwrap()"
    let v694 : string = Fable.Core.RustInterop.emitRustExpr v686 v693 
    let _run_target_args'_v688 = v694 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v695 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v695 
    #endif
#if FABLE_COMPILER_PYTHON
    let v696 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v696 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v697 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v697 
    #endif
#else
    let v698 : string = match v686 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v688 = v698 
    #endif
    let v699 : string = _run_target_args'_v688 
    let v702 : US0 = v44.l0
    let v703 : bool =
        match v702 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v703 then
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure10(v699)
        let v707 : unit = (fun () -> v706 (); v705) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
