#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US37 =
    | US37_0 of f0_0 : string
    | US37_1 of f1_0 : string
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
    | US38_2
and [<Struct>] US39 =
    | US39_0 of f0_0 : US38
    | US39_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US40_1
and [<Struct>] US41 =
    | US41_0 of f0_0 : int32 * f0_1 : string
    | US41_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US42 =
    | US42_0 of f0_0 : std_collections_HashMap<string, string>
    | US42_1
and [<Struct>] US43 =
    | US43_0 of f0_0 : US5
    | US43_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US44 =
    | US44_0
    | US44_1 of f1_0 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_fs_FileType
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0
    | US46_1
    | US46_2
and [<Struct>] US47 =
    | US47_0 of f0_0 : async_walkdir_DirEntry
    | US47_1 of f1_0 : std_string_String
and [<Struct>] US48 =
    | US48_0 of f0_0 : string * f0_1 : string
    | US48_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    (* run_target_args'
    let v79 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v80 
    let _run_target_args'_v79 = v81 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v82 : string = "&*$0"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v82 
    let _run_target_args'_v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "&*$0"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v84 
    let _run_target_args'_v79 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _run_target_args'_v79 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _run_target_args'_v79 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _run_target_args'_v79 = v92 
    #endif
#else
    let v95 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _run_target_args'_v79 = v95 
    #endif
    let v98 : Ref<Str> = _run_target_args'_v79 
    (* run_target_args'
    let v103 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v104 
    let _run_target_args'_v103 = v105 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v106 : string = "String::from($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v106 
    let _run_target_args'_v103 = v107 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v108 : string = "String::from($0)"
    let v109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v108 
    let _run_target_args'_v103 = v109 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : std_string_String = v98 |> unbox<std_string_String>
    let _run_target_args'_v103 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : std_string_String = v98 |> unbox<std_string_String>
    let _run_target_args'_v103 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v98 |> unbox<std_string_String>
    let _run_target_args'_v103 = v116 
    #endif
#else
    let v119 : std_string_String = v98 |> unbox<std_string_String>
    let _run_target_args'_v103 = v119 
    #endif
    let v122 : std_string_String = _run_target_args'_v103 
    let v127 : string = "Box::new($0)"
    let v128 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v122 v127 
    let v129 : string = "Box::leak($0)"
    let v130 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v132 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let v133 : string = "true; $0 }).collect::<Vec<_>>()"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let v135 : string = "_vec_map"
    let v136 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v138 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "$0.value_parser($1)"
    let v140 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v138) v139 
    let v141 : string = "clap::Command::arg($0, $1)"
    let v142 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v140) v141 
    let v143 : string = "NAME"
    let v144 : string = "r#\"" + v143 + "\"#"
    let v145 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v144 
    let v146 : string = "VERSION"
    let v147 : string = "r#\"" + v146 + "\"#"
    let v148 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v145; v148|]
    let v150 : unativeint = 1 |> unativeint 
    let v153 : unativeint = 0 |> unativeint 
    let v156 : unativeint = 0 |> unativeint 
    let v159 : bool = v153 = v156 
    let v167 : clap_builder_ValueRange =
        if v159 then
            let v162 : string = "clap::builder::ValueRange::new($0..)"
            let v163 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v150 v162 
            v163
        else
            let v164 : string = ""
            let v165 : string = "clap::builder::ValueRange::new($0.." + v164 + "$1)"
            let v166 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v150, v153) v165 
            v166
    let v168 : string = "deps"
    let v169 : string = "r#\"" + v168 + "\"#"
    let v170 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v169 
    let v171 : string = "clap::Arg::new($0)"
    let v172 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v170 v171 
    let v173 : string = "$0.short($1)"
    let v174 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v172, 'd') v173 
    let v175 : string = "r#\"" + v168 + "\"#"
    let v176 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v175 
    let v177 : string = "$0.long($1)"
    let v178 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v174, v176) v177 
    let v179 : string = "$0.to_vec()"
    let v180 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v149 v179 
    let v181 : string = "$0.value_names($1)"
    let v182 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v178, v180) v181 
    let v183 : string = "$0.num_args($1)"
    let v184 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v182, v167) v183 
    let v185 : string = "clap::ArgAction::Append"
    let v186 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "$0.action($1)"
    let v188 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v184, v186) v187 
    let v189 : string = "clap::Command::arg($0, $1)"
    let v190 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v142, v188) v189 
    let v191 : string = "clap::Command::subcommand($0, v190)"
    let v192 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v191 
    let v193 : string = "fable"
    let v194 : string = "r#\"" + v193 + "\"#"
    let v195 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "clap::Command::new($0)"
    let v197 : clap_Command = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "fs-path"
    let v199 : string = "r#\"" + v198 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "clap::Arg::new($0)"
    let v202 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "$0.short($1)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v202, 'f') v203 
    let v205 : string = "r#\"" + v198 + "\"#"
    let v206 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : string = "$0.long($1)"
    let v208 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, v206) v207 
    let v209 : string = "$0.required($1)"
    let v210 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v208, true) v209 
    let v211 : string = "clap::Command::arg($0, $1)"
    let v212 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v197, v210) v211 
    let v213 : string = "r#\"" + v0 + "\"#"
    let v214 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v213 
    let v215 : string = "clap::Arg::new($0)"
    let v216 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v214 v215 
    let v217 : string = "$0.short($1)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v216, 'c') v217 
    let v219 : string = "r#\"" + v0 + "\"#"
    let v220 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v219 
    let v221 : string = "$0.long($1)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v218, v220) v221 
    let v223 : string = "clap::Command::arg($0, $1)"
    let v224 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v212, v222) v223 
    let v225 : string = "clap::Command::subcommand($0, v224)"
    let v226 : clap_Command = Fable.Core.RustInterop.emitRustExpr v192 v225 
    let v227 : string = "rust"
    let v228 : string = "r#\"" + v227 + "\"#"
    let v229 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "clap::Command::new($0)"
    let v231 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v230 
    let v232 : string = "r#\"" + v198 + "\"#"
    let v233 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v232 
    let v234 : string = "clap::Arg::new($0)"
    let v235 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v233 v234 
    let v236 : string = "$0.short($1)"
    let v237 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v235, 'f') v236 
    let v238 : string = "r#\"" + v198 + "\"#"
    let v239 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v238 
    let v240 : string = "$0.long($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v237, v239) v240 
    let v242 : string = "$0.required($1)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, true) v242 
    let v244 : string = "clap::Command::arg($0, $1)"
    let v245 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v231, v243) v244 
    let v246 : string = "r#\"" + v143 + "\"#"
    let v247 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : string = "r#\"" + v146 + "\"#"
    let v249 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v248 
    let v250 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v247; v249|]
    let v251 : unativeint = 1 |> unativeint 
    let v254 : unativeint = 0 |> unativeint 
    let v257 : unativeint = 0 |> unativeint 
    let v260 : bool = v254 = v257 
    let v268 : clap_builder_ValueRange =
        if v260 then
            let v263 : string = "clap::builder::ValueRange::new($0..)"
            let v264 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v251 v263 
            v264
        else
            let v265 : string = ""
            let v266 : string = "clap::builder::ValueRange::new($0.." + v265 + "$1)"
            let v267 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v251, v254) v266 
            v267
    let v269 : string = "r#\"" + v168 + "\"#"
    let v270 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v269 
    let v271 : string = "clap::Arg::new($0)"
    let v272 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v270 v271 
    let v273 : string = "$0.short($1)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v272, 'd') v273 
    let v275 : string = "r#\"" + v168 + "\"#"
    let v276 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v275 
    let v277 : string = "$0.long($1)"
    let v278 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, v276) v277 
    let v279 : string = "$0.to_vec()"
    let v280 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v250 v279 
    let v281 : string = "$0.value_names($1)"
    let v282 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v278, v280) v281 
    let v283 : string = "$0.num_args($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v282, v268) v283 
    let v285 : string = "clap::ArgAction::Append"
    let v286 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "$0.action($1)"
    let v288 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v284, v286) v287 
    let v289 : string = "clap::Command::arg($0, $1)"
    let v290 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v245, v288) v289 
    let v291 : unativeint = 0 |> unativeint 
    let v294 : unativeint = 1 |> unativeint 
    let v297 : unativeint = 0 |> unativeint 
    let v300 : bool = v294 = v297 
    let v308 : clap_builder_ValueRange =
        if v300 then
            let v303 : string = "clap::builder::ValueRange::new($0..)"
            let v304 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v291 v303 
            v304
        else
            let v305 : string = "="
            let v306 : string = "clap::builder::ValueRange::new($0.." + v305 + "$1)"
            let v307 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v291, v294) v306 
            v307
    let v309 : string = "wasm"
    let v310 : string = "r#\"" + v309 + "\"#"
    let v311 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "clap::Arg::new($0)"
    let v313 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v311 v312 
    let v314 : string = "$0.short($1)"
    let v315 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v313, 'w') v314 
    let v316 : string = "r#\"" + v309 + "\"#"
    let v317 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : string = "$0.long($1)"
    let v319 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v315, v317) v318 
    let v320 : string = "$0.num_args($1)"
    let v321 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v319, v308) v320 
    let v322 : string = "$0.require_equals($1)"
    let v323 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v321, true) v322 
    let v324 : string = ""
    let v325 : string = "r#\"" + v324 + "\"#"
    let v326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "$0.default_missing_value($1)"
    let v328 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v323, v326) v327 
    let v329 : string = "clap::Command::arg($0, $1)"
    let v330 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v290, v328) v329 
    let v331 : unativeint = 0 |> unativeint 
    let v334 : unativeint = 1 |> unativeint 
    let v337 : unativeint = 0 |> unativeint 
    let v340 : bool = v334 = v337 
    let v348 : clap_builder_ValueRange =
        if v340 then
            let v343 : string = "clap::builder::ValueRange::new($0..)"
            let v344 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v331 v343 
            v344
        else
            let v345 : string = "="
            let v346 : string = "clap::builder::ValueRange::new($0.." + v345 + "$1)"
            let v347 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v331, v334) v346 
            v347
    let v349 : string = "contract"
    let v350 : string = "r#\"" + v349 + "\"#"
    let v351 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v350 
    let v352 : string = "clap::Arg::new($0)"
    let v353 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let v354 : string = "$0.short($1)"
    let v355 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v353, 'c') v354 
    let v356 : string = "r#\"" + v349 + "\"#"
    let v357 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "$0.long($1)"
    let v359 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v355, v357) v358 
    let v360 : string = "$0.num_args($1)"
    let v361 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v359, v348) v360 
    let v362 : string = "$0.require_equals($1)"
    let v363 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v361, true) v362 
    let v364 : string = "r#\"" + v324 + "\"#"
    let v365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v364 
    let v366 : string = "$0.default_missing_value($1)"
    let v367 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v363, v365) v366 
    let v368 : string = "clap::Command::arg($0, $1)"
    let v369 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v330, v367) v368 
    let v370 : string = "cleanup"
    let v371 : string = "r#\"" + v370 + "\"#"
    let v372 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v371 
    let v373 : string = "clap::Arg::new($0)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v372 v373 
    let v375 : string = "$0.short($1)"
    let v376 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v374, 'l') v375 
    let v377 : string = "r#\"" + v370 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "$0.long($1)"
    let v380 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v376, v378) v379 
    let v381 : string = "true"
    let v382 : string = "r#\"" + v381 + "\"#"
    let v383 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v382 
    let v384 : string = "$0.default_value($1)"
    let v385 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v380, v383) v384 
    let v386 : string = "clap::ArgAction::SetFalse"
    let v387 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v386 
    let v388 : string = "$0.action($1)"
    let v389 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v385, v387) v388 
    let v390 : string = "clap::Command::arg($0, $1)"
    let v391 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v369, v389) v390 
    let v392 : string = "clap::Command::subcommand($0, v391)"
    let v393 : clap_Command = Fable.Core.RustInterop.emitRustExpr v226 v392 
    let v394 : string = "typescript"
    let v395 : string = "r#\"" + v394 + "\"#"
    let v396 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v395 
    let v397 : string = "clap::Command::new($0)"
    let v398 : clap_Command = Fable.Core.RustInterop.emitRustExpr v396 v397 
    let v399 : string = "r#\"" + v198 + "\"#"
    let v400 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v399 
    let v401 : string = "clap::Arg::new($0)"
    let v402 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v400 v401 
    let v403 : string = "$0.short($1)"
    let v404 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v402, 'f') v403 
    let v405 : string = "r#\"" + v198 + "\"#"
    let v406 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v405 
    let v407 : string = "$0.long($1)"
    let v408 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v404, v406) v407 
    let v409 : string = "$0.required($1)"
    let v410 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v408, true) v409 
    let v411 : string = "clap::Command::arg($0, $1)"
    let v412 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v398, v410) v411 
    let v413 : string = "r#\"" + v143 + "\"#"
    let v414 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v413 
    let v415 : string = "r#\"" + v146 + "\"#"
    let v416 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v415 
    let v417 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v414; v416|]
    let v418 : unativeint = 1 |> unativeint 
    let v421 : unativeint = 0 |> unativeint 
    let v424 : unativeint = 0 |> unativeint 
    let v427 : bool = v421 = v424 
    let v434 : clap_builder_ValueRange =
        if v427 then
            let v430 : string = "clap::builder::ValueRange::new($0..)"
            let v431 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v418 v430 
            v431
        else
            let v432 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v433 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v418, v421) v432 
            v433
    let v435 : string = "r#\"" + v168 + "\"#"
    let v436 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v435 
    let v437 : string = "clap::Arg::new($0)"
    let v438 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v436 v437 
    let v439 : string = "$0.short($1)"
    let v440 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v438, 'd') v439 
    let v441 : string = "r#\"" + v168 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "$0.long($1)"
    let v444 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v440, v442) v443 
    let v445 : string = "$0.to_vec()"
    let v446 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v417 v445 
    let v447 : string = "$0.value_names($1)"
    let v448 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v444, v446) v447 
    let v449 : string = "$0.num_args($1)"
    let v450 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v448, v434) v449 
    let v451 : string = "clap::ArgAction::Append"
    let v452 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v451 
    let v453 : string = "$0.action($1)"
    let v454 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v450, v452) v453 
    let v455 : string = "clap::Command::arg($0, $1)"
    let v456 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v412, v454) v455 
    let v457 : string = "clap::Command::subcommand($0, v456)"
    let v458 : clap_Command = Fable.Core.RustInterop.emitRustExpr v393 v457 
    let v459 : string = "python"
    let v460 : string = "r#\"" + v459 + "\"#"
    let v461 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v460 
    let v462 : string = "clap::Command::new($0)"
    let v463 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let v464 : string = "r#\"" + v198 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "clap::Arg::new($0)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let v468 : string = "$0.short($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, 'f') v468 
    let v470 : string = "r#\"" + v198 + "\"#"
    let v471 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v470 
    let v472 : string = "$0.long($1)"
    let v473 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, v471) v472 
    let v474 : string = "$0.required($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v473, true) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v463, v475) v476 
    let v478 : string = "r#\"" + v143 + "\"#"
    let v479 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v478 
    let v480 : string = "r#\"" + v146 + "\"#"
    let v481 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v480 
    let v482 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v479; v481|]
    let v483 : unativeint = 1 |> unativeint 
    let v486 : unativeint = 0 |> unativeint 
    let v489 : unativeint = 0 |> unativeint 
    let v492 : bool = v486 = v489 
    let v499 : clap_builder_ValueRange =
        if v492 then
            let v495 : string = "clap::builder::ValueRange::new($0..)"
            let v496 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v483 v495 
            v496
        else
            let v497 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v498 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v483, v486) v497 
            v498
    let v500 : string = "r#\"" + v168 + "\"#"
    let v501 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v500 
    let v502 : string = "clap::Arg::new($0)"
    let v503 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v501 v502 
    let v504 : string = "$0.short($1)"
    let v505 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v503, 'd') v504 
    let v506 : string = "r#\"" + v168 + "\"#"
    let v507 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v506 
    let v508 : string = "$0.long($1)"
    let v509 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v505, v507) v508 
    let v510 : string = "$0.to_vec()"
    let v511 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v482 v510 
    let v512 : string = "$0.value_names($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v509, v511) v512 
    let v514 : string = "$0.num_args($1)"
    let v515 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v499) v514 
    let v516 : string = "clap::ArgAction::Append"
    let v517 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v516 
    let v518 : string = "$0.action($1)"
    let v519 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v515, v517) v518 
    let v520 : string = "clap::Command::arg($0, $1)"
    let v521 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v519) v520 
    let v522 : string = "clap::Command::subcommand($0, v521)"
    let v523 : clap_Command = Fable.Core.RustInterop.emitRustExpr v458 v522 
    let v524 : string = "dib"
    let v525 : string = "r#\"" + v524 + "\"#"
    let v526 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v525 
    let v527 : string = "clap::Command::new($0)"
    let v528 : clap_Command = Fable.Core.RustInterop.emitRustExpr v526 v527 
    let v529 : string = "path"
    let v530 : string = "r#\"" + v529 + "\"#"
    let v531 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v530 
    let v532 : string = "clap::Arg::new($0)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let v534 : string = "$0.short($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, 'p') v534 
    let v536 : string = "r#\"" + v529 + "\"#"
    let v537 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "$0.long($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "$0.required($1)"
    let v541 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v539, true) v540 
    let v542 : string = "clap::Command::arg($0, $1)"
    let v543 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v528, v541) v542 
    let v544 : string = "u8"
    let v545 : string = "clap::value_parser!(" + v544 + ").into()"
    let v546 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v545 
    let v547 : string = "retries"
    let v548 : string = "r#\"" + v547 + "\"#"
    let v549 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v548 
    let v550 : string = "clap::Arg::new($0)"
    let v551 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v549 v550 
    let v552 : string = "$0.short($1)"
    let v553 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v551, 'r') v552 
    let v554 : string = "r#\"" + v547 + "\"#"
    let v555 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v554 
    let v556 : string = "$0.long($1)"
    let v557 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v553, v555) v556 
    let v558 : string = "$0.value_parser($1)"
    let v559 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v557, v546) v558 
    let v560 : string = "clap::Command::arg($0, $1)"
    let v561 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v543, v559) v560 
    let v562 : string = "working-directory"
    let v563 : string = "r#\"" + v562 + "\"#"
    let v564 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v563 
    let v565 : string = "clap::Arg::new($0)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v564 v565 
    let v567 : string = "$0.short($1)"
    let v568 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, 'w') v567 
    let v569 : string = "r#\"" + v562 + "\"#"
    let v570 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v569 
    let v571 : string = "$0.long($1)"
    let v572 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v568, v570) v571 
    let v573 : string = "clap::Command::arg($0, $1)"
    let v574 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v561, v572) v573 
    let v575 : string = "clap::Command::subcommand($0, v574)"
    let v576 : clap_Command = Fable.Core.RustInterop.emitRustExpr v523 v575 
    v576
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method4(v0)
    let v3 : string = "std::env::var(&*$0)"
    let v4 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "x"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "fable_library_rust::String_::fromString($0)"
    let v10 : string = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "true; $0 })"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "_result_map_"
    let v14 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = method5()
    let v16 : string = "$0.unwrap_or($1)"
    let v17 : string = Fable.Core.RustInterop.emitRustExpr struct (v14, v15) v16 
    let _run_target_args'_v1 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : US3 = US3_1
    let v19 : US4 = US4_2(v18)
    let v20 : string = $"env.get_environment_variable / target: {v19} / var: {v0}"
    let v21 : string = failwith<string> v20
    let _run_target_args'_v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : US3 = US3_2
    let v23 : US4 = US4_2(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _run_target_args'_v1 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : string = "process.env[$0] ?? \"\""
    let v27 : string = Fable.Core.JsInterop.emitJsExpr v0 v26 
    let _run_target_args'_v1 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : string = "os"
    let v29 : IOsEnviron = Fable.Core.PyInterop.importAll v28 
    let v30 : string = "v29.environ"
    let v31 : obj = Fable.Core.PyInterop.emitPyExpr () v30 
    let v34 : string = "v31.get($0)"
    let v35 : string = Fable.Core.PyInterop.emitPyExpr v0 v34 
    let mutable _v35 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v38 : (string -> string option) = Option.ofObj
    let v39 : string option = v38 v35
    v39 
    #else
    Some v35 
    #endif
    |> fun x -> _v35 <- Some x
    let v40 : string option = match _v35 with Some x -> x | None -> failwith "optionm'.of_obj / _v35=None"
    let v43 : (string -> US5) = method6()
    let v44 : US5 option = v40 |> Option.map v43 
    let v55 : US5 = US5_1
    let v56 : US5 = v44 |> Option.defaultValue v55 
    let v63 : string =
        match v56 with
        | US5_1 -> (* None *)
            let v61 : string = ""
            v61
        | US5_0(v60) -> (* Some *)
            v60
    let _run_target_args'_v1 = v63 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : US3 = US3_1
    let v65 : US4 = US4_0(v64)
    let v66 : string = $"env.get_environment_variable / target: {v65} / var: {v0}"
    let v67 : string = failwith<string> v66
    let _run_target_args'_v1 = v67 
    #endif
#else
    let v68 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v69 : string = v68 v0
    let mutable _v69 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v70 : (string -> string option) = Option.ofObj
    let v71 : string option = v70 v69
    v71 
    #else
    Some v69 
    #endif
    |> fun x -> _v69 <- Some x
    let v72 : string option = match _v69 with Some x -> x | None -> failwith "optionm'.of_obj / _v69=None"
    let v75 : (string -> US5) = method6()
    let v76 : US5 option = v72 |> Option.map v75 
    let v87 : US5 = US5_1
    let v88 : US5 = v76 |> Option.defaultValue v87 
    let v95 : string =
        match v88 with
        | US5_1 -> (* None *)
            let v93 : string = ""
            v93
        | US5_0(v92) -> (* Some *)
            v92
    let _run_target_args'_v1 = v95 
    #endif
    let v96 : string = _run_target_args'_v1 
    v96
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    let v2 : bool = "Verbose" = v1
    let v6 : US1 =
        if v2 then
            let v3 : US0 = US0_0
            US1_0(v3)
        else
            US1_1
    let v47 : US1 =
        match v6 with
        | US1_1 -> (* None *)
            let v9 : bool = "Debug" = v1
            let v13 : US1 =
                if v9 then
                    let v10 : US0 = US0_1
                    US1_0(v10)
                else
                    US1_1
            match v13 with
            | US1_1 -> (* None *)
                let v16 : bool = "Info" = v1
                let v20 : US1 =
                    if v16 then
                        let v17 : US0 = US0_2
                        US1_0(v17)
                    else
                        US1_1
                match v20 with
                | US1_1 -> (* None *)
                    let v23 : bool = "Warning" = v1
                    let v27 : US1 =
                        if v23 then
                            let v24 : US0 = US0_3
                            US1_0(v24)
                        else
                            US1_1
                    match v27 with
                    | US1_1 -> (* None *)
                        let v30 : bool = "Critical" = v1
                        let v34 : US1 =
                            if v30 then
                                let v31 : US0 = US0_4
                                US1_0(v31)
                            else
                                US1_1
                        match v34 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v35) -> (* Some *)
                            US1_0(v35)
                    | US1_0(v28) -> (* Some *)
                        US1_0(v28)
                | US1_0(v21) -> (* Some *)
                    US1_0(v21)
            | US1_0(v14) -> (* Some *)
                US1_0(v14)
        | US1_0(v7) -> (* Some *)
            US1_0(v7)
    let v48 : string = "AUTOMATION"
    let v49 : string = method3(v48)
    let v50 : string = "True"
    let v51 : bool = v49 <> v50 
    let v107 : US2 =
        if v51 then
            US2_1
        else
            (* run_target_args'
            let v55 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v56 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v56 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v57 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v57 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v58 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v55 = v58 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v61 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v61 
            #endif
#if FABLE_COMPILER_PYTHON
            let v62 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v62 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v63 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v63 
            #endif
#else
            let v64 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v55 = v64 
            #endif
            let v65 : System.DateTime = _run_target_args'_v55 
            (* run_target_args'
            let v70 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v71 : (System.DateTime -> int64) = _.Ticks
            let v72 : int64 = v71 v65
            let _run_target_args'_v70 = v72 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v73 : (System.DateTime -> int64) = _.Ticks
            let v74 : int64 = v73 v65
            let _run_target_args'_v70 = v74 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v75 : int64 = null |> unbox<int64>
            let _run_target_args'_v70 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v78 : (System.DateTime -> int64) = _.Ticks
            let v79 : int64 = v78 v65
            let _run_target_args'_v70 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : (System.DateTime -> int64) = _.Ticks
            let v81 : int64 = v80 v65
            let _run_target_args'_v70 = v81 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v82 : (System.DateTime -> int64) = _.Ticks
            let v83 : int64 = v82 v65
            let _run_target_args'_v70 = v83 
            #endif
#else
            let v84 : (System.DateTime -> int64) = _.Ticks
            let v85 : int64 = v84 v65
            let _run_target_args'_v70 = v85 
            #endif
            let v86 : int64 = _run_target_args'_v70 
            let v103 : int64 = v86 |> int64 
            US2_0(v103)
    struct (v47, v107)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2 : US1, v3 : US2) = method2()
    let _run_target_args'_v1 = struct (v2, v3) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : US1 = US1_1
    let v5 : US2 = US2_1
    let _run_target_args'_v1 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "AUTOMATION"
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "String::from($0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : std_string_String = v9 |> unbox<std_string_String>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v9 |> unbox<std_string_String>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : std_string_String = v9 |> unbox<std_string_String>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : std_string_String = v9 |> unbox<std_string_String>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : std_string_String = _run_target_args'_v10 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v29 v34 
    let _run_target_args'_v7 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v36 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "fable_library_rust::String_::fromString($0)"
    let v63 : string = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let _run_target_args'_v7 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    (* run_target_args'
    let v66 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "String::from($0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _run_target_args'_v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _run_target_args'_v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "String::from($0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _run_target_args'_v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : std_string_String = v65 |> unbox<std_string_String>
    let _run_target_args'_v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v65 |> unbox<std_string_String>
    let _run_target_args'_v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : std_string_String = v65 |> unbox<std_string_String>
    let _run_target_args'_v66 = v79 
    #endif
#else
    let v82 : std_string_String = v65 |> unbox<std_string_String>
    let _run_target_args'_v66 = v82 
    #endif
    let v85 : std_string_String = _run_target_args'_v66 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v85 v90 
    let _run_target_args'_v7 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : string = null |> unbox<string>
    let _run_target_args'_v7 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v7 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : string = null |> unbox<string>
    let _run_target_args'_v7 = v98 
    #endif
#else
    let v101 : string = null |> unbox<string>
    let _run_target_args'_v7 = v101 
    #endif
    let v104 : string = _run_target_args'_v7 
    let v109 : string = "True"
    let v110 : bool = v104 <> v109 
    let v121 : US2 =
        if v110 then
            US2_1
        else
            let v114 : string = $"near_sdk::env::block_timestamp()"
            let v115 : uint64 = Fable.Core.RustInterop.emitRustExpr () v114 
            let v116 : (uint64 -> int64) = int64
            let v117 : int64 = v116 v115
            US2_0(v117)
    let v122 : US1 = US1_1
    let _run_target_args'_v1 = struct (v122, v121) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v123 : US1, v124 : US2) = method2()
    let _run_target_args'_v1 = struct (v123, v124) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v125 : US1, v126 : US2) = method2()
    let _run_target_args'_v1 = struct (v125, v126) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v127 : US1, v128 : US2) = method2()
    let _run_target_args'_v1 = struct (v127, v128) 
    #endif
#else
    let struct (v129 : US1, v130 : US2) = method2()
    let _run_target_args'_v1 = struct (v129, v130) 
    #endif
    let struct (v131 : US1, v132 : US2) = _run_target_args'_v1 
    let v137 : Mut0 = {l0 = 1L} : Mut0
    let v138 : (string -> unit) = closure4()
    let v139 : Mut1 = {l0 = v138} : Mut1
    let v140 : Mut2 = {l0 = true} : Mut2
    let v141 : string = ""
    let v142 : Mut3 = {l0 = v141} : Mut3
    let v145 : US0 =
        match v131 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v143) -> (* Some *)
            v143
    let v146 : Mut4 = {l0 = v145} : Mut4
    let v153 : int64 option =
        match v132 with
        | US2_1 -> (* None *)
            let v151 : int64 option = None
            v151
        | US2_0(v147) -> (* Some *)
            let v148 : int64 option = Some v147 
            v148
    struct (v137, v139, v140, v142, v146, v153)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : US0 = v21.l0
    let v36 : bool = v19.l0
    let v37 : bool = v36 = false
    if v37 then
        false
    else
        let v38 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v39 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v35
        let v40 : bool = v38 >= v39
        v40
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : (int64 -> US2) = method9()
    let v8 : US2 option = v5 |> Option.map v7 
    let v19 : US2 = US2_1
    let v20 : US2 = v8 |> Option.defaultValue v19 
    let v117 : System.DateTime =
        match v20 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v101 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v102 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v102 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v103 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v101 = v104 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v107 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v107 
            #endif
#if FABLE_COMPILER_PYTHON
            let v108 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v108 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v109 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v109 
            #endif
#else
            let v110 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v101 = v110 
            #endif
            let v111 : System.DateTime = _run_target_args'_v101 
            v111
        | US2_0(v24) -> (* Some *)
            (* run_target_args'
            let v25 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v25 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v33 
            #endif
#else
            let v34 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v25 = v34 
            #endif
            let v35 : System.DateTime = _run_target_args'_v25 
            (* run_target_args'
            let v40 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v41 : (System.DateTime -> int64) = _.Ticks
            let v42 : int64 = v41 v35
            let _run_target_args'_v40 = v42 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v43 : (System.DateTime -> int64) = _.Ticks
            let v44 : int64 = v43 v35
            let _run_target_args'_v40 = v44 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v45 : int64 = null |> unbox<int64>
            let _run_target_args'_v40 = v45 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v48 : (System.DateTime -> int64) = _.Ticks
            let v49 : int64 = v48 v35
            let _run_target_args'_v40 = v49 
            #endif
#if FABLE_COMPILER_PYTHON
            let v50 : (System.DateTime -> int64) = _.Ticks
            let v51 : int64 = v50 v35
            let _run_target_args'_v40 = v51 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v52 : (System.DateTime -> int64) = _.Ticks
            let v53 : int64 = v52 v35
            let _run_target_args'_v40 = v53 
            #endif
#else
            let v54 : (System.DateTime -> int64) = _.Ticks
            let v55 : int64 = v54 v35
            let _run_target_args'_v40 = v55 
            #endif
            let v56 : int64 = _run_target_args'_v40 
            let v73 : int64 = v56 |> int64 
            let v76 : int64 = v73 - v24
            let v77 : System.TimeSpan = v76 |> System.TimeSpan 
            let v82 : (System.TimeSpan -> int32) = _.Hours
            let v83 : int32 = v82 v77
            let v86 : (System.TimeSpan -> int32) = _.Minutes
            let v87 : int32 = v86 v77
            let v90 : (System.TimeSpan -> int32) = _.Seconds
            let v91 : int32 = v90 v77
            let v94 : (System.TimeSpan -> int32) = _.Milliseconds
            let v95 : int32 = v94 v77
            let v98 : System.DateTime = System.DateTime (1, 1, 1, v83, v87, v91, v95)
            v98
    let v118 : string = method10()
    let v121 : bool = v118 = ""
    let v123 : string =
        if v121 then
            let v122 : string = "M-d-y hh:mm:ss tt"
            v122
        else
            v118
    let v124 : (string -> string) = v117.ToString
    let v125 : string = v124 v123
    let _run_target_args'_v6 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : (int64 -> US2) = method9()
    let v140 : US2 option = v5 |> Option.map v139 
    let v151 : US2 = US2_1
    let v152 : US2 = v140 |> Option.defaultValue v151 
    let v249 : System.DateTime =
        match v152 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v235 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v236 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v233 = v236 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v239 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v240 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v241 
            #endif
#else
            let v242 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v233 = v242 
            #endif
            let v243 : System.DateTime = _run_target_args'_v233 
            v243
        | US2_0(v156) -> (* Some *)
            (* run_target_args'
            let v157 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v158 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v159 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v160 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v157 = v160 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v164 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v165 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v165 
            #endif
#else
            let v166 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v157 = v166 
            #endif
            let v167 : System.DateTime = _run_target_args'_v157 
            (* run_target_args'
            let v172 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v173 : (System.DateTime -> int64) = _.Ticks
            let v174 : int64 = v173 v167
            let _run_target_args'_v172 = v174 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v175 : (System.DateTime -> int64) = _.Ticks
            let v176 : int64 = v175 v167
            let _run_target_args'_v172 = v176 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v177 : int64 = null |> unbox<int64>
            let _run_target_args'_v172 = v177 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v167
            let _run_target_args'_v172 = v181 
            #endif
#if FABLE_COMPILER_PYTHON
            let v182 : (System.DateTime -> int64) = _.Ticks
            let v183 : int64 = v182 v167
            let _run_target_args'_v172 = v183 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v184 : (System.DateTime -> int64) = _.Ticks
            let v185 : int64 = v184 v167
            let _run_target_args'_v172 = v185 
            #endif
#else
            let v186 : (System.DateTime -> int64) = _.Ticks
            let v187 : int64 = v186 v167
            let _run_target_args'_v172 = v187 
            #endif
            let v188 : int64 = _run_target_args'_v172 
            let v205 : int64 = v188 |> int64 
            let v208 : int64 = v205 - v156
            let v209 : System.TimeSpan = v208 |> System.TimeSpan 
            let v214 : (System.TimeSpan -> int32) = _.Hours
            let v215 : int32 = v214 v209
            let v218 : (System.TimeSpan -> int32) = _.Minutes
            let v219 : int32 = v218 v209
            let v222 : (System.TimeSpan -> int32) = _.Seconds
            let v223 : int32 = v222 v209
            let v226 : (System.TimeSpan -> int32) = _.Milliseconds
            let v227 : int32 = v226 v209
            let v230 : System.DateTime = System.DateTime (1, 1, 1, v215, v219, v223, v227)
            v230
    let v250 : string = method10()
    let v253 : bool = v250 = ""
    let v255 : string =
        if v253 then
            let v254 : string = "M-d-y hh:mm:ss tt"
            v254
        else
            v250
    let v256 : (string -> string) = v249.ToString
    let v257 : string = v256 v255
    let _run_target_args'_v6 = v257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = $"near_sdk::env::block_timestamp()"
    let v272 : uint64 = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : (int64 -> US2) = method9()
    let v274 : US2 option = v5 |> Option.map v273 
    let v285 : US2 = US2_1
    let v286 : US2 = v274 |> Option.defaultValue v285 
    let v297 : uint64 =
        match v286 with
        | US2_1 -> (* None *)
            v272
        | US2_0(v290) -> (* Some *)
            let v291 : (int64 -> uint64) = uint64
            let v292 : uint64 = v291 v290
            let v295 : uint64 = v272 - v292
            v295
    let v298 : uint64 = v297 / 1000000000UL
    let v299 : uint64 = v298 % 60UL
    let v300 : uint64 = v298 / 60UL
    let v301 : uint64 = v300 % 60UL
    let v302 : uint64 = v298 / 3600UL
    let v303 : uint64 = v302 % 24UL
    let v304 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v305 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v303, v301, v299) v304 
    let v306 : string = "fable_library_rust::String_::fromString($0)"
    let v307 : string = Fable.Core.RustInterop.emitRustExpr v305 v306 
    let _run_target_args'_v6 = v307 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v308 : (int64 -> US2) = method9()
    let v309 : US2 option = v5 |> Option.map v308 
    let v320 : US2 = US2_1
    let v321 : US2 = v309 |> Option.defaultValue v320 
    let v418 : System.DateTime =
        match v321 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v402 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v403 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v403 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v404 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v404 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v405 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v402 = v405 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v408 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v408 
            #endif
#if FABLE_COMPILER_PYTHON
            let v409 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v409 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v410 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v410 
            #endif
#else
            let v411 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v402 = v411 
            #endif
            let v412 : System.DateTime = _run_target_args'_v402 
            v412
        | US2_0(v325) -> (* Some *)
            (* run_target_args'
            let v326 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v327 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v327 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v328 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v328 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v329 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v326 = v329 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v332 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v332 
            #endif
#if FABLE_COMPILER_PYTHON
            let v333 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v333 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v334 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v334 
            #endif
#else
            let v335 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v326 = v335 
            #endif
            let v336 : System.DateTime = _run_target_args'_v326 
            (* run_target_args'
            let v341 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v342 : (System.DateTime -> int64) = _.Ticks
            let v343 : int64 = v342 v336
            let _run_target_args'_v341 = v343 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v344 : (System.DateTime -> int64) = _.Ticks
            let v345 : int64 = v344 v336
            let _run_target_args'_v341 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v346 : int64 = null |> unbox<int64>
            let _run_target_args'_v341 = v346 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v349 : (System.DateTime -> int64) = _.Ticks
            let v350 : int64 = v349 v336
            let _run_target_args'_v341 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : (System.DateTime -> int64) = _.Ticks
            let v352 : int64 = v351 v336
            let _run_target_args'_v341 = v352 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v353 : (System.DateTime -> int64) = _.Ticks
            let v354 : int64 = v353 v336
            let _run_target_args'_v341 = v354 
            #endif
#else
            let v355 : (System.DateTime -> int64) = _.Ticks
            let v356 : int64 = v355 v336
            let _run_target_args'_v341 = v356 
            #endif
            let v357 : int64 = _run_target_args'_v341 
            let v374 : int64 = v357 |> int64 
            let v377 : int64 = v374 - v325
            let v378 : System.TimeSpan = v377 |> System.TimeSpan 
            let v383 : (System.TimeSpan -> int32) = _.Hours
            let v384 : int32 = v383 v378
            let v387 : (System.TimeSpan -> int32) = _.Minutes
            let v388 : int32 = v387 v378
            let v391 : (System.TimeSpan -> int32) = _.Seconds
            let v392 : int32 = v391 v378
            let v395 : (System.TimeSpan -> int32) = _.Milliseconds
            let v396 : int32 = v395 v378
            let v399 : System.DateTime = System.DateTime (1, 1, 1, v384, v388, v392, v396)
            v399
    let v419 : string = method11()
    let v422 : bool = v419 = ""
    let v424 : string =
        if v422 then
            let v423 : string = "M-d-y hh:mm:ss tt"
            v423
        else
            v419
    let v425 : (string -> string) = v418.ToString
    let v426 : string = v425 v424
    let _run_target_args'_v6 = v426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : (int64 -> US2) = method9()
    let v441 : US2 option = v5 |> Option.map v440 
    let v452 : US2 = US2_1
    let v453 : US2 = v441 |> Option.defaultValue v452 
    let v550 : System.DateTime =
        match v453 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v534 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v535 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v535 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v536 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v536 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v537 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v534 = v537 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v540 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v540 
            #endif
#if FABLE_COMPILER_PYTHON
            let v541 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v541 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v542 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v542 
            #endif
#else
            let v543 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v534 = v543 
            #endif
            let v544 : System.DateTime = _run_target_args'_v534 
            v544
        | US2_0(v457) -> (* Some *)
            (* run_target_args'
            let v458 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v459 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v459 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v460 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v460 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v461 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v458 = v461 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v464 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v464 
            #endif
#if FABLE_COMPILER_PYTHON
            let v465 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v465 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v466 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v466 
            #endif
#else
            let v467 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v458 = v467 
            #endif
            let v468 : System.DateTime = _run_target_args'_v458 
            (* run_target_args'
            let v473 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : (System.DateTime -> int64) = _.Ticks
            let v475 : int64 = v474 v468
            let _run_target_args'_v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : (System.DateTime -> int64) = _.Ticks
            let v477 : int64 = v476 v468
            let _run_target_args'_v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : int64 = null |> unbox<int64>
            let _run_target_args'_v473 = v478 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v481 : (System.DateTime -> int64) = _.Ticks
            let v482 : int64 = v481 v468
            let _run_target_args'_v473 = v482 
            #endif
#if FABLE_COMPILER_PYTHON
            let v483 : (System.DateTime -> int64) = _.Ticks
            let v484 : int64 = v483 v468
            let _run_target_args'_v473 = v484 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v485 : (System.DateTime -> int64) = _.Ticks
            let v486 : int64 = v485 v468
            let _run_target_args'_v473 = v486 
            #endif
#else
            let v487 : (System.DateTime -> int64) = _.Ticks
            let v488 : int64 = v487 v468
            let _run_target_args'_v473 = v488 
            #endif
            let v489 : int64 = _run_target_args'_v473 
            let v506 : int64 = v489 |> int64 
            let v509 : int64 = v506 - v457
            let v510 : System.TimeSpan = v509 |> System.TimeSpan 
            let v515 : (System.TimeSpan -> int32) = _.Hours
            let v516 : int32 = v515 v510
            let v519 : (System.TimeSpan -> int32) = _.Minutes
            let v520 : int32 = v519 v510
            let v523 : (System.TimeSpan -> int32) = _.Seconds
            let v524 : int32 = v523 v510
            let v527 : (System.TimeSpan -> int32) = _.Milliseconds
            let v528 : int32 = v527 v510
            let v531 : System.DateTime = System.DateTime (1, 1, 1, v516, v520, v524, v528)
            v531
    let v551 : string = method11()
    let v554 : bool = v551 = ""
    let v556 : string =
        if v554 then
            let v555 : string = "M-d-y hh:mm:ss tt"
            v555
        else
            v551
    let v557 : (string -> string) = v550.ToString
    let v558 : string = v557 v556
    let _run_target_args'_v6 = v558 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v572 : (int64 -> US2) = method9()
    let v573 : US2 option = v5 |> Option.map v572 
    let v584 : US2 = US2_1
    let v585 : US2 = v573 |> Option.defaultValue v584 
    let v682 : System.DateTime =
        match v585 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v666 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v667 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v667 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v668 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v668 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v669 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v666 = v669 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v672 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v672 
            #endif
#if FABLE_COMPILER_PYTHON
            let v673 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v673 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v674 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v674 
            #endif
#else
            let v675 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v666 = v675 
            #endif
            let v676 : System.DateTime = _run_target_args'_v666 
            v676
        | US2_0(v589) -> (* Some *)
            (* run_target_args'
            let v590 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v591 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v591 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v592 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v592 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v593 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v590 = v593 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v596 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v596 
            #endif
#if FABLE_COMPILER_PYTHON
            let v597 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v597 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v598 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v598 
            #endif
#else
            let v599 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v590 = v599 
            #endif
            let v600 : System.DateTime = _run_target_args'_v590 
            (* run_target_args'
            let v605 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v606 : (System.DateTime -> int64) = _.Ticks
            let v607 : int64 = v606 v600
            let _run_target_args'_v605 = v607 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v608 : (System.DateTime -> int64) = _.Ticks
            let v609 : int64 = v608 v600
            let _run_target_args'_v605 = v609 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v610 : int64 = null |> unbox<int64>
            let _run_target_args'_v605 = v610 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v613 : (System.DateTime -> int64) = _.Ticks
            let v614 : int64 = v613 v600
            let _run_target_args'_v605 = v614 
            #endif
#if FABLE_COMPILER_PYTHON
            let v615 : (System.DateTime -> int64) = _.Ticks
            let v616 : int64 = v615 v600
            let _run_target_args'_v605 = v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v617 : (System.DateTime -> int64) = _.Ticks
            let v618 : int64 = v617 v600
            let _run_target_args'_v605 = v618 
            #endif
#else
            let v619 : (System.DateTime -> int64) = _.Ticks
            let v620 : int64 = v619 v600
            let _run_target_args'_v605 = v620 
            #endif
            let v621 : int64 = _run_target_args'_v605 
            let v638 : int64 = v621 |> int64 
            let v641 : int64 = v638 - v589
            let v642 : System.TimeSpan = v641 |> System.TimeSpan 
            let v647 : (System.TimeSpan -> int32) = _.Hours
            let v648 : int32 = v647 v642
            let v651 : (System.TimeSpan -> int32) = _.Minutes
            let v652 : int32 = v651 v642
            let v655 : (System.TimeSpan -> int32) = _.Seconds
            let v656 : int32 = v655 v642
            let v659 : (System.TimeSpan -> int32) = _.Milliseconds
            let v660 : int32 = v659 v642
            let v663 : System.DateTime = System.DateTime (1, 1, 1, v648, v652, v656, v660)
            v663
    let v683 : string = method11()
    let v686 : bool = v683 = ""
    let v688 : string =
        if v686 then
            let v687 : string = "M-d-y hh:mm:ss tt"
            v687
        else
            v683
    let v689 : (string -> string) = v682.ToString
    let v690 : string = v689 v688
    let _run_target_args'_v6 = v690 
    #endif
#else
    let v704 : (int64 -> US2) = method9()
    let v705 : US2 option = v5 |> Option.map v704 
    let v716 : US2 = US2_1
    let v717 : US2 = v705 |> Option.defaultValue v716 
    let v814 : System.DateTime =
        match v717 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v798 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v799 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v799 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v800 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v800 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v801 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v798 = v801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v804 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v804 
            #endif
#if FABLE_COMPILER_PYTHON
            let v805 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v805 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v806 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v806 
            #endif
#else
            let v807 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v798 = v807 
            #endif
            let v808 : System.DateTime = _run_target_args'_v798 
            v808
        | US2_0(v721) -> (* Some *)
            (* run_target_args'
            let v722 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v723 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v723 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v724 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v724 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v725 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v722 = v725 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v728 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v728 
            #endif
#if FABLE_COMPILER_PYTHON
            let v729 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v729 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v730 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v730 
            #endif
#else
            let v731 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v722 = v731 
            #endif
            let v732 : System.DateTime = _run_target_args'_v722 
            (* run_target_args'
            let v737 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v738 : (System.DateTime -> int64) = _.Ticks
            let v739 : int64 = v738 v732
            let _run_target_args'_v737 = v739 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v740 : (System.DateTime -> int64) = _.Ticks
            let v741 : int64 = v740 v732
            let _run_target_args'_v737 = v741 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v742 : int64 = null |> unbox<int64>
            let _run_target_args'_v737 = v742 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v745 : (System.DateTime -> int64) = _.Ticks
            let v746 : int64 = v745 v732
            let _run_target_args'_v737 = v746 
            #endif
#if FABLE_COMPILER_PYTHON
            let v747 : (System.DateTime -> int64) = _.Ticks
            let v748 : int64 = v747 v732
            let _run_target_args'_v737 = v748 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v749 : (System.DateTime -> int64) = _.Ticks
            let v750 : int64 = v749 v732
            let _run_target_args'_v737 = v750 
            #endif
#else
            let v751 : (System.DateTime -> int64) = _.Ticks
            let v752 : int64 = v751 v732
            let _run_target_args'_v737 = v752 
            #endif
            let v753 : int64 = _run_target_args'_v737 
            let v770 : int64 = v753 |> int64 
            let v773 : int64 = v770 - v721
            let v774 : System.TimeSpan = v773 |> System.TimeSpan 
            let v779 : (System.TimeSpan -> int32) = _.Hours
            let v780 : int32 = v779 v774
            let v783 : (System.TimeSpan -> int32) = _.Minutes
            let v784 : int32 = v783 v774
            let v787 : (System.TimeSpan -> int32) = _.Seconds
            let v788 : int32 = v787 v774
            let v791 : (System.TimeSpan -> int32) = _.Milliseconds
            let v792 : int32 = v791 v774
            let v795 : System.DateTime = System.DateTime (1, 1, 1, v780, v784, v788, v792)
            v795
    let v815 : string = method11()
    let v818 : bool = v815 = ""
    let v820 : string =
        if v818 then
            let v819 : string = "M-d-y hh:mm:ss tt"
            v819
        else
            v815
    let v821 : (string -> string) = v814.ToString
    let v822 : string = v821 v820
    let _run_target_args'_v6 = v822 
    #endif
    let v836 : string = _run_target_args'_v6 
    v836
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v0 : string = "Debug"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_blue"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _run_target_args'_v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_blue"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v58 
    #endif
    let v61 : Ref<Str> = _run_target_args'_v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_blue"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _run_target_args'_v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _run_target_args'_v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v90 
    #endif
    let v93 : Ref<Str> = _run_target_args'_v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _run_target_args'_v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[94m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _run_target_args'_v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[94m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _run_target_args'_v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[94m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _run_target_args'_v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[94m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _run_target_args'_v7 = v119 
    #endif
    let v120 : string = _run_target_args'_v7 
    v120
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "args"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v2 : (char list -> (char [])) = List.toArray
    let v3 : (char []) = v2 v1
    let v6 : string = v0.TrimStart v3 
    let v30 : char list = []
    let v31 : char list = '/' :: v30 
    let v34 : char list = ' ' :: v31 
    let v37 : (char list -> (char [])) = List.toArray
    let v38 : (char []) = v37 v34
    let v41 : string = v6.TrimEnd v38 
    v41
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral.main"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure8(v17)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : (string -> unit) = closure9()
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = v20.l0
    let v45 : bool = v44 = ""
    let v53 : string =
        if v45 then
            v0
        else
            let v46 : bool = v0 = ""
            if v46 then
                let v47 : string = v20.l0
                v47
            else
                let v48 : string = v20.l0
                let v49 : string = "\n"
                let v50 : string = v48 + v49 
                let v51 : string = v50 + v0 
                v51
    (* run_target_args'
    let v54 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v55 
    let _run_target_args'_v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v57 
    let _run_target_args'_v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v59 
    let _run_target_args'_v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v61 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v61 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v67 
    #endif
#else
    let v70 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _run_target_args'_v54 = v70 
    #endif
    let v73 : Ref<Str> = _run_target_args'_v54 
    let v78 : string = $"$0.chars()"
    let v79 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v73 v78 
    let v80 : string = "$0"
    let v81 : _ = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.collect::<Vec<_>>()"
    let v83 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v85 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "x"
    let v89 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "String::from_iter($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "true; $0 }).collect::<Vec<_>>()"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "_vec_map"
    let v95 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "$0.len()"
    let v97 : unativeint = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : int32 = v97 |> int32 
    let v105 : string = ""
    let v106 : bool = v0 <> v105 
    let v110 : bool =
        if v106 then
            let v109 : bool = v98 <= 1
            v109
        else
            false
    if v110 then
        v20.l0 <- v53
        ()
    else
        v20.l0 <- v105
        let v111 : string = "true; $0.into_iter().for_each(|x| { //"
        let v112 : bool = Fable.Core.RustInterop.emitRustExpr v95 v111 
        let v113 : string = "x"
        let v114 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v113 
        let v115 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v116 : bool = Fable.Core.RustInterop.emitRustExpr v114 v115 
        let v117 : string = $"true"
        let v118 : bool = Fable.Core.RustInterop.emitRustExpr () v117 
        let v119 : string = "true; }); //"
        let v120 : bool = Fable.Core.RustInterop.emitRustExpr () v119 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v40 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v40 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v40 v0
    #endif
#else
    v40 v0
    #endif
    // run_target_args' is_unit
    let v121 : (string -> unit) = v18.l0
    v121 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method16(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "String::from($0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "py-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "env"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method28 () : string =
    (* run_target_args'
    let v0 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.unwrap()"
    let v5 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _run_target_args'_v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.unwrap()"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.unwrap()"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _run_target_args'_v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v3 = v12 
    #endif
#else
    let v13 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v3 = v13 
    #endif
    let v14 : std_path_PathBuf = _run_target_args'_v3 
    (* run_target_args'
    let v17 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "$0.display()"
    let v19 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _run_target_args'_v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "$0.display()"
    let v21 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _run_target_args'_v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "$0.display()"
    let v23 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v22 
    let _run_target_args'_v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_path_Display = v14 |> unbox<std_path_Display>
    let _run_target_args'_v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_path_Display = v14 |> unbox<std_path_Display>
    let _run_target_args'_v17 = v27 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : std_path_Display = v14 |> unbox<std_path_Display>
    let _run_target_args'_v17 = v30 
    #endif
#else
    let v33 : std_path_Display = v14 |> unbox<std_path_Display>
    let _run_target_args'_v17 = v33 
    #endif
    let v36 : std_path_Display = _run_target_args'_v17 
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v42 
    let _run_target_args'_v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "format!(\"{}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v46 
    let _run_target_args'_v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v41 = v54 
    #endif
#else
    let v57 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v41 = v57 
    #endif
    let v60 : std_string_String = _run_target_args'_v41 
    let v65 : string = "fable_library_rust::String_::fromString($0)"
    let v66 : string = Fable.Core.RustInterop.emitRustExpr v60 v65 
    let _run_target_args'_v0 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = null |> unbox<string>
    let _run_target_args'_v0 = v67 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = null |> unbox<string>
    let _run_target_args'_v0 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : string = "fs"
    let v74 : IFs = Fable.Core.JsInterop.importAll v73 
    let v75 : string = "fs.realpathSync('.')"
    let v76 : string = Fable.Core.JsInterop.emitJsExpr () v75 
    let _run_target_args'_v0 = v76 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : string = null |> unbox<string>
    let _run_target_args'_v0 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v80 : string = null |> unbox<string>
    let _run_target_args'_v0 = v80 
    #endif
#else
    let v83 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v84 : string = v83 ()
    let _run_target_args'_v0 = v84 
    #endif
    let v85 : string = _run_target_args'_v0 
    v85
and method30 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v19 
    #endif
    let v22 : Ref<Str> = _run_target_args'_v3 
    (* run_target_args'
    let v27 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _run_target_args'_v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _run_target_args'_v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _run_target_args'_v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v43 
    #endif
    let v46 : std_string_String = _run_target_args'_v27 
    (* run_target_args'
    let v51 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : string = "std::path::PathBuf::from($0)"
    let v53 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v52 
    let _run_target_args'_v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "std::path::PathBuf::from($0)"
    let v55 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v54 
    let _run_target_args'_v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : string = "std::path::PathBuf::from($0)"
    let v57 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v56 
    let _run_target_args'_v51 = v57 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v58 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _run_target_args'_v51 = v58 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _run_target_args'_v51 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _run_target_args'_v51 = v64 
    #endif
#else
    let v67 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _run_target_args'_v51 = v67 
    #endif
    let v70 : std_path_PathBuf = _run_target_args'_v51 
    (* run_target_args'
    let v75 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "&*$0"
    let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v76 
    let _run_target_args'_v75 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "&*$0"
    let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v78 
    let _run_target_args'_v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let _run_target_args'_v75 = v81 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v75 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v75 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v75 = v88 
    #endif
#else
    let v91 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v75 = v91 
    #endif
    let v94 : Ref<Str> = _run_target_args'_v75 
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "String::from($0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
    let _run_target_args'_v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "String::from($0)"
    let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v102 
    let _run_target_args'_v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v104 
    let _run_target_args'_v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : std_string_String = v94 |> unbox<std_string_String>
    let _run_target_args'_v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : std_string_String = v94 |> unbox<std_string_String>
    let _run_target_args'_v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v94 |> unbox<std_string_String>
    let _run_target_args'_v99 = v112 
    #endif
#else
    let v115 : std_string_String = v94 |> unbox<std_string_String>
    let _run_target_args'_v99 = v115 
    #endif
    let v118 : std_string_String = _run_target_args'_v99 
    let v123 : string = "$0.join($1)"
    let v124 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v70, v118) v123 
    (* run_target_args'
    let v125 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v126 : string = "$0.display()"
    let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v126 
    let _run_target_args'_v125 = v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v128 : string = "$0.display()"
    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v128 
    let _run_target_args'_v125 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "$0.display()"
    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v130 
    let _run_target_args'_v125 = v131 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v124 |> unbox<std_path_Display>
    let _run_target_args'_v125 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v135 : std_path_Display = v124 |> unbox<std_path_Display>
    let _run_target_args'_v125 = v135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v138 : std_path_Display = v124 |> unbox<std_path_Display>
    let _run_target_args'_v125 = v138 
    #endif
#else
    let v141 : std_path_Display = v124 |> unbox<std_path_Display>
    let _run_target_args'_v125 = v141 
    #endif
    let v144 : std_path_Display = _run_target_args'_v125 
    (* run_target_args'
    let v149 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let _run_target_args'_v149 = v151 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v152 : string = "format!(\"{}\", $0)"
    let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v152 
    let _run_target_args'_v149 = v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : string = "format!(\"{}\", $0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v154 
    let _run_target_args'_v149 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v149 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v159 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v149 = v159 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v149 = v162 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v149 = v165 
    #endif
    let v168 : std_string_String = _run_target_args'_v149 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v168 v173 
    let _run_target_args'_v2 = v174 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v175 : US3 = US3_1
    let v176 : US4 = US4_2(v175)
    let v177 : string = $"file_system.(</>) / target: {v176} / a: {v0} / b: {v1}"
    let v178 : string = failwith<string> v177
    let _run_target_args'_v2 = v178 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v179 : string = null |> unbox<string>
    let _run_target_args'_v2 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathJoin = Fable.Core.JsInterop.importAll v182 
    let v184 : string = "v183.join($0, $1)"
    let v185 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v184 
    let _run_target_args'_v2 = v185 
    #endif
#if FABLE_COMPILER_PYTHON
    let v186 : US3 = US3_0
    let v187 : US4 = US4_4(v186)
    let v188 : string = $"file_system.(</>) / target: {v187} / a: {v0} / b: {v1}"
    let v189 : string = failwith<string> v188
    let _run_target_args'_v2 = v189 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v190 : US3 = US3_1
    let v191 : US4 = US4_0(v190)
    let v192 : string = $"file_system.(</>) / target: {v191} / a: {v0} / b: {v1}"
    let v193 : string = failwith<string> v192
    let _run_target_args'_v2 = v193 
    #endif
#else
    let v194 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v2 = v194 
    #endif
    let v195 : string = _run_target_args'_v2 
    v195
and method32 (v0 : string) : bool =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_file()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _run_target_args'_v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _run_target_args'_v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.File.Exists
    let v96 : bool = v95 v0
    let _run_target_args'_v1 = v96 
    #endif
    let v97 : bool = _run_target_args'_v1 
    v97
and closure15 () (v0 : string) : bool =
    method32(v0)
and method33 (v0 : string) : bool =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_dir()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _run_target_args'_v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _run_target_args'_v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.Directory.Exists
    let v96 : bool = v95 v0
    let _run_target_args'_v1 = v96 
    #endif
    let v97 : bool = _run_target_args'_v1 
    v97
and closure16 () (v0 : string) : bool =
    method33(v0)
and method35 (v0 : string) : string option =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v75 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v78 
    (* run_target_args'
    let v80 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v81 : string = "$0.display()"
    let v82 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v81 
    let _run_target_args'_v80 = v82 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : string = "$0.display()"
    let v84 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v83 
    let _run_target_args'_v80 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "$0.display()"
    let v86 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v85 
    let _run_target_args'_v80 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : std_path_Display = v79 |> unbox<std_path_Display>
    let _run_target_args'_v80 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : std_path_Display = v79 |> unbox<std_path_Display>
    let _run_target_args'_v80 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_Display = v79 |> unbox<std_path_Display>
    let _run_target_args'_v80 = v93 
    #endif
#else
    let v96 : std_path_Display = v79 |> unbox<std_path_Display>
    let _run_target_args'_v80 = v96 
    #endif
    let v99 : std_path_Display = _run_target_args'_v80 
    (* run_target_args'
    let v104 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v105 : string = "format!(\"{}\", $0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let _run_target_args'_v104 = v106 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v107 : string = "format!(\"{}\", $0)"
    let v108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v107 
    let _run_target_args'_v104 = v108 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v109 : string = "format!(\"{}\", $0)"
    let v110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v109 
    let _run_target_args'_v104 = v110 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v104 = v111 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v104 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v104 = v117 
    #endif
#else
    let v120 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v104 = v120 
    #endif
    let v123 : std_string_String = _run_target_args'_v104 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v123 v128 
    let v130 : string = "true; $0 })"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v129 v130 
    let v132 : string = "_optionm_map_"
    let v133 : string option = Fable.Core.RustInterop.emitRustExpr () v132 
    let _run_target_args'_v1 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string option = None
    let _run_target_args'_v1 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v135 : string option = None
    let _run_target_args'_v1 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "path"
    let v137 : IPathDirname = Fable.Core.JsInterop.importAll v136 
    let v138 : string = "v137.dirname($0)"
    let v139 : string = Fable.Core.JsInterop.emitJsExpr v0 v138 
    let v140 : bool = v139 = v0
    let v143 : US5 =
        if v140 then
            US5_1
        else
            US5_0(v139)
    let v150 : string option =
        match v143 with
        | US5_1 -> (* None *)
            let v148 : string option = None
            v148
        | US5_0(v144) -> (* Some *)
            let v145 : string option = Some v144 
            v145
    let _run_target_args'_v1 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v151 : string option = None
    let _run_target_args'_v1 = v151 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : string option = None
    let _run_target_args'_v1 = v152 
    #endif
#else
    let v153 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v154 : System_IO_DirectoryInfo = v153 v0
    let v155 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v158 : bool = v154 = v155 
    let v189 : US5 =
        if v158 then
            US5_1
        else
            (* run_target_args'
            let v162 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v163 : string = null |> unbox<string>
            let _run_target_args'_v162 = v163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v166 : string = null |> unbox<string>
            let _run_target_args'_v162 = v166 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v169 : string = null |> unbox<string>
            let _run_target_args'_v162 = v169 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v172 : string = null |> unbox<string>
            let _run_target_args'_v162 = v172 
            #endif
#if FABLE_COMPILER_PYTHON
            let v175 : string = null |> unbox<string>
            let _run_target_args'_v162 = v175 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : string = null |> unbox<string>
            let _run_target_args'_v162 = v178 
            #endif
#else
            let v181 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v182 : string = v181 v154
            let _run_target_args'_v162 = v182 
            #endif
            let v183 : string = _run_target_args'_v162 
            US5_0(v183)
    let v196 : string option =
        match v189 with
        | US5_1 -> (* None *)
            let v194 : string option = None
            v194
        | US5_0(v190) -> (* Some *)
            let v191 : string option = Some v190 
            v191
    let _run_target_args'_v1 = v196 
    #endif
    let v197 : string option = _run_target_args'_v1 
    v197
and method36 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method30(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method35(v4)
        let v9 : (string -> US5) = method6()
        let v10 : US5 option = v8 |> Option.map v9 
        let v21 : US5 = US5_1
        let v22 : US5 = v10 |> Option.defaultValue v21 
        match v22 with
        | US5_1 -> (* None *)
            let v28 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v29 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v30 : string = v28 + v29 
            US13_1(v30)
        | US5_0(v26) -> (* Some *)
            method36(v0, v1, v2, v3, v26)
and method34 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method30(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method35(v1)
        let v8 : (string -> US5) = method6()
        let v9 : US5 option = v7 |> Option.map v8 
        let v20 : US5 = US5_1
        let v21 : US5 = v9 |> Option.defaultValue v20 
        match v21 with
        | US5_1 -> (* None *)
            let v27 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v28 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v29 : string = v27 + v28 
            US13_1(v29)
        | US5_0(v25) -> (* Some *)
            method36(v0, v1, v2, v3, v25)
and method31 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method34(v1, v2, v3, v6)
and method37 () : string =
    
    
    
    
    
    let v0 : string = "Warning"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_yellow"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _run_target_args'_v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_yellow"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v58 
    #endif
    let v61 : Ref<Str> = _run_target_args'_v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_yellow"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _run_target_args'_v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _run_target_args'_v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v90 
    #endif
    let v93 : Ref<Str> = _run_target_args'_v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _run_target_args'_v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[93m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _run_target_args'_v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[93m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _run_target_args'_v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[93m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _run_target_args'_v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[93m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _run_target_args'_v7 = v119 
    #endif
    let v120 : string = _run_target_args'_v7 
    v120
and method39 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "error"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method38 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method39(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.get_workspace_root"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method37()
        let v40 : string = method38(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method44 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v0}"
    let _run_target_args'_v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v0}"
    let _run_target_args'_v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v0}"
    let _run_target_args'_v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v3 = v25 
    #endif
    let v28 : string = _run_target_args'_v3 
    let v33 : string = $"{v28}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = v2.l0
    v41
and closure18 () (v0 : std_io_Error) : string =
    method44(v0)
and method43 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method45 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method46 () : (string -> US14) =
    closure20()
and method49 (v0 : string) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    (* run_target_args'
    let v86 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _run_target_args'_v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _run_target_args'_v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _run_target_args'_v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v102 
    #endif
    let v105 : std_string_String = _run_target_args'_v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _run_target_args'_v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : US3 = US3_1
    let v138 : US4 = US4_2(v137)
    let v139 : string = $"file_system.get_file_name / target: {v138} / path: {v0}"
    let v140 : string = failwith<string> v139
    let _run_target_args'_v1 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = null |> unbox<string>
    let _run_target_args'_v1 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : string = "path"
    let v145 : IPathBasename = Fable.Core.JsInterop.importAll v144 
    let v146 : string = "v145.basename($0)"
    let v147 : string = Fable.Core.JsInterop.emitJsExpr v0 v146 
    let _run_target_args'_v1 = v147 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : US3 = US3_0
    let v149 : US4 = US4_4(v148)
    let v150 : string = $"file_system.get_file_name / target: {v149} / path: {v0}"
    let v151 : string = failwith<string> v150
    let _run_target_args'_v1 = v151 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : US3 = US3_1
    let v153 : US4 = US4_0(v152)
    let v154 : string = $"file_system.get_file_name / target: {v153} / path: {v0}"
    let v155 : string = failwith<string> v154
    let _run_target_args'_v1 = v155 
    #endif
#else
    let v156 : (string -> string) = System.IO.Path.GetFileName
    let v157 : string = v156 v0
    let _run_target_args'_v1 = v157 
    #endif
    let v158 : string = _run_target_args'_v1 
    v158
and method50 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method48 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method49(v4)
    let v6 : string option = method35(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method50(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / "
        let v27 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v28 : string = v26 + v27 
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v30 
        let _run_target_args'_v29 = v31 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v32 
        let _run_target_args'_v29 = v33 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v34 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v35 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v34 
        let _run_target_args'_v29 = v35 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v36 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v36 
        #endif
#if FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v39 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v42 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v42 
        #endif
#else
        let v45 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v45 
        #endif
        let v48 : std_io_Error = _run_target_args'_v29 
        (* run_target_args'
        let v53 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v54 
        let _run_target_args'_v53 = v55 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v56 
        let _run_target_args'_v53 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : string = "Err($0)"
        let v59 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v58 
        let _run_target_args'_v53 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v60 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v60 
        #endif
#if FABLE_COMPILER_PYTHON
        let v61 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v61 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v62 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v62 
        #endif
#else
        let v63 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v63 
        #endif
        let v64 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v53 
        v64
    else
        match v20 with
        | US5_0(v67) -> (* Some *)
            let v68 : string = ""
            let v69 : bool = v4 <> v68 
            if v69 then
                let v72 : uint8 = v2 + 1uy
                let v73 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v72
                let v74 : Result<std_path_PathBuf, std_io_Error> = v73 v67
                let v75 : (std_io_Error -> string) = method43()
                (* run_target_args'
                let v76 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v77 
                let _run_target_args'_v76 = v78 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v79 
                let _run_target_args'_v76 = v80 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v81 : string = "$0.map_err(|x| $1(x))"
                let v82 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v81 
                let _run_target_args'_v76 = v82 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v83 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v83 
                #endif
#if FABLE_COMPILER_PYTHON
                let v84 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v84 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v85 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v85 
                #endif
#else
                let v86 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v86 
                #endif
                let v87 : Result<std_path_PathBuf, string> = _run_target_args'_v76 
                let v90 : (std_path_PathBuf -> US14) = method45()
                let v91 : (string -> US14) = method46()
                let v92 : US14 = match v87 with Ok x -> v90 x | Error x -> v91 x
                match v92 with
                | US14_1(v208) -> (* Error *)
                    let v209 : string = $"file_system.read_link / "
                    let v210 : string = $"error': {v208} / error: {v24} / name: {v5}"
                    let v211 : string = v209 + v210 
                    (* run_target_args'
                    let v212 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v213 
                    let _run_target_args'_v212 = v214 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v215 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v216 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v215 
                    let _run_target_args'_v212 = v216 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v217 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v218 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v217 
                    let _run_target_args'_v212 = v218 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v219 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v219 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v222 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v222 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v225 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v225 
                    #endif
#else
                    let v228 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v228 
                    #endif
                    let v231 : std_io_Error = _run_target_args'_v212 
                    (* run_target_args'
                    let v236 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v237 
                    let _run_target_args'_v236 = v238 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v239 : string = "Err($0)"
                    let v240 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v239 
                    let _run_target_args'_v236 = v240 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v241 : string = "Err($0)"
                    let v242 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v241 
                    let _run_target_args'_v236 = v242 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v243 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v243 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v244 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v244 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v245 
                    #endif
#else
                    let v246 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v246 
                    #endif
                    let v247 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v236 
                    v247
                | US14_0(v93) -> (* Ok *)
                    (* run_target_args'
                    let v94 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v95 
                    let _run_target_args'_v94 = v96 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v97 
                    let _run_target_args'_v94 = v98 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v99 : string = "$0.display()"
                    let v100 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v99 
                    let _run_target_args'_v94 = v100 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v101 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v101 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v104 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v107 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v107 
                    #endif
#else
                    let v110 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v110 
                    #endif
                    let v113 : std_path_Display = _run_target_args'_v94 
                    let v118 : string = v113 |> string 
                    let v121 : string = method30(v118, v5)
                    (* run_target_args'
                    let v122 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v123 
                    let _run_target_args'_v122 = v124 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v125 
                    let _run_target_args'_v122 = v126 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v127 : string = "&*$0"
                    let v128 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v127 
                    let _run_target_args'_v122 = v128 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v129 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v129 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v132 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v135 
                    #endif
#else
                    let v138 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v138 
                    #endif
                    let v141 : Ref<Str> = _run_target_args'_v122 
                    (* run_target_args'
                    let v146 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v147 
                    let _run_target_args'_v146 = v148 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v149 
                    let _run_target_args'_v146 = v150 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v151 : string = "String::from($0)"
                    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v151 
                    let _run_target_args'_v146 = v152 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v153 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v153 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v156 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v159 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v159 
                    #endif
#else
                    let v162 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v162 
                    #endif
                    let v165 : std_string_String = _run_target_args'_v146 
                    (* run_target_args'
                    let v170 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v171 
                    let _run_target_args'_v170 = v172 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v173 
                    let _run_target_args'_v170 = v174 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v175 : string = "std::path::PathBuf::from($0)"
                    let v176 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v175 
                    let _run_target_args'_v170 = v176 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v183 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v183 
                    #endif
#else
                    let v186 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v186 
                    #endif
                    let v189 : std_path_PathBuf = _run_target_args'_v170 
                    (* run_target_args'
                    let v194 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v195 
                    let _run_target_args'_v194 = v196 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v197 
                    let _run_target_args'_v194 = v198 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v199 : string = "Ok($0)"
                    let v200 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v199 
                    let _run_target_args'_v194 = v200 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v201 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v203 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v203 
                    #endif
#else
                    let v204 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v204 
                    #endif
                    let v205 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v194 
                    v205
            else
                let v252 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v253 : string = $"path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v254 : string = v252 + v253 
                (* run_target_args'
                let v255 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v256 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v257 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v256 
                let _run_target_args'_v255 = v257 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v258 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v259 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v258 
                let _run_target_args'_v255 = v259 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v260 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v261 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v255 = v261 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v262 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v262 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v265 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v268 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v268 
                #endif
#else
                let v271 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v271 
                #endif
                let v274 : std_io_Error = _run_target_args'_v255 
                (* run_target_args'
                let v279 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v280 : string = "Err($0)"
                let v281 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v280 
                let _run_target_args'_v279 = v281 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v282 : string = "Err($0)"
                let v283 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v282 
                let _run_target_args'_v279 = v283 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v284 : string = "Err($0)"
                let v285 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v284 
                let _run_target_args'_v279 = v285 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v286 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v286 
                #endif
#if FABLE_COMPILER_PYTHON
                let v287 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v287 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v288 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v288 
                #endif
#else
                let v289 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v289 
                #endif
                let v290 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v279 
                v290
        | _ ->
            let v294 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v295 : string = $"path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v296 : string = v294 + v295 
            (* run_target_args'
            let v297 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v298 
            let _run_target_args'_v297 = v299 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v300 
            let _run_target_args'_v297 = v301 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v302 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v303 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v302 
            let _run_target_args'_v297 = v303 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v304 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v304 
            #endif
#if FABLE_COMPILER_PYTHON
            let v307 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v307 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v310 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v310 
            #endif
#else
            let v313 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v313 
            #endif
            let v316 : std_io_Error = _run_target_args'_v297 
            (* run_target_args'
            let v321 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v322 : string = "Err($0)"
            let v323 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v322 
            let _run_target_args'_v321 = v323 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v324 : string = "Err($0)"
            let v325 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v324 
            let _run_target_args'_v321 = v325 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v326 : string = "Err($0)"
            let v327 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v326 
            let _run_target_args'_v321 = v327 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v328 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v328 
            #endif
#if FABLE_COMPILER_PYTHON
            let v329 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v329 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v330 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v330 
            #endif
#else
            let v331 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v331 
            #endif
            let v332 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v321 
            v332
and method47 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "std::fs::read_link(&*$0)"
    let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v8 
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "$0.map_err(|x| $1(x))"
    let v11 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v12 
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _run_target_args'_v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _run_target_args'_v7 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _run_target_args'_v7 = v16 
    #endif
#else
    let v17 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _run_target_args'_v7 = v17 
    #endif
    let v18 : Result<std_path_PathBuf, string> = _run_target_args'_v7 
    let v21 : (std_path_PathBuf -> US14) = method45()
    let v22 : (string -> US14) = method46()
    let v23 : US14 = match v18 with Ok x -> v21 x | Error x -> v22 x
    let v43 : Result<std_path_PathBuf, std_io_Error> =
        match v23 with
        | US14_1(v39) -> (* Error *)
            let v40 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method48(v0, v40, v1, v39, v2)
        | US14_0(v24) -> (* Ok *)
            (* run_target_args'
            let v25 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : string = "Ok($0)"
            let v27 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v26 
            let _run_target_args'_v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v28 : string = "Ok($0)"
            let v29 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v28 
            let _run_target_args'_v25 = v29 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v30 : string = "Ok($0)"
            let v31 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v30 
            let _run_target_args'_v25 = v31 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v32 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _run_target_args'_v25 = v32 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _run_target_args'_v25 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v34 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _run_target_args'_v25 = v34 
            #endif
#else
            let v35 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _run_target_args'_v25 = v35 
            #endif
            let v36 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v25 
            v36
    let _run_target_args'_v3 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "std::fs::read_link(&*$0)"
    let v45 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v44 
    let v46 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v47 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "$0.map_err(|x| $1(x))"
    let v49 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v48 
    let _run_target_args'_v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "$0.map_err(|x| $1(x))"
    let v51 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v50 
    let _run_target_args'_v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "$0.map_err(|x| $1(x))"
    let v53 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v52 
    let _run_target_args'_v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _run_target_args'_v47 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _run_target_args'_v47 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _run_target_args'_v47 = v56 
    #endif
#else
    let v57 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _run_target_args'_v47 = v57 
    #endif
    let v58 : Result<std_path_PathBuf, string> = _run_target_args'_v47 
    let v61 : (std_path_PathBuf -> US14) = method45()
    let v62 : (string -> US14) = method46()
    let v63 : US14 = match v58 with Ok x -> v61 x | Error x -> v62 x
    let v83 : Result<std_path_PathBuf, std_io_Error> =
        match v63 with
        | US14_1(v79) -> (* Error *)
            let v80 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method48(v0, v80, v1, v79, v2)
        | US14_0(v64) -> (* Ok *)
            (* run_target_args'
            let v65 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v66 : string = "Ok($0)"
            let v67 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v66 
            let _run_target_args'_v65 = v67 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v68 : string = "Ok($0)"
            let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v68 
            let _run_target_args'_v65 = v69 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v70 : string = "Ok($0)"
            let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v70 
            let _run_target_args'_v65 = v71 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _run_target_args'_v65 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _run_target_args'_v65 = v73 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v74 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _run_target_args'_v65 = v74 
            #endif
#else
            let v75 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _run_target_args'_v65 = v75 
            #endif
            let v76 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v65 
            v76
    let _run_target_args'_v3 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "std::fs::read_link(&*$0)"
    let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v84 
    let v86 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v87 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v88 : string = "$0.map_err(|x| $1(x))"
    let v89 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v88 
    let _run_target_args'_v87 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v90 : string = "$0.map_err(|x| $1(x))"
    let v91 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v90 
    let _run_target_args'_v87 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v92 : string = "$0.map_err(|x| $1(x))"
    let v93 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v92 
    let _run_target_args'_v87 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _run_target_args'_v87 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _run_target_args'_v87 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _run_target_args'_v87 = v96 
    #endif
#else
    let v97 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _run_target_args'_v87 = v97 
    #endif
    let v98 : Result<std_path_PathBuf, string> = _run_target_args'_v87 
    let v101 : (std_path_PathBuf -> US14) = method45()
    let v102 : (string -> US14) = method46()
    let v103 : US14 = match v98 with Ok x -> v101 x | Error x -> v102 x
    let v123 : Result<std_path_PathBuf, std_io_Error> =
        match v103 with
        | US14_1(v119) -> (* Error *)
            let v120 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method48(v0, v120, v1, v119, v2)
        | US14_0(v104) -> (* Ok *)
            (* run_target_args'
            let v105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "Ok($0)"
            let v107 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v106 
            let _run_target_args'_v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "Ok($0)"
            let v109 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v108 
            let _run_target_args'_v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "Ok($0)"
            let v111 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v110 
            let _run_target_args'_v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _run_target_args'_v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _run_target_args'_v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _run_target_args'_v105 = v114 
            #endif
#else
            let v115 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _run_target_args'_v105 = v115 
            #endif
            let v116 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v105 
            v116
    let _run_target_args'_v3 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v3 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v3 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v130 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v3 = v130 
    #endif
#else
    let v133 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v3 = v133 
    #endif
    let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v3 
    v136
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method47(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method51 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method49(v0)
    let v5 : string option = method35(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method50(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / "
        let v26 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v27 : string = v25 + v26 
        (* run_target_args'
        let v28 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v29 
        let _run_target_args'_v28 = v30 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v31 
        let _run_target_args'_v28 = v32 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v33 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v34 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v33 
        let _run_target_args'_v28 = v34 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v35 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v35 
        #endif
#if FABLE_COMPILER_PYTHON
        let v38 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v38 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v41 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v41 
        #endif
#else
        let v44 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v44 
        #endif
        let v47 : std_io_Error = _run_target_args'_v28 
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v53 
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v55 
        let _run_target_args'_v52 = v56 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v57 : string = "Err($0)"
        let v58 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v57 
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v59 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v59 
        #endif
#if FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v60 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v61 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v61 
        #endif
#else
        let v62 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v62 
        #endif
        let v63 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v52 
        v63
    else
        match v19 with
        | US5_0(v66) -> (* Some *)
            let v67 : string = ""
            let v68 : bool = v0 <> v67 
            if v68 then
                let v71 : uint8 = v2 + 1uy
                let v72 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v71
                let v73 : Result<std_path_PathBuf, std_io_Error> = v72 v66
                let v74 : (std_io_Error -> string) = method43()
                (* run_target_args'
                let v75 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v76 
                let _run_target_args'_v75 = v77 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v78 
                let _run_target_args'_v75 = v79 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v80 : string = "$0.map_err(|x| $1(x))"
                let v81 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v80 
                let _run_target_args'_v75 = v81 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v82 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v82 
                #endif
#if FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v83 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v84 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v84 
                #endif
#else
                let v85 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v85 
                #endif
                let v86 : Result<std_path_PathBuf, string> = _run_target_args'_v75 
                let v89 : (std_path_PathBuf -> US14) = method45()
                let v90 : (string -> US14) = method46()
                let v91 : US14 = match v86 with Ok x -> v89 x | Error x -> v90 x
                match v91 with
                | US14_1(v207) -> (* Error *)
                    let v208 : string = $"file_system.read_link / "
                    let v209 : string = $"error': {v207} / error: {v23} / name: {v4}"
                    let v210 : string = v208 + v209 
                    (* run_target_args'
                    let v211 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v212 
                    let _run_target_args'_v211 = v213 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v214 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v215 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v214 
                    let _run_target_args'_v211 = v215 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v216 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v217 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v216 
                    let _run_target_args'_v211 = v217 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v218 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v218 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v221 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v224 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v224 
                    #endif
#else
                    let v227 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v227 
                    #endif
                    let v230 : std_io_Error = _run_target_args'_v211 
                    (* run_target_args'
                    let v235 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v236 
                    let _run_target_args'_v235 = v237 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v238 : string = "Err($0)"
                    let v239 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v238 
                    let _run_target_args'_v235 = v239 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v240 : string = "Err($0)"
                    let v241 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v240 
                    let _run_target_args'_v235 = v241 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v242 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v243 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v243 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v244 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v244 
                    #endif
#else
                    let v245 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v245 
                    #endif
                    let v246 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v235 
                    v246
                | US14_0(v92) -> (* Ok *)
                    (* run_target_args'
                    let v93 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v94 
                    let _run_target_args'_v93 = v95 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v96 
                    let _run_target_args'_v93 = v97 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v98 : string = "$0.display()"
                    let v99 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v98 
                    let _run_target_args'_v93 = v99 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v100 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v100 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v103 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v103 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v106 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v106 
                    #endif
#else
                    let v109 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v109 
                    #endif
                    let v112 : std_path_Display = _run_target_args'_v93 
                    let v117 : string = v112 |> string 
                    let v120 : string = method30(v117, v4)
                    (* run_target_args'
                    let v121 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v122 
                    let _run_target_args'_v121 = v123 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v124 
                    let _run_target_args'_v121 = v125 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v126 : string = "&*$0"
                    let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v126 
                    let _run_target_args'_v121 = v127 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v128 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v128 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v134 
                    #endif
#else
                    let v137 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v137 
                    #endif
                    let v140 : Ref<Str> = _run_target_args'_v121 
                    (* run_target_args'
                    let v145 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v146 
                    let _run_target_args'_v145 = v147 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v148 
                    let _run_target_args'_v145 = v149 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v150 : string = "String::from($0)"
                    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v150 
                    let _run_target_args'_v145 = v151 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v152 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v152 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v155 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v155 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v158 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v158 
                    #endif
#else
                    let v161 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v161 
                    #endif
                    let v164 : std_string_String = _run_target_args'_v145 
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "std::path::PathBuf::from($0)"
                    let v175 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v179 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v179 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v182 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v182 
                    #endif
#else
                    let v185 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v185 
                    #endif
                    let v188 : std_path_PathBuf = _run_target_args'_v169 
                    (* run_target_args'
                    let v193 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v194 
                    let _run_target_args'_v193 = v195 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v196 
                    let _run_target_args'_v193 = v197 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v198 : string = "Ok($0)"
                    let v199 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v198 
                    let _run_target_args'_v193 = v199 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v200 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v202 
                    #endif
#else
                    let v203 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v203 
                    #endif
                    let v204 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v193 
                    v204
            else
                let v251 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v252 : string = $"path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v253 : string = v251 + v252 
                (* run_target_args'
                let v254 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v255 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v256 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v255 
                let _run_target_args'_v254 = v256 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v257 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v258 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v257 
                let _run_target_args'_v254 = v258 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v259 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v260 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v259 
                let _run_target_args'_v254 = v260 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v261 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v261 
                #endif
#if FABLE_COMPILER_PYTHON
                let v264 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v264 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v267 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v267 
                #endif
#else
                let v270 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v270 
                #endif
                let v273 : std_io_Error = _run_target_args'_v254 
                (* run_target_args'
                let v278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v279 : string = "Err($0)"
                let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v279 
                let _run_target_args'_v278 = v280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v281 : string = "Err($0)"
                let v282 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v281 
                let _run_target_args'_v278 = v282 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v283 : string = "Err($0)"
                let v284 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v283 
                let _run_target_args'_v278 = v284 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v285 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v285 
                #endif
#if FABLE_COMPILER_PYTHON
                let v286 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v286 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v287 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v287 
                #endif
#else
                let v288 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v288 
                #endif
                let v289 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v278 
                v289
        | _ ->
            let v293 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v294 : string = $"path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v295 : string = v293 + v294 
            (* run_target_args'
            let v296 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v297 
            let _run_target_args'_v296 = v298 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v299 
            let _run_target_args'_v296 = v300 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v301 
            let _run_target_args'_v296 = v302 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v303 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v303 
            #endif
#if FABLE_COMPILER_PYTHON
            let v306 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v306 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v309 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v309 
            #endif
#else
            let v312 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v312 
            #endif
            let v315 : std_io_Error = _run_target_args'_v296 
            (* run_target_args'
            let v320 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v321 : string = "Err($0)"
            let v322 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v321 
            let _run_target_args'_v320 = v322 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v323 : string = "Err($0)"
            let v324 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v323 
            let _run_target_args'_v320 = v324 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v325 : string = "Err($0)"
            let v326 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v325 
            let _run_target_args'_v320 = v326 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v327 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v327 
            #endif
#if FABLE_COMPILER_PYTHON
            let v328 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v328 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v329 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v329 
            #endif
#else
            let v330 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v330 
            #endif
            let v331 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v320 
            v331
and method42 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::fs::read_link(&*$0)"
    let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _run_target_args'_v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _run_target_args'_v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _run_target_args'_v6 = v15 
    #endif
#else
    let v16 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _run_target_args'_v6 = v16 
    #endif
    let v17 : Result<std_path_PathBuf, string> = _run_target_args'_v6 
    let v20 : (std_path_PathBuf -> US14) = method45()
    let v21 : (string -> US14) = method46()
    let v22 : US14 = match v17 with Ok x -> v20 x | Error x -> v21 x
    let v42 : Result<std_path_PathBuf, std_io_Error> =
        match v22 with
        | US14_1(v38) -> (* Error *)
            let v39 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v39, v1, v38)
        | US14_0(v23) -> (* Ok *)
            (* run_target_args'
            let v24 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v25 : string = "Ok($0)"
            let v26 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v25 
            let _run_target_args'_v24 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : string = "Ok($0)"
            let v28 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v27 
            let _run_target_args'_v24 = v28 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v29 : string = "Ok($0)"
            let v30 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v29 
            let _run_target_args'_v24 = v30 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _run_target_args'_v24 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _run_target_args'_v24 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _run_target_args'_v24 = v33 
            #endif
#else
            let v34 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _run_target_args'_v24 = v34 
            #endif
            let v35 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v24 
            v35
    let _run_target_args'_v2 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "std::fs::read_link(&*$0)"
    let v44 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v43 
    let v45 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v46 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "$0.map_err(|x| $1(x))"
    let v48 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v47 
    let _run_target_args'_v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "$0.map_err(|x| $1(x))"
    let v50 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v49 
    let _run_target_args'_v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "$0.map_err(|x| $1(x))"
    let v52 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v51 
    let _run_target_args'_v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v53 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _run_target_args'_v46 = v53 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _run_target_args'_v46 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _run_target_args'_v46 = v55 
    #endif
#else
    let v56 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _run_target_args'_v46 = v56 
    #endif
    let v57 : Result<std_path_PathBuf, string> = _run_target_args'_v46 
    let v60 : (std_path_PathBuf -> US14) = method45()
    let v61 : (string -> US14) = method46()
    let v62 : US14 = match v57 with Ok x -> v60 x | Error x -> v61 x
    let v82 : Result<std_path_PathBuf, std_io_Error> =
        match v62 with
        | US14_1(v78) -> (* Error *)
            let v79 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v79, v1, v78)
        | US14_0(v63) -> (* Ok *)
            (* run_target_args'
            let v64 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "Ok($0)"
            let v66 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v65 
            let _run_target_args'_v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "Ok($0)"
            let v68 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v67 
            let _run_target_args'_v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "Ok($0)"
            let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v69 
            let _run_target_args'_v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _run_target_args'_v64 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v72 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _run_target_args'_v64 = v72 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _run_target_args'_v64 = v73 
            #endif
#else
            let v74 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _run_target_args'_v64 = v74 
            #endif
            let v75 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v64 
            v75
    let _run_target_args'_v2 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v83 : string = "std::fs::read_link(&*$0)"
    let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v83 
    let v85 : (std_io_Error -> string) = method43()
    (* run_target_args'
    let v86 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "$0.map_err(|x| $1(x))"
    let v88 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v87 
    let _run_target_args'_v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "$0.map_err(|x| $1(x))"
    let v90 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v89 
    let _run_target_args'_v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "$0.map_err(|x| $1(x))"
    let v92 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v91 
    let _run_target_args'_v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _run_target_args'_v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _run_target_args'_v86 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _run_target_args'_v86 = v95 
    #endif
#else
    let v96 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _run_target_args'_v86 = v96 
    #endif
    let v97 : Result<std_path_PathBuf, string> = _run_target_args'_v86 
    let v100 : (std_path_PathBuf -> US14) = method45()
    let v101 : (string -> US14) = method46()
    let v102 : US14 = match v97 with Ok x -> v100 x | Error x -> v101 x
    let v122 : Result<std_path_PathBuf, std_io_Error> =
        match v102 with
        | US14_1(v118) -> (* Error *)
            let v119 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method51(v0, v119, v1, v118)
        | US14_0(v103) -> (* Ok *)
            (* run_target_args'
            let v104 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105 : string = "Ok($0)"
            let v106 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v105 
            let _run_target_args'_v104 = v106 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v107 : string = "Ok($0)"
            let v108 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v107 
            let _run_target_args'_v104 = v108 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v109 : string = "Ok($0)"
            let v110 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v109 
            let _run_target_args'_v104 = v110 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v111 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _run_target_args'_v104 = v111 
            #endif
#if FABLE_COMPILER_PYTHON
            let v112 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _run_target_args'_v104 = v112 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _run_target_args'_v104 = v113 
            #endif
#else
            let v114 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _run_target_args'_v104 = v114 
            #endif
            let v115 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v104 
            v115
    let _run_target_args'_v2 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v2 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v126 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v2 = v126 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v129 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v2 = v129 
    #endif
#else
    let v132 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v2 = v132 
    #endif
    let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v135
and method53 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v1 = v17 
    #endif
#else
    let v20 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v21 : System.IO.FileAttributes = v20 v0
    let _run_target_args'_v1 = v21 
    #endif
    let v22 : System.IO.FileAttributes = _run_target_args'_v1 
    v22
and method54 () : System.IO.FileAttributes =
    (* run_target_args'
    let v0 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v1 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v0 = v16 
    #endif
#else
    let v19 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v0 = v19 
    #endif
    let v20 : System.IO.FileAttributes = _run_target_args'_v0 
    v20
and method55 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v18 
    #endif
#else
    let v21 : bool = v1.HasFlag v0 
    let _run_target_args'_v2 = v21 
    #endif
    let v22 : bool = _run_target_args'_v2 
    v22
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method49(v4)
    let v6 : string option = method35(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method44(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / "
        let v27 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v28 : string = v26 + v27 
        (* run_target_args'
        let v29 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v30 
        let _run_target_args'_v29 = v31 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v32 
        let _run_target_args'_v29 = v33 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v34 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v35 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v28 v34 
        let _run_target_args'_v29 = v35 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v36 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v36 
        #endif
#if FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v39 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v42 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v42 
        #endif
#else
        let v45 : std_io_Error = v28 |> unbox<std_io_Error>
        let _run_target_args'_v29 = v45 
        #endif
        let v48 : std_io_Error = _run_target_args'_v29 
        (* run_target_args'
        let v53 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v54 
        let _run_target_args'_v53 = v55 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v56 
        let _run_target_args'_v53 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : string = "Err($0)"
        let v59 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v48 v58 
        let _run_target_args'_v53 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v60 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v60 
        #endif
#if FABLE_COMPILER_PYTHON
        let v61 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v61 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v62 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v62 
        #endif
#else
        let v63 : Result<std_path_PathBuf, std_io_Error> = v48 |> Error
        let _run_target_args'_v53 = v63 
        #endif
        let v64 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v53 
        v64
    else
        match v20 with
        | US5_0(v67) -> (* Some *)
            let v68 : string = ""
            let v69 : bool = v4 <> v68 
            if v69 then
                let v72 : uint8 = v2 + 1uy
                let v73 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v72
                let v74 : Result<std_path_PathBuf, std_io_Error> = v73 v67
                let v75 : (std_io_Error -> string) = method43()
                (* run_target_args'
                let v76 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v77 
                let _run_target_args'_v76 = v78 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v79 
                let _run_target_args'_v76 = v80 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v81 : string = "$0.map_err(|x| $1(x))"
                let v82 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v74, v75) v81 
                let _run_target_args'_v76 = v82 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v83 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v83 
                #endif
#if FABLE_COMPILER_PYTHON
                let v84 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v84 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v85 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v85 
                #endif
#else
                let v86 : Result<std_path_PathBuf, string> = match v74 with Ok x -> Ok x | Error x -> Error (v75 x)
                let _run_target_args'_v76 = v86 
                #endif
                let v87 : Result<std_path_PathBuf, string> = _run_target_args'_v76 
                let v90 : (std_path_PathBuf -> US14) = method45()
                let v91 : (string -> US14) = method46()
                let v92 : US14 = match v87 with Ok x -> v90 x | Error x -> v91 x
                match v92 with
                | US14_1(v208) -> (* Error *)
                    let v209 : string = $"file_system.read_link / "
                    let v210 : string = $"error': {v208} / error: {v24} / name: {v5}"
                    let v211 : string = v209 + v210 
                    (* run_target_args'
                    let v212 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v213 
                    let _run_target_args'_v212 = v214 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v215 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v216 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v215 
                    let _run_target_args'_v212 = v216 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v217 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v218 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v211 v217 
                    let _run_target_args'_v212 = v218 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v219 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v219 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v222 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v222 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v225 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v225 
                    #endif
#else
                    let v228 : std_io_Error = v211 |> unbox<std_io_Error>
                    let _run_target_args'_v212 = v228 
                    #endif
                    let v231 : std_io_Error = _run_target_args'_v212 
                    (* run_target_args'
                    let v236 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v237 
                    let _run_target_args'_v236 = v238 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v239 : string = "Err($0)"
                    let v240 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v239 
                    let _run_target_args'_v236 = v240 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v241 : string = "Err($0)"
                    let v242 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v231 v241 
                    let _run_target_args'_v236 = v242 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v243 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v243 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v244 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v244 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v245 
                    #endif
#else
                    let v246 : Result<std_path_PathBuf, std_io_Error> = v231 |> Error
                    let _run_target_args'_v236 = v246 
                    #endif
                    let v247 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v236 
                    v247
                | US14_0(v93) -> (* Ok *)
                    (* run_target_args'
                    let v94 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v95 
                    let _run_target_args'_v94 = v96 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v97 
                    let _run_target_args'_v94 = v98 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v99 : string = "$0.display()"
                    let v100 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v93 v99 
                    let _run_target_args'_v94 = v100 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v101 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v101 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v104 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v107 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v107 
                    #endif
#else
                    let v110 : std_path_Display = v93 |> unbox<std_path_Display>
                    let _run_target_args'_v94 = v110 
                    #endif
                    let v113 : std_path_Display = _run_target_args'_v94 
                    let v118 : string = v113 |> string 
                    let v121 : string = method30(v118, v5)
                    (* run_target_args'
                    let v122 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v123 
                    let _run_target_args'_v122 = v124 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v125 
                    let _run_target_args'_v122 = v126 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v127 : string = "&*$0"
                    let v128 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v121 v127 
                    let _run_target_args'_v122 = v128 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v129 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v129 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v132 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v135 
                    #endif
#else
                    let v138 : Ref<Str> = v121 |> unbox<Ref<Str>>
                    let _run_target_args'_v122 = v138 
                    #endif
                    let v141 : Ref<Str> = _run_target_args'_v122 
                    (* run_target_args'
                    let v146 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v147 
                    let _run_target_args'_v146 = v148 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v149 
                    let _run_target_args'_v146 = v150 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v151 : string = "String::from($0)"
                    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v141 v151 
                    let _run_target_args'_v146 = v152 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v153 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v153 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v156 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v159 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v159 
                    #endif
#else
                    let v162 : std_string_String = v141 |> unbox<std_string_String>
                    let _run_target_args'_v146 = v162 
                    #endif
                    let v165 : std_string_String = _run_target_args'_v146 
                    (* run_target_args'
                    let v170 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v171 
                    let _run_target_args'_v170 = v172 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v173 
                    let _run_target_args'_v170 = v174 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v175 : string = "std::path::PathBuf::from($0)"
                    let v176 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v175 
                    let _run_target_args'_v170 = v176 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v177 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v177 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v180 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v183 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v183 
                    #endif
#else
                    let v186 : std_path_PathBuf = v165 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v170 = v186 
                    #endif
                    let v189 : std_path_PathBuf = _run_target_args'_v170 
                    (* run_target_args'
                    let v194 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v195 
                    let _run_target_args'_v194 = v196 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v197 
                    let _run_target_args'_v194 = v198 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v199 : string = "Ok($0)"
                    let v200 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v189 v199 
                    let _run_target_args'_v194 = v200 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v201 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v203 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v203 
                    #endif
#else
                    let v204 : Result<std_path_PathBuf, std_io_Error> = v189 |> Ok
                    let _run_target_args'_v194 = v204 
                    #endif
                    let v205 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v194 
                    v205
            else
                let v252 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v253 : string = $"path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v254 : string = v252 + v253 
                (* run_target_args'
                let v255 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v256 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v257 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v256 
                let _run_target_args'_v255 = v257 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v258 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v259 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v258 
                let _run_target_args'_v255 = v259 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v260 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v261 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _run_target_args'_v255 = v261 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v262 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v262 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v265 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v268 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v268 
                #endif
#else
                let v271 : std_io_Error = v254 |> unbox<std_io_Error>
                let _run_target_args'_v255 = v271 
                #endif
                let v274 : std_io_Error = _run_target_args'_v255 
                (* run_target_args'
                let v279 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v280 : string = "Err($0)"
                let v281 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v280 
                let _run_target_args'_v279 = v281 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v282 : string = "Err($0)"
                let v283 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v282 
                let _run_target_args'_v279 = v283 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v284 : string = "Err($0)"
                let v285 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v274 v284 
                let _run_target_args'_v279 = v285 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v286 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v286 
                #endif
#if FABLE_COMPILER_PYTHON
                let v287 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v287 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v288 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v288 
                #endif
#else
                let v289 : Result<std_path_PathBuf, std_io_Error> = v274 |> Error
                let _run_target_args'_v279 = v289 
                #endif
                let v290 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v279 
                v290
        | _ ->
            let v294 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v295 : string = $"path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v296 : string = v294 + v295 
            (* run_target_args'
            let v297 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v298 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v299 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v298 
            let _run_target_args'_v297 = v299 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v300 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v301 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v300 
            let _run_target_args'_v297 = v301 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v302 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v303 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v296 v302 
            let _run_target_args'_v297 = v303 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v304 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v304 
            #endif
#if FABLE_COMPILER_PYTHON
            let v307 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v307 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v310 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v310 
            #endif
#else
            let v313 : std_io_Error = v296 |> unbox<std_io_Error>
            let _run_target_args'_v297 = v313 
            #endif
            let v316 : std_io_Error = _run_target_args'_v297 
            (* run_target_args'
            let v321 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v322 : string = "Err($0)"
            let v323 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v322 
            let _run_target_args'_v321 = v323 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v324 : string = "Err($0)"
            let v325 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v324 
            let _run_target_args'_v321 = v325 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v326 : string = "Err($0)"
            let v327 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v316 v326 
            let _run_target_args'_v321 = v327 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v328 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v328 
            #endif
#if FABLE_COMPILER_PYTHON
            let v329 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v329 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v330 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v330 
            #endif
#else
            let v331 : Result<std_path_PathBuf, std_io_Error> = v316 |> Error
            let _run_target_args'_v321 = v331 
            #endif
            let v332 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v321 
            v332
and method56 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v3 = v19 
    #endif
#else
    let v22 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v3 = v22 
    #endif
    let v25 : System_IO_DirectoryInfo = _run_target_args'_v3 
    let v30 : System.IO.FileAttributes = method53(v25)
    let v31 : System.IO.FileAttributes = method54()
    let v32 : bool = method55(v31, v30)
    if v32 then
        (* run_target_args'
        let v33 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v34 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v34 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v37 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v37 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v40 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v40 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v43 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v43 
        #endif
#if FABLE_COMPILER_PYTHON
        let v46 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v46 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v49 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v33 = v49 
        #endif
#else
        let v52 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v33 = v52 
        #endif
        let v55 : System_IO_FileInfo = _run_target_args'_v33 
        (* run_target_args'
        let v60 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v61 : string = null |> unbox<string>
        let _run_target_args'_v60 = v61 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v64 : string = null |> unbox<string>
        let _run_target_args'_v60 = v64 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v67 : string = null |> unbox<string>
        let _run_target_args'_v60 = v67 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v70 : string = null |> unbox<string>
        let _run_target_args'_v60 = v70 
        #endif
#if FABLE_COMPILER_PYTHON
        let v73 : string = null |> unbox<string>
        let _run_target_args'_v60 = v73 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v76 : string = null |> unbox<string>
        let _run_target_args'_v60 = v76 
        #endif
#else
        let v79 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v80 : string = v79 v55
        let _run_target_args'_v60 = v80 
        #endif
        let v81 : string = _run_target_args'_v60 
        let v86 : std_path_PathBuf = v81 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v89 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = "Ok($0)"
        let v91 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v90 
        let _run_target_args'_v89 = v91 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v92 : string = "Ok($0)"
        let v93 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v92 
        let _run_target_args'_v89 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v94 : string = "Ok($0)"
        let v95 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v86 v94 
        let _run_target_args'_v89 = v95 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v96 : Result<std_path_PathBuf, std_io_Error> = v86 |> Ok
        let _run_target_args'_v89 = v96 
        #endif
#if FABLE_COMPILER_PYTHON
        let v97 : Result<std_path_PathBuf, std_io_Error> = v86 |> Ok
        let _run_target_args'_v89 = v97 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v98 : Result<std_path_PathBuf, std_io_Error> = v86 |> Ok
        let _run_target_args'_v89 = v98 
        #endif
#else
        let v99 : Result<std_path_PathBuf, std_io_Error> = v86 |> Ok
        let _run_target_args'_v89 = v99 
        #endif
        let v100 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v89 
        v100
    else
        let v103 : string = $"file_system.read_link / Fsharp / "
        let v104 : string = $"The file or directory is not a reparse point. / "
        let v105 : string = v103 + v104 
        let v106 : string = $"path: {v0} / result: {v32} / path': {v2} / n: {v1}"
        let v107 : string = v105 + v106 
        (* run_target_args'
        let v108 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v109 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v110 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v107 v109 
        let _run_target_args'_v108 = v110 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v111 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v112 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v107 v111 
        let _run_target_args'_v108 = v112 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v113 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v114 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v107 v113 
        let _run_target_args'_v108 = v114 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v115 : std_io_Error = v107 |> unbox<std_io_Error>
        let _run_target_args'_v108 = v115 
        #endif
#if FABLE_COMPILER_PYTHON
        let v118 : std_io_Error = v107 |> unbox<std_io_Error>
        let _run_target_args'_v108 = v118 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v121 : std_io_Error = v107 |> unbox<std_io_Error>
        let _run_target_args'_v108 = v121 
        #endif
#else
        let v124 : std_io_Error = v107 |> unbox<std_io_Error>
        let _run_target_args'_v108 = v124 
        #endif
        let v127 : std_io_Error = _run_target_args'_v108 
        let v132 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method57(v0, v132, v1, v127, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method56(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method58 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method49(v0)
    let v5 : string option = method35(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method44(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / "
        let v26 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v27 : string = v25 + v26 
        (* run_target_args'
        let v28 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v29 
        let _run_target_args'_v28 = v30 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v31 
        let _run_target_args'_v28 = v32 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v33 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v34 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v27 v33 
        let _run_target_args'_v28 = v34 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v35 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v35 
        #endif
#if FABLE_COMPILER_PYTHON
        let v38 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v38 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v41 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v41 
        #endif
#else
        let v44 : std_io_Error = v27 |> unbox<std_io_Error>
        let _run_target_args'_v28 = v44 
        #endif
        let v47 : std_io_Error = _run_target_args'_v28 
        (* run_target_args'
        let v52 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v53 
        let _run_target_args'_v52 = v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v55 
        let _run_target_args'_v52 = v56 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v57 : string = "Err($0)"
        let v58 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v47 v57 
        let _run_target_args'_v52 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v59 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v59 
        #endif
#if FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v60 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v61 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v61 
        #endif
#else
        let v62 : Result<std_path_PathBuf, std_io_Error> = v47 |> Error
        let _run_target_args'_v52 = v62 
        #endif
        let v63 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v52 
        v63
    else
        match v19 with
        | US5_0(v66) -> (* Some *)
            let v67 : string = ""
            let v68 : bool = v0 <> v67 
            if v68 then
                let v71 : uint8 = v2 + 1uy
                let v72 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v71
                let v73 : Result<std_path_PathBuf, std_io_Error> = v72 v66
                let v74 : (std_io_Error -> string) = method43()
                (* run_target_args'
                let v75 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v76 
                let _run_target_args'_v75 = v77 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v78 
                let _run_target_args'_v75 = v79 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v80 : string = "$0.map_err(|x| $1(x))"
                let v81 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v73, v74) v80 
                let _run_target_args'_v75 = v81 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v82 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v82 
                #endif
#if FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v83 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v84 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v84 
                #endif
#else
                let v85 : Result<std_path_PathBuf, string> = match v73 with Ok x -> Ok x | Error x -> Error (v74 x)
                let _run_target_args'_v75 = v85 
                #endif
                let v86 : Result<std_path_PathBuf, string> = _run_target_args'_v75 
                let v89 : (std_path_PathBuf -> US14) = method45()
                let v90 : (string -> US14) = method46()
                let v91 : US14 = match v86 with Ok x -> v89 x | Error x -> v90 x
                match v91 with
                | US14_1(v207) -> (* Error *)
                    let v208 : string = $"file_system.read_link / "
                    let v209 : string = $"error': {v207} / error: {v23} / name: {v4}"
                    let v210 : string = v208 + v209 
                    (* run_target_args'
                    let v211 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v212 
                    let _run_target_args'_v211 = v213 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v214 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v215 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v214 
                    let _run_target_args'_v211 = v215 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v216 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v217 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v210 v216 
                    let _run_target_args'_v211 = v217 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v218 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v218 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v221 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v224 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v224 
                    #endif
#else
                    let v227 : std_io_Error = v210 |> unbox<std_io_Error>
                    let _run_target_args'_v211 = v227 
                    #endif
                    let v230 : std_io_Error = _run_target_args'_v211 
                    (* run_target_args'
                    let v235 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v236 
                    let _run_target_args'_v235 = v237 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v238 : string = "Err($0)"
                    let v239 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v238 
                    let _run_target_args'_v235 = v239 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v240 : string = "Err($0)"
                    let v241 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v230 v240 
                    let _run_target_args'_v235 = v241 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v242 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v243 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v243 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v244 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v244 
                    #endif
#else
                    let v245 : Result<std_path_PathBuf, std_io_Error> = v230 |> Error
                    let _run_target_args'_v235 = v245 
                    #endif
                    let v246 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v235 
                    v246
                | US14_0(v92) -> (* Ok *)
                    (* run_target_args'
                    let v93 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v94 
                    let _run_target_args'_v93 = v95 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v96 
                    let _run_target_args'_v93 = v97 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v98 : string = "$0.display()"
                    let v99 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v92 v98 
                    let _run_target_args'_v93 = v99 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v100 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v100 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v103 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v103 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v106 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v106 
                    #endif
#else
                    let v109 : std_path_Display = v92 |> unbox<std_path_Display>
                    let _run_target_args'_v93 = v109 
                    #endif
                    let v112 : std_path_Display = _run_target_args'_v93 
                    let v117 : string = v112 |> string 
                    let v120 : string = method30(v117, v4)
                    (* run_target_args'
                    let v121 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v122 
                    let _run_target_args'_v121 = v123 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v124 
                    let _run_target_args'_v121 = v125 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v126 : string = "&*$0"
                    let v127 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v120 v126 
                    let _run_target_args'_v121 = v127 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v128 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v128 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v134 
                    #endif
#else
                    let v137 : Ref<Str> = v120 |> unbox<Ref<Str>>
                    let _run_target_args'_v121 = v137 
                    #endif
                    let v140 : Ref<Str> = _run_target_args'_v121 
                    (* run_target_args'
                    let v145 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v146 
                    let _run_target_args'_v145 = v147 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v148 
                    let _run_target_args'_v145 = v149 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v150 : string = "String::from($0)"
                    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v140 v150 
                    let _run_target_args'_v145 = v151 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v152 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v152 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v155 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v155 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v158 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v158 
                    #endif
#else
                    let v161 : std_string_String = v140 |> unbox<std_string_String>
                    let _run_target_args'_v145 = v161 
                    #endif
                    let v164 : std_string_String = _run_target_args'_v145 
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v170 
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v172 
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v174 : string = "std::path::PathBuf::from($0)"
                    let v175 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v164 v174 
                    let _run_target_args'_v169 = v175 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v179 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v179 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v182 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v182 
                    #endif
#else
                    let v185 : std_path_PathBuf = v164 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v169 = v185 
                    #endif
                    let v188 : std_path_PathBuf = _run_target_args'_v169 
                    (* run_target_args'
                    let v193 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v194 
                    let _run_target_args'_v193 = v195 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v196 
                    let _run_target_args'_v193 = v197 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v198 : string = "Ok($0)"
                    let v199 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v188 v198 
                    let _run_target_args'_v193 = v199 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v200 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v202 
                    #endif
#else
                    let v203 : Result<std_path_PathBuf, std_io_Error> = v188 |> Ok
                    let _run_target_args'_v193 = v203 
                    #endif
                    let v204 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v193 
                    v204
            else
                let v251 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v252 : string = $"path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v253 : string = v251 + v252 
                (* run_target_args'
                let v254 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v255 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v256 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v255 
                let _run_target_args'_v254 = v256 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v257 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v258 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v257 
                let _run_target_args'_v254 = v258 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v259 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v260 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v253 v259 
                let _run_target_args'_v254 = v260 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v261 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v261 
                #endif
#if FABLE_COMPILER_PYTHON
                let v264 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v264 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v267 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v267 
                #endif
#else
                let v270 : std_io_Error = v253 |> unbox<std_io_Error>
                let _run_target_args'_v254 = v270 
                #endif
                let v273 : std_io_Error = _run_target_args'_v254 
                (* run_target_args'
                let v278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v279 : string = "Err($0)"
                let v280 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v279 
                let _run_target_args'_v278 = v280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v281 : string = "Err($0)"
                let v282 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v281 
                let _run_target_args'_v278 = v282 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v283 : string = "Err($0)"
                let v284 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v273 v283 
                let _run_target_args'_v278 = v284 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v285 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v285 
                #endif
#if FABLE_COMPILER_PYTHON
                let v286 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v286 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v287 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v287 
                #endif
#else
                let v288 : Result<std_path_PathBuf, std_io_Error> = v273 |> Error
                let _run_target_args'_v278 = v288 
                #endif
                let v289 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v278 
                v289
        | _ ->
            let v293 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v294 : string = $"path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v295 : string = v293 + v294 
            (* run_target_args'
            let v296 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v297 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v298 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v297 
            let _run_target_args'_v296 = v298 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v299 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v300 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v299 
            let _run_target_args'_v296 = v300 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v301 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v302 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v295 v301 
            let _run_target_args'_v296 = v302 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v303 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v303 
            #endif
#if FABLE_COMPILER_PYTHON
            let v306 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v306 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v309 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v309 
            #endif
#else
            let v312 : std_io_Error = v295 |> unbox<std_io_Error>
            let _run_target_args'_v296 = v312 
            #endif
            let v315 : std_io_Error = _run_target_args'_v296 
            (* run_target_args'
            let v320 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v321 : string = "Err($0)"
            let v322 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v321 
            let _run_target_args'_v320 = v322 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v323 : string = "Err($0)"
            let v324 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v323 
            let _run_target_args'_v320 = v324 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v325 : string = "Err($0)"
            let v326 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v315 v325 
            let _run_target_args'_v320 = v326 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v327 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v327 
            #endif
#if FABLE_COMPILER_PYTHON
            let v328 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v328 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v329 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v329 
            #endif
#else
            let v330 : Result<std_path_PathBuf, std_io_Error> = v315 |> Error
            let _run_target_args'_v320 = v330 
            #endif
            let v331 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v320 
            v331
and method52 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v2 = v18 
    #endif
#else
    let v21 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v2 = v21 
    #endif
    let v24 : System_IO_DirectoryInfo = _run_target_args'_v2 
    let v29 : System.IO.FileAttributes = method53(v24)
    let v30 : System.IO.FileAttributes = method54()
    let v31 : bool = method55(v30, v29)
    if v31 then
        (* run_target_args'
        let v32 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v33 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v36 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v36 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v39 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v39 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v42 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v42 
        #endif
#if FABLE_COMPILER_PYTHON
        let v45 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v45 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v48 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v32 = v48 
        #endif
#else
        let v51 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v32 = v51 
        #endif
        let v54 : System_IO_FileInfo = _run_target_args'_v32 
        (* run_target_args'
        let v59 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v60 : string = null |> unbox<string>
        let _run_target_args'_v59 = v60 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v63 : string = null |> unbox<string>
        let _run_target_args'_v59 = v63 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v66 : string = null |> unbox<string>
        let _run_target_args'_v59 = v66 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v69 : string = null |> unbox<string>
        let _run_target_args'_v59 = v69 
        #endif
#if FABLE_COMPILER_PYTHON
        let v72 : string = null |> unbox<string>
        let _run_target_args'_v59 = v72 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v75 : string = null |> unbox<string>
        let _run_target_args'_v59 = v75 
        #endif
#else
        let v78 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v79 : string = v78 v54
        let _run_target_args'_v59 = v79 
        #endif
        let v80 : string = _run_target_args'_v59 
        let v85 : std_path_PathBuf = v80 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = "Ok($0)"
        let v90 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v89 
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v91 : string = "Ok($0)"
        let v92 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v91 
        let _run_target_args'_v88 = v92 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v93 : string = "Ok($0)"
        let v94 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v85 v93 
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v95 : Result<std_path_PathBuf, std_io_Error> = v85 |> Ok
        let _run_target_args'_v88 = v95 
        #endif
#if FABLE_COMPILER_PYTHON
        let v96 : Result<std_path_PathBuf, std_io_Error> = v85 |> Ok
        let _run_target_args'_v88 = v96 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v97 : Result<std_path_PathBuf, std_io_Error> = v85 |> Ok
        let _run_target_args'_v88 = v97 
        #endif
#else
        let v98 : Result<std_path_PathBuf, std_io_Error> = v85 |> Ok
        let _run_target_args'_v88 = v98 
        #endif
        let v99 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v88 
        v99
    else
        let v102 : string = $"file_system.read_link / Fsharp / "
        let v103 : string = $"The file or directory is not a reparse point. / "
        let v104 : string = v102 + v103 
        let v105 : string = $"path: {v0} / result: {v31} / path': {v0} / n: {v1}"
        let v106 : string = v104 + v105 
        (* run_target_args'
        let v107 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v109 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _run_target_args'_v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v111 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _run_target_args'_v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v113 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _run_target_args'_v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : std_io_Error = v106 |> unbox<std_io_Error>
        let _run_target_args'_v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : std_io_Error = v106 |> unbox<std_io_Error>
        let _run_target_args'_v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : std_io_Error = v106 |> unbox<std_io_Error>
        let _run_target_args'_v107 = v120 
        #endif
#else
        let v123 : std_io_Error = v106 |> unbox<std_io_Error>
        let _run_target_args'_v107 = v123 
        #endif
        let v126 : std_io_Error = _run_target_args'_v107 
        let v131 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method58(v0, v131, v1, v126)
and method41 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = method33(v0)
    let v7 : Result<std_path_PathBuf, std_io_Error> =
        if v2 then
            let v3 : string = "std::fs::read_link(&*$0)"
            let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
            v4
        else
            let v5 : uint8 = 0uy
            method42(v0, v5)
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : bool = method33(v0)
    let v13 : Result<std_path_PathBuf, std_io_Error> =
        if v8 then
            let v9 : string = "std::fs::read_link(&*$0)"
            let v10 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v9 
            v10
        else
            let v11 : uint8 = 0uy
            method42(v0, v11)
    let _run_target_args'_v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : bool = method33(v0)
    let v19 : Result<std_path_PathBuf, std_io_Error> =
        if v14 then
            let v15 : string = "std::fs::read_link(&*$0)"
            let v16 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v15 
            v16
        else
            let v17 : uint8 = 0uy
            method42(v0, v17)
    let _run_target_args'_v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : uint8 = 0uy
    let v21 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v20)
    let _run_target_args'_v1 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v1 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : uint8 = 0uy
    let v24 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v23)
    let _run_target_args'_v1 = v24 
    #endif
#else
    let v25 : uint8 = 0uy
    let v26 : Result<std_path_PathBuf, std_io_Error> = method52(v0, v25)
    let _run_target_args'_v1 = v26 
    #endif
    let v27 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v1 
    v27
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method59 () : (std_path_PathBuf -> US15) =
    closure25()
and method61 (v0 : string) : string =
    v0
and method62 () : string =
    let v0 : string = ""
    v0
and method60 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = $"regex::Regex::new(&$0)"
    let v5 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.unwrap()"
    let v8 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v6 = v15 
    #endif
#else
    let v16 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v6 = v16 
    #endif
    let v17 : regex_Regex = _run_target_args'_v6 
    let v20 : string = method61(v2)
    let v21 : string = $"$0.replace_all(&*$1, &*$2)"
    let v22 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v17, v20, v1) v21 
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let _run_target_args'_v3 = v26 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : string = method62()
    let _run_target_args'_v3 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = method62()
    let _run_target_args'_v3 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : string = method62()
    let _run_target_args'_v3 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string = method62()
    let _run_target_args'_v3 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : string = method62()
    let _run_target_args'_v3 = v31 
    #endif
#else
    let v32 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v3 = v32 
    #endif
    let v33 : string = _run_target_args'_v3 
    v33
and method40 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method41(v0)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "$0.ok()"
        let v6 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v5 
        let _run_target_args'_v4 = v6 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v7 : string = "$0.ok()"
        let v8 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v7 
        let _run_target_args'_v4 = v8 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v9 : string = "$0.ok()"
        let v10 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v9 
        let _run_target_args'_v4 = v10 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v11 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v4 = v11 
        #endif
#if FABLE_COMPILER_PYTHON
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v4 = v12 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v4 = v13 
        #endif
#else
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v4 = v14 
        #endif
        let v15 : std_path_PathBuf option = _run_target_args'_v4 
        let v18 : (std_path_PathBuf -> US15) = method59()
        let v19 : US15 option = v15 |> Option.map v18 
        let v30 : US15 = US15_1
        let v31 : US15 = v19 |> Option.defaultValue v30 
        let v64 : string =
            match v31 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v35) -> (* Some *)
                (* run_target_args'
                let v36 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v37 : string = "$0.display()"
                let v38 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v37 
                let _run_target_args'_v36 = v38 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v39 : string = "$0.display()"
                let v40 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v39 
                let _run_target_args'_v36 = v40 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v41 : string = "$0.display()"
                let v42 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v41 
                let _run_target_args'_v36 = v42 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v43 : std_path_Display = v35 |> unbox<std_path_Display>
                let _run_target_args'_v36 = v43 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : std_path_Display = v35 |> unbox<std_path_Display>
                let _run_target_args'_v36 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v49 : std_path_Display = v35 |> unbox<std_path_Display>
                let _run_target_args'_v36 = v49 
                #endif
#else
                let v52 : std_path_Display = v35 |> unbox<std_path_Display>
                let _run_target_args'_v36 = v52 
                #endif
                let v55 : std_path_Display = _run_target_args'_v36 
                let v60 : string = v55 |> string 
                v60
        let v65 : bool = v64 = ""
        let v66 : string =
            if v65 then
                v0
            else
                v64
        let v67 : string = "^\\\\\\\\\\?\\\\"
        let v68 : string = ""
        let v69 : string = method60(v67, v68, v66)
        let v70 : int32 = v69.Length
        let v71 : bool = v70 < 2
        if v71 then
            v0
        else
            let v72 : string = $"{v69.[0] |> string |> _.ToLower()}{v69.[1..]}"
            let v73 : string = "\\"
            let v74 : string = "/"
            let v75 : string = v72.Replace (v73, v74)
            v75
and method29 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method30(v2, v3)
    let v5 : US13 = method31(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure17(v0, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method40(v6)
        US5_0(v7)
and method63 () : string =
    let v0 : string = "\n"
    v0
and method65 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method32(v0)
    let v4 : bool = v3 = false
    let v87 : bool =
        if v4 then
            false
        else
            (* run_target_args'
            let v5 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v6 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            (* run_target_args'
            let v9 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v10 : string = "$0.unwrap()"
            let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v10 
            let _run_target_args'_v9 = v11 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v12 : string = "$0.unwrap()"
            let v13 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v12 
            let _run_target_args'_v9 = v13 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : string = "$0.unwrap()"
            let v15 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v14 
            let _run_target_args'_v9 = v15 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v16 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v9 = v16 
            #endif
#if FABLE_COMPILER_PYTHON
            let v17 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v9 = v17 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v18 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v9 = v18 
            #endif
#else
            let v19 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v9 = v19 
            #endif
            let v20 : Vec<uint8> = _run_target_args'_v9 
            let _run_target_args'_v6 = v20 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v23 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v6 = v23 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v26 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v6 = v26 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v6 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v6 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v35 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v6 = v35 
            #endif
#else
            let v38 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v39 : string = "$0.to_vec()"
            let v40 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let _run_target_args'_v6 = v40 
            #endif
            let v41 : Vec<uint8> = _run_target_args'_v6 
            let v46 : Vec<uint8> = method27(v41)
            let v47 : string = "std::string::String::from_utf8($0)"
            let v48 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v46 v47 
            (* run_target_args'
            let v49 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v50 : string = "$0.unwrap()"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v50 
            let _run_target_args'_v49 = v51 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v52 : string = "$0.unwrap()"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v52 
            let _run_target_args'_v49 = v53 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v54 : string = "$0.unwrap()"
            let v55 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v54 
            let _run_target_args'_v49 = v55 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v56 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v49 = v56 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v49 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v58 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v49 = v58 
            #endif
#else
            let v59 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v49 = v59 
            #endif
            let v60 : std_string_String = _run_target_args'_v49 
            let v63 : string = "fable_library_rust::String_::fromString($0)"
            let v64 : string = Fable.Core.RustInterop.emitRustExpr v60 v63 
            let _run_target_args'_v5 = v64 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _run_target_args'_v5 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _run_target_args'_v5 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _run_target_args'_v5 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _run_target_args'_v5 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v77 : string = null |> unbox<string>
            let _run_target_args'_v5 = v77 
            #endif
#else
            let v80 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v5 = v80 
            #endif
            let v81 : string = _run_target_args'_v5 
            let v86 : bool = v1 = v81
            v86
    let _run_target_args'_v2 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v88 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v100 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v100 
    #endif
#else
    let v103 : bool = null |> unbox<bool>
    let _run_target_args'_v2 = v103 
    #endif
    let v106 : bool = _run_target_args'_v2 
    v106
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method67 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method68 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method69 () : (std_string_String -> US16) =
    closure28()
and method70 () : string =
    
    
    
    
    
    let v0 : string = "Critical"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_red"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _run_target_args'_v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_red"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v58 
    #endif
    let v61 : Ref<Str> = _run_target_args'_v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_red"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _run_target_args'_v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _run_target_args'_v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v90 
    #endif
    let v93 : Ref<Str> = _run_target_args'_v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _run_target_args'_v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[91m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _run_target_args'_v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[91m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _run_target_args'_v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[91m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _run_target_args'_v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[91m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _run_target_args'_v7 = v119 
    #endif
    let v120 : string = _run_target_args'_v7 
    v120
and method72 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "error"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _run_target_args'_v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v1}"
    let _run_target_args'_v65 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v81 : string = $"%A{v1}"
    let _run_target_args'_v65 = v81 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _run_target_args'_v65 = v84 
    #endif
#else
    let v87 : string = $"%A{v1}"
    let _run_target_args'_v65 = v87 
    #endif
    let v90 : string = _run_target_args'_v65 
    let v95 : string = $"{v90}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v3, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = " }"
    let v104 : string = $"{v103}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v3, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v112 : string = v3.l0
    v112
and method71 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method72(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method71(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method73 () : string =
    
    
    
    
    
    let v0 : string = "Verbose"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_black"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _run_target_args'_v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_black"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v42 = v58 
    #endif
    let v61 : Ref<Str> = _run_target_args'_v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _run_target_args'_v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_black"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    (* run_target_args'
    let v74 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _run_target_args'_v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _run_target_args'_v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _run_target_args'_v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _run_target_args'_v74 = v90 
    #endif
    let v93 : Ref<Str> = _run_target_args'_v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _run_target_args'_v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[90m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _run_target_args'_v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[90m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _run_target_args'_v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[90m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _run_target_args'_v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[90m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _run_target_args'_v7 = v119 
    #endif
    let v120 : string = _run_target_args'_v7 
    v120
and method75 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "dir"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method74 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method75(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.create_dir"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method73()
        let v39 : string = method74(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method77 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method33(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method77(v1, v0)
and method76 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method78 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method79 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v1 = v17 
    #endif
#else
    let v20 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v21 : System_IO_DirectoryInfo = v20 v0
    let _run_target_args'_v1 = v21 
    #endif
    let v22 : System_IO_DirectoryInfo = _run_target_args'_v1 
    v22
and method81 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method80 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method81(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method80(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method87 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "ex"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "path"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method86 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method87(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.delete_directory_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        (* run_target_args'
        let v40 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v41 : string = $"%A{v1}"
        let _run_target_args'_v40 = v41 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v44 : string = $"%A{v1}"
        let _run_target_args'_v40 = v44 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v47 : string = $"%A{v1}"
        let _run_target_args'_v40 = v47 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v50 : string = $"%A{v1}"
        let _run_target_args'_v40 = v50 
        #endif
#if FABLE_COMPILER_PYTHON
        let v53 : string = $"%A{v1}"
        let _run_target_args'_v40 = v53 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v56 : string = $"%A{v1}"
        let _run_target_args'_v40 = v56 
        #endif
#else
        let v59 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v40 = v59 
        #endif
        let v60 : string = _run_target_args'_v40 
        let v65 : string = method49(v0)
        let v66 : string = method86(v20, v21, v22, v23, v24, v25, v38, v39, v60, v65)
        method19(v66)
and method85 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : unit = ()
    let _let'_v12 =
        async {
            try
                let v15 : bool = true
                method77(v15, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v17 : exn = ex
                let v18 : int64 = v1 % 100L
                let v19 : bool = v18 = 0L
                if v19 then
                    let v20 : unit = ()
                    let v21 : (unit -> unit) = closure34(v0, v17)
                    let v22 : unit = (fun () -> v21 (); v20) ()
                    ()
                (* run_target_args'
                let v88 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v89 : (int32 -> Async<unit>) = Async.Sleep
                let v90 : Async<unit> = v89 10
                let _run_target_args'_v88 = v90 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v91 : (int32 -> Async<unit>) = Async.Sleep
                let v92 : Async<unit> = v91 10
                let _run_target_args'_v88 = v92 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v93 : (int32 -> Async<unit>) = Async.Sleep
                let v94 : Async<unit> = v93 10
                let _run_target_args'_v88 = v94 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v95 : (int32 -> Async<unit>) = Async.Sleep
                let v96 : Async<unit> = v95 10
                let _run_target_args'_v88 = v96 
                #endif
#if FABLE_COMPILER_PYTHON
                let v97 : (int32 -> Async<unit>) = Async.Sleep
                let v98 : Async<unit> = v97 10
                let _run_target_args'_v88 = v98 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v99 : (int32 -> Async<unit>) = Async.Sleep
                let v100 : Async<unit> = v99 10
                let _run_target_args'_v88 = v100 
                #endif
#else
                let v101 : (int32 -> Async<unit>) = Async.Sleep
                let v102 : Async<unit> = v101 10
                let _run_target_args'_v88 = v102 
                #endif
                let v103 : Async<unit> = _run_target_args'_v88 
                do! v103 
                let v106 : int64 = v1 + 1L
                let v107 : Async<int64> = method84(v0, v106)
                return! v107 
                (* indent
                ()
            indent *)
            (* try_unit
            let v199 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1511 : Async<int64> = _let'_v12 
    let _run_target_args'_v2 = v1511 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1512 : unit = ()
    let _let'_v1512 =
        async {
            try
                let v1515 : bool = true
                method77(v1515, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v1517 : exn = ex
                let v1518 : int64 = v1 % 100L
                let v1519 : bool = v1518 = 0L
                if v1519 then
                    let v1520 : unit = ()
                    let v1521 : (unit -> unit) = closure34(v0, v1517)
                    let v1522 : unit = (fun () -> v1521 (); v1520) ()
                    ()
                (* run_target_args'
                let v1588 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1589 : (int32 -> Async<unit>) = Async.Sleep
                let v1590 : Async<unit> = v1589 10
                let _run_target_args'_v1588 = v1590 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1591 : (int32 -> Async<unit>) = Async.Sleep
                let v1592 : Async<unit> = v1591 10
                let _run_target_args'_v1588 = v1592 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1593 : (int32 -> Async<unit>) = Async.Sleep
                let v1594 : Async<unit> = v1593 10
                let _run_target_args'_v1588 = v1594 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1595 : (int32 -> Async<unit>) = Async.Sleep
                let v1596 : Async<unit> = v1595 10
                let _run_target_args'_v1588 = v1596 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1597 : (int32 -> Async<unit>) = Async.Sleep
                let v1598 : Async<unit> = v1597 10
                let _run_target_args'_v1588 = v1598 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1599 : (int32 -> Async<unit>) = Async.Sleep
                let v1600 : Async<unit> = v1599 10
                let _run_target_args'_v1588 = v1600 
                #endif
#else
                let v1601 : (int32 -> Async<unit>) = Async.Sleep
                let v1602 : Async<unit> = v1601 10
                let _run_target_args'_v1588 = v1602 
                #endif
                let v1603 : Async<unit> = _run_target_args'_v1588 
                do! v1603 
                let v1606 : int64 = v1 + 1L
                let v1607 : Async<int64> = method84(v0, v1606)
                return! v1607 
                (* indent
                ()
            indent *)
            (* try_unit
            let v1699 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3011 : Async<int64> = _let'_v1512 
    let _run_target_args'_v2 = v3011 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3012 : unit = ()
    let _let'_v3012 =
        async {
            try
                let v3015 : bool = true
                method77(v3015, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v3017 : exn = ex
                let v3018 : int64 = v1 % 100L
                let v3019 : bool = v3018 = 0L
                if v3019 then
                    let v3020 : unit = ()
                    let v3021 : (unit -> unit) = closure34(v0, v3017)
                    let v3022 : unit = (fun () -> v3021 (); v3020) ()
                    ()
                (* run_target_args'
                let v3088 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3089 : (int32 -> Async<unit>) = Async.Sleep
                let v3090 : Async<unit> = v3089 10
                let _run_target_args'_v3088 = v3090 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3091 : (int32 -> Async<unit>) = Async.Sleep
                let v3092 : Async<unit> = v3091 10
                let _run_target_args'_v3088 = v3092 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3093 : (int32 -> Async<unit>) = Async.Sleep
                let v3094 : Async<unit> = v3093 10
                let _run_target_args'_v3088 = v3094 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3095 : (int32 -> Async<unit>) = Async.Sleep
                let v3096 : Async<unit> = v3095 10
                let _run_target_args'_v3088 = v3096 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3097 : (int32 -> Async<unit>) = Async.Sleep
                let v3098 : Async<unit> = v3097 10
                let _run_target_args'_v3088 = v3098 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3099 : (int32 -> Async<unit>) = Async.Sleep
                let v3100 : Async<unit> = v3099 10
                let _run_target_args'_v3088 = v3100 
                #endif
#else
                let v3101 : (int32 -> Async<unit>) = Async.Sleep
                let v3102 : Async<unit> = v3101 10
                let _run_target_args'_v3088 = v3102 
                #endif
                let v3103 : Async<unit> = _run_target_args'_v3088 
                do! v3103 
                let v3106 : int64 = v1 + 1L
                let v3107 : Async<int64> = method84(v0, v3106)
                return! v3107 
                (* indent
                ()
            indent *)
            (* try_unit
            let v3199 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4511 : Async<int64> = _let'_v3012 
    let _run_target_args'_v2 = v4511 
    #endif
#else
    let v4512 : unit = ()
    let _let'_v4512 =
        async {
            try
                let v4515 : bool = true
                method77(v4515, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v4517 : exn = ex
                let v4518 : int64 = v1 % 100L
                let v4519 : bool = v4518 = 0L
                if v4519 then
                    let v4520 : unit = ()
                    let v4521 : (unit -> unit) = closure34(v0, v4517)
                    let v4522 : unit = (fun () -> v4521 (); v4520) ()
                    ()
                (* run_target_args'
                let v4588 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4589 : (int32 -> Async<unit>) = Async.Sleep
                let v4590 : Async<unit> = v4589 10
                let _run_target_args'_v4588 = v4590 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4591 : (int32 -> Async<unit>) = Async.Sleep
                let v4592 : Async<unit> = v4591 10
                let _run_target_args'_v4588 = v4592 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4593 : (int32 -> Async<unit>) = Async.Sleep
                let v4594 : Async<unit> = v4593 10
                let _run_target_args'_v4588 = v4594 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4595 : (int32 -> Async<unit>) = Async.Sleep
                let v4596 : Async<unit> = v4595 10
                let _run_target_args'_v4588 = v4596 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4597 : (int32 -> Async<unit>) = Async.Sleep
                let v4598 : Async<unit> = v4597 10
                let _run_target_args'_v4588 = v4598 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4599 : (int32 -> Async<unit>) = Async.Sleep
                let v4600 : Async<unit> = v4599 10
                let _run_target_args'_v4588 = v4600 
                #endif
#else
                let v4601 : (int32 -> Async<unit>) = Async.Sleep
                let v4602 : Async<unit> = v4601 10
                let _run_target_args'_v4588 = v4602 
                #endif
                let v4603 : Async<unit> = _run_target_args'_v4588 
                do! v4603 
                let v4606 : int64 = v1 + 1L
                let v4607 : Async<int64> = method84(v0, v4606)
                return! v4607 
                (* indent
                ()
            indent *)
            (* try_unit
            let v4699 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6011 : Async<int64> = _let'_v4512 
    let _run_target_args'_v2 = v6011 
    #endif
    let v6012 : Async<int64> = _run_target_args'_v2 
    v6012
and method84 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v2 = v18 
    #endif
#else
    let v21 : Async<int64> = method85(v0, v1)
    let _run_target_args'_v2 = v21 
    #endif
    let v22 : Async<int64> = _run_target_args'_v2 
    v22
and method83 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method84(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method83(v0)
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v13 : Async<unit> = v12 v1
    let _run_target_args'_v2 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v15 : Async<unit> = v14 v1
    let _run_target_args'_v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v17 : Async<unit> = v16 v1
    let _run_target_args'_v2 = v17 
    #endif
#else
    let v18 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v19 : Async<unit> = v18 v1
    let _run_target_args'_v2 = v19 
    #endif
    let v20 : Async<unit> = _run_target_args'_v2 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : (Async<unit> -> unit) = Async.RunSynchronously
    v26 v20
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : (Async<unit> -> unit) = Async.RunSynchronously
    v27 v20
    #endif
#else
    let v28 : (Async<unit> -> unit) = Async.RunSynchronously
    v28 v20
    #endif
    // run_target_args' is_unit
    ()
and method82 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method88 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method66 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::fs::create_dir_all(&*$0)"
    let v3 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : (std_io_Error -> std_string_String) = method67()
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3, v4) v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3, v4) v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "$0.map_err(|x| $1(x))"
    let v11 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v3, v4) v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Result<unit, std_string_String> = match v3 with Ok x -> Ok x | Error x -> Error (v4 x)
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Result<unit, std_string_String> = match v3 with Ok x -> Ok x | Error x -> Error (v4 x)
    let _run_target_args'_v5 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Result<unit, std_string_String> = match v3 with Ok x -> Ok x | Error x -> Error (v4 x)
    let _run_target_args'_v5 = v14 
    #endif
#else
    let v15 : Result<unit, std_string_String> = match v3 with Ok x -> Ok x | Error x -> Error (v4 x)
    let _run_target_args'_v5 = v15 
    #endif
    let v16 : Result<unit, std_string_String> = _run_target_args'_v5 
    let v19 : (unit -> US16) = method68()
    let v20 : (std_string_String -> US16) = method69()
    let v21 : US16 = match v16 with Ok () -> v19 () | Error x -> v20 x
    match v21 with
    | US16_1(v64) -> (* Error *)
        let v65 : unit = ()
        let v66 : (unit -> unit) = closure29(v0, v64)
        let v67 : unit = (fun () -> v66 (); v65) ()
        ()
    | US16_0 -> (* Ok *)
        let v22 : unit = ()
        let v23 : (unit -> unit) = closure30(v0)
        let v24 : unit = (fun () -> v23 (); v22) ()
        ()
    (* run_target_args'
    let v107 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v108 : (unit -> unit) = method76(v0)
    let v109 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v108 "$0()" )
    let _run_target_args'_v107 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v110 : (unit -> unit) = method76(v0)
    let v111 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v110 "$0()" )
    let _run_target_args'_v107 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v112 : (unit -> unit) = method76(v0)
    let v113 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v112 "$0()" )
    let _run_target_args'_v107 = v113 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v114 : (unit -> unit) = method78(v0)
    let v115 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v114 () }
    let _run_target_args'_v107 = v115 
    #endif
#if FABLE_COMPILER_PYTHON
    let v116 : (unit -> unit) = method78(v0)
    let v117 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v116 () }
    let _run_target_args'_v107 = v117 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : (unit -> unit) = method78(v0)
    let v119 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v118 () }
    let _run_target_args'_v107 = v119 
    #endif
#else
    let v120 : (unit -> unit) = method78(v0)
    let v121 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v120 () }
    let _run_target_args'_v107 = v121 
    #endif
    let v122 : System.IDisposable = _run_target_args'_v107 
    let _run_target_args'_v1 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v126 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v1 = v126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v1 = v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : System_IO_DirectoryInfo = method79(v0)
    (* run_target_args'
    let v133 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v134 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : bool = null |> unbox<bool>
    let _run_target_args'_v133 = v149 
    #endif
#else
    let v152 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v153 : bool = v152 v132
    let _run_target_args'_v133 = v153 
    #endif
    let v154 : bool = _run_target_args'_v133 
    let v159 : bool = v154 = false
    if v159 then
        (* run_target_args'
        let v160 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v161 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v161 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v164 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v164 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v167 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v167 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v170 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v170 
        #endif
#if FABLE_COMPILER_PYTHON
        let v173 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v173 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v176 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v160 = v176 
        #endif
#else
        let v179 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v180 : System.DateTime = v179 v132
        let _run_target_args'_v160 = v180 
        #endif
        let v181 : System.DateTime = _run_target_args'_v160 
        let v186 : _ = {| Exists = v154; CreationTime = v181 |}
        let v187 : string = $"%A{v186}"
        let v190 : unit = ()
        let v191 : (unit -> unit) = closure32(v0, v187)
        let v192 : unit = (fun () -> v191 (); v190) ()
        ()
    (* run_target_args'
    let v232 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v233 : (unit -> unit) = method82(v0)
    let v234 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v233 "$0()" )
    let _run_target_args'_v232 = v234 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v235 : (unit -> unit) = method82(v0)
    let v236 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v235 "$0()" )
    let _run_target_args'_v232 = v236 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v237 : (unit -> unit) = method82(v0)
    let v238 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v237 "$0()" )
    let _run_target_args'_v232 = v238 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v239 : (unit -> unit) = method88(v0)
    let v240 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v239 () }
    let _run_target_args'_v232 = v240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v241 : (unit -> unit) = method88(v0)
    let v242 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v241 () }
    let _run_target_args'_v232 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v243 : (unit -> unit) = method88(v0)
    let v244 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v243 () }
    let _run_target_args'_v232 = v244 
    #endif
#else
    let v245 : (unit -> unit) = method88(v0)
    let v246 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v245 () }
    let _run_target_args'_v232 = v246 
    #endif
    let v247 : System.IDisposable = _run_target_args'_v232 
    let _run_target_args'_v1 = v247 
    #endif
#if FABLE_COMPILER_PYTHON
    let v251 : System_IO_DirectoryInfo = method79(v0)
    (* run_target_args'
    let v252 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v253 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v253 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v256 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v256 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v259 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v259 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v262 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v262 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v268 : bool = null |> unbox<bool>
    let _run_target_args'_v252 = v268 
    #endif
#else
    let v271 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v272 : bool = v271 v251
    let _run_target_args'_v252 = v272 
    #endif
    let v273 : bool = _run_target_args'_v252 
    let v278 : bool = v273 = false
    if v278 then
        (* run_target_args'
        let v279 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v280 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v280 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v283 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v283 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v286 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v286 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v289 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v289 
        #endif
#if FABLE_COMPILER_PYTHON
        let v292 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v292 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v295 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v279 = v295 
        #endif
#else
        let v298 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v299 : System.DateTime = v298 v251
        let _run_target_args'_v279 = v299 
        #endif
        let v300 : System.DateTime = _run_target_args'_v279 
        let v305 : _ = {| Exists = v273; CreationTime = v300 |}
        let v306 : string = $"%A{v305}"
        let v309 : unit = ()
        let v310 : (unit -> unit) = closure32(v0, v306)
        let v311 : unit = (fun () -> v310 (); v309) ()
        ()
    (* run_target_args'
    let v351 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v352 : (unit -> unit) = method82(v0)
    let v353 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v352 "$0()" )
    let _run_target_args'_v351 = v353 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v354 : (unit -> unit) = method82(v0)
    let v355 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v354 "$0()" )
    let _run_target_args'_v351 = v355 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v356 : (unit -> unit) = method82(v0)
    let v357 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v356 "$0()" )
    let _run_target_args'_v351 = v357 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v358 : (unit -> unit) = method88(v0)
    let v359 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v358 () }
    let _run_target_args'_v351 = v359 
    #endif
#if FABLE_COMPILER_PYTHON
    let v360 : (unit -> unit) = method88(v0)
    let v361 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v360 () }
    let _run_target_args'_v351 = v361 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v362 : (unit -> unit) = method88(v0)
    let v363 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v362 () }
    let _run_target_args'_v351 = v363 
    #endif
#else
    let v364 : (unit -> unit) = method88(v0)
    let v365 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v364 () }
    let _run_target_args'_v351 = v365 
    #endif
    let v366 : System.IDisposable = _run_target_args'_v351 
    let _run_target_args'_v1 = v366 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v370 : System_IO_DirectoryInfo = method79(v0)
    (* run_target_args'
    let v371 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v372 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v372 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v375 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v375 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v378 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v378 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v381 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v381 
    #endif
#if FABLE_COMPILER_PYTHON
    let v384 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v384 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v387 : bool = null |> unbox<bool>
    let _run_target_args'_v371 = v387 
    #endif
#else
    let v390 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v391 : bool = v390 v370
    let _run_target_args'_v371 = v391 
    #endif
    let v392 : bool = _run_target_args'_v371 
    let v397 : bool = v392 = false
    if v397 then
        (* run_target_args'
        let v398 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v399 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v399 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v402 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v402 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v405 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v405 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v408 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v408 
        #endif
#if FABLE_COMPILER_PYTHON
        let v411 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v411 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v414 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v398 = v414 
        #endif
#else
        let v417 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v418 : System.DateTime = v417 v370
        let _run_target_args'_v398 = v418 
        #endif
        let v419 : System.DateTime = _run_target_args'_v398 
        let v424 : _ = {| Exists = v392; CreationTime = v419 |}
        let v425 : string = $"%A{v424}"
        let v428 : unit = ()
        let v429 : (unit -> unit) = closure32(v0, v425)
        let v430 : unit = (fun () -> v429 (); v428) ()
        ()
    (* run_target_args'
    let v470 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v471 : (unit -> unit) = method82(v0)
    let v472 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v471 "$0()" )
    let _run_target_args'_v470 = v472 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v473 : (unit -> unit) = method82(v0)
    let v474 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v473 "$0()" )
    let _run_target_args'_v470 = v474 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v475 : (unit -> unit) = method82(v0)
    let v476 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v475 "$0()" )
    let _run_target_args'_v470 = v476 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v477 : (unit -> unit) = method88(v0)
    let v478 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v477 () }
    let _run_target_args'_v470 = v478 
    #endif
#if FABLE_COMPILER_PYTHON
    let v479 : (unit -> unit) = method88(v0)
    let v480 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v479 () }
    let _run_target_args'_v470 = v480 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v481 : (unit -> unit) = method88(v0)
    let v482 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v481 () }
    let _run_target_args'_v470 = v482 
    #endif
#else
    let v483 : (unit -> unit) = method88(v0)
    let v484 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v483 () }
    let _run_target_args'_v470 = v484 
    #endif
    let v485 : System.IDisposable = _run_target_args'_v470 
    let _run_target_args'_v1 = v485 
    #endif
#else
    let v489 : System_IO_DirectoryInfo = method79(v0)
    (* run_target_args'
    let v490 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v491 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v491 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v494 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v494 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v497 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v497 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v500 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v500 
    #endif
#if FABLE_COMPILER_PYTHON
    let v503 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v503 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v506 : bool = null |> unbox<bool>
    let _run_target_args'_v490 = v506 
    #endif
#else
    let v509 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v510 : bool = v509 v489
    let _run_target_args'_v490 = v510 
    #endif
    let v511 : bool = _run_target_args'_v490 
    let v516 : bool = v511 = false
    if v516 then
        (* run_target_args'
        let v517 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v518 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v518 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v521 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v521 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v524 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v524 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v527 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v527 
        #endif
#if FABLE_COMPILER_PYTHON
        let v530 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v530 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v533 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v517 = v533 
        #endif
#else
        let v536 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v537 : System.DateTime = v536 v489
        let _run_target_args'_v517 = v537 
        #endif
        let v538 : System.DateTime = _run_target_args'_v517 
        let v543 : _ = {| Exists = v511; CreationTime = v538 |}
        let v544 : string = $"%A{v543}"
        let v547 : unit = ()
        let v548 : (unit -> unit) = closure32(v0, v544)
        let v549 : unit = (fun () -> v548 (); v547) ()
        ()
    (* run_target_args'
    let v589 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v590 : (unit -> unit) = method82(v0)
    let v591 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v590 "$0()" )
    let _run_target_args'_v589 = v591 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v592 : (unit -> unit) = method82(v0)
    let v593 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v592 "$0()" )
    let _run_target_args'_v589 = v593 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v594 : (unit -> unit) = method82(v0)
    let v595 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v594 "$0()" )
    let _run_target_args'_v589 = v595 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v596 : (unit -> unit) = method88(v0)
    let v597 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v596 () }
    let _run_target_args'_v589 = v597 
    #endif
#if FABLE_COMPILER_PYTHON
    let v598 : (unit -> unit) = method88(v0)
    let v599 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v598 () }
    let _run_target_args'_v589 = v599 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v600 : (unit -> unit) = method88(v0)
    let v601 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v600 () }
    let _run_target_args'_v589 = v601 
    #endif
#else
    let v602 : (unit -> unit) = method88(v0)
    let v603 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v602 () }
    let _run_target_args'_v589 = v603 
    #endif
    let v604 : System.IDisposable = _run_target_args'_v589 
    let _run_target_args'_v1 = v604 
    #endif
    let v608 : System.IDisposable = _run_target_args'_v1 
    v608
and method64 (v0 : string, v1 : string) : unit =
    let v2 : bool = method65(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method35(v0)
        let v5 : string = ""
        let v6 : string = v4 |> Option.defaultValue v5 
        let v9 : bool = method33(v6)
        let v10 : bool = v9 = false
        if v10 then
            let v11 : System.IDisposable = method66(v6)
            ()
        (* run_target_args'
        let v12 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v13 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v13 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method90 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method92 () : string =
    let v0 : string = ""
    v0
and method93 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure37 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure36 () (v0 : char) : (UH0 -> UH0) =
    closure37(v0)
and method94 () : (char -> (UH0 -> UH0)) =
    closure36()
and method95 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v24 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v4
                let v20 : (string -> System.Text.StringBuilder) = v1.Append
                let v21 : System.Text.StringBuilder = v20 v17
                v1
        method95(v5, v24, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure38 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method96(v0, v4)
        let v6 : string = " "
        let v7 : string = v2 + v6 
        v5 v7
and method96 (v0 : int32, v1 : int32) : (string -> string) =
    closure38(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '"'
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method93(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method94()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method95(v53, v1, v2, v3)
            US18_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : int32 = 0
            let v116 : (string -> string) = method96(v114, v115)
            let v117 : string = ""
            let v118 : string = v116 v117
            let v119 : string = "^"
            let v120 : string = v118 + v119 
            let v121 : string = $"{v111}
{v120}
"
            US18_1(v121)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '''
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method93(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method94()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method95(v53, v1, v2, v3)
            US18_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : int32 = 0
            let v116 : (string -> string) = method96(v114, v115)
            let v117 : string = ""
            let v118 : string = v116 v117
            let v119 : string = "^"
            let v120 : string = v118 + v119 
            let v121 : string = $"{v111}
{v120}
"
            US18_1(v121)
and method97 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method97(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method98 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method98(v0, v17)
and method99 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v109 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US18_1(v17)
        else
            let v21 : char = v1.[int 0]
            let v22 : int64 = 0L
            let v23 : bool = method98(v21, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (string -> int32) = String.length
                let v26 : int32 = v25 v1
                let v29 : int32 = 1 |> int32 
                let v36 : int32 = v26 |> int32 
                let v43 : int32 = v36 - 1
                let v44 : string = v1.[int v29..int v43]
                let v48 : (char -> string) = _.ToString()
                let v49 : string = v48 v21
                let v52 : int32 = v49.Length
                let v53 : (char []) = Array.zeroCreate<char> (v52)
                let v54 : Mut5 = {l0 = 0} : Mut5
                while method93(v52, v54) do
                    let v56 : int32 = v54.l0
                    let v57 : char = v49.[int v56]
                    v53.[int v56] <- v57
                    let v58 : int32 = v56 + 1
                    v54.l0 <- v58
                    ()
                let v59 : char list = v53 |> Array.toList
                let v62 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v63 : (char -> (UH0 -> UH0)) = method94()
                let v64 : (char list -> (UH0 -> UH0)) = v62 v63
                let v65 : (UH0 -> UH0) = v64 v59
                let v66 : UH0 = UH0_0
                let v67 : UH0 = v65 v66
                let struct (v89 : System.Text.StringBuilder, v90 : int32, v91 : int32) = method95(v67, v2, v3, v4)
                US18_0(v21, v44, v89, v90, v91)
            else
                let v93 : char list = []
                let v94 : char list = ''' :: v93 
                let v97 : char list = '"' :: v94 
                let v100 : (char list -> (char [])) = List.toArray
                let v101 : (char []) = v100 v97
                let v104 : string = $"parsing.none_of / unexpected char: '{v21}' / chars: %A{v101} / s: %A{struct (v2, v3, v4)}"
                US18_1(v104)
    let v121 : US18 =
        match v109 with
        | US18_1(v118) -> (* Error *)
            US18_1(v118)
        | US18_0(v110, v111, v112, v113, v114) -> (* Ok *)
            let v115 : bool = '\\' = v110
            let v116 : char =
                if v115 then
                    '/'
                else
                    v110
            US18_0(v116, v111, v112, v113, v114)
    match v121 with
    | US18_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method99(v131, v123, v124, v125, v126)
and method100 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method100(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method101 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method101(v0, v21)
and method102 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v115 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method101(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method93(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method94()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method95(v70, v2, v3, v4)
                US18_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = ' ' :: v96 
                let v100 : char list = ''' :: v97 
                let v103 : char list = '"' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US18_1(v110)
    let v127 : US18 =
        match v115 with
        | US18_1(v124) -> (* Error *)
            US18_1(v124)
        | US18_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : bool = '\\' = v116
            let v122 : char =
                if v121 then
                    '/'
                else
                    v116
            US18_0(v122, v117, v118, v119, v120)
    match v127 with
    | US18_1(v143) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v128, v129, v130, v131, v132) -> (* Ok *)
        let v133 : (char -> string) = _.ToString()
        let v134 : string = v133 v128
        let v137 : string = v0 + v134 
        method102(v137, v129, v130, v131, v132)
and method103 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method103(v0, v6)
        else
            v1
and method104 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v79 : US18 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v6)
        else
            let v10 : char = v1.[int 0]
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v1
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v1.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v10
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method93(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method94()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method95(v53, v2, v3, v4)
            US18_0(v10, v30, v75, v76, v77)
    match v79 with
    | US18_1(v95) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v80, v81, v82, v83, v84) -> (* Ok *)
        let v85 : (char -> string) = _.ToString()
        let v86 : string = v85 v80
        let v89 : string = v0 + v86 
        method104(v89, v81, v82, v83, v84)
and method91 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method92()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v16 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure39()
    let v17 : UH1 = UH1_0
    let v18 : UH1 = UH1_1(v16, v17)
    let v19 : UH1 = UH1_1(v15, v18)
    let v20 : US18 = method97(v7, v12, v19)
    let v202 : US19 =
        match v20 with
        | US18_1(v199) -> (* Error *)
            US19_1(v199)
        | US18_0(v21, v22, v23, v24, v25) -> (* Ok *)
            let v26 : bool = "" = v22
            let v130 : US18 =
                if v26 then
                    let v27 : char list = []
                    let v28 : char list = ''' :: v27 
                    let v31 : char list = '"' :: v28 
                    let v34 : (char list -> (char [])) = List.toArray
                    let v35 : (char []) = v34 v31
                    let v38 : string = $"parsing.none_of / unexpected end of input / chars: %A{v35} / s: %A{struct (v23, v24, v25)}"
                    US18_1(v38)
                else
                    let v42 : char = v22.[int 0]
                    let v43 : int64 = 0L
                    let v44 : bool = method98(v42, v43)
                    let v45 : bool = v44 = false
                    if v45 then
                        let v46 : (string -> int32) = String.length
                        let v47 : int32 = v46 v22
                        let v50 : int32 = 1 |> int32 
                        let v57 : int32 = v47 |> int32 
                        let v64 : int32 = v57 - 1
                        let v65 : string = v22.[int v50..int v64]
                        let v69 : (char -> string) = _.ToString()
                        let v70 : string = v69 v42
                        let v73 : int32 = v70.Length
                        let v74 : (char []) = Array.zeroCreate<char> (v73)
                        let v75 : Mut5 = {l0 = 0} : Mut5
                        while method93(v73, v75) do
                            let v77 : int32 = v75.l0
                            let v78 : char = v70.[int v77]
                            v74.[int v77] <- v78
                            let v79 : int32 = v77 + 1
                            v75.l0 <- v79
                            ()
                        let v80 : char list = v74 |> Array.toList
                        let v83 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v84 : (char -> (UH0 -> UH0)) = method94()
                        let v85 : (char list -> (UH0 -> UH0)) = v83 v84
                        let v86 : (UH0 -> UH0) = v85 v80
                        let v87 : UH0 = UH0_0
                        let v88 : UH0 = v86 v87
                        let struct (v110 : System.Text.StringBuilder, v111 : int32, v112 : int32) = method95(v88, v23, v24, v25)
                        US18_0(v42, v65, v110, v111, v112)
                    else
                        let v114 : char list = []
                        let v115 : char list = ''' :: v114 
                        let v118 : char list = '"' :: v115 
                        let v121 : (char list -> (char [])) = List.toArray
                        let v122 : (char []) = v121 v118
                        let v125 : string = $"parsing.none_of / unexpected char: '{v42}' / chars: %A{v122} / s: %A{struct (v23, v24, v25)}"
                        US18_1(v125)
            let v142 : US18 =
                match v130 with
                | US18_1(v139) -> (* Error *)
                    US18_1(v139)
                | US18_0(v131, v132, v133, v134, v135) -> (* Ok *)
                    let v136 : bool = '\\' = v131
                    let v137 : char =
                        if v136 then
                            '/'
                        else
                            v131
                    US18_0(v137, v132, v133, v134, v135)
            let v161 : US19 =
                match v142 with
                | US18_1(v158) -> (* Error *)
                    US19_1(v158)
                | US18_0(v143, v144, v145, v146, v147) -> (* Ok *)
                    let v148 : (char -> string) = _.ToString()
                    let v149 : string = v148 v143
                    let struct (v152 : string, v153 : string, v154 : System.Text.StringBuilder, v155 : int32, v156 : int32) = method99(v149, v144, v145, v146, v147)
                    US19_0(v152, v153, v154, v155, v156)
            let v171 : US19 =
                match v161 with
                | US19_1(v168) -> (* Error *)
                    US19_0(v6, v22, v23, v24, v25)
                | US19_0(v162, v163, v164, v165, v166) -> (* Ok *)
                    US19_0(v162, v163, v164, v165, v166)
            match v171 with
            | US19_1(v194) -> (* Error *)
                let v195 : string = "parsing.between / expected content"
                US19_1(v195)
            | US19_0(v172, v173, v174, v175, v176) -> (* Ok *)
                let v177 : UH1 = UH1_0
                let v178 : UH1 = UH1_1(v16, v177)
                let v179 : UH1 = UH1_1(v15, v178)
                let v180 : US18 = method100(v173, v174, v175, v176, v179)
                match v180 with
                | US18_1(v187) -> (* Error *)
                    let v188 : string = $"parsing.between / expected closing delimiter / e: %A{v187} / input: %A{struct (v7, v12, 1, 1)} / rest1: %A{struct (v22, v23, v24, v25)} / rest2: %A{struct (v173, v174, v175, v176)}"
                    US19_1(v188)
                | US18_0(v181, v182, v183, v184, v185) -> (* Ok *)
                    US19_0(v172, v182, v183, v184, v185)
    let v414 : US19 =
        match v202 with
        | US19_1(v208) -> (* Error *)
            let v209 : bool = "" = v7
            let v321 : US18 =
                if v209 then
                    let v210 : char list = []
                    let v211 : char list = ' ' :: v210 
                    let v214 : char list = ''' :: v211 
                    let v217 : char list = '"' :: v214 
                    let v220 : (char list -> (char [])) = List.toArray
                    let v221 : (char []) = v220 v217
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v221} / s: %A{struct (v12, 1, 1)}"
                    US18_1(v224)
                else
                    let v228 : char = v7.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method101(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v232 : (string -> int32) = String.length
                        let v233 : int32 = v232 v7
                        let v236 : int32 = 1 |> int32 
                        let v243 : int32 = v233 |> int32 
                        let v250 : int32 = v243 - 1
                        let v251 : string = v7.[int v236..int v250]
                        let v255 : (char -> string) = _.ToString()
                        let v256 : string = v255 v228
                        let v259 : int32 = v256.Length
                        let v260 : (char []) = Array.zeroCreate<char> (v259)
                        let v261 : Mut5 = {l0 = 0} : Mut5
                        while method93(v259, v261) do
                            let v263 : int32 = v261.l0
                            let v264 : char = v256.[int v263]
                            v260.[int v263] <- v264
                            let v265 : int32 = v263 + 1
                            v261.l0 <- v265
                            ()
                        let v266 : char list = v260 |> Array.toList
                        let v269 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v270 : (char -> (UH0 -> UH0)) = method94()
                        let v271 : (char list -> (UH0 -> UH0)) = v269 v270
                        let v272 : (UH0 -> UH0) = v271 v266
                        let v273 : UH0 = UH0_0
                        let v274 : UH0 = v272 v273
                        let v296 : int32 = 1
                        let v297 : int32 = 1
                        let struct (v298 : System.Text.StringBuilder, v299 : int32, v300 : int32) = method95(v274, v12, v296, v297)
                        US18_0(v228, v251, v298, v299, v300)
                    else
                        let v302 : char list = []
                        let v303 : char list = ' ' :: v302 
                        let v306 : char list = ''' :: v303 
                        let v309 : char list = '"' :: v306 
                        let v312 : (char list -> (char [])) = List.toArray
                        let v313 : (char []) = v312 v309
                        let v316 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v313} / s: %A{struct (v12, 1, 1)}"
                        US18_1(v316)
            let v333 : US18 =
                match v321 with
                | US18_1(v330) -> (* Error *)
                    US18_1(v330)
                | US18_0(v322, v323, v324, v325, v326) -> (* Ok *)
                    let v327 : bool = '\\' = v322
                    let v328 : char =
                        if v327 then
                            '/'
                        else
                            v322
                    US18_0(v328, v323, v324, v325, v326)
            let v352 : US19 =
                match v333 with
                | US18_1(v349) -> (* Error *)
                    US19_1(v349)
                | US18_0(v334, v335, v336, v337, v338) -> (* Ok *)
                    let v339 : (char -> string) = _.ToString()
                    let v340 : string = v339 v334
                    let struct (v343 : string, v344 : string, v345 : System.Text.StringBuilder, v346 : int32, v347 : int32) = method102(v340, v335, v336, v337, v338)
                    US19_0(v343, v344, v345, v346, v347)
            match v352 with
            | US19_1(v358) -> (* Error *)
                let v359 : int32 = v7.Length
                let v360 : bool = v359 = 0
                let v366 : US21 =
                    if v360 then
                        US21_0(v7, v12, 1, 1)
                    else
                        let v362 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US21_1(v362)
                let v375 : US19 =
                    match v366 with
                    | US21_1(v372) -> (* Error *)
                        US19_1(v372)
                    | US21_0(v367, v368, v369, v370) -> (* Ok *)
                        US19_0(v6, v367, v368, v369, v370)
                match v375 with
                | US19_1(v407) -> (* Error *)
                    US19_1(v407)
                | US19_0(v376, v377, v378, v379, v380) -> (* Ok *)
                    let v381 : int32 = 0
                    let v382 : int32 = method103(v377, v381)
                    let v383 : (string -> int32) = String.length
                    let v384 : int32 = v383 v377
                    let v387 : int32 = v382 |> int32 
                    let v394 : int32 = v384 |> int32 
                    let v401 : int32 = v394 - 1
                    let v402 : string = v377.[int v387..int v401]
                    US19_0(v376, v402, v378, v379, v380)
            | US19_0(v353, v354, v355, v356, v357) -> (* Ok *)
                v352
        | US19_0(v203, v204, v205, v206, v207) -> (* Ok *)
            v202
    let v682 : US22 =
        match v414 with
        | US19_1(v679) -> (* Error *)
            US22_1(v679)
        | US19_0(v415, v416, v417, v418, v419) -> (* Ok *)
            let v420 : bool = "" = v416
            let v541 : US18 =
                if v420 then
                    let v421 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v417, v418, v419)}"
                    US18_1(v421)
                else
                    let v425 : char = v416.[int 0]
                    let v426 : bool = v425 = ' '
                    if v426 then
                        let v427 : (string -> int32) = String.length
                        let v428 : int32 = v427 v416
                        let v431 : int32 = 1 |> int32 
                        let v438 : int32 = v428 |> int32 
                        let v445 : int32 = v438 - 1
                        let v446 : string = v416.[int v431..int v445]
                        let v450 : (char -> string) = _.ToString()
                        let v451 : string = v450 v425
                        let v454 : int32 = v451.Length
                        let v455 : (char []) = Array.zeroCreate<char> (v454)
                        let v456 : Mut5 = {l0 = 0} : Mut5
                        while method93(v454, v456) do
                            let v458 : int32 = v456.l0
                            let v459 : char = v451.[int v458]
                            v455.[int v458] <- v459
                            let v460 : int32 = v458 + 1
                            v456.l0 <- v460
                            ()
                        let v461 : char list = v455 |> Array.toList
                        let v464 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v465 : (char -> (UH0 -> UH0)) = method94()
                        let v466 : (char list -> (UH0 -> UH0)) = v464 v465
                        let v467 : (UH0 -> UH0) = v466 v461
                        let v468 : UH0 = UH0_0
                        let v469 : UH0 = v467 v468
                        let struct (v491 : System.Text.StringBuilder, v492 : int32, v493 : int32) = method95(v469, v417, v418, v419)
                        US18_0(v425, v446, v491, v492, v493)
                    else
                        let v495 : string = "\n"
                        let v496 : int32 = v416.IndexOf v495 
                        let v499 : int32 = v496 - 1
                        let v500 : bool = -2 = v499
                        let v507 : int32 =
                            if v500 then
                                let v501 : (string -> int32) = String.length
                                let v502 : int32 = v501 v416
                                let v505 : int32 = v502 + 1
                                v505
                            else
                                let v506 : int32 = v499 + 1
                                v506
                        let v508 : int32 = 0 |> int32 
                        let v515 : int32 = v507 |> int32 
                        let v522 : int32 = v515 - 1
                        let v523 : string = v416.[int v508..int v522]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v418} / col: {v419}
{v417}{v523}"
                        let v530 : int32 = v419 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method96(v530, v531)
                        let v533 : string = v532 v6
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v536 : string = $"{v527}
{v535}
"
                        US18_1(v536)
            let v553 : US23 =
                match v541 with
                | US18_1(v549) -> (* Error *)
                    let v550 : US20 = US20_1
                    US23_0(v550, v416, v417, v418, v419)
                | US18_0(v542, v543, v544, v545, v546) -> (* Ok *)
                    let v547 : US20 = US20_0(v542)
                    US23_0(v547, v543, v544, v545, v546)
            let v656 : US19 =
                match v553 with
                | US23_1(v653) -> (* Error *)
                    US19_1(v653)
                | US23_0(v554, v555, v556, v557, v558) -> (* Ok *)
                    let v559 : bool = "" = v555
                    let v633 : US18 =
                        if v559 then
                            let v560 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v556, v557, v558)}"
                            US18_1(v560)
                        else
                            let v564 : char = v555.[int 0]
                            let v565 : (string -> int32) = String.length
                            let v566 : int32 = v565 v555
                            let v569 : int32 = 1 |> int32 
                            let v576 : int32 = v566 |> int32 
                            let v583 : int32 = v576 - 1
                            let v584 : string = v555.[int v569..int v583]
                            let v588 : (char -> string) = _.ToString()
                            let v589 : string = v588 v564
                            let v592 : int32 = v589.Length
                            let v593 : (char []) = Array.zeroCreate<char> (v592)
                            let v594 : Mut5 = {l0 = 0} : Mut5
                            while method93(v592, v594) do
                                let v596 : int32 = v594.l0
                                let v597 : char = v589.[int v596]
                                v593.[int v596] <- v597
                                let v598 : int32 = v596 + 1
                                v594.l0 <- v598
                                ()
                            let v599 : char list = v593 |> Array.toList
                            let v602 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v603 : (char -> (UH0 -> UH0)) = method94()
                            let v604 : (char list -> (UH0 -> UH0)) = v602 v603
                            let v605 : (UH0 -> UH0) = v604 v599
                            let v606 : UH0 = UH0_0
                            let v607 : UH0 = v605 v606
                            let struct (v629 : System.Text.StringBuilder, v630 : int32, v631 : int32) = method95(v607, v556, v557, v558)
                            US18_0(v564, v584, v629, v630, v631)
                    match v633 with
                    | US18_1(v649) -> (* Error *)
                        US19_1(v649)
                    | US18_0(v634, v635, v636, v637, v638) -> (* Ok *)
                        let v639 : (char -> string) = _.ToString()
                        let v640 : string = v639 v634
                        let struct (v643 : string, v644 : string, v645 : System.Text.StringBuilder, v646 : int32, v647 : int32) = method104(v640, v635, v636, v637, v638)
                        US19_0(v643, v644, v645, v646, v647)
            let v668 : US24 =
                match v656 with
                | US19_1(v664) -> (* Error *)
                    let v665 : US5 = US5_1
                    US24_0(v665, v416, v417, v418, v419)
                | US19_0(v657, v658, v659, v660, v661) -> (* Ok *)
                    let v662 : US5 = US5_0(v657)
                    US24_0(v662, v658, v659, v660, v661)
            match v668 with
            | US24_1(v675) -> (* Error *)
                US22_1(v675)
            | US24_0(v669, v670, v671, v672, v673) -> (* Ok *)
                US22_0(v415, v669, v670, v671, v672, v673)
    match v682 with
    | US22_1(v690) -> (* Error *)
        US17_1(v690)
    | US22_0(v683, v684, v685, v686, v687, v688) -> (* Ok *)
        US17_0(v683, v684)
and method107 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method107(v0, v25)
and method108 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v121 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US18_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method107(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method93(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method94()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method95(v73, v2, v3, v4)
                US18_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US18_1(v116)
    match v121 with
    | US18_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method108(v131, v123, v124, v125, v126)
and method110 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method110(v0, v21)
and closure40 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v126 : US18 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '\\'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method93(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method94()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method95(v53, v1, v2, v3)
                US18_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : int32 = 0
                let v116 : (string -> string) = method96(v114, v115)
                let v117 : string = ""
                let v118 : string = v116 v117
                let v119 : string = "^"
                let v120 : string = v118 + v119 
                let v121 : string = $"{v111}
{v120}
"
                US18_1(v121)
    let v210 : US18 =
        match v126 with
        | US18_1(v207) -> (* Error *)
            US18_1(v207)
        | US18_0(v127, v128, v129, v130, v131) -> (* Ok *)
            let v132 : bool = "" = v128
            if v132 then
                let v133 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v129, v130, v131)}"
                US18_1(v133)
            else
                let v137 : char = v128.[int 0]
                let v138 : (string -> int32) = String.length
                let v139 : int32 = v138 v128
                let v142 : int32 = 1 |> int32 
                let v149 : int32 = v139 |> int32 
                let v156 : int32 = v149 - 1
                let v157 : string = v128.[int v142..int v156]
                let v161 : (char -> string) = _.ToString()
                let v162 : string = v161 v137
                let v165 : int32 = v162.Length
                let v166 : (char []) = Array.zeroCreate<char> (v165)
                let v167 : Mut5 = {l0 = 0} : Mut5
                while method93(v165, v167) do
                    let v169 : int32 = v167.l0
                    let v170 : char = v162.[int v169]
                    v166.[int v169] <- v170
                    let v171 : int32 = v169 + 1
                    v167.l0 <- v171
                    ()
                let v172 : char list = v166 |> Array.toList
                let v175 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v176 : (char -> (UH0 -> UH0)) = method94()
                let v177 : (char list -> (UH0 -> UH0)) = v175 v176
                let v178 : (UH0 -> UH0) = v177 v172
                let v179 : UH0 = UH0_0
                let v180 : UH0 = v178 v179
                let struct (v202 : System.Text.StringBuilder, v203 : int32, v204 : int32) = method95(v180, v129, v130, v131)
                US18_0(v137, v157, v202, v203, v204)
    match v210 with
    | US18_1(v226) -> (* Error *)
        US19_1(v226)
    | US18_0(v211, v212, v213, v214, v215) -> (* Ok *)
        let v216 : (char -> string) = _.ToString()
        let v217 : string = v216 '\\'
        let v220 : (char -> string) = _.ToString()
        let v221 : string = v220 v211
        let v224 : string = v217 + v221 
        US19_0(v224, v212, v213, v214, v215)
and closure41 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v126 : US18 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '`'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method93(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method94()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method95(v53, v1, v2, v3)
                US18_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : int32 = 0
                let v116 : (string -> string) = method96(v114, v115)
                let v117 : string = ""
                let v118 : string = v116 v117
                let v119 : string = "^"
                let v120 : string = v118 + v119 
                let v121 : string = $"{v111}
{v120}
"
                US18_1(v121)
    let v210 : US18 =
        match v126 with
        | US18_1(v207) -> (* Error *)
            US18_1(v207)
        | US18_0(v127, v128, v129, v130, v131) -> (* Ok *)
            let v132 : bool = "" = v128
            if v132 then
                let v133 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v129, v130, v131)}"
                US18_1(v133)
            else
                let v137 : char = v128.[int 0]
                let v138 : (string -> int32) = String.length
                let v139 : int32 = v138 v128
                let v142 : int32 = 1 |> int32 
                let v149 : int32 = v139 |> int32 
                let v156 : int32 = v149 - 1
                let v157 : string = v128.[int v142..int v156]
                let v161 : (char -> string) = _.ToString()
                let v162 : string = v161 v137
                let v165 : int32 = v162.Length
                let v166 : (char []) = Array.zeroCreate<char> (v165)
                let v167 : Mut5 = {l0 = 0} : Mut5
                while method93(v165, v167) do
                    let v169 : int32 = v167.l0
                    let v170 : char = v162.[int v169]
                    v166.[int v169] <- v170
                    let v171 : int32 = v169 + 1
                    v167.l0 <- v171
                    ()
                let v172 : char list = v166 |> Array.toList
                let v175 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v176 : (char -> (UH0 -> UH0)) = method94()
                let v177 : (char list -> (UH0 -> UH0)) = v175 v176
                let v178 : (UH0 -> UH0) = v177 v172
                let v179 : UH0 = UH0_0
                let v180 : UH0 = v178 v179
                let struct (v202 : System.Text.StringBuilder, v203 : int32, v204 : int32) = method95(v180, v129, v130, v131)
                US18_0(v137, v157, v202, v203, v204)
    match v210 with
    | US18_1(v226) -> (* Error *)
        US19_1(v226)
    | US18_0(v211, v212, v213, v214, v215) -> (* Ok *)
        let v216 : (char -> string) = _.ToString()
        let v217 : string = v216 '`'
        let v220 : (char -> string) = _.ToString()
        let v221 : string = v220 v211
        let v224 : string = v217 + v221 
        US19_0(v224, v212, v213, v214, v215)
and method111 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method111(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method112 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method112(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method109 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v115 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method110(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method93(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method94()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method95(v70, v2, v3, v4)
                US18_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US18_1(v110)
    let v129 : US19 =
        match v115 with
        | US18_1(v126) -> (* Error *)
            US19_1(v126)
        | US18_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US19_0(v122, v117, v118, v119, v120)
    let v143 : US19 =
        match v129 with
        | US19_1(v135) -> (* Error *)
            let v136 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure40()
            let v137 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure41()
            let v138 : UH3 = UH3_0
            let v139 : UH3 = UH3_1(v137, v138)
            let v140 : UH3 = UH3_1(v136, v139)
            method111(v1, v2, v3, v4, v140)
        | US19_0(v130, v131, v132, v133, v134) -> (* Ok *)
            v129
    match v143 with
    | US19_1(v151) -> (* Error *)
        let v152 : UH2 = UH2_0
        let v153 : UH2 = method112(v0, v152)
        US26_0(v153, v1, v2, v3, v4)
    | US19_0(v144, v145, v146, v147, v148) -> (* Ok *)
        let v149 : UH2 = UH2_1(v144, v0)
        method109(v149, v145, v146, v147, v148)
and method113 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method113(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method114 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v115 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method110(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method93(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method94()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method95(v70, v2, v3, v4)
                US18_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US18_1(v110)
    let v129 : US19 =
        match v115 with
        | US18_1(v126) -> (* Error *)
            US19_1(v126)
        | US18_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US19_0(v122, v117, v118, v119, v120)
    match v129 with
    | US19_1(v137) -> (* Error *)
        let v138 : UH2 = UH2_0
        let v139 : UH2 = method112(v0, v138)
        US26_0(v139, v1, v2, v3, v4)
    | US19_0(v130, v131, v132, v133, v134) -> (* Ok *)
        let v135 : UH2 = UH2_1(v130, v0)
        method114(v135, v131, v132, v133, v134)
and method106 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v121 : US18 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US18_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method107(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method93(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method94()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method95(v73, v2, v3, v4)
                US18_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US18_1(v116)
    let v140 : US19 =
        match v121 with
        | US18_1(v137) -> (* Error *)
            US19_1(v137)
        | US18_0(v122, v123, v124, v125, v126) -> (* Ok *)
            let v127 : (char -> string) = _.ToString()
            let v128 : string = v127 v122
            let struct (v131 : string, v132 : string, v133 : System.Text.StringBuilder, v134 : int32, v135 : int32) = method108(v128, v123, v124, v125, v126)
            US19_0(v131, v132, v133, v134, v135)
    let v517 : US19 =
        match v140 with
        | US19_1(v146) -> (* Error *)
            let v268 : US18 =
                if v5 then
                    let v147 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v147)
                else
                    let v151 : char = v1.[int 0]
                    let v152 : bool = v151 = '"'
                    if v152 then
                        let v153 : (string -> int32) = String.length
                        let v154 : int32 = v153 v1
                        let v157 : int32 = 1 |> int32 
                        let v164 : int32 = v154 |> int32 
                        let v171 : int32 = v164 - 1
                        let v172 : string = v1.[int v157..int v171]
                        let v176 : (char -> string) = _.ToString()
                        let v177 : string = v176 v151
                        let v180 : int32 = v177.Length
                        let v181 : (char []) = Array.zeroCreate<char> (v180)
                        let v182 : Mut5 = {l0 = 0} : Mut5
                        while method93(v180, v182) do
                            let v184 : int32 = v182.l0
                            let v185 : char = v177.[int v184]
                            v181.[int v184] <- v185
                            let v186 : int32 = v184 + 1
                            v182.l0 <- v186
                            ()
                        let v187 : char list = v181 |> Array.toList
                        let v190 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v191 : (char -> (UH0 -> UH0)) = method94()
                        let v192 : (char list -> (UH0 -> UH0)) = v190 v191
                        let v193 : (UH0 -> UH0) = v192 v187
                        let v194 : UH0 = UH0_0
                        let v195 : UH0 = v193 v194
                        let struct (v217 : System.Text.StringBuilder, v218 : int32, v219 : int32) = method95(v195, v2, v3, v4)
                        US18_0(v151, v172, v217, v218, v219)
                    else
                        let v221 : string = "\n"
                        let v222 : int32 = v1.IndexOf v221 
                        let v225 : int32 = v222 - 1
                        let v226 : bool = -2 = v225
                        let v233 : int32 =
                            if v226 then
                                let v227 : (string -> int32) = String.length
                                let v228 : int32 = v227 v1
                                let v231 : int32 = v228 + 1
                                v231
                            else
                                let v232 : int32 = v225 + 1
                                v232
                        let v234 : int32 = 0 |> int32 
                        let v241 : int32 = v233 |> int32 
                        let v248 : int32 = v241 - 1
                        let v249 : string = v1.[int v234..int v248]
                        let v253 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v249}"
                        let v256 : int32 = v4 - 1
                        let v257 : int32 = 0
                        let v258 : (string -> string) = method96(v256, v257)
                        let v259 : string = ""
                        let v260 : string = v258 v259
                        let v261 : string = "^"
                        let v262 : string = v260 + v261 
                        let v263 : string = $"{v253}
{v262}
"
                        US18_1(v263)
            let v452 : US19 =
                match v268 with
                | US18_1(v449) -> (* Error *)
                    US19_1(v449)
                | US18_0(v269, v270, v271, v272, v273) -> (* Ok *)
                    let v274 : UH2 = UH2_0
                    let v275 : US26 = method109(v274, v270, v271, v272, v273)
                    let v302 : US19 =
                        match v275 with
                        | US26_1(v299) -> (* Error *)
                            US19_1(v299)
                        | US26_0(v276, v277, v278, v279, v280) -> (* Ok *)
                            let v281 : string list = []
                            let v282 : string list = method113(v276, v281)
                            let v283 : unit = ()
                            let _let'_v283 =
                                seq {
                                    yield! v282 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v286 : string seq = _let'_v283 
                            let v292 : (string -> (string seq -> string)) = String.concat
                            let v293 : string = ""
                            let v294 : (string seq -> string) = v292 v293
                            let v295 : string = v294 v286
                            US19_0(v295, v277, v278, v279, v280)
                    match v302 with
                    | US19_1(v444) -> (* Error *)
                        let v445 : string = "parsing.between / expected content"
                        US19_1(v445)
                    | US19_0(v303, v304, v305, v306, v307) -> (* Ok *)
                        let v308 : bool = "" = v304
                        let v430 : US18 =
                            if v308 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v305, v306, v307)}"
                                US18_1(v309)
                            else
                                let v313 : char = v304.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v315 : (string -> int32) = String.length
                                    let v316 : int32 = v315 v304
                                    let v319 : int32 = 1 |> int32 
                                    let v326 : int32 = v316 |> int32 
                                    let v333 : int32 = v326 - 1
                                    let v334 : string = v304.[int v319..int v333]
                                    let v338 : (char -> string) = _.ToString()
                                    let v339 : string = v338 v313
                                    let v342 : int32 = v339.Length
                                    let v343 : (char []) = Array.zeroCreate<char> (v342)
                                    let v344 : Mut5 = {l0 = 0} : Mut5
                                    while method93(v342, v344) do
                                        let v346 : int32 = v344.l0
                                        let v347 : char = v339.[int v346]
                                        v343.[int v346] <- v347
                                        let v348 : int32 = v346 + 1
                                        v344.l0 <- v348
                                        ()
                                    let v349 : char list = v343 |> Array.toList
                                    let v352 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v353 : (char -> (UH0 -> UH0)) = method94()
                                    let v354 : (char list -> (UH0 -> UH0)) = v352 v353
                                    let v355 : (UH0 -> UH0) = v354 v349
                                    let v356 : UH0 = UH0_0
                                    let v357 : UH0 = v355 v356
                                    let struct (v379 : System.Text.StringBuilder, v380 : int32, v381 : int32) = method95(v357, v305, v306, v307)
                                    US18_0(v313, v334, v379, v380, v381)
                                else
                                    let v383 : string = "\n"
                                    let v384 : int32 = v304.IndexOf v383 
                                    let v387 : int32 = v384 - 1
                                    let v388 : bool = -2 = v387
                                    let v395 : int32 =
                                        if v388 then
                                            let v389 : (string -> int32) = String.length
                                            let v390 : int32 = v389 v304
                                            let v393 : int32 = v390 + 1
                                            v393
                                        else
                                            let v394 : int32 = v387 + 1
                                            v394
                                    let v396 : int32 = 0 |> int32 
                                    let v403 : int32 = v395 |> int32 
                                    let v410 : int32 = v403 - 1
                                    let v411 : string = v304.[int v396..int v410]
                                    let v415 : string = $"parsing.p_char / expected: '{'"'}' / line: {v306} / col: {v307}
{v305}{v411}"
                                    let v418 : int32 = v307 - 1
                                    let v419 : int32 = 0
                                    let v420 : (string -> string) = method96(v418, v419)
                                    let v421 : string = ""
                                    let v422 : string = v420 v421
                                    let v423 : string = "^"
                                    let v424 : string = v422 + v423 
                                    let v425 : string = $"{v415}
{v424}
"
                                    US18_1(v425)
                        match v430 with
                        | US18_1(v437) -> (* Error *)
                            let v438 : string = $"parsing.between / expected closing delimiter / e: %A{v437} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v270, v271, v272, v273)} / rest2: %A{struct (v304, v305, v306, v307)}"
                            US19_1(v438)
                        | US18_0(v431, v432, v433, v434, v435) -> (* Ok *)
                            US19_0(v303, v432, v433, v434, v435)
            match v452 with
            | US19_1(v458) -> (* Error *)
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure40()
                let v460 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure41()
                let v461 : UH3 = UH3_0
                let v462 : UH3 = UH3_1(v460, v461)
                let v463 : UH3 = UH3_1(v459, v462)
                let v464 : US19 = method111(v1, v2, v3, v4, v463)
                let v475 : US19 =
                    match v464 with
                    | US19_1(v472) -> (* Error *)
                        US19_1(v472)
                    | US19_0(v465, v466, v467, v468, v469) -> (* Ok *)
                        let v470 : string = ""
                        US19_0(v470, v466, v467, v468, v469)
                let v486 : US26 =
                    match v475 with
                    | US19_1(v483) -> (* Error *)
                        US26_1(v483)
                    | US19_0(v476, v477, v478, v479, v480) -> (* Ok *)
                        let v481 : UH2 = UH2_0
                        method114(v481, v477, v478, v479, v480)
                match v486 with
                | US26_1(v510) -> (* Error *)
                    US19_1(v510)
                | US26_0(v487, v488, v489, v490, v491) -> (* Ok *)
                    let v492 : string list = []
                    let v493 : string list = method113(v487, v492)
                    let v494 : unit = ()
                    let _let'_v494 =
                        seq {
                            yield! v493 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v497 : string seq = _let'_v494 
                    let v503 : (string -> (string seq -> string)) = String.concat
                    let v504 : string = ""
                    let v505 : (string seq -> string) = v503 v504
                    let v506 : string = v505 v497
                    US19_0(v506, v488, v489, v490, v491)
            | US19_0(v453, v454, v455, v456, v457) -> (* Ok *)
                v452
        | US19_0(v141, v142, v143, v144, v145) -> (* Ok *)
            v140
    match v517 with
    | US19_1(v566) -> (* Error *)
        let v567 : UH2 = UH2_0
        let v568 : UH2 = method112(v0, v567)
        US26_0(v568, v1, v2, v3, v4)
    | US19_0(v518, v519, v520, v521, v522) -> (* Ok *)
        let v523 : int32 = 0
        let v524 : int32 = method103(v519, v523)
        let v525 : bool = 0 = v524
        let v552 : US21 =
            if v525 then
                let v526 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v526)
            else
                let v528 : (string -> int32) = String.length
                let v529 : int32 = v528 v519
                let v532 : int32 = v524 |> int32 
                let v539 : int32 = v529 |> int32 
                let v546 : int32 = v539 - 1
                let v547 : string = v519.[int v532..int v546]
                US21_0(v547, v520, v521, v522)
        match v552 with
        | US21_1(v559) -> (* Error *)
            let v560 : UH2 = UH2_0
            let v561 : UH2 = UH2_1(v518, v560)
            let v562 : UH2 = method112(v0, v561)
            US26_0(v562, v519, v520, v521, v522)
        | US21_0(v553, v554, v555, v556) -> (* Ok *)
            let v557 : UH2 = UH2_1(v518, v0)
            method106(v557, v553, v554, v555, v556)
and method105 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method92()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : UH2 = UH2_0
    let v16 : int32 = 1
    let v17 : int32 = 1
    let v18 : US26 = method106(v15, v7, v12, v16, v17)
    match v18 with
    | US26_1(v31) -> (* Error *)
        US25_1(v31)
    | US26_0(v19, v20, v21, v22, v23) -> (* Ok *)
        let v24 : string list = []
        let v25 : string list = method113(v19, v24)
        let v26 : (string list -> (string [])) = List.toArray
        let v27 : (string []) = v26 v25
        US25_0(v27)
and method116 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"{v1}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v10, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = $"{v46}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v88 : string = "options"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v29}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v11}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v29}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v10, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v10, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v46}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v10, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cancellation_token"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v10, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v29}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v10, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    (* run_target_args'
    let v163 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v164 : string = "format!(\"{:#?}\", $0)"
    let v165 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v164 
    let v166 : string = "fable_library_rust::String_::fromString($0)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let _run_target_args'_v163 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : string = "format!(\"{:#?}\", $0)"
    let v169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v168 
    let v170 : string = "fable_library_rust::String_::fromString($0)"
    let v171 : string = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let _run_target_args'_v163 = v171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v172 : string = "format!(\"{:#?}\", $0)"
    let v173 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v172 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let _run_target_args'_v163 = v175 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v176 : string = $"%A{v3}"
    let _run_target_args'_v163 = v176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v179 : string = $"%A{v3}"
    let _run_target_args'_v163 = v179 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _run_target_args'_v163 = v182 
    #endif
#else
    let v185 : string = $"%A{v3}"
    let _run_target_args'_v163 = v185 
    #endif
    let v188 : string = _run_target_args'_v163 
    let v193 : string = $"{v188}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v10, v193)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v10, v201)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v209 : string = "environment_variables"
    let v210 : string = $"{v209}"
    let v213 : unit = ()
    let v214 : (unit -> unit) = closure7(v10, v210)
    let v215 : unit = (fun () -> v214 (); v213) ()
    let v218 : string = $"{v29}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v10, v218)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v226 : string = $"%A{v4}"
    let v229 : string = $"{v226}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v237 : string = $"{v46}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v10, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v245 : string = "on_line"
    let v246 : string = $"{v245}"
    let v249 : unit = ()
    let v250 : (unit -> unit) = closure7(v10, v246)
    let v251 : unit = (fun () -> v250 (); v249) ()
    let v254 : string = $"{v29}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v10, v254)
    let v259 : unit = (fun () -> v258 (); v257) ()
    (* run_target_args'
    let v262 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v263 : string = "format!(\"{:#?}\", $0)"
    let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v263 
    let v265 : string = "fable_library_rust::String_::fromString($0)"
    let v266 : string = Fable.Core.RustInterop.emitRustExpr v264 v265 
    let _run_target_args'_v262 = v266 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v267 : string = "format!(\"{:#?}\", $0)"
    let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v267 
    let v269 : string = "fable_library_rust::String_::fromString($0)"
    let v270 : string = Fable.Core.RustInterop.emitRustExpr v268 v269 
    let _run_target_args'_v262 = v270 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = "format!(\"{:#?}\", $0)"
    let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v271 
    let v273 : string = "fable_library_rust::String_::fromString($0)"
    let v274 : string = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let _run_target_args'_v262 = v274 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v275 : string = $"%A{v5}"
    let _run_target_args'_v262 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v278 : string = $"%A{v5}"
    let _run_target_args'_v262 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _run_target_args'_v262 = v281 
    #endif
#else
    let v284 : string = $"%A{v5}"
    let _run_target_args'_v262 = v284 
    #endif
    let v287 : string = _run_target_args'_v262 
    let v292 : string = $"{v287}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v10, v292)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v300 : string = $"{v46}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v308 : string = "stdin"
    let v309 : string = $"{v308}"
    let v312 : unit = ()
    let v313 : (unit -> unit) = closure7(v10, v309)
    let v314 : unit = (fun () -> v313 (); v312) ()
    let v317 : string = $"{v29}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v10, v317)
    let v322 : unit = (fun () -> v321 (); v320) ()
    (* run_target_args'
    let v325 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v326 : string = "format!(\"{:#?}\", $0)"
    let v327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v326 
    let v328 : string = "fable_library_rust::String_::fromString($0)"
    let v329 : string = Fable.Core.RustInterop.emitRustExpr v327 v328 
    let _run_target_args'_v325 = v329 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v330 : string = "format!(\"{:#?}\", $0)"
    let v331 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v330 
    let v332 : string = "fable_library_rust::String_::fromString($0)"
    let v333 : string = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let _run_target_args'_v325 = v333 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v334 : string = "format!(\"{:#?}\", $0)"
    let v335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v334 
    let v336 : string = "fable_library_rust::String_::fromString($0)"
    let v337 : string = Fable.Core.RustInterop.emitRustExpr v335 v336 
    let _run_target_args'_v325 = v337 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v338 : string = $"%A{v6}"
    let _run_target_args'_v325 = v338 
    #endif
#if FABLE_COMPILER_PYTHON
    let v341 : string = $"%A{v6}"
    let _run_target_args'_v325 = v341 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _run_target_args'_v325 = v344 
    #endif
#else
    let v347 : string = $"%A{v6}"
    let _run_target_args'_v325 = v347 
    #endif
    let v350 : string = _run_target_args'_v325 
    let v355 : string = $"{v350}"
    let v358 : unit = ()
    let v359 : (unit -> unit) = closure7(v10, v355)
    let v360 : unit = (fun () -> v359 (); v358) ()
    let v363 : string = $"{v46}"
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure7(v10, v363)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v371 : string = "trace"
    let v372 : string = $"{v371}"
    let v375 : unit = ()
    let v376 : (unit -> unit) = closure7(v10, v372)
    let v377 : unit = (fun () -> v376 (); v375) ()
    let v380 : string = $"{v29}"
    let v383 : unit = ()
    let v384 : (unit -> unit) = closure7(v10, v380)
    let v385 : unit = (fun () -> v384 (); v383) ()
    let v390 : string =
        if v7 then
            let v388 : string = "true"
            v388
        else
            let v389 : string = "false"
            v389
    let v391 : string = $"{v390}"
    let v394 : unit = ()
    let v395 : (unit -> unit) = closure7(v10, v391)
    let v396 : unit = (fun () -> v395 (); v394) ()
    let v399 : string = $"{v46}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v10, v399)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v407 : string = "working_directory"
    let v408 : string = $"{v407}"
    let v411 : unit = ()
    let v412 : (unit -> unit) = closure7(v10, v408)
    let v413 : unit = (fun () -> v412 (); v411) ()
    let v416 : string = $"{v29}"
    let v419 : unit = ()
    let v420 : (unit -> unit) = closure7(v10, v416)
    let v421 : unit = (fun () -> v420 (); v419) ()
    (* run_target_args'
    let v424 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v425 : string = "format!(\"{:#?}\", $0)"
    let v426 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v425 
    let v427 : string = "fable_library_rust::String_::fromString($0)"
    let v428 : string = Fable.Core.RustInterop.emitRustExpr v426 v427 
    let _run_target_args'_v424 = v428 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : string = "format!(\"{:#?}\", $0)"
    let v430 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v429 
    let v431 : string = "fable_library_rust::String_::fromString($0)"
    let v432 : string = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let _run_target_args'_v424 = v432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v433 : string = "format!(\"{:#?}\", $0)"
    let v434 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v433 
    let v435 : string = "fable_library_rust::String_::fromString($0)"
    let v436 : string = Fable.Core.RustInterop.emitRustExpr v434 v435 
    let _run_target_args'_v424 = v436 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v437 : string = $"%A{v8}"
    let _run_target_args'_v424 = v437 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : string = $"%A{v8}"
    let _run_target_args'_v424 = v440 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _run_target_args'_v424 = v443 
    #endif
#else
    let v446 : string = $"%A{v8}"
    let _run_target_args'_v424 = v446 
    #endif
    let v449 : string = _run_target_args'_v424 
    let v454 : string = $"{v449}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v462 : string = " }"
    let v463 : string = $"{v462}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v471 : string = $"{v462}"
    let v474 : unit = ()
    let v475 : (unit -> unit) = closure7(v10, v471)
    let v476 : unit = (fun () -> v475 (); v474) ()
    let v479 : string = v10.l0
    v479
and method115 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method116(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure42 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = $"%A{v8}"
        let v50 : string = method115(v27, v28, v29, v30, v31, v32, v45, v46, v7, v47, v0, v1, v2, v3, v4, v5, v6)
        method19(v50)
and closure43 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method117 () : (std_process_Child option -> std_process_Child option) =
    closure43()
and closure44 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method118 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure44()
and closure45 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method119 () : (std_string_String -> US27) =
    closure45()
and method121 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    (* run_target_args'
    let v30 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _run_target_args'_v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _run_target_args'_v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _run_target_args'_v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _run_target_args'_v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _run_target_args'_v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _run_target_args'_v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v30 = v52 
    #endif
    let v55 : string = _run_target_args'_v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method120 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method121(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / child error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure46 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method70()
        let v39 : string = method120(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method122 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure47 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method123 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure47()
and closure48 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method124 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and method125 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and closure49 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method126 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure49()
and closure50 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method127 () : (std_string_String -> US29) =
    closure50()
and closure51 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method128 () : (std_string_String -> US29) =
    closure51()
and method130 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "trace'"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v33 : string =
        if v0 then
            let v31 : string = "true"
            v31
        else
            let v32 : string = "false"
            v32
    let v34 : string = $"{v33}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v3, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v3, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "e"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v3, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v22}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    (* run_target_args'
    let v68 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _run_target_args'_v68 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _run_target_args'_v68 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v68 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v1}"
    let _run_target_args'_v68 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _run_target_args'_v68 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v1}"
    let _run_target_args'_v68 = v87 
    #endif
#else
    let v90 : string = $"%A{v1}"
    let _run_target_args'_v68 = v90 
    #endif
    let v93 : string = _run_target_args'_v68 
    let v98 : string = $"{v93}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v3, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v106 : string = " }"
    let v107 : string = $"{v106}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v3, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v115 : string = v3.l0
    v115
and method129 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method130(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.stdio_line"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure52 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method129(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method132 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method131 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method132()
    let v10 : int64 = v0.l0
    let v11 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v11)
and closure53 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method73()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method131(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and closure54 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method133 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure54()
and method134 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure55 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method135 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure55()
and method136 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure56 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method137 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure56()
and method138 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure57 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method139 () : (std_process_Output -> US32) =
    closure57()
and closure58 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method140 () : (std_string_String -> US32) =
    closure58()
and method141 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method121(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / output error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure59 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method70()
        let v39 : string = method141(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure60 () (v0 : int32) : US33 =
    US33_0(v0)
and method142 () : (int32 -> US33) =
    closure60()
and method144 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "std_trace_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method143 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method144(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / result"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure61 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method73()
        let v40 : int32 = v1.Length
        let v41 : string = method143(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method148 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"%A{v1}"
    let v75 : string = $"{v72}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v10, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = $"{v46}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v10, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = "options"
    let v92 : string = $"{v91}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v10, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v29}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v10, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v11}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v29}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v10, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v2}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v10, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = $"{v46}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v10, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v149 : string = "cancellation_token"
    let v150 : string = $"{v149}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v10, v150)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v158 : string = $"{v29}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v10, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    (* run_target_args'
    let v166 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v167 : string = "format!(\"{:#?}\", $0)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _run_target_args'_v166 = v170 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v171 : string = "format!(\"{:#?}\", $0)"
    let v172 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v171 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let _run_target_args'_v166 = v174 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v175 : string = "format!(\"{:#?}\", $0)"
    let v176 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v175 
    let v177 : string = "fable_library_rust::String_::fromString($0)"
    let v178 : string = Fable.Core.RustInterop.emitRustExpr v176 v177 
    let _run_target_args'_v166 = v178 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v179 : string = $"%A{v3}"
    let _run_target_args'_v166 = v179 
    #endif
#if FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _run_target_args'_v166 = v182 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v185 : string = $"%A{v3}"
    let _run_target_args'_v166 = v185 
    #endif
#else
    let v188 : string = $"%A{v3}"
    let _run_target_args'_v166 = v188 
    #endif
    let v191 : string = _run_target_args'_v166 
    let v196 : string = $"{v191}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v10, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v46}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v10, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = "environment_variables"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v10, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = $"{v29}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v229 : string = $"%A{v4}"
    let v232 : string = $"{v229}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v10, v232)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v240 : string = $"{v46}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v248 : string = "on_line"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v257 : string = $"{v29}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v10, v257)
    let v262 : unit = (fun () -> v261 (); v260) ()
    (* run_target_args'
    let v265 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v266 : string = "format!(\"{:#?}\", $0)"
    let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v266 
    let v268 : string = "fable_library_rust::String_::fromString($0)"
    let v269 : string = Fable.Core.RustInterop.emitRustExpr v267 v268 
    let _run_target_args'_v265 = v269 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v270 : string = "format!(\"{:#?}\", $0)"
    let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v270 
    let v272 : string = "fable_library_rust::String_::fromString($0)"
    let v273 : string = Fable.Core.RustInterop.emitRustExpr v271 v272 
    let _run_target_args'_v265 = v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : string = "format!(\"{:#?}\", $0)"
    let v275 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v274 
    let v276 : string = "fable_library_rust::String_::fromString($0)"
    let v277 : string = Fable.Core.RustInterop.emitRustExpr v275 v276 
    let _run_target_args'_v265 = v277 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v278 : string = $"%A{v5}"
    let _run_target_args'_v265 = v278 
    #endif
#if FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _run_target_args'_v265 = v281 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v284 : string = $"%A{v5}"
    let _run_target_args'_v265 = v284 
    #endif
#else
    let v287 : string = $"%A{v5}"
    let _run_target_args'_v265 = v287 
    #endif
    let v290 : string = _run_target_args'_v265 
    let v295 : string = $"{v290}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v10, v295)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v303 : string = $"{v46}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v10, v303)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v311 : string = "stdin"
    let v312 : string = $"{v311}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v10, v312)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v320 : string = $"{v29}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v10, v320)
    let v325 : unit = (fun () -> v324 (); v323) ()
    (* run_target_args'
    let v328 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v329 : string = "format!(\"{:#?}\", $0)"
    let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v329 
    let v331 : string = "fable_library_rust::String_::fromString($0)"
    let v332 : string = Fable.Core.RustInterop.emitRustExpr v330 v331 
    let _run_target_args'_v328 = v332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = "format!(\"{:#?}\", $0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v333 
    let v335 : string = "fable_library_rust::String_::fromString($0)"
    let v336 : string = Fable.Core.RustInterop.emitRustExpr v334 v335 
    let _run_target_args'_v328 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "format!(\"{:#?}\", $0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v337 
    let v339 : string = "fable_library_rust::String_::fromString($0)"
    let v340 : string = Fable.Core.RustInterop.emitRustExpr v338 v339 
    let _run_target_args'_v328 = v340 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v341 : string = $"%A{v6}"
    let _run_target_args'_v328 = v341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _run_target_args'_v328 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v347 : string = $"%A{v6}"
    let _run_target_args'_v328 = v347 
    #endif
#else
    let v350 : string = $"%A{v6}"
    let _run_target_args'_v328 = v350 
    #endif
    let v353 : string = _run_target_args'_v328 
    let v358 : string = $"{v353}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v10, v358)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v366 : string = $"{v46}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v374 : string = "trace"
    let v375 : string = $"{v374}"
    let v378 : unit = ()
    let v379 : (unit -> unit) = closure7(v10, v375)
    let v380 : unit = (fun () -> v379 (); v378) ()
    let v383 : string = $"{v29}"
    let v386 : unit = ()
    let v387 : (unit -> unit) = closure7(v10, v383)
    let v388 : unit = (fun () -> v387 (); v386) ()
    let v393 : string =
        if v7 then
            let v391 : string = "true"
            v391
        else
            let v392 : string = "false"
            v392
    let v394 : string = $"{v393}"
    let v397 : unit = ()
    let v398 : (unit -> unit) = closure7(v10, v394)
    let v399 : unit = (fun () -> v398 (); v397) ()
    let v402 : string = $"{v46}"
    let v405 : unit = ()
    let v406 : (unit -> unit) = closure7(v10, v402)
    let v407 : unit = (fun () -> v406 (); v405) ()
    let v410 : string = "working_directory"
    let v411 : string = $"{v410}"
    let v414 : unit = ()
    let v415 : (unit -> unit) = closure7(v10, v411)
    let v416 : unit = (fun () -> v415 (); v414) ()
    let v419 : string = $"{v29}"
    let v422 : unit = ()
    let v423 : (unit -> unit) = closure7(v10, v419)
    let v424 : unit = (fun () -> v423 (); v422) ()
    (* run_target_args'
    let v427 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v428 : string = "format!(\"{:#?}\", $0)"
    let v429 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v428 
    let v430 : string = "fable_library_rust::String_::fromString($0)"
    let v431 : string = Fable.Core.RustInterop.emitRustExpr v429 v430 
    let _run_target_args'_v427 = v431 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v432 : string = "format!(\"{:#?}\", $0)"
    let v433 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v432 
    let v434 : string = "fable_library_rust::String_::fromString($0)"
    let v435 : string = Fable.Core.RustInterop.emitRustExpr v433 v434 
    let _run_target_args'_v427 = v435 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v436 : string = "format!(\"{:#?}\", $0)"
    let v437 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v436 
    let v438 : string = "fable_library_rust::String_::fromString($0)"
    let v439 : string = Fable.Core.RustInterop.emitRustExpr v437 v438 
    let _run_target_args'_v427 = v439 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v440 : string = $"%A{v8}"
    let _run_target_args'_v427 = v440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _run_target_args'_v427 = v443 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v446 : string = $"%A{v8}"
    let _run_target_args'_v427 = v446 
    #endif
#else
    let v449 : string = $"%A{v8}"
    let _run_target_args'_v427 = v449 
    #endif
    let v452 : string = _run_target_args'_v427 
    let v457 : string = $"{v452}"
    let v460 : unit = ()
    let v461 : (unit -> unit) = closure7(v10, v457)
    let v462 : unit = (fun () -> v461 (); v460) ()
    let v465 : string = " }"
    let v466 : string = $"{v465}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v474 : string = $"{v465}"
    let v477 : unit = ()
    let v478 : (unit -> unit) = closure7(v10, v474)
    let v479 : unit = (fun () -> v478 (); v477) ()
    let v482 : string = v10.l0
    v482
and method147 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method148(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options_async"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure62 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method147(v27, v28, v29, v30, v31, v32, v45, v46, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v47)
and method149 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method152 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = null |> unbox<string>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = null |> unbox<string>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = null |> unbox<string>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : string = null |> unbox<string>
    let _run_target_args'_v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : string = null |> unbox<string>
    let _run_target_args'_v1 = v17 
    #endif
#else
    let v20 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v21 : string = v20 v0
    let _run_target_args'_v1 = v21 
    #endif
    let v22 : string = _run_target_args'_v1 
    v22
and closure64 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method153 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure64()
and method154 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : int32 = null |> unbox<int32>
    let _run_target_args'_v1 = v17 
    #endif
#else
    let v20 : (System.Diagnostics.Process -> int32) = _.Id
    let v21 : int32 = v20 v0
    let _run_target_args'_v1 = v21 
    #endif
    let v22 : int32 = _run_target_args'_v1 
    v22
and closure65 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method73()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method131(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and method151 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v11 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v18 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            let v24 : string = method152(v10)
            let v25 : string = null |> unbox<string>
            let v28 : bool = v24 = v25
            let v29 : bool = v28 <> true
            if v29 then
                let v30 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method153()
                let v31 : US34 option = v3 |> Option.map v30 
                let v42 : US34 = US34_1
                let v43 : US34 = v31 |> Option.defaultValue v42 
                match v43 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v47) -> (* Some *)
                    let v48 : int32 = method154(v7)
                    let v49 : Async<unit> = v47 struct (v48, v24, v9)
                    do! v49 
                    ()
                let v52 : string =
                    if v9 then
                        let v50 : string = $"! {v24}"
                        v50
                    else
                        let v51 : string = $"> {v24}"
                        v51
                if v5 then
                    let v53 : unit = ()
                    let v54 : (unit -> unit) = closure65(v52)
                    let v55 : unit = (fun () -> v54 (); v53) ()
                    ()
                else
                    let v98 : unit = ()
                    let v99 : (unit -> unit) = closure10(v52)
                    let v100 : unit = (fun () -> v99 (); v98) ()
                    ()
                let v104 : string =
                    if v9 then
                        let v102 : string = "\u001b[7;4m"
                        v102
                    else
                        let v103 : string = ""
                        v103
                let v107 : string =
                    if v9 then
                        let v105 : string = "\u001b[0m"
                        v105
                    else
                        let v106 : string = ""
                        v106
                let v108 : string = $"{v104}{v24}{v107}"
                (* run_target_args'
                let v109 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v110 : (string -> unit) = v8.Push
                v110 v108
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v720 : Async<unit> = _let'_v21 
    let _run_target_args'_v11 = v720 
    #endif
#if FABLE_COMPILER_PYTHON
    let v721 : unit = ()
    let _let'_v721 =
        async {
            let v724 : string = method152(v10)
            let v725 : string = null |> unbox<string>
            let v728 : bool = v724 = v725
            let v729 : bool = v728 <> true
            if v729 then
                let v730 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method153()
                let v731 : US34 option = v3 |> Option.map v730 
                let v742 : US34 = US34_1
                let v743 : US34 = v731 |> Option.defaultValue v742 
                match v743 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v747) -> (* Some *)
                    let v748 : int32 = method154(v7)
                    let v749 : Async<unit> = v747 struct (v748, v724, v9)
                    do! v749 
                    ()
                let v752 : string =
                    if v9 then
                        let v750 : string = $"! {v724}"
                        v750
                    else
                        let v751 : string = $"> {v724}"
                        v751
                if v5 then
                    let v753 : unit = ()
                    let v754 : (unit -> unit) = closure65(v752)
                    let v755 : unit = (fun () -> v754 (); v753) ()
                    ()
                else
                    let v798 : unit = ()
                    let v799 : (unit -> unit) = closure10(v752)
                    let v800 : unit = (fun () -> v799 (); v798) ()
                    ()
                let v804 : string =
                    if v9 then
                        let v802 : string = "\u001b[7;4m"
                        v802
                    else
                        let v803 : string = ""
                        v803
                let v807 : string =
                    if v9 then
                        let v805 : string = "\u001b[0m"
                        v805
                    else
                        let v806 : string = ""
                        v806
                let v808 : string = $"{v804}{v724}{v807}"
                (* run_target_args'
                let v809 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v810 : (string -> unit) = v8.Push
                v810 v808
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1420 : Async<unit> = _let'_v721 
    let _run_target_args'_v11 = v1420 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1421 : unit = ()
    let _let'_v1421 =
        async {
            let v1424 : string = method152(v10)
            let v1425 : string = null |> unbox<string>
            let v1428 : bool = v1424 = v1425
            let v1429 : bool = v1428 <> true
            if v1429 then
                let v1430 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method153()
                let v1431 : US34 option = v3 |> Option.map v1430 
                let v1442 : US34 = US34_1
                let v1443 : US34 = v1431 |> Option.defaultValue v1442 
                match v1443 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v1447) -> (* Some *)
                    let v1448 : int32 = method154(v7)
                    let v1449 : Async<unit> = v1447 struct (v1448, v1424, v9)
                    do! v1449 
                    ()
                let v1452 : string =
                    if v9 then
                        let v1450 : string = $"! {v1424}"
                        v1450
                    else
                        let v1451 : string = $"> {v1424}"
                        v1451
                if v5 then
                    let v1453 : unit = ()
                    let v1454 : (unit -> unit) = closure65(v1452)
                    let v1455 : unit = (fun () -> v1454 (); v1453) ()
                    ()
                else
                    let v1498 : unit = ()
                    let v1499 : (unit -> unit) = closure10(v1452)
                    let v1500 : unit = (fun () -> v1499 (); v1498) ()
                    ()
                let v1504 : string =
                    if v9 then
                        let v1502 : string = "\u001b[7;4m"
                        v1502
                    else
                        let v1503 : string = ""
                        v1503
                let v1507 : string =
                    if v9 then
                        let v1505 : string = "\u001b[0m"
                        v1505
                    else
                        let v1506 : string = ""
                        v1506
                let v1508 : string = $"{v1504}{v1424}{v1507}"
                (* run_target_args'
                let v1509 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v1510 : (string -> unit) = v8.Push
                v1510 v1508
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2120 : Async<unit> = _let'_v1421 
    let _run_target_args'_v11 = v2120 
    #endif
#else
    let v2121 : unit = ()
    let _let'_v2121 =
        async {
            let v2124 : string = method152(v10)
            let v2125 : string = null |> unbox<string>
            let v2128 : bool = v2124 = v2125
            let v2129 : bool = v2128 <> true
            if v2129 then
                let v2130 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method153()
                let v2131 : US34 option = v3 |> Option.map v2130 
                let v2142 : US34 = US34_1
                let v2143 : US34 = v2131 |> Option.defaultValue v2142 
                match v2143 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2147) -> (* Some *)
                    let v2148 : int32 = method154(v7)
                    let v2149 : Async<unit> = v2147 struct (v2148, v2124, v9)
                    do! v2149 
                    ()
                let v2152 : string =
                    if v9 then
                        let v2150 : string = $"! {v2124}"
                        v2150
                    else
                        let v2151 : string = $"> {v2124}"
                        v2151
                if v5 then
                    let v2153 : unit = ()
                    let v2154 : (unit -> unit) = closure65(v2152)
                    let v2155 : unit = (fun () -> v2154 (); v2153) ()
                    ()
                else
                    let v2198 : unit = ()
                    let v2199 : (unit -> unit) = closure10(v2152)
                    let v2200 : unit = (fun () -> v2199 (); v2198) ()
                    ()
                let v2204 : string =
                    if v9 then
                        let v2202 : string = "\u001b[7;4m"
                        v2202
                    else
                        let v2203 : string = ""
                        v2203
                let v2207 : string =
                    if v9 then
                        let v2205 : string = "\u001b[0m"
                        v2205
                    else
                        let v2206 : string = ""
                        v2206
                let v2208 : string = $"{v2204}{v2124}{v2207}"
                (* run_target_args'
                let v2209 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2210 : (string -> unit) = v8.Push
                v2210 v2208
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2820 : Async<unit> = _let'_v2121 
    let _run_target_args'_v11 = v2820 
    #endif
    let v2821 : Async<unit> = _run_target_args'_v11 
    v2821
and method150 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method151(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure63 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method150(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure66 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method155 () : (System.Threading.CancellationToken -> US35) =
    closure66()
and method156 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : unit = ()
    let _let'_v11 =
        async {
            (* run_target_args'
            let v14 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v15 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v15 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v18 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v18 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v21 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v21 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v24 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v24 
            #endif
#if FABLE_COMPILER_PYTHON
            let v27 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v27 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v30 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v30 
            #endif
#else
            let v33 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v33 = v33 
            let v34 : System.Threading.CancellationToken = v33 
            let v35 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v36 : (System.Threading.CancellationToken []) = [|v34; v35; v0|]
            let v37 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v38 : System.Threading.CancellationTokenSource = v37 v36
            let v39 : System.Threading.CancellationToken = v38.Token
            return v39 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v246 : Async<System.Threading.CancellationToken> = _let'_v11 
    let _run_target_args'_v1 = v246 
    #endif
#if FABLE_COMPILER_PYTHON
    let v247 : unit = ()
    let _let'_v247 =
        async {
            (* run_target_args'
            let v250 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v251 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v251 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v254 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v254 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v257 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v257 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v260 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v260 
            #endif
#if FABLE_COMPILER_PYTHON
            let v263 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v263 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v266 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v266 
            #endif
#else
            let v269 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v269 = v269 
            let v270 : System.Threading.CancellationToken = v269 
            let v271 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v272 : (System.Threading.CancellationToken []) = [|v270; v271; v0|]
            let v273 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v274 : System.Threading.CancellationTokenSource = v273 v272
            let v275 : System.Threading.CancellationToken = v274.Token
            return v275 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v482 : Async<System.Threading.CancellationToken> = _let'_v247 
    let _run_target_args'_v1 = v482 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v483 : unit = ()
    let _let'_v483 =
        async {
            (* run_target_args'
            let v486 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v487 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v487 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v490 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v490 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v493 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v493 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v496 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v496 
            #endif
#if FABLE_COMPILER_PYTHON
            let v499 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v499 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v502 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v502 
            #endif
#else
            let v505 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v505 = v505 
            let v506 : System.Threading.CancellationToken = v505 
            let v507 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v508 : (System.Threading.CancellationToken []) = [|v506; v507; v0|]
            let v509 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v510 : System.Threading.CancellationTokenSource = v509 v508
            let v511 : System.Threading.CancellationToken = v510.Token
            return v511 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v718 : Async<System.Threading.CancellationToken> = _let'_v483 
    let _run_target_args'_v1 = v718 
    #endif
#else
    let v719 : unit = ()
    let _let'_v719 =
        async {
            (* run_target_args'
            let v722 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v723 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v723 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v726 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v726 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v729 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v729 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v732 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v732 
            #endif
#if FABLE_COMPILER_PYTHON
            let v735 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v735 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v738 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v738 
            #endif
#else
            let v741 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v741 = v741 
            let v742 : System.Threading.CancellationToken = v741 
            let v743 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v744 : (System.Threading.CancellationToken []) = [|v742; v743; v0|]
            let v745 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v746 : System.Threading.CancellationTokenSource = v745 v744
            let v747 : System.Threading.CancellationToken = v746.Token
            return v747 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v954 : Async<System.Threading.CancellationToken> = _let'_v719 
    let _run_target_args'_v1 = v954 
    #endif
    let v955 : Async<System.Threading.CancellationToken> = _run_target_args'_v1 
    v955
and method157 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : bool = null |> unbox<bool>
    let _run_target_args'_v1 = v17 
    #endif
#else
    let v20 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v21 : bool = v20 v0
    let _run_target_args'_v1 = v21 
    #endif
    let v22 : bool = _run_target_args'_v1 
    v22
and method158 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure67 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method157(v0)
    let v2 : bool = v1 = false
    if v2 then
        method158(v0)
and method161 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "ex"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    (* run_target_args'
    let v30 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _run_target_args'_v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _run_target_args'_v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _run_target_args'_v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _run_target_args'_v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _run_target_args'_v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _run_target_args'_v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v30 = v52 
    #endif
    let v55 : string = _run_target_args'_v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method160 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method161(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure68 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method37()
        let v39 : string = method160(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method159 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v3 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : unit = ()
    let _let'_v13 =
        async {
            try
                (* run_target_args'
                let v16 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v17 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v17 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v20 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v20 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v23 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v23 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v26 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v26 
                #endif
#if FABLE_COMPILER_PYTHON
                let v29 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v29 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v32 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v16 = v32 
                #endif
#else
                let v35 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v16 = v35 
                #endif
                let v36 : System.Threading.Tasks.Task = _run_target_args'_v16 
                (* run_target_args'
                let v41 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v42 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v41 = v42 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v45 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v41 = v45 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v48 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v41 = v48 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v51 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v52 : Async<unit> = v51 v36
                let _run_target_args'_v41 = v52 
                #endif
#if FABLE_COMPILER_PYTHON
                let v53 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v54 : Async<unit> = v53 v36
                let _run_target_args'_v41 = v54 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v55 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v56 : Async<unit> = v55 v36
                let _run_target_args'_v41 = v56 
                #endif
#else
                let v57 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v58 : Async<unit> = v57 v36
                let _run_target_args'_v41 = v58 
                #endif
                let v59 : Async<unit> = _run_target_args'_v41 
                do! v59 
                (* run_target_args'
                let v64 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v65 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v65 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v68 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v68 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v71 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v71 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v74 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v74 
                #endif
#if FABLE_COMPILER_PYTHON
                let v77 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v77 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v80 : int32 = null |> unbox<int32>
                let _run_target_args'_v64 = v80 
                #endif
#else
                let v83 : int32 = v0.ExitCode
                let _run_target_args'_v64 = v83 
                #endif
                let v84 : int32 = _run_target_args'_v64 
                return v84 
                (* indent
                ()
            indent *)
            with ex ->
                let v162 : exn = ex
                (* run_target_args'
                let v163 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v164 : string = $"%A{v162}"
                let _run_target_args'_v163 = v164 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v167 : string = $"%A{v162}"
                let _run_target_args'_v163 = v167 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v170 : string = $"%A{v162}"
                let _run_target_args'_v163 = v170 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v173 : string = $"%A{v162}"
                let _run_target_args'_v163 = v173 
                #endif
#if FABLE_COMPILER_PYTHON
                let v176 : string = $"%A{v162}"
                let _run_target_args'_v163 = v176 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v179 : string = $"%A{v162}"
                let _run_target_args'_v163 = v179 
                #endif
#else
                let v182 : string = $"{v162.GetType ()}: {v162.Message}"
                let _run_target_args'_v163 = v182 
                #endif
                let v183 : string = _run_target_args'_v163 
                (* run_target_args'
                let v188 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v189 : (string -> unit) = v1.Push
                v189 v183
                #endif
                // run_target_args' is_unit
                let v190 : System.Threading.Tasks.TaskCanceledException = v162 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v193 : unit = ()
                let v194 : (unit -> unit) = closure68(v190)
                let v195 : unit = (fun () -> v194 (); v193) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2352 : Async<int32> = _let'_v13 
    let _run_target_args'_v3 = v2352 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2353 : unit = ()
    let _let'_v2353 =
        async {
            try
                (* run_target_args'
                let v2356 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2357 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2357 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2360 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2360 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2363 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2363 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2366 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2366 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2369 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2369 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2372 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v2356 = v2372 
                #endif
#else
                let v2375 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v2356 = v2375 
                #endif
                let v2376 : System.Threading.Tasks.Task = _run_target_args'_v2356 
                (* run_target_args'
                let v2381 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2382 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v2381 = v2382 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2385 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v2381 = v2385 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2388 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v2381 = v2388 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2391 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v2392 : Async<unit> = v2391 v2376
                let _run_target_args'_v2381 = v2392 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2393 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v2394 : Async<unit> = v2393 v2376
                let _run_target_args'_v2381 = v2394 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2395 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v2396 : Async<unit> = v2395 v2376
                let _run_target_args'_v2381 = v2396 
                #endif
#else
                let v2397 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v2398 : Async<unit> = v2397 v2376
                let _run_target_args'_v2381 = v2398 
                #endif
                let v2399 : Async<unit> = _run_target_args'_v2381 
                do! v2399 
                (* run_target_args'
                let v2404 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2405 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2408 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2408 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2411 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2411 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2414 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2414 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2417 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2417 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2420 : int32 = null |> unbox<int32>
                let _run_target_args'_v2404 = v2420 
                #endif
#else
                let v2423 : int32 = v0.ExitCode
                let _run_target_args'_v2404 = v2423 
                #endif
                let v2424 : int32 = _run_target_args'_v2404 
                return v2424 
                (* indent
                ()
            indent *)
            with ex ->
                let v2502 : exn = ex
                (* run_target_args'
                let v2503 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2504 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2504 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2507 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2507 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2510 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2510 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2513 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2513 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2516 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2516 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2519 : string = $"%A{v2502}"
                let _run_target_args'_v2503 = v2519 
                #endif
#else
                let v2522 : string = $"{v2502.GetType ()}: {v2502.Message}"
                let _run_target_args'_v2503 = v2522 
                #endif
                let v2523 : string = _run_target_args'_v2503 
                (* run_target_args'
                let v2528 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2529 : (string -> unit) = v1.Push
                v2529 v2523
                #endif
                // run_target_args' is_unit
                let v2530 : System.Threading.Tasks.TaskCanceledException = v2502 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v2533 : unit = ()
                let v2534 : (unit -> unit) = closure68(v2530)
                let v2535 : unit = (fun () -> v2534 (); v2533) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4692 : Async<int32> = _let'_v2353 
    let _run_target_args'_v3 = v4692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4693 : unit = ()
    let _let'_v4693 =
        async {
            try
                (* run_target_args'
                let v4696 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4697 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4697 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4700 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4700 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4703 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4703 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4706 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4706 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4709 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4709 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4712 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v4696 = v4712 
                #endif
#else
                let v4715 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v4696 = v4715 
                #endif
                let v4716 : System.Threading.Tasks.Task = _run_target_args'_v4696 
                (* run_target_args'
                let v4721 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4722 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v4721 = v4722 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4725 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v4721 = v4725 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4728 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v4721 = v4728 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4731 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v4732 : Async<unit> = v4731 v4716
                let _run_target_args'_v4721 = v4732 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4733 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v4734 : Async<unit> = v4733 v4716
                let _run_target_args'_v4721 = v4734 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4735 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v4736 : Async<unit> = v4735 v4716
                let _run_target_args'_v4721 = v4736 
                #endif
#else
                let v4737 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v4738 : Async<unit> = v4737 v4716
                let _run_target_args'_v4721 = v4738 
                #endif
                let v4739 : Async<unit> = _run_target_args'_v4721 
                do! v4739 
                (* run_target_args'
                let v4744 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4745 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4745 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4748 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4748 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4751 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4751 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4754 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4754 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4757 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4757 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4760 : int32 = null |> unbox<int32>
                let _run_target_args'_v4744 = v4760 
                #endif
#else
                let v4763 : int32 = v0.ExitCode
                let _run_target_args'_v4744 = v4763 
                #endif
                let v4764 : int32 = _run_target_args'_v4744 
                return v4764 
                (* indent
                ()
            indent *)
            with ex ->
                let v4842 : exn = ex
                (* run_target_args'
                let v4843 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4844 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4844 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4847 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4847 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4850 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4850 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4853 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4853 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4856 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4856 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4859 : string = $"%A{v4842}"
                let _run_target_args'_v4843 = v4859 
                #endif
#else
                let v4862 : string = $"{v4842.GetType ()}: {v4842.Message}"
                let _run_target_args'_v4843 = v4862 
                #endif
                let v4863 : string = _run_target_args'_v4843 
                (* run_target_args'
                let v4868 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v4869 : (string -> unit) = v1.Push
                v4869 v4863
                #endif
                // run_target_args' is_unit
                let v4870 : System.Threading.Tasks.TaskCanceledException = v4842 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v4873 : unit = ()
                let v4874 : (unit -> unit) = closure68(v4870)
                let v4875 : unit = (fun () -> v4874 (); v4873) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7032 : Async<int32> = _let'_v4693 
    let _run_target_args'_v3 = v7032 
    #endif
#else
    let v7033 : unit = ()
    let _let'_v7033 =
        async {
            try
                (* run_target_args'
                let v7036 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v7037 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7037 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v7040 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7040 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v7043 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7043 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v7046 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7046 
                #endif
#if FABLE_COMPILER_PYTHON
                let v7049 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7049 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v7052 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v7036 = v7052 
                #endif
#else
                let v7055 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v7036 = v7055 
                #endif
                let v7056 : System.Threading.Tasks.Task = _run_target_args'_v7036 
                (* run_target_args'
                let v7061 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v7062 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v7061 = v7062 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v7065 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v7061 = v7065 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v7068 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v7061 = v7068 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v7071 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v7072 : Async<unit> = v7071 v7056
                let _run_target_args'_v7061 = v7072 
                #endif
#if FABLE_COMPILER_PYTHON
                let v7073 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v7074 : Async<unit> = v7073 v7056
                let _run_target_args'_v7061 = v7074 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v7075 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v7076 : Async<unit> = v7075 v7056
                let _run_target_args'_v7061 = v7076 
                #endif
#else
                let v7077 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v7078 : Async<unit> = v7077 v7056
                let _run_target_args'_v7061 = v7078 
                #endif
                let v7079 : Async<unit> = _run_target_args'_v7061 
                do! v7079 
                (* run_target_args'
                let v7084 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v7085 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7085 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v7088 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7088 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v7091 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7091 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v7094 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7094 
                #endif
#if FABLE_COMPILER_PYTHON
                let v7097 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7097 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v7100 : int32 = null |> unbox<int32>
                let _run_target_args'_v7084 = v7100 
                #endif
#else
                let v7103 : int32 = v0.ExitCode
                let _run_target_args'_v7084 = v7103 
                #endif
                let v7104 : int32 = _run_target_args'_v7084 
                return v7104 
                (* indent
                ()
            indent *)
            with ex ->
                let v7182 : exn = ex
                (* run_target_args'
                let v7183 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v7184 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7184 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v7187 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7187 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v7190 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7190 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v7193 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7193 
                #endif
#if FABLE_COMPILER_PYTHON
                let v7196 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7196 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v7199 : string = $"%A{v7182}"
                let _run_target_args'_v7183 = v7199 
                #endif
#else
                let v7202 : string = $"{v7182.GetType ()}: {v7182.Message}"
                let _run_target_args'_v7183 = v7202 
                #endif
                let v7203 : string = _run_target_args'_v7183 
                (* run_target_args'
                let v7208 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v7209 : (string -> unit) = v1.Push
                v7209 v7203
                #endif
                // run_target_args' is_unit
                let v7210 : System.Threading.Tasks.TaskCanceledException = v7182 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v7213 : unit = ()
                let v7214 : (unit -> unit) = closure68(v7210)
                let v7215 : unit = (fun () -> v7214 (); v7213) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9372 : Async<int32> = _let'_v7033 
    let _run_target_args'_v3 = v9372 
    #endif
    let v9373 : Async<int32> = _run_target_args'_v3 
    v9373
and method163 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "output_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method162 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method163(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure69 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v1.Length
        let v41 : string = method162(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method146 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : unit = ()
    let _let'_v17 =
        async {
            (* run_target_args'
            let v20 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v21 : int32, v22 : string) = null |> unbox<struct (int32 * string)>
            return struct (v21, v22) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v27 : int32, v28 : string) = null |> unbox<struct (int32 * string)>
            return struct (v27, v28) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v33 : int32, v34 : string) = null |> unbox<struct (int32 * string)>
            return struct (v33, v34) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v39 : int32, v40 : string) = null |> unbox<struct (int32 * string)>
            return struct (v39, v40) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v45 : int32, v46 : string) = null |> unbox<struct (int32 * string)>
            return struct (v45, v46) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v51 : int32, v52 : string) = null |> unbox<struct (int32 * string)>
            return struct (v51, v52) 
            #endif
#else
            let v57 : US17 = method91(v0)
            let struct (v68 : string, v69 : US5) =
                match v57 with
                | US17_1(v60) -> (* Error *)
                    let v61 : string = $"resultm.get / Result value was Error: {v60}"
                    failwith<struct (string * US5)> v61
                | US17_0(v58, v59) -> (* Ok *)
                    struct (v58, v59)
            let v70 : (string -> US5) = method6()
            let v71 : US5 option = v6 |> Option.map v70 
            let v82 : US5 = US5_1
            let v83 : US5 = v71 |> Option.defaultValue v82 
            let v90 : string =
                match v83 with
                | US5_1 -> (* None *)
                    let v88 : string = ""
                    v88
                | US5_0(v87) -> (* Some *)
                    v87
            let v91 : unit = ()
            let v92 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v69, v68)
            let v93 : unit = (fun () -> v92 (); v91) ()
            let v133 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v137 : string =
                match v69 with
                | US5_1 -> (* None *)
                    let v135 : string = ""
                    v135
                | US5_0(v134) -> (* Some *)
                    v134
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v137,
              StandardOutputEncoding = v133,
              WorkingDirectory = v90,
              FileName = v68,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v138 : System.Diagnostics.ProcessStartInfo = start_info
            let v139 : (struct (string * string) []) = method149(v0, v1, v2, v3, v4, v5, v6)
            let v140 : int32 = v139.Length
            let v141 : Mut5 = {l0 = 0} : Mut5
            while method93(v140, v141) do
                let v143 : int32 = v141.l0
                let struct (v144 : string, v145 : string) = v139.[int v143]
                v138.EnvironmentVariables.[v144] <- v145 
                let v146 : int32 = v143 + 1
                v141.l0 <- v146
                ()
            let v147 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v138)
            use v147 = v147 
            let v148 : System.Diagnostics.Process = v147 
            let v149 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v150 : System.Collections.Concurrent.ConcurrentStack<string> = v149 ()
            let v151 : bool = false
            let v152 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v148, v150, v151)
            v148.OutputDataReceived.Add v152 
            let v153 : bool = true
            let v154 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v148, v150, v153)
            v148.ErrorDataReceived.Add v154 
            let v155 : (unit -> bool) = v148.Start
            let v156 : bool = v155 ()
            let v157 : bool = v156 = false
            if v157 then
                let v158 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v158
            let v159 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v159 v148
            let v160 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v160 v148
            let v161 : (System.Threading.CancellationToken -> US35) = method155()
            let v162 : US35 option = v1 |> Option.map v161 
            let v173 : US35 = US35_1
            let v174 : US35 = v162 |> Option.defaultValue v173 
            let v181 : System.Threading.CancellationToken =
                match v174 with
                | US35_1 -> (* None *)
                    let v179 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v179
                | US35_0(v178) -> (* Some *)
                    v178
            let v182 : Async<System.Threading.CancellationToken> = method156(v181)
            let! v182 = v182 
            let v183 : System.Threading.CancellationToken = v182 
            let v184 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v183.Register
            let v185 : (unit -> unit) = closure67(v148)
            let v186 : System.Threading.CancellationTokenRegistration = v184 v185
            use v186 = v186 
            let v187 : System.Threading.CancellationTokenRegistration = v186 
            let v188 : Async<int32> = method159(v148, v150, v183)
            let! v188 = v188 
            let v189 : int32 = v188 
            let v190 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v191 : string seq = v190 v150
            let v194 : (string seq -> string seq) = Seq.rev
            let v195 : string seq = v194 v191
            let v198 : string = method63()
            let v199 : (string -> (string seq -> string)) = String.concat
            let v200 : (string seq -> string) = v199 v198
            let v201 : string = v200 v195
            let v205 : unit = ()
            let v206 : (unit -> unit) = closure69(v189, v201)
            let v207 : unit = (fun () -> v206 (); v205) ()
            return struct (v189, v201) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1892 : Async<struct (int32 * string)> = _let'_v17 
    let _run_target_args'_v7 = v1892 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1893 : unit = ()
    let _let'_v1893 =
        async {
            (* run_target_args'
            let v1896 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v1897 : int32, v1898 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1897, v1898) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v1903 : int32, v1904 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1903, v1904) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v1909 : int32, v1910 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1909, v1910) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v1915 : int32, v1916 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1915, v1916) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v1921 : int32, v1922 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1921, v1922) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v1927 : int32, v1928 : string) = null |> unbox<struct (int32 * string)>
            return struct (v1927, v1928) 
            #endif
#else
            let v1933 : US17 = method91(v0)
            let struct (v1944 : string, v1945 : US5) =
                match v1933 with
                | US17_1(v1936) -> (* Error *)
                    let v1937 : string = $"resultm.get / Result value was Error: {v1936}"
                    failwith<struct (string * US5)> v1937
                | US17_0(v1934, v1935) -> (* Ok *)
                    struct (v1934, v1935)
            let v1946 : (string -> US5) = method6()
            let v1947 : US5 option = v6 |> Option.map v1946 
            let v1958 : US5 = US5_1
            let v1959 : US5 = v1947 |> Option.defaultValue v1958 
            let v1966 : string =
                match v1959 with
                | US5_1 -> (* None *)
                    let v1964 : string = ""
                    v1964
                | US5_0(v1963) -> (* Some *)
                    v1963
            let v1967 : unit = ()
            let v1968 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v1945, v1944)
            let v1969 : unit = (fun () -> v1968 (); v1967) ()
            let v2009 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2013 : string =
                match v1945 with
                | US5_1 -> (* None *)
                    let v2011 : string = ""
                    v2011
                | US5_0(v2010) -> (* Some *)
                    v2010
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2013,
              StandardOutputEncoding = v2009,
              WorkingDirectory = v1966,
              FileName = v1944,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2014 : System.Diagnostics.ProcessStartInfo = start_info
            let v2015 : (struct (string * string) []) = method149(v0, v1, v2, v3, v4, v5, v6)
            let v2016 : int32 = v2015.Length
            let v2017 : Mut5 = {l0 = 0} : Mut5
            while method93(v2016, v2017) do
                let v2019 : int32 = v2017.l0
                let struct (v2020 : string, v2021 : string) = v2015.[int v2019]
                v2014.EnvironmentVariables.[v2020] <- v2021 
                let v2022 : int32 = v2019 + 1
                v2017.l0 <- v2022
                ()
            let v2023 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2014)
            use v2023 = v2023 
            let v2024 : System.Diagnostics.Process = v2023 
            let v2025 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2026 : System.Collections.Concurrent.ConcurrentStack<string> = v2025 ()
            let v2027 : bool = false
            let v2028 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2024, v2026, v2027)
            v2024.OutputDataReceived.Add v2028 
            let v2029 : bool = true
            let v2030 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2024, v2026, v2029)
            v2024.ErrorDataReceived.Add v2030 
            let v2031 : (unit -> bool) = v2024.Start
            let v2032 : bool = v2031 ()
            let v2033 : bool = v2032 = false
            if v2033 then
                let v2034 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2034
            let v2035 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v2035 v2024
            let v2036 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v2036 v2024
            let v2037 : (System.Threading.CancellationToken -> US35) = method155()
            let v2038 : US35 option = v1 |> Option.map v2037 
            let v2049 : US35 = US35_1
            let v2050 : US35 = v2038 |> Option.defaultValue v2049 
            let v2057 : System.Threading.CancellationToken =
                match v2050 with
                | US35_1 -> (* None *)
                    let v2055 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2055
                | US35_0(v2054) -> (* Some *)
                    v2054
            let v2058 : Async<System.Threading.CancellationToken> = method156(v2057)
            let! v2058 = v2058 
            let v2059 : System.Threading.CancellationToken = v2058 
            let v2060 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2059.Register
            let v2061 : (unit -> unit) = closure67(v2024)
            let v2062 : System.Threading.CancellationTokenRegistration = v2060 v2061
            use v2062 = v2062 
            let v2063 : System.Threading.CancellationTokenRegistration = v2062 
            let v2064 : Async<int32> = method159(v2024, v2026, v2059)
            let! v2064 = v2064 
            let v2065 : int32 = v2064 
            let v2066 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2067 : string seq = v2066 v2026
            let v2070 : (string seq -> string seq) = Seq.rev
            let v2071 : string seq = v2070 v2067
            let v2074 : string = method63()
            let v2075 : (string -> (string seq -> string)) = String.concat
            let v2076 : (string seq -> string) = v2075 v2074
            let v2077 : string = v2076 v2071
            let v2081 : unit = ()
            let v2082 : (unit -> unit) = closure69(v2065, v2077)
            let v2083 : unit = (fun () -> v2082 (); v2081) ()
            return struct (v2065, v2077) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3768 : Async<struct (int32 * string)> = _let'_v1893 
    let _run_target_args'_v7 = v3768 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3769 : unit = ()
    let _let'_v3769 =
        async {
            (* run_target_args'
            let v3772 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v3773 : int32, v3774 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3773, v3774) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v3779 : int32, v3780 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3779, v3780) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v3785 : int32, v3786 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3785, v3786) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v3791 : int32, v3792 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3791, v3792) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v3797 : int32, v3798 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3797, v3798) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v3803 : int32, v3804 : string) = null |> unbox<struct (int32 * string)>
            return struct (v3803, v3804) 
            #endif
#else
            let v3809 : US17 = method91(v0)
            let struct (v3820 : string, v3821 : US5) =
                match v3809 with
                | US17_1(v3812) -> (* Error *)
                    let v3813 : string = $"resultm.get / Result value was Error: {v3812}"
                    failwith<struct (string * US5)> v3813
                | US17_0(v3810, v3811) -> (* Ok *)
                    struct (v3810, v3811)
            let v3822 : (string -> US5) = method6()
            let v3823 : US5 option = v6 |> Option.map v3822 
            let v3834 : US5 = US5_1
            let v3835 : US5 = v3823 |> Option.defaultValue v3834 
            let v3842 : string =
                match v3835 with
                | US5_1 -> (* None *)
                    let v3840 : string = ""
                    v3840
                | US5_0(v3839) -> (* Some *)
                    v3839
            let v3843 : unit = ()
            let v3844 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v3821, v3820)
            let v3845 : unit = (fun () -> v3844 (); v3843) ()
            let v3885 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v3889 : string =
                match v3821 with
                | US5_1 -> (* None *)
                    let v3887 : string = ""
                    v3887
                | US5_0(v3886) -> (* Some *)
                    v3886
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v3889,
              StandardOutputEncoding = v3885,
              WorkingDirectory = v3842,
              FileName = v3820,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v3890 : System.Diagnostics.ProcessStartInfo = start_info
            let v3891 : (struct (string * string) []) = method149(v0, v1, v2, v3, v4, v5, v6)
            let v3892 : int32 = v3891.Length
            let v3893 : Mut5 = {l0 = 0} : Mut5
            while method93(v3892, v3893) do
                let v3895 : int32 = v3893.l0
                let struct (v3896 : string, v3897 : string) = v3891.[int v3895]
                v3890.EnvironmentVariables.[v3896] <- v3897 
                let v3898 : int32 = v3895 + 1
                v3893.l0 <- v3898
                ()
            let v3899 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v3890)
            use v3899 = v3899 
            let v3900 : System.Diagnostics.Process = v3899 
            let v3901 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v3902 : System.Collections.Concurrent.ConcurrentStack<string> = v3901 ()
            let v3903 : bool = false
            let v3904 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v3900, v3902, v3903)
            v3900.OutputDataReceived.Add v3904 
            let v3905 : bool = true
            let v3906 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v3900, v3902, v3905)
            v3900.ErrorDataReceived.Add v3906 
            let v3907 : (unit -> bool) = v3900.Start
            let v3908 : bool = v3907 ()
            let v3909 : bool = v3908 = false
            if v3909 then
                let v3910 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v3910
            let v3911 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v3911 v3900
            let v3912 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v3912 v3900
            let v3913 : (System.Threading.CancellationToken -> US35) = method155()
            let v3914 : US35 option = v1 |> Option.map v3913 
            let v3925 : US35 = US35_1
            let v3926 : US35 = v3914 |> Option.defaultValue v3925 
            let v3933 : System.Threading.CancellationToken =
                match v3926 with
                | US35_1 -> (* None *)
                    let v3931 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v3931
                | US35_0(v3930) -> (* Some *)
                    v3930
            let v3934 : Async<System.Threading.CancellationToken> = method156(v3933)
            let! v3934 = v3934 
            let v3935 : System.Threading.CancellationToken = v3934 
            let v3936 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v3935.Register
            let v3937 : (unit -> unit) = closure67(v3900)
            let v3938 : System.Threading.CancellationTokenRegistration = v3936 v3937
            use v3938 = v3938 
            let v3939 : System.Threading.CancellationTokenRegistration = v3938 
            let v3940 : Async<int32> = method159(v3900, v3902, v3935)
            let! v3940 = v3940 
            let v3941 : int32 = v3940 
            let v3942 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v3943 : string seq = v3942 v3902
            let v3946 : (string seq -> string seq) = Seq.rev
            let v3947 : string seq = v3946 v3943
            let v3950 : string = method63()
            let v3951 : (string -> (string seq -> string)) = String.concat
            let v3952 : (string seq -> string) = v3951 v3950
            let v3953 : string = v3952 v3947
            let v3957 : unit = ()
            let v3958 : (unit -> unit) = closure69(v3941, v3953)
            let v3959 : unit = (fun () -> v3958 (); v3957) ()
            return struct (v3941, v3953) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5644 : Async<struct (int32 * string)> = _let'_v3769 
    let _run_target_args'_v7 = v5644 
    #endif
#else
    let v5645 : unit = ()
    let _let'_v5645 =
        async {
            (* run_target_args'
            let v5648 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v5649 : int32, v5650 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5649, v5650) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v5655 : int32, v5656 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5655, v5656) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v5661 : int32, v5662 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5661, v5662) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v5667 : int32, v5668 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5667, v5668) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v5673 : int32, v5674 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5673, v5674) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v5679 : int32, v5680 : string) = null |> unbox<struct (int32 * string)>
            return struct (v5679, v5680) 
            #endif
#else
            let v5685 : US17 = method91(v0)
            let struct (v5696 : string, v5697 : US5) =
                match v5685 with
                | US17_1(v5688) -> (* Error *)
                    let v5689 : string = $"resultm.get / Result value was Error: {v5688}"
                    failwith<struct (string * US5)> v5689
                | US17_0(v5686, v5687) -> (* Ok *)
                    struct (v5686, v5687)
            let v5698 : (string -> US5) = method6()
            let v5699 : US5 option = v6 |> Option.map v5698 
            let v5710 : US5 = US5_1
            let v5711 : US5 = v5699 |> Option.defaultValue v5710 
            let v5718 : string =
                match v5711 with
                | US5_1 -> (* None *)
                    let v5716 : string = ""
                    v5716
                | US5_0(v5715) -> (* Some *)
                    v5715
            let v5719 : unit = ()
            let v5720 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v5697, v5696)
            let v5721 : unit = (fun () -> v5720 (); v5719) ()
            let v5761 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v5765 : string =
                match v5697 with
                | US5_1 -> (* None *)
                    let v5763 : string = ""
                    v5763
                | US5_0(v5762) -> (* Some *)
                    v5762
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v5765,
              StandardOutputEncoding = v5761,
              WorkingDirectory = v5718,
              FileName = v5696,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v5766 : System.Diagnostics.ProcessStartInfo = start_info
            let v5767 : (struct (string * string) []) = method149(v0, v1, v2, v3, v4, v5, v6)
            let v5768 : int32 = v5767.Length
            let v5769 : Mut5 = {l0 = 0} : Mut5
            while method93(v5768, v5769) do
                let v5771 : int32 = v5769.l0
                let struct (v5772 : string, v5773 : string) = v5767.[int v5771]
                v5766.EnvironmentVariables.[v5772] <- v5773 
                let v5774 : int32 = v5771 + 1
                v5769.l0 <- v5774
                ()
            let v5775 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v5766)
            use v5775 = v5775 
            let v5776 : System.Diagnostics.Process = v5775 
            let v5777 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v5778 : System.Collections.Concurrent.ConcurrentStack<string> = v5777 ()
            let v5779 : bool = false
            let v5780 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v5776, v5778, v5779)
            v5776.OutputDataReceived.Add v5780 
            let v5781 : bool = true
            let v5782 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v5776, v5778, v5781)
            v5776.ErrorDataReceived.Add v5782 
            let v5783 : (unit -> bool) = v5776.Start
            let v5784 : bool = v5783 ()
            let v5785 : bool = v5784 = false
            if v5785 then
                let v5786 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v5786
            let v5787 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v5787 v5776
            let v5788 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v5788 v5776
            let v5789 : (System.Threading.CancellationToken -> US35) = method155()
            let v5790 : US35 option = v1 |> Option.map v5789 
            let v5801 : US35 = US35_1
            let v5802 : US35 = v5790 |> Option.defaultValue v5801 
            let v5809 : System.Threading.CancellationToken =
                match v5802 with
                | US35_1 -> (* None *)
                    let v5807 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v5807
                | US35_0(v5806) -> (* Some *)
                    v5806
            let v5810 : Async<System.Threading.CancellationToken> = method156(v5809)
            let! v5810 = v5810 
            let v5811 : System.Threading.CancellationToken = v5810 
            let v5812 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v5811.Register
            let v5813 : (unit -> unit) = closure67(v5776)
            let v5814 : System.Threading.CancellationTokenRegistration = v5812 v5813
            use v5814 = v5814 
            let v5815 : System.Threading.CancellationTokenRegistration = v5814 
            let v5816 : Async<int32> = method159(v5776, v5778, v5811)
            let! v5816 = v5816 
            let v5817 : int32 = v5816 
            let v5818 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v5819 : string seq = v5818 v5778
            let v5822 : (string seq -> string seq) = Seq.rev
            let v5823 : string seq = v5822 v5819
            let v5826 : string = method63()
            let v5827 : (string -> (string seq -> string)) = String.concat
            let v5828 : (string seq -> string) = v5827 v5826
            let v5829 : string = v5828 v5823
            let v5833 : unit = ()
            let v5834 : (unit -> unit) = closure69(v5817, v5829)
            let v5835 : unit = (fun () -> v5834 (); v5833) ()
            return struct (v5817, v5829) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7520 : Async<struct (int32 * string)> = _let'_v5645 
    let _run_target_args'_v7 = v7520 
    #endif
    let v7521 : Async<struct (int32 * string)> = _run_target_args'_v7 
    v7521
and method145 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method146(v0, v1, v2, v3, v4, v5, v6)
and method89 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method90(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US17 = method91(v8)
    let struct (v20 : string, v21 : US5) =
        match v9 with
        | US17_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US5)> v13
        | US17_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v25 : string =
        match v21 with
        | US5_1 -> (* None *)
            let v23 : string = ""
            v23
        | US5_0(v22) -> (* Some *)
            v22
    let v26 : US25 = method105(v25)
    let v34 : (string []) =
        match v26 with
        | US25_1(v28) -> (* Error *)
            let v29 : string = $"resultm.get / Result value was Error: {v28}"
            failwith<(string [])> v29
        | US25_0(v27) -> (* Ok *)
            v27
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "x"
    let v40 : string = Fable.Core.RustInterop.emitRustExpr () v39 
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "&*$0"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v42 
    let _run_target_args'_v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "&*$0"
    let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "&*$0"
    let v47 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v46 
    let _run_target_args'_v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _run_target_args'_v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _run_target_args'_v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _run_target_args'_v41 = v54 
    #endif
#else
    let v57 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _run_target_args'_v41 = v57 
    #endif
    let v60 : Ref<Str> = _run_target_args'_v41 
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "String::from($0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "String::from($0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _run_target_args'_v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v72 : std_string_String = v60 |> unbox<std_string_String>
    let _run_target_args'_v65 = v72 
    #endif
#if FABLE_COMPILER_PYTHON
    let v75 : std_string_String = v60 |> unbox<std_string_String>
    let _run_target_args'_v65 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = v60 |> unbox<std_string_String>
    let _run_target_args'_v65 = v78 
    #endif
#else
    let v81 : std_string_String = v60 |> unbox<std_string_String>
    let _run_target_args'_v65 = v81 
    #endif
    let v84 : std_string_String = _run_target_args'_v65 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v84 v89 
    let v91 : string = "_vec_map"
    let v92 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure42(v0, v1, v2, v3, v4, v5, v6, v20, v92)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v138 : bool = true
    let mutable _capture_v138 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v139 : string = "std::process::Command::new(&*$0)"
    let v140 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v20 v139 
    let v141 : string = "true; let mut v140 = v140"
    let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : string = "true; std::process::Command::args(&mut v140, &*$0)"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr v92 v143 
    let v145 : string = "$0"
    let v146 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v140 v145 
    let v147 : string = "std::process::Stdio::piped()"
    let v148 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = "true; let mut v146 = v146"
    let v150 : bool = Fable.Core.RustInterop.emitRustExpr () v149 
    let v151 : string = "true; std::process::Command::stdout(&mut v146, std::process::Stdio::piped())"
    let v152 : bool = Fable.Core.RustInterop.emitRustExpr () v151 
    let v153 : string = "$0"
    let v154 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v146 v153 
    let v155 : string = "std::process::Stdio::piped()"
    let v156 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v155 
    let v157 : string = "true; let mut v154 = v154"
    let v158 : bool = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "true; std::process::Command::stderr(&mut v154, std::process::Stdio::piped())"
    let v160 : bool = Fable.Core.RustInterop.emitRustExpr () v159 
    let v161 : string = "$0"
    let v162 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v154 v161 
    let v163 : string = "std::process::Stdio::piped()"
    let v164 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : string = "true; let mut v162 = v162"
    let v166 : bool = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = "true; std::process::Command::stdin(&mut v162, std::process::Stdio::piped())"
    let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
    let v169 : string = "$0"
    let v170 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v162 v169 
    let v171 : (string -> US5) = method6()
    let v172 : US5 option = v6 |> Option.map v171 
    let v183 : US5 = US5_1
    let v184 : US5 = v172 |> Option.defaultValue v183 
    let v198 : std_process_Command =
        match v184 with
        | US5_1 -> (* None *)
            let v195 : string = $"v170"
            let v196 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v195 
            v196
        | US5_0(v188) -> (* Some *)
            let v189 : string = "true; let mut v170 = v170"
            let v190 : bool = Fable.Core.RustInterop.emitRustExpr () v189 
            let v191 : string = "true; std::process::Command::current_dir(&mut v170, &*$0)"
            let v192 : bool = Fable.Core.RustInterop.emitRustExpr v188 v191 
            let v193 : string = $"v170"
            let v194 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v193 
            v194
    let v199 : uint64 = System.Convert.ToUInt64 v2.Length
    let v200 : bool = v199 = 0UL
    let v220 : std_process_Command =
        if v200 then
            v198
        else
            let v201 : string = "$0.to_vec()"
            let v202 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v201 
            let v203 : string = "true; let _vec_fold_ = $0.into_iter().fold(v198, |acc, x| { //"
            let v204 : bool = Fable.Core.RustInterop.emitRustExpr v202 v203 
            let v205 : string = "acc"
            let v206 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v205 
            let v207 : string = "x"
            let struct (v208 : string, v209 : string) = Fable.Core.RustInterop.emitRustExpr () v207 
            let v210 : string = "true; let mut v206 = v206"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : string = "true; std::process::Command::env(&mut v206, &*$0, &*$1)"
            let v213 : bool = Fable.Core.RustInterop.emitRustExpr struct (v208, v209) v212 
            let v214 : string = "$0"
            let v215 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v206 v214 
            let v216 : string = "true; $0 })"
            let v217 : bool = Fable.Core.RustInterop.emitRustExpr v215 v216 
            let v218 : string = "_vec_fold_"
            let v219 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v218 
            v219
    let v221 : string = "true; let mut v220 = v220"
    let v222 : bool = Fable.Core.RustInterop.emitRustExpr () v221 
    let v223 : string = "std::process::Command::spawn(&mut v220)"
    let v224 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : (std_io_Error -> std_string_String) = method67()
    (* run_target_args'
    let v226 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v227 : string = "$0.map_err(|x| $1(x))"
    let v228 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v227 
    let _run_target_args'_v226 = v228 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v229 : string = "$0.map_err(|x| $1(x))"
    let v230 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v229 
    let _run_target_args'_v226 = v230 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : string = "$0.map_err(|x| $1(x))"
    let v232 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v231 
    let _run_target_args'_v226 = v232 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v233 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _run_target_args'_v226 = v233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v234 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _run_target_args'_v226 = v234 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v235 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _run_target_args'_v226 = v235 
    #endif
#else
    let v236 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _run_target_args'_v226 = v236 
    #endif
    let v237 : Result<std_process_Child, std_string_String> = _run_target_args'_v226 
    let v240 : (std_process_Child option -> std_process_Child option) = method117()
    let v241 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v242 : bool = Fable.Core.RustInterop.emitRustExpr v237 v241 
    let v243 : string = "x"
    let v244 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v243 
    let v245 : std_process_Child option = Some v244 
    let v248 : std_process_Child option = v240 v245
    let v249 : string = "std::sync::Mutex::new(v248)"
    let v250 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v249 
    let v251 : string = "std::sync::Arc::new(v250)"
    let v252 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "true; $0 })"
    let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "_result_map_"
    let v256 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v255 
    let v257 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method118()
    let v258 : (std_string_String -> US27) = method119()
    let v259 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v260 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v257, v258, v256) v259 
    let struct (v1396 : int32, v1397 : US7, v1398 : US28) =
        match v260 with
        | US27_1(v1348) -> (* Error *)
            let v1349 : unit = ()
            let v1350 : (unit -> unit) = closure46(v1348)
            let v1351 : unit = (fun () -> v1350 (); v1349) ()
            let v1391 : US7 = US7_0(v1348)
            let v1392 : US28 = US28_1
            struct (-1, v1391, v1392)
        | US27_0(v261) -> (* Ok *)
            let v262 : string = "true; let _capture = (|| { //"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0"
            let v265 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v264 
            let v266 : string = "v265.lock()"
            let v267 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v266 
            (* run_target_args'
            let v268 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v269 : string = "$0.unwrap()"
            let v270 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v269 
            let _run_target_args'_v268 = v270 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v271 : string = "$0.unwrap()"
            let v272 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v271 
            let _run_target_args'_v268 = v272 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v273 : string = "$0.unwrap()"
            let v274 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v273 
            let _run_target_args'_v268 = v274 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v275 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v268 = v275 
            #endif
#if FABLE_COMPILER_PYTHON
            let v276 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v268 = v276 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v277 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v268 = v277 
            #endif
#else
            let v278 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v268 = v278 
            #endif
            let v279 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v268 
            let v282 : std_sync_MutexGuard<std_process_Child option> = method122(v279)
            let v283 : string = "true; let mut v282 = v282"
            let v284 : bool = Fable.Core.RustInterop.emitRustExpr () v283 
            let v285 : string = "&mut $0"
            let v286 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v282 v285 
            let v287 : string = "$0.as_mut()"
            let v288 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v286 v287 
            let v289 : string = "$0.unwrap()"
            let v290 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v288 v289 
            let v291 : string = "&mut $0.stdout"
            let v292 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v290 v291 
            let v293 : string = "Option::take($0)"
            let v294 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v292 v293 
            let v295 : string = "$0.unwrap()"
            let v296 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v294 v295 
            let v297 : string = "true; $0 })()"
            let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
            let v299 : string = "_capture"
            let v300 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v299 
            let v301 : string = "true; let _capture = (|| { //"
            let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
            let v303 : string = "$0"
            let v304 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v303 
            let v305 : string = "v304.lock()"
            let v306 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v305 
            (* run_target_args'
            let v307 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v308 : string = "$0.unwrap()"
            let v309 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v308 
            let _run_target_args'_v307 = v309 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v310 : string = "$0.unwrap()"
            let v311 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v310 
            let _run_target_args'_v307 = v311 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v312 : string = "$0.unwrap()"
            let v313 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v312 
            let _run_target_args'_v307 = v313 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v314 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v307 = v314 
            #endif
#if FABLE_COMPILER_PYTHON
            let v315 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v307 = v315 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v316 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v307 = v316 
            #endif
#else
            let v317 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v307 = v317 
            #endif
            let v318 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v307 
            let v321 : std_sync_MutexGuard<std_process_Child option> = method122(v318)
            let v322 : string = "true; let mut v321 = v321"
            let v323 : bool = Fable.Core.RustInterop.emitRustExpr () v322 
            let v324 : string = "&mut $0"
            let v325 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v321 v324 
            let v326 : string = "$0.as_mut()"
            let v327 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v325 v326 
            let v328 : string = "$0.unwrap()"
            let v329 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v327 v328 
            let v330 : string = "&mut $0.stderr"
            let v331 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v329 v330 
            let v332 : string = "Option::take($0)"
            let v333 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "$0.unwrap()"
            let v335 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "true; $0 })()"
            let v337 : bool = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "_capture"
            let v339 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v338 
            let v340 : string = "true; let _capture = (|| { //"
            let v341 : bool = Fable.Core.RustInterop.emitRustExpr () v340 
            let v342 : string = "$0"
            let v343 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v342 
            let v344 : string = "v343.lock()"
            let v345 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v344 
            (* run_target_args'
            let v346 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v347 : string = "$0.unwrap()"
            let v348 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v347 
            let _run_target_args'_v346 = v348 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v349 : string = "$0.unwrap()"
            let v350 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v349 
            let _run_target_args'_v346 = v350 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v351 : string = "$0.unwrap()"
            let v352 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v351 
            let _run_target_args'_v346 = v352 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v353 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v346 = v353 
            #endif
#if FABLE_COMPILER_PYTHON
            let v354 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v346 = v354 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v355 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v346 = v355 
            #endif
#else
            let v356 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v346 = v356 
            #endif
            let v357 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v346 
            let v360 : std_sync_MutexGuard<std_process_Child option> = method122(v357)
            let v361 : string = "true; let mut v360 = v360"
            let v362 : bool = Fable.Core.RustInterop.emitRustExpr () v361 
            let v363 : string = "&mut $0"
            let v364 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v360 v363 
            let v365 : string = "$0.as_mut()"
            let v366 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v364 v365 
            let v367 : string = "$0.unwrap()"
            let v368 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v366 v367 
            let v369 : string = "&mut $0.stdin"
            let v370 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v368 v369 
            let v371 : string = "Option::take($0)"
            let v372 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v370 v371 
            let v373 : string = "$0.unwrap()"
            let v374 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v372 v373 
            let v375 : std_process_ChildStdin option = Some v374 
            let v378 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method123()
            let v379 : std_process_ChildStdin option = v378 v375
            let v380 : string = "std::sync::Mutex::new(v379)"
            let v381 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v380 
            let v382 : string = "std::sync::Arc::new(v381)"
            let v383 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v382 
            let v384 : string = "true; $0 })()"
            let v385 : bool = Fable.Core.RustInterop.emitRustExpr v383 v384 
            let v386 : string = "_capture"
            let v387 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v386 
            let v388 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v389 : std_sync_mpsc_Sender<std_string_String>, v390 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v388 
            let v391 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method124()
            let v392 : std_sync_mpsc_Sender<std_string_String> = v391 v389
            let v393 : string = "std::sync::Mutex::new(v392)"
            let v394 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v393 
            let v395 : string = "std::sync::Arc::new(v394)"
            let v396 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v395 
            let v397 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method125()
            let v398 : std_sync_mpsc_Sender<std_string_String> = v397 v389
            let v399 : string = "std::sync::Mutex::new(v398)"
            let v400 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v399 
            let v401 : string = "std::sync::Arc::new(v400)"
            let v402 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v401 
            let v403 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method126()
            let v404 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v403 v390
            let v405 : string = "std::sync::Mutex::new(v404)"
            let v406 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v405 
            let v407 : string = "std::sync::Arc::new(v406)"
            let v408 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v407 
            let v409 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v410 : bool = Fable.Core.RustInterop.emitRustExpr () v409 
            let v411 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v412 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v300 v411 
            let v413 : string = "std::io::BufReader::new($0)"
            let v414 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v412 v413 
            let v415 : string = "std::io::BufRead::lines(v414)"
            let v416 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v415 
            let v417 : string = "true; let mut v416 = v416; let _iter_try_for_each = v416.try_for_each(|x| { //"
            let v418 : bool = Fable.Core.RustInterop.emitRustExpr () v417 
            let v419 : string = "x"
            let v420 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v419 
            let v421 : string = "$0.clone()"
            let v422 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v396 v421 
            let v423 : (std_io_Error -> std_string_String) = method67()
            (* run_target_args'
            let v424 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v425 : string = "$0.map_err(|x| $1(x))"
            let v426 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v425 
            let _run_target_args'_v424 = v426 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v427 : string = "$0.map_err(|x| $1(x))"
            let v428 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v427 
            let _run_target_args'_v424 = v428 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v429 : string = "$0.map_err(|x| $1(x))"
            let v430 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v429 
            let _run_target_args'_v424 = v430 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v431 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _run_target_args'_v424 = v431 
            #endif
#if FABLE_COMPILER_PYTHON
            let v432 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _run_target_args'_v424 = v432 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v433 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _run_target_args'_v424 = v433 
            #endif
#else
            let v434 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _run_target_args'_v424 = v434 
            #endif
            let v435 : Result<std_string_String, std_string_String> = _run_target_args'_v424 
            let v438 : (std_string_String -> US29) = method127()
            let v439 : (std_string_String -> US29) = method128()
            let v440 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v441 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v438, v439, v435) v440 
            let v636 : std_string_String =
                match v441 with
                | US29_1(v543) -> (* Error *)
                    let v544 : unit = ()
                    let v545 : (unit -> unit) = closure52(v5, v543)
                    let v546 : unit = (fun () -> v545 (); v544) ()
                    let v586 : string = $"\u001b[4;7m{v543}\u001b[0m"
                    (* run_target_args'
                    let v587 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v588 : string = "&*$0"
                    let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v588 
                    let _run_target_args'_v587 = v589 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v590 : string = "&*$0"
                    let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v590 
                    let _run_target_args'_v587 = v591 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v592 : string = "&*$0"
                    let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v592 
                    let _run_target_args'_v587 = v593 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v594 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _run_target_args'_v587 = v594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v597 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _run_target_args'_v587 = v597 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v600 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _run_target_args'_v587 = v600 
                    #endif
#else
                    let v603 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _run_target_args'_v587 = v603 
                    #endif
                    let v606 : Ref<Str> = _run_target_args'_v587 
                    (* run_target_args'
                    let v611 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v612 : string = "String::from($0)"
                    let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v612 
                    let _run_target_args'_v611 = v613 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v614 : string = "String::from($0)"
                    let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v614 
                    let _run_target_args'_v611 = v615 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v616 : string = "String::from($0)"
                    let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v616 
                    let _run_target_args'_v611 = v617 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v618 : std_string_String = v606 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v618 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v621 : std_string_String = v606 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v621 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v624 : std_string_String = v606 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v624 
                    #endif
#else
                    let v627 : std_string_String = v606 |> unbox<std_string_String>
                    let _run_target_args'_v611 = v627 
                    #endif
                    let v630 : std_string_String = _run_target_args'_v611 
                    v630
                | US29_0(v442) -> (* Ok *)
                    let v443 : string = "fable_library_rust::String_::fromString($0)"
                    let v444 : string = Fable.Core.RustInterop.emitRustExpr v442 v443 
                    let v445 : string = "encoding_rs::UTF_8"
                    let v446 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v445 
                    let v447 : string = "$0.encode(&*$1).0"
                    let v448 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v446, v444) v447 
                    let v449 : string = "$0.as_ref()"
                    let v450 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v448 v449 
                    let v451 : string = "std::str::from_utf8($0)"
                    let v452 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v450 v451 
                    (* run_target_args'
                    let v453 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v454 : string = "$0.unwrap()"
                    let v455 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v454 
                    let _run_target_args'_v453 = v455 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v456 : string = "$0.unwrap()"
                    let v457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v456 
                    let _run_target_args'_v453 = v457 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v458 : string = "$0.unwrap()"
                    let v459 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v458 
                    let _run_target_args'_v453 = v459 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v460 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v453 = v460 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v461 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v453 = v461 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v462 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v453 = v462 
                    #endif
#else
                    let v463 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v453 = v463 
                    #endif
                    let v464 : Ref<Str> = _run_target_args'_v453 
                    (* run_target_args'
                    let v467 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v468 : string = "String::from($0)"
                    let v469 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v468 
                    let _run_target_args'_v467 = v469 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v470 : string = "String::from($0)"
                    let v471 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v470 
                    let _run_target_args'_v467 = v471 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v472 : string = "String::from($0)"
                    let v473 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v472 
                    let _run_target_args'_v467 = v473 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v474 : std_string_String = v464 |> unbox<std_string_String>
                    let _run_target_args'_v467 = v474 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v477 : std_string_String = v464 |> unbox<std_string_String>
                    let _run_target_args'_v467 = v477 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v480 : std_string_String = v464 |> unbox<std_string_String>
                    let _run_target_args'_v467 = v480 
                    #endif
#else
                    let v483 : std_string_String = v464 |> unbox<std_string_String>
                    let _run_target_args'_v467 = v483 
                    #endif
                    let v486 : std_string_String = _run_target_args'_v467 
                    let v491 : string = "fable_library_rust::String_::fromString($0)"
                    let v492 : string = Fable.Core.RustInterop.emitRustExpr v486 v491 
                    let v493 : string = $"> {v492}"
                    if v5 then
                        let v494 : unit = ()
                        let v495 : (unit -> unit) = closure53(v493)
                        let v496 : unit = (fun () -> v495 (); v494) ()
                        ()
                    else
                        let v539 : unit = ()
                        let v540 : (unit -> unit) = closure10(v493)
                        let v541 : unit = (fun () -> v540 (); v539) ()
                        ()
                    v486
            let v637 : string = "$0"
            let v638 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v422 v637 
            let v639 : string = "v638.lock()"
            let v640 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v639 
            (* run_target_args'
            let v641 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v642 : string = "$0.unwrap()"
            let v643 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v642 
            let _run_target_args'_v641 = v643 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v644 : string = "$0.unwrap()"
            let v645 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v644 
            let _run_target_args'_v641 = v645 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v646 : string = "$0.unwrap()"
            let v647 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v646 
            let _run_target_args'_v641 = v647 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v648 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v641 = v648 
            #endif
#if FABLE_COMPILER_PYTHON
            let v649 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v641 = v649 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v650 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v641 = v650 
            #endif
#else
            let v651 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v641 = v651 
            #endif
            let v652 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v641 
            let v655 : string = "&$0"
            let v656 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v652 v655 
            let v657 : string = "$0.send($1)"
            let v658 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v656, v636) v657 
            let v659 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method133()
            (* run_target_args'
            let v660 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v661 : string = "$0.map_err(|x| $1(x))"
            let v662 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v661 
            let _run_target_args'_v660 = v662 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v663 : string = "$0.map_err(|x| $1(x))"
            let v664 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v663 
            let _run_target_args'_v660 = v664 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v665 : string = "$0.map_err(|x| $1(x))"
            let v666 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v665 
            let _run_target_args'_v660 = v666 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v667 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _run_target_args'_v660 = v667 
            #endif
#if FABLE_COMPILER_PYTHON
            let v668 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _run_target_args'_v660 = v668 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v669 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _run_target_args'_v660 = v669 
            #endif
#else
            let v670 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _run_target_args'_v660 = v670 
            #endif
            let v671 : Result<unit, std_string_String> = _run_target_args'_v660 
            let v674 : string = "$0"
            let v675 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v671 v674 
            let v676 : string = "true; $0 }); //"
            let v677 : bool = Fable.Core.RustInterop.emitRustExpr v675 v676 
            let v678 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v679 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v678 
            let v680 : Result<unit, string> = method134(v679)
            let v681 : string = ""
            let v682 : string = "}"
            let v683 : string = v681 + v682 
            let x = v680 //
            let v684 : _ = x
            let v685 : unit = ()
            (* run_target_args'
            let v686 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v687 : string = $"true; let _fix_closure_v685 = $0"
            let v688 : bool = Fable.Core.RustInterop.emitRustExpr v684 v687 
            let _run_target_args'_v686 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v689 : string = $"true; let _fix_closure_v685 = $0"
            let v690 : bool = Fable.Core.RustInterop.emitRustExpr v684 v689 
            let _run_target_args'_v686 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v691 : string = $"true; let _fix_closure_v685 = $0"
            let v692 : bool = Fable.Core.RustInterop.emitRustExpr v684 v691 
            let _run_target_args'_v686 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v686 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v686 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v686 = false 
            #endif
#else
            let _run_target_args'_v686 = false 
            #endif
            let v693 : bool = _run_target_args'_v686 
            let v695 : string = $"true; _fix_closure_v685 " + v683 + "); " + v681 + " // rust.fix_closure'"
            let v696 : bool = Fable.Core.RustInterop.emitRustExpr () v695 
            let v697 : string = "__spawn"
            let v698 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v697 
            let v699 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v700 : bool = Fable.Core.RustInterop.emitRustExpr () v699 
            let v701 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v702 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v339 v701 
            let v703 : string = "std::io::BufReader::new($0)"
            let v704 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v702 v703 
            let v705 : string = "std::io::BufRead::lines(v704)"
            let v706 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v705 
            let v707 : string = "true; let mut v706 = v706; let _iter_try_for_each = v706.try_for_each(|x| { //"
            let v708 : bool = Fable.Core.RustInterop.emitRustExpr () v707 
            let v709 : string = "x"
            let v710 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v709 
            let v711 : string = "$0.clone()"
            let v712 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v402 v711 
            let v713 : (std_io_Error -> std_string_String) = method67()
            (* run_target_args'
            let v714 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v715 : string = "$0.map_err(|x| $1(x))"
            let v716 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v710, v713) v715 
            let _run_target_args'_v714 = v716 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v717 : string = "$0.map_err(|x| $1(x))"
            let v718 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v710, v713) v717 
            let _run_target_args'_v714 = v718 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v719 : string = "$0.map_err(|x| $1(x))"
            let v720 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v710, v713) v719 
            let _run_target_args'_v714 = v720 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v721 : Result<std_string_String, std_string_String> = match v710 with Ok x -> Ok x | Error x -> Error (v713 x)
            let _run_target_args'_v714 = v721 
            #endif
#if FABLE_COMPILER_PYTHON
            let v722 : Result<std_string_String, std_string_String> = match v710 with Ok x -> Ok x | Error x -> Error (v713 x)
            let _run_target_args'_v714 = v722 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v723 : Result<std_string_String, std_string_String> = match v710 with Ok x -> Ok x | Error x -> Error (v713 x)
            let _run_target_args'_v714 = v723 
            #endif
#else
            let v724 : Result<std_string_String, std_string_String> = match v710 with Ok x -> Ok x | Error x -> Error (v713 x)
            let _run_target_args'_v714 = v724 
            #endif
            let v725 : Result<std_string_String, std_string_String> = _run_target_args'_v714 
            let v728 : (std_string_String -> US29) = method127()
            let v729 : (std_string_String -> US29) = method128()
            let v730 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v731 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v728, v729, v725) v730 
            let v974 : std_string_String =
                match v731 with
                | US29_1(v881) -> (* Error *)
                    let v882 : unit = ()
                    let v883 : (unit -> unit) = closure52(v5, v881)
                    let v884 : unit = (fun () -> v883 (); v882) ()
                    let v924 : string = $"\u001b[4;7m{v881}\u001b[0m"
                    (* run_target_args'
                    let v925 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v926 : string = "&*$0"
                    let v927 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v924 v926 
                    let _run_target_args'_v925 = v927 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v928 : string = "&*$0"
                    let v929 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v924 v928 
                    let _run_target_args'_v925 = v929 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v930 : string = "&*$0"
                    let v931 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v924 v930 
                    let _run_target_args'_v925 = v931 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v932 : Ref<Str> = v924 |> unbox<Ref<Str>>
                    let _run_target_args'_v925 = v932 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v935 : Ref<Str> = v924 |> unbox<Ref<Str>>
                    let _run_target_args'_v925 = v935 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v938 : Ref<Str> = v924 |> unbox<Ref<Str>>
                    let _run_target_args'_v925 = v938 
                    #endif
#else
                    let v941 : Ref<Str> = v924 |> unbox<Ref<Str>>
                    let _run_target_args'_v925 = v941 
                    #endif
                    let v944 : Ref<Str> = _run_target_args'_v925 
                    (* run_target_args'
                    let v949 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v950 : string = "String::from($0)"
                    let v951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v944 v950 
                    let _run_target_args'_v949 = v951 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v952 : string = "String::from($0)"
                    let v953 : std_string_String = Fable.Core.RustInterop.emitRustExpr v944 v952 
                    let _run_target_args'_v949 = v953 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v954 : string = "String::from($0)"
                    let v955 : std_string_String = Fable.Core.RustInterop.emitRustExpr v944 v954 
                    let _run_target_args'_v949 = v955 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v956 : std_string_String = v944 |> unbox<std_string_String>
                    let _run_target_args'_v949 = v956 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v959 : std_string_String = v944 |> unbox<std_string_String>
                    let _run_target_args'_v949 = v959 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v962 : std_string_String = v944 |> unbox<std_string_String>
                    let _run_target_args'_v949 = v962 
                    #endif
#else
                    let v965 : std_string_String = v944 |> unbox<std_string_String>
                    let _run_target_args'_v949 = v965 
                    #endif
                    let v968 : std_string_String = _run_target_args'_v949 
                    v968
                | US29_0(v732) -> (* Ok *)
                    let v733 : string = "fable_library_rust::String_::fromString($0)"
                    let v734 : string = Fable.Core.RustInterop.emitRustExpr v732 v733 
                    let v735 : string = "encoding_rs::UTF_8"
                    let v736 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v735 
                    let v737 : string = "$0.encode(&*$1).0"
                    let v738 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v736, v734) v737 
                    let v739 : string = "$0.as_ref()"
                    let v740 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v738 v739 
                    let v741 : string = "std::str::from_utf8($0)"
                    let v742 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v740 v741 
                    (* run_target_args'
                    let v743 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v744 : string = "$0.unwrap()"
                    let v745 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v742 v744 
                    let _run_target_args'_v743 = v745 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v746 : string = "$0.unwrap()"
                    let v747 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v742 v746 
                    let _run_target_args'_v743 = v747 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v748 : string = "$0.unwrap()"
                    let v749 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v742 v748 
                    let _run_target_args'_v743 = v749 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v750 : Ref<Str> = match v742 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v743 = v750 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v751 : Ref<Str> = match v742 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v743 = v751 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v752 : Ref<Str> = match v742 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v743 = v752 
                    #endif
#else
                    let v753 : Ref<Str> = match v742 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v743 = v753 
                    #endif
                    let v754 : Ref<Str> = _run_target_args'_v743 
                    (* run_target_args'
                    let v757 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v758 : string = "String::from($0)"
                    let v759 : std_string_String = Fable.Core.RustInterop.emitRustExpr v754 v758 
                    let _run_target_args'_v757 = v759 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v760 : string = "String::from($0)"
                    let v761 : std_string_String = Fable.Core.RustInterop.emitRustExpr v754 v760 
                    let _run_target_args'_v757 = v761 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v762 : string = "String::from($0)"
                    let v763 : std_string_String = Fable.Core.RustInterop.emitRustExpr v754 v762 
                    let _run_target_args'_v757 = v763 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v764 : std_string_String = v754 |> unbox<std_string_String>
                    let _run_target_args'_v757 = v764 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v767 : std_string_String = v754 |> unbox<std_string_String>
                    let _run_target_args'_v757 = v767 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v770 : std_string_String = v754 |> unbox<std_string_String>
                    let _run_target_args'_v757 = v770 
                    #endif
#else
                    let v773 : std_string_String = v754 |> unbox<std_string_String>
                    let _run_target_args'_v757 = v773 
                    #endif
                    let v776 : std_string_String = _run_target_args'_v757 
                    let v781 : string = "fable_library_rust::String_::fromString($0)"
                    let v782 : string = Fable.Core.RustInterop.emitRustExpr v776 v781 
                    let v783 : string = $"! {v782}"
                    if v5 then
                        let v784 : unit = ()
                        let v785 : (unit -> unit) = closure53(v783)
                        let v786 : unit = (fun () -> v785 (); v784) ()
                        ()
                    else
                        let v828 : unit = ()
                        let v829 : (unit -> unit) = closure10(v783)
                        let v830 : unit = (fun () -> v829 (); v828) ()
                        ()
                    let v832 : string = $"\u001b[4;7m{v776}\u001b[0m"
                    (* run_target_args'
                    let v833 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v834 : string = "&*$0"
                    let v835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v832 v834 
                    let _run_target_args'_v833 = v835 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v836 : string = "&*$0"
                    let v837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v832 v836 
                    let _run_target_args'_v833 = v837 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v838 : string = "&*$0"
                    let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v832 v838 
                    let _run_target_args'_v833 = v839 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v840 : Ref<Str> = v832 |> unbox<Ref<Str>>
                    let _run_target_args'_v833 = v840 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v843 : Ref<Str> = v832 |> unbox<Ref<Str>>
                    let _run_target_args'_v833 = v843 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v846 : Ref<Str> = v832 |> unbox<Ref<Str>>
                    let _run_target_args'_v833 = v846 
                    #endif
#else
                    let v849 : Ref<Str> = v832 |> unbox<Ref<Str>>
                    let _run_target_args'_v833 = v849 
                    #endif
                    let v852 : Ref<Str> = _run_target_args'_v833 
                    (* run_target_args'
                    let v857 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v858 : string = "String::from($0)"
                    let v859 : std_string_String = Fable.Core.RustInterop.emitRustExpr v852 v858 
                    let _run_target_args'_v857 = v859 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v860 : string = "String::from($0)"
                    let v861 : std_string_String = Fable.Core.RustInterop.emitRustExpr v852 v860 
                    let _run_target_args'_v857 = v861 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v862 : string = "String::from($0)"
                    let v863 : std_string_String = Fable.Core.RustInterop.emitRustExpr v852 v862 
                    let _run_target_args'_v857 = v863 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v864 : std_string_String = v852 |> unbox<std_string_String>
                    let _run_target_args'_v857 = v864 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v867 : std_string_String = v852 |> unbox<std_string_String>
                    let _run_target_args'_v857 = v867 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v870 : std_string_String = v852 |> unbox<std_string_String>
                    let _run_target_args'_v857 = v870 
                    #endif
#else
                    let v873 : std_string_String = v852 |> unbox<std_string_String>
                    let _run_target_args'_v857 = v873 
                    #endif
                    let v876 : std_string_String = _run_target_args'_v857 
                    v876
            let v975 : string = "$0"
            let v976 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v712 v975 
            let v977 : string = "v976.lock()"
            let v978 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v977 
            (* run_target_args'
            let v979 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v980 : string = "$0.unwrap()"
            let v981 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v978 v980 
            let _run_target_args'_v979 = v981 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v982 : string = "$0.unwrap()"
            let v983 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v978 v982 
            let _run_target_args'_v979 = v983 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v984 : string = "$0.unwrap()"
            let v985 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v978 v984 
            let _run_target_args'_v979 = v985 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v986 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v978 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v979 = v986 
            #endif
#if FABLE_COMPILER_PYTHON
            let v987 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v978 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v979 = v987 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v988 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v978 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v979 = v988 
            #endif
#else
            let v989 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v978 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v979 = v989 
            #endif
            let v990 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v979 
            let v993 : string = "&$0"
            let v994 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v990 v993 
            let v995 : string = "$0.send($1)"
            let v996 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v994, v974) v995 
            let v997 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method133()
            (* run_target_args'
            let v998 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v999 : string = "$0.map_err(|x| $1(x))"
            let v1000 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v996, v997) v999 
            let _run_target_args'_v998 = v1000 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1001 : string = "$0.map_err(|x| $1(x))"
            let v1002 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v996, v997) v1001 
            let _run_target_args'_v998 = v1002 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1003 : string = "$0.map_err(|x| $1(x))"
            let v1004 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v996, v997) v1003 
            let _run_target_args'_v998 = v1004 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1005 : Result<unit, std_string_String> = match v996 with Ok x -> Ok x | Error x -> Error (v997 x)
            let _run_target_args'_v998 = v1005 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1006 : Result<unit, std_string_String> = match v996 with Ok x -> Ok x | Error x -> Error (v997 x)
            let _run_target_args'_v998 = v1006 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1007 : Result<unit, std_string_String> = match v996 with Ok x -> Ok x | Error x -> Error (v997 x)
            let _run_target_args'_v998 = v1007 
            #endif
#else
            let v1008 : Result<unit, std_string_String> = match v996 with Ok x -> Ok x | Error x -> Error (v997 x)
            let _run_target_args'_v998 = v1008 
            #endif
            let v1009 : Result<unit, std_string_String> = _run_target_args'_v998 
            let v1012 : string = "$0"
            let v1013 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1009 v1012 
            let v1014 : string = "true; $0 }); //"
            let v1015 : bool = Fable.Core.RustInterop.emitRustExpr v1013 v1014 
            let v1016 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1017 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1016 
            let v1018 : Result<unit, string> = method134(v1017)
            let v1019 : string = v681 + v682 
            let x = v1018 //
            let v1020 : _ = x
            let v1021 : unit = ()
            (* run_target_args'
            let v1022 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1023 : string = $"true; let _fix_closure_v1021 = $0"
            let v1024 : bool = Fable.Core.RustInterop.emitRustExpr v1020 v1023 
            let _run_target_args'_v1022 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1025 : string = $"true; let _fix_closure_v1021 = $0"
            let v1026 : bool = Fable.Core.RustInterop.emitRustExpr v1020 v1025 
            let _run_target_args'_v1022 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1027 : string = $"true; let _fix_closure_v1021 = $0"
            let v1028 : bool = Fable.Core.RustInterop.emitRustExpr v1020 v1027 
            let _run_target_args'_v1022 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1022 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1022 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1022 = false 
            #endif
#else
            let _run_target_args'_v1022 = false 
            #endif
            let v1029 : bool = _run_target_args'_v1022 
            let v1031 : string = $"true; _fix_closure_v1021 " + v1019 + "); " + v681 + " // rust.fix_closure'"
            let v1032 : bool = Fable.Core.RustInterop.emitRustExpr () v1031 
            let v1033 : string = "__spawn"
            let v1034 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1033 
            let v1035 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method135()
            let v1036 : US30 option = v4 |> Option.map v1035 
            let v1047 : US30 = US30_1
            let v1048 : US30 = v1036 |> Option.defaultValue v1047 
            match v1048 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1052) -> (* Some *)
                let v1053 : string = "$0"
                let v1054 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v387 v1053 
                let v1055 : string = "v1054.lock()"
                let v1056 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1055 
                (* run_target_args'
                let v1057 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1058 : string = "$0.unwrap()"
                let v1059 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1056 v1058 
                let _run_target_args'_v1057 = v1059 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1060 : string = "$0.unwrap()"
                let v1061 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1056 v1060 
                let _run_target_args'_v1057 = v1061 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1062 : string = "$0.unwrap()"
                let v1063 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1056 v1062 
                let _run_target_args'_v1057 = v1063 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1064 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1057 = v1064 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1065 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1057 = v1065 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1066 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1057 = v1066 
                #endif
#else
                let v1067 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1056 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1057 = v1067 
                #endif
                let v1068 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1057 
                let v1071 : std_sync_MutexGuard<std_process_ChildStdin option> = method136(v1068)
                let v1072 : string = "true; let mut v1071 = v1071"
                let v1073 : bool = Fable.Core.RustInterop.emitRustExpr () v1072 
                let v1074 : string = "&mut $0"
                let v1075 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1071 v1074 
                let v1076 : string = "Option::take($0)"
                let v1077 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1075 v1076 
                let v1078 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1079 : bool = Fable.Core.RustInterop.emitRustExpr v1077 v1078 
                let v1080 : string = "x"
                let v1081 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1080 
                let v1082 : string = "std::sync::Mutex::new(v1081)"
                let v1083 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1082 
                let v1084 : string = "std::sync::Arc::new(v1083)"
                let v1085 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1084 
                let v1086 : string = "true; $0 })"
                let v1087 : bool = Fable.Core.RustInterop.emitRustExpr v1085 v1086 
                let v1088 : string = "_optionm_map_"
                let v1089 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1088 
                let v1090 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method137()
                let v1091 : US31 option = v1089 |> Option.map v1090 
                let v1102 : US31 = US31_1
                let v1103 : US31 = v1091 |> Option.defaultValue v1102 
                match v1103 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1107) -> (* Some *)
                    v1052 v1107
                    let v1108 : string = "$0"
                    let v1109 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1107 v1108 
                    let v1110 : string = "v1109.lock()"
                    let v1111 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1110 
                    (* run_target_args'
                    let v1112 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1113 : string = "$0.unwrap()"
                    let v1114 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1111 v1113 
                    let _run_target_args'_v1112 = v1114 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1115 : string = "$0.unwrap()"
                    let v1116 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1111 v1115 
                    let _run_target_args'_v1112 = v1116 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1117 : string = "$0.unwrap()"
                    let v1118 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1111 v1117 
                    let _run_target_args'_v1112 = v1118 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1119 : std_sync_MutexGuard<std_process_ChildStdin> = match v1111 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1112 = v1119 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1120 : std_sync_MutexGuard<std_process_ChildStdin> = match v1111 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1112 = v1120 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1121 : std_sync_MutexGuard<std_process_ChildStdin> = match v1111 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1112 = v1121 
                    #endif
#else
                    let v1122 : std_sync_MutexGuard<std_process_ChildStdin> = match v1111 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1112 = v1122 
                    #endif
                    let v1123 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1112 
                    let v1126 : std_sync_MutexGuard<std_process_ChildStdin> = method138(v1123)
                    let v1127 : string = "true; let mut v1126 = v1126"
                    let v1128 : bool = Fable.Core.RustInterop.emitRustExpr () v1127 
                    let v1129 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1130 : bool = Fable.Core.RustInterop.emitRustExpr v1126 v1129 
                    ()
            let v1131 : string = "$0"
            let v1132 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v1131 
            let v1133 : string = "v1132.lock()"
            let v1134 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1133 
            (* run_target_args'
            let v1135 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1136 : string = "$0.unwrap()"
            let v1137 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1134 v1136 
            let _run_target_args'_v1135 = v1137 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1138 : string = "$0.unwrap()"
            let v1139 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1134 v1138 
            let _run_target_args'_v1135 = v1139 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1140 : string = "$0.unwrap()"
            let v1141 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1134 v1140 
            let _run_target_args'_v1135 = v1141 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1142 : std_sync_MutexGuard<std_process_Child option> = match v1134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1135 = v1142 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1143 : std_sync_MutexGuard<std_process_Child option> = match v1134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1135 = v1143 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1144 : std_sync_MutexGuard<std_process_Child option> = match v1134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1135 = v1144 
            #endif
#else
            let v1145 : std_sync_MutexGuard<std_process_Child option> = match v1134 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1135 = v1145 
            #endif
            let v1146 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1135 
            let v1149 : std_sync_MutexGuard<std_process_Child option> = method122(v1146)
            let v1150 : string = "true; let mut v1149 = v1149"
            let v1151 : bool = Fable.Core.RustInterop.emitRustExpr () v1150 
            let v1152 : string = "&mut $0"
            let v1153 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1149 v1152 
            let v1154 : string = "Option::take($0)"
            let v1155 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
            let v1156 : string = "$0.unwrap()"
            let v1157 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1155 v1156 
            let v1158 : string = "$0.wait_with_output()"
            let v1159 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1157 v1158 
            let v1160 : (std_io_Error -> std_string_String) = method67()
            (* run_target_args'
            let v1161 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1162 : string = "$0.map_err(|x| $1(x))"
            let v1163 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1159, v1160) v1162 
            let _run_target_args'_v1161 = v1163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1164 : string = "$0.map_err(|x| $1(x))"
            let v1165 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1159, v1160) v1164 
            let _run_target_args'_v1161 = v1165 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1166 : string = "$0.map_err(|x| $1(x))"
            let v1167 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1159, v1160) v1166 
            let _run_target_args'_v1161 = v1167 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1168 : Result<std_process_Output, std_string_String> = match v1159 with Ok x -> Ok x | Error x -> Error (v1160 x)
            let _run_target_args'_v1161 = v1168 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1169 : Result<std_process_Output, std_string_String> = match v1159 with Ok x -> Ok x | Error x -> Error (v1160 x)
            let _run_target_args'_v1161 = v1169 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1170 : Result<std_process_Output, std_string_String> = match v1159 with Ok x -> Ok x | Error x -> Error (v1160 x)
            let _run_target_args'_v1161 = v1170 
            #endif
#else
            let v1171 : Result<std_process_Output, std_string_String> = match v1159 with Ok x -> Ok x | Error x -> Error (v1160 x)
            let _run_target_args'_v1161 = v1171 
            #endif
            let v1172 : Result<std_process_Output, std_string_String> = _run_target_args'_v1161 
            let v1175 : string = "v1034"
            let v1176 : string = v1175 + v681 
            let v1177 : string = v1176 + v681 
            let v1178 : string = "v698"
            let v1179 : string = ", "
            let v1180 : string = v1178 + v1179 
            let v1181 : string = v1180 + v1177 
            let v1182 : string = "vec![" + v1181 + "]"
            let v1183 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1182 
            let v1184 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1185 : bool = Fable.Core.RustInterop.emitRustExpr v1183 v1184 
            let v1186 : string = "x"
            let v1187 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1186 
            let v1188 : string = "std::thread::JoinHandle::join($0)"
            let v1189 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1187 v1188 
            (* run_target_args'
            let v1190 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1191 : string = "$0.unwrap()"
            let v1192 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1189 v1191 
            let _run_target_args'_v1190 = v1192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1193 : string = "$0.unwrap()"
            let v1194 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1189 v1193 
            let _run_target_args'_v1190 = v1194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1195 : string = "$0.unwrap()"
            let v1196 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1189 v1195 
            let _run_target_args'_v1190 = v1196 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1197 : Result<unit, string> = match v1189 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1190 = v1197 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1198 : Result<unit, string> = match v1189 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1190 = v1198 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1199 : Result<unit, string> = match v1189 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1190 = v1199 
            #endif
#else
            let v1200 : Result<unit, string> = match v1189 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1190 = v1200 
            #endif
            let v1201 : Result<unit, string> = _run_target_args'_v1190 
            (* run_target_args'
            let v1204 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1205 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1201 v1205 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1206 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1201 v1206 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1207 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1201 v1207 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1201 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1201 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1201 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1201 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1208 : string = $"true"
            let v1209 : bool = Fable.Core.RustInterop.emitRustExpr () v1208 
            let v1210 : string = "true; }}); { //"
            let v1211 : bool = Fable.Core.RustInterop.emitRustExpr () v1210 
            let v1212 : (std_process_Output -> US32) = method139()
            let v1213 : (std_string_String -> US32) = method140()
            let v1214 : US32 = match v1172 with Ok x -> v1212 x | Error x -> v1213 x
            match v1214 with
            | US32_1(v1297) -> (* Error *)
                let v1298 : unit = ()
                let v1299 : (unit -> unit) = closure59(v1297)
                let v1300 : unit = (fun () -> v1299 (); v1298) ()
                let v1340 : US7 = US7_0(v1297)
                let v1341 : US28 = US28_1
                struct (-2, v1340, v1341)
            | US32_0(v1215) -> (* Ok *)
                let v1216 : string = "$0.status"
                let v1217 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1215 v1216 
                let v1218 : string = "$0.code()"
                let v1219 : int32 option = Fable.Core.RustInterop.emitRustExpr v1217 v1218 
                let v1220 : (int32 -> US33) = method142()
                let v1221 : US33 option = v1219 |> Option.map v1220 
                let v1232 : US33 = US33_1
                let v1233 : US33 = v1221 |> Option.defaultValue v1232 
                match v1233 with
                | US33_1 -> (* None *)
                    let v1240 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1241 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1242 : string = "&*$0"
                    let v1243 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1240 v1242 
                    let _run_target_args'_v1241 = v1243 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1244 : string = "&*$0"
                    let v1245 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1240 v1244 
                    let _run_target_args'_v1241 = v1245 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1246 : string = "&*$0"
                    let v1247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1240 v1246 
                    let _run_target_args'_v1241 = v1247 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1248 : Ref<Str> = v1240 |> unbox<Ref<Str>>
                    let _run_target_args'_v1241 = v1248 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1251 : Ref<Str> = v1240 |> unbox<Ref<Str>>
                    let _run_target_args'_v1241 = v1251 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1254 : Ref<Str> = v1240 |> unbox<Ref<Str>>
                    let _run_target_args'_v1241 = v1254 
                    #endif
#else
                    let v1257 : Ref<Str> = v1240 |> unbox<Ref<Str>>
                    let _run_target_args'_v1241 = v1257 
                    #endif
                    let v1260 : Ref<Str> = _run_target_args'_v1241 
                    (* run_target_args'
                    let v1265 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1266 : string = "String::from($0)"
                    let v1267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1260 v1266 
                    let _run_target_args'_v1265 = v1267 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1268 : string = "String::from($0)"
                    let v1269 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1260 v1268 
                    let _run_target_args'_v1265 = v1269 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1270 : string = "String::from($0)"
                    let v1271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1260 v1270 
                    let _run_target_args'_v1265 = v1271 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1272 : std_string_String = v1260 |> unbox<std_string_String>
                    let _run_target_args'_v1265 = v1272 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1275 : std_string_String = v1260 |> unbox<std_string_String>
                    let _run_target_args'_v1265 = v1275 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1278 : std_string_String = v1260 |> unbox<std_string_String>
                    let _run_target_args'_v1265 = v1278 
                    #endif
#else
                    let v1281 : std_string_String = v1260 |> unbox<std_string_String>
                    let _run_target_args'_v1265 = v1281 
                    #endif
                    let v1284 : std_string_String = _run_target_args'_v1265 
                    let v1289 : US7 = US7_0(v1284)
                    let v1290 : US28 = US28_0(v408)
                    struct (-1, v1289, v1290)
                | US33_0(v1237) -> (* Some *)
                    let v1238 : US7 = US7_1
                    let v1239 : US28 = US28_0(v408)
                    struct (v1237, v1238, v1239)
    let v1405 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1398 with
        | US28_1 -> (* None *)
            let v1403 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1403
        | US28_0(v1399) -> (* Some *)
            let v1400 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1399 
            v1400
    let v1406 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1407 : bool = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
    let v1408 : string = "x"
    let v1409 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1408 
    let v1410 : string = "$0"
    let v1411 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
    let v1412 : string = "v1411.lock()"
    let v1413 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1412 
    (* run_target_args'
    let v1414 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1415 : string = "$0.unwrap()"
    let v1416 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1413 v1415 
    let _run_target_args'_v1414 = v1416 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1417 : string = "$0.unwrap()"
    let v1418 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1413 v1417 
    let _run_target_args'_v1414 = v1418 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1419 : string = "$0.unwrap()"
    let v1420 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1413 v1419 
    let _run_target_args'_v1414 = v1420 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1421 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1413 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1414 = v1421 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1422 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1413 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1414 = v1422 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1423 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1413 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1414 = v1423 
    #endif
#else
    let v1424 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1413 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1414 = v1424 
    #endif
    let v1425 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v1414 
    let v1428 : string = "$0.iter()"
    let v1429 : _ = Fable.Core.RustInterop.emitRustExpr v1425 v1428 
    let v1430 : string = "$0.collect::<Vec<_>>()"
    let v1431 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1429 v1430 
    let v1432 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1433 : bool = Fable.Core.RustInterop.emitRustExpr v1431 v1432 
    let v1434 : string = "x"
    let v1435 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1434 
    let v1436 : string = "fable_library_rust::String_::fromString($0)"
    let v1437 : string = Fable.Core.RustInterop.emitRustExpr v1435 v1436 
    let v1438 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1439 : bool = Fable.Core.RustInterop.emitRustExpr v1437 v1438 
    let v1440 : string = "_vec_map"
    let v1441 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1440 
    let v1442 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v1443 : (string []) = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
    let v1444 : string seq = v1443 |> Seq.ofArray
    let v1447 : string = method63()
    let v1448 : (string -> (string seq -> string)) = String.concat
    let v1449 : (string seq -> string) = v1448 v1447
    let v1450 : string = v1449 v1444
    let v1454 : string = "true; $0 })"
    let v1455 : bool = Fable.Core.RustInterop.emitRustExpr v1450 v1454 
    let v1456 : string = "_optionm_map_"
    let v1457 : string option = Fable.Core.RustInterop.emitRustExpr () v1456 
    let v1464 : US5 =
        match v1397 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1458) -> (* Some *)
            let v1459 : string = "fable_library_rust::String_::fromString($0)"
            let v1460 : string = Fable.Core.RustInterop.emitRustExpr v1458 v1459 
            US5_0(v1460)
    let v1468 : string =
        match v1464 with
        | US5_1 -> (* None *)
            let v1466 : string = ""
            v1466
        | US5_0(v1465) -> (* Some *)
            v1465
    let v1469 : string = v1457 |> Option.defaultValue v1468 
    let v1472 : unit = ()
    let v1473 : (unit -> unit) = closure61(v1396, v1469)
    let v1474 : unit = (fun () -> v1473 (); v1472) ()
    let v1515 : (int32 * string) = v1396, v1469 
    v1515 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v138 <- Some x
    let v1516 : (int32 * string) = match _capture_v138 with Some x -> x | None -> failwith "base.capture / _capture_v138=None"
    let (a, b) = v1516 
    let v2893 : int32 = a
    let v2894 : string = b
    let _run_target_args'_v7 = struct (v2893, v2894) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2899 : int32, v2900 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v7 = struct (v2899, v2900) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2905 : int32, v2906 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v7 = struct (v2905, v2906) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2911 : int32, v2912 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v7 = struct (v2911, v2912) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v2917 : int32, v2918 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v7 = struct (v2917, v2918) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v2923 : int32, v2924 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v7 = struct (v2923, v2924) 
    #endif
#else
    let v2929 : Async<struct (int32 * string)> = method145(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v2930 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2931 : int32, v2932 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v2930 = struct (v2931, v2932) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2937 : int32, v2938 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v2930 = struct (v2937, v2938) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2943 : int32, v2944 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v2930 = struct (v2943, v2944) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2949 : int32, v2950 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v2930 = struct (v2949, v2950) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2955 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2956 : int32, v2957 : string) = v2955 v2929
    let _run_target_args'_v2930 = struct (v2956, v2957) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2958 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2959 : int32, v2960 : string) = v2958 v2929
    let _run_target_args'_v2930 = struct (v2959, v2960) 
    #endif
#else
    let v2961 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2962 : int32, v2963 : string) = v2961 v2929
    let _run_target_args'_v2930 = struct (v2962, v2963) 
    #endif
    let struct (v2964 : int32, v2965 : string) = _run_target_args'_v2930 
    let _run_target_args'_v7 = struct (v2964, v2965) 
    #endif
    let struct (v2970 : int32, v2971 : string) = _run_target_args'_v7 
    struct (v2970, v2971)
and method165 (v0 : US10, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "env"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"%A{v0}"
    let v36 : string = $"{v33}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "exit_code"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "run_result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = $"{v44}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = "new_code_path"
    let v120 : string = $"{v119}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = $"{v24}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = $"{v3}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v5, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v144 : string = " }"
    let v145 : string = $"{v144}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v5, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = v5.l0
    v153
and method164 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US10, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method165(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_cuda / env install error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure70 (v0 : US10, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method164(v22, v23, v24, v25, v26, v27, v40, v41, v0, v3, v2, v1)
        method19(v42)
and closure71 () (v0 : string) : US5 =
    US5_0(v0)
and closure72 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method63()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method167 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _run_target_args'_v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _run_target_args'_v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _run_target_args'_v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v33 = v55 
    #endif
    let v58 : string = _run_target_args'_v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "run_result"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "external_command"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method166 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method167(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_cuda / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure74 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method166(v22, v23, v24, v25, v26, v27, v40, v41, v3, v1, v0, v2)
        method19(v42)
and closure73 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure74(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method169 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"{v0}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = "; "
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v5, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = "run_result"
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : string = $"{v24}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v5, v59)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v67 : string = $"{v1}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v5, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v75 : string = $"{v41}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = "new_code_path"
    let v84 : string = $"{v83}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v92 : string = $"{v24}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v2}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v5, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v41}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v5, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "external_command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v5, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v24}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v3}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = " }"
    let v142 : string = $"{v141}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v150 : string = v5.l0
    v150
and method168 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method169(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_cuda / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure75 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method168(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method170 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method170(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method171 () : string =
    let v0 : string = "fs-path"
    v0
and method172 () : string =
    let v0 : string = "command"
    v0
and method173 () : string =
    let v0 : string = "path"
    v0
and method178 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method179 () : char =
    (* run_target_args'
    let v0 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _run_target_args'_v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : string = "std::path::MAIN_SEPARATOR"
    let v4 : char = Fable.Core.RustInterop.emitRustExpr () v3 
    let _run_target_args'_v0 = v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : string = "std::path::MAIN_SEPARATOR"
    let v6 : char = Fable.Core.RustInterop.emitRustExpr () v5 
    let _run_target_args'_v0 = v6 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v0 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v0 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v0 = v7 
    #endif
#else
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v0 = v8 
    #endif
    let v9 : char = _run_target_args'_v0 
    v9
and method180 (v0 : string) : string =
    v0
and method177 (v0 : string) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : bool = v75 = false
    let v232 : string =
        if v76 then
            let v77 : string = method28()
            let v78 : string = method30(v77, v0)
            let v79 : string = method40(v78)
            let v80 : string = "/"
            let v81 : (string []) = v79.Split v80 
            let v84 : (string []) = [||]
            let v85 : int32 = v81.Length
            let v86 : Mut6 = {l0 = 0; l1 = 0; l2 = v84} : Mut6
            while method178(v85, v86) do
                let v88 : int32 = v86.l0
                let v89 : int32 =  -v88
                let v90 : int32 = v89 + v85
                let v91 : int32 = v90 - 1
                let struct (v92 : int32, v93 : (string [])) = v86.l1, v86.l2
                let v94 : string = v81.[int v91]
                let v95 : bool = ".." = v94
                let struct (v139 : int32, v140 : (string [])) =
                    if v95 then
                        let v96 : int32 = v92 + 1
                        struct (v96, v93)
                    else
                        let v97 : bool = "." = v94
                        if v97 then
                            struct (v92, v93)
                        else
                            let v98 : bool = 0 = v92
                            if v98 then
                                let v99 : string = ":"
                                let v100 : bool = v94.EndsWith (v99, false, null)
                                if v100 then
                                    let v103 : string = $"{v77.[0]}:"
                                    let v104 : (string []) = [|v103|]
                                    let v105 : int32 = v104.Length
                                    let v106 : int32 = v93.Length
                                    let v107 : int32 = v105 + v106
                                    let v108 : (string []) = Array.zeroCreate<string> (v107)
                                    let v109 : Mut5 = {l0 = 0} : Mut5
                                    while method93(v107, v109) do
                                        let v111 : int32 = v109.l0
                                        let v112 : bool = v111 < v105
                                        let v116 : string =
                                            if v112 then
                                                let v113 : string = v104.[int v111]
                                                v113
                                            else
                                                let v114 : int32 = v111 - v105
                                                let v115 : string = v93.[int v114]
                                                v115
                                        v108.[int v111] <- v116
                                        let v117 : int32 = v111 + 1
                                        v109.l0 <- v117
                                        ()
                                    struct (0, v108)
                                else
                                    let v118 : (string []) = [|v94|]
                                    let v119 : int32 = v118.Length
                                    let v120 : int32 = v93.Length
                                    let v121 : int32 = v119 + v120
                                    let v122 : (string []) = Array.zeroCreate<string> (v121)
                                    let v123 : Mut5 = {l0 = 0} : Mut5
                                    while method93(v121, v123) do
                                        let v125 : int32 = v123.l0
                                        let v126 : bool = v125 < v119
                                        let v130 : string =
                                            if v126 then
                                                let v127 : string = v118.[int v125]
                                                v127
                                            else
                                                let v128 : int32 = v125 - v119
                                                let v129 : string = v93.[int v128]
                                                v129
                                        v122.[int v125] <- v130
                                        let v131 : int32 = v125 + 1
                                        v123.l0 <- v131
                                        ()
                                    struct (0, v122)
                            else
                                let v134 : int32 = v92 - 1
                                struct (v134, v93)
                let v141 : int32 = v88 + 1
                v86.l0 <- v141
                v86.l1 <- v139
                v86.l2 <- v140
                ()
            let struct (v142 : int32, v143 : (string [])) = v86.l1, v86.l2
            let v144 : unit = ()
            let _let'_v144 =
                seq {
                    for i = 0 to v143.Length - 1 do yield v143.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v147 : string seq = _let'_v144 
            let v153 : char = method179()
            let v154 : (char -> string) = _.ToString()
            let v155 : string = v154 v153
            let v158 : bool = v155 = "\n"
            let v160 : string =
                if v158 then
                    method180(v155)
                else
                    v155
            let v161 : (string -> (string seq -> string)) = String.concat
            let v162 : (string seq -> string) = v161 v160
            v162 v147
        else
            let v166 : string = "std::fs::canonicalize(&*$0)"
            let v167 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v166 
            (* run_target_args'
            let v168 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v169 : string = "$0.unwrap()"
            let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v169 
            let _run_target_args'_v168 = v170 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v171 : string = "$0.unwrap()"
            let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v171 
            let _run_target_args'_v168 = v172 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v173 : string = "$0.unwrap()"
            let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v173 
            let _run_target_args'_v168 = v174 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v175 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v168 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v168 = v176 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v177 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v168 = v177 
            #endif
#else
            let v178 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v168 = v178 
            #endif
            let v179 : std_path_PathBuf = _run_target_args'_v168 
            (* run_target_args'
            let v182 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v183 
            let _run_target_args'_v182 = v184 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v185 : string = "$0.display()"
            let v186 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v185 
            let _run_target_args'_v182 = v186 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v187 : string = "$0.display()"
            let v188 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v187 
            let _run_target_args'_v182 = v188 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v189 : std_path_Display = v179 |> unbox<std_path_Display>
            let _run_target_args'_v182 = v189 
            #endif
#if FABLE_COMPILER_PYTHON
            let v192 : std_path_Display = v179 |> unbox<std_path_Display>
            let _run_target_args'_v182 = v192 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v195 : std_path_Display = v179 |> unbox<std_path_Display>
            let _run_target_args'_v182 = v195 
            #endif
#else
            let v198 : std_path_Display = v179 |> unbox<std_path_Display>
            let _run_target_args'_v182 = v198 
            #endif
            let v201 : std_path_Display = _run_target_args'_v182 
            (* run_target_args'
            let v206 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v207 : string = "format!(\"{}\", $0)"
            let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v207 
            let _run_target_args'_v206 = v208 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v209 : string = "format!(\"{}\", $0)"
            let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v209 
            let _run_target_args'_v206 = v210 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v211 : string = "format!(\"{}\", $0)"
            let v212 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v211 
            let _run_target_args'_v206 = v212 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v213 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v206 = v213 
            #endif
#if FABLE_COMPILER_PYTHON
            let v216 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v206 = v216 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v219 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v206 = v219 
            #endif
#else
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v206 = v222 
            #endif
            let v225 : std_string_String = _run_target_args'_v206 
            let v230 : string = "fable_library_rust::String_::fromString($0)"
            let v231 : string = Fable.Core.RustInterop.emitRustExpr v225 v230 
            v231
    let _run_target_args'_v1 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = null |> unbox<string>
    let _run_target_args'_v1 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v236 : string = null |> unbox<string>
    let _run_target_args'_v1 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v239 : string = null |> unbox<string>
    let _run_target_args'_v1 = v239 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : string = null |> unbox<string>
    let _run_target_args'_v1 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : string = null |> unbox<string>
    let _run_target_args'_v1 = v245 
    #endif
#else
    let v248 : (string -> string) = System.IO.Path.GetFullPath
    let v249 : string = v248 v0
    let _run_target_args'_v1 = v249 
    #endif
    let v250 : string = _run_target_args'_v1 
    v250
and method176 (v0 : string) : string =
    let v1 : string = method177(v0)
    method40(v1)
and method175 (v0 : string) : string =
    let v1 : string = method28()
    let v2 : string = method30(v1, v0)
    method176(v2)
and closure77 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method175(v2)
and method174 () : (std_string_String -> string) =
    closure77()
and method181 () : string =
    let v0 : string = "retries"
    v0
and method182 () : string =
    let v0 : string = "working-directory"
    v0
and method185 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "exit_code"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "repl_result"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "retry"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"{v2}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : string = " }"
    let v108 : string = $"{v107}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = v4.l0
    v116
and method184 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method185(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v13 : string = "spiral.run / repl error"
    let v14 : string = $"{v6} {v7} #{v12} %s{v13} / {v11}"
    method18(v14)
and closure78 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v1}/{v0}"
        let v43 : string = method184(v22, v23, v24, v25, v26, v27, v40, v41, v3, v2, v42)
        method19(v43)
and method183 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v21 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v19 : string option = None
            v19
        | US5_0(v15) -> (* Some *)
            let v16 : string option = Some v15 
            v16
    let v22 : bool = false
    let struct (v23 : int32, v24 : string) = method89(v9, v4, v14, v6, v7, v22, v21)
    let v25 : bool = v23 = 0
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v3 >= v1
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure78(v1, v3, v24, v23)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v3 + 1uy
        method183(v0, v1, v2, v71)
and method187 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "jupyter_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method187(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.run / dib / jupyter nbconvert"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure79 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method186(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method189 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "pwsh_replace_html_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method188 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method189(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.run / dib / html cell ids"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure80 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method188(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method191 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method190 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method191(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.run / dib"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure81 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method190(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method192 () : string =
    let v0 : string = "cleanup"
    v0
and method193 () : string =
    let v0 : string = "wasm"
    v0
and method194 () : string =
    let v0 : string = "contract"
    v0
and method195 (v0 : string, v1 : string, v2 : US36) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "extension"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "code"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "runtime"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"%A{v2}"
    let v102 : string = $"{v99}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = " }"
    let v111 : string = $"{v110}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = v4.l0
    v119
and method197 () : string =
    let v0 : string = ""
    v0
and method198 () : string =
    let v0 : string = ""
    v0
and method196 (v0 : string) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new($0)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    (* run_target_args'
    let v30 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "$0.unwrap()"
    let v32 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v31 
    let _run_target_args'_v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "$0.unwrap()"
    let v34 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v33 
    let _run_target_args'_v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "$0.unwrap()"
    let v36 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _run_target_args'_v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v30 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v30 = v39 
    #endif
#else
    let v40 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v30 = v40 
    #endif
    let v41 : unativeint = _run_target_args'_v30 
    let v44 : bool = v41 = v19 
    if v44 then
        let v47 : string = "true; break"
        let v48 : bool = Fable.Core.RustInterop.emitRustExpr () v47 
        ()
    let v49 : unativeint = v41 |> unativeint 
    let v52 : unativeint = v49 |> unbox<unativeint>
    let v55 : string = "v23.len()"
    let v56 : unativeint = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : bool = v52 = v56 
    let v64 : Ref<Slice'<uint8>> =
        if v57 then
            let v60 : string = "&v23[v19..]"
            let v61 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v60 
            v61
        else
            let v62 : string = "&v23[$0..$1]"
            let v63 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v49) v62 
            v63
    let v65 : string = "sha2::Digest::update(&mut v16, v64)"
    Fable.Core.RustInterop.emitRustExpr () v65 
    let v66 : string = "true; } // rust.loop"
    let v67 : bool = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "true; } // rust.loop"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; } // rust.loop"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "true; { // rust.loop"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "true; { // rust.loop"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "&sha2::Digest::finalize(v16)"
    let v77 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v79 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "x"
    let v83 : uint8 = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "format!(\"{:02x}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "true; $0 }).collect::<Vec<_>>()"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "_vec_map"
    let v91 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v93 : (string []) = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : unit = ()
    let _let'_v94 =
        seq {
            for i = 0 to v93.Length - 1 do yield v93.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v97 : string seq = _let'_v94 
    let v103 : string = method197()
    let v104 : bool = v103 = "\n"
    let v106 : string =
        if v104 then
            method180(v103)
        else
            v103
    let v107 : (string -> (string seq -> string)) = String.concat
    let v108 : (string seq -> string) = v107 v106
    let v109 : string = v108 v97
    let v112 : Result<string, std_io_Error> = Ok v109 
    (* run_target_args'
    let v113 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v114 : string = "$0.unwrap()"
    let v115 : string = Fable.Core.RustInterop.emitRustExpr v112 v114 
    let _run_target_args'_v113 = v115 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v116 : string = "$0.unwrap()"
    let v117 : string = Fable.Core.RustInterop.emitRustExpr v112 v116 
    let _run_target_args'_v113 = v117 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v118 : string = "$0.unwrap()"
    let v119 : string = Fable.Core.RustInterop.emitRustExpr v112 v118 
    let _run_target_args'_v113 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v113 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v121 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v113 = v121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v122 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v113 = v122 
    #endif
#else
    let v123 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v113 = v123 
    #endif
    let v124 : string = _run_target_args'_v113 
    let _run_target_args'_v1 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = null |> unbox<string>
    let _run_target_args'_v1 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v1 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : string = "crypto"
    let v134 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v133 
    let v135 : string = "v134.createHash($0)"
    let v136 : string = "sha256"
    let v137 : obj = Fable.Core.JsInterop.emitJsExpr v136 v135 
    let v138 : string = "$0.update($1, 'utf8')"
    let v139 : obj = Fable.Core.JsInterop.emitJsExpr struct (v137, v0) v138 
    let v140 : string = "$0.digest($1)"
    let v141 : string = "hex"
    let v142 : string = Fable.Core.JsInterop.emitJsExpr struct (v139, v141) v140 
    let _run_target_args'_v1 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v143 : string = "hashlib"
    let v144 : IHashlibSha256 = Fable.Core.PyInterop.importAll v143 
    let v145 : string = "v144.sha256()"
    let v146 : obj = Fable.Core.PyInterop.emitPyExpr () v145 
    let v149 : string = "$0.encode($1)"
    let v150 : string = "utf-8"
    let v151 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v150) v149 
    let v154 : string = "v146.update($0)"
    Fable.Core.PyInterop.emitPyExpr v151 v154 
    let v155 : string = "v146.hexdigest()"
    let v156 : string = Fable.Core.PyInterop.emitPyExpr () v155 
    let _run_target_args'_v1 = v156 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : string = null |> unbox<string>
    let _run_target_args'_v1 = v159 
    #endif
#else
    let v162 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v163 : System.Security.Cryptography.SHA256 = v162 ()
    use v163 = v163 
    let v164 : System.Security.Cryptography.SHA256 = v163 
    let v165 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v166 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v167 : (string -> (uint8 [])) = v166 v165
    let v168 : (uint8 []) = v167 v0
    let v169 : ((uint8 []) -> (uint8 [])) = v164.ComputeHash
    let v170 : (uint8 []) = v169 v168
    let v171 : int32 = v170.Length
    let v172 : (string []) = Array.zeroCreate<string> (v171)
    let v173 : Mut5 = {l0 = 0} : Mut5
    while method93(v171, v173) do
        let v175 : int32 = v173.l0
        let v176 : uint8 = v170.[int v175]
        let v177 : (string -> string) = v176.ToString
        let v178 : string = "x2"
        let v179 : string = v177 v178
        v172.[int v175] <- v179
        let v180 : int32 = v175 + 1
        v173.l0 <- v180
        ()
    let v181 : unit = ()
    let _let'_v181 =
        seq {
            for i = 0 to v172.Length - 1 do yield v172.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v184 : string seq = _let'_v181 
    let v190 : string = method198()
    let v191 : bool = v190 = "\n"
    let v193 : string =
        if v191 then
            method180(v190)
        else
            v190
    let v194 : (string -> (string seq -> string)) = String.concat
    let v195 : (string seq -> string) = v194 v193
    let v196 : string = v195 v184
    let _run_target_args'_v1 = v196 
    #endif
    let v199 : string = _run_target_args'_v1 
    v199
and method199 (v0 : US5, v1 : string, v2 : US39, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method30(v3, v4)
    let v6 : string = method30(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US39_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method30(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US38_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US38_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US38_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method30(v10, v42)
            method30(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method201 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method201(v0, v4, v2)
        let v6 : string = method30(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method202 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = method202(v3, v1)
        let v5 : string = $"<PackageReference Include=\"{v2}\" Version=\"*\" />"
        UH2_1(v5, v4)
    | UH2_0 -> (* Nil *)
        v1
and method200 (v0 : string, v1 : string, v2 : UH2, v3 : UH2, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method66(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method30(v4, v7)
    let v9 : string = method40(v8)
    method64(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method201(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method113(v11, v12)
    let v14 : unit = ()
    let _let'_v14 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v17 : string seq = _let'_v14 
    let v23 : (string -> (string seq -> string)) = String.concat
    let v24 : string = "\\n        "
    let v25 : (string seq -> string) = v23 v24
    let v26 : string = v25 v17
    let v29 : UH2 = UH2_0
    let v30 : UH2 = method202(v3, v29)
    let v31 : string list = []
    let v32 : string list = method113(v30, v31)
    let v33 : unit = ()
    let _let'_v33 =
        seq {
            yield! v32 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v36 : string seq = _let'_v33 
    let v42 : (string -> (string seq -> string)) = String.concat
    let v43 : (string seq -> string) = v42 v24
    let v44 : string = v43 v36
    let v47 : string = $"{v1}.fsproj"
    let v48 : string = method30(v4, v47)
    let v49 : string = method40(v48)
    let v50 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v51 : string = $"<PropertyGroup>"
    let v52 : string = "\n"
    let v53 : string = v50 + v52 
    let v54 : string = v53 + v51 
    let v55 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v56 : string = v54 + v52 
    let v57 : string = v56 + v55 
    let v58 : string = $"    <LangVersion>preview</LangVersion>"
    let v59 : string = v57 + v52 
    let v60 : string = v59 + v58 
    let v61 : string = $"    <RollForward>Major</RollForward>"
    let v62 : string = v60 + v52 
    let v63 : string = v62 + v61 
    let v64 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v65 : string = v63 + v52 
    let v66 : string = v65 + v64 
    let v67 : string = $"    <PublishAot>false</PublishAot>"
    let v68 : string = v66 + v52 
    let v69 : string = v68 + v67 
    let v70 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v71 : string = v69 + v52 
    let v72 : string = v71 + v70 
    let v73 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v74 : string = v72 + v52 
    let v75 : string = v74 + v73 
    let v76 : string = $"    <SelfContained>true</SelfContained>"
    let v77 : string = v75 + v52 
    let v78 : string = v77 + v76 
    let v79 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v80 : string = v78 + v52 
    let v81 : string = v80 + v79 
    let v82 : string = $"    <OutputType>Exe</OutputType>"
    let v83 : string = v81 + v52 
    let v84 : string = v83 + v82 
    let v85 : string = $"</PropertyGroup>"
    let v86 : string = v84 + v52 
    let v87 : string = v86 + v85 
    let v88 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v89 : string = v87 + v52 
    let v90 : string = v89 + v88 
    let v91 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v92 : string = v90 + v52 
    let v93 : string = v92 + v91 
    let v94 : string = $"</PropertyGroup>"
    let v95 : string = v93 + v52 
    let v96 : string = v95 + v94 
    let v97 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v98 : string = v96 + v52 
    let v99 : string = v98 + v97 
    let v100 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v101 : string = v99 + v52 
    let v102 : string = v101 + v100 
    let v103 : string = $"</PropertyGroup>"
    let v104 : string = v102 + v52 
    let v105 : string = v104 + v103 
    let v106 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v107 : string = v105 + v52 
    let v108 : string = v107 + v106 
    let v109 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v110 : string = v108 + v52 
    let v111 : string = v110 + v109 
    let v112 : string = $"</PropertyGroup>"
    let v113 : string = v111 + v52 
    let v114 : string = v113 + v112 
    let v115 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v116 : string = v114 + v52 
    let v117 : string = v116 + v115 
    let v118 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v119 : string = v117 + v52 
    let v120 : string = v119 + v118 
    let v121 : string = $"</PropertyGroup>"
    let v122 : string = v120 + v52 
    let v123 : string = v122 + v121 
    let v124 : string = $"<ItemGroup>"
    let v125 : string = v123 + v52 
    let v126 : string = v125 + v124 
    let v127 : string = $"    {v26}"
    let v128 : string = v126 + v52 
    let v129 : string = v128 + v127 
    let v130 : string = $"    <Compile Include=\"{v9}\" />"
    let v131 : string = v129 + v52 
    let v132 : string = v131 + v130 
    let v133 : string = $"</ItemGroup>"
    let v134 : string = v132 + v52 
    let v135 : string = v134 + v133 
    let v136 : string = $"<ItemGroup>"
    let v137 : string = v135 + v52 
    let v138 : string = v137 + v136 
    let v139 : string = $"    {v44}"
    let v140 : string = v138 + v52 
    let v141 : string = v140 + v139 
    let v142 : string = $"</ItemGroup>"
    let v143 : string = v141 + v52 
    let v144 : string = v143 + v142 
    let v145 : string = $"</Project>"
    let v146 : string = v144 + v52 
    let v147 : string = v146 + v145 
    method64(v49, v147)
    v49
and closure82 () (v0 : chrono_DateTime<chrono_Utc>) : US40 =
    US40_0(v0)
and method204 () : (chrono_DateTime<chrono_Utc> -> US40) =
    closure82()
and method205 () : string =
    let v0 : string = "hh:mm"
    v0
and method206 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method207 () : string =
    let v0 : string = "hhmm"
    v0
and method203 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime.UnixEpoch
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v14 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v15 : System.DateTime = v14 v11
    (* run_target_args'
    let v18 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : (System.DateTime -> int64) = _.Ticks
    let v20 : int64 = v19 v15
    let _run_target_args'_v18 = v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : (System.DateTime -> int64) = _.Ticks
    let v22 : int64 = v21 v15
    let _run_target_args'_v18 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : int64 = null |> unbox<int64>
    let _run_target_args'_v18 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : (System.DateTime -> int64) = _.Ticks
    let v27 : int64 = v26 v15
    let _run_target_args'_v18 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : (System.DateTime -> int64) = _.Ticks
    let v29 : int64 = v28 v15
    let _run_target_args'_v18 = v29 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : (System.DateTime -> int64) = _.Ticks
    let v31 : int64 = v30 v15
    let _run_target_args'_v18 = v31 
    #endif
#else
    let v32 : (System.DateTime -> int64) = _.Ticks
    let v33 : int64 = v32 v15
    let _run_target_args'_v18 = v33 
    #endif
    let v34 : int64 = _run_target_args'_v18 
    (* run_target_args'
    let v51 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : (System.DateTime -> int64) = _.Ticks
    let v53 : int64 = v52 v7
    let _run_target_args'_v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : (System.DateTime -> int64) = _.Ticks
    let v55 : int64 = v54 v7
    let _run_target_args'_v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : int64 = null |> unbox<int64>
    let _run_target_args'_v51 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v59 : (System.DateTime -> int64) = _.Ticks
    let v60 : int64 = v59 v7
    let _run_target_args'_v51 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : (System.DateTime -> int64) = _.Ticks
    let v62 : int64 = v61 v7
    let _run_target_args'_v51 = v62 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : (System.DateTime -> int64) = _.Ticks
    let v64 : int64 = v63 v7
    let _run_target_args'_v51 = v64 
    #endif
#else
    let v65 : (System.DateTime -> int64) = _.Ticks
    let v66 : int64 = v65 v7
    let _run_target_args'_v51 = v66 
    #endif
    let v67 : int64 = _run_target_args'_v51 
    let v84 : int64 = v34 |> int64 
    let v87 : int64 = v67 |> int64 
    let v90 : int64 = v84 - v87
    let v91 : int64 = v90 / 10L
    let v92 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v93 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : (chrono_DateTime<chrono_Utc> -> US40) = method204()
    let v95 : US40 option = v93 |> Option.map v94 
    let v106 : US40 = US40_1
    let v107 : US40 = v95 |> Option.defaultValue v106 
    let v127 : US5 =
        match v107 with
        | US40_1 -> (* None *)
            US5_1
        | US40_0(v111) -> (* Some *)
            let v112 : string = "$0.naive_utc()"
            let v113 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v111 v112 
            let v114 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v115 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : string = "%Y%m%d-%H%M-%S%f"
            let v117 : string = "r#\"" + v116 + "\"#"
            let v118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v117 
            let v119 : string = "$0.format($1).to_string()"
            let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118) v119 
            let v121 : string = "fable_library_rust::String_::fromString($0)"
            let v122 : string = Fable.Core.RustInterop.emitRustExpr v120 v121 
            let v123 : string = $"{v122.[0..17]}-{v122.[18..21]}-{v122.[22]}"
            US5_0(v123)
    let v131 : string =
        match v127 with
        | US5_1 -> (* None *)
            let v129 : string = ""
            v129
        | US5_0(v128) -> (* Some *)
            v128
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v134 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v132 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v138 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v132 = v141 
    #endif
#if FABLE_COMPILER_PYTHON
    let v144 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v132 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v132 = v147 
    #endif
#else
    let v148 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v132 = v148 
    #endif
    let v149 : System.TimeZoneInfo = _run_target_args'_v132 
    (* run_target_args'
    let v154 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v155 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : (System.DateTime -> int64) = _.Ticks
    let v157 : int64 = v156 v15
    let _run_target_args'_v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : (System.DateTime -> int64) = _.Ticks
    let v159 : int64 = v158 v15
    let _run_target_args'_v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : int64 = null |> unbox<int64>
    let _run_target_args'_v155 = v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : (System.DateTime -> int64) = _.Ticks
    let v164 : int64 = v163 v15
    let _run_target_args'_v155 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : (System.DateTime -> int64) = _.Ticks
    let v166 : int64 = v165 v15
    let _run_target_args'_v155 = v166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v167 : (System.DateTime -> int64) = _.Ticks
    let v168 : int64 = v167 v15
    let _run_target_args'_v155 = v168 
    #endif
#else
    let v169 : (System.DateTime -> int64) = _.Ticks
    let v170 : int64 = v169 v15
    let _run_target_args'_v155 = v170 
    #endif
    let v171 : int64 = _run_target_args'_v155 
    let v188 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v189 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v171) v188 
    let v190 : System.TimeSpan = v189 |> System.TimeSpan 
    let _run_target_args'_v154 = v190 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : (System.DateTime -> int64) = _.Ticks
    let v195 : int64 = v194 v15
    let _run_target_args'_v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : (System.DateTime -> int64) = _.Ticks
    let v197 : int64 = v196 v15
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : int64 = null |> unbox<int64>
    let _run_target_args'_v193 = v198 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : (System.DateTime -> int64) = _.Ticks
    let v202 : int64 = v201 v15
    let _run_target_args'_v193 = v202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : (System.DateTime -> int64) = _.Ticks
    let v204 : int64 = v203 v15
    let _run_target_args'_v193 = v204 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v205 : (System.DateTime -> int64) = _.Ticks
    let v206 : int64 = v205 v15
    let _run_target_args'_v193 = v206 
    #endif
#else
    let v207 : (System.DateTime -> int64) = _.Ticks
    let v208 : int64 = v207 v15
    let _run_target_args'_v193 = v208 
    #endif
    let v209 : int64 = _run_target_args'_v193 
    let v226 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v227 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v209) v226 
    let v228 : System.TimeSpan = v227 |> System.TimeSpan 
    let _run_target_args'_v154 = v228 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : US3 = US3_2
    let v232 : US4 = US4_2(v231)
    let v233 : string = $"date_time.get_utc_offset / target: {v232}"
    let v234 : System.TimeSpan = failwith<System.TimeSpan> v233
    let _run_target_args'_v154 = v234 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : US3 = US3_0
    let v238 : US4 = US4_3(v237)
    let v239 : string = $"date_time.get_utc_offset / target: {v238}"
    let v240 : System.TimeSpan = failwith<System.TimeSpan> v239
    let _run_target_args'_v154 = v240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v243 : US3 = US3_0
    let v244 : US4 = US4_4(v243)
    let v245 : string = $"date_time.get_utc_offset / target: {v244}"
    let v246 : System.TimeSpan = failwith<System.TimeSpan> v245
    let _run_target_args'_v154 = v246 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v249 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v250 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v251 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v252 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v251 
    let _run_target_args'_v250 = v252 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v253 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v250 = v253 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v256 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v250 = v256 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v259 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v250 = v259 
    #endif
#if FABLE_COMPILER_PYTHON
    let v262 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v250 = v262 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v265 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v250 = v265 
    #endif
#else
    let v266 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v250 = v266 
    #endif
    let v267 : System.TimeZoneInfo = _run_target_args'_v250 
    let v272 : (System.DateTime -> System.TimeSpan) = v249 v267
    let v273 : System.TimeSpan = v272 v15
    let _run_target_args'_v154 = v273 
    #endif
#else
    let v274 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v275 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v277 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v276 
    let _run_target_args'_v275 = v277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v278 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v275 = v278 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v281 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v275 = v281 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v275 = v284 
    #endif
#if FABLE_COMPILER_PYTHON
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v275 = v287 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v290 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v275 = v290 
    #endif
#else
    let v291 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v275 = v291 
    #endif
    let v292 : System.TimeZoneInfo = _run_target_args'_v275 
    let v297 : (System.DateTime -> System.TimeSpan) = v274 v292
    let v298 : System.TimeSpan = v297 v15
    let _run_target_args'_v154 = v298 
    #endif
    let v299 : System.TimeSpan = _run_target_args'_v154 
    let v307 : (System.TimeSpan -> int32) = _.Hours
    let v308 : int32 = v307 v299
    let v311 : bool = v308 > 0
    let v312 : uint8 =
        if v311 then
            1uy
        else
            0uy
    let v313 : string = method205()
    (* run_target_args'
    let v314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v315 : string = "$0.toString($1)"
    let v316 : string = Fable.Core.RustInterop.emitRustExpr struct (v299, v313) v315 
    let _run_target_args'_v314 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = "$0.toString($1)"
    let v318 : string = Fable.Core.RustInterop.emitRustExpr struct (v299, v313) v317 
    let _run_target_args'_v314 = v318 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v319 : string = "$0.toString($1)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr struct (v299, v313) v319 
    let _run_target_args'_v314 = v320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v321 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v314 = v321 
    #endif
#if FABLE_COMPILER_PYTHON
    let v322 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v314 = v322 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v323 : string = v299.ToString v313 
    let _run_target_args'_v314 = v323 
    #endif
#else
    let v369 : string = v299.ToString v313 
    let _run_target_args'_v314 = v369 
    #endif
    let v415 : string = _run_target_args'_v314 
    let v463 : string = $"{v312}{v415.[0..1]}{v415.[3..4]}"
    let v464 : (System.Guid -> string) = _.ToString()
    let v465 : string = v464 v0
    let v468 : int32 = v131.Length
    let v469 : int32 = v463.Length
    let v470 : int32 = v468 + v469
    let v471 : (string -> int32) = String.length
    let v472 : int32 = v471 v465
    let v475 : int32 = v470 |> int32 
    let v482 : int32 = v472 |> int32 
    let v489 : int32 = v482 - 1
    let v490 : string = v465.[int v475..int v489]
    let v494 : string = $"{v131}{v463}{v490}"
    (* run_target_args'
    let v495 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v496 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v496 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v499 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v499 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v502 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v495 = v502 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v505 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v505 
    #endif
#if FABLE_COMPILER_PYTHON
    let v508 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v508 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v511 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v511 
    #endif
#else
    let v514 : System.Guid = v494 |> System.Guid 
    let _run_target_args'_v495 = v514 
    #endif
    let v517 : System.Guid = _run_target_args'_v495 
    let _run_target_args'_v2 = v517 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v522 : System.DateTime = System.DateTime.UnixEpoch
    let v525 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v526 : System.DateTime = v525 v522
    let v529 : System.DateTimeKind = System.DateTimeKind.Local
    let v530 : System.DateTime = System.DateTime.SpecifyKind (v1, v529)
    let v533 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v534 : System.DateTime = v533 v530
    (* run_target_args'
    let v537 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v538 : (System.DateTime -> int64) = _.Ticks
    let v539 : int64 = v538 v534
    let _run_target_args'_v537 = v539 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v540 : (System.DateTime -> int64) = _.Ticks
    let v541 : int64 = v540 v534
    let _run_target_args'_v537 = v541 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v542 : int64 = null |> unbox<int64>
    let _run_target_args'_v537 = v542 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v545 : (System.DateTime -> int64) = _.Ticks
    let v546 : int64 = v545 v534
    let _run_target_args'_v537 = v546 
    #endif
#if FABLE_COMPILER_PYTHON
    let v547 : (System.DateTime -> int64) = _.Ticks
    let v548 : int64 = v547 v534
    let _run_target_args'_v537 = v548 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v549 : (System.DateTime -> int64) = _.Ticks
    let v550 : int64 = v549 v534
    let _run_target_args'_v537 = v550 
    #endif
#else
    let v551 : (System.DateTime -> int64) = _.Ticks
    let v552 : int64 = v551 v534
    let _run_target_args'_v537 = v552 
    #endif
    let v553 : int64 = _run_target_args'_v537 
    (* run_target_args'
    let v570 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v571 : (System.DateTime -> int64) = _.Ticks
    let v572 : int64 = v571 v526
    let _run_target_args'_v570 = v572 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v573 : (System.DateTime -> int64) = _.Ticks
    let v574 : int64 = v573 v526
    let _run_target_args'_v570 = v574 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v575 : int64 = null |> unbox<int64>
    let _run_target_args'_v570 = v575 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v578 : (System.DateTime -> int64) = _.Ticks
    let v579 : int64 = v578 v526
    let _run_target_args'_v570 = v579 
    #endif
#if FABLE_COMPILER_PYTHON
    let v580 : (System.DateTime -> int64) = _.Ticks
    let v581 : int64 = v580 v526
    let _run_target_args'_v570 = v581 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v582 : (System.DateTime -> int64) = _.Ticks
    let v583 : int64 = v582 v526
    let _run_target_args'_v570 = v583 
    #endif
#else
    let v584 : (System.DateTime -> int64) = _.Ticks
    let v585 : int64 = v584 v526
    let _run_target_args'_v570 = v585 
    #endif
    let v586 : int64 = _run_target_args'_v570 
    let v603 : int64 = v553 |> int64 
    let v606 : int64 = v586 |> int64 
    let v609 : int64 = v603 - v606
    let v610 : int64 = v609 / 10L
    let v611 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v612 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v610 v611 
    let v613 : (chrono_DateTime<chrono_Utc> -> US40) = method204()
    let v614 : US40 option = v612 |> Option.map v613 
    let v625 : US40 = US40_1
    let v626 : US40 = v614 |> Option.defaultValue v625 
    let v646 : US5 =
        match v626 with
        | US40_1 -> (* None *)
            US5_1
        | US40_0(v630) -> (* Some *)
            let v631 : string = "$0.naive_utc()"
            let v632 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v630 v631 
            let v633 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v634 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v632 v633 
            let v635 : string = "%Y%m%d-%H%M-%S%f"
            let v636 : string = "r#\"" + v635 + "\"#"
            let v637 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v636 
            let v638 : string = "$0.format($1).to_string()"
            let v639 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v634, v637) v638 
            let v640 : string = "fable_library_rust::String_::fromString($0)"
            let v641 : string = Fable.Core.RustInterop.emitRustExpr v639 v640 
            let v642 : string = $"{v641.[0..17]}-{v641.[18..21]}-{v641.[22]}"
            US5_0(v642)
    let v650 : string =
        match v646 with
        | US5_1 -> (* None *)
            let v648 : string = ""
            v648
        | US5_0(v647) -> (* Some *)
            v647
    (* run_target_args'
    let v651 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v652 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v653 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v652 
    let _run_target_args'_v651 = v653 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v654 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v651 = v654 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v657 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v651 = v657 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v660 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v651 = v660 
    #endif
#if FABLE_COMPILER_PYTHON
    let v663 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v651 = v663 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v666 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v651 = v666 
    #endif
#else
    let v667 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v651 = v667 
    #endif
    let v668 : System.TimeZoneInfo = _run_target_args'_v651 
    (* run_target_args'
    let v673 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v674 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v675 : (System.DateTime -> int64) = _.Ticks
    let v676 : int64 = v675 v534
    let _run_target_args'_v674 = v676 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v677 : (System.DateTime -> int64) = _.Ticks
    let v678 : int64 = v677 v534
    let _run_target_args'_v674 = v678 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v679 : int64 = null |> unbox<int64>
    let _run_target_args'_v674 = v679 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v682 : (System.DateTime -> int64) = _.Ticks
    let v683 : int64 = v682 v534
    let _run_target_args'_v674 = v683 
    #endif
#if FABLE_COMPILER_PYTHON
    let v684 : (System.DateTime -> int64) = _.Ticks
    let v685 : int64 = v684 v534
    let _run_target_args'_v674 = v685 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v686 : (System.DateTime -> int64) = _.Ticks
    let v687 : int64 = v686 v534
    let _run_target_args'_v674 = v687 
    #endif
#else
    let v688 : (System.DateTime -> int64) = _.Ticks
    let v689 : int64 = v688 v534
    let _run_target_args'_v674 = v689 
    #endif
    let v690 : int64 = _run_target_args'_v674 
    let v707 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v708 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v534, v690) v707 
    let v709 : System.TimeSpan = v708 |> System.TimeSpan 
    let _run_target_args'_v673 = v709 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v712 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v713 : (System.DateTime -> int64) = _.Ticks
    let v714 : int64 = v713 v534
    let _run_target_args'_v712 = v714 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v715 : (System.DateTime -> int64) = _.Ticks
    let v716 : int64 = v715 v534
    let _run_target_args'_v712 = v716 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v717 : int64 = null |> unbox<int64>
    let _run_target_args'_v712 = v717 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v720 : (System.DateTime -> int64) = _.Ticks
    let v721 : int64 = v720 v534
    let _run_target_args'_v712 = v721 
    #endif
#if FABLE_COMPILER_PYTHON
    let v722 : (System.DateTime -> int64) = _.Ticks
    let v723 : int64 = v722 v534
    let _run_target_args'_v712 = v723 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v724 : (System.DateTime -> int64) = _.Ticks
    let v725 : int64 = v724 v534
    let _run_target_args'_v712 = v725 
    #endif
#else
    let v726 : (System.DateTime -> int64) = _.Ticks
    let v727 : int64 = v726 v534
    let _run_target_args'_v712 = v727 
    #endif
    let v728 : int64 = _run_target_args'_v712 
    let v745 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v746 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v534, v728) v745 
    let v747 : System.TimeSpan = v746 |> System.TimeSpan 
    let _run_target_args'_v673 = v747 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v750 : US3 = US3_2
    let v751 : US4 = US4_2(v750)
    let v752 : string = $"date_time.get_utc_offset / target: {v751}"
    let v753 : System.TimeSpan = failwith<System.TimeSpan> v752
    let _run_target_args'_v673 = v753 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v756 : US3 = US3_0
    let v757 : US4 = US4_3(v756)
    let v758 : string = $"date_time.get_utc_offset / target: {v757}"
    let v759 : System.TimeSpan = failwith<System.TimeSpan> v758
    let _run_target_args'_v673 = v759 
    #endif
#if FABLE_COMPILER_PYTHON
    let v762 : US3 = US3_0
    let v763 : US4 = US4_4(v762)
    let v764 : string = $"date_time.get_utc_offset / target: {v763}"
    let v765 : System.TimeSpan = failwith<System.TimeSpan> v764
    let _run_target_args'_v673 = v765 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v768 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v769 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v770 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v771 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v770 
    let _run_target_args'_v769 = v771 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v772 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v769 = v772 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v775 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v769 = v775 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v778 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v769 = v778 
    #endif
#if FABLE_COMPILER_PYTHON
    let v781 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v769 = v781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v784 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v769 = v784 
    #endif
#else
    let v785 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v769 = v785 
    #endif
    let v786 : System.TimeZoneInfo = _run_target_args'_v769 
    let v791 : (System.DateTime -> System.TimeSpan) = v768 v786
    let v792 : System.TimeSpan = v791 v534
    let _run_target_args'_v673 = v792 
    #endif
#else
    let v793 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v794 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v795 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v796 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v795 
    let _run_target_args'_v794 = v796 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v797 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v794 = v797 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v800 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v794 = v800 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v803 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v794 = v803 
    #endif
#if FABLE_COMPILER_PYTHON
    let v806 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v794 = v806 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v809 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v794 = v809 
    #endif
#else
    let v810 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v794 = v810 
    #endif
    let v811 : System.TimeZoneInfo = _run_target_args'_v794 
    let v816 : (System.DateTime -> System.TimeSpan) = v793 v811
    let v817 : System.TimeSpan = v816 v534
    let _run_target_args'_v673 = v817 
    #endif
    let v818 : System.TimeSpan = _run_target_args'_v673 
    let v826 : (System.TimeSpan -> int32) = _.Hours
    let v827 : int32 = v826 v818
    let v830 : bool = v827 > 0
    let v831 : uint8 =
        if v830 then
            1uy
        else
            0uy
    let v832 : string = method205()
    (* run_target_args'
    let v833 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v834 : string = "$0.toString($1)"
    let v835 : string = Fable.Core.RustInterop.emitRustExpr struct (v818, v832) v834 
    let _run_target_args'_v833 = v835 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v836 : string = "$0.toString($1)"
    let v837 : string = Fable.Core.RustInterop.emitRustExpr struct (v818, v832) v836 
    let _run_target_args'_v833 = v837 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v838 : string = "$0.toString($1)"
    let v839 : string = Fable.Core.RustInterop.emitRustExpr struct (v818, v832) v838 
    let _run_target_args'_v833 = v839 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v840 : string = v818.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v833 = v840 
    #endif
#if FABLE_COMPILER_PYTHON
    let v841 : string = v818.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v833 = v841 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v842 : string = v818.ToString v832 
    let _run_target_args'_v833 = v842 
    #endif
#else
    let v888 : string = v818.ToString v832 
    let _run_target_args'_v833 = v888 
    #endif
    let v934 : string = _run_target_args'_v833 
    let v982 : string = $"{v831}{v934.[0..1]}{v934.[3..4]}"
    let v983 : (System.Guid -> string) = _.ToString()
    let v984 : string = v983 v0
    let v987 : int32 = v650.Length
    let v988 : int32 = v982.Length
    let v989 : int32 = v987 + v988
    let v990 : (string -> int32) = String.length
    let v991 : int32 = v990 v984
    let v994 : int32 = v989 |> int32 
    let v1001 : int32 = v991 |> int32 
    let v1008 : int32 = v1001 - 1
    let v1009 : string = v984.[int v994..int v1008]
    let v1013 : string = $"{v650}{v982}{v1009}"
    (* run_target_args'
    let v1014 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1015 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1015 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1018 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1018 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1021 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1014 = v1021 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1024 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1024 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1027 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1027 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1030 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1030 
    #endif
#else
    let v1033 : System.Guid = v1013 |> System.Guid 
    let _run_target_args'_v1014 = v1033 
    #endif
    let v1036 : System.Guid = _run_target_args'_v1014 
    let _run_target_args'_v2 = v1036 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1041 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2 = v1041 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1044 : string = method206()
    let v1045 : bool = v1044 = ""
    let v1047 : string =
        if v1045 then
            let v1046 : string = "M-d-y hh:mm:ss tt"
            v1046
        else
            v1044
    let v1048 : (string -> string) = v1.ToString
    let v1049 : string = v1048 v1047
    (* run_target_args'
    let v1063 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1064 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1065 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1064 
    let _run_target_args'_v1063 = v1065 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1066 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1063 = v1066 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1069 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1063 = v1069 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1072 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1063 = v1072 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1075 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1063 = v1075 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1078 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1063 = v1078 
    #endif
#else
    let v1079 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1063 = v1079 
    #endif
    let v1080 : System.TimeZoneInfo = _run_target_args'_v1063 
    (* run_target_args'
    let v1085 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1086 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1087 : (System.DateTime -> int64) = _.Ticks
    let v1088 : int64 = v1087 v1
    let _run_target_args'_v1086 = v1088 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1089 : (System.DateTime -> int64) = _.Ticks
    let v1090 : int64 = v1089 v1
    let _run_target_args'_v1086 = v1090 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1091 : int64 = null |> unbox<int64>
    let _run_target_args'_v1086 = v1091 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1094 : (System.DateTime -> int64) = _.Ticks
    let v1095 : int64 = v1094 v1
    let _run_target_args'_v1086 = v1095 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1096 : (System.DateTime -> int64) = _.Ticks
    let v1097 : int64 = v1096 v1
    let _run_target_args'_v1086 = v1097 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1098 : (System.DateTime -> int64) = _.Ticks
    let v1099 : int64 = v1098 v1
    let _run_target_args'_v1086 = v1099 
    #endif
#else
    let v1100 : (System.DateTime -> int64) = _.Ticks
    let v1101 : int64 = v1100 v1
    let _run_target_args'_v1086 = v1101 
    #endif
    let v1102 : int64 = _run_target_args'_v1086 
    let v1119 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1120 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1102) v1119 
    let v1121 : System.TimeSpan = v1120 |> System.TimeSpan 
    let _run_target_args'_v1085 = v1121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1125 : (System.DateTime -> int64) = _.Ticks
    let v1126 : int64 = v1125 v1
    let _run_target_args'_v1124 = v1126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1127 : (System.DateTime -> int64) = _.Ticks
    let v1128 : int64 = v1127 v1
    let _run_target_args'_v1124 = v1128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1129 : int64 = null |> unbox<int64>
    let _run_target_args'_v1124 = v1129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1132 : (System.DateTime -> int64) = _.Ticks
    let v1133 : int64 = v1132 v1
    let _run_target_args'_v1124 = v1133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1134 : (System.DateTime -> int64) = _.Ticks
    let v1135 : int64 = v1134 v1
    let _run_target_args'_v1124 = v1135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1136 : (System.DateTime -> int64) = _.Ticks
    let v1137 : int64 = v1136 v1
    let _run_target_args'_v1124 = v1137 
    #endif
#else
    let v1138 : (System.DateTime -> int64) = _.Ticks
    let v1139 : int64 = v1138 v1
    let _run_target_args'_v1124 = v1139 
    #endif
    let v1140 : int64 = _run_target_args'_v1124 
    let v1157 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1158 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1140) v1157 
    let v1159 : System.TimeSpan = v1158 |> System.TimeSpan 
    let _run_target_args'_v1085 = v1159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1162 : US3 = US3_2
    let v1163 : US4 = US4_2(v1162)
    let v1164 : string = $"date_time.get_utc_offset / target: {v1163}"
    let v1165 : System.TimeSpan = failwith<System.TimeSpan> v1164
    let _run_target_args'_v1085 = v1165 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1168 : US3 = US3_0
    let v1169 : US4 = US4_3(v1168)
    let v1170 : string = $"date_time.get_utc_offset / target: {v1169}"
    let v1171 : System.TimeSpan = failwith<System.TimeSpan> v1170
    let _run_target_args'_v1085 = v1171 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1174 : US3 = US3_0
    let v1175 : US4 = US4_4(v1174)
    let v1176 : string = $"date_time.get_utc_offset / target: {v1175}"
    let v1177 : System.TimeSpan = failwith<System.TimeSpan> v1176
    let _run_target_args'_v1085 = v1177 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1180 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1181 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1182 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1183 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1182 
    let _run_target_args'_v1181 = v1183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1184 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1181 = v1184 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1187 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1181 = v1187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1190 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1181 = v1190 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1193 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1181 = v1193 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1196 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1181 = v1196 
    #endif
#else
    let v1197 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1181 = v1197 
    #endif
    let v1198 : System.TimeZoneInfo = _run_target_args'_v1181 
    let v1203 : (System.DateTime -> System.TimeSpan) = v1180 v1198
    let v1204 : System.TimeSpan = v1203 v1
    let _run_target_args'_v1085 = v1204 
    #endif
#else
    let v1205 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1206 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1207 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1208 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1207 
    let _run_target_args'_v1206 = v1208 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1209 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1206 = v1209 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1212 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1206 = v1212 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1215 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1206 = v1215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1218 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1206 = v1218 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1221 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1206 = v1221 
    #endif
#else
    let v1222 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1206 = v1222 
    #endif
    let v1223 : System.TimeZoneInfo = _run_target_args'_v1206 
    let v1228 : (System.DateTime -> System.TimeSpan) = v1205 v1223
    let v1229 : System.TimeSpan = v1228 v1
    let _run_target_args'_v1085 = v1229 
    #endif
    let v1230 : System.TimeSpan = _run_target_args'_v1085 
    let v1238 : (System.TimeSpan -> int32) = _.Hours
    let v1239 : int32 = v1238 v1230
    let v1242 : bool = v1239 > 0
    let v1243 : uint8 =
        if v1242 then
            1uy
        else
            0uy
    let v1244 : string = method207()
    (* run_target_args'
    let v1245 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1246 : string = "$0.toString($1)"
    let v1247 : string = Fable.Core.RustInterop.emitRustExpr struct (v1230, v1244) v1246 
    let _run_target_args'_v1245 = v1247 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1248 : string = "$0.toString($1)"
    let v1249 : string = Fable.Core.RustInterop.emitRustExpr struct (v1230, v1244) v1248 
    let _run_target_args'_v1245 = v1249 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1250 : string = "$0.toString($1)"
    let v1251 : string = Fable.Core.RustInterop.emitRustExpr struct (v1230, v1244) v1250 
    let _run_target_args'_v1245 = v1251 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1252 : string = v1230.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1245 = v1252 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1253 : string = v1230.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1245 = v1253 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1254 : string = v1230.ToString v1244 
    let _run_target_args'_v1245 = v1254 
    #endif
#else
    let v1300 : string = v1230.ToString v1244 
    let _run_target_args'_v1245 = v1300 
    #endif
    let v1346 : string = _run_target_args'_v1245 
    let v1394 : string = $"{v1243}{v1346}"
    let v1395 : (System.Guid -> string) = _.ToString()
    let v1396 : string = v1395 v0
    let v1399 : int32 = v1049.Length
    let v1400 : int32 = v1394.Length
    let v1401 : int32 = v1399 + v1400
    let v1402 : (string -> int32) = String.length
    let v1403 : int32 = v1402 v1396
    let v1406 : int32 = v1401 |> int32 
    let v1413 : int32 = v1403 |> int32 
    let v1420 : int32 = v1413 - 1
    let v1421 : string = v1396.[int v1406..int v1420]
    let v1425 : string = $"{v1049}{v1394}{v1421}"
    (* run_target_args'
    let v1426 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1427 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1427 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1430 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1430 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1433 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1426 = v1433 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1436 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1436 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1439 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1439 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1442 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1442 
    #endif
#else
    let v1445 : System.Guid = v1425 |> System.Guid 
    let _run_target_args'_v1426 = v1445 
    #endif
    let v1448 : System.Guid = _run_target_args'_v1426 
    let _run_target_args'_v2 = v1448 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1453 : string = method206()
    let v1454 : bool = v1453 = ""
    let v1456 : string =
        if v1454 then
            let v1455 : string = "M-d-y hh:mm:ss tt"
            v1455
        else
            v1453
    let v1457 : (string -> string) = v1.ToString
    let v1458 : string = v1457 v1456
    (* run_target_args'
    let v1472 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1473 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1474 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1473 
    let _run_target_args'_v1472 = v1474 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1475 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1472 = v1475 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1478 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1472 = v1478 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1481 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1472 = v1481 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1484 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1472 = v1484 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1487 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1472 = v1487 
    #endif
#else
    let v1488 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1472 = v1488 
    #endif
    let v1489 : System.TimeZoneInfo = _run_target_args'_v1472 
    (* run_target_args'
    let v1494 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1495 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1496 : (System.DateTime -> int64) = _.Ticks
    let v1497 : int64 = v1496 v1
    let _run_target_args'_v1495 = v1497 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1498 : (System.DateTime -> int64) = _.Ticks
    let v1499 : int64 = v1498 v1
    let _run_target_args'_v1495 = v1499 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1500 : int64 = null |> unbox<int64>
    let _run_target_args'_v1495 = v1500 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1503 : (System.DateTime -> int64) = _.Ticks
    let v1504 : int64 = v1503 v1
    let _run_target_args'_v1495 = v1504 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1505 : (System.DateTime -> int64) = _.Ticks
    let v1506 : int64 = v1505 v1
    let _run_target_args'_v1495 = v1506 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1507 : (System.DateTime -> int64) = _.Ticks
    let v1508 : int64 = v1507 v1
    let _run_target_args'_v1495 = v1508 
    #endif
#else
    let v1509 : (System.DateTime -> int64) = _.Ticks
    let v1510 : int64 = v1509 v1
    let _run_target_args'_v1495 = v1510 
    #endif
    let v1511 : int64 = _run_target_args'_v1495 
    let v1528 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1529 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1511) v1528 
    let v1530 : System.TimeSpan = v1529 |> System.TimeSpan 
    let _run_target_args'_v1494 = v1530 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1533 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1534 : (System.DateTime -> int64) = _.Ticks
    let v1535 : int64 = v1534 v1
    let _run_target_args'_v1533 = v1535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1536 : (System.DateTime -> int64) = _.Ticks
    let v1537 : int64 = v1536 v1
    let _run_target_args'_v1533 = v1537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1538 : int64 = null |> unbox<int64>
    let _run_target_args'_v1533 = v1538 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1541 : (System.DateTime -> int64) = _.Ticks
    let v1542 : int64 = v1541 v1
    let _run_target_args'_v1533 = v1542 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1543 : (System.DateTime -> int64) = _.Ticks
    let v1544 : int64 = v1543 v1
    let _run_target_args'_v1533 = v1544 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1545 : (System.DateTime -> int64) = _.Ticks
    let v1546 : int64 = v1545 v1
    let _run_target_args'_v1533 = v1546 
    #endif
#else
    let v1547 : (System.DateTime -> int64) = _.Ticks
    let v1548 : int64 = v1547 v1
    let _run_target_args'_v1533 = v1548 
    #endif
    let v1549 : int64 = _run_target_args'_v1533 
    let v1566 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1567 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1549) v1566 
    let v1568 : System.TimeSpan = v1567 |> System.TimeSpan 
    let _run_target_args'_v1494 = v1568 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1571 : US3 = US3_2
    let v1572 : US4 = US4_2(v1571)
    let v1573 : string = $"date_time.get_utc_offset / target: {v1572}"
    let v1574 : System.TimeSpan = failwith<System.TimeSpan> v1573
    let _run_target_args'_v1494 = v1574 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1577 : US3 = US3_0
    let v1578 : US4 = US4_3(v1577)
    let v1579 : string = $"date_time.get_utc_offset / target: {v1578}"
    let v1580 : System.TimeSpan = failwith<System.TimeSpan> v1579
    let _run_target_args'_v1494 = v1580 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1583 : US3 = US3_0
    let v1584 : US4 = US4_4(v1583)
    let v1585 : string = $"date_time.get_utc_offset / target: {v1584}"
    let v1586 : System.TimeSpan = failwith<System.TimeSpan> v1585
    let _run_target_args'_v1494 = v1586 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1589 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1590 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1591 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1592 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1591 
    let _run_target_args'_v1590 = v1592 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1590 = v1593 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1596 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1590 = v1596 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1599 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1590 = v1599 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1602 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1590 = v1602 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1605 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1590 = v1605 
    #endif
#else
    let v1606 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1590 = v1606 
    #endif
    let v1607 : System.TimeZoneInfo = _run_target_args'_v1590 
    let v1612 : (System.DateTime -> System.TimeSpan) = v1589 v1607
    let v1613 : System.TimeSpan = v1612 v1
    let _run_target_args'_v1494 = v1613 
    #endif
#else
    let v1614 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1615 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1616 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1617 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1616 
    let _run_target_args'_v1615 = v1617 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1618 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1618 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1621 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1621 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1624 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1627 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1627 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1630 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1630 
    #endif
#else
    let v1631 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1631 
    #endif
    let v1632 : System.TimeZoneInfo = _run_target_args'_v1615 
    let v1637 : (System.DateTime -> System.TimeSpan) = v1614 v1632
    let v1638 : System.TimeSpan = v1637 v1
    let _run_target_args'_v1494 = v1638 
    #endif
    let v1639 : System.TimeSpan = _run_target_args'_v1494 
    let v1647 : (System.TimeSpan -> int32) = _.Hours
    let v1648 : int32 = v1647 v1639
    let v1651 : bool = v1648 > 0
    let v1652 : uint8 =
        if v1651 then
            1uy
        else
            0uy
    let v1653 : string = method207()
    (* run_target_args'
    let v1654 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1655 : string = "$0.toString($1)"
    let v1656 : string = Fable.Core.RustInterop.emitRustExpr struct (v1639, v1653) v1655 
    let _run_target_args'_v1654 = v1656 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1657 : string = "$0.toString($1)"
    let v1658 : string = Fable.Core.RustInterop.emitRustExpr struct (v1639, v1653) v1657 
    let _run_target_args'_v1654 = v1658 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1659 : string = "$0.toString($1)"
    let v1660 : string = Fable.Core.RustInterop.emitRustExpr struct (v1639, v1653) v1659 
    let _run_target_args'_v1654 = v1660 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1661 : string = v1639.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1654 = v1661 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1662 : string = v1639.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1654 = v1662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1663 : string = v1639.ToString v1653 
    let _run_target_args'_v1654 = v1663 
    #endif
#else
    let v1709 : string = v1639.ToString v1653 
    let _run_target_args'_v1654 = v1709 
    #endif
    let v1755 : string = _run_target_args'_v1654 
    let v1803 : string = $"{v1652}{v1755}"
    let v1804 : (System.Guid -> string) = _.ToString()
    let v1805 : string = v1804 v0
    let v1808 : int32 = v1458.Length
    let v1809 : int32 = v1803.Length
    let v1810 : int32 = v1808 + v1809
    let v1811 : (string -> int32) = String.length
    let v1812 : int32 = v1811 v1805
    let v1815 : int32 = v1810 |> int32 
    let v1822 : int32 = v1812 |> int32 
    let v1829 : int32 = v1822 - 1
    let v1830 : string = v1805.[int v1815..int v1829]
    let v1834 : string = $"{v1458}{v1803}{v1830}"
    (* run_target_args'
    let v1835 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1836 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1836 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1839 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1839 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1842 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1835 = v1842 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1845 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1845 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1848 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1848 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1851 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1851 
    #endif
#else
    let v1854 : System.Guid = v1834 |> System.Guid 
    let _run_target_args'_v1835 = v1854 
    #endif
    let v1857 : System.Guid = _run_target_args'_v1835 
    let _run_target_args'_v2 = v1857 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1862 : string = method206()
    let v1863 : bool = v1862 = ""
    let v1865 : string =
        if v1863 then
            let v1864 : string = "M-d-y hh:mm:ss tt"
            v1864
        else
            v1862
    let v1866 : (string -> string) = v1.ToString
    let v1867 : string = v1866 v1865
    (* run_target_args'
    let v1881 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1882 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1883 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1882 
    let _run_target_args'_v1881 = v1883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1884 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1884 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1887 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1887 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1890 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1890 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1881 = v1893 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1896 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1896 
    #endif
#else
    let v1897 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1881 = v1897 
    #endif
    let v1898 : System.TimeZoneInfo = _run_target_args'_v1881 
    (* run_target_args'
    let v1903 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1904 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1905 : (System.DateTime -> int64) = _.Ticks
    let v1906 : int64 = v1905 v1
    let _run_target_args'_v1904 = v1906 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1907 : (System.DateTime -> int64) = _.Ticks
    let v1908 : int64 = v1907 v1
    let _run_target_args'_v1904 = v1908 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1909 : int64 = null |> unbox<int64>
    let _run_target_args'_v1904 = v1909 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1912 : (System.DateTime -> int64) = _.Ticks
    let v1913 : int64 = v1912 v1
    let _run_target_args'_v1904 = v1913 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1914 : (System.DateTime -> int64) = _.Ticks
    let v1915 : int64 = v1914 v1
    let _run_target_args'_v1904 = v1915 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1916 : (System.DateTime -> int64) = _.Ticks
    let v1917 : int64 = v1916 v1
    let _run_target_args'_v1904 = v1917 
    #endif
#else
    let v1918 : (System.DateTime -> int64) = _.Ticks
    let v1919 : int64 = v1918 v1
    let _run_target_args'_v1904 = v1919 
    #endif
    let v1920 : int64 = _run_target_args'_v1904 
    let v1937 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1938 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1920) v1937 
    let v1939 : System.TimeSpan = v1938 |> System.TimeSpan 
    let _run_target_args'_v1903 = v1939 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1942 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1943 : (System.DateTime -> int64) = _.Ticks
    let v1944 : int64 = v1943 v1
    let _run_target_args'_v1942 = v1944 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1945 : (System.DateTime -> int64) = _.Ticks
    let v1946 : int64 = v1945 v1
    let _run_target_args'_v1942 = v1946 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1947 : int64 = null |> unbox<int64>
    let _run_target_args'_v1942 = v1947 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1950 : (System.DateTime -> int64) = _.Ticks
    let v1951 : int64 = v1950 v1
    let _run_target_args'_v1942 = v1951 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1952 : (System.DateTime -> int64) = _.Ticks
    let v1953 : int64 = v1952 v1
    let _run_target_args'_v1942 = v1953 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1954 : (System.DateTime -> int64) = _.Ticks
    let v1955 : int64 = v1954 v1
    let _run_target_args'_v1942 = v1955 
    #endif
#else
    let v1956 : (System.DateTime -> int64) = _.Ticks
    let v1957 : int64 = v1956 v1
    let _run_target_args'_v1942 = v1957 
    #endif
    let v1958 : int64 = _run_target_args'_v1942 
    let v1975 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1976 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1958) v1975 
    let v1977 : System.TimeSpan = v1976 |> System.TimeSpan 
    let _run_target_args'_v1903 = v1977 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1980 : US3 = US3_2
    let v1981 : US4 = US4_2(v1980)
    let v1982 : string = $"date_time.get_utc_offset / target: {v1981}"
    let v1983 : System.TimeSpan = failwith<System.TimeSpan> v1982
    let _run_target_args'_v1903 = v1983 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1986 : US3 = US3_0
    let v1987 : US4 = US4_3(v1986)
    let v1988 : string = $"date_time.get_utc_offset / target: {v1987}"
    let v1989 : System.TimeSpan = failwith<System.TimeSpan> v1988
    let _run_target_args'_v1903 = v1989 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1992 : US3 = US3_0
    let v1993 : US4 = US4_4(v1992)
    let v1994 : string = $"date_time.get_utc_offset / target: {v1993}"
    let v1995 : System.TimeSpan = failwith<System.TimeSpan> v1994
    let _run_target_args'_v1903 = v1995 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1998 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1999 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2000 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2001 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2000 
    let _run_target_args'_v1999 = v2001 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2002 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2002 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2005 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2005 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2008 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2008 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2011 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2011 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2014 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2014 
    #endif
#else
    let v2015 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2015 
    #endif
    let v2016 : System.TimeZoneInfo = _run_target_args'_v1999 
    let v2021 : (System.DateTime -> System.TimeSpan) = v1998 v2016
    let v2022 : System.TimeSpan = v2021 v1
    let _run_target_args'_v1903 = v2022 
    #endif
#else
    let v2023 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2024 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2025 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2026 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2025 
    let _run_target_args'_v2024 = v2026 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2027 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2024 = v2027 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2030 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2024 = v2030 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2033 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2024 = v2033 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2036 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2024 = v2036 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2039 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2024 = v2039 
    #endif
#else
    let v2040 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2024 = v2040 
    #endif
    let v2041 : System.TimeZoneInfo = _run_target_args'_v2024 
    let v2046 : (System.DateTime -> System.TimeSpan) = v2023 v2041
    let v2047 : System.TimeSpan = v2046 v1
    let _run_target_args'_v1903 = v2047 
    #endif
    let v2048 : System.TimeSpan = _run_target_args'_v1903 
    let v2056 : (System.TimeSpan -> int32) = _.Hours
    let v2057 : int32 = v2056 v2048
    let v2060 : bool = v2057 > 0
    let v2061 : uint8 =
        if v2060 then
            1uy
        else
            0uy
    let v2062 : string = method207()
    (* run_target_args'
    let v2063 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2064 : string = "$0.toString($1)"
    let v2065 : string = Fable.Core.RustInterop.emitRustExpr struct (v2048, v2062) v2064 
    let _run_target_args'_v2063 = v2065 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2066 : string = "$0.toString($1)"
    let v2067 : string = Fable.Core.RustInterop.emitRustExpr struct (v2048, v2062) v2066 
    let _run_target_args'_v2063 = v2067 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2068 : string = "$0.toString($1)"
    let v2069 : string = Fable.Core.RustInterop.emitRustExpr struct (v2048, v2062) v2068 
    let _run_target_args'_v2063 = v2069 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2070 : string = v2048.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2063 = v2070 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2071 : string = v2048.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2063 = v2071 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2072 : string = v2048.ToString v2062 
    let _run_target_args'_v2063 = v2072 
    #endif
#else
    let v2118 : string = v2048.ToString v2062 
    let _run_target_args'_v2063 = v2118 
    #endif
    let v2164 : string = _run_target_args'_v2063 
    let v2212 : string = $"{v2061}{v2164}"
    let v2213 : (System.Guid -> string) = _.ToString()
    let v2214 : string = v2213 v0
    let v2217 : int32 = v1867.Length
    let v2218 : int32 = v2212.Length
    let v2219 : int32 = v2217 + v2218
    let v2220 : (string -> int32) = String.length
    let v2221 : int32 = v2220 v2214
    let v2224 : int32 = v2219 |> int32 
    let v2231 : int32 = v2221 |> int32 
    let v2238 : int32 = v2231 - 1
    let v2239 : string = v2214.[int v2224..int v2238]
    let v2243 : string = $"{v1867}{v2212}{v2239}"
    (* run_target_args'
    let v2244 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2245 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2245 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2248 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2248 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2251 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2244 = v2251 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2254 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2254 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2257 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2260 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2260 
    #endif
#else
    let v2263 : System.Guid = v2243 |> System.Guid 
    let _run_target_args'_v2244 = v2263 
    #endif
    let v2266 : System.Guid = _run_target_args'_v2244 
    let _run_target_args'_v2 = v2266 
    #endif
#else
    let v2271 : string = method206()
    let v2272 : bool = v2271 = ""
    let v2274 : string =
        if v2272 then
            let v2273 : string = "M-d-y hh:mm:ss tt"
            v2273
        else
            v2271
    let v2275 : (string -> string) = v1.ToString
    let v2276 : string = v2275 v2274
    (* run_target_args'
    let v2290 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2291 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2292 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2291 
    let _run_target_args'_v2290 = v2292 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2293 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2290 = v2293 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2296 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2290 = v2296 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2299 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2290 = v2299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2302 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2290 = v2302 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2305 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2290 = v2305 
    #endif
#else
    let v2306 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2290 = v2306 
    #endif
    let v2307 : System.TimeZoneInfo = _run_target_args'_v2290 
    (* run_target_args'
    let v2312 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2313 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2314 : (System.DateTime -> int64) = _.Ticks
    let v2315 : int64 = v2314 v1
    let _run_target_args'_v2313 = v2315 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2316 : (System.DateTime -> int64) = _.Ticks
    let v2317 : int64 = v2316 v1
    let _run_target_args'_v2313 = v2317 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2318 : int64 = null |> unbox<int64>
    let _run_target_args'_v2313 = v2318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2321 : (System.DateTime -> int64) = _.Ticks
    let v2322 : int64 = v2321 v1
    let _run_target_args'_v2313 = v2322 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2323 : (System.DateTime -> int64) = _.Ticks
    let v2324 : int64 = v2323 v1
    let _run_target_args'_v2313 = v2324 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2325 : (System.DateTime -> int64) = _.Ticks
    let v2326 : int64 = v2325 v1
    let _run_target_args'_v2313 = v2326 
    #endif
#else
    let v2327 : (System.DateTime -> int64) = _.Ticks
    let v2328 : int64 = v2327 v1
    let _run_target_args'_v2313 = v2328 
    #endif
    let v2329 : int64 = _run_target_args'_v2313 
    let v2346 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2347 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2329) v2346 
    let v2348 : System.TimeSpan = v2347 |> System.TimeSpan 
    let _run_target_args'_v2312 = v2348 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2351 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2352 : (System.DateTime -> int64) = _.Ticks
    let v2353 : int64 = v2352 v1
    let _run_target_args'_v2351 = v2353 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2354 : (System.DateTime -> int64) = _.Ticks
    let v2355 : int64 = v2354 v1
    let _run_target_args'_v2351 = v2355 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2356 : int64 = null |> unbox<int64>
    let _run_target_args'_v2351 = v2356 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2359 : (System.DateTime -> int64) = _.Ticks
    let v2360 : int64 = v2359 v1
    let _run_target_args'_v2351 = v2360 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2361 : (System.DateTime -> int64) = _.Ticks
    let v2362 : int64 = v2361 v1
    let _run_target_args'_v2351 = v2362 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2363 : (System.DateTime -> int64) = _.Ticks
    let v2364 : int64 = v2363 v1
    let _run_target_args'_v2351 = v2364 
    #endif
#else
    let v2365 : (System.DateTime -> int64) = _.Ticks
    let v2366 : int64 = v2365 v1
    let _run_target_args'_v2351 = v2366 
    #endif
    let v2367 : int64 = _run_target_args'_v2351 
    let v2384 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2385 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2367) v2384 
    let v2386 : System.TimeSpan = v2385 |> System.TimeSpan 
    let _run_target_args'_v2312 = v2386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2389 : US3 = US3_2
    let v2390 : US4 = US4_2(v2389)
    let v2391 : string = $"date_time.get_utc_offset / target: {v2390}"
    let v2392 : System.TimeSpan = failwith<System.TimeSpan> v2391
    let _run_target_args'_v2312 = v2392 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2395 : US3 = US3_0
    let v2396 : US4 = US4_3(v2395)
    let v2397 : string = $"date_time.get_utc_offset / target: {v2396}"
    let v2398 : System.TimeSpan = failwith<System.TimeSpan> v2397
    let _run_target_args'_v2312 = v2398 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2401 : US3 = US3_0
    let v2402 : US4 = US4_4(v2401)
    let v2403 : string = $"date_time.get_utc_offset / target: {v2402}"
    let v2404 : System.TimeSpan = failwith<System.TimeSpan> v2403
    let _run_target_args'_v2312 = v2404 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2407 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2408 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2409 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2410 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2409 
    let _run_target_args'_v2408 = v2410 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2411 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2408 = v2411 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2414 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2408 = v2414 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2417 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2408 = v2417 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2420 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2408 = v2420 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2423 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2408 = v2423 
    #endif
#else
    let v2424 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2408 = v2424 
    #endif
    let v2425 : System.TimeZoneInfo = _run_target_args'_v2408 
    let v2430 : (System.DateTime -> System.TimeSpan) = v2407 v2425
    let v2431 : System.TimeSpan = v2430 v1
    let _run_target_args'_v2312 = v2431 
    #endif
#else
    let v2432 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2433 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2434 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2435 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2434 
    let _run_target_args'_v2433 = v2435 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2436 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2433 = v2436 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2439 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2433 = v2439 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2442 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2433 = v2442 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2445 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2433 = v2445 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2448 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2433 = v2448 
    #endif
#else
    let v2449 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2433 = v2449 
    #endif
    let v2450 : System.TimeZoneInfo = _run_target_args'_v2433 
    let v2455 : (System.DateTime -> System.TimeSpan) = v2432 v2450
    let v2456 : System.TimeSpan = v2455 v1
    let _run_target_args'_v2312 = v2456 
    #endif
    let v2457 : System.TimeSpan = _run_target_args'_v2312 
    let v2465 : (System.TimeSpan -> int32) = _.Hours
    let v2466 : int32 = v2465 v2457
    let v2469 : bool = v2466 > 0
    let v2470 : uint8 =
        if v2469 then
            1uy
        else
            0uy
    let v2471 : string = method207()
    (* run_target_args'
    let v2472 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2473 : string = "$0.toString($1)"
    let v2474 : string = Fable.Core.RustInterop.emitRustExpr struct (v2457, v2471) v2473 
    let _run_target_args'_v2472 = v2474 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2475 : string = "$0.toString($1)"
    let v2476 : string = Fable.Core.RustInterop.emitRustExpr struct (v2457, v2471) v2475 
    let _run_target_args'_v2472 = v2476 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2477 : string = "$0.toString($1)"
    let v2478 : string = Fable.Core.RustInterop.emitRustExpr struct (v2457, v2471) v2477 
    let _run_target_args'_v2472 = v2478 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2479 : string = v2457.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2472 = v2479 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2480 : string = v2457.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2472 = v2480 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2481 : string = v2457.ToString v2471 
    let _run_target_args'_v2472 = v2481 
    #endif
#else
    let v2527 : string = v2457.ToString v2471 
    let _run_target_args'_v2472 = v2527 
    #endif
    let v2573 : string = _run_target_args'_v2472 
    let v2621 : string = $"{v2470}{v2573}"
    let v2622 : (System.Guid -> string) = _.ToString()
    let v2623 : string = v2622 v0
    let v2626 : int32 = v2276.Length
    let v2627 : int32 = v2621.Length
    let v2628 : int32 = v2626 + v2627
    let v2629 : (string -> int32) = String.length
    let v2630 : int32 = v2629 v2623
    let v2633 : int32 = v2628 |> int32 
    let v2640 : int32 = v2630 |> int32 
    let v2647 : int32 = v2640 - 1
    let v2648 : string = v2623.[int v2633..int v2647]
    let v2652 : string = $"{v2276}{v2621}{v2648}"
    (* run_target_args'
    let v2653 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2654 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2654 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2657 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2657 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2660 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2653 = v2660 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2663 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2663 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2666 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2666 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2669 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2669 
    #endif
#else
    let v2672 : System.Guid = v2652 |> System.Guid 
    let _run_target_args'_v2653 = v2672 
    #endif
    let v2675 : System.Guid = _run_target_args'_v2653 
    let _run_target_args'_v2 = v2675 
    #endif
    let v2680 : System.Guid = _run_target_args'_v2 
    v2680
and method208 (v0 : string, v1 : string) : unit =
    let v2 : bool = method33(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method66(v0)
        ()
    let v5 : string option = method35(v1)
    let v6 : string = ""
    let v7 : string = v5 |> Option.defaultValue v6 
    let v10 : bool = method33(v7)
    let v11 : bool = v10 = false
    if v11 then
        let v12 : System.IDisposable = method66(v7)
        ()
    let v13 : bool = method33(v1)
    let v24 : bool =
        if v13 then
            let v14 : Result<std_path_PathBuf, std_io_Error> = method41(v1)
            (* run_target_args'
            let v15 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v16 : string = "$0.is_err()"
            let v17 : bool = Fable.Core.RustInterop.emitRustExpr v14 v16 
            let _run_target_args'_v15 = v17 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v14 v18 
            let _run_target_args'_v15 = v19 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v14 v20 
            let _run_target_args'_v15 = v21 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v15 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v15 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v15 = true 
            #endif
#else
            let _run_target_args'_v15 = true 
            #endif
            let v22 : bool = _run_target_args'_v15 
            v22
        else
            false
    if v24 then
        let v25 : bool = true
        method77(v25, v1)
    let v26 : bool = method33(v1)
    let v27 : bool = v26 = false
    if v27 then
        (* run_target_args'
        let v28 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v29 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v30 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v29 
        let v31 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v33 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method210 () : string =
    let v0 : string = "("
    v0
and method211 () : string =
    let v0 : string = " "
    v0
and method212 (v0 : US37) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"%A{v0}"
    let v6 : string = $"{v3}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = v2.l0
    v14
and method216 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "is_error"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string =
        if v0 then
            let v33 : string = "true"
            v33
        else
            let v34 : string = "false"
            v34
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "retry"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = ", "
    let v112 : string = $"{v111}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v120 : string = $"{v3}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = " }"
    let v129 : string = $"{v128}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v5, v129)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v137 : string = v5.l0
    v137
and method215 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method216(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "common.retry_fn' / loop"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure83 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method12()
        let v43 : string = $"{v1}/{v0}"
        let v44 : string = method215(v23, v24, v25, v26, v27, v28, v41, v42, v4, v43, v2, v3)
        method19(v44)
and method214 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method89(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US41 =
        if v11 then
            US41_0(v9, v10)
        else
            US41_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US41_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US41_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure83(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v8 + 1uy
        method214(v0, v1, v2, v3, v4, v5, v6, v7, v71)
and method213 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method214(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method209 (v0 : US36, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US3 = US3_0
    let v18 : US4 = US4_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _run_target_args'_v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _run_target_args'_v10 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _run_target_args'_v10 = v27 
    #endif
#else
    let v28 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v29 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v30 : bool = v29 v28
    let _run_target_args'_v10 = v30 
    #endif
    let v31 : bool = _run_target_args'_v10 
    let v39 : string =
        if v31 then
            let v37 : string = "_WINDOWS"
            v37
        else
            let v38 : string = "_LINUX"
            v38
    let v40 : string = $" --define {v39}"
    let v136 : string =
        match v0 with
        | US36_1 -> (* None *)
            let v134 : string = ""
            v134
        | US36_0(v41) -> (* Some *)
            let v42 : string = Unchecked.defaultof<_>
            let v45 : string = Unchecked.defaultof<_>
            let v50 : bool =
                match v41 with
                | US37_0(v48) -> (* Wasm *)
                    let v49 : bool = v42 = v48
                    v49
                | _ ->
                    false
            let v82 : US5 =
                if v50 then
                    let v51 : string = "Wasm"
                    US5_0(v51)
                else
                    (* run_target_args'
                    let v53 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v54 : string = method210()
                    let _run_target_args'_v53 = v54 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v55 : string = method210()
                    let _run_target_args'_v53 = v55 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v56 : string = method210()
                    let _run_target_args'_v53 = v56 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v57 : string = method211()
                    let _run_target_args'_v53 = v57 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v58 : string = method211()
                    let _run_target_args'_v53 = v58 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v59 : string = method211()
                    let _run_target_args'_v53 = v59 
                    #endif
#else
                    let v60 : string = method211()
                    let _run_target_args'_v53 = v60 
                    #endif
                    let v61 : string = _run_target_args'_v53 
                    let v66 : US37 = US37_0(v42)
                    let v67 : string = method212(v66)
                    let v68 : (string []) = v67.Split v61 
                    let v71 : string = v68.[int 0]
                    let v74 : string = method212(v41)
                    let v75 : bool = v74.StartsWith (v71, false, null)
                    if v75 then
                        let v78 : string = "Wasm"
                        US5_0(v78)
                    else
                        US5_1
            let v126 : US5 =
                match v82 with
                | US5_1 -> (* None *)
                    let v87 : bool =
                        match v41 with
                        | US37_1(v85) -> (* Contract *)
                            let v86 : bool = v45 = v85
                            v86
                        | _ ->
                            false
                    let v119 : US5 =
                        if v87 then
                            let v88 : string = "Contract"
                            US5_0(v88)
                        else
                            (* run_target_args'
                            let v90 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v91 : string = method210()
                            let _run_target_args'_v90 = v91 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v92 : string = method210()
                            let _run_target_args'_v90 = v92 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v93 : string = method210()
                            let _run_target_args'_v90 = v93 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v94 : string = method211()
                            let _run_target_args'_v90 = v94 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v95 : string = method211()
                            let _run_target_args'_v90 = v95 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v96 : string = method211()
                            let _run_target_args'_v90 = v96 
                            #endif
#else
                            let v97 : string = method211()
                            let _run_target_args'_v90 = v97 
                            #endif
                            let v98 : string = _run_target_args'_v90 
                            let v103 : US37 = US37_1(v45)
                            let v104 : string = method212(v103)
                            let v105 : (string []) = v104.Split v98 
                            let v108 : string = v105.[int 0]
                            let v111 : string = method212(v41)
                            let v112 : bool = v111.StartsWith (v108, false, null)
                            if v112 then
                                let v115 : string = "Contract"
                                US5_0(v115)
                            else
                                US5_1
                    match v119 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v120) -> (* Some *)
                        US5_0(v120)
                | US5_0(v83) -> (* Some *)
                    US5_0(v83)
            let v130 : string =
                match v126 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v127) -> (* Some *)
                    v127
            let v131 : (unit -> string) = v130.ToUpper
            let v132 : string = v131 ()
            let v133 : string = $" --define {v132}"
            v133
    let v137 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v40}{v136}"
    let v143 : Result<string, string> =
        match v4 with
        | US13_1(v140) -> (* Error *)
            let v141 : Result<string, string> = Error v140 
            v141
        | US13_0(v138) -> (* Ok *)
            let v139 : Result<string, string> = Ok v138 
            v139
    (* run_target_args'
    let v144 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v145 : string = "$0.ok()"
    let v146 : string option = Fable.Core.RustInterop.emitRustExpr v143 v145 
    let _run_target_args'_v144 = v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = "$0.ok()"
    let v148 : string option = Fable.Core.RustInterop.emitRustExpr v143 v147 
    let _run_target_args'_v144 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "$0.ok()"
    let v150 : string option = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _run_target_args'_v144 = v150 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v144 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v144 = v152 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v153 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v144 = v153 
    #endif
#else
    let v154 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v144 = v154 
    #endif
    let v155 : string option = _run_target_args'_v144 
    let v158 : uint8 = 3uy
    let v159 : bool = true
    method213(v158, v137, v5, v6, v7, v8, v159, v155)
and method218 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "dotnet_fable_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method217 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method218(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.process_rust / dotnet fable error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method217(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure85 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method219 () : (std_string_String -> bool) =
    closure85()
and method220 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method221 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method222 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method223 () : string =
    let v0 : string = "("
    v0
and method224 () : string =
    let v0 : string = "("
    v0
and method226 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    let v50 : string = "true; let _capture_move = (move || { //"
    let v51 : bool = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "Box::new($0)"
    let v53 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v45 v52 
    let v54 : string = "Box::leak($0)"
    let v55 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "$0"
    let v57 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v56 
    let v58 : string = $"$0.captures_iter(v55)"
    let v59 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "true; let _regex_captures : Vec<_> = v59.map(|x| { //"
    let v61 : bool = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = $"x"
    let v63 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "Box::new($0)"
    let v65 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "Box::leak($0)"
    let v67 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : string = $"$0.capture_names()"
    let v69 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v68 
    let v70 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v69.map(|x| { //"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "x.unwrap_or(\"\").to_string().into()"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "$0.clone()"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = $"v67.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v73 v76 
    let v78 : (string * string) = v75, v77 
    let v79 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_regex_captures"
    let v82 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "true; $0 }).collect::<Vec<_>>()"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "_regex_captures"
    let v86 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "true; $0 })()"
    let v88 : bool = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "_capture_move"
    let v90 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v89 
    v90
and closure86 () (v0 : std_collections_HashMap<string, string>) : US42 =
    US42_0(v0)
and method227 () : (std_collections_HashMap<string, string> -> US42) =
    closure86()
and method228 () : string =
    let v0 : string = "a"
    v0
and closure87 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v0}/{3uy}"
        let v43 : string = method215(v22, v23, v24, v25, v26, v27, v40, v41, v3, v42, v1, v2)
        method19(v43)
and method225 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US13_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US13_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = "$0.ok()"
    let v17 : string option = Fable.Core.RustInterop.emitRustExpr v14 v16 
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : string = "$0.ok()"
    let v19 : string option = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _run_target_args'_v15 = v19 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v20 : string = "$0.ok()"
    let v21 : string option = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v15 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v15 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v15 = v24 
    #endif
#else
    let v25 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v15 = v25 
    #endif
    let v26 : string option = _run_target_args'_v15 
    let v29 : bool = true
    let struct (v30 : int32, v31 : string) = method89(v8, v3, v4, v5, v6, v29, v26)
    let v32 : string = "failed to load manifest for workspace member"
    let v33 : bool = v31.Contains v32 
    let v36 : bool = v33 = false
    let v176 : US41 =
        if v36 then
            let v37 : bool = v30 = 0
            if v37 then
                US41_0(v30, v31)
            else
                US41_1(v30, v31)
        else
            let v41 : string = $"regex::Regex::new(&$0)"
            let v42 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v43 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v42 v41 
            (* run_target_args'
            let v44 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v45 : string = "$0.unwrap()"
            let v46 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v45 
            let _run_target_args'_v44 = v46 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v47 : string = "$0.unwrap()"
            let v48 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v47 
            let _run_target_args'_v44 = v48 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v49 : string = "$0.unwrap()"
            let v50 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v49 
            let _run_target_args'_v44 = v50 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v51 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v44 = v51 
            #endif
#if FABLE_COMPILER_PYTHON
            let v52 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v44 = v52 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v44 = v53 
            #endif
#else
            let v54 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v44 = v54 
            #endif
            let v55 : regex_Regex = _run_target_args'_v44 
            let v58 : Vec<std_collections_HashMap<string, string>> = method226(v31, v55)
            let v59 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v60 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : std_collections_HashMap<string, string> option = v60 |> Array.tryItem 0 
            let v62 : (std_collections_HashMap<string, string> -> US42) = method227()
            let v63 : US42 option = v61 |> Option.map v62 
            let v74 : US42 = US42_1
            let v75 : US42 = v63 |> Option.defaultValue v74 
            let v103 : US43 =
                match v75 with
                | US42_1 -> (* None *)
                    US43_1
                | US42_0(v79) -> (* Some *)
                    let v80 : string = method228()
                    let v81 : string = "std::collections::HashMap::get(&$0, &v80).map(|x| x).cloned()"
                    let v82 : string option = Fable.Core.RustInterop.emitRustExpr v79 v81 
                    let v83 : (string -> US5) = method6()
                    let v84 : US5 option = v82 |> Option.map v83 
                    let v95 : US5 = US5_1
                    let v96 : US5 = v84 |> Option.defaultValue v95 
                    US43_0(v96)
            let v110 : US5 =
                match v103 with
                | US43_0(v104) -> (* Some *)
                    match v104 with
                    | US5_0(v105) -> (* Some *)
                        US5_0(v105)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v110 with
            | US5_1 -> (* None *)
                US41_1(v30, v31)
            | US5_0(v112) -> (* Some *)
                let v113 : bool = method32(v112)
                let v114 : bool = v113 = false
                if v114 then
                    let v115 : string option = method35(v112)
                    let v116 : string = ""
                    let v117 : string = v115 |> Option.defaultValue v116 
                    let v120 : System.IDisposable = method66(v117)
                    (* run_target_args'
                    let v121 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v122 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v121 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v128 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v129 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v129 
                    #endif
#else
                    let v130 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v121 = v130 
                    #endif
                    let v131 : System.DateTime = _run_target_args'_v121 
                    let v136 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v137 : System.Guid = v136 ()
                    let v140 : System.Guid = method203(v137, v131)
                    let v141 : (System.Guid -> string) = _.ToString()
                    let v142 : string = v141 v140
                    let v145 : string = $"[package]"
                    let v146 : string = $"name = \"spiral_{v142}\""
                    let v147 : string = "\n"
                    let v148 : string = v145 + v147 
                    let v149 : string = v148 + v146 
                    let v150 : string = $"version = \"0.0.1\""
                    let v151 : string = v149 + v147 
                    let v152 : string = v151 + v150 
                    let v153 : string = $"edition = \"2021\""
                    let v154 : string = v152 + v147 
                    let v155 : string = v154 + v153 
                    let v156 : string = $""
                    let v157 : string = v155 + v147 
                    let v158 : string = v157 + v156 
                    let v159 : string = $"[[bin]]"
                    let v160 : string = v158 + v147 
                    let v161 : string = v160 + v159 
                    let v162 : string = $"name = \"spiral_{v142}\""
                    let v163 : string = v161 + v147 
                    let v164 : string = v163 + v162 
                    let v165 : string = $"path = \"spiral.rs\""
                    let v166 : string = v164 + v147 
                    let v167 : string = v166 + v165 
                    (* run_target_args'
                    let v168 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v112, v167) v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v112, v167)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v170 : bool = v30 = 0
                if v170 then
                    US41_0(v30, v31)
                else
                    US41_1(v30, v31)
    let struct (v184 : bool, v185 : int32, v186 : string) =
        match v176 with
        | US41_1(v179, v180) -> (* Error *)
            struct (true, v179, v180)
        | US41_0(v177, v178) -> (* Ok *)
            struct (false, v177, v178)
    let v187 : bool = v184 = false
    let v189 : bool =
        if v187 then
            true
        else
            let v188 : bool = v2 >= 3uy
            v188
    if v189 then
        struct (v185, v186)
    else
        let v190 : unit = ()
        let v191 : (unit -> unit) = closure87(v2, v185, v186, v184)
        let v192 : unit = (fun () -> v191 (); v190) ()
        let v233 : uint8 = v2 + 1uy
        method225(v0, v1, v233)
and method230 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cargo_fmt_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method229 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method230(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.process_rust / cargo fmt error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure88 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method229(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method231 () : string =
    let v0 : string = "{"
    v0
and closure89 () (v0 : string) : string =
    v0
and closure90 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure91 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method233 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "external_command"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "cargo_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method232 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method233(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure92 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method70()
        let v43 : string = method232(v23, v24, v25, v26, v27, v28, v41, v42, v3, v1, v4, v0, v2)
        method19(v43)
and closure94 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure93 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : (string -> bool) = closure94()
    let v6 : (string []) = v2 |> Array.skipWhile v5 
    let v7 : (string []) = v6 |> Array.skip 2 
    let v8 : string seq = v7 |> Seq.ofArray
    let v11 : string = method63()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v8
and method235 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _run_target_args'_v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _run_target_args'_v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _run_target_args'_v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v33 = v55 
    #endif
    let v58 : string = _run_target_args'_v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cargo_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method234 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method235(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_rust / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure96 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method234(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure95 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure96(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method237 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "cargo_result"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "spiral_wasm_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method236 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method237(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / wasm error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method70()
        let v43 : string = $"\n{v3}"
        let v44 : string = method236(v23, v24, v25, v26, v27, v28, v41, v42, v4, v1, v2, v0, v43)
        method19(v44)
and method239 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v7, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v7, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v7, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v43 : string = "; "
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v7, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = "new_code_path"
    let v53 : string = $"{v52}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v7, v53)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v61 : string = $"{v26}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v7, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = $"{v1}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v7, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = $"{v43}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v7, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = "wasm_path"
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v7, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v94 : string = $"{v26}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v7, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v102 : string = $"{v2}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v7, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = $"{v43}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v7, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v118 : string = "command"
    let v119 : string = $"{v118}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v7, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v127 : string = $"{v26}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v7, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v135 : string = $"{v3}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v7, v135)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v143 : string = $"{v43}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v7, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v151 : string = "cleanup"
    let v152 : string = $"{v151}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v7, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v160 : string = $"{v26}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v7, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v170 : string =
        if v4 then
            let v168 : string = "true"
            v168
        else
            let v169 : string = "false"
            v169
    let v171 : string = $"{v170}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v7, v171)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v179 : string = $"{v43}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v7, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = "cargo_result"
    let v188 : string = $"{v187}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v7, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v196 : string = $"{v26}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v7, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v5}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v7, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = " }"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v7, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = v7.l0
    v221
and method238 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method239(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / cargo error"
    let v17 : string = $"{v6} {v7} #{v15} %s{v16} / {v14}"
    method18(v17)
and closure98 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
        let v42 : string = method8(v24, v25, v26, v27, v28, v29)
        let v43 : string = method70()
        let v44 : string = $"\n{v2}"
        let v45 : string = method238(v24, v25, v26, v27, v28, v29, v42, v43, v3, v1, v4, v5, v0, v44)
        method19(v45)
and method241 (v0 : string, v1 : UH4) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "new_code_path"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cleanup"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"%A{v1}"
    let v68 : string = $"{v65}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v3, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = " }"
    let v77 : string = $"{v76}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = v3.l0
    v85
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH4 = UH4_0
    let v20 : UH4 = UH4_1(v17, v18, v19)
    let v21 : UH4 = UH4_1(v15, v16, v20)
    let v22 : UH4 = UH4_1(v13, v14, v21)
    let v23 : UH4 = UH4_1(v11, v12, v22)
    let v24 : UH4 = UH4_1(v9, v10, v23)
    let v25 : string = method241(v8, v24)
    let v26 : int64 = v0.l0
    let v27 : string = "spiral.process_rust / cleanup"
    let v28 : string = $"{v6} {v7} #{v26} %s{v27} / {v25}"
    method18(v28)
and closure99 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method73()
        let v49 : string = method240(v29, v30, v31, v32, v33, v34, v47, v48, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v49)
and closure100 () () : US44 =
    US44_0
and method243 () : (unit -> US44) =
    closure100()
and closure101 () (v0 : string) : US44 =
    US44_1(v0)
and method244 () : (string -> US44) =
    closure101()
and method246 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error'"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method245 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method246(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.file_delete"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure102 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method70()
        let v39 : string = method245(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method242 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method43()
        (* run_target_args'
        let v8 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v9 : string = "$0.map_err(|x| $1(x))"
        let v10 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v9 
        let _run_target_args'_v8 = v10 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v11 : string = "$0.map_err(|x| $1(x))"
        let v12 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v11 
        let _run_target_args'_v8 = v12 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v13 : string = "$0.map_err(|x| $1(x))"
        let v14 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v13 
        let _run_target_args'_v8 = v14 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v15 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v8 = v15 
        #endif
#if FABLE_COMPILER_PYTHON
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v8 = v16 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v8 = v17 
        #endif
#else
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v8 = v18 
        #endif
        let v19 : Result<unit, string> = _run_target_args'_v8 
        let v22 : (unit -> US44) = method243()
        let v23 : (string -> US44) = method244()
        let v24 : US44 = match v19 with Ok () -> v22 () | Error x -> v23 x
        match v24 with
        | US44_1(v25) -> (* Error *)
            let v26 : unit = ()
            let v27 : (unit -> unit) = closure102(v25)
            let v28 : unit = (fun () -> v27 (); v26) ()
            ()
        | US44_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v68 : (string -> unit) = System.IO.File.Delete
        v68 v1
        #endif
        // run_target_args' is_unit
        method242(v3)
    | UH4_0 -> (* Nil *)
        ()
and method247 (v0 : string) : string =
    v0
and closure104 () (v0 : std_fs_FileType) : US45 =
    US45_0(v0)
and method248 () : (std_fs_FileType -> US45) =
    closure104()
and closure105 () (v0 : std_string_String) : US45 =
    US45_1(v0)
and method249 () : (std_string_String -> US45) =
    closure105()
and method250 (v0 : string) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    (* run_target_args'
    let v50 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _run_target_args'_v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _run_target_args'_v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _run_target_args'_v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    (* run_target_args'
    let v86 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _run_target_args'_v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _run_target_args'_v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _run_target_args'_v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v86 = v102 
    #endif
    let v105 : std_string_String = _run_target_args'_v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _run_target_args'_v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = null |> unbox<string>
    let _run_target_args'_v1 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = null |> unbox<string>
    let _run_target_args'_v1 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : string = null |> unbox<string>
    let _run_target_args'_v1 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : string = null |> unbox<string>
    let _run_target_args'_v1 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : (string -> string) = System.IO.Path.GetDirectoryName
    let v150 : string = v149 v0
    let _run_target_args'_v1 = v150 
    #endif
#else
    let v151 : (string -> string) = System.IO.Path.GetDirectoryName
    let v152 : string = v151 v0
    let _run_target_args'_v1 = v152 
    #endif
    let v153 : string = _run_target_args'_v1 
    v153
and closure103 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method67()
    (* run_target_args'
    let v21 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22 : string = "$0.map_err(|x| $1(x))"
    let v23 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v22 
    let _run_target_args'_v21 = v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : string = "$0.map_err(|x| $1(x))"
    let v25 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v24 
    let _run_target_args'_v21 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = "$0.map_err(|x| $1(x))"
    let v27 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v26 
    let _run_target_args'_v21 = v27 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v21 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v21 = v29 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v21 = v30 
    #endif
#else
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v21 = v31 
    #endif
    let v32 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v21 
    let v35 : (std_fs_FileType -> US45) = method248()
    let v36 : (std_string_String -> US45) = method249()
    let v37 : US45 = match v32 with Ok x -> v35 x | Error x -> v36 x
    let v218 : US46 =
        match v37 with
        | US45_0(v38) -> (* Ok *)
            let v39 : string = "std::fs::FileType::is_dir(&$0)"
            let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : bool = v40 = false
            if v41 then
                US46_0
            else
                let v43 : string = "async_walkdir::DirEntry::path(&$0)"
                let v44 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v43 
                (* run_target_args'
                let v45 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v46 : string = "$0.display()"
                let v47 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v44 v46 
                let _run_target_args'_v45 = v47 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v48 : string = "$0.display()"
                let v49 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v44 v48 
                let _run_target_args'_v45 = v49 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v50 : string = "$0.display()"
                let v51 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v44 v50 
                let _run_target_args'_v45 = v51 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v52 : std_path_Display = v44 |> unbox<std_path_Display>
                let _run_target_args'_v45 = v52 
                #endif
#if FABLE_COMPILER_PYTHON
                let v55 : std_path_Display = v44 |> unbox<std_path_Display>
                let _run_target_args'_v45 = v55 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v58 : std_path_Display = v44 |> unbox<std_path_Display>
                let _run_target_args'_v45 = v58 
                #endif
#else
                let v61 : std_path_Display = v44 |> unbox<std_path_Display>
                let _run_target_args'_v45 = v61 
                #endif
                let v64 : std_path_Display = _run_target_args'_v45 
                (* run_target_args'
                let v69 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v70 : string = "format!(\"{}\", $0)"
                let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v64 v70 
                let _run_target_args'_v69 = v71 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v72 : string = "format!(\"{}\", $0)"
                let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v64 v72 
                let _run_target_args'_v69 = v73 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v74 : string = "format!(\"{}\", $0)"
                let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v64 v74 
                let _run_target_args'_v69 = v75 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v76 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v69 = v76 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v69 = v79 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v82 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v69 = v82 
                #endif
#else
                let v85 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v69 = v85 
                #endif
                let v88 : std_string_String = _run_target_args'_v69 
                let v93 : string = "fable_library_rust::String_::fromString($0)"
                let v94 : string = Fable.Core.RustInterop.emitRustExpr v88 v93 
                let v95 : string = method250(v94)
                let v96 : bool = v95.StartsWith (v0, false, null)
                let v99 : bool = v96 = false
                if v99 then
                    US46_1
                else
                    let v101 : string option = method35(v94)
                    let v102 : (string -> US5) = method6()
                    let v103 : US5 option = v101 |> Option.map v102 
                    let v114 : US5 = US5_1
                    let v115 : US5 = v103 |> Option.defaultValue v114 
                    match v115 with
                    | US5_0(v119) -> (* Some *)
                        let v120 : bool = v119.Contains v0 
                        let v123 : bool = v120 = false
                        if v123 then
                            US46_2
                        else
                            US46_1
                    | _ ->
                        US46_1
        | _ ->
            let v131 : string = "async_walkdir::DirEntry::path(&$0)"
            let v132 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v131 
            (* run_target_args'
            let v133 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v134 : string = "$0.display()"
            let v135 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v132 v134 
            let _run_target_args'_v133 = v135 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v136 : string = "$0.display()"
            let v137 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v132 v136 
            let _run_target_args'_v133 = v137 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v138 : string = "$0.display()"
            let v139 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v132 v138 
            let _run_target_args'_v133 = v139 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v140 : std_path_Display = v132 |> unbox<std_path_Display>
            let _run_target_args'_v133 = v140 
            #endif
#if FABLE_COMPILER_PYTHON
            let v143 : std_path_Display = v132 |> unbox<std_path_Display>
            let _run_target_args'_v133 = v143 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v146 : std_path_Display = v132 |> unbox<std_path_Display>
            let _run_target_args'_v133 = v146 
            #endif
#else
            let v149 : std_path_Display = v132 |> unbox<std_path_Display>
            let _run_target_args'_v133 = v149 
            #endif
            let v152 : std_path_Display = _run_target_args'_v133 
            (* run_target_args'
            let v157 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v158 : string = "format!(\"{}\", $0)"
            let v159 : std_string_String = Fable.Core.RustInterop.emitRustExpr v152 v158 
            let _run_target_args'_v157 = v159 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v160 : string = "format!(\"{}\", $0)"
            let v161 : std_string_String = Fable.Core.RustInterop.emitRustExpr v152 v160 
            let _run_target_args'_v157 = v161 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v162 : string = "format!(\"{}\", $0)"
            let v163 : std_string_String = Fable.Core.RustInterop.emitRustExpr v152 v162 
            let _run_target_args'_v157 = v163 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v164 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v157 = v164 
            #endif
#if FABLE_COMPILER_PYTHON
            let v167 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v157 = v167 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v170 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v157 = v170 
            #endif
#else
            let v173 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v157 = v173 
            #endif
            let v176 : std_string_String = _run_target_args'_v157 
            let v181 : string = "fable_library_rust::String_::fromString($0)"
            let v182 : string = Fable.Core.RustInterop.emitRustExpr v176 v181 
            let v183 : string = method250(v182)
            let v184 : bool = v183.StartsWith (v0, false, null)
            let v187 : bool = v184 = false
            if v187 then
                US46_1
            else
                let v189 : string option = method35(v182)
                let v190 : (string -> US5) = method6()
                let v191 : US5 option = v189 |> Option.map v190 
                let v202 : US5 = US5_1
                let v203 : US5 = v191 |> Option.defaultValue v202 
                match v203 with
                | US5_0(v207) -> (* Some *)
                    let v208 : bool = v207.Contains v0 
                    let v211 : bool = v208 = false
                    if v211 then
                        US46_2
                    else
                        US46_1
                | _ ->
                    US46_1
    let v219 : string = ""
    let v220 : string = "}"
    let v221 : string = v219 + v220 
    let x = v218 //
    let v222 : _ = x
    let v223 : unit = ()
    (* run_target_args'
    let v224 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v225 : string = $"true; let _fix_closure_v223 = $0"
    let v226 : bool = Fable.Core.RustInterop.emitRustExpr v222 v225 
    let _run_target_args'_v224 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v227 : string = $"true; let _fix_closure_v223 = $0"
    let v228 : bool = Fable.Core.RustInterop.emitRustExpr v222 v227 
    let _run_target_args'_v224 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v229 : string = $"true; let _fix_closure_v223 = $0"
    let v230 : bool = Fable.Core.RustInterop.emitRustExpr v222 v229 
    let _run_target_args'_v224 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v224 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v224 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v224 = false 
    #endif
#else
    let _run_target_args'_v224 = false 
    #endif
    let v231 : bool = _run_target_args'_v224 
    let v233 : string = $"true; _fix_closure_v223 " + v221 + "); " + v219 + " // rust.fix_closure'"
    let v234 : bool = Fable.Core.RustInterop.emitRustExpr () v233 
    let v235 : string = "__future_init"
    let v236 : _ = Fable.Core.RustInterop.emitRustExpr () v235 
    let v237 : string = "v236"
    let v238 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US46>>, Send<Dyn<std_future_Future<US46>>>>>> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "v238.await"
    let v240 : US46 = Fable.Core.RustInterop.emitRustExpr () v239 
    let v249 : async_walkdir_Filtering =
        match v240 with
        | US46_2 -> (* Continue *)
            let v245 : string = "async_walkdir::Filtering::Continue"
            let v246 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v245 
            v246
        | US46_0 -> (* Ignore *)
            let v241 : string = "async_walkdir::Filtering::Ignore"
            let v242 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
        | US46_1 -> (* IgnoreDir *)
            let v243 : string = "async_walkdir::Filtering::IgnoreDir"
            let v244 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
    let v250 : string = v219 + v220 
    let x = v249 //
    let v251 : _ = x
    let v252 : unit = ()
    (* run_target_args'
    let v253 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v254 : string = $"true; let _fix_closure_v252 = $0"
    let v255 : bool = Fable.Core.RustInterop.emitRustExpr v251 v254 
    let _run_target_args'_v253 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v256 : string = $"true; let _fix_closure_v252 = $0"
    let v257 : bool = Fable.Core.RustInterop.emitRustExpr v251 v256 
    let _run_target_args'_v253 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v258 : string = $"true; let _fix_closure_v252 = $0"
    let v259 : bool = Fable.Core.RustInterop.emitRustExpr v251 v258 
    let _run_target_args'_v253 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v253 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v253 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v253 = false 
    #endif
#else
    let _run_target_args'_v253 = false 
    #endif
    let v260 : bool = _run_target_args'_v253 
    let v262 : string = $"true; _fix_closure_v252 " + v250 + "); " + v219 + " // rust.fix_closure'"
    let v263 : bool = Fable.Core.RustInterop.emitRustExpr () v262 
    let v264 : string = "__future_init"
    let v265 : _ = Fable.Core.RustInterop.emitRustExpr () v264 
    let v266 : string = "v265"
    let v267 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v266 
    v267
and closure107 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method252 () : (async_walkdir_Error -> std_string_String) =
    closure107()
and closure108 () (v0 : async_walkdir_DirEntry) : US47 =
    US47_0(v0)
and method253 () : (async_walkdir_DirEntry -> US47) =
    closure108()
and closure109 () (v0 : std_string_String) : US47 =
    US47_1(v0)
and method254 () : (std_string_String -> US47) =
    closure109()
and method255 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method121(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral.process_typescript / stream_filter_map"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure110 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method70()
        let v39 : string = method255(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure106 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method252()
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.map_err(|x| $1(x))"
    let v5 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v4 
    let _run_target_args'_v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v8 
    let _run_target_args'_v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v3 = v12 
    #endif
#else
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v3 = v13 
    #endif
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v3 
    let v17 : (async_walkdir_DirEntry -> US47) = method253()
    let v18 : (std_string_String -> US47) = method254()
    let v19 : US47 = match v14 with Ok x -> v17 x | Error x -> v18 x
    let v193 : US48 =
        match v19 with
        | US47_1(v148) -> (* Error *)
            let v149 : unit = ()
            let v150 : (unit -> unit) = closure110(v148)
            let v151 : unit = (fun () -> v150 (); v149) ()
            US48_1
        | US47_0(v20) -> (* Ok *)
            let v21 : string = "async_walkdir::DirEntry::path(&$0)"
            let v22 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v20 v21 
            (* run_target_args'
            let v23 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v24 : string = "$0.display()"
            let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v24 
            let _run_target_args'_v23 = v25 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v26 : string = "$0.display()"
            let v27 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v26 
            let _run_target_args'_v23 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : string = "$0.display()"
            let v29 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v28 
            let _run_target_args'_v23 = v29 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v30 : std_path_Display = v22 |> unbox<std_path_Display>
            let _run_target_args'_v23 = v30 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : std_path_Display = v22 |> unbox<std_path_Display>
            let _run_target_args'_v23 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v36 : std_path_Display = v22 |> unbox<std_path_Display>
            let _run_target_args'_v23 = v36 
            #endif
#else
            let v39 : std_path_Display = v22 |> unbox<std_path_Display>
            let _run_target_args'_v23 = v39 
            #endif
            let v42 : std_path_Display = _run_target_args'_v23 
            (* run_target_args'
            let v47 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v48 : string = "format!(\"{}\", $0)"
            let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v48 
            let _run_target_args'_v47 = v49 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v50 : string = "format!(\"{}\", $0)"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v50 
            let _run_target_args'_v47 = v51 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52 : string = "format!(\"{}\", $0)"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v52 
            let _run_target_args'_v47 = v53 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v54 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v47 = v54 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v47 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v60 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v47 = v60 
            #endif
#else
            let v63 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v47 = v63 
            #endif
            let v66 : std_string_String = _run_target_args'_v47 
            let v71 : string = "fable_library_rust::String_::fromString($0)"
            let v72 : string = Fable.Core.RustInterop.emitRustExpr v66 v71 
            let v73 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v74 : string = $"regex::Regex::new(&$0)"
            let v75 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v73 v74 
            (* run_target_args'
            let v76 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v77 
            let _run_target_args'_v76 = v78 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v79 : string = "$0.unwrap()"
            let v80 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v79 
            let _run_target_args'_v76 = v80 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v81 : string = "$0.unwrap()"
            let v82 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v81 
            let _run_target_args'_v76 = v82 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v83 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v76 = v83 
            #endif
#if FABLE_COMPILER_PYTHON
            let v84 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v76 = v84 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v85 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v76 = v85 
            #endif
#else
            let v86 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v76 = v86 
            #endif
            let v87 : regex_Regex = _run_target_args'_v76 
            let v90 : Vec<std_collections_HashMap<string, string>> = method226(v72, v87)
            let v91 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v92 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : std_collections_HashMap<string, string> option = v92 |> Array.tryItem 0 
            let v94 : (std_collections_HashMap<string, string> -> US42) = method227()
            let v95 : US42 option = v93 |> Option.map v94 
            let v106 : US42 = US42_1
            let v107 : US42 = v95 |> Option.defaultValue v106 
            let v135 : US43 =
                match v107 with
                | US42_1 -> (* None *)
                    US43_1
                | US42_0(v111) -> (* Some *)
                    let v112 : string = method228()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : (string -> US5) = method6()
                    let v116 : US5 option = v114 |> Option.map v115 
                    let v127 : US5 = US5_1
                    let v128 : US5 = v116 |> Option.defaultValue v127 
                    US43_0(v128)
            let v142 : US5 =
                match v135 with
                | US43_0(v136) -> (* Some *)
                    match v136 with
                    | US5_0(v137) -> (* Some *)
                        US5_0(v137)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v142 with
            | US5_1 -> (* None *)
                US48_1
            | US5_0(v143) -> (* Some *)
                US48_0(v72, v143)
    match v193 with
    | US48_1 -> (* None *)
        let v199 : struct (string * string) option = None
        v199
    | US48_0(v194, v195) -> (* Some *)
        let v196 : struct (string * string) option = Some struct (v194, v195) 
        v196
and method251 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure106(v0)
and closure111 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure112 () struct (v0 : string, v1 : string) : US48 =
    US48_0(v0, v1)
and method256 () : (struct (string * string) -> US48) =
    closure112()
and method258 (v0 : US48) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "version"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method257 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US48) : string =
    let v9 : string = method258(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure113 (v0 : US48) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method257(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method259 (v0 : string, v1 : string, v2 : US48) : unit =
    match v2 with
    | US48_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US48_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method30(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method30(v0, v8)
        method208(v7, v9)
and method260 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method218(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure114 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method260(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method262 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "new_code_path"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method261 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method262(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure115 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method261(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method263 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method263(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method264 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method264(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure116 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method63()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method266 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _run_target_args'_v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _run_target_args'_v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _run_target_args'_v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v33 = v55 
    #endif
    let v58 : string = _run_target_args'_v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "run_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method265 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method266(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_typescript / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure118 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method265(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure117 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure118(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method267 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method169(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_typescript / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure119 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method267(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method268 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method218(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.process_python"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure120 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method70()
        let v40 : string = method268(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method269 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method262(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral.process_python"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure121 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method269(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure122 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method63()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method270 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method266(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_python / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure124 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method270(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure123 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure124(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method271 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method169(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral.process_python / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure125 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method70()
        let v42 : string = method271(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method273 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "subcommand"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    (* run_target_args'
    let v31 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "format!(\"{:#?}\", $0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let _run_target_args'_v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "format!(\"{:#?}\", $0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _run_target_args'_v31 = v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : string = "format!(\"{:#?}\", $0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v40 
    let v42 : string = "fable_library_rust::String_::fromString($0)"
    let v43 : string = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let _run_target_args'_v31 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = $"%A{v0}"
    let _run_target_args'_v31 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : string = $"%A{v0}"
    let _run_target_args'_v31 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : string = $"%A{v0}"
    let _run_target_args'_v31 = v50 
    #endif
#else
    let v53 : string = $"%A{v0}"
    let _run_target_args'_v31 = v53 
    #endif
    let v56 : string = _run_target_args'_v31 
    let v61 : string = $"{v56}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v3, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = "; "
    let v70 : string = $"{v69}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = "arg_matches"
    let v79 : string = $"{v78}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v3, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v87 : string = $"{v22}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v3, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    (* run_target_args'
    let v95 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "format!(\"{:#?}\", $0)"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v96 
    let v98 : string = "fable_library_rust::String_::fromString($0)"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let _run_target_args'_v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v100 : string = "format!(\"{:#?}\", $0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _run_target_args'_v95 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "format!(\"{:#?}\", $0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v104 
    let v106 : string = "fable_library_rust::String_::fromString($0)"
    let v107 : string = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let _run_target_args'_v95 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : string = $"%A{v1}"
    let _run_target_args'_v95 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : string = $"%A{v1}"
    let _run_target_args'_v95 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : string = $"%A{v1}"
    let _run_target_args'_v95 = v114 
    #endif
#else
    let v117 : string = $"%A{v1}"
    let _run_target_args'_v95 = v117 
    #endif
    let v120 : string = _run_target_args'_v95 
    let v125 : string = $"{v120}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = " }"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v3, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v142 : string = v3.l0
    v142
and method272 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method273(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral.run / invalid subcommand"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure126 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method272(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure127 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v20 v25 
    v26
and method274 () : (serde_json_Error -> string) =
    closure127()
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v11 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v12 : US6 option = v10 |> Option.map v11 
    let v24 : US6 = US6_1
    let v25 : US6 = v12 |> Option.defaultValue v24 
    let v4601 : (struct (string * string) []) =
        match v25 with
        | US6_0(v29, v30) -> (* Some *)
            let v31 : string = "fable_library_rust::String_::fromString($0)"
            let v32 : string = Fable.Core.RustInterop.emitRustExpr v29 v31 
            let v33 : bool = v32 = "cuda"
            if v33 then
                let v34 : string = method22()
                (* run_target_args'
                let v35 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v36 : string = "&*$0"
                let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v36 
                let _run_target_args'_v35 = v37 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v38 : string = "&*$0"
                let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v38 
                let _run_target_args'_v35 = v39 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v40 : string = "&*$0"
                let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v40 
                let _run_target_args'_v35 = v41 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v42 : Ref<Str> = v34 |> unbox<Ref<Str>>
                let _run_target_args'_v35 = v42 
                #endif
#if FABLE_COMPILER_PYTHON
                let v45 : Ref<Str> = v34 |> unbox<Ref<Str>>
                let _run_target_args'_v35 = v45 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v48 : Ref<Str> = v34 |> unbox<Ref<Str>>
                let _run_target_args'_v35 = v48 
                #endif
#else
                let v51 : Ref<Str> = v34 |> unbox<Ref<Str>>
                let _run_target_args'_v35 = v51 
                #endif
                let v54 : Ref<Str> = _run_target_args'_v35 
                let v59 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v60 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v54) v59 
                let v61 : (std_string_String -> US7) = method23()
                let v62 : US7 option = v60 |> Option.map v61 
                let v73 : US7 = US7_1
                let v74 : US7 = v62 |> Option.defaultValue v73 
                let v81 : std_string_String =
                    match v74 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v78) -> (* Some *)
                        v78
                let v82 : string = "fable_library_rust::String_::fromString($0)"
                let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
                let v84 : string = method24()
                (* run_target_args'
                let v85 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v86 : string = "&*$0"
                let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v84 v86 
                let _run_target_args'_v85 = v87 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v88 : string = "&*$0"
                let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v84 v88 
                let _run_target_args'_v85 = v89 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v90 : string = "&*$0"
                let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v84 v90 
                let _run_target_args'_v85 = v91 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v92 : Ref<Str> = v84 |> unbox<Ref<Str>>
                let _run_target_args'_v85 = v92 
                #endif
#if FABLE_COMPILER_PYTHON
                let v95 : Ref<Str> = v84 |> unbox<Ref<Str>>
                let _run_target_args'_v85 = v95 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v98 : Ref<Str> = v84 |> unbox<Ref<Str>>
                let _run_target_args'_v85 = v98 
                #endif
#else
                let v101 : Ref<Str> = v84 |> unbox<Ref<Str>>
                let _run_target_args'_v85 = v101 
                #endif
                let v104 : Ref<Str> = _run_target_args'_v85 
                let v109 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v110 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v104) v109 
                let v111 : (std_string_String -> US7) = method23()
                let v112 : US7 option = v110 |> Option.map v111 
                let v123 : US7 = US7_1
                let v124 : US7 = v112 |> Option.defaultValue v123 
                let v153 : US8 =
                    match v124 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v128) -> (* Some *)
                        let v129 : string = "fable_library_rust::String_::fromString($0)"
                        let v130 : string = Fable.Core.RustInterop.emitRustExpr v128 v129 
                        
                        
                        let v131 : bool = "Pip" = v130
                        let v135 : US9 =
                            if v131 then
                                let v132 : US10 = US10_0
                                US9_0(v132)
                            else
                                US9_1
                        let v149 : US9 =
                            match v135 with
                            | US9_1 -> (* None *)
                                let v138 : bool = "Poetry" = v130
                                let v142 : US9 =
                                    if v138 then
                                        let v139 : US10 = US10_1
                                        US9_0(v139)
                                    else
                                        US9_1
                                match v142 with
                                | US9_1 -> (* None *)
                                    US9_1
                                | US9_0(v143) -> (* Some *)
                                    US9_0(v143)
                            | US9_0(v136) -> (* Some *)
                                US9_0(v136)
                        US8_0(v149)
                let v160 : US9 =
                    match v153 with
                    | US8_0(v154) -> (* Some *)
                        match v154 with
                        | US9_0(v155) -> (* Some *)
                            US9_0(v155)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v164 : US10 =
                    match v160 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v161) -> (* Some *)
                        v161
                let v165 : string = method25()
                (* run_target_args'
                let v166 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v167 : string = "&*$0"
                let v168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v165 v167 
                let _run_target_args'_v166 = v168 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v169 : string = "&*$0"
                let v170 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v165 v169 
                let _run_target_args'_v166 = v170 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v171 : string = "&*$0"
                let v172 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v165 v171 
                let _run_target_args'_v166 = v172 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v173 : Ref<Str> = v165 |> unbox<Ref<Str>>
                let _run_target_args'_v166 = v173 
                #endif
#if FABLE_COMPILER_PYTHON
                let v176 : Ref<Str> = v165 |> unbox<Ref<Str>>
                let _run_target_args'_v166 = v176 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v179 : Ref<Str> = v165 |> unbox<Ref<Str>>
                let _run_target_args'_v166 = v179 
                #endif
#else
                let v182 : Ref<Str> = v165 |> unbox<Ref<Str>>
                let _run_target_args'_v166 = v182 
                #endif
                let v185 : Ref<Str> = _run_target_args'_v166 
                let v190 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v191 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v30, v185) v190 
                let v192 : (Vec<std_string_String> -> US11) = method26()
                let v193 : US11 option = v191 |> Option.map v192 
                let v204 : US11 = US11_1
                let v205 : US11 = v193 |> Option.defaultValue v204 
                let v209 : (std_string_String []) = [||]
                let v210 : string = "$0.to_vec()"
                let v211 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v209 v210 
                let v214 : Vec<std_string_String> =
                    match v205 with
                    | US11_1 -> (* None *)
                        v211
                    | US11_0(v212) -> (* Some *)
                        v212
                (* run_target_args'
                let v215 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v216 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v217 : string = "std::fs::read(&*$0)"
                let v218 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v83 v217 
                (* run_target_args'
                let v219 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v220 : string = "$0.unwrap()"
                let v221 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v218 v220 
                let _run_target_args'_v219 = v221 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v222 : string = "$0.unwrap()"
                let v223 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v218 v222 
                let _run_target_args'_v219 = v223 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v224 : string = "$0.unwrap()"
                let v225 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v218 v224 
                let _run_target_args'_v219 = v225 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v226 : Vec<uint8> = match v218 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v219 = v226 
                #endif
#if FABLE_COMPILER_PYTHON
                let v227 : Vec<uint8> = match v218 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v219 = v227 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v228 : Vec<uint8> = match v218 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v219 = v228 
                #endif
#else
                let v229 : Vec<uint8> = match v218 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v219 = v229 
                #endif
                let v230 : Vec<uint8> = _run_target_args'_v219 
                let _run_target_args'_v216 = v230 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v233 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v216 = v233 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v236 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v216 = v236 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v239 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v216 = v239 
                #endif
#if FABLE_COMPILER_PYTHON
                let v242 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v216 = v242 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v245 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v216 = v245 
                #endif
#else
                let v248 : (uint8 []) = v83 |> System.IO.File.ReadAllBytes
                let v249 : string = "$0.to_vec()"
                let v250 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v248 v249 
                let _run_target_args'_v216 = v250 
                #endif
                let v251 : Vec<uint8> = _run_target_args'_v216 
                let v256 : Vec<uint8> = method27(v251)
                let v257 : string = "std::string::String::from_utf8($0)"
                let v258 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v256 v257 
                (* run_target_args'
                let v259 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v260 : string = "$0.unwrap()"
                let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v260 
                let _run_target_args'_v259 = v261 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v262 : string = "$0.unwrap()"
                let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v262 
                let _run_target_args'_v259 = v263 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v264 : string = "$0.unwrap()"
                let v265 : std_string_String = Fable.Core.RustInterop.emitRustExpr v258 v264 
                let _run_target_args'_v259 = v265 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v266 : std_string_String = match v258 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v259 = v266 
                #endif
#if FABLE_COMPILER_PYTHON
                let v267 : std_string_String = match v258 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v259 = v267 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v268 : std_string_String = match v258 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v259 = v268 
                #endif
#else
                let v269 : std_string_String = match v258 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v259 = v269 
                #endif
                let v270 : std_string_String = _run_target_args'_v259 
                let v273 : string = "fable_library_rust::String_::fromString($0)"
                let v274 : string = Fable.Core.RustInterop.emitRustExpr v270 v273 
                let _run_target_args'_v215 = v274 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v275 : string = null |> unbox<string>
                let _run_target_args'_v215 = v275 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v278 : string = null |> unbox<string>
                let _run_target_args'_v215 = v278 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v281 : string = null |> unbox<string>
                let _run_target_args'_v215 = v281 
                #endif
#if FABLE_COMPILER_PYTHON
                let v284 : string = null |> unbox<string>
                let _run_target_args'_v215 = v284 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v287 : string = null |> unbox<string>
                let _run_target_args'_v215 = v287 
                #endif
#else
                let v290 : string = v83 |> System.IO.File.ReadAllText
                let _run_target_args'_v215 = v290 
                #endif
                let v291 : string = _run_target_args'_v215 
                let v296 : string = method28()
                let v297 : US5 = method29(v296)
                let v303 : US5 =
                    match v297 with
                    | US5_1 -> (* None *)
                        let v300 : string = __SOURCE_DIRECTORY__
                        method29(v300)
                    | US5_0(v298) -> (* Some *)
                        US5_0(v298)
                let v309 : US5 =
                    match v303 with
                    | US5_1 -> (* None *)
                        let v306 : string = "/workspaces"
                        method29(v306)
                    | US5_0(v304) -> (* Some *)
                        US5_0(v304)
                let v313 : string =
                    match v309 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v310) -> (* Some *)
                        v310
                let v314 : string = method49(v313)
                let v315 : bool = "deps" = v314
                let v325 : string =
                    if v315 then
                        let v316 : string option = method35(v313)
                        let v317 : string = v316 |> Option.get
                        let v320 : US5 = method29(v317)
                        match v320 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v321) -> (* Some *)
                            v321
                    else
                        v313
                let v326 : string = "polyglot"
                let v327 : string = method30(v325, v326)
                let v328 : string = method28()
                let v329 : (unit -> string) = v328.ToLower
                let v330 : string = v329 ()
                let v333 : (unit -> string) = v327.ToLower
                let v334 : string = v333 ()
                let v337 : bool = v330.StartsWith (v334, false, null)
                let v342 : US13 =
                    if v337 then
                        US13_1(v334)
                    else
                        US13_0(v334)
                let v348 : Result<string, string> =
                    match v342 with
                    | US13_1(v345) -> (* Error *)
                        let v346 : Result<string, string> = Error v345 
                        v346
                    | US13_0(v343) -> (* Ok *)
                        let v344 : Result<string, string> = Ok v343 
                        v344
                let v349 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v350 : bool = Fable.Core.RustInterop.emitRustExpr v348 v349 
                let v351 : string = "x"
                let v352 : string = Fable.Core.RustInterop.emitRustExpr () v351 
                let v353 : string = "true; $0 })"
                let v354 : bool = Fable.Core.RustInterop.emitRustExpr v352 v353 
                let v355 : string = "_result_unwrap_or_else"
                let v356 : string = Fable.Core.RustInterop.emitRustExpr () v355 
                let v357 : string option = method35(v83)
                let v358 : string = ""
                let v359 : string = v357 |> Option.defaultValue v358 
                let v367 : string =
                    match v164 with
                    | US10_0 -> (* Pip *)
                        let v362 : string = "requirements.txt"
                        method30(v359, v362)
                    | US10_1 -> (* Poetry *)
                        let v364 : string = "pyproject.toml"
                        method30(v359, v364)
                let v368 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v369 : bool = Fable.Core.RustInterop.emitRustExpr v214 v368 
                let v370 : string = "x"
                let v371 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v370 
                let v372 : string = "fable_library_rust::String_::fromString($0)"
                let v373 : string = Fable.Core.RustInterop.emitRustExpr v371 v372 
                let v374 : string = "="
                let v375 : bool = v373.Contains v374 
                let v388 : string =
                    if v375 then
                        v373
                    else
                        let v378 : string = "]"
                        let v379 : bool = v373.EndsWith (v378, false, null)
                        if v379 then
                            let v382 : string = $"={{version='*',features=["
                            let v383 : string = "["
                            let v384 : string = v373.Replace (v383, v382)
                            let v385 : string = $"{v384}}}"
                            v385
                        else
                            let v386 : string = $"{v373}='*'"
                            v386
                let v389 : string = "true; $0 }).collect::<Vec<_>>()"
                let v390 : bool = Fable.Core.RustInterop.emitRustExpr v388 v389 
                let v391 : string = "_vec_map"
                let v392 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v391 
                let v393 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v394 : (string []) = Fable.Core.RustInterop.emitRustExpr v392 v393 
                let v395 : unit = ()
                let _let'_v395 =
                    seq {
                        for i = 0 to v394.Length - 1 do yield v394.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v398 : string seq = _let'_v395 
                let v404 : string = method63()
                let v405 : (string -> (string seq -> string)) = String.concat
                let v406 : (string seq -> string) = v405 v404
                let v407 : string = v406 v398
                let v411 : bool = v407 = ""
                let struct (v467 : int32, v468 : string) =
                    if v411 then
                        struct (0, v358)
                    else
                        let v451 : string =
                            match v164 with
                            | US10_0 -> (* Pip *)
                                v407
                            | US10_1 -> (* Poetry *)
                                let v412 : string = $"[tool.poetry]"
                                let v413 : string = $"name = \"test\""
                                let v414 : string = "\n"
                                let v415 : string = v412 + v414 
                                let v416 : string = v415 + v413 
                                let v417 : string = $"version = \"0.0.1\""
                                let v418 : string = v416 + v414 
                                let v419 : string = v418 + v417 
                                let v420 : string = $"description = \"\""
                                let v421 : string = v419 + v414 
                                let v422 : string = v421 + v420 
                                let v423 : string = $"authors = []"
                                let v424 : string = v422 + v414 
                                let v425 : string = v424 + v423 
                                let v426 : string = $""
                                let v427 : string = v425 + v414 
                                let v428 : string = v427 + v426 
                                let v429 : string = $"[tool.poetry.dependencies]"
                                let v430 : string = v428 + v414 
                                let v431 : string = v430 + v429 
                                let v432 : string = $"python=\"~3.12\""
                                let v433 : string = v431 + v414 
                                let v434 : string = v433 + v432 
                                let v435 : string = $"{v407}"
                                let v436 : string = v434 + v414 
                                let v437 : string = v436 + v435 
                                let v438 : string = $""
                                let v439 : string = v437 + v414 
                                let v440 : string = v439 + v438 
                                let v441 : string = $"[build-system]"
                                let v442 : string = v440 + v414 
                                let v443 : string = v442 + v441 
                                let v444 : string = $"requires = [\"poetry-core\"]"
                                let v445 : string = v443 + v414 
                                let v446 : string = v445 + v444 
                                let v447 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v448 : string = v446 + v414 
                                let v449 : string = v448 + v447 
                                v449
                        method64(v367, v451)
                        let v452 : System.Threading.CancellationToken option = None
                        let v453 : (struct (string * string) []) = [||]
                        let v454 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v455 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v456 : string option = None
                        let v460 : string =
                            match v164 with
                            | US10_0 -> (* Pip *)
                                let v457 : string = $"pip install -r requirements.txt"
                                v457
                            | US10_1 -> (* Poetry *)
                                let v458 : string = $"poetry install"
                                v458
                        let v461 : string option = Some v359 
                        let v464 : bool = true
                        method89(v460, v452, v453, v454, v455, v464, v461)
                let v469 : bool = v467 <> 0 
                let struct (v635 : US5, v636 : US5, v637 : US5, v638 : US5) =
                    if v469 then
                        let v472 : unit = ()
                        let v473 : (unit -> unit) = closure70(v164, v83, v468, v467)
                        let v474 : unit = (fun () -> v473 (); v472) ()
                        let v514 : string = "py"
                        let v515 : US5 = US5_0(v514)
                        let v516 : US5 = US5_1
                        let v517 : US5 = US5_1
                        let v518 : US5 = US5_1
                        struct (v515, v516, v517, v518)
                    else
                        let v522 : string =
                            match v164 with
                            | US10_0 -> (* Pip *)
                                let v519 : string = $"python \"{v83}\""
                                v519
                            | US10_1 -> (* Poetry *)
                                let v520 : string = $"poetry run python \"{v83}\""
                                v520
                        let v523 : string = "TRACE_LEVEL"
                        let v524 : string = "Verbose"
                        let v525 : (struct (string * string) []) = [|struct (v523, v524)|]
                        let v526 : System.Threading.CancellationToken option = None
                        let v527 : (struct (string * string) []) = [||]
                        let v528 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v529 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v530 : string option = None
                        let v531 : string option = Some v359 
                        let v534 : bool = true
                        let struct (v535 : int32, v536 : string) = method89(v522, v526, v525, v528, v529, v534, v531)
                        let v537 : int32 = v525.Length
                        let v538 : (string []) = Array.zeroCreate<string> (v537)
                        let v539 : Mut5 = {l0 = 0} : Mut5
                        while method93(v537, v539) do
                            let v541 : int32 = v539.l0
                            let struct (v542 : string, v543 : string) = v525.[int v541]
                            let v544 : string = $"$env:{v542}=''{v543}''"
                            v538.[int v541] <- v544
                            let v545 : int32 = v541 + 1
                            v539.l0 <- v545
                            ()
                        let v546 : string seq = v538 |> Seq.ofArray
                        let v549 : (string -> (string seq -> string)) = String.concat
                        let v550 : string = ";"
                        let v551 : (string seq -> string) = v549 v550
                        let v552 : string = v551 v546
                        let v555 : string = $"pwsh -c '{v552}; {v522}'"
                        let v556 : bool = v535 = 0
                        let v561 : bool =
                            if v556 then
                                true
                            else
                                let v557 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v558 : bool = v536.Contains v557 
                                v558
                        let struct (v631 : US5, v632 : US5, v633 : US5, v634 : US5) =
                            if v561 then
                                let v562 : (string -> US5) = closure71()
                                let v563 : (unit -> string) = closure72(v536)
                                let v564 : (exn -> US5) = closure73(v83, v536, v555)
                                let v565 : US5 = US5_1
                                let result = ref v565
                                try
                                    result.Value <- v563 () |> v562 
                                with ex ->
                                    result.Value <- v564 ex 
                                let v566 : US5 = result.Value
                                let v576 : string option =
                                    match v566 with
                                    | US5_1 -> (* None *)
                                        let v574 : string option = None
                                        v574
                                    | US5_0(v570) -> (* Some *)
                                        let v571 : string option = Some v570 
                                        v571
                                let v577 : string = "$0.unwrap()"
                                let v578 : string = Fable.Core.RustInterop.emitRustExpr v576 v577 
                                let v579 : string = "py"
                                let v580 : US5 = US5_0(v579)
                                let v581 : US5 = US5_0(v291)
                                let v582 : US5 = US5_0(v83)
                                let v583 : US5 = US5_0(v578)
                                struct (v580, v581, v582, v583)
                            else
                                let v584 : unit = ()
                                let v585 : (unit -> unit) = closure75(v83, v536, v535, v555)
                                let v586 : unit = (fun () -> v585 (); v584) ()
                                let v626 : string = "py"
                                let v627 : US5 = US5_0(v626)
                                let v628 : US5 = US5_1
                                let v629 : US5 = US5_1
                                let v630 : US5 = US5_1
                                struct (v627, v628, v629, v630)
                        struct (v631, v632, v633, v634)
                let v641 : string =
                    match v635 with
                    | US5_1 -> (* None *)
                        v358
                    | US5_0(v639) -> (* Some *)
                        v639
                let v642 : string = "extension"
                let v645 : string =
                    match v636 with
                    | US5_1 -> (* None *)
                        v358
                    | US5_0(v643) -> (* Some *)
                        v643
                let v646 : string = "code"
                let v649 : string =
                    match v638 with
                    | US5_1 -> (* None *)
                        v358
                    | US5_0(v647) -> (* Some *)
                        v647
                let v650 : string = "output"
                let v651 : (struct (string * string) []) = [|struct (v642, v641); struct (v646, v645); struct (v650, v649)|]
                let v652 : string = "$0.to_vec()"
                let v653 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v651 v652 
                let v654 : unit = ()
                let v655 : string = $"true; let _func1_from_v654 = Func1::from(move |value| {{ //"
                let v656 : bool = Fable.Core.RustInterop.emitRustExpr () v655 
                let v657 : string = $"value"
                let struct (v658 : string, v659 : string) = Fable.Core.RustInterop.emitRustExpr () v657 
                (* run_target_args'
                let v660 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v661 : string = "&*$0"
                let v662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v661 
                let _run_target_args'_v660 = v662 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v663 : string = "&*$0"
                let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v663 
                let _run_target_args'_v660 = v664 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v665 : string = "&*$0"
                let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v665 
                let _run_target_args'_v660 = v666 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v667 : Ref<Str> = v658 |> unbox<Ref<Str>>
                let _run_target_args'_v660 = v667 
                #endif
#if FABLE_COMPILER_PYTHON
                let v670 : Ref<Str> = v658 |> unbox<Ref<Str>>
                let _run_target_args'_v660 = v670 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v673 : Ref<Str> = v658 |> unbox<Ref<Str>>
                let _run_target_args'_v660 = v673 
                #endif
#else
                let v676 : Ref<Str> = v658 |> unbox<Ref<Str>>
                let _run_target_args'_v660 = v676 
                #endif
                let v679 : Ref<Str> = _run_target_args'_v660 
                (* run_target_args'
                let v684 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v685 : string = "String::from($0)"
                let v686 : std_string_String = Fable.Core.RustInterop.emitRustExpr v679 v685 
                let _run_target_args'_v684 = v686 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v687 : string = "String::from($0)"
                let v688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v679 v687 
                let _run_target_args'_v684 = v688 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v689 : string = "String::from($0)"
                let v690 : std_string_String = Fable.Core.RustInterop.emitRustExpr v679 v689 
                let _run_target_args'_v684 = v690 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v691 : std_string_String = v679 |> unbox<std_string_String>
                let _run_target_args'_v684 = v691 
                #endif
#if FABLE_COMPILER_PYTHON
                let v694 : std_string_String = v679 |> unbox<std_string_String>
                let _run_target_args'_v684 = v694 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v697 : std_string_String = v679 |> unbox<std_string_String>
                let _run_target_args'_v684 = v697 
                #endif
#else
                let v700 : std_string_String = v679 |> unbox<std_string_String>
                let _run_target_args'_v684 = v700 
                #endif
                let v703 : std_string_String = _run_target_args'_v684 
                (* run_target_args'
                let v708 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v709 : string = "&*$0"
                let v710 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v709 
                let _run_target_args'_v708 = v710 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v711 : string = "&*$0"
                let v712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v711 
                let _run_target_args'_v708 = v712 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v713 : string = "&*$0"
                let v714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v713 
                let _run_target_args'_v708 = v714 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v715 : Ref<Str> = v659 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v715 
                #endif
#if FABLE_COMPILER_PYTHON
                let v718 : Ref<Str> = v659 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v718 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v721 : Ref<Str> = v659 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v721 
                #endif
#else
                let v724 : Ref<Str> = v659 |> unbox<Ref<Str>>
                let _run_target_args'_v708 = v724 
                #endif
                let v727 : Ref<Str> = _run_target_args'_v708 
                (* run_target_args'
                let v732 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v733 : string = "String::from($0)"
                let v734 : std_string_String = Fable.Core.RustInterop.emitRustExpr v727 v733 
                let _run_target_args'_v732 = v734 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v735 : string = "String::from($0)"
                let v736 : std_string_String = Fable.Core.RustInterop.emitRustExpr v727 v735 
                let _run_target_args'_v732 = v736 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v737 : string = "String::from($0)"
                let v738 : std_string_String = Fable.Core.RustInterop.emitRustExpr v727 v737 
                let _run_target_args'_v732 = v738 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v739 : std_string_String = v727 |> unbox<std_string_String>
                let _run_target_args'_v732 = v739 
                #endif
#if FABLE_COMPILER_PYTHON
                let v742 : std_string_String = v727 |> unbox<std_string_String>
                let _run_target_args'_v732 = v742 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v745 : std_string_String = v727 |> unbox<std_string_String>
                let _run_target_args'_v732 = v745 
                #endif
#else
                let v748 : std_string_String = v727 |> unbox<std_string_String>
                let _run_target_args'_v732 = v748 
                #endif
                let v751 : std_string_String = _run_target_args'_v732 
                let v756 : (std_string_String * std_string_String) = v703, v751 
                let func1_from_result = v756 //
                let v757 : _ = func1_from_result
                let v758 : string = $"true; $0 /*"
                let v759 : bool = Fable.Core.RustInterop.emitRustExpr v757 v758 
                let v760 : string = $"*/ }}); //"
                let v761 : bool = Fable.Core.RustInterop.emitRustExpr () v760 
                let v762 : string = $"_func1_from_v654"
                let v763 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v762 
                let v764 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v765 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v763)
                let v766 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v653, v765) v764 
                let v767 : string = "std::collections::BTreeMap::from_iter(v766.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v768 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v767 
                let v769 : string = "serde_json::to_string(&v768)"
                let v770 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v769 
                (* run_target_args'
                let v771 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v772 : string = "$0.unwrap()"
                let v773 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v772 
                let _run_target_args'_v771 = v773 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v774 : string = "$0.unwrap()"
                let v775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v774 
                let _run_target_args'_v771 = v775 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v776 : string = "$0.unwrap()"
                let v777 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v776 
                let _run_target_args'_v771 = v777 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v778 : std_string_String = match v770 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v771 = v778 
                #endif
#if FABLE_COMPILER_PYTHON
                let v779 : std_string_String = match v770 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v771 = v779 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v780 : std_string_String = match v770 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v771 = v780 
                #endif
#else
                let v781 : std_string_String = match v770 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v771 = v781 
                #endif
                let v782 : std_string_String = _run_target_args'_v771 
                let v785 : string = "fable_library_rust::String_::fromString($0)"
                let v786 : string = Fable.Core.RustInterop.emitRustExpr v782 v785 
                let v787 : string = "command_result"
                [|struct (v787, v786)|]
            else
                let v789 : string = "fable_library_rust::String_::fromString($0)"
                let v790 : string = Fable.Core.RustInterop.emitRustExpr v29 v789 
                let v791 : bool = v790 = "fable"
                if v791 then
                    let v792 : string = method171()
                    (* run_target_args'
                    let v793 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v794 : string = "&*$0"
                    let v795 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v794 
                    let _run_target_args'_v793 = v795 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v796 : string = "&*$0"
                    let v797 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v796 
                    let _run_target_args'_v793 = v797 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v798 : string = "&*$0"
                    let v799 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v792 v798 
                    let _run_target_args'_v793 = v799 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v800 : Ref<Str> = v792 |> unbox<Ref<Str>>
                    let _run_target_args'_v793 = v800 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v803 : Ref<Str> = v792 |> unbox<Ref<Str>>
                    let _run_target_args'_v793 = v803 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v806 : Ref<Str> = v792 |> unbox<Ref<Str>>
                    let _run_target_args'_v793 = v806 
                    #endif
#else
                    let v809 : Ref<Str> = v792 |> unbox<Ref<Str>>
                    let _run_target_args'_v793 = v809 
                    #endif
                    let v812 : Ref<Str> = _run_target_args'_v793 
                    let v817 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v818 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v812) v817 
                    let v819 : (std_string_String -> US7) = method23()
                    let v820 : US7 option = v818 |> Option.map v819 
                    let v831 : US7 = US7_1
                    let v832 : US7 = v820 |> Option.defaultValue v831 
                    let v839 : std_string_String =
                        match v832 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v836) -> (* Some *)
                            v836
                    let v840 : string = "fable_library_rust::String_::fromString($0)"
                    let v841 : string = Fable.Core.RustInterop.emitRustExpr v839 v840 
                    let v842 : string = method172()
                    (* run_target_args'
                    let v843 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v844 : string = "&*$0"
                    let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v844 
                    let _run_target_args'_v843 = v845 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v846 : string = "&*$0"
                    let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v846 
                    let _run_target_args'_v843 = v847 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v848 : string = "&*$0"
                    let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v848 
                    let _run_target_args'_v843 = v849 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v850 : Ref<Str> = v842 |> unbox<Ref<Str>>
                    let _run_target_args'_v843 = v850 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v853 : Ref<Str> = v842 |> unbox<Ref<Str>>
                    let _run_target_args'_v843 = v853 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v856 : Ref<Str> = v842 |> unbox<Ref<Str>>
                    let _run_target_args'_v843 = v856 
                    #endif
#else
                    let v859 : Ref<Str> = v842 |> unbox<Ref<Str>>
                    let _run_target_args'_v843 = v859 
                    #endif
                    let v862 : Ref<Str> = _run_target_args'_v843 
                    let v867 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v868 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v862) v867 
                    let v869 : (std_string_String -> US7) = method23()
                    let v870 : US7 option = v868 |> Option.map v869 
                    let v881 : US7 = US7_1
                    let v882 : US7 = v870 |> Option.defaultValue v881 
                    let v892 : US5 =
                        match v882 with
                        | US7_1 -> (* None *)
                            US5_1
                        | US7_0(v886) -> (* Some *)
                            let v887 : string = "fable_library_rust::String_::fromString($0)"
                            let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
                            US5_0(v888)
                    let v984 : string =
                        match v892 with
                        | US5_1 -> (* None *)
                            let v982 : string = "{}"
                            v982
                        | US5_0(v893) -> (* Some *)
                            let v894 : clap_Command = method0()
                            let v895 : string = $"_ {v893} --fs-path \"{v841}\""
                            let v896 : US25 = method105(v895)
                            let v904 : (string []) =
                                match v896 with
                                | US25_1(v898) -> (* Error *)
                                    let v899 : string = $"resultm.get / Result value was Error: {v898}"
                                    failwith<(string [])> v899
                                | US25_0(v897) -> (* Ok *)
                                    v897
                            let v905 : string = "$0.to_vec()"
                            let v906 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v904 v905 
                            let v907 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                            let v908 : bool = Fable.Core.RustInterop.emitRustExpr v906 v907 
                            let v909 : string = "x"
                            let v910 : string = Fable.Core.RustInterop.emitRustExpr () v909 
                            (* run_target_args'
                            let v911 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v912 : string = "&*$0"
                            let v913 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v910 v912 
                            let _run_target_args'_v911 = v913 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v914 : string = "&*$0"
                            let v915 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v910 v914 
                            let _run_target_args'_v911 = v915 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v916 : string = "&*$0"
                            let v917 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v910 v916 
                            let _run_target_args'_v911 = v917 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v918 : Ref<Str> = v910 |> unbox<Ref<Str>>
                            let _run_target_args'_v911 = v918 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v921 : Ref<Str> = v910 |> unbox<Ref<Str>>
                            let _run_target_args'_v911 = v921 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v924 : Ref<Str> = v910 |> unbox<Ref<Str>>
                            let _run_target_args'_v911 = v924 
                            #endif
#else
                            let v927 : Ref<Str> = v910 |> unbox<Ref<Str>>
                            let _run_target_args'_v911 = v927 
                            #endif
                            let v930 : Ref<Str> = _run_target_args'_v911 
                            (* run_target_args'
                            let v935 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v936 : string = "String::from($0)"
                            let v937 : std_string_String = Fable.Core.RustInterop.emitRustExpr v930 v936 
                            let _run_target_args'_v935 = v937 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v938 : string = "String::from($0)"
                            let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v930 v938 
                            let _run_target_args'_v935 = v939 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v940 : string = "String::from($0)"
                            let v941 : std_string_String = Fable.Core.RustInterop.emitRustExpr v930 v940 
                            let _run_target_args'_v935 = v941 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v942 : std_string_String = v930 |> unbox<std_string_String>
                            let _run_target_args'_v935 = v942 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v945 : std_string_String = v930 |> unbox<std_string_String>
                            let _run_target_args'_v935 = v945 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v948 : std_string_String = v930 |> unbox<std_string_String>
                            let _run_target_args'_v935 = v948 
                            #endif
#else
                            let v951 : std_string_String = v930 |> unbox<std_string_String>
                            let _run_target_args'_v935 = v951 
                            #endif
                            let v954 : std_string_String = _run_target_args'_v935 
                            let v959 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v960 : bool = Fable.Core.RustInterop.emitRustExpr v954 v959 
                            let v961 : string = "_vec_map"
                            let v962 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v961 
                            let v963 : string = "clap::Command::get_matches_from($0, v962)"
                            let v964 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v894 v963 
                            let v965 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v964)
                            let v966 : string = "v965.await"
                            let v967 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v966 
                            (* run_target_args'
                            let v968 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v969 : string = "$0.unwrap()"
                            let v970 : string = Fable.Core.RustInterop.emitRustExpr v967 v969 
                            let _run_target_args'_v968 = v970 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v971 : string = "$0.unwrap()"
                            let v972 : string = Fable.Core.RustInterop.emitRustExpr v967 v971 
                            let _run_target_args'_v968 = v972 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v973 : string = "$0.unwrap()"
                            let v974 : string = Fable.Core.RustInterop.emitRustExpr v967 v973 
                            let _run_target_args'_v968 = v974 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v975 : string = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v968 = v975 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v976 : string = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v968 = v976 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v977 : string = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v968 = v977 
                            #endif
#else
                            let v978 : string = match v967 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _run_target_args'_v968 = v978 
                            #endif
                            let v979 : string = _run_target_args'_v968 
                            v979
                    let v985 : string = "command_result"
                    [|struct (v985, v984)|]
                else
                    let v987 : string = "fable_library_rust::String_::fromString($0)"
                    let v988 : string = Fable.Core.RustInterop.emitRustExpr v29 v987 
                    let v989 : bool = v988 = "dib"
                    if v989 then
                        let v990 : string = method173()
                        (* run_target_args'
                        let v991 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v992 : string = "&*$0"
                        let v993 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v990 v992 
                        let _run_target_args'_v991 = v993 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v994 : string = "&*$0"
                        let v995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v990 v994 
                        let _run_target_args'_v991 = v995 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v996 : string = "&*$0"
                        let v997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v990 v996 
                        let _run_target_args'_v991 = v997 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v998 : Ref<Str> = v990 |> unbox<Ref<Str>>
                        let _run_target_args'_v991 = v998 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1001 : Ref<Str> = v990 |> unbox<Ref<Str>>
                        let _run_target_args'_v991 = v1001 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1004 : Ref<Str> = v990 |> unbox<Ref<Str>>
                        let _run_target_args'_v991 = v1004 
                        #endif
#else
                        let v1007 : Ref<Str> = v990 |> unbox<Ref<Str>>
                        let _run_target_args'_v991 = v1007 
                        #endif
                        let v1010 : Ref<Str> = _run_target_args'_v991 
                        let v1015 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1016 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1010) v1015 
                        let v1017 : (std_string_String -> string) = method174()
                        let v1018 : string option = v1016 |> Option.map v1017 
                        let v1031 : string = "$0.unwrap()"
                        let v1032 : string = Fable.Core.RustInterop.emitRustExpr v1018 v1031 
                        let v1033 : string = method181()
                        (* run_target_args'
                        let v1034 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1035 : string = "&*$0"
                        let v1036 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1035 
                        let _run_target_args'_v1034 = v1036 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1037 : string = "&*$0"
                        let v1038 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1037 
                        let _run_target_args'_v1034 = v1038 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1039 : string = "&*$0"
                        let v1040 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1033 v1039 
                        let _run_target_args'_v1034 = v1040 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1041 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                        let _run_target_args'_v1034 = v1041 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1044 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                        let _run_target_args'_v1034 = v1044 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1047 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                        let _run_target_args'_v1034 = v1047 
                        #endif
#else
                        let v1050 : Ref<Str> = v1033 |> unbox<Ref<Str>>
                        let _run_target_args'_v1034 = v1050 
                        #endif
                        let v1053 : Ref<Str> = _run_target_args'_v1034 
                        let v1058 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1059 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1053) v1058 
                        let v1060 : uint8 = v1059 |> Option.defaultValue 1uy 
                        let v1063 : string = method182()
                        (* run_target_args'
                        let v1064 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1065 : string = "&*$0"
                        let v1066 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1063 v1065 
                        let _run_target_args'_v1064 = v1066 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1067 : string = "&*$0"
                        let v1068 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1063 v1067 
                        let _run_target_args'_v1064 = v1068 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1069 : string = "&*$0"
                        let v1070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1063 v1069 
                        let _run_target_args'_v1064 = v1070 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1071 : Ref<Str> = v1063 |> unbox<Ref<Str>>
                        let _run_target_args'_v1064 = v1071 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1074 : Ref<Str> = v1063 |> unbox<Ref<Str>>
                        let _run_target_args'_v1064 = v1074 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1077 : Ref<Str> = v1063 |> unbox<Ref<Str>>
                        let _run_target_args'_v1064 = v1077 
                        #endif
#else
                        let v1080 : Ref<Str> = v1063 |> unbox<Ref<Str>>
                        let _run_target_args'_v1064 = v1080 
                        #endif
                        let v1083 : Ref<Str> = _run_target_args'_v1064 
                        let v1088 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1089 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1083) v1088 
                        let v1090 : (std_string_String -> US7) = method23()
                        let v1091 : US7 option = v1089 |> Option.map v1090 
                        let v1102 : US7 = US7_1
                        let v1103 : US7 = v1091 |> Option.defaultValue v1102 
                        let v1113 : US5 =
                            match v1103 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v1107) -> (* Some *)
                                let v1108 : string = "fable_library_rust::String_::fromString($0)"
                                let v1109 : string = Fable.Core.RustInterop.emitRustExpr v1107 v1108 
                                US5_0(v1109)
                        let v1114 : uint8 = 1uy
                        let struct (v1115 : int32, v1116 : string) = method183(v1113, v1060, v1032, v1114)
                        let v1117 : bool = v1115 <> 0 
                        let struct (v1411 : int32, v1412 : string) =
                            if v1117 then
                                struct (v1115, v1116)
                            else
                                let v1120 : System.Threading.CancellationToken option = None
                                let v1121 : (struct (string * string) []) = [||]
                                let v1122 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v1123 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v1124 : string option = None
                                let v1125 : string = $"jupyter nbconvert \"{v1032}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v1126 : bool = true
                                let struct (v1127 : int32, v1128 : string) = method89(v1125, v1120, v1121, v1122, v1123, v1126, v1124)
                                let v1129 : unit = ()
                                let v1130 : (unit -> unit) = closure79(v1128, v1127)
                                let v1131 : unit = (fun () -> v1130 (); v1129) ()
                                let v1172 : bool = v1127 <> 0 
                                if v1172 then
                                    let v1175 : string = $"repl_result: {v1116}

jupyter_result: {v1128}"
                                    struct (v1127, v1175)
                                else
                                    let v1176 : string = "'"
                                    let v1177 : string = "''"
                                    let v1178 : string = v1032.Replace (v1176, v1177)
                                    let v1179 : System.Threading.CancellationToken option = None
                                    let v1180 : (struct (string * string) []) = [||]
                                    let v1181 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v1182 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v1183 : string option = None
                                    let v1184 : string = $"pwsh -c \"$counter = 1; $path = '{v1178}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v1185 : bool = true
                                    let struct (v1186 : int32, v1187 : string) = method89(v1184, v1179, v1180, v1181, v1182, v1185, v1183)
                                    let v1188 : unit = ()
                                    let v1189 : (unit -> unit) = closure80(v1187, v1186)
                                    let v1190 : unit = (fun () -> v1189 (); v1188) ()
                                    let v1231 : string = $"{v1032}.html"
                                    (* run_target_args'
                                    let v1232 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v1233 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1234 : string = "std::fs::read(&*$0)"
                                    let v1235 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1231 v1234 
                                    (* run_target_args'
                                    let v1236 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1237 : string = "$0.unwrap()"
                                    let v1238 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1235 v1237 
                                    let _run_target_args'_v1236 = v1238 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1239 : string = "$0.unwrap()"
                                    let v1240 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1235 v1239 
                                    let _run_target_args'_v1236 = v1240 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1241 : string = "$0.unwrap()"
                                    let v1242 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1235 v1241 
                                    let _run_target_args'_v1236 = v1242 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1243 : Vec<uint8> = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1236 = v1243 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1244 : Vec<uint8> = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1236 = v1244 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1245 : Vec<uint8> = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1236 = v1245 
                                    #endif
#else
                                    let v1246 : Vec<uint8> = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1236 = v1246 
                                    #endif
                                    let v1247 : Vec<uint8> = _run_target_args'_v1236 
                                    let _run_target_args'_v1233 = v1247 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1250 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1233 = v1250 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1253 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1233 = v1253 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1233 = v1256 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1259 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1233 = v1259 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1262 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1233 = v1262 
                                    #endif
#else
                                    let v1265 : (uint8 []) = v1231 |> System.IO.File.ReadAllBytes
                                    let v1266 : string = "$0.to_vec()"
                                    let v1267 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1265 v1266 
                                    let _run_target_args'_v1233 = v1267 
                                    #endif
                                    let v1268 : Vec<uint8> = _run_target_args'_v1233 
                                    let v1273 : Vec<uint8> = method27(v1268)
                                    let v1274 : string = "std::string::String::from_utf8($0)"
                                    let v1275 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1273 v1274 
                                    (* run_target_args'
                                    let v1276 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1277 : string = "$0.unwrap()"
                                    let v1278 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1275 v1277 
                                    let _run_target_args'_v1276 = v1278 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1279 : string = "$0.unwrap()"
                                    let v1280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1275 v1279 
                                    let _run_target_args'_v1276 = v1280 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1281 : string = "$0.unwrap()"
                                    let v1282 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1275 v1281 
                                    let _run_target_args'_v1276 = v1282 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1283 : std_string_String = match v1275 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1276 = v1283 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1284 : std_string_String = match v1275 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1276 = v1284 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1285 : std_string_String = match v1275 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1276 = v1285 
                                    #endif
#else
                                    let v1286 : std_string_String = match v1275 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1276 = v1286 
                                    #endif
                                    let v1287 : std_string_String = _run_target_args'_v1276 
                                    let v1290 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1291 : string = Fable.Core.RustInterop.emitRustExpr v1287 v1290 
                                    let _run_target_args'_v1232 = v1291 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1292 : string = null |> unbox<string>
                                    let _run_target_args'_v1232 = v1292 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1295 : string = null |> unbox<string>
                                    let _run_target_args'_v1232 = v1295 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1298 : string = null |> unbox<string>
                                    let _run_target_args'_v1232 = v1298 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1301 : string = null |> unbox<string>
                                    let _run_target_args'_v1232 = v1301 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1304 : string = null |> unbox<string>
                                    let _run_target_args'_v1232 = v1304 
                                    #endif
#else
                                    let v1307 : string = v1231 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v1232 = v1307 
                                    #endif
                                    let v1308 : string = _run_target_args'_v1232 
                                    let v1313 : string = "\r\n"
                                    let v1314 : string = "\n"
                                    let v1315 : string = v1308.Replace (v1313, v1314)
                                    let v1316 : string = $"{v1032}.html"
                                    (* run_target_args'
                                    let v1317 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1318 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1316, v1315) v1318 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    #endif
#else
                                    System.IO.File.WriteAllText (v1316, v1315)
                                    #endif
                                    // run_target_args' is_unit
                                    let v1319 : string = $"{v1032}.ipynb"
                                    (* run_target_args'
                                    let v1320 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v1321 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1322 : string = "std::fs::read(&*$0)"
                                    let v1323 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1319 v1322 
                                    (* run_target_args'
                                    let v1324 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1325 : string = "$0.unwrap()"
                                    let v1326 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1323 v1325 
                                    let _run_target_args'_v1324 = v1326 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1327 : string = "$0.unwrap()"
                                    let v1328 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1323 v1327 
                                    let _run_target_args'_v1324 = v1328 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1329 : string = "$0.unwrap()"
                                    let v1330 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1323 v1329 
                                    let _run_target_args'_v1324 = v1330 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1331 : Vec<uint8> = match v1323 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1324 = v1331 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1332 : Vec<uint8> = match v1323 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1324 = v1332 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1333 : Vec<uint8> = match v1323 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1324 = v1333 
                                    #endif
#else
                                    let v1334 : Vec<uint8> = match v1323 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1324 = v1334 
                                    #endif
                                    let v1335 : Vec<uint8> = _run_target_args'_v1324 
                                    let _run_target_args'_v1321 = v1335 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1338 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1321 = v1338 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1341 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1321 = v1341 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1344 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1321 = v1344 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1347 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1321 = v1347 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1350 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v1321 = v1350 
                                    #endif
#else
                                    let v1353 : (uint8 []) = v1319 |> System.IO.File.ReadAllBytes
                                    let v1354 : string = "$0.to_vec()"
                                    let v1355 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1353 v1354 
                                    let _run_target_args'_v1321 = v1355 
                                    #endif
                                    let v1356 : Vec<uint8> = _run_target_args'_v1321 
                                    let v1361 : Vec<uint8> = method27(v1356)
                                    let v1362 : string = "std::string::String::from_utf8($0)"
                                    let v1363 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1361 v1362 
                                    (* run_target_args'
                                    let v1364 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1365 : string = "$0.unwrap()"
                                    let v1366 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1363 v1365 
                                    let _run_target_args'_v1364 = v1366 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1367 : string = "$0.unwrap()"
                                    let v1368 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1363 v1367 
                                    let _run_target_args'_v1364 = v1368 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1369 : string = "$0.unwrap()"
                                    let v1370 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1363 v1369 
                                    let _run_target_args'_v1364 = v1370 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1371 : std_string_String = match v1363 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1364 = v1371 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1372 : std_string_String = match v1363 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1364 = v1372 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1373 : std_string_String = match v1363 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1364 = v1373 
                                    #endif
#else
                                    let v1374 : std_string_String = match v1363 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v1364 = v1374 
                                    #endif
                                    let v1375 : std_string_String = _run_target_args'_v1364 
                                    let v1378 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1379 : string = Fable.Core.RustInterop.emitRustExpr v1375 v1378 
                                    let _run_target_args'_v1320 = v1379 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1380 : string = null |> unbox<string>
                                    let _run_target_args'_v1320 = v1380 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1383 : string = null |> unbox<string>
                                    let _run_target_args'_v1320 = v1383 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1386 : string = null |> unbox<string>
                                    let _run_target_args'_v1320 = v1386 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1389 : string = null |> unbox<string>
                                    let _run_target_args'_v1320 = v1389 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1392 : string = null |> unbox<string>
                                    let _run_target_args'_v1320 = v1392 
                                    #endif
#else
                                    let v1395 : string = v1319 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v1320 = v1395 
                                    #endif
                                    let v1396 : string = _run_target_args'_v1320 
                                    let v1401 : string = v1396.Replace (v1313, v1314)
                                    let v1402 : string = "\\r\\n"
                                    let v1403 : string = "\\n"
                                    let v1404 : string = v1401.Replace (v1402, v1403)
                                    let v1405 : string = $"{v1032}.ipynb"
                                    (* run_target_args'
                                    let v1406 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1407 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1405, v1404) v1407 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    #endif
#else
                                    System.IO.File.WriteAllText (v1405, v1404)
                                    #endif
                                    // run_target_args' is_unit
                                    let v1408 : string = $"repl_result: {v1116}

jupyter_result: {v1128}

pwsh_replace_html_result: {v1187}"
                                    struct (v1186, v1408)
                        let v1413 : unit = ()
                        let v1414 : (unit -> unit) = closure81(v1412, v1411)
                        let v1415 : unit = (fun () -> v1414 (); v1413) ()
                        let v1456 : bool = v1411 <> 0 
                        if v1456 then
                            let v1459 : string = $"spiral.run / dib / exit_code: {v1411} / result: {v1412}"
                            failwith<unit> v1459
                        let v1460 : string = "stdio"
                        [|struct (v1460, v1412)|]
                    else
                        let v1462 : string = "fable_library_rust::String_::fromString($0)"
                        let v1463 : string = Fable.Core.RustInterop.emitRustExpr v29 v1462 
                        let v1464 : bool = v1463 = "rust"
                        let struct (v4567 : US5, v4568 : US5, v4569 : US5, v4570 : US5) =
                            if v1464 then
                                let v1465 : string = method171()
                                (* run_target_args'
                                let v1466 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1467 : string = "&*$0"
                                let v1468 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1465 v1467 
                                let _run_target_args'_v1466 = v1468 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1469 : string = "&*$0"
                                let v1470 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1465 v1469 
                                let _run_target_args'_v1466 = v1470 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1471 : string = "&*$0"
                                let v1472 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1465 v1471 
                                let _run_target_args'_v1466 = v1472 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1473 : Ref<Str> = v1465 |> unbox<Ref<Str>>
                                let _run_target_args'_v1466 = v1473 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1476 : Ref<Str> = v1465 |> unbox<Ref<Str>>
                                let _run_target_args'_v1466 = v1476 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1479 : Ref<Str> = v1465 |> unbox<Ref<Str>>
                                let _run_target_args'_v1466 = v1479 
                                #endif
#else
                                let v1482 : Ref<Str> = v1465 |> unbox<Ref<Str>>
                                let _run_target_args'_v1466 = v1482 
                                #endif
                                let v1485 : Ref<Str> = _run_target_args'_v1466 
                                let v1490 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1491 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1485) v1490 
                                let v1492 : (std_string_String -> US7) = method23()
                                let v1493 : US7 option = v1491 |> Option.map v1492 
                                let v1504 : US7 = US7_1
                                let v1505 : US7 = v1493 |> Option.defaultValue v1504 
                                let v1512 : std_string_String =
                                    match v1505 with
                                    | US7_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US7_0(v1509) -> (* Some *)
                                        v1509
                                let v1513 : string = "fable_library_rust::String_::fromString($0)"
                                let v1514 : string = Fable.Core.RustInterop.emitRustExpr v1512 v1513 
                                let v1515 : string = method25()
                                (* run_target_args'
                                let v1516 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1517 : string = "&*$0"
                                let v1518 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1515 v1517 
                                let _run_target_args'_v1516 = v1518 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1519 : string = "&*$0"
                                let v1520 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1515 v1519 
                                let _run_target_args'_v1516 = v1520 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1521 : string = "&*$0"
                                let v1522 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1515 v1521 
                                let _run_target_args'_v1516 = v1522 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1523 : Ref<Str> = v1515 |> unbox<Ref<Str>>
                                let _run_target_args'_v1516 = v1523 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1526 : Ref<Str> = v1515 |> unbox<Ref<Str>>
                                let _run_target_args'_v1516 = v1526 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1529 : Ref<Str> = v1515 |> unbox<Ref<Str>>
                                let _run_target_args'_v1516 = v1529 
                                #endif
#else
                                let v1532 : Ref<Str> = v1515 |> unbox<Ref<Str>>
                                let _run_target_args'_v1516 = v1532 
                                #endif
                                let v1535 : Ref<Str> = _run_target_args'_v1516 
                                let v1540 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                let v1541 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1535) v1540 
                                let v1542 : (Vec<std_string_String> -> US11) = method26()
                                let v1543 : US11 option = v1541 |> Option.map v1542 
                                let v1554 : US11 = US11_1
                                let v1555 : US11 = v1543 |> Option.defaultValue v1554 
                                let v1559 : (std_string_String []) = [||]
                                let v1560 : string = "$0.to_vec()"
                                let v1561 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1559 v1560 
                                let v1564 : Vec<std_string_String> =
                                    match v1555 with
                                    | US11_1 -> (* None *)
                                        v1561
                                    | US11_0(v1562) -> (* Some *)
                                        v1562
                                let v1565 : string = method192()
                                (* run_target_args'
                                let v1566 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1567 : string = "&*$0"
                                let v1568 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1565 v1567 
                                let _run_target_args'_v1566 = v1568 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1569 : string = "&*$0"
                                let v1570 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1565 v1569 
                                let _run_target_args'_v1566 = v1570 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1571 : string = "&*$0"
                                let v1572 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1565 v1571 
                                let _run_target_args'_v1566 = v1572 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1573 : Ref<Str> = v1565 |> unbox<Ref<Str>>
                                let _run_target_args'_v1566 = v1573 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1576 : Ref<Str> = v1565 |> unbox<Ref<Str>>
                                let _run_target_args'_v1566 = v1576 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1579 : Ref<Str> = v1565 |> unbox<Ref<Str>>
                                let _run_target_args'_v1566 = v1579 
                                #endif
#else
                                let v1582 : Ref<Str> = v1565 |> unbox<Ref<Str>>
                                let _run_target_args'_v1566 = v1582 
                                #endif
                                let v1585 : Ref<Str> = _run_target_args'_v1566 
                                let v1590 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                let v1591 : bool = Fable.Core.RustInterop.emitRustExpr struct (v30, v1585) v1590 
                                let v1592 : string = method193()
                                (* run_target_args'
                                let v1593 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1594 : string = "&*$0"
                                let v1595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1592 v1594 
                                let _run_target_args'_v1593 = v1595 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1596 : string = "&*$0"
                                let v1597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1592 v1596 
                                let _run_target_args'_v1593 = v1597 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1598 : string = "&*$0"
                                let v1599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1592 v1598 
                                let _run_target_args'_v1593 = v1599 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1600 : Ref<Str> = v1592 |> unbox<Ref<Str>>
                                let _run_target_args'_v1593 = v1600 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1603 : Ref<Str> = v1592 |> unbox<Ref<Str>>
                                let _run_target_args'_v1593 = v1603 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1606 : Ref<Str> = v1592 |> unbox<Ref<Str>>
                                let _run_target_args'_v1593 = v1606 
                                #endif
#else
                                let v1609 : Ref<Str> = v1592 |> unbox<Ref<Str>>
                                let _run_target_args'_v1593 = v1609 
                                #endif
                                let v1612 : Ref<Str> = _run_target_args'_v1593 
                                let v1617 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1618 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1612) v1617 
                                let v1619 : (std_string_String -> US7) = method23()
                                let v1620 : US7 option = v1618 |> Option.map v1619 
                                let v1631 : US7 = US7_1
                                let v1632 : US7 = v1620 |> Option.defaultValue v1631 
                                let v1642 : US5 =
                                    match v1632 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1636) -> (* Some *)
                                        let v1637 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1638 : string = Fable.Core.RustInterop.emitRustExpr v1636 v1637 
                                        US5_0(v1638)
                                let v1643 : string = method194()
                                (* run_target_args'
                                let v1644 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1645 : string = "&*$0"
                                let v1646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1645 
                                let _run_target_args'_v1644 = v1646 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1647 : string = "&*$0"
                                let v1648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1647 
                                let _run_target_args'_v1644 = v1648 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1649 : string = "&*$0"
                                let v1650 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1649 
                                let _run_target_args'_v1644 = v1650 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1651 : Ref<Str> = v1643 |> unbox<Ref<Str>>
                                let _run_target_args'_v1644 = v1651 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1654 : Ref<Str> = v1643 |> unbox<Ref<Str>>
                                let _run_target_args'_v1644 = v1654 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1657 : Ref<Str> = v1643 |> unbox<Ref<Str>>
                                let _run_target_args'_v1644 = v1657 
                                #endif
#else
                                let v1660 : Ref<Str> = v1643 |> unbox<Ref<Str>>
                                let _run_target_args'_v1644 = v1660 
                                #endif
                                let v1663 : Ref<Str> = _run_target_args'_v1644 
                                let v1668 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1669 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v1663) v1668 
                                let v1670 : (std_string_String -> US7) = method23()
                                let v1671 : US7 option = v1669 |> Option.map v1670 
                                let v1682 : US7 = US7_1
                                let v1683 : US7 = v1671 |> Option.defaultValue v1682 
                                let v1693 : US5 =
                                    match v1683 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1687) -> (* Some *)
                                        let v1688 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1689 : string = Fable.Core.RustInterop.emitRustExpr v1687 v1688 
                                        US5_0(v1689)
                                let v1702 : US36 =
                                    match v1642 with
                                    | US5_0(v1694) -> (* Some *)
                                        let v1695 : US37 = US37_0(v1694)
                                        US36_0(v1695)
                                    | _ ->
                                        match v1693 with
                                        | US5_0(v1697) -> (* Some *)
                                            let v1698 : US37 = US37_1(v1697)
                                            US36_0(v1698)
                                        | _ ->
                                            US36_1
                                (* run_target_args'
                                let v1703 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                (* run_target_args'
                                let v1704 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1705 : string = "std::fs::read(&*$0)"
                                let v1706 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1514 v1705 
                                (* run_target_args'
                                let v1707 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1708 : string = "$0.unwrap()"
                                let v1709 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1706 v1708 
                                let _run_target_args'_v1707 = v1709 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1710 : string = "$0.unwrap()"
                                let v1711 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1706 v1710 
                                let _run_target_args'_v1707 = v1711 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1712 : string = "$0.unwrap()"
                                let v1713 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1706 v1712 
                                let _run_target_args'_v1707 = v1713 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1714 : Vec<uint8> = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1707 = v1714 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1715 : Vec<uint8> = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1707 = v1715 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1716 : Vec<uint8> = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1707 = v1716 
                                #endif
#else
                                let v1717 : Vec<uint8> = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1707 = v1717 
                                #endif
                                let v1718 : Vec<uint8> = _run_target_args'_v1707 
                                let _run_target_args'_v1704 = v1718 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1721 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _run_target_args'_v1704 = v1721 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1724 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _run_target_args'_v1704 = v1724 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1727 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _run_target_args'_v1704 = v1727 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1730 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _run_target_args'_v1704 = v1730 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1733 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _run_target_args'_v1704 = v1733 
                                #endif
#else
                                let v1736 : (uint8 []) = v1514 |> System.IO.File.ReadAllBytes
                                let v1737 : string = "$0.to_vec()"
                                let v1738 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1736 v1737 
                                let _run_target_args'_v1704 = v1738 
                                #endif
                                let v1739 : Vec<uint8> = _run_target_args'_v1704 
                                let v1744 : Vec<uint8> = method27(v1739)
                                let v1745 : string = "std::string::String::from_utf8($0)"
                                let v1746 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1744 v1745 
                                (* run_target_args'
                                let v1747 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1748 : string = "$0.unwrap()"
                                let v1749 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1746 v1748 
                                let _run_target_args'_v1747 = v1749 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1750 : string = "$0.unwrap()"
                                let v1751 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1746 v1750 
                                let _run_target_args'_v1747 = v1751 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1752 : string = "$0.unwrap()"
                                let v1753 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1746 v1752 
                                let _run_target_args'_v1747 = v1753 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1754 : std_string_String = match v1746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1747 = v1754 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1755 : std_string_String = match v1746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1747 = v1755 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1756 : std_string_String = match v1746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1747 = v1756 
                                #endif
#else
                                let v1757 : std_string_String = match v1746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v1747 = v1757 
                                #endif
                                let v1758 : std_string_String = _run_target_args'_v1747 
                                let v1761 : string = "fable_library_rust::String_::fromString($0)"
                                let v1762 : string = Fable.Core.RustInterop.emitRustExpr v1758 v1761 
                                let _run_target_args'_v1703 = v1762 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1763 : string = null |> unbox<string>
                                let _run_target_args'_v1703 = v1763 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1766 : string = null |> unbox<string>
                                let _run_target_args'_v1703 = v1766 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1769 : string = null |> unbox<string>
                                let _run_target_args'_v1703 = v1769 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1772 : string = null |> unbox<string>
                                let _run_target_args'_v1703 = v1772 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1775 : string = null |> unbox<string>
                                let _run_target_args'_v1703 = v1775 
                                #endif
#else
                                let v1778 : string = v1514 |> System.IO.File.ReadAllText
                                let _run_target_args'_v1703 = v1778 
                                #endif
                                let v1779 : string = _run_target_args'_v1703 
                                let v1784 : string = "rs"
                                let v1785 : string = method195(v1784, v1779, v1702)
                                let v1786 : string = method196(v1785)
                                let v1787 : string = method28()
                                let v1788 : US5 = method29(v1787)
                                let v1794 : US5 =
                                    match v1788 with
                                    | US5_1 -> (* None *)
                                        let v1791 : string = __SOURCE_DIRECTORY__
                                        method29(v1791)
                                    | US5_0(v1789) -> (* Some *)
                                        US5_0(v1789)
                                let v1800 : US5 =
                                    match v1794 with
                                    | US5_1 -> (* None *)
                                        let v1797 : string = "/workspaces"
                                        method29(v1797)
                                    | US5_0(v1795) -> (* Some *)
                                        US5_0(v1795)
                                let v1804 : string =
                                    match v1800 with
                                    | US5_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US5_0(v1801) -> (* Some *)
                                        v1801
                                let v1805 : string = method49(v1804)
                                let v1806 : bool = "deps" = v1805
                                let v1816 : string =
                                    if v1806 then
                                        let v1807 : string option = method35(v1804)
                                        let v1808 : string = v1807 |> Option.get
                                        let v1811 : US5 = method29(v1808)
                                        match v1811 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v1812) -> (* Some *)
                                            v1812
                                    else
                                        v1804
                                let v1817 : string = "polyglot"
                                let v1818 : string = method30(v1816, v1817)
                                let v1819 : string = method28()
                                let v1820 : (unit -> string) = v1819.ToLower
                                let v1821 : string = v1820 ()
                                let v1824 : (unit -> string) = v1818.ToLower
                                let v1825 : string = v1824 ()
                                let v1828 : bool = v1821.StartsWith (v1825, false, null)
                                let v1833 : US13 =
                                    if v1828 then
                                        US13_1(v1825)
                                    else
                                        US13_0(v1825)
                                let v1839 : Result<string, string> =
                                    match v1833 with
                                    | US13_1(v1836) -> (* Error *)
                                        let v1837 : Result<string, string> = Error v1836 
                                        v1837
                                    | US13_0(v1834) -> (* Ok *)
                                        let v1835 : Result<string, string> = Ok v1834 
                                        v1835
                                let v1840 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                let v1841 : bool = Fable.Core.RustInterop.emitRustExpr v1839 v1840 
                                let v1842 : string = "x"
                                let v1843 : string = Fable.Core.RustInterop.emitRustExpr () v1842 
                                let v1844 : string = "true; $0 })"
                                let v1845 : bool = Fable.Core.RustInterop.emitRustExpr v1843 v1844 
                                let v1846 : string = "_result_unwrap_or_else"
                                let v1847 : string = Fable.Core.RustInterop.emitRustExpr () v1846 
                                let v1848 : string = "spiral"
                                let v1849 : US38 = US38_0
                                let v1850 : US39 = US39_0(v1849)
                                let v1851 : US5 = US5_0(v1786)
                                let v1852 : string = method199(v1851, v1848, v1850, v1847)
                                let v1853 : string = "Fable.Core"
                                let v1854 : UH2 = UH2_0
                                let v1855 : UH2 = UH2_1(v1853, v1854)
                                let v1856 : UH2 = UH2_0
                                let v1857 : string = method200(v1779, v1848, v1856, v1855, v1852, v1847)
                                let v1858 : string = "../../.."
                                let v1859 : string = method30(v1852, v1858)
                                let v1860 : string = "Cargo.toml"
                                let v1861 : string = method30(v1859, v1860)
                                let v1862 : bool = method32(v1861)
                                let v1863 : bool = v1862 = false
                                if v1863 then
                                    (* run_target_args'
                                    let v1864 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1865 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1865 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1866 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1866 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1867 : System.DateTime = null |> unbox<System.DateTime>
                                    let _run_target_args'_v1864 = v1867 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1870 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1870 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1871 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1871 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1872 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1872 
                                    #endif
#else
                                    let v1873 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1864 = v1873 
                                    #endif
                                    let v1874 : System.DateTime = _run_target_args'_v1864 
                                    let v1879 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1880 : System.Guid = v1879 ()
                                    let v1883 : System.Guid = method203(v1880, v1874)
                                    let v1884 : (System.Guid -> string) = _.ToString()
                                    let v1885 : string = v1884 v1883
                                    let v1888 : string = $"[package]"
                                    let v1889 : string = $"name = \"spiral_{v1885}\""
                                    let v1890 : string = "\n"
                                    let v1891 : string = v1888 + v1890 
                                    let v1892 : string = v1891 + v1889 
                                    let v1893 : string = $"version = \"0.0.1\""
                                    let v1894 : string = v1892 + v1890 
                                    let v1895 : string = v1894 + v1893 
                                    let v1896 : string = $"edition = \"2021\""
                                    let v1897 : string = v1895 + v1890 
                                    let v1898 : string = v1897 + v1896 
                                    let v1899 : string = $""
                                    let v1900 : string = v1898 + v1890 
                                    let v1901 : string = v1900 + v1899 
                                    let v1902 : string = $"[[bin]]"
                                    let v1903 : string = v1901 + v1890 
                                    let v1904 : string = v1903 + v1902 
                                    let v1905 : string = $"name = \"spiral_{v1885}\""
                                    let v1906 : string = v1904 + v1890 
                                    let v1907 : string = v1906 + v1905 
                                    let v1908 : string = $"path = \"spiral.rs\""
                                    let v1909 : string = v1907 + v1890 
                                    let v1910 : string = v1909 + v1908 
                                    (* run_target_args'
                                    let v1911 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1912 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1861, v1910) v1912 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    #endif
#else
                                    System.IO.File.WriteAllText (v1861, v1910)
                                    #endif
                                    // run_target_args' is_unit
                                    ()
                                let v1913 : string = method30(v1852, v1860)
                                let v1914 : bool = method32(v1913)
                                let v1915 : bool = v1914 = false
                                if v1915 then
                                    (* run_target_args'
                                    let v1916 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1917 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1917 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1918 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1918 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1919 : System.DateTime = null |> unbox<System.DateTime>
                                    let _run_target_args'_v1916 = v1919 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1922 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1922 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1923 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1923 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1924 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1924 
                                    #endif
#else
                                    let v1925 : System.DateTime = System.DateTime.Now
                                    let _run_target_args'_v1916 = v1925 
                                    #endif
                                    let v1926 : System.DateTime = _run_target_args'_v1916 
                                    let v1931 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1932 : System.Guid = v1931 ()
                                    let v1935 : System.Guid = method203(v1932, v1926)
                                    let v1936 : (System.Guid -> string) = _.ToString()
                                    let v1937 : string = v1936 v1935
                                    let v1940 : string = $"[package]"
                                    let v1941 : string = $"name = \"spiral_{v1937}\""
                                    let v1942 : string = "\n"
                                    let v1943 : string = v1940 + v1942 
                                    let v1944 : string = v1943 + v1941 
                                    let v1945 : string = $"version = \"0.0.1\""
                                    let v1946 : string = v1944 + v1942 
                                    let v1947 : string = v1946 + v1945 
                                    let v1948 : string = $"edition = \"2021\""
                                    let v1949 : string = v1947 + v1942 
                                    let v1950 : string = v1949 + v1948 
                                    let v1951 : string = $""
                                    let v1952 : string = v1950 + v1942 
                                    let v1953 : string = v1952 + v1951 
                                    let v1954 : string = $"[[bin]]"
                                    let v1955 : string = v1953 + v1942 
                                    let v1956 : string = v1955 + v1954 
                                    let v1957 : string = $"name = \"spiral_{v1937}\""
                                    let v1958 : string = v1956 + v1942 
                                    let v1959 : string = v1958 + v1957 
                                    let v1960 : string = $"path = \"spiral.rs\""
                                    let v1961 : string = v1959 + v1942 
                                    let v1962 : string = v1961 + v1960 
                                    (* run_target_args'
                                    let v1963 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1964 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1913, v1962) v1964 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    #endif
#else
                                    System.IO.File.WriteAllText (v1913, v1962)
                                    #endif
                                    // run_target_args' is_unit
                                    ()
                                let v1965 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v1966 : string = method30(v1847, v1965)
                                let v1967 : string = "fable_modules/fable-library-rust"
                                let v1968 : string = method30(v1852, v1967)
                                method208(v1966, v1968)
                                let struct (v1969 : int32, v1970 : string) = method209(v1702, v1852, v1784, v1857, v1833)
                                let v1971 : bool = v1969 <> 0 
                                let struct (v3101 : US5, v3102 : US5, v3103 : US5, v3104 : US5) =
                                    if v1971 then
                                        let v1974 : unit = ()
                                        let v1975 : (unit -> unit) = closure84(v1970, v1969)
                                        let v1976 : unit = (fun () -> v1975 (); v1974) ()
                                        let v2016 : US5 = US5_0(v1784)
                                        let v2017 : US5 = US5_1
                                        let v2018 : US5 = US5_1
                                        let v2019 : US5 = US5_0(v1970)
                                        struct (v2016, v2017, v2018, v2019)
                                    else
                                        let v2020 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2096 : Vec<std_string_String> =
                                            if v2020 then
                                                v1564
                                            else
                                                let v2021 : (std_string_String -> bool) = method219()
                                                let v2022 : Vec<std_string_String> = method220(v1564)
                                                let v2023 : string = "v2022.into_iter().filter(|x| v2021(x.clone().clone())).collect::<Vec<_>>()"
                                                let v2024 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2023 
                                                let v2025 : string = "$0.len()"
                                                let v2026 : unativeint = Fable.Core.RustInterop.emitRustExpr v2024 v2025 
                                                let v2027 : int32 = v2026 |> int32 
                                                let v2034 : bool = v2027 > 0
                                                if v2034 then
                                                    v1564
                                                else
                                                    let v2035 : string = "near-sdk"
                                                    (* run_target_args'
                                                    let v2036 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2037 : string = "&*$0"
                                                    let v2038 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2035 v2037 
                                                    let _run_target_args'_v2036 = v2038 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2039 : string = "&*$0"
                                                    let v2040 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2035 v2039 
                                                    let _run_target_args'_v2036 = v2040 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2041 : string = "&*$0"
                                                    let v2042 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2035 v2041 
                                                    let _run_target_args'_v2036 = v2042 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2043 : Ref<Str> = v2035 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v2036 = v2043 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2046 : Ref<Str> = v2035 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v2036 = v2046 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2049 : Ref<Str> = v2035 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v2036 = v2049 
                                                    #endif
#else
                                                    let v2052 : Ref<Str> = v2035 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v2036 = v2052 
                                                    #endif
                                                    let v2055 : Ref<Str> = _run_target_args'_v2036 
                                                    (* run_target_args'
                                                    let v2060 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2061 : string = "String::from($0)"
                                                    let v2062 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2055 v2061 
                                                    let _run_target_args'_v2060 = v2062 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2063 : string = "String::from($0)"
                                                    let v2064 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2055 v2063 
                                                    let _run_target_args'_v2060 = v2064 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2065 : string = "String::from($0)"
                                                    let v2066 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2055 v2065 
                                                    let _run_target_args'_v2060 = v2066 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2067 : std_string_String = v2055 |> unbox<std_string_String>
                                                    let _run_target_args'_v2060 = v2067 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2070 : std_string_String = v2055 |> unbox<std_string_String>
                                                    let _run_target_args'_v2060 = v2070 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2073 : std_string_String = v2055 |> unbox<std_string_String>
                                                    let _run_target_args'_v2060 = v2073 
                                                    #endif
#else
                                                    let v2076 : std_string_String = v2055 |> unbox<std_string_String>
                                                    let _run_target_args'_v2060 = v2076 
                                                    #endif
                                                    let v2079 : std_string_String = _run_target_args'_v2060 
                                                    let v2084 : (std_string_String []) = [|v2079|]
                                                    let v2085 : string = "$0.to_vec()"
                                                    let v2086 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2084 v2085 
                                                    let v2087 : Vec<std_string_String> = method221(v2086)
                                                    let v2088 : Vec<std_string_String> = method222(v1564)
                                                    let v2089 : string = "true; let mut v2088 = v2088"
                                                    let v2090 : bool = Fable.Core.RustInterop.emitRustExpr () v2089 
                                                    let v2091 : string = "true; v2088.extend(v2087)"
                                                    let v2092 : bool = Fable.Core.RustInterop.emitRustExpr () v2091 
                                                    let v2093 : string = "v2088"
                                                    let v2094 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2093 
                                                    v2094
                                        let v2097 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                        let v2098 : bool = Fable.Core.RustInterop.emitRustExpr v2096 v2097 
                                        let v2099 : string = "x"
                                        let v2100 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2099 
                                        let v2101 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2102 : string = Fable.Core.RustInterop.emitRustExpr v2100 v2101 
                                        let v2103 : string = "="
                                        let v2104 : bool = v2102.Contains v2103 
                                        let v2117 : string =
                                            if v2104 then
                                                v2102
                                            else
                                                let v2107 : string = "]"
                                                let v2108 : bool = v2102.EndsWith (v2107, false, null)
                                                if v2108 then
                                                    let v2111 : string = $"={{version='*',features=["
                                                    let v2112 : string = "["
                                                    let v2113 : string = v2102.Replace (v2112, v2111)
                                                    let v2114 : string = $"{v2113}}}"
                                                    v2114
                                                else
                                                    let v2115 : string = $"{v2102}='*'"
                                                    v2115
                                        let v2118 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v2119 : bool = Fable.Core.RustInterop.emitRustExpr v2117 v2118 
                                        let v2120 : string = "_vec_map"
                                        let v2121 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2120 
                                        let v2122 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                        let v2123 : (string []) = Fable.Core.RustInterop.emitRustExpr v2121 v2122 
                                        let v2124 : unit = ()
                                        let _let'_v2124 =
                                            seq {
                                                for i = 0 to v2123.Length - 1 do yield v2123.[i]
                                                (* indent
                                                ()
                                            indent *)
                                            }
                                            (* indent
                                            ()
                                        indent *)
                                        let v2127 : string seq = _let'_v2124 
                                        let v2133 : string = method63()
                                        let v2134 : (string -> (string seq -> string)) = String.concat
                                        let v2135 : (string seq -> string) = v2134 v2133
                                        let v2136 : string = v2135 v2127
                                        let v2140 : string = $"{v1848}.{v1784}"
                                        let v2141 : string = method30(v1852, v2140)
                                        (* run_target_args'
                                        let v2142 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2143 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2144 : string = "std::fs::read(&*$0)"
                                        let v2145 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2141 v2144 
                                        (* run_target_args'
                                        let v2146 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2147 : string = "$0.unwrap()"
                                        let v2148 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2145 v2147 
                                        let _run_target_args'_v2146 = v2148 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2149 : string = "$0.unwrap()"
                                        let v2150 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2145 v2149 
                                        let _run_target_args'_v2146 = v2150 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2151 : string = "$0.unwrap()"
                                        let v2152 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2145 v2151 
                                        let _run_target_args'_v2146 = v2152 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2153 : Vec<uint8> = match v2145 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2146 = v2153 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2154 : Vec<uint8> = match v2145 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2146 = v2154 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2155 : Vec<uint8> = match v2145 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2146 = v2155 
                                        #endif
#else
                                        let v2156 : Vec<uint8> = match v2145 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2146 = v2156 
                                        #endif
                                        let v2157 : Vec<uint8> = _run_target_args'_v2146 
                                        let _run_target_args'_v2143 = v2157 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2160 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2143 = v2160 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2163 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2143 = v2163 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2166 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2143 = v2166 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2169 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2143 = v2169 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2172 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2143 = v2172 
                                        #endif
#else
                                        let v2175 : (uint8 []) = v2141 |> System.IO.File.ReadAllBytes
                                        let v2176 : string = "$0.to_vec()"
                                        let v2177 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2175 v2176 
                                        let _run_target_args'_v2143 = v2177 
                                        #endif
                                        let v2178 : Vec<uint8> = _run_target_args'_v2143 
                                        let v2183 : Vec<uint8> = method27(v2178)
                                        let v2184 : string = "std::string::String::from_utf8($0)"
                                        let v2185 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2183 v2184 
                                        (* run_target_args'
                                        let v2186 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2187 : string = "$0.unwrap()"
                                        let v2188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2185 v2187 
                                        let _run_target_args'_v2186 = v2188 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2189 : string = "$0.unwrap()"
                                        let v2190 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2185 v2189 
                                        let _run_target_args'_v2186 = v2190 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2191 : string = "$0.unwrap()"
                                        let v2192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2185 v2191 
                                        let _run_target_args'_v2186 = v2192 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2193 : std_string_String = match v2185 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2186 = v2193 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2194 : std_string_String = match v2185 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2186 = v2194 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2195 : std_string_String = match v2185 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2186 = v2195 
                                        #endif
#else
                                        let v2196 : std_string_String = match v2185 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2186 = v2196 
                                        #endif
                                        let v2197 : std_string_String = _run_target_args'_v2186 
                                        let v2200 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2201 : string = Fable.Core.RustInterop.emitRustExpr v2197 v2200 
                                        let _run_target_args'_v2142 = v2201 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2202 : string = null |> unbox<string>
                                        let _run_target_args'_v2142 = v2202 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2205 : string = null |> unbox<string>
                                        let _run_target_args'_v2142 = v2205 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2208 : string = null |> unbox<string>
                                        let _run_target_args'_v2142 = v2208 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2211 : string = null |> unbox<string>
                                        let _run_target_args'_v2142 = v2211 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2214 : string = null |> unbox<string>
                                        let _run_target_args'_v2142 = v2214 
                                        #endif
#else
                                        let v2217 : string = v2141 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2142 = v2217 
                                        #endif
                                        let v2218 : string = _run_target_args'_v2142 
                                        let v2223 : string = method223()
                                        let v2224 : string = "on_startup!"
                                        let v2225 : string = v2224 + v2223 
                                        let v2226 : string = method224()
                                        let v2227 : string = " method0"
                                        let v2228 : string = v2227 + v2226 
                                        let v2229 : bool = v2218.Contains v2225 
                                        let v2236 : bool =
                                            if v2229 then
                                                let v2232 : bool = v2218.Contains v2228 
                                                let v2235 : bool = v2232 = false
                                                v2235
                                            else
                                                false
                                        let v2237 : string = $"[package]"
                                        let v2238 : string = $"name = \"spiral_{v1786}\""
                                        let v2239 : string = "\n"
                                        let v2240 : string = v2237 + v2239 
                                        let v2241 : string = v2240 + v2238 
                                        let v2242 : string = $"version = \"0.0.1\""
                                        let v2243 : string = v2241 + v2239 
                                        let v2244 : string = v2243 + v2242 
                                        let v2245 : string = $"edition = \"2021\""
                                        let v2246 : string = v2244 + v2239 
                                        let v2247 : string = v2246 + v2245 
                                        let v2248 : string = $""
                                        let v2249 : string = v2247 + v2239 
                                        let v2250 : string = v2249 + v2248 
                                        let v2251 : string = $"[dependencies]"
                                        let v2252 : string = v2250 + v2239 
                                        let v2253 : string = v2252 + v2251 
                                        let v2254 : US36 = US36_1
                                        let v2255 : bool = v1702 <> v2254 
                                        let v2273 : string =
                                            if v2255 then
                                                let v2259 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v2259
                                            else
                                                let v2260 : string = $"fable_library_rust = {{"
                                                let v2261 : string = $" workspace = true,"
                                                let v2262 : string = v2260 + v2261 
                                                let v2263 : string = $" features = ["
                                                let v2264 : string = v2262 + v2263 
                                                let v2267 : string =
                                                    if v2236 then
                                                        let v2265 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                        v2265
                                                    else
                                                        let v2266 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                        v2266
                                                let v2268 : string = v2264 + v2267 
                                                let v2269 : string = $"]"
                                                let v2270 : string = v2268 + v2269 
                                                let v2271 : string = $"}}"
                                                let v2272 : string = v2270 + v2271 
                                                v2272
                                        let v2274 : string = v2253 + v2239 
                                        let v2275 : string = v2274 + v2273 
                                        let v2276 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v2277 : string = v2275 + v2239 
                                        let v2278 : string = v2277 + v2276 
                                        let v2279 : string = $"{v2136}"
                                        let v2280 : string = v2278 + v2239 
                                        let v2281 : string = v2280 + v2279 
                                        let v2282 : string = $""
                                        let v2283 : string = v2281 + v2239 
                                        let v2284 : string = v2283 + v2282 
                                        let v2285 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2294 : string =
                                            if v2285 then
                                                let v2286 : string = $"[[bin]]"
                                                let v2287 : string = $"name = \"spiral_{v1786}\""
                                                let v2288 : string = v2286 + v2239 
                                                let v2289 : string = v2288 + v2287 
                                                v2289
                                            else
                                                let v2290 : string = $"[lib]"
                                                let v2291 : string = $"crate-type = [\"cdylib\"]"
                                                let v2292 : string = v2290 + v2239 
                                                let v2293 : string = v2292 + v2291 
                                                v2293
                                        let v2295 : string = v2284 + v2239 
                                        let v2296 : string = v2295 + v2294 
                                        let v2297 : string = $"path = \"spiral.rs\""
                                        let v2298 : string = v2296 + v2239 
                                        let v2299 : string = v2298 + v2297 
                                        let v2300 : string = method40(v1847)
                                        let v2301 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v2302 : string = $""
                                        let v2303 : string = v2301 + v2239 
                                        let v2304 : string = v2303 + v2302 
                                        let v2305 : string = $"[workspace]"
                                        let v2306 : string = v2304 + v2239 
                                        let v2307 : string = v2306 + v2305 
                                        let v2308 : string = $"resolver = \"2\""
                                        let v2309 : string = v2307 + v2239 
                                        let v2310 : string = v2309 + v2308 
                                        let v2311 : string = $"members = [\"packages/Rust/*\"]"
                                        let v2312 : string = v2310 + v2239 
                                        let v2313 : string = v2312 + v2311 
                                        let v2314 : string = $""
                                        let v2315 : string = v2313 + v2239 
                                        let v2316 : string = v2315 + v2314 
                                        let v2317 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v2318 : string = v2316 + v2239 
                                        let v2319 : string = v2318 + v2317 
                                        let v2320 : string = $"path = \"{v2300}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v2321 : string = v2319 + v2239 
                                        let v2322 : string = v2321 + v2320 
                                        let v2323 : string = $"default-features = false"
                                        let v2324 : string = v2322 + v2239 
                                        let v2325 : string = v2324 + v2323 
                                        let v2326 : string = $"features = []"
                                        let v2327 : string = v2325 + v2239 
                                        let v2328 : string = v2327 + v2326 
                                        let v2329 : string = $""
                                        let v2330 : string = v2328 + v2239 
                                        let v2331 : string = v2330 + v2329 
                                        let v2332 : string = $"[workspace.dependencies]"
                                        let v2333 : string = v2331 + v2239 
                                        let v2334 : string = v2333 + v2332 
                                        let v2335 : string = $"inline_colorization = \"~0.1\""
                                        let v2336 : string = v2334 + v2239 
                                        let v2337 : string = v2336 + v2335 
                                        let v2338 : string = $""
                                        let v2339 : string = v2337 + v2239 
                                        let v2340 : string = v2339 + v2338 
                                        let v2341 : string = $"[profile.release]"
                                        let v2342 : string = v2340 + v2239 
                                        let v2343 : string = v2342 + v2341 
                                        let v2344 : string = $"codegen-units = 1"
                                        let v2345 : string = v2343 + v2239 
                                        let v2346 : string = v2345 + v2344 
                                        let v2347 : string = $"opt-level = \"z\""
                                        let v2348 : string = v2346 + v2239 
                                        let v2349 : string = v2348 + v2347 
                                        let v2350 : string = $"lto = true"
                                        let v2351 : string = v2349 + v2239 
                                        let v2352 : string = v2351 + v2350 
                                        let v2353 : string = $"debug = false"
                                        let v2354 : string = v2352 + v2239 
                                        let v2355 : string = v2354 + v2353 
                                        let v2356 : string = $"panic = \"abort\""
                                        let v2357 : string = v2355 + v2239 
                                        let v2358 : string = v2357 + v2356 
                                        let v2359 : string = $"overflow-checks = true"
                                        let v2360 : string = v2358 + v2239 
                                        let v2361 : string = v2360 + v2359 
                                        let v2362 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v2363 : string = v2361 + v2239 
                                        let v2364 : string = v2363 + v2362 
                                        method64(v1913, v2299)
                                        method64(v1861, v2364)
                                        let v2365 : string = "src/Range.rs"
                                        let v2366 : string = method30(v1968, v2365)
                                        let v2367 : bool = method32(v2366)
                                        if v2367 then
                                            (* run_target_args'
                                            let v2368 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v2369 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2370 : string = "std::fs::read(&*$0)"
                                            let v2371 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2366 v2370 
                                            (* run_target_args'
                                            let v2372 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2373 : string = "$0.unwrap()"
                                            let v2374 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2371 v2373 
                                            let _run_target_args'_v2372 = v2374 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2375 : string = "$0.unwrap()"
                                            let v2376 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2371 v2375 
                                            let _run_target_args'_v2372 = v2376 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2377 : string = "$0.unwrap()"
                                            let v2378 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2371 v2377 
                                            let _run_target_args'_v2372 = v2378 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2379 : Vec<uint8> = match v2371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2372 = v2379 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2380 : Vec<uint8> = match v2371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2372 = v2380 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2381 : Vec<uint8> = match v2371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2372 = v2381 
                                            #endif
#else
                                            let v2382 : Vec<uint8> = match v2371 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2372 = v2382 
                                            #endif
                                            let v2383 : Vec<uint8> = _run_target_args'_v2372 
                                            let _run_target_args'_v2369 = v2383 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2386 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v2369 = v2386 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2389 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v2369 = v2389 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2392 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v2369 = v2392 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2395 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v2369 = v2395 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2398 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v2369 = v2398 
                                            #endif
#else
                                            let v2401 : (uint8 []) = v2366 |> System.IO.File.ReadAllBytes
                                            let v2402 : string = "$0.to_vec()"
                                            let v2403 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2401 v2402 
                                            let _run_target_args'_v2369 = v2403 
                                            #endif
                                            let v2404 : Vec<uint8> = _run_target_args'_v2369 
                                            let v2409 : Vec<uint8> = method27(v2404)
                                            let v2410 : string = "std::string::String::from_utf8($0)"
                                            let v2411 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2409 v2410 
                                            (* run_target_args'
                                            let v2412 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2413 : string = "$0.unwrap()"
                                            let v2414 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2411 v2413 
                                            let _run_target_args'_v2412 = v2414 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2415 : string = "$0.unwrap()"
                                            let v2416 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2411 v2415 
                                            let _run_target_args'_v2412 = v2416 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2417 : string = "$0.unwrap()"
                                            let v2418 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2411 v2417 
                                            let _run_target_args'_v2412 = v2418 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2419 : std_string_String = match v2411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2412 = v2419 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2420 : std_string_String = match v2411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2412 = v2420 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2421 : std_string_String = match v2411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2412 = v2421 
                                            #endif
#else
                                            let v2422 : std_string_String = match v2411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v2412 = v2422 
                                            #endif
                                            let v2423 : std_string_String = _run_target_args'_v2412 
                                            let v2426 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2427 : string = Fable.Core.RustInterop.emitRustExpr v2423 v2426 
                                            let _run_target_args'_v2368 = v2427 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2428 : string = null |> unbox<string>
                                            let _run_target_args'_v2368 = v2428 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2431 : string = null |> unbox<string>
                                            let _run_target_args'_v2368 = v2431 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2434 : string = null |> unbox<string>
                                            let _run_target_args'_v2368 = v2434 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2437 : string = null |> unbox<string>
                                            let _run_target_args'_v2368 = v2437 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2440 : string = null |> unbox<string>
                                            let _run_target_args'_v2368 = v2440 
                                            #endif
#else
                                            let v2443 : string = v2366 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v2368 = v2443 
                                            #endif
                                            let v2444 : string = _run_target_args'_v2368 
                                            let v2449 : string = "use crate::String_::fromCharCode;"
                                            let v2450 : string = "use crate::String_::fromChar;"
                                            let v2451 : string = v2444.Replace (v2449, v2450)
                                            let v2452 : string = "fromCharCode(c)"
                                            let v2453 : string = "std::char::from_u32(c).unwrap()"
                                            let v2454 : string = v2451.Replace (v2452, v2453)
                                            method64(v2366, v2454)
                                        let v2455 : uint8 = 1uy
                                        let struct (v2456 : int32, v2457 : string) = method225(v1833, v1913, v2455)
                                        let v2458 : bool = v2456 <> 0 
                                        if v2458 then
                                            let v2461 : unit = ()
                                            let v2462 : (unit -> unit) = closure88(v2457, v2456)
                                            let v2463 : unit = (fun () -> v2462 (); v2461) ()
                                            ()
                                        (* run_target_args'
                                        let v2503 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2504 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2505 : string = "std::fs::read(&*$0)"
                                        let v2506 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2141 v2505 
                                        (* run_target_args'
                                        let v2507 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2508 : string = "$0.unwrap()"
                                        let v2509 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2506 v2508 
                                        let _run_target_args'_v2507 = v2509 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2510 : string = "$0.unwrap()"
                                        let v2511 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2506 v2510 
                                        let _run_target_args'_v2507 = v2511 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2512 : string = "$0.unwrap()"
                                        let v2513 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2506 v2512 
                                        let _run_target_args'_v2507 = v2513 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2514 : Vec<uint8> = match v2506 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2507 = v2514 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2515 : Vec<uint8> = match v2506 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2507 = v2515 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2516 : Vec<uint8> = match v2506 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2507 = v2516 
                                        #endif
#else
                                        let v2517 : Vec<uint8> = match v2506 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2507 = v2517 
                                        #endif
                                        let v2518 : Vec<uint8> = _run_target_args'_v2507 
                                        let _run_target_args'_v2504 = v2518 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2521 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2504 = v2521 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2524 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2504 = v2524 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2527 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2504 = v2527 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2530 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2504 = v2530 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2533 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2504 = v2533 
                                        #endif
#else
                                        let v2536 : (uint8 []) = v2141 |> System.IO.File.ReadAllBytes
                                        let v2537 : string = "$0.to_vec()"
                                        let v2538 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2536 v2537 
                                        let _run_target_args'_v2504 = v2538 
                                        #endif
                                        let v2539 : Vec<uint8> = _run_target_args'_v2504 
                                        let v2544 : Vec<uint8> = method27(v2539)
                                        let v2545 : string = "std::string::String::from_utf8($0)"
                                        let v2546 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2544 v2545 
                                        (* run_target_args'
                                        let v2547 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2548 : string = "$0.unwrap()"
                                        let v2549 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2546 v2548 
                                        let _run_target_args'_v2547 = v2549 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2550 : string = "$0.unwrap()"
                                        let v2551 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2546 v2550 
                                        let _run_target_args'_v2547 = v2551 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2552 : string = "$0.unwrap()"
                                        let v2553 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2546 v2552 
                                        let _run_target_args'_v2547 = v2553 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2554 : std_string_String = match v2546 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2547 = v2554 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2555 : std_string_String = match v2546 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2547 = v2555 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2556 : std_string_String = match v2546 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2547 = v2556 
                                        #endif
#else
                                        let v2557 : std_string_String = match v2546 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2547 = v2557 
                                        #endif
                                        let v2558 : std_string_String = _run_target_args'_v2547 
                                        let v2561 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2562 : string = Fable.Core.RustInterop.emitRustExpr v2558 v2561 
                                        let _run_target_args'_v2503 = v2562 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2563 : string = null |> unbox<string>
                                        let _run_target_args'_v2503 = v2563 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2566 : string = null |> unbox<string>
                                        let _run_target_args'_v2503 = v2566 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2569 : string = null |> unbox<string>
                                        let _run_target_args'_v2503 = v2569 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2572 : string = null |> unbox<string>
                                        let _run_target_args'_v2503 = v2572 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2575 : string = null |> unbox<string>
                                        let _run_target_args'_v2503 = v2575 
                                        #endif
#else
                                        let v2578 : string = v2141 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2503 = v2578 
                                        #endif
                                        let v2579 : string = _run_target_args'_v2503 
                                        let v2584 : string = method231()
                                        let v2585 : string = "pub fn main() -> Result<(), String> "
                                        let v2586 : string = v2585 + v2584 
                                        let v2587 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2620 : string =
                                            if v2587 then
                                                let v2588 : string = ""
                                                v2588
                                            else
                                                let v2589 : string = $"#[near_sdk::near_bindgen]"
                                                let v2590 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v2591 : string = v2589 + v2239 
                                                let v2592 : string = v2591 + v2590 
                                                let v2593 : string = $"pub struct MainState {{"
                                                let v2594 : string = v2592 + v2239 
                                                let v2595 : string = v2594 + v2593 
                                                let v2596 : string = $"}}"
                                                let v2597 : string = v2595 + v2239 
                                                let v2598 : string = v2597 + v2596 
                                                let v2599 : string = $""
                                                let v2600 : string = v2598 + v2239 
                                                let v2601 : string = v2600 + v2599 
                                                let v2602 : string = $"#[near_sdk::near_bindgen]"
                                                let v2603 : string = v2601 + v2239 
                                                let v2604 : string = v2603 + v2602 
                                                let v2605 : string = $"impl MainState {{"
                                                let v2606 : string = v2604 + v2239 
                                                let v2607 : string = v2606 + v2605 
                                                let v2608 : string = $"    pub fn state_main() {{"
                                                let v2609 : string = v2607 + v2239 
                                                let v2610 : string = v2609 + v2608 
                                                let v2611 : string = $"        Spiral::method0();"
                                                let v2612 : string = v2610 + v2239 
                                                let v2613 : string = v2612 + v2611 
                                                let v2614 : string = $"    }}"
                                                let v2615 : string = v2613 + v2239 
                                                let v2616 : string = v2615 + v2614 
                                                let v2617 : string = $"}}"
                                                let v2618 : string = v2616 + v2239 
                                                let v2619 : string = v2618 + v2617 
                                                v2619
                                        let v2621 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2627 : bool =
                                            if v2621 then
                                                let v2622 : string = "Spiral::method0()"
                                                let v2623 : string = v2225 + v2622 
                                                let v2624 : bool = v2579.Contains v2623 
                                                v2624
                                            else
                                                false
                                        let v2630 : string =
                                            if v2627 then
                                                let v2628 : string = $"{v2586} Ok(Spiral::method0()) }}"
                                                v2628
                                            else
                                                let v2629 : string = $"{v2586} Ok(()) }}"
                                                v2629
                                        let v2631 : string = v2620 + v2239 
                                        let v2632 : string = v2631 + v2630 
                                        let v2633 : bool = v2579.Contains v2586 
                                        let v2636 : string = $"{v2579}\n\n{v2632}\n"
                                        let v2735 : string =
                                            if v2633 then
                                                v2579
                                            else
                                                let v2640 : bool =
                                                    match v1702 with
                                                    | US36_0(v2637) -> (* Some *)
                                                        match v2637 with
                                                        | US37_1(v2638) -> (* Contract *)
                                                            true
                                                        | _ ->
                                                            false
                                                    | _ ->
                                                        false
                                                let v2641 : string = "\";\".into()"
                                                let v2642 : string = Fable.Core.RustInterop.emitRustExpr () v2641 
                                                let v2643 : string = "),)"
                                                let v2644 : string = v2643 + v2642 
                                                let v2645 : string = "));"
                                                let v2646 : string = v2636.Replace (v2644, v2645)
                                                let v2647 : string = "\";\".into()"
                                                let v2648 : string = Fable.Core.RustInterop.emitRustExpr () v2647 
                                                let v2649 : string = "},)"
                                                let v2650 : string = v2649 + v2648 
                                                let v2651 : string = "});"
                                                let v2652 : string = v2646.Replace (v2650, v2651)
                                                let v2653 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v2654 : string = " defaultOf::<()>();"
                                                let v2655 : string = method60(v2653, v2654, v2652)
                                                let v2656 : string = "\\s\\sgetZero\\(\\);"
                                                let v2657 : string = " getZero::<()>();"
                                                let v2658 : string = method60(v2656, v2657, v2655)
                                                let v2659 : string = "\"t\".into()"
                                                let v2660 : string = Fable.Core.RustInterop.emitRustExpr () v2659 
                                                let v2661 : string = "(&e.get_Curren"
                                                let v2662 : string = v2661 + v2660 
                                                let v2663 : string = "(e.get_Current"
                                                let v2664 : string = v2658.Replace (v2662, v2663)
                                                let v2665 : string = "\"::<()>()\".into()"
                                                let v2666 : string = Fable.Core.RustInterop.emitRustExpr () v2665 
                                                let v2667 : string = "getNull"
                                                let v2668 : string = v2667 + v2666 
                                                let v2669 : string = "fable_library_rust::Native_::getZero()"
                                                let v2670 : string = v2664.Replace (v2668, v2669)
                                                let v2671 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                let v2672 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                let v2673 : string = method60(v2671, v2672, v2670)
                                                let v2674 : string = "::Slice'_"
                                                let v2675 : string = "::Slice__"
                                                let v2676 : string = v2673.Replace (v2674, v2675)
                                                let v2677 : string = " Slice'_"
                                                let v2678 : string = " Slice__"
                                                let v2679 : string = v2676.Replace (v2677, v2678)
                                                let v2680 : string = "\",\".into()"
                                                let v2681 : string = Fable.Core.RustInterop.emitRustExpr () v2680 
                                                let v2682 : string = "defaultOf()"
                                                let v2683 : string = v2682 + v2681 
                                                let v2684 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v2685 : string = v2679.Replace (v2683, v2684)
                                                let v2686 : string = "\"__.\".into()"
                                                let v2687 : string = Fable.Core.RustInterop.emitRustExpr () v2686 
                                                let v2688 : string = "__self"
                                                let v2689 : string = v2688 + v2687 
                                                let v2690 : string = "self."
                                                let v2691 : string = v2685.Replace (v2689, v2690)
                                                let v2692 : string = "\"_.\".into()"
                                                let v2693 : string = Fable.Core.RustInterop.emitRustExpr () v2692 
                                                let v2694 : string = "_self"
                                                let v2695 : string = v2694 + v2693 
                                                let v2696 : string = v2691.Replace (v2695, v2690)
                                                let v2697 : string = "\"h\".into()"
                                                let v2698 : string = Fable.Core.RustInterop.emitRustExpr () v2697 
                                                let v2699 : string = "get_or_insert_wit"
                                                let v2700 : string = v2699 + v2698 
                                                let v2701 : string = "get_or_init"
                                                let v2702 : string = v2696.Replace (v2700, v2701)
                                                let v2703 : string = "\";\".into()"
                                                let v2704 : string = Fable.Core.RustInterop.emitRustExpr () v2703 
                                                let v2705 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v2706 : string = v2705 + v2704 
                                                let v2707 : string = "type ConcurrentStack_1<T> = T;"
                                                let v2708 : string = v2702.Replace (v2706, v2707)
                                                let v2709 : string = "\";\".into()"
                                                let v2710 : string = Fable.Core.RustInterop.emitRustExpr () v2709 
                                                let v2711 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v2712 : string = v2711 + v2710 
                                                let v2713 : string = "type TimeZoneInfo = i64;"
                                                let v2714 : string = v2708.Replace (v2712, v2713)
                                                let v2715 : string = "\";\".into()"
                                                let v2716 : string = Fable.Core.RustInterop.emitRustExpr () v2715 
                                                let v2717 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v2718 : string = v2717 + v2716 
                                                let v2719 : string = "type TaskCanceledException = ();"
                                                let v2720 : string = v2714.Replace (v2718, v2719)
                                                let v2725 : (string -> string) =
                                                    if v2236 then
                                                        closure89()
                                                    else
                                                        let v2722 : string = "// "
                                                        let v2723 : string = v2722 + v2225 
                                                        closure90(v2225, v2723)
                                                let v2726 : string = v2725 v2720
                                                let v2727 : bool = v2640 = false
                                                let v2733 : (string -> string) =
                                                    if v2727 then
                                                        closure89()
                                                    else
                                                        let v2729 : string = "use fable_library_rust::DateTime_::DateTime"
                                                        let v2730 : string = ";"
                                                        let v2731 : string = v2729 + v2730 
                                                        closure91(v2731)
                                                v2733 v2726
                                        let v2736 : bool = v2633 = false
                                        if v2736 then
                                            method64(v2141, v2735)
                                        let v2737 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2738 : bool = v2737 <> true
                                        let v2741 : string =
                                            if v2738 then
                                                let v2739 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v1913}\""
                                                v2739
                                            else
                                                let v2740 : string = $"cargo run --manifest-path \"{v1913}\""
                                                v2740
                                        let v2742 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2743 : bool = v2742 <> true
                                        let v2754 : (struct (string * string) []) =
                                            if v2743 then
                                                [||]
                                            else
                                                let v2745 : string = "TRACE_LEVEL"
                                                let v2746 : string = "Verbose"
                                                let v2747 : string = "RUSTC_WRAPPER"
                                                let v2748 : string = "sccache"
                                                let v2749 : string = "RUST_BACKTRACE"
                                                let v2750 : string = "full"
                                                let v2751 : string = "RUSTFLAGS"
                                                let v2752 : string = "-C prefer-dynamic"
                                                [|struct (v2745, v2746); struct (v2747, v2748); struct (v2749, v2750); struct (v2751, v2752)|]
                                        let v2755 : System.Threading.CancellationToken option = None
                                        let v2756 : (struct (string * string) []) = [||]
                                        let v2757 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2758 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2759 : string option = None
                                        let v2765 : Result<string, string> =
                                            match v1833 with
                                            | US13_1(v2762) -> (* Error *)
                                                let v2763 : Result<string, string> = Error v2762 
                                                v2763
                                            | US13_0(v2760) -> (* Ok *)
                                                let v2761 : Result<string, string> = Ok v2760 
                                                v2761
                                        (* run_target_args'
                                        let v2766 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2767 : string = "$0.ok()"
                                        let v2768 : string option = Fable.Core.RustInterop.emitRustExpr v2765 v2767 
                                        let _run_target_args'_v2766 = v2768 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2769 : string = "$0.ok()"
                                        let v2770 : string option = Fable.Core.RustInterop.emitRustExpr v2765 v2769 
                                        let _run_target_args'_v2766 = v2770 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2771 : string = "$0.ok()"
                                        let v2772 : string option = Fable.Core.RustInterop.emitRustExpr v2765 v2771 
                                        let _run_target_args'_v2766 = v2772 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2773 : string option = match v2765 with Ok x -> Some x | Error _ -> None
                                        let _run_target_args'_v2766 = v2773 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2774 : string option = match v2765 with Ok x -> Some x | Error _ -> None
                                        let _run_target_args'_v2766 = v2774 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2775 : string option = match v2765 with Ok x -> Some x | Error _ -> None
                                        let _run_target_args'_v2766 = v2775 
                                        #endif
#else
                                        let v2776 : string option = match v2765 with Ok x -> Some x | Error _ -> None
                                        let _run_target_args'_v2766 = v2776 
                                        #endif
                                        let v2777 : string option = _run_target_args'_v2766 
                                        let v2780 : bool = true
                                        let struct (v2781 : int32, v2782 : string) = method89(v2741, v2755, v2754, v2757, v2758, v2780, v2777)
                                        let v2783 : bool =
                                            match v1702 with
                                            | US36_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v3018 : US5, v3019 : US5, v3020 : US5, v3021 : US5) =
                                            if v2783 then
                                                let v2784 : int32 = v2754.Length
                                                let v2785 : (string []) = Array.zeroCreate<string> (v2784)
                                                let v2786 : Mut5 = {l0 = 0} : Mut5
                                                while method93(v2784, v2786) do
                                                    let v2788 : int32 = v2786.l0
                                                    let struct (v2789 : string, v2790 : string) = v2754.[int v2788]
                                                    let v2791 : string = $"$env:{v2789}=''{v2790}''"
                                                    v2785.[int v2788] <- v2791
                                                    let v2792 : int32 = v2788 + 1
                                                    v2786.l0 <- v2792
                                                    ()
                                                let v2793 : string seq = v2785 |> Seq.ofArray
                                                let v2796 : (string -> (string seq -> string)) = String.concat
                                                let v2797 : string = ";"
                                                let v2798 : (string seq -> string) = v2796 v2797
                                                let v2799 : string = v2798 v2793
                                                let v2802 : (string []) = [|v2799; v2741|]
                                                let v2803 : string seq = v2802 |> Seq.ofArray
                                                let v2806 : (string -> (string seq -> string)) = String.concat
                                                let v2807 : (string seq -> string) = v2806 v2797
                                                let v2808 : string = v2807 v2803
                                                let v2811 : string = $"pwsh -c '{v2808}'"
                                                let v2812 : bool = v2781 <> 0 
                                                let struct (v2882 : US5, v2883 : US5, v2884 : US5, v2885 : US5) =
                                                    if v2812 then
                                                        let v2815 : unit = ()
                                                        let v2816 : (unit -> unit) = closure92(v1591, v2141, v2782, v2781, v2811)
                                                        let v2817 : unit = (fun () -> v2816 (); v2815) ()
                                                        let v2857 : US5 = US5_0(v1784)
                                                        let v2858 : US5 = US5_1
                                                        let v2859 : US5 = US5_1
                                                        let v2860 : US5 = US5_1
                                                        struct (v2857, v2858, v2859, v2860)
                                                    else
                                                        let v2861 : (string -> US5) = closure71()
                                                        let v2862 : (unit -> string) = closure93(v2782)
                                                        let v2863 : (exn -> US5) = closure95(v2141, v2782, v2811)
                                                        let v2864 : US5 = US5_1
                                                        let result = ref v2864
                                                        try
                                                            result.Value <- v2862 () |> v2861 
                                                        with ex ->
                                                            result.Value <- v2863 ex 
                                                        let v2865 : US5 = result.Value
                                                        let v2875 : string option =
                                                            match v2865 with
                                                            | US5_1 -> (* None *)
                                                                let v2873 : string option = None
                                                                v2873
                                                            | US5_0(v2869) -> (* Some *)
                                                                let v2870 : string option = Some v2869 
                                                                v2870
                                                        let v2876 : string = "$0.unwrap()"
                                                        let v2877 : string = Fable.Core.RustInterop.emitRustExpr v2875 v2876 
                                                        let v2878 : US5 = US5_0(v1784)
                                                        let v2879 : US5 = US5_0(v2735)
                                                        let v2880 : US5 = US5_0(v2141)
                                                        let v2881 : US5 = US5_0(v2877)
                                                        struct (v2878, v2879, v2880, v2881)
                                                struct (v2882, v2883, v2884, v2885)
                                            else
                                                let v2886 : string = $"target/spiral/{v1848}/target/wasm32-unknown-unknown/release/spiral_{v1786}.wasm"
                                                let v2893 : string =
                                                    match v1702 with
                                                    | US36_0(v2887) -> (* Some *)
                                                        match v2887 with
                                                        | US37_1(v2889) -> (* Contract *)
                                                            v2889
                                                        | US37_0(v2888) -> (* Wasm *)
                                                            v2888
                                                    | _ ->
                                                        let v2892 : string = ""
                                                        v2892
                                                let v2894 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v2886} -t Debug {v2893}'"
                                                let v2895 : string = "AUTOMATION"
                                                let v2896 : string = method3(v2895)
                                                let v2897 : string = "scripts/invoke-block.ps1"
                                                let v2898 : string = $"pwsh -c \"pwsh {v2897} {v2894} -Linux -EnvironmentVariables AUTOMATION={v2896}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                let v2899 : bool = v2781 = 0
                                                let struct (v3014 : US5, v3015 : US5, v3016 : US5, v3017 : US5) =
                                                    if v2899 then
                                                        let v2900 : System.Threading.CancellationToken option = None
                                                        let v2901 : (struct (string * string) []) = [||]
                                                        let v2902 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v2903 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v2904 : string option = None
                                                        let v2905 : string option = Some v1847 
                                                        let v2908 : bool = true
                                                        let struct (v2909 : int32, v2910 : string) = method89(v2898, v2900, v2901, v2902, v2903, v2908, v2905)
                                                        let v2911 : bool = v2909 = 0
                                                        let struct (v2963 : US5, v2964 : US5, v2965 : US5, v2966 : US5) =
                                                            if v2911 then
                                                                let v2912 : US5 = US5_0(v1784)
                                                                let v2913 : US5 = US5_0(v2735)
                                                                let v2914 : US5 = US5_0(v2141)
                                                                let v2915 : US5 = US5_0(v2910)
                                                                struct (v2912, v2913, v2914, v2915)
                                                            else
                                                                let v2916 : unit = ()
                                                                let v2917 : (unit -> unit) = closure97(v1591, v2141, v2782, v2910, v2909)
                                                                let v2918 : unit = (fun () -> v2917 (); v2916) ()
                                                                let v2959 : US5 = US5_0(v1784)
                                                                let v2960 : US5 = US5_1
                                                                let v2961 : US5 = US5_1
                                                                let v2962 : US5 = US5_1
                                                                struct (v2959, v2960, v2961, v2962)
                                                        struct (v2963, v2964, v2965, v2966)
                                                    else
                                                        let v2967 : unit = ()
                                                        let v2968 : (unit -> unit) = closure98(v1591, v2141, v2782, v2781, v2886, v2898)
                                                        let v2969 : unit = (fun () -> v2968 (); v2967) ()
                                                        let v3010 : US5 = US5_0(v1784)
                                                        let v3011 : US5 = US5_1
                                                        let v3012 : US5 = US5_1
                                                        let v3013 : US5 = US5_1
                                                        struct (v3010, v3011, v3012, v3013)
                                                struct (v3014, v3015, v3016, v3017)
                                        if v1591 then
                                            let v3022 : bool =
                                                match v1702 with
                                                | US36_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3023 : bool = v3022 <> true
                                            let v3026 : string =
                                                if v3023 then
                                                    let v3024 : string = "wasm32-unknown-unknown/release"
                                                    v3024
                                                else
                                                    let v3025 : string = "debug"
                                                    v3025
                                            let v3027 : string = ""
                                            let v3028 : string = $"target/{v3026}/spiral_{v1786}{v3027}"
                                            let v3029 : string = method30(v1859, v3028)
                                            let v3030 : string = ".wasm"
                                            let v3031 : string = $"target/{v3026}/spiral_{v1786}{v3030}"
                                            let v3032 : string = method30(v1859, v3031)
                                            let v3033 : string = ".pdb"
                                            let v3034 : string = $"target/{v3026}/spiral_{v1786}{v3033}"
                                            let v3035 : string = method30(v1859, v3034)
                                            let v3036 : string = ".exe"
                                            let v3037 : string = $"target/{v3026}/spiral_{v1786}{v3036}"
                                            let v3038 : string = method30(v1859, v3037)
                                            let v3039 : string = ".d"
                                            let v3040 : string = $"target/{v3026}/spiral_{v1786}{v3039}"
                                            let v3041 : string = method30(v1859, v3040)
                                            let v3042 : bool = method32(v3029)
                                            let v3043 : bool = method32(v3032)
                                            let v3044 : bool = method32(v3035)
                                            let v3045 : bool = method32(v3038)
                                            let v3046 : bool = method32(v3041)
                                            let v3047 : unit = ()
                                            let v3048 : (unit -> unit) = closure99(v2141, v3041, v3046, v3038, v3045, v3035, v3044, v3032, v3043, v3029, v3042)
                                            let v3049 : unit = (fun () -> v3048 (); v3047) ()
                                            let v3092 : UH4 =
                                                if v3042 then
                                                    let v3089 : UH4 = UH4_0
                                                    UH4_1(v3029, v3042, v3089)
                                                else
                                                    UH4_0
                                            let v3094 : UH4 =
                                                if v3043 then
                                                    UH4_1(v3032, v3043, v3092)
                                                else
                                                    v3092
                                            let v3096 : UH4 =
                                                if v3044 then
                                                    UH4_1(v3035, v3044, v3094)
                                                else
                                                    v3094
                                            let v3098 : UH4 =
                                                if v3045 then
                                                    UH4_1(v3038, v3045, v3096)
                                                else
                                                    v3096
                                            let v3100 : UH4 =
                                                if v3046 then
                                                    UH4_1(v3041, v3046, v3098)
                                                else
                                                    v3098
                                            method242(v3100)
                                        struct (v3018, v3019, v3020, v3021)
                                struct (v3101, v3102, v3103, v3104)
                            else
                                let v3105 : string = "fable_library_rust::String_::fromString($0)"
                                let v3106 : string = Fable.Core.RustInterop.emitRustExpr v29 v3105 
                                let v3107 : bool = v3106 = "typescript"
                                let struct (v4563 : US5, v4564 : US5, v4565 : US5, v4566 : US5) =
                                    if v3107 then
                                        let v3108 : string = method171()
                                        (* run_target_args'
                                        let v3109 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3110 : string = "&*$0"
                                        let v3111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3108 v3110 
                                        let _run_target_args'_v3109 = v3111 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3112 : string = "&*$0"
                                        let v3113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3108 v3112 
                                        let _run_target_args'_v3109 = v3113 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3114 : string = "&*$0"
                                        let v3115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3108 v3114 
                                        let _run_target_args'_v3109 = v3115 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3116 : Ref<Str> = v3108 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3109 = v3116 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3119 : Ref<Str> = v3108 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3109 = v3119 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3122 : Ref<Str> = v3108 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3109 = v3122 
                                        #endif
#else
                                        let v3125 : Ref<Str> = v3108 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3109 = v3125 
                                        #endif
                                        let v3128 : Ref<Str> = _run_target_args'_v3109 
                                        let v3133 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                        let v3134 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v3128) v3133 
                                        let v3135 : (std_string_String -> US7) = method23()
                                        let v3136 : US7 option = v3134 |> Option.map v3135 
                                        let v3147 : US7 = US7_1
                                        let v3148 : US7 = v3136 |> Option.defaultValue v3147 
                                        let v3155 : std_string_String =
                                            match v3148 with
                                            | US7_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US7_0(v3152) -> (* Some *)
                                                v3152
                                        let v3156 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3157 : string = Fable.Core.RustInterop.emitRustExpr v3155 v3156 
                                        let v3158 : string = method25()
                                        (* run_target_args'
                                        let v3159 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3160 : string = "&*$0"
                                        let v3161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3158 v3160 
                                        let _run_target_args'_v3159 = v3161 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3162 : string = "&*$0"
                                        let v3163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3158 v3162 
                                        let _run_target_args'_v3159 = v3163 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3164 : string = "&*$0"
                                        let v3165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3158 v3164 
                                        let _run_target_args'_v3159 = v3165 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3166 : Ref<Str> = v3158 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3159 = v3166 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3169 : Ref<Str> = v3158 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3159 = v3169 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3172 : Ref<Str> = v3158 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3159 = v3172 
                                        #endif
#else
                                        let v3175 : Ref<Str> = v3158 |> unbox<Ref<Str>>
                                        let _run_target_args'_v3159 = v3175 
                                        #endif
                                        let v3178 : Ref<Str> = _run_target_args'_v3159 
                                        let v3183 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                        let v3184 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v30, v3178) v3183 
                                        let v3185 : (Vec<std_string_String> -> US11) = method26()
                                        let v3186 : US11 option = v3184 |> Option.map v3185 
                                        let v3197 : US11 = US11_1
                                        let v3198 : US11 = v3186 |> Option.defaultValue v3197 
                                        let v3202 : (std_string_String []) = [||]
                                        let v3203 : string = "$0.to_vec()"
                                        let v3204 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3202 v3203 
                                        let v3207 : Vec<std_string_String> =
                                            match v3198 with
                                            | US11_1 -> (* None *)
                                                v3204
                                            | US11_0(v3205) -> (* Some *)
                                                v3205
                                        (* run_target_args'
                                        let v3208 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v3209 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3210 : string = "std::fs::read(&*$0)"
                                        let v3211 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3157 v3210 
                                        (* run_target_args'
                                        let v3212 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3213 : string = "$0.unwrap()"
                                        let v3214 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3211 v3213 
                                        let _run_target_args'_v3212 = v3214 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3215 : string = "$0.unwrap()"
                                        let v3216 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3211 v3215 
                                        let _run_target_args'_v3212 = v3216 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3217 : string = "$0.unwrap()"
                                        let v3218 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3211 v3217 
                                        let _run_target_args'_v3212 = v3218 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3219 : Vec<uint8> = match v3211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3212 = v3219 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3220 : Vec<uint8> = match v3211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3212 = v3220 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3221 : Vec<uint8> = match v3211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3212 = v3221 
                                        #endif
#else
                                        let v3222 : Vec<uint8> = match v3211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3212 = v3222 
                                        #endif
                                        let v3223 : Vec<uint8> = _run_target_args'_v3212 
                                        let _run_target_args'_v3209 = v3223 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3226 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3209 = v3226 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3229 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3209 = v3229 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3232 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3209 = v3232 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3235 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3209 = v3235 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3209 = v3238 
                                        #endif
#else
                                        let v3241 : (uint8 []) = v3157 |> System.IO.File.ReadAllBytes
                                        let v3242 : string = "$0.to_vec()"
                                        let v3243 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3241 v3242 
                                        let _run_target_args'_v3209 = v3243 
                                        #endif
                                        let v3244 : Vec<uint8> = _run_target_args'_v3209 
                                        let v3249 : Vec<uint8> = method27(v3244)
                                        let v3250 : string = "std::string::String::from_utf8($0)"
                                        let v3251 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3249 v3250 
                                        (* run_target_args'
                                        let v3252 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3253 : string = "$0.unwrap()"
                                        let v3254 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3251 v3253 
                                        let _run_target_args'_v3252 = v3254 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3255 : string = "$0.unwrap()"
                                        let v3256 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3251 v3255 
                                        let _run_target_args'_v3252 = v3256 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3257 : string = "$0.unwrap()"
                                        let v3258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3251 v3257 
                                        let _run_target_args'_v3252 = v3258 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3259 : std_string_String = match v3251 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3252 = v3259 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3260 : std_string_String = match v3251 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3252 = v3260 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3261 : std_string_String = match v3251 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3252 = v3261 
                                        #endif
#else
                                        let v3262 : std_string_String = match v3251 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3252 = v3262 
                                        #endif
                                        let v3263 : std_string_String = _run_target_args'_v3252 
                                        let v3266 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3267 : string = Fable.Core.RustInterop.emitRustExpr v3263 v3266 
                                        let _run_target_args'_v3208 = v3267 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3268 : string = null |> unbox<string>
                                        let _run_target_args'_v3208 = v3268 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3271 : string = null |> unbox<string>
                                        let _run_target_args'_v3208 = v3271 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3274 : string = null |> unbox<string>
                                        let _run_target_args'_v3208 = v3274 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3277 : string = null |> unbox<string>
                                        let _run_target_args'_v3208 = v3277 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3280 : string = null |> unbox<string>
                                        let _run_target_args'_v3208 = v3280 
                                        #endif
#else
                                        let v3283 : string = v3157 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v3208 = v3283 
                                        #endif
                                        let v3284 : string = _run_target_args'_v3208 
                                        let v3289 : string = "ts"
                                        let v3290 : string = $"%A{struct (v3289, v3284)}"
                                        let v3293 : string = method196(v3290)
                                        let v3294 : string = method28()
                                        let v3295 : US5 = method29(v3294)
                                        let v3301 : US5 =
                                            match v3295 with
                                            | US5_1 -> (* None *)
                                                let v3298 : string = __SOURCE_DIRECTORY__
                                                method29(v3298)
                                            | US5_0(v3296) -> (* Some *)
                                                US5_0(v3296)
                                        let v3307 : US5 =
                                            match v3301 with
                                            | US5_1 -> (* None *)
                                                let v3304 : string = "/workspaces"
                                                method29(v3304)
                                            | US5_0(v3302) -> (* Some *)
                                                US5_0(v3302)
                                        let v3311 : string =
                                            match v3307 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3308) -> (* Some *)
                                                v3308
                                        let v3312 : string = method49(v3311)
                                        let v3313 : bool = "deps" = v3312
                                        let v3323 : string =
                                            if v3313 then
                                                let v3314 : string option = method35(v3311)
                                                let v3315 : string = v3314 |> Option.get
                                                let v3318 : US5 = method29(v3315)
                                                match v3318 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v3319) -> (* Some *)
                                                    v3319
                                            else
                                                v3311
                                        let v3324 : string = "polyglot"
                                        let v3325 : string = method30(v3323, v3324)
                                        let v3326 : string = method28()
                                        let v3327 : (unit -> string) = v3326.ToLower
                                        let v3328 : string = v3327 ()
                                        let v3331 : (unit -> string) = v3325.ToLower
                                        let v3332 : string = v3331 ()
                                        let v3335 : bool = v3328.StartsWith (v3332, false, null)
                                        let v3340 : US13 =
                                            if v3335 then
                                                US13_1(v3332)
                                            else
                                                US13_0(v3332)
                                        let v3346 : Result<string, string> =
                                            match v3340 with
                                            | US13_1(v3343) -> (* Error *)
                                                let v3344 : Result<string, string> = Error v3343 
                                                v3344
                                            | US13_0(v3341) -> (* Ok *)
                                                let v3342 : Result<string, string> = Ok v3341 
                                                v3342
                                        let v3347 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                        let v3348 : bool = Fable.Core.RustInterop.emitRustExpr v3346 v3347 
                                        let v3349 : string = "x"
                                        let v3350 : string = Fable.Core.RustInterop.emitRustExpr () v3349 
                                        let v3351 : string = "true; $0 })"
                                        let v3352 : bool = Fable.Core.RustInterop.emitRustExpr v3350 v3351 
                                        let v3353 : string = "_result_unwrap_or_else"
                                        let v3354 : string = Fable.Core.RustInterop.emitRustExpr () v3353 
                                        let v3355 : string = "spiral"
                                        let v3356 : US38 = US38_1
                                        let v3357 : US39 = US39_0(v3356)
                                        let v3358 : US5 = US5_0(v3293)
                                        let v3359 : string = method199(v3358, v3355, v3357, v3354)
                                        let v3360 : string = "Fable.Core"
                                        let v3361 : UH2 = UH2_0
                                        let v3362 : UH2 = UH2_1(v3360, v3361)
                                        let v3363 : UH2 = UH2_0
                                        let v3364 : string = method200(v3284, v3355, v3363, v3362, v3359, v3354)
                                        let v3365 : string = "lib/typescript/fable/fable_modules"
                                        let v3366 : string = method30(v3354, v3365)
                                        let v3367 : string = $"fable-library-{v3289}"
                                        let v3368 : string = method247(v3367)
                                        let v3369 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v3370 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v3366 v3369 
                                        let v3371 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                        let v3372 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure103(v3367)
                                        let v3373 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v3370, v3372) v3371 
                                        let v3374 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method251(v3368)
                                        let v3375 : string = "futures::stream::StreamExt::filter_map(v3373, |x| async { v3374(x) })"
                                        let v3376 : _ = Fable.Core.RustInterop.emitRustExpr () v3375 
                                        let v3377 : string = "Box::pin(futures::stream::StreamExt::collect(v3376))"
                                        let v3378 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v3377 
                                        let v3379 : string = "v3378.await"
                                        let v3380 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3379 
                                        let v3381 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v3382 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3380 v3381 
                                        let v3383 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v3384 : (struct (string * string) -> struct (string * string)) = closure111()
                                        let v3385 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v3382, v3384) v3383 
                                        let v3386 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v3387 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3385 v3386 
                                        let v3388 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                        let v3389 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v3387 v3388 
                                        let v3390 : struct (string * string) option = v3389 |> Array.tryItem 0 
                                        let v3391 : (struct (string * string) -> US48) = method256()
                                        let v3392 : US48 option = v3390 |> Option.map v3391 
                                        let v3404 : US48 = US48_1
                                        let v3405 : US48 = v3392 |> Option.defaultValue v3404 
                                        let v3409 : unit = ()
                                        let v3410 : (unit -> unit) = closure113(v3405)
                                        let v3411 : unit = (fun () -> v3410 (); v3409) ()
                                        method259(v3359, v3366, v3405)
                                        let v3451 : US36 = US36_1
                                        let struct (v3452 : int32, v3453 : string) = method209(v3451, v3359, v3289, v3364, v3340)
                                        method259(v3359, v3366, v3405)
                                        let v3454 : bool = v3452 <> 0 
                                        let struct (v3869 : US5, v3870 : US5, v3871 : US5, v3872 : US5) =
                                            if v3454 then
                                                let v3457 : unit = ()
                                                let v3458 : (unit -> unit) = closure114(v3453, v3452)
                                                let v3459 : unit = (fun () -> v3458 (); v3457) ()
                                                let v3499 : US5 = US5_0(v3289)
                                                let v3500 : US5 = US5_1
                                                let v3501 : US5 = US5_1
                                                let v3502 : US5 = US5_0(v3453)
                                                struct (v3499, v3500, v3501, v3502)
                                            else
                                                let v3503 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                let v3504 : bool = Fable.Core.RustInterop.emitRustExpr v3207 v3503 
                                                let v3505 : string = "x"
                                                let v3506 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3505 
                                                let v3507 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3508 : string = Fable.Core.RustInterop.emitRustExpr v3506 v3507 
                                                let v3509 : string = "="
                                                let v3510 : bool = v3508.Contains v3509 
                                                let v3514 : string =
                                                    if v3510 then
                                                        v3508
                                                    else
                                                        let v3513 : string = $"\"{v3508}\":\"*\""
                                                        v3513
                                                let v3515 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v3516 : bool = Fable.Core.RustInterop.emitRustExpr v3514 v3515 
                                                let v3517 : string = "_vec_map"
                                                let v3518 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3517 
                                                let v3519 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                let v3520 : (string []) = Fable.Core.RustInterop.emitRustExpr v3518 v3519 
                                                let v3521 : unit = ()
                                                let _let'_v3521 =
                                                    seq {
                                                        for i = 0 to v3520.Length - 1 do yield v3520.[i]
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    }
                                                    (* indent
                                                    ()
                                                indent *)
                                                let v3524 : string seq = _let'_v3521 
                                                let v3530 : (string -> (string seq -> string)) = String.concat
                                                let v3531 : string = ",\n"
                                                let v3532 : (string seq -> string) = v3530 v3531
                                                let v3533 : string = v3532 v3524
                                                let v3536 : string = $"{{"
                                                let v3537 : string = $"  \"name\": \"spiral_{v3293}\","
                                                let v3538 : string = v3536 + v3537 
                                                let v3539 : string = $"  \"dependencies\": {{"
                                                let v3540 : string = v3538 + v3539 
                                                let v3541 : string = v3540 + v3533 
                                                let v3542 : string = $"  }},"
                                                let v3543 : string = v3541 + v3542 
                                                let v3544 : string = $"    \"devDependencies\": {{"
                                                let v3545 : string = v3543 + v3544 
                                                let v3546 : string = $"  }},"
                                                let v3547 : string = v3545 + v3546 
                                                let v3548 : string = $"}}"
                                                let v3549 : string = v3547 + v3548 
                                                let v3550 : string = "package.json"
                                                let v3551 : string = method30(v3359, v3550)
                                                let v3552 : string = "../.."
                                                let v3553 : string = method30(v3359, v3552)
                                                let v3554 : string = method30(v3553, v3550)
                                                method64(v3551, v3549)
                                                let v3555 : string = ""
                                                method64(v3554, v3555)
                                                let v3556 : string = $"{v3355}.{v3289}"
                                                let v3557 : string = method30(v3359, v3556)
                                                let v3558 : unit = ()
                                                let v3559 : (unit -> unit) = closure115(v3557)
                                                let v3560 : unit = (fun () -> v3559 (); v3558) ()
                                                (* run_target_args'
                                                let v3600 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3601 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3602 : string = "std::fs::read(&*$0)"
                                                let v3603 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3557 v3602 
                                                (* run_target_args'
                                                let v3604 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3605 : string = "$0.unwrap()"
                                                let v3606 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3603 v3605 
                                                let _run_target_args'_v3604 = v3606 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3607 : string = "$0.unwrap()"
                                                let v3608 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3603 v3607 
                                                let _run_target_args'_v3604 = v3608 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3609 : string = "$0.unwrap()"
                                                let v3610 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3603 v3609 
                                                let _run_target_args'_v3604 = v3610 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3611 : Vec<uint8> = match v3603 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3604 = v3611 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3612 : Vec<uint8> = match v3603 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3604 = v3612 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3613 : Vec<uint8> = match v3603 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3604 = v3613 
                                                #endif
#else
                                                let v3614 : Vec<uint8> = match v3603 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3604 = v3614 
                                                #endif
                                                let v3615 : Vec<uint8> = _run_target_args'_v3604 
                                                let _run_target_args'_v3601 = v3615 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3618 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3601 = v3618 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3621 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3601 = v3621 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3624 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3601 = v3624 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3627 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3601 = v3627 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3630 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3601 = v3630 
                                                #endif
#else
                                                let v3633 : (uint8 []) = v3557 |> System.IO.File.ReadAllBytes
                                                let v3634 : string = "$0.to_vec()"
                                                let v3635 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3633 v3634 
                                                let _run_target_args'_v3601 = v3635 
                                                #endif
                                                let v3636 : Vec<uint8> = _run_target_args'_v3601 
                                                let v3641 : Vec<uint8> = method27(v3636)
                                                let v3642 : string = "std::string::String::from_utf8($0)"
                                                let v3643 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3641 v3642 
                                                (* run_target_args'
                                                let v3644 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3645 : string = "$0.unwrap()"
                                                let v3646 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3643 v3645 
                                                let _run_target_args'_v3644 = v3646 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3647 : string = "$0.unwrap()"
                                                let v3648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3643 v3647 
                                                let _run_target_args'_v3644 = v3648 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3649 : string = "$0.unwrap()"
                                                let v3650 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3643 v3649 
                                                let _run_target_args'_v3644 = v3650 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3651 : std_string_String = match v3643 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3644 = v3651 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3652 : std_string_String = match v3643 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3644 = v3652 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3653 : std_string_String = match v3643 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3644 = v3653 
                                                #endif
#else
                                                let v3654 : std_string_String = match v3643 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3644 = v3654 
                                                #endif
                                                let v3655 : std_string_String = _run_target_args'_v3644 
                                                let v3658 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3659 : string = Fable.Core.RustInterop.emitRustExpr v3655 v3658 
                                                let _run_target_args'_v3600 = v3659 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3660 : string = null |> unbox<string>
                                                let _run_target_args'_v3600 = v3660 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3663 : string = null |> unbox<string>
                                                let _run_target_args'_v3600 = v3663 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3666 : string = null |> unbox<string>
                                                let _run_target_args'_v3600 = v3666 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3669 : string = null |> unbox<string>
                                                let _run_target_args'_v3600 = v3669 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3672 : string = null |> unbox<string>
                                                let _run_target_args'_v3600 = v3672 
                                                #endif
#else
                                                let v3675 : string = v3557 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3600 = v3675 
                                                #endif
                                                let v3676 : string = _run_target_args'_v3600 
                                                let v3681 : string = "// spiral.process_typescript"
                                                let v3682 : bool = v3676.Contains v3681 
                                                let v3691 : string =
                                                    if v3682 then
                                                        v3676
                                                    else
                                                        let v3685 : string = $"\"./fable_modules/fable-library-ts.{v3405}/"
                                                        let v3686 : string = $"\"{v3354}/lib/typescript/fable/fable_modules/fable-library-ts.{v3405}/"
                                                        let v3687 : string = v3676.Replace (v3685, v3686)
                                                        let v3688 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v3689 : string = " defaultOf::<()>();"
                                                        method60(v3688, v3689, v3687)
                                                let v3692 : bool = v3682 = false
                                                if v3692 then
                                                    let v3693 : string = $"{v3691}\n\n{v3681}\n"
                                                    method64(v3557, v3693)
                                                let v3694 : string = $"bun run \"{v3557}\""
                                                let v3695 : string = "PATH"
                                                let v3696 : string = method3(v3695)
                                                let v3697 : bool = v3696 = ""
                                                let v3732 : US5 =
                                                    if v3697 then
                                                        US5_1
                                                    else
                                                        (* run_target_args'
                                                        let v3699 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3700 : string = "cfg!(windows)"
                                                        let v3701 : bool = Fable.Core.RustInterop.emitRustExpr () v3700 
                                                        let _run_target_args'_v3699 = v3701 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3702 : string = "cfg!(windows)"
                                                        let v3703 : bool = Fable.Core.RustInterop.emitRustExpr () v3702 
                                                        let _run_target_args'_v3699 = v3703 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3704 : string = "cfg!(windows)"
                                                        let v3705 : bool = Fable.Core.RustInterop.emitRustExpr () v3704 
                                                        let _run_target_args'_v3699 = v3705 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3706 : US3 = US3_0
                                                        let v3707 : US4 = US4_3(v3706)
                                                        let v3708 : string = $"platform.is_windows / target: {v3707}"
                                                        let v3709 : bool = failwith<bool> v3708
                                                        let _run_target_args'_v3699 = v3709 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3710 : US3 = US3_0
                                                        let v3711 : US4 = US4_4(v3710)
                                                        let v3712 : string = $"platform.is_windows / target: {v3711}"
                                                        let v3713 : bool = failwith<bool> v3712
                                                        let _run_target_args'_v3699 = v3713 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3714 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3715 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3716 : bool = v3715 v3714
                                                        let _run_target_args'_v3699 = v3716 
                                                        #endif
#else
                                                        let v3717 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3718 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3719 : bool = v3718 v3717
                                                        let _run_target_args'_v3699 = v3719 
                                                        #endif
                                                        let v3720 : bool = _run_target_args'_v3699 
                                                        let v3728 : string =
                                                            if v3720 then
                                                                let v3726 : string = ";"
                                                                v3726
                                                            else
                                                                let v3727 : string = ":"
                                                                v3727
                                                        let v3729 : string = "~/.bun/bin"
                                                        let v3730 : string = $"{v3729}{v3728}{v3696}"
                                                        US5_0(v3730)
                                                let v3738 : UH5 =
                                                    match v3732 with
                                                    | US5_1 -> (* None *)
                                                        UH5_0
                                                    | US5_0(v3733) -> (* Some *)
                                                        let v3734 : UH5 = UH5_0
                                                        UH5_1(v3695, v3733, v3734)
                                                let v3739 : string = "TRACE_LEVEL"
                                                let v3740 : string = "Verbose"
                                                let v3741 : UH5 = UH5_0
                                                let v3742 : UH5 = UH5_1(v3739, v3740, v3741)
                                                let v3743 : UH5 = method263(v3738, v3742)
                                                let v3744 : struct (string * string) list = []
                                                let v3745 : struct (string * string) list = method264(v3743, v3744)
                                                let v3746 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v3747 : (struct (string * string) []) = v3746 v3745
                                                let v3750 : System.Threading.CancellationToken option = None
                                                let v3751 : (struct (string * string) []) = [||]
                                                let v3752 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v3753 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v3754 : string option = None
                                                let v3760 : Result<string, string> =
                                                    match v3340 with
                                                    | US13_1(v3757) -> (* Error *)
                                                        let v3758 : Result<string, string> = Error v3757 
                                                        v3758
                                                    | US13_0(v3755) -> (* Ok *)
                                                        let v3756 : Result<string, string> = Ok v3755 
                                                        v3756
                                                (* run_target_args'
                                                let v3761 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3762 : string = "$0.ok()"
                                                let v3763 : string option = Fable.Core.RustInterop.emitRustExpr v3760 v3762 
                                                let _run_target_args'_v3761 = v3763 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3764 : string = "$0.ok()"
                                                let v3765 : string option = Fable.Core.RustInterop.emitRustExpr v3760 v3764 
                                                let _run_target_args'_v3761 = v3765 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3766 : string = "$0.ok()"
                                                let v3767 : string option = Fable.Core.RustInterop.emitRustExpr v3760 v3766 
                                                let _run_target_args'_v3761 = v3767 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3768 : string option = match v3760 with Ok x -> Some x | Error _ -> None
                                                let _run_target_args'_v3761 = v3768 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3769 : string option = match v3760 with Ok x -> Some x | Error _ -> None
                                                let _run_target_args'_v3761 = v3769 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3770 : string option = match v3760 with Ok x -> Some x | Error _ -> None
                                                let _run_target_args'_v3761 = v3770 
                                                #endif
#else
                                                let v3771 : string option = match v3760 with Ok x -> Some x | Error _ -> None
                                                let _run_target_args'_v3761 = v3771 
                                                #endif
                                                let v3772 : string option = _run_target_args'_v3761 
                                                let v3775 : bool = true
                                                let struct (v3776 : int32, v3777 : string) = method89(v3694, v3750, v3747, v3752, v3753, v3775, v3772)
                                                let v3778 : int32 = v3747.Length
                                                let v3779 : (string []) = Array.zeroCreate<string> (v3778)
                                                let v3780 : Mut5 = {l0 = 0} : Mut5
                                                while method93(v3778, v3780) do
                                                    let v3782 : int32 = v3780.l0
                                                    let struct (v3783 : string, v3784 : string) = v3747.[int v3782]
                                                    let v3785 : string = $"$env:{v3783}=''{v3784}''"
                                                    v3779.[int v3782] <- v3785
                                                    let v3786 : int32 = v3782 + 1
                                                    v3780.l0 <- v3786
                                                    ()
                                                let v3787 : string seq = v3779 |> Seq.ofArray
                                                let v3790 : (string -> (string seq -> string)) = String.concat
                                                let v3791 : string = ";"
                                                let v3792 : (string seq -> string) = v3790 v3791
                                                let v3793 : string = v3792 v3787
                                                let v3796 : string = $"pwsh -c '{v3793}; {v3694}'"
                                                let v3797 : bool = v3776 = 0
                                                let struct (v3865 : US5, v3866 : US5, v3867 : US5, v3868 : US5) =
                                                    if v3797 then
                                                        let v3798 : (string -> US5) = closure71()
                                                        let v3799 : (unit -> string) = closure116(v3777)
                                                        let v3800 : (exn -> US5) = closure117(v3557, v3777, v3796)
                                                        let v3801 : US5 = US5_1
                                                        let result = ref v3801
                                                        try
                                                            result.Value <- v3799 () |> v3798 
                                                        with ex ->
                                                            result.Value <- v3800 ex 
                                                        let v3802 : US5 = result.Value
                                                        let v3812 : string option =
                                                            match v3802 with
                                                            | US5_1 -> (* None *)
                                                                let v3810 : string option = None
                                                                v3810
                                                            | US5_0(v3806) -> (* Some *)
                                                                let v3807 : string option = Some v3806 
                                                                v3807
                                                        let v3813 : string = "$0.unwrap()"
                                                        let v3814 : string = Fable.Core.RustInterop.emitRustExpr v3812 v3813 
                                                        let v3815 : US5 = US5_0(v3289)
                                                        let v3816 : US5 = US5_0(v3691)
                                                        let v3817 : US5 = US5_0(v3557)
                                                        let v3818 : US5 = US5_0(v3814)
                                                        struct (v3815, v3816, v3817, v3818)
                                                    else
                                                        let v3819 : unit = ()
                                                        let v3820 : (unit -> unit) = closure119(v3557, v3777, v3776, v3796)
                                                        let v3821 : unit = (fun () -> v3820 (); v3819) ()
                                                        let v3861 : US5 = US5_0(v3289)
                                                        let v3862 : US5 = US5_1
                                                        let v3863 : US5 = US5_1
                                                        let v3864 : US5 = US5_1
                                                        struct (v3861, v3862, v3863, v3864)
                                                struct (v3865, v3866, v3867, v3868)
                                        struct (v3869, v3870, v3871, v3872)
                                    else
                                        let v3873 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3874 : string = Fable.Core.RustInterop.emitRustExpr v29 v3873 
                                        let v3875 : bool = v3874 = "python"
                                        let struct (v4559 : US5, v4560 : US5, v4561 : US5, v4562 : US5) =
                                            if v3875 then
                                                let v3876 : string = method171()
                                                (* run_target_args'
                                                let v3877 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3878 : string = "&*$0"
                                                let v3879 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3876 v3878 
                                                let _run_target_args'_v3877 = v3879 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3880 : string = "&*$0"
                                                let v3881 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3876 v3880 
                                                let _run_target_args'_v3877 = v3881 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3882 : string = "&*$0"
                                                let v3883 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3876 v3882 
                                                let _run_target_args'_v3877 = v3883 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3884 : Ref<Str> = v3876 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3877 = v3884 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3887 : Ref<Str> = v3876 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3877 = v3887 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3890 : Ref<Str> = v3876 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3877 = v3890 
                                                #endif
#else
                                                let v3893 : Ref<Str> = v3876 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3877 = v3893 
                                                #endif
                                                let v3896 : Ref<Str> = _run_target_args'_v3877 
                                                let v3901 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                let v3902 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v30, v3896) v3901 
                                                let v3903 : (std_string_String -> US7) = method23()
                                                let v3904 : US7 option = v3902 |> Option.map v3903 
                                                let v3915 : US7 = US7_1
                                                let v3916 : US7 = v3904 |> Option.defaultValue v3915 
                                                let v3923 : std_string_String =
                                                    match v3916 with
                                                    | US7_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US7_0(v3920) -> (* Some *)
                                                        v3920
                                                let v3924 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3925 : string = Fable.Core.RustInterop.emitRustExpr v3923 v3924 
                                                let v3926 : string = method25()
                                                (* run_target_args'
                                                let v3927 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3928 : string = "&*$0"
                                                let v3929 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3926 v3928 
                                                let _run_target_args'_v3927 = v3929 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3930 : string = "&*$0"
                                                let v3931 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3926 v3930 
                                                let _run_target_args'_v3927 = v3931 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3932 : string = "&*$0"
                                                let v3933 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3926 v3932 
                                                let _run_target_args'_v3927 = v3933 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3934 : Ref<Str> = v3926 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3927 = v3934 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3937 : Ref<Str> = v3926 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3927 = v3937 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3940 : Ref<Str> = v3926 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3927 = v3940 
                                                #endif
#else
                                                let v3943 : Ref<Str> = v3926 |> unbox<Ref<Str>>
                                                let _run_target_args'_v3927 = v3943 
                                                #endif
                                                let v3946 : Ref<Str> = _run_target_args'_v3927 
                                                let v3951 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                let v3952 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v30, v3946) v3951 
                                                let v3953 : (Vec<std_string_String> -> US11) = method26()
                                                let v3954 : US11 option = v3952 |> Option.map v3953 
                                                let v3965 : US11 = US11_1
                                                let v3966 : US11 = v3954 |> Option.defaultValue v3965 
                                                let v3970 : (std_string_String []) = [||]
                                                let v3971 : string = "$0.to_vec()"
                                                let v3972 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3970 v3971 
                                                let v3975 : Vec<std_string_String> =
                                                    match v3966 with
                                                    | US11_1 -> (* None *)
                                                        v3972
                                                    | US11_0(v3973) -> (* Some *)
                                                        v3973
                                                let v3976 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                (* run_target_args'
                                                let v3977 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3978 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3979 : string = "std::fs::read(&*$0)"
                                                let v3980 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3925 v3979 
                                                (* run_target_args'
                                                let v3981 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3982 : string = "$0.unwrap()"
                                                let v3983 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3980 v3982 
                                                let _run_target_args'_v3981 = v3983 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3984 : string = "$0.unwrap()"
                                                let v3985 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3980 v3984 
                                                let _run_target_args'_v3981 = v3985 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3986 : string = "$0.unwrap()"
                                                let v3987 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3980 v3986 
                                                let _run_target_args'_v3981 = v3987 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3988 : Vec<uint8> = match v3980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3981 = v3988 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3989 : Vec<uint8> = match v3980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3981 = v3989 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3990 : Vec<uint8> = match v3980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3981 = v3990 
                                                #endif
#else
                                                let v3991 : Vec<uint8> = match v3980 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3981 = v3991 
                                                #endif
                                                let v3992 : Vec<uint8> = _run_target_args'_v3981 
                                                let _run_target_args'_v3978 = v3992 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3995 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3978 = v3995 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3998 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3978 = v3998 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4001 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3978 = v4001 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4004 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3978 = v4004 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4007 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3978 = v4007 
                                                #endif
#else
                                                let v4010 : (uint8 []) = v3925 |> System.IO.File.ReadAllBytes
                                                let v4011 : string = "$0.to_vec()"
                                                let v4012 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4010 v4011 
                                                let _run_target_args'_v3978 = v4012 
                                                #endif
                                                let v4013 : Vec<uint8> = _run_target_args'_v3978 
                                                let v4018 : Vec<uint8> = method27(v4013)
                                                let v4019 : string = "std::string::String::from_utf8($0)"
                                                let v4020 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4018 v4019 
                                                (* run_target_args'
                                                let v4021 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4022 : string = "$0.unwrap()"
                                                let v4023 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4020 v4022 
                                                let _run_target_args'_v4021 = v4023 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4024 : string = "$0.unwrap()"
                                                let v4025 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4020 v4024 
                                                let _run_target_args'_v4021 = v4025 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4026 : string = "$0.unwrap()"
                                                let v4027 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4020 v4026 
                                                let _run_target_args'_v4021 = v4027 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4028 : std_string_String = match v4020 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4021 = v4028 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4029 : std_string_String = match v4020 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4021 = v4029 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4030 : std_string_String = match v4020 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4021 = v4030 
                                                #endif
#else
                                                let v4031 : std_string_String = match v4020 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4021 = v4031 
                                                #endif
                                                let v4032 : std_string_String = _run_target_args'_v4021 
                                                let v4035 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4036 : string = Fable.Core.RustInterop.emitRustExpr v4032 v4035 
                                                let _run_target_args'_v3977 = v4036 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4037 : string = null |> unbox<string>
                                                let _run_target_args'_v3977 = v4037 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4040 : string = null |> unbox<string>
                                                let _run_target_args'_v3977 = v4040 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4043 : string = null |> unbox<string>
                                                let _run_target_args'_v3977 = v4043 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4046 : string = null |> unbox<string>
                                                let _run_target_args'_v3977 = v4046 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4049 : string = null |> unbox<string>
                                                let _run_target_args'_v3977 = v4049 
                                                #endif
#else
                                                let v4052 : string = v3925 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3977 = v4052 
                                                #endif
                                                let v4053 : string = _run_target_args'_v3977 
                                                let v4058 : string = "py"
                                                let v4059 : string = $"%A{struct (v4058, v4053)}"
                                                let v4062 : string = method196(v4059)
                                                let v4063 : string = method28()
                                                let v4064 : US5 = method29(v4063)
                                                let v4070 : US5 =
                                                    match v4064 with
                                                    | US5_1 -> (* None *)
                                                        let v4067 : string = __SOURCE_DIRECTORY__
                                                        method29(v4067)
                                                    | US5_0(v4065) -> (* Some *)
                                                        US5_0(v4065)
                                                let v4076 : US5 =
                                                    match v4070 with
                                                    | US5_1 -> (* None *)
                                                        let v4073 : string = "/workspaces"
                                                        method29(v4073)
                                                    | US5_0(v4071) -> (* Some *)
                                                        US5_0(v4071)
                                                let v4080 : string =
                                                    match v4076 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v4077) -> (* Some *)
                                                        v4077
                                                let v4081 : string = method49(v4080)
                                                let v4082 : bool = "deps" = v4081
                                                let v4092 : string =
                                                    if v4082 then
                                                        let v4083 : string option = method35(v4080)
                                                        let v4084 : string = v4083 |> Option.get
                                                        let v4087 : US5 = method29(v4084)
                                                        match v4087 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v4088) -> (* Some *)
                                                            v4088
                                                    else
                                                        v4080
                                                let v4093 : string = "polyglot"
                                                let v4094 : string = method30(v4092, v4093)
                                                let v4095 : string = method28()
                                                let v4096 : (unit -> string) = v4095.ToLower
                                                let v4097 : string = v4096 ()
                                                let v4100 : (unit -> string) = v4094.ToLower
                                                let v4101 : string = v4100 ()
                                                let v4104 : bool = v4097.StartsWith (v4101, false, null)
                                                let v4109 : US13 =
                                                    if v4104 then
                                                        US13_1(v4101)
                                                    else
                                                        US13_0(v4101)
                                                let v4115 : Result<string, string> =
                                                    match v4109 with
                                                    | US13_1(v4112) -> (* Error *)
                                                        let v4113 : Result<string, string> = Error v4112 
                                                        v4113
                                                    | US13_0(v4110) -> (* Ok *)
                                                        let v4111 : Result<string, string> = Ok v4110 
                                                        v4111
                                                let v4116 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                let v4117 : bool = Fable.Core.RustInterop.emitRustExpr v4115 v4116 
                                                let v4118 : string = "x"
                                                let v4119 : string = Fable.Core.RustInterop.emitRustExpr () v4118 
                                                let v4120 : string = "true; $0 })"
                                                let v4121 : bool = Fable.Core.RustInterop.emitRustExpr v4119 v4120 
                                                let v4122 : string = "_result_unwrap_or_else"
                                                let v4123 : string = Fable.Core.RustInterop.emitRustExpr () v4122 
                                                let v4124 : string = "spiral"
                                                let v4125 : US38 = US38_2
                                                let v4126 : US39 = US39_0(v4125)
                                                let v4127 : US5 = US5_0(v4062)
                                                let v4128 : string = method199(v4127, v4124, v4126, v4123)
                                                let v4129 : string = "Fable.Core"
                                                let v4130 : UH2 = UH2_0
                                                let v4131 : UH2 = UH2_1(v4129, v4130)
                                                let v4132 : UH2 = UH2_0
                                                let v4133 : string = method200(v4053, v4124, v4132, v4131, v4128, v4123)
                                                let v4134 : string = "lib/python/fable/fable_modules"
                                                let v4135 : string = method30(v4123, v4134)
                                                let v4136 : string = $"fable_library"
                                                let v4137 : string = method30(v4135, v4136)
                                                let v4138 : string = $"fable_modules/fable_library"
                                                let v4139 : string = method30(v4128, v4138)
                                                method208(v4137, v4139)
                                                let v4140 : US36 = US36_1
                                                let struct (v4141 : int32, v4142 : string) = method209(v4140, v4128, v4058, v4133, v4109)
                                                let v4143 : bool = v4141 <> 0 
                                                let struct (v4509 : US5, v4510 : US5, v4511 : US5, v4512 : US5) =
                                                    if v4143 then
                                                        let v4146 : unit = ()
                                                        let v4147 : (unit -> unit) = closure120(v4142, v4141)
                                                        let v4148 : unit = (fun () -> v4147 (); v4146) ()
                                                        let v4188 : US5 = US5_0(v4058)
                                                        let v4189 : US5 = US5_1
                                                        let v4190 : US5 = US5_1
                                                        let v4191 : US5 = US5_0(v4142)
                                                        struct (v4188, v4189, v4190, v4191)
                                                    else
                                                        let v4192 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                        let v4193 : bool = Fable.Core.RustInterop.emitRustExpr v3975 v4192 
                                                        let v4194 : string = "x"
                                                        let v4195 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4194 
                                                        let v4196 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4197 : string = Fable.Core.RustInterop.emitRustExpr v4195 v4196 
                                                        let v4198 : string = "="
                                                        let v4199 : bool = v4197.Contains v4198 
                                                        let v4203 : string =
                                                            if v4199 then
                                                                v4197
                                                            else
                                                                let v4202 : string = $"\"{v4197}\":\"*\""
                                                                v4202
                                                        let v4204 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v4205 : bool = Fable.Core.RustInterop.emitRustExpr v4203 v4204 
                                                        let v4206 : string = "_vec_map"
                                                        let v4207 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4206 
                                                        let v4208 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                        let v4209 : (string []) = Fable.Core.RustInterop.emitRustExpr v4207 v4208 
                                                        let v4210 : unit = ()
                                                        let _let'_v4210 =
                                                            seq {
                                                                for i = 0 to v4209.Length - 1 do yield v4209.[i]
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            }
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        let v4213 : string seq = _let'_v4210 
                                                        let v4219 : (string -> (string seq -> string)) = String.concat
                                                        let v4220 : string = ",\n"
                                                        let v4221 : (string seq -> string) = v4219 v4220
                                                        let v4222 : string = v4221 v4213
                                                        let v4225 : string = $"{{"
                                                        let v4226 : string = $"  \"name\": \"spiral_{v4062}\","
                                                        let v4227 : string = v4225 + v4226 
                                                        let v4228 : string = $"  \"dependencies\": {{"
                                                        let v4229 : string = v4227 + v4228 
                                                        let v4230 : string = v4229 + v4222 
                                                        let v4231 : string = $"  }},"
                                                        let v4232 : string = v4230 + v4231 
                                                        let v4233 : string = $"    \"devDependencies\": {{"
                                                        let v4234 : string = v4232 + v4233 
                                                        let v4235 : string = $"  }},"
                                                        let v4236 : string = v4234 + v4235 
                                                        let v4237 : string = $"}}"
                                                        let v4238 : string = v4236 + v4237 
                                                        let v4239 : string = "package.json"
                                                        let v4240 : string = method30(v4128, v4239)
                                                        let v4241 : string = "../.."
                                                        let v4242 : string = method30(v4128, v4241)
                                                        let v4243 : string = method30(v4242, v4239)
                                                        method64(v4240, v4238)
                                                        let v4244 : string = ""
                                                        method64(v4243, v4244)
                                                        let v4245 : string = $"{v4124}.{v4058}"
                                                        let v4246 : string = method30(v4128, v4245)
                                                        let v4247 : unit = ()
                                                        let v4248 : (unit -> unit) = closure121(v4246)
                                                        let v4249 : unit = (fun () -> v4248 (); v4247) ()
                                                        (* run_target_args'
                                                        let v4289 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        (* run_target_args'
                                                        let v4290 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4291 : string = "std::fs::read(&*$0)"
                                                        let v4292 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4246 v4291 
                                                        (* run_target_args'
                                                        let v4293 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4294 : string = "$0.unwrap()"
                                                        let v4295 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4292 v4294 
                                                        let _run_target_args'_v4293 = v4295 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4296 : string = "$0.unwrap()"
                                                        let v4297 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4292 v4296 
                                                        let _run_target_args'_v4293 = v4297 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4298 : string = "$0.unwrap()"
                                                        let v4299 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4292 v4298 
                                                        let _run_target_args'_v4293 = v4299 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4300 : Vec<uint8> = match v4292 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4293 = v4300 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4301 : Vec<uint8> = match v4292 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4293 = v4301 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4302 : Vec<uint8> = match v4292 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4293 = v4302 
                                                        #endif
#else
                                                        let v4303 : Vec<uint8> = match v4292 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4293 = v4303 
                                                        #endif
                                                        let v4304 : Vec<uint8> = _run_target_args'_v4293 
                                                        let _run_target_args'_v4290 = v4304 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4307 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _run_target_args'_v4290 = v4307 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4310 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _run_target_args'_v4290 = v4310 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4313 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _run_target_args'_v4290 = v4313 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4316 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _run_target_args'_v4290 = v4316 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4319 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _run_target_args'_v4290 = v4319 
                                                        #endif
#else
                                                        let v4322 : (uint8 []) = v4246 |> System.IO.File.ReadAllBytes
                                                        let v4323 : string = "$0.to_vec()"
                                                        let v4324 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4322 v4323 
                                                        let _run_target_args'_v4290 = v4324 
                                                        #endif
                                                        let v4325 : Vec<uint8> = _run_target_args'_v4290 
                                                        let v4330 : Vec<uint8> = method27(v4325)
                                                        let v4331 : string = "std::string::String::from_utf8($0)"
                                                        let v4332 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4330 v4331 
                                                        (* run_target_args'
                                                        let v4333 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4334 : string = "$0.unwrap()"
                                                        let v4335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4332 v4334 
                                                        let _run_target_args'_v4333 = v4335 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4336 : string = "$0.unwrap()"
                                                        let v4337 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4332 v4336 
                                                        let _run_target_args'_v4333 = v4337 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4338 : string = "$0.unwrap()"
                                                        let v4339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4332 v4338 
                                                        let _run_target_args'_v4333 = v4339 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4340 : std_string_String = match v4332 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4333 = v4340 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4341 : std_string_String = match v4332 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4333 = v4341 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4342 : std_string_String = match v4332 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4333 = v4342 
                                                        #endif
#else
                                                        let v4343 : std_string_String = match v4332 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _run_target_args'_v4333 = v4343 
                                                        #endif
                                                        let v4344 : std_string_String = _run_target_args'_v4333 
                                                        let v4347 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4348 : string = Fable.Core.RustInterop.emitRustExpr v4344 v4347 
                                                        let _run_target_args'_v4289 = v4348 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4349 : string = null |> unbox<string>
                                                        let _run_target_args'_v4289 = v4349 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4352 : string = null |> unbox<string>
                                                        let _run_target_args'_v4289 = v4352 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4355 : string = null |> unbox<string>
                                                        let _run_target_args'_v4289 = v4355 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4358 : string = null |> unbox<string>
                                                        let _run_target_args'_v4289 = v4358 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4361 : string = null |> unbox<string>
                                                        let _run_target_args'_v4289 = v4361 
                                                        #endif
#else
                                                        let v4364 : string = v4246 |> System.IO.File.ReadAllText
                                                        let _run_target_args'_v4289 = v4364 
                                                        #endif
                                                        let v4365 : string = _run_target_args'_v4289 
                                                        let v4370 : string = "# spiral.process_python"
                                                        let v4371 : bool = v4365.Contains v4370 
                                                        let v4383 : string =
                                                            if v4371 then
                                                                v4365
                                                            else
                                                                let v4374 : string = "\";\".into()"
                                                                let v4375 : string = Fable.Core.RustInterop.emitRustExpr () v4374 
                                                                let v4376 : string = "),)"
                                                                let v4377 : string = v4376 + v4375 
                                                                let v4378 : string = "));"
                                                                let v4379 : string = v4365.Replace (v4377, v4378)
                                                                let v4380 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v4381 : string = " defaultOf::<()>();"
                                                                method60(v4380, v4381, v4379)
                                                        let v4384 : bool = v4371 = false
                                                        if v4384 then
                                                            let v4385 : string = $"{v4383}\n\n{v4370}\n"
                                                            method64(v4246, v4385)
                                                        let v4386 : string = $"python \"{v4246}\""
                                                        let v4387 : string = "TRACE_LEVEL"
                                                        let v4388 : string = "Verbose"
                                                        let v4389 : (struct (string * string) []) = [|struct (v4387, v4388)|]
                                                        let v4390 : System.Threading.CancellationToken option = None
                                                        let v4391 : (struct (string * string) []) = [||]
                                                        let v4392 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v4393 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v4394 : string option = None
                                                        let v4400 : Result<string, string> =
                                                            match v4109 with
                                                            | US13_1(v4397) -> (* Error *)
                                                                let v4398 : Result<string, string> = Error v4397 
                                                                v4398
                                                            | US13_0(v4395) -> (* Ok *)
                                                                let v4396 : Result<string, string> = Ok v4395 
                                                                v4396
                                                        (* run_target_args'
                                                        let v4401 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4402 : string = "$0.ok()"
                                                        let v4403 : string option = Fable.Core.RustInterop.emitRustExpr v4400 v4402 
                                                        let _run_target_args'_v4401 = v4403 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4404 : string = "$0.ok()"
                                                        let v4405 : string option = Fable.Core.RustInterop.emitRustExpr v4400 v4404 
                                                        let _run_target_args'_v4401 = v4405 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4406 : string = "$0.ok()"
                                                        let v4407 : string option = Fable.Core.RustInterop.emitRustExpr v4400 v4406 
                                                        let _run_target_args'_v4401 = v4407 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4408 : string option = match v4400 with Ok x -> Some x | Error _ -> None
                                                        let _run_target_args'_v4401 = v4408 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4409 : string option = match v4400 with Ok x -> Some x | Error _ -> None
                                                        let _run_target_args'_v4401 = v4409 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4410 : string option = match v4400 with Ok x -> Some x | Error _ -> None
                                                        let _run_target_args'_v4401 = v4410 
                                                        #endif
#else
                                                        let v4411 : string option = match v4400 with Ok x -> Some x | Error _ -> None
                                                        let _run_target_args'_v4401 = v4411 
                                                        #endif
                                                        let v4412 : string option = _run_target_args'_v4401 
                                                        let v4415 : bool = true
                                                        let struct (v4416 : int32, v4417 : string) = method89(v4386, v4390, v4389, v4392, v4393, v4415, v4412)
                                                        let v4418 : int32 = v4389.Length
                                                        let v4419 : (string []) = Array.zeroCreate<string> (v4418)
                                                        let v4420 : Mut5 = {l0 = 0} : Mut5
                                                        while method93(v4418, v4420) do
                                                            let v4422 : int32 = v4420.l0
                                                            let struct (v4423 : string, v4424 : string) = v4389.[int v4422]
                                                            let v4425 : string = $"$env:{v4423}=''{v4424}''"
                                                            v4419.[int v4422] <- v4425
                                                            let v4426 : int32 = v4422 + 1
                                                            v4420.l0 <- v4426
                                                            ()
                                                        let v4427 : string seq = v4419 |> Seq.ofArray
                                                        let v4430 : (string -> (string seq -> string)) = String.concat
                                                        let v4431 : string = ";"
                                                        let v4432 : (string seq -> string) = v4430 v4431
                                                        let v4433 : string = v4432 v4427
                                                        let v4436 : string = $"pwsh -c '{v4433}; {v4386}'"
                                                        let v4437 : bool = v4416 = 0
                                                        let struct (v4505 : US5, v4506 : US5, v4507 : US5, v4508 : US5) =
                                                            if v4437 then
                                                                let v4438 : (string -> US5) = closure71()
                                                                let v4439 : (unit -> string) = closure122(v4417)
                                                                let v4440 : (exn -> US5) = closure123(v4246, v4417, v4436)
                                                                let v4441 : US5 = US5_1
                                                                let result = ref v4441
                                                                try
                                                                    result.Value <- v4439 () |> v4438 
                                                                with ex ->
                                                                    result.Value <- v4440 ex 
                                                                let v4442 : US5 = result.Value
                                                                let v4452 : string option =
                                                                    match v4442 with
                                                                    | US5_1 -> (* None *)
                                                                        let v4450 : string option = None
                                                                        v4450
                                                                    | US5_0(v4446) -> (* Some *)
                                                                        let v4447 : string option = Some v4446 
                                                                        v4447
                                                                let v4453 : string = "$0.unwrap()"
                                                                let v4454 : string = Fable.Core.RustInterop.emitRustExpr v4452 v4453 
                                                                let v4455 : US5 = US5_0(v4058)
                                                                let v4456 : US5 = US5_0(v4383)
                                                                let v4457 : US5 = US5_0(v4246)
                                                                let v4458 : US5 = US5_0(v4454)
                                                                struct (v4455, v4456, v4457, v4458)
                                                            else
                                                                let v4459 : unit = ()
                                                                let v4460 : (unit -> unit) = closure125(v4246, v4417, v4416, v4436)
                                                                let v4461 : unit = (fun () -> v4460 (); v4459) ()
                                                                let v4501 : US5 = US5_0(v4058)
                                                                let v4502 : US5 = US5_1
                                                                let v4503 : US5 = US5_1
                                                                let v4504 : US5 = US5_1
                                                                struct (v4501, v4502, v4503, v4504)
                                                        struct (v4505, v4506, v4507, v4508)
                                                struct (v4509, v4510, v4511, v4512)
                                            else
                                                let v4513 : unit = ()
                                                let v4514 : (unit -> unit) = closure126(v30, v29)
                                                let v4515 : unit = (fun () -> v4514 (); v4513) ()
                                                let v4555 : US5 = US5_1
                                                let v4556 : US5 = US5_1
                                                let v4557 : US5 = US5_1
                                                let v4558 : US5 = US5_1
                                                struct (v4555, v4556, v4557, v4558)
                                        struct (v4559, v4560, v4561, v4562)
                                struct (v4563, v4564, v4565, v4566)
                        let v4574 : string =
                            match v4567 with
                            | US5_1 -> (* None *)
                                let v4572 : string = ""
                                v4572
                            | US5_0(v4571) -> (* Some *)
                                v4571
                        let v4575 : string = "extension"
                        let v4579 : string =
                            match v4568 with
                            | US5_1 -> (* None *)
                                let v4577 : string = ""
                                v4577
                            | US5_0(v4576) -> (* Some *)
                                v4576
                        let v4580 : string = "code"
                        let v4584 : string =
                            match v4569 with
                            | US5_1 -> (* None *)
                                let v4582 : string = ""
                                v4582
                            | US5_0(v4581) -> (* Some *)
                                v4581
                        let v4585 : string = "code_path"
                        let v4589 : string =
                            match v4570 with
                            | US5_1 -> (* None *)
                                let v4587 : string = ""
                                v4587
                            | US5_0(v4586) -> (* Some *)
                                v4586
                        let v4590 : string = "output"
                        [|struct (v4575, v4574); struct (v4580, v4579); struct (v4585, v4584); struct (v4590, v4589)|]
        | _ ->
            let v4595 : string = "extension"
            let v4596 : string = ""
            let v4597 : string = "code"
            let v4598 : string = "code_path"
            let v4599 : string = "output"
            [|struct (v4595, v4596); struct (v4597, v4596); struct (v4598, v4596); struct (v4599, v4596)|]
    let v4602 : string = "$0.to_vec()"
    let v4603 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4601 v4602 
    let v4604 : unit = ()
    let v4605 : string = $"true; let _func1_from_v4604 = Func1::from(move |value| {{ //"
    let v4606 : bool = Fable.Core.RustInterop.emitRustExpr () v4605 
    let v4607 : string = $"value"
    let struct (v4608 : string, v4609 : string) = Fable.Core.RustInterop.emitRustExpr () v4607 
    (* run_target_args'
    let v4610 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4611 : string = "&*$0"
    let v4612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4608 v4611 
    let _run_target_args'_v4610 = v4612 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4613 : string = "&*$0"
    let v4614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4608 v4613 
    let _run_target_args'_v4610 = v4614 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4615 : string = "&*$0"
    let v4616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4608 v4615 
    let _run_target_args'_v4610 = v4616 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4617 : Ref<Str> = v4608 |> unbox<Ref<Str>>
    let _run_target_args'_v4610 = v4617 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4620 : Ref<Str> = v4608 |> unbox<Ref<Str>>
    let _run_target_args'_v4610 = v4620 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4623 : Ref<Str> = v4608 |> unbox<Ref<Str>>
    let _run_target_args'_v4610 = v4623 
    #endif
#else
    let v4626 : Ref<Str> = v4608 |> unbox<Ref<Str>>
    let _run_target_args'_v4610 = v4626 
    #endif
    let v4629 : Ref<Str> = _run_target_args'_v4610 
    (* run_target_args'
    let v4634 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4635 : string = "String::from($0)"
    let v4636 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4629 v4635 
    let _run_target_args'_v4634 = v4636 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4637 : string = "String::from($0)"
    let v4638 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4629 v4637 
    let _run_target_args'_v4634 = v4638 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4639 : string = "String::from($0)"
    let v4640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4629 v4639 
    let _run_target_args'_v4634 = v4640 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4641 : std_string_String = v4629 |> unbox<std_string_String>
    let _run_target_args'_v4634 = v4641 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4644 : std_string_String = v4629 |> unbox<std_string_String>
    let _run_target_args'_v4634 = v4644 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4647 : std_string_String = v4629 |> unbox<std_string_String>
    let _run_target_args'_v4634 = v4647 
    #endif
#else
    let v4650 : std_string_String = v4629 |> unbox<std_string_String>
    let _run_target_args'_v4634 = v4650 
    #endif
    let v4653 : std_string_String = _run_target_args'_v4634 
    (* run_target_args'
    let v4658 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4659 : string = "&*$0"
    let v4660 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4609 v4659 
    let _run_target_args'_v4658 = v4660 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4661 : string = "&*$0"
    let v4662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4609 v4661 
    let _run_target_args'_v4658 = v4662 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4663 : string = "&*$0"
    let v4664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4609 v4663 
    let _run_target_args'_v4658 = v4664 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4665 : Ref<Str> = v4609 |> unbox<Ref<Str>>
    let _run_target_args'_v4658 = v4665 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4668 : Ref<Str> = v4609 |> unbox<Ref<Str>>
    let _run_target_args'_v4658 = v4668 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4671 : Ref<Str> = v4609 |> unbox<Ref<Str>>
    let _run_target_args'_v4658 = v4671 
    #endif
#else
    let v4674 : Ref<Str> = v4609 |> unbox<Ref<Str>>
    let _run_target_args'_v4658 = v4674 
    #endif
    let v4677 : Ref<Str> = _run_target_args'_v4658 
    (* run_target_args'
    let v4682 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4683 : string = "String::from($0)"
    let v4684 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4677 v4683 
    let _run_target_args'_v4682 = v4684 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4685 : string = "String::from($0)"
    let v4686 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4677 v4685 
    let _run_target_args'_v4682 = v4686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4687 : string = "String::from($0)"
    let v4688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4677 v4687 
    let _run_target_args'_v4682 = v4688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4689 : std_string_String = v4677 |> unbox<std_string_String>
    let _run_target_args'_v4682 = v4689 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4692 : std_string_String = v4677 |> unbox<std_string_String>
    let _run_target_args'_v4682 = v4692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4695 : std_string_String = v4677 |> unbox<std_string_String>
    let _run_target_args'_v4682 = v4695 
    #endif
#else
    let v4698 : std_string_String = v4677 |> unbox<std_string_String>
    let _run_target_args'_v4682 = v4698 
    #endif
    let v4701 : std_string_String = _run_target_args'_v4682 
    let v4706 : (std_string_String * std_string_String) = v4653, v4701 
    let func1_from_result = v4706 //
    let v4707 : _ = func1_from_result
    let v4708 : string = $"true; $0 /*"
    let v4709 : bool = Fable.Core.RustInterop.emitRustExpr v4707 v4708 
    let v4710 : string = $"*/ }}); //"
    let v4711 : bool = Fable.Core.RustInterop.emitRustExpr () v4710 
    let v4712 : string = $"_func1_from_v4604"
    let v4713 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v4712 
    let v4714 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4715 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v4713)
    let v4716 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4603, v4715) v4714 
    let v4717 : string = "std::collections::BTreeMap::from_iter(v4716.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v4718 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4717 
    let v4719 : string = "serde_json::to_string(&v4718)"
    let v4720 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4719 
    let v4721 : (serde_json_Error -> string) = method274()
    (* run_target_args'
    let v4722 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4723 : string = "$0.map_err(|x| $1(x))"
    let v4724 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4720, v4721) v4723 
    let _run_target_args'_v4722 = v4724 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4725 : string = "$0.map_err(|x| $1(x))"
    let v4726 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4720, v4721) v4725 
    let _run_target_args'_v4722 = v4726 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4727 : string = "$0.map_err(|x| $1(x))"
    let v4728 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4720, v4721) v4727 
    let _run_target_args'_v4722 = v4728 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4729 : Result<std_string_String, string> = match v4720 with Ok x -> Ok x | Error x -> Error (v4721 x)
    let _run_target_args'_v4722 = v4729 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4730 : Result<std_string_String, string> = match v4720 with Ok x -> Ok x | Error x -> Error (v4721 x)
    let _run_target_args'_v4722 = v4730 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4731 : Result<std_string_String, string> = match v4720 with Ok x -> Ok x | Error x -> Error (v4721 x)
    let _run_target_args'_v4722 = v4731 
    #endif
#else
    let v4732 : Result<std_string_String, string> = match v4720 with Ok x -> Ok x | Error x -> Error (v4721 x)
    let _run_target_args'_v4722 = v4732 
    #endif
    let v4733 : Result<std_string_String, string> = _run_target_args'_v4722 
    let v4736 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v4737 : bool = Fable.Core.RustInterop.emitRustExpr v4733 v4736 
    let v4738 : string = "x"
    let v4739 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4738 
    let v4740 : string = "fable_library_rust::String_::fromString($0)"
    let v4741 : string = Fable.Core.RustInterop.emitRustExpr v4739 v4740 
    let v4742 : string = "true; $0 })"
    let v4743 : bool = Fable.Core.RustInterop.emitRustExpr v4741 v4742 
    let v4744 : string = "_result_map_"
    let v4745 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4744 
    let v4746 : string = ""
    let v4747 : string = "}"
    let v4748 : string = v4746 + v4747 
    let x = v4745 //
    let v4749 : _ = x
    let v4750 : unit = ()
    (* run_target_args'
    let v4751 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4752 : string = $"true; let _fix_closure_v4750 = $0"
    let v4753 : bool = Fable.Core.RustInterop.emitRustExpr v4749 v4752 
    let _run_target_args'_v4751 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4754 : string = $"true; let _fix_closure_v4750 = $0"
    let v4755 : bool = Fable.Core.RustInterop.emitRustExpr v4749 v4754 
    let _run_target_args'_v4751 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4756 : string = $"true; let _fix_closure_v4750 = $0"
    let v4757 : bool = Fable.Core.RustInterop.emitRustExpr v4749 v4756 
    let _run_target_args'_v4751 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v4751 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v4751 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v4751 = false 
    #endif
#else
    let _run_target_args'_v4751 = false 
    #endif
    let v4758 : bool = _run_target_args'_v4751 
    let v4760 : string = $"true; _fix_closure_v4750 " + v4748 + "); " + v4746 + " // rust.fix_closure'"
    let v4761 : bool = Fable.Core.RustInterop.emitRustExpr () v4760 
    let v4762 : string = "__future_init"
    let v4763 : _ = Fable.Core.RustInterop.emitRustExpr () v4762 
    let v4764 : string = "v4763"
    let v4765 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v4764 
    v4765
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure5(v0)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v76 : clap_Command = method0()
    let v77 : string = "clap::Command::get_matches($0)"
    let v78 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : US0 = v21.l0
    let v80 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v79, v78)
    let v81 : string = "futures::executor::block_on($0)"
    let v82 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v80 v81 
    (* run_target_args'
    let v83 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "$0.unwrap()"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v82 v84 
    let _run_target_args'_v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "$0.unwrap()"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v82 v86 
    let _run_target_args'_v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "$0.unwrap()"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v83 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v83 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v83 = v92 
    #endif
#else
    let v93 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v83 = v93 
    #endif
    let v94 : string = _run_target_args'_v83 
    let v97 : US0 = v21.l0
    let v98 : bool =
        match v97 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v98 then
        let v99 : unit = ()
        let v100 : (unit -> unit) = closure10(v94)
        let v101 : unit = (fun () -> v100 (); v99) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
