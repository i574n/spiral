#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : string
    | US40_1 of f1_0 : string
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : US41
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US43_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : int32 * f0_1 : string
    | US44_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_collections_HashMap<string, string>
    | US45_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US5
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0
    | US47_1 of f1_0 : string
and [<Struct>] US48 =
    | US48_0 of f0_0 : std_fs_FileType
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0
    | US49_1
    | US49_2
and [<Struct>] US50 =
    | US50_0 of f0_0 : async_walkdir_DirEntry
    | US50_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : string * f0_1 : string
    | US51_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v61 : string = "JavaScript"
    let v62 : (unit -> string) = v61.ToLower
    let v63 : string = v62 ()
    let v67 : string = "Erlang"
    let v68 : (unit -> string) = v67.ToLower
    let v69 : string = v68 ()
    let v72 : string list = []
    let v74 : string list = v63 :: v72 
    let v78 : string list = v69 :: v74 
    let v82 : (string list -> (string [])) = List.toArray
    let v83 : (string []) = v82 v78
    let v86 : string = "$0.to_vec()"
    let v87 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v83 v86 
    let v88 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "x"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    (* run_target_args'
    let v96 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v97 : string = "&*$0"
    let v98 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v91 v97 
    let _run_target_args'_v96 = v98 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v91 v99 
    let _run_target_args'_v96 = v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v91 v101 
    let _run_target_args'_v96 = v102 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : Ref<Str> = v91 |> unbox<Ref<Str>>
    let _run_target_args'_v96 = v104 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : Ref<Str> = v91 |> unbox<Ref<Str>>
    let _run_target_args'_v96 = v108 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v91 |> unbox<Ref<Str>>
    let _run_target_args'_v96 = v112 
    #endif
#else
    let v116 : Ref<Str> = v91 |> unbox<Ref<Str>>
    let _run_target_args'_v96 = v116 
    #endif
    let v119 : Ref<Str> = _run_target_args'_v96 
    (* run_target_args'
    let v129 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v130 : string = "String::from($0)"
    let v131 : std_string_String = Fable.Core.RustInterop.emitRustExpr v119 v130 
    let _run_target_args'_v129 = v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : string = "String::from($0)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v119 v132 
    let _run_target_args'_v129 = v133 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v134 : string = "String::from($0)"
    let v135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v119 v134 
    let _run_target_args'_v129 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : std_string_String = v119 |> unbox<std_string_String>
    let _run_target_args'_v129 = v137 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : std_string_String = v119 |> unbox<std_string_String>
    let _run_target_args'_v129 = v141 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v119 |> unbox<std_string_String>
    let _run_target_args'_v129 = v145 
    #endif
#else
    let v149 : std_string_String = v119 |> unbox<std_string_String>
    let _run_target_args'_v129 = v149 
    #endif
    let v152 : std_string_String = _run_target_args'_v129 
    let v158 : string = "Box::new($0)"
    let v159 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v152 v158 
    let v160 : string = "Box::leak($0)"
    let v161 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v159 v160 
    let v162 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v163 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v161 v162 
    let v164 : string = "true; $0 }).collect::<Vec<_>>()"
    let v165 : bool = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "_vec_map"
    let v167 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v166 
    let v168 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v169 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v167 v168 
    let v170 : string = "$0.value_parser($1)"
    let v171 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v169) v170 
    let v172 : string = "clap::Command::arg($0, $1)"
    let v173 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v171) v172 
    let v174 : string = "NAME"
    let v175 : string = "r#\"" + v174 + "\"#"
    let v176 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v175 
    let v177 : string = "VERSION"
    let v178 : string = "r#\"" + v177 + "\"#"
    let v179 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v176; v179|]
    let v182 : unativeint = 1 |> unativeint 
    let v186 : unativeint = 0 |> unativeint 
    let v190 : unativeint = 0 |> unativeint 
    let v194 : bool = v186 = v190 
    let v202 : clap_builder_ValueRange =
        if v194 then
            let v197 : string = "clap::builder::ValueRange::new($0..)"
            let v198 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v182 v197 
            v198
        else
            let v199 : string = ""
            let v200 : string = "clap::builder::ValueRange::new($0.." + v199 + "$1)"
            let v201 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v182, v186) v200 
            v201
    let v203 : string = "deps"
    let v204 : string = "r#\"" + v203 + "\"#"
    let v205 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v204 
    let v206 : string = "clap::Arg::new($0)"
    let v207 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v205 v206 
    let v208 : string = "$0.short($1)"
    let v209 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v207, 'd') v208 
    let v210 : string = "r#\"" + v203 + "\"#"
    let v211 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v210 
    let v212 : string = "$0.long($1)"
    let v213 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v209, v211) v212 
    let v214 : string = "$0.to_vec()"
    let v215 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v180 v214 
    let v216 : string = "$0.value_names($1)"
    let v217 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v213, v215) v216 
    let v218 : string = "$0.num_args($1)"
    let v219 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v217, v202) v218 
    let v220 : string = "clap::ArgAction::Append"
    let v221 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v220 
    let v222 : string = "$0.action($1)"
    let v223 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v219, v221) v222 
    let v224 : string = "clap::Command::arg($0, $1)"
    let v225 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v173, v223) v224 
    let v226 : string = "clap::Command::subcommand($0, v225)"
    let v227 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v226 
    let v228 : string = "cuda"
    let v229 : string = "r#\"" + v228 + "\"#"
    let v230 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v229 
    let v231 : string = "clap::Command::new($0)"
    let v232 : clap_Command = Fable.Core.RustInterop.emitRustExpr v230 v231 
    let v233 : string = "py-path"
    let v234 : string = "r#\"" + v233 + "\"#"
    let v235 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "clap::Arg::new($0)"
    let v237 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v235 v236 
    let v238 : string = "$0.short($1)"
    let v239 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v237, 'p') v238 
    let v240 : string = "r#\"" + v233 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : string = "$0.long($1)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v239, v241) v242 
    let v244 : string = "$0.required($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v243, true) v244 
    let v246 : string = "clap::Command::arg($0, $1)"
    let v247 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v232, v245) v246 
    let v248 : string = "env"
    let v249 : string = "r#\"" + v248 + "\"#"
    let v250 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v249 
    let v251 : string = "clap::Arg::new($0)"
    let v252 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v250 v251 
    let v253 : string = "$0.short($1)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v252, 'e') v253 
    let v255 : string = "r#\"" + v248 + "\"#"
    let v256 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v255 
    let v257 : string = "$0.long($1)"
    let v258 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, v256) v257 
    
    
    let v260 : string = "Poetry"
    let v261 : (unit -> string) = v260.ToLower
    let v262 : string = v261 ()
    let v266 : string = "Pip"
    let v267 : (unit -> string) = v266.ToLower
    let v268 : string = v267 ()
    let v271 : string list = []
    let v273 : string list = v262 :: v271 
    let v277 : string list = v268 :: v273 
    let v281 : (string list -> (string [])) = List.toArray
    let v282 : (string []) = v281 v277
    let v285 : string = "$0.to_vec()"
    let v286 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v282 v285 
    let v287 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v288 : bool = Fable.Core.RustInterop.emitRustExpr v286 v287 
    let v289 : string = "x"
    let v290 : string = Fable.Core.RustInterop.emitRustExpr () v289 
    (* run_target_args'
    let v295 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v296 : string = "&*$0"
    let v297 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v290 v296 
    let _run_target_args'_v295 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v298 : string = "&*$0"
    let v299 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v290 v298 
    let _run_target_args'_v295 = v299 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v300 : string = "&*$0"
    let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v290 v300 
    let _run_target_args'_v295 = v301 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v303 : Ref<Str> = v290 |> unbox<Ref<Str>>
    let _run_target_args'_v295 = v303 
    #endif
#if FABLE_COMPILER_PYTHON
    let v307 : Ref<Str> = v290 |> unbox<Ref<Str>>
    let _run_target_args'_v295 = v307 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v311 : Ref<Str> = v290 |> unbox<Ref<Str>>
    let _run_target_args'_v295 = v311 
    #endif
#else
    let v315 : Ref<Str> = v290 |> unbox<Ref<Str>>
    let _run_target_args'_v295 = v315 
    #endif
    let v318 : Ref<Str> = _run_target_args'_v295 
    (* run_target_args'
    let v328 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v329 : string = "String::from($0)"
    let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr v318 v329 
    let _run_target_args'_v328 = v330 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v331 : string = "String::from($0)"
    let v332 : std_string_String = Fable.Core.RustInterop.emitRustExpr v318 v331 
    let _run_target_args'_v328 = v332 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v333 : string = "String::from($0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v318 v333 
    let _run_target_args'_v328 = v334 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v336 : std_string_String = v318 |> unbox<std_string_String>
    let _run_target_args'_v328 = v336 
    #endif
#if FABLE_COMPILER_PYTHON
    let v340 : std_string_String = v318 |> unbox<std_string_String>
    let _run_target_args'_v328 = v340 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v344 : std_string_String = v318 |> unbox<std_string_String>
    let _run_target_args'_v328 = v344 
    #endif
#else
    let v348 : std_string_String = v318 |> unbox<std_string_String>
    let _run_target_args'_v328 = v348 
    #endif
    let v351 : std_string_String = _run_target_args'_v328 
    let v357 : string = "Box::new($0)"
    let v358 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v351 v357 
    let v359 : string = "Box::leak($0)"
    let v360 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v358 v359 
    let v361 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v362 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v360 v361 
    let v363 : string = "true; $0 }).collect::<Vec<_>>()"
    let v364 : bool = Fable.Core.RustInterop.emitRustExpr v362 v363 
    let v365 : string = "_vec_map"
    let v366 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v365 
    let v367 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v368 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v366 v367 
    let v369 : string = "$0.value_parser($1)"
    let v370 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v258, v368) v369 
    let v371 : string = "clap::Command::arg($0, $1)"
    let v372 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v247, v370) v371 
    let v373 : string = "r#\"" + v174 + "\"#"
    let v374 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v373 
    let v375 : string = "r#\"" + v177 + "\"#"
    let v376 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v375 
    let v377 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v374; v376|]
    let v379 : unativeint = 1 |> unativeint 
    let v383 : unativeint = 0 |> unativeint 
    let v387 : unativeint = 0 |> unativeint 
    let v391 : bool = v383 = v387 
    let v399 : clap_builder_ValueRange =
        if v391 then
            let v394 : string = "clap::builder::ValueRange::new($0..)"
            let v395 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v379 v394 
            v395
        else
            let v396 : string = ""
            let v397 : string = "clap::builder::ValueRange::new($0.." + v396 + "$1)"
            let v398 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v379, v383) v397 
            v398
    let v400 : string = "r#\"" + v203 + "\"#"
    let v401 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v400 
    let v402 : string = "clap::Arg::new($0)"
    let v403 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v401 v402 
    let v404 : string = "$0.short($1)"
    let v405 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v403, 'd') v404 
    let v406 : string = "r#\"" + v203 + "\"#"
    let v407 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v406 
    let v408 : string = "$0.long($1)"
    let v409 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v405, v407) v408 
    let v410 : string = "$0.to_vec()"
    let v411 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v377 v410 
    let v412 : string = "$0.value_names($1)"
    let v413 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v409, v411) v412 
    let v414 : string = "$0.num_args($1)"
    let v415 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v413, v399) v414 
    let v416 : string = "clap::ArgAction::Append"
    let v417 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v416 
    let v418 : string = "$0.action($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v415, v417) v418 
    let v420 : string = "clap::Command::arg($0, $1)"
    let v421 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v372, v419) v420 
    let v422 : string = "clap::Command::subcommand($0, v421)"
    let v423 : clap_Command = Fable.Core.RustInterop.emitRustExpr v227 v422 
    let v424 : string = "fable"
    let v425 : string = "r#\"" + v424 + "\"#"
    let v426 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v425 
    let v427 : string = "clap::Command::new($0)"
    let v428 : clap_Command = Fable.Core.RustInterop.emitRustExpr v426 v427 
    let v429 : string = "fs-path"
    let v430 : string = "r#\"" + v429 + "\"#"
    let v431 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v430 
    let v432 : string = "clap::Arg::new($0)"
    let v433 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v431 v432 
    let v434 : string = "$0.short($1)"
    let v435 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v433, 'f') v434 
    let v436 : string = "r#\"" + v429 + "\"#"
    let v437 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v436 
    let v438 : string = "$0.long($1)"
    let v439 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v435, v437) v438 
    let v440 : string = "$0.required($1)"
    let v441 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v439, true) v440 
    let v442 : string = "clap::Command::arg($0, $1)"
    let v443 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v428, v441) v442 
    let v444 : string = "r#\"" + v0 + "\"#"
    let v445 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v444 
    let v446 : string = "clap::Arg::new($0)"
    let v447 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v445 v446 
    let v448 : string = "$0.short($1)"
    let v449 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v447, 'c') v448 
    let v450 : string = "r#\"" + v0 + "\"#"
    let v451 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v450 
    let v452 : string = "$0.long($1)"
    let v453 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v449, v451) v452 
    let v454 : string = "clap::Command::arg($0, $1)"
    let v455 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v443, v453) v454 
    let v456 : string = "clap::Command::subcommand($0, v455)"
    let v457 : clap_Command = Fable.Core.RustInterop.emitRustExpr v423 v456 
    let v458 : string = "rust"
    let v459 : string = "r#\"" + v458 + "\"#"
    let v460 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v459 
    let v461 : string = "clap::Command::new($0)"
    let v462 : clap_Command = Fable.Core.RustInterop.emitRustExpr v460 v461 
    let v463 : string = "r#\"" + v429 + "\"#"
    let v464 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v463 
    let v465 : string = "clap::Arg::new($0)"
    let v466 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let v467 : string = "$0.short($1)"
    let v468 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v466, 'f') v467 
    let v469 : string = "r#\"" + v429 + "\"#"
    let v470 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v469 
    let v471 : string = "$0.long($1)"
    let v472 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v468, v470) v471 
    let v473 : string = "$0.required($1)"
    let v474 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v472, true) v473 
    let v475 : string = "clap::Command::arg($0, $1)"
    let v476 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v462, v474) v475 
    let v477 : string = "r#\"" + v174 + "\"#"
    let v478 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v477 
    let v479 : string = "r#\"" + v177 + "\"#"
    let v480 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v479 
    let v481 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v478; v480|]
    let v483 : unativeint = 1 |> unativeint 
    let v487 : unativeint = 0 |> unativeint 
    let v491 : unativeint = 0 |> unativeint 
    let v495 : bool = v487 = v491 
    let v503 : clap_builder_ValueRange =
        if v495 then
            let v498 : string = "clap::builder::ValueRange::new($0..)"
            let v499 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v483 v498 
            v499
        else
            let v500 : string = ""
            let v501 : string = "clap::builder::ValueRange::new($0.." + v500 + "$1)"
            let v502 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v483, v487) v501 
            v502
    let v504 : string = "r#\"" + v203 + "\"#"
    let v505 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v504 
    let v506 : string = "clap::Arg::new($0)"
    let v507 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v505 v506 
    let v508 : string = "$0.short($1)"
    let v509 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v507, 'd') v508 
    let v510 : string = "r#\"" + v203 + "\"#"
    let v511 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v510 
    let v512 : string = "$0.long($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v509, v511) v512 
    let v514 : string = "$0.to_vec()"
    let v515 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v481 v514 
    let v516 : string = "$0.value_names($1)"
    let v517 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v515) v516 
    let v518 : string = "$0.num_args($1)"
    let v519 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v517, v503) v518 
    let v520 : string = "clap::ArgAction::Append"
    let v521 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v520 
    let v522 : string = "$0.action($1)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v519, v521) v522 
    let v524 : string = "clap::Command::arg($0, $1)"
    let v525 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v476, v523) v524 
    let v527 : unativeint = 0 |> unativeint 
    let v531 : unativeint = 1 |> unativeint 
    let v535 : unativeint = 0 |> unativeint 
    let v539 : bool = v531 = v535 
    let v547 : clap_builder_ValueRange =
        if v539 then
            let v542 : string = "clap::builder::ValueRange::new($0..)"
            let v543 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v527 v542 
            v543
        else
            let v544 : string = "="
            let v545 : string = "clap::builder::ValueRange::new($0.." + v544 + "$1)"
            let v546 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v527, v531) v545 
            v546
    let v548 : string = "wasm"
    let v549 : string = "r#\"" + v548 + "\"#"
    let v550 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v549 
    let v551 : string = "clap::Arg::new($0)"
    let v552 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v550 v551 
    let v553 : string = "$0.short($1)"
    let v554 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v552, 'w') v553 
    let v555 : string = "r#\"" + v548 + "\"#"
    let v556 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v555 
    let v557 : string = "$0.long($1)"
    let v558 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v554, v556) v557 
    let v559 : string = "$0.num_args($1)"
    let v560 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v558, v547) v559 
    let v561 : string = "$0.require_equals($1)"
    let v562 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v560, true) v561 
    let v563 : string = ""
    let v564 : string = "r#\"" + v563 + "\"#"
    let v565 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v564 
    let v566 : string = "$0.default_missing_value($1)"
    let v567 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v562, v565) v566 
    let v568 : string = "clap::Command::arg($0, $1)"
    let v569 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v525, v567) v568 
    let v571 : unativeint = 0 |> unativeint 
    let v575 : unativeint = 1 |> unativeint 
    let v579 : unativeint = 0 |> unativeint 
    let v583 : bool = v575 = v579 
    let v591 : clap_builder_ValueRange =
        if v583 then
            let v586 : string = "clap::builder::ValueRange::new($0..)"
            let v587 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v571 v586 
            v587
        else
            let v588 : string = "="
            let v589 : string = "clap::builder::ValueRange::new($0.." + v588 + "$1)"
            let v590 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v571, v575) v589 
            v590
    let v592 : string = "contract"
    let v593 : string = "r#\"" + v592 + "\"#"
    let v594 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v593 
    let v595 : string = "clap::Arg::new($0)"
    let v596 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v594 v595 
    let v597 : string = "$0.short($1)"
    let v598 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v596, 'c') v597 
    let v599 : string = "r#\"" + v592 + "\"#"
    let v600 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v599 
    let v601 : string = "$0.long($1)"
    let v602 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v598, v600) v601 
    let v603 : string = "$0.num_args($1)"
    let v604 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v602, v591) v603 
    let v605 : string = "$0.require_equals($1)"
    let v606 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v604, true) v605 
    let v607 : string = "r#\"" + v563 + "\"#"
    let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
    let v609 : string = "$0.default_missing_value($1)"
    let v610 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v606, v608) v609 
    let v611 : string = "clap::Command::arg($0, $1)"
    let v612 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v569, v610) v611 
    let v613 : string = "cleanup"
    let v614 : string = "r#\"" + v613 + "\"#"
    let v615 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v614 
    let v616 : string = "clap::Arg::new($0)"
    let v617 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v615 v616 
    let v618 : string = "$0.short($1)"
    let v619 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v617, 'l') v618 
    let v620 : string = "r#\"" + v613 + "\"#"
    let v621 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v620 
    let v622 : string = "$0.long($1)"
    let v623 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v619, v621) v622 
    let v624 : string = "true"
    let v625 : string = "r#\"" + v624 + "\"#"
    let v626 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v625 
    let v627 : string = "$0.default_value($1)"
    let v628 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v623, v626) v627 
    let v629 : string = "clap::ArgAction::SetFalse"
    let v630 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.action($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v628, v630) v631 
    let v633 : string = "clap::Command::arg($0, $1)"
    let v634 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v612, v632) v633 
    let v635 : string = "clap::Command::subcommand($0, v634)"
    let v636 : clap_Command = Fable.Core.RustInterop.emitRustExpr v457 v635 
    let v637 : string = "typescript"
    let v638 : string = "r#\"" + v637 + "\"#"
    let v639 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v638 
    let v640 : string = "clap::Command::new($0)"
    let v641 : clap_Command = Fable.Core.RustInterop.emitRustExpr v639 v640 
    let v642 : string = "r#\"" + v429 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "clap::Arg::new($0)"
    let v645 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let v646 : string = "$0.short($1)"
    let v647 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v645, 'f') v646 
    let v648 : string = "r#\"" + v429 + "\"#"
    let v649 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v648 
    let v650 : string = "$0.long($1)"
    let v651 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v647, v649) v650 
    let v652 : string = "$0.required($1)"
    let v653 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v651, true) v652 
    let v654 : string = "clap::Command::arg($0, $1)"
    let v655 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v641, v653) v654 
    let v656 : string = "r#\"" + v174 + "\"#"
    let v657 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v656 
    let v658 : string = "r#\"" + v177 + "\"#"
    let v659 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v658 
    let v660 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v657; v659|]
    let v662 : unativeint = 1 |> unativeint 
    let v666 : unativeint = 0 |> unativeint 
    let v670 : unativeint = 0 |> unativeint 
    let v674 : bool = v666 = v670 
    let v681 : clap_builder_ValueRange =
        if v674 then
            let v677 : string = "clap::builder::ValueRange::new($0..)"
            let v678 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v662 v677 
            v678
        else
            let v679 : string = "clap::builder::ValueRange::new($0.." + v563 + "$1)"
            let v680 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v662, v666) v679 
            v680
    let v682 : string = "r#\"" + v203 + "\"#"
    let v683 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v682 
    let v684 : string = "clap::Arg::new($0)"
    let v685 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v683 v684 
    let v686 : string = "$0.short($1)"
    let v687 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v685, 'd') v686 
    let v688 : string = "r#\"" + v203 + "\"#"
    let v689 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v688 
    let v690 : string = "$0.long($1)"
    let v691 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v687, v689) v690 
    let v692 : string = "$0.to_vec()"
    let v693 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v660 v692 
    let v694 : string = "$0.value_names($1)"
    let v695 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v691, v693) v694 
    let v696 : string = "$0.num_args($1)"
    let v697 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v695, v681) v696 
    let v698 : string = "clap::ArgAction::Append"
    let v699 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v698 
    let v700 : string = "$0.action($1)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v697, v699) v700 
    let v702 : string = "clap::Command::arg($0, $1)"
    let v703 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v655, v701) v702 
    let v704 : string = "clap::Command::subcommand($0, v703)"
    let v705 : clap_Command = Fable.Core.RustInterop.emitRustExpr v636 v704 
    let v706 : string = "python"
    let v707 : string = "r#\"" + v706 + "\"#"
    let v708 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v707 
    let v709 : string = "clap::Command::new($0)"
    let v710 : clap_Command = Fable.Core.RustInterop.emitRustExpr v708 v709 
    let v711 : string = "r#\"" + v429 + "\"#"
    let v712 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v711 
    let v713 : string = "clap::Arg::new($0)"
    let v714 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v712 v713 
    let v715 : string = "$0.short($1)"
    let v716 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v714, 'f') v715 
    let v717 : string = "r#\"" + v429 + "\"#"
    let v718 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v717 
    let v719 : string = "$0.long($1)"
    let v720 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v716, v718) v719 
    let v721 : string = "$0.required($1)"
    let v722 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v720, true) v721 
    let v723 : string = "clap::Command::arg($0, $1)"
    let v724 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v710, v722) v723 
    let v725 : string = "r#\"" + v174 + "\"#"
    let v726 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v725 
    let v727 : string = "r#\"" + v177 + "\"#"
    let v728 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v727 
    let v729 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v726; v728|]
    let v731 : unativeint = 1 |> unativeint 
    let v735 : unativeint = 0 |> unativeint 
    let v739 : unativeint = 0 |> unativeint 
    let v743 : bool = v735 = v739 
    let v750 : clap_builder_ValueRange =
        if v743 then
            let v746 : string = "clap::builder::ValueRange::new($0..)"
            let v747 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v731 v746 
            v747
        else
            let v748 : string = "clap::builder::ValueRange::new($0.." + v563 + "$1)"
            let v749 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v731, v735) v748 
            v749
    let v751 : string = "r#\"" + v203 + "\"#"
    let v752 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v751 
    let v753 : string = "clap::Arg::new($0)"
    let v754 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v752 v753 
    let v755 : string = "$0.short($1)"
    let v756 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v754, 'd') v755 
    let v757 : string = "r#\"" + v203 + "\"#"
    let v758 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v757 
    let v759 : string = "$0.long($1)"
    let v760 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v756, v758) v759 
    let v761 : string = "$0.to_vec()"
    let v762 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v729 v761 
    let v763 : string = "$0.value_names($1)"
    let v764 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v760, v762) v763 
    let v765 : string = "$0.num_args($1)"
    let v766 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v764, v750) v765 
    let v767 : string = "clap::ArgAction::Append"
    let v768 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v767 
    let v769 : string = "$0.action($1)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v766, v768) v769 
    let v771 : string = "clap::Command::arg($0, $1)"
    let v772 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v724, v770) v771 
    let v773 : string = "clap::Command::subcommand($0, v772)"
    let v774 : clap_Command = Fable.Core.RustInterop.emitRustExpr v705 v773 
    let v775 : string = "dib"
    let v776 : string = "r#\"" + v775 + "\"#"
    let v777 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v776 
    let v778 : string = "clap::Command::new($0)"
    let v779 : clap_Command = Fable.Core.RustInterop.emitRustExpr v777 v778 
    let v780 : string = "path"
    let v781 : string = "r#\"" + v780 + "\"#"
    let v782 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v781 
    let v783 : string = "clap::Arg::new($0)"
    let v784 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v782 v783 
    let v785 : string = "$0.short($1)"
    let v786 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v784, 'p') v785 
    let v787 : string = "r#\"" + v780 + "\"#"
    let v788 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v787 
    let v789 : string = "$0.long($1)"
    let v790 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v786, v788) v789 
    let v791 : string = "$0.required($1)"
    let v792 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v790, true) v791 
    let v793 : string = "clap::Command::arg($0, $1)"
    let v794 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v779, v792) v793 
    let v795 : string = "u8"
    let v796 : string = "clap::value_parser!(" + v795 + ").into()"
    let v797 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v796 
    let v798 : string = "retries"
    let v799 : string = "r#\"" + v798 + "\"#"
    let v800 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v799 
    let v801 : string = "clap::Arg::new($0)"
    let v802 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v800 v801 
    let v803 : string = "$0.short($1)"
    let v804 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v802, 'r') v803 
    let v805 : string = "r#\"" + v798 + "\"#"
    let v806 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v805 
    let v807 : string = "$0.long($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v804, v806) v807 
    let v809 : string = "$0.value_parser($1)"
    let v810 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v797) v809 
    let v811 : string = "clap::Command::arg($0, $1)"
    let v812 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v794, v810) v811 
    let v813 : string = "working-directory"
    let v814 : string = "r#\"" + v813 + "\"#"
    let v815 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v814 
    let v816 : string = "clap::Arg::new($0)"
    let v817 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v815 v816 
    let v818 : string = "$0.short($1)"
    let v819 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v817, 'w') v818 
    let v820 : string = "r#\"" + v813 + "\"#"
    let v821 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v820 
    let v822 : string = "$0.long($1)"
    let v823 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v819, v821) v822 
    let v824 : string = "clap::Command::arg($0, $1)"
    let v825 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v812, v823) v824 
    let v826 : string = "clap::Command::subcommand($0, v825)"
    let v827 : clap_Command = Fable.Core.RustInterop.emitRustExpr v774 v826 
    v827
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = method4(v0)
    let v7 : string = "std::env::var(&*$0)"
    let v8 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "x"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::String_::fromString($0)"
    let v14 : string = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; $0 })"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "_result_map_"
    let v18 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = method5()
    let v20 : string = "$0.unwrap_or($1)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr struct (v18, v19) v20 
    let _run_target_args'_v5 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US3 = US3_1
    let v23 : US4 = US4_3(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _run_target_args'_v5 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : US3 = US3_2
    let v27 : US4 = US4_3(v26)
    let v28 : string = $"env.get_environment_variable / target: {v27} / var: {v0}"
    let v29 : string = failwith<string> v28
    let _run_target_args'_v5 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : string = "process.env[$0] ?? \"\""
    let v31 : string = Fable.Core.JsInterop.emitJsExpr v0 v30 
    let _run_target_args'_v5 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : string = "os"
    let v34 : IOsEnviron = Fable.Core.PyInterop.importAll v33 
    let v35 : string = "v34.environ"
    let v36 : obj = Fable.Core.PyInterop.emitPyExpr () v35 
    let v40 : string = "v36.get($0)"
    let v41 : string = Fable.Core.PyInterop.emitPyExpr v0 v40 
    let mutable _v41 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v45 : (string -> string option) = Option.ofObj
    let v46 : string option = v45 v41
    v46 
    #else
    Some v41 
    #endif
    |> fun x -> _v41 <- Some x
    let v47 : string option = match _v41 with Some x -> x | None -> failwith "optionm'.of_obj / _v41=None"
    let v52 : (string -> US5) = method6()
    let v53 : US5 option = v47 |> Option.map v52 
    let v67 : US5 = US5_1
    let v68 : US5 = v53 |> Option.defaultValue v67 
    let v75 : string =
        match v68 with
        | US5_1 -> (* None *)
            let v73 : string = ""
            v73
        | US5_0(v72) -> (* Some *)
            v72
    let _run_target_args'_v5 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : US3 = US3_1
    let v77 : US4 = US4_1(v76)
    let v78 : string = $"env.get_environment_variable / target: {v77} / var: {v0}"
    let v79 : string = failwith<string> v78
    let _run_target_args'_v5 = v79 
    #endif
#else
    let v80 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v81 : string = v80 v0
    let mutable _v81 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v83 : (string -> string option) = Option.ofObj
    let v84 : string option = v83 v81
    v84 
    #else
    Some v81 
    #endif
    |> fun x -> _v81 <- Some x
    let v85 : string option = match _v81 with Some x -> x | None -> failwith "optionm'.of_obj / _v81=None"
    let v90 : (string -> US5) = method6()
    let v91 : US5 option = v85 |> Option.map v90 
    let v105 : US5 = US5_1
    let v106 : US5 = v91 |> Option.defaultValue v105 
    let v113 : string =
        match v106 with
        | US5_1 -> (* None *)
            let v111 : string = ""
            v111
        | US5_0(v110) -> (* Some *)
            v110
    let _run_target_args'_v5 = v113 
    #endif
    let v114 : string = _run_target_args'_v5 
    v114
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v3 : string = "Critical"
    let v4 : (unit -> string) = v3.ToLower
    let v5 : string = v4 ()
    let v9 : string = "Warning"
    let v10 : (unit -> string) = v9.ToLower
    let v11 : string = v10 ()
    let v15 : string = "Info"
    let v16 : (unit -> string) = v15.ToLower
    let v17 : string = v16 ()
    let v21 : string = "Debug"
    let v22 : (unit -> string) = v21.ToLower
    let v23 : string = v22 ()
    let v27 : string = "Verbose"
    let v28 : (unit -> string) = v27.ToLower
    let v29 : string = v28 ()
    let v32 : bool = "Verbose" = v1
    let v36 : US1 =
        if v32 then
            let v33 : US0 = US0_0
            US1_0(v33)
        else
            US1_1
    let v122 : US1 =
        match v36 with
        | US1_1 -> (* None *)
            let v39 : bool = "Debug" = v1
            let v43 : US1 =
                if v39 then
                    let v40 : US0 = US0_1
                    US1_0(v40)
                else
                    US1_1
            match v43 with
            | US1_1 -> (* None *)
                let v46 : bool = "Info" = v1
                let v50 : US1 =
                    if v46 then
                        let v47 : US0 = US0_2
                        US1_0(v47)
                    else
                        US1_1
                match v50 with
                | US1_1 -> (* None *)
                    let v53 : bool = "Warning" = v1
                    let v57 : US1 =
                        if v53 then
                            let v54 : US0 = US0_3
                            US1_0(v54)
                        else
                            US1_1
                    match v57 with
                    | US1_1 -> (* None *)
                        let v60 : bool = "Critical" = v1
                        let v64 : US1 =
                            if v60 then
                                let v61 : US0 = US0_4
                                US1_0(v61)
                            else
                                US1_1
                        match v64 with
                        | US1_1 -> (* None *)
                            let v67 : bool = v29 = v1
                            let v71 : US1 =
                                if v67 then
                                    let v68 : US0 = US0_0
                                    US1_0(v68)
                                else
                                    US1_1
                            match v71 with
                            | US1_1 -> (* None *)
                                let v74 : bool = v23 = v1
                                let v78 : US1 =
                                    if v74 then
                                        let v75 : US0 = US0_1
                                        US1_0(v75)
                                    else
                                        US1_1
                                match v78 with
                                | US1_1 -> (* None *)
                                    let v81 : bool = v17 = v1
                                    let v85 : US1 =
                                        if v81 then
                                            let v82 : US0 = US0_2
                                            US1_0(v82)
                                        else
                                            US1_1
                                    match v85 with
                                    | US1_1 -> (* None *)
                                        let v88 : bool = v11 = v1
                                        let v92 : US1 =
                                            if v88 then
                                                let v89 : US0 = US0_3
                                                US1_0(v89)
                                            else
                                                US1_1
                                        match v92 with
                                        | US1_1 -> (* None *)
                                            let v95 : bool = v5 = v1
                                            let v99 : US1 =
                                                if v95 then
                                                    let v96 : US0 = US0_4
                                                    US1_0(v96)
                                                else
                                                    US1_1
                                            match v99 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v100) -> (* Some *)
                                                US1_0(v100)
                                        | US1_0(v93) -> (* Some *)
                                            US1_0(v93)
                                    | US1_0(v86) -> (* Some *)
                                        US1_0(v86)
                                | US1_0(v79) -> (* Some *)
                                    US1_0(v79)
                            | US1_0(v72) -> (* Some *)
                                US1_0(v72)
                        | US1_0(v65) -> (* Some *)
                            US1_0(v65)
                    | US1_0(v58) -> (* Some *)
                        US1_0(v58)
                | US1_0(v51) -> (* Some *)
                    US1_0(v51)
            | US1_0(v44) -> (* Some *)
                US1_0(v44)
        | US1_0(v37) -> (* Some *)
            US1_0(v37)
    let v123 : string = "AUTOMATION"
    let v124 : string = method3(v123)
    let v127 : string = "True"
    let v128 : bool = v124 <> v127 
    let v195 : US2 =
        if v128 then
            US2_1
        else
            (* run_target_args'
            let v134 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v135 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v135 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v136 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v136 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v138 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v134 = v138 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v141 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v141 
            #endif
#if FABLE_COMPILER_PYTHON
            let v142 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v142 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v143 
            #endif
#else
            let v144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v134 = v144 
            #endif
            let v145 : System.DateTime = _run_target_args'_v134 
            (* run_target_args'
            let v153 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v154 : (System.DateTime -> int64) = _.Ticks
            let v155 : int64 = v154 v145
            let _run_target_args'_v153 = v155 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v156 : (System.DateTime -> int64) = _.Ticks
            let v157 : int64 = v156 v145
            let _run_target_args'_v153 = v157 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v159 : int64 = null |> unbox<int64>
            let _run_target_args'_v153 = v159 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v162 : (System.DateTime -> int64) = _.Ticks
            let v163 : int64 = v162 v145
            let _run_target_args'_v153 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : (System.DateTime -> int64) = _.Ticks
            let v165 : int64 = v164 v145
            let _run_target_args'_v153 = v165 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v166 : (System.DateTime -> int64) = _.Ticks
            let v167 : int64 = v166 v145
            let _run_target_args'_v153 = v167 
            #endif
#else
            let v168 : (System.DateTime -> int64) = _.Ticks
            let v169 : int64 = v168 v145
            let _run_target_args'_v153 = v169 
            #endif
            let v170 : int64 = _run_target_args'_v153 
            let v191 : int64 = v170 |> int64 
            US2_0(v191)
    struct (v122, v195)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v13 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v51 
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "String::from($0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v65 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v65 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v73 
    #endif
#else
    let v77 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v77 
    #endif
    let v80 : std_string_String = _run_target_args'_v57 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v13 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v88 
    (* run_target_args'
    let v94 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v95 
    let _run_target_args'_v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v97 
    let _run_target_args'_v94 = v98 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v99 
    let _run_target_args'_v94 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v110 
    #endif
#else
    let v114 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v114 
    #endif
    let v117 : std_string_String = _run_target_args'_v94 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v117 v123 
    let _run_target_args'_v13 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v126 : string = null |> unbox<string>
    let _run_target_args'_v13 = v126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v13 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v134 : string = null |> unbox<string>
    let _run_target_args'_v13 = v134 
    #endif
#else
    let v138 : string = null |> unbox<string>
    let _run_target_args'_v13 = v138 
    #endif
    let v141 : string = _run_target_args'_v13 
    let v149 : string = "True"
    let v150 : bool = v141 <> v149 
    let v162 : US2 =
        if v150 then
            US2_1
        else
            let v154 : string = $"near_sdk::env::block_timestamp()"
            let v155 : uint64 = Fable.Core.RustInterop.emitRustExpr () v154 
            let v157 : (uint64 -> int64) = int64
            let v158 : int64 = v157 v155
            US2_0(v158)
    let v163 : US1 = US1_1
    let _run_target_args'_v3 = struct (v163, v162) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v164 : US1, v165 : US2) = method2()
    let _run_target_args'_v3 = struct (v164, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v166 : US1, v167 : US2) = method2()
    let _run_target_args'_v3 = struct (v166, v167) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v168 : US1, v169 : US2) = method2()
    let _run_target_args'_v3 = struct (v168, v169) 
    #endif
#else
    let struct (v170 : US1, v171 : US2) = method2()
    let _run_target_args'_v3 = struct (v170, v171) 
    #endif
    let struct (v172 : US1, v173 : US2) = _run_target_args'_v3 
    let v178 : Mut0 = {l0 = 1L} : Mut0
    let v179 : (string -> unit) = closure4()
    let v180 : Mut1 = {l0 = v179} : Mut1
    let v181 : Mut2 = {l0 = true} : Mut2
    let v182 : string = ""
    let v183 : Mut3 = {l0 = v182} : Mut3
    let v186 : US0 =
        match v172 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v184) -> (* Some *)
            v184
    let v187 : Mut4 = {l0 = v186} : Mut4
    let v195 : int64 option =
        match v173 with
        | US2_1 -> (* None *)
            let v193 : int64 option = None
            v193
        | US2_0(v188) -> (* Some *)
            let v190 : int64 option = Some v188 
            v190
    struct (v178, v180, v181, v183, v187, v195)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : US0 = v28.l0
    let v43 : bool = v26.l0
    let v44 : bool = v43 = false
    if v44 then
        false
    else
        let v45 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v46 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v42
        let v47 : bool = v45 >= v46
        v47
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v170 : (int64 -> US2) = method9()
    let v171 : US2 option = v5 |> Option.map v170 
    let v185 : US2 = US2_1
    let v186 : US2 = v171 |> Option.defaultValue v185 
    let v304 : System.DateTime =
        match v186 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v287 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v288 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v288 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v289 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v289 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v291 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v287 = v291 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v294 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v294 
            #endif
#if FABLE_COMPILER_PYTHON
            let v295 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v295 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v296 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v296 
            #endif
#else
            let v297 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v297 
            #endif
            let v298 : System.DateTime = _run_target_args'_v287 
            v298
        | US2_0(v190) -> (* Some *)
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v193 = v197 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v200 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v200 
            #endif
#if FABLE_COMPILER_PYTHON
            let v201 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v201 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v202 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v202 
            #endif
#else
            let v203 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v203 
            #endif
            let v204 : System.DateTime = _run_target_args'_v193 
            (* run_target_args'
            let v212 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v213 : (System.DateTime -> int64) = _.Ticks
            let v214 : int64 = v213 v204
            let _run_target_args'_v212 = v214 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v215 : (System.DateTime -> int64) = _.Ticks
            let v216 : int64 = v215 v204
            let _run_target_args'_v212 = v216 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : int64 = null |> unbox<int64>
            let _run_target_args'_v212 = v218 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : (System.DateTime -> int64) = _.Ticks
            let v222 : int64 = v221 v204
            let _run_target_args'_v212 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v223 : (System.DateTime -> int64) = _.Ticks
            let v224 : int64 = v223 v204
            let _run_target_args'_v212 = v224 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v225 : (System.DateTime -> int64) = _.Ticks
            let v226 : int64 = v225 v204
            let _run_target_args'_v212 = v226 
            #endif
#else
            let v227 : (System.DateTime -> int64) = _.Ticks
            let v228 : int64 = v227 v204
            let _run_target_args'_v212 = v228 
            #endif
            let v229 : int64 = _run_target_args'_v212 
            let v250 : int64 = v229 |> int64 
            let v253 : int64 = v250 - v190
            let v256 : System.TimeSpan = v253 |> System.TimeSpan 
            let v262 : (System.TimeSpan -> int32) = _.Hours
            let v263 : int32 = v262 v256
            let v267 : (System.TimeSpan -> int32) = _.Minutes
            let v268 : int32 = v267 v256
            let v272 : (System.TimeSpan -> int32) = _.Seconds
            let v273 : int32 = v272 v256
            let v277 : (System.TimeSpan -> int32) = _.Milliseconds
            let v278 : int32 = v277 v256
            let v282 : System.DateTime = System.DateTime (1, 1, 1, v263, v268, v273, v278)
            v282
    let v306 : string = method10()
    let v310 : bool = v306 = ""
    let v312 : string =
        if v310 then
            let v311 : string = "M-d-y hh:mm:ss tt"
            v311
        else
            v306
    let v313 : (string -> string) = v304.ToString
    let v314 : string = v313 v312
    let _run_target_args'_v167 = v314 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v331 : (int64 -> US2) = method9()
    let v332 : US2 option = v5 |> Option.map v331 
    let v346 : US2 = US2_1
    let v347 : US2 = v332 |> Option.defaultValue v346 
    let v465 : System.DateTime =
        match v347 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v448 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v449 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v449 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v450 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v450 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v452 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v448 = v452 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v455 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v455 
            #endif
#if FABLE_COMPILER_PYTHON
            let v456 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v456 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v457 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v457 
            #endif
#else
            let v458 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v458 
            #endif
            let v459 : System.DateTime = _run_target_args'_v448 
            v459
        | US2_0(v351) -> (* Some *)
            (* run_target_args'
            let v354 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v355 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v355 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v356 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v356 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v358 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v354 = v358 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v361 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v361 
            #endif
#if FABLE_COMPILER_PYTHON
            let v362 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v362 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v363 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v363 
            #endif
#else
            let v364 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v364 
            #endif
            let v365 : System.DateTime = _run_target_args'_v354 
            (* run_target_args'
            let v373 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v374 : (System.DateTime -> int64) = _.Ticks
            let v375 : int64 = v374 v365
            let _run_target_args'_v373 = v375 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v376 : (System.DateTime -> int64) = _.Ticks
            let v377 : int64 = v376 v365
            let _run_target_args'_v373 = v377 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v379 : int64 = null |> unbox<int64>
            let _run_target_args'_v373 = v379 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v382 : (System.DateTime -> int64) = _.Ticks
            let v383 : int64 = v382 v365
            let _run_target_args'_v373 = v383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v384 : (System.DateTime -> int64) = _.Ticks
            let v385 : int64 = v384 v365
            let _run_target_args'_v373 = v385 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v386 : (System.DateTime -> int64) = _.Ticks
            let v387 : int64 = v386 v365
            let _run_target_args'_v373 = v387 
            #endif
#else
            let v388 : (System.DateTime -> int64) = _.Ticks
            let v389 : int64 = v388 v365
            let _run_target_args'_v373 = v389 
            #endif
            let v390 : int64 = _run_target_args'_v373 
            let v411 : int64 = v390 |> int64 
            let v414 : int64 = v411 - v351
            let v417 : System.TimeSpan = v414 |> System.TimeSpan 
            let v423 : (System.TimeSpan -> int32) = _.Hours
            let v424 : int32 = v423 v417
            let v428 : (System.TimeSpan -> int32) = _.Minutes
            let v429 : int32 = v428 v417
            let v433 : (System.TimeSpan -> int32) = _.Seconds
            let v434 : int32 = v433 v417
            let v438 : (System.TimeSpan -> int32) = _.Milliseconds
            let v439 : int32 = v438 v417
            let v443 : System.DateTime = System.DateTime (1, 1, 1, v424, v429, v434, v439)
            v443
    let v467 : string = method10()
    let v471 : bool = v467 = ""
    let v473 : string =
        if v471 then
            let v472 : string = "M-d-y hh:mm:ss tt"
            v472
        else
            v467
    let v474 : (string -> string) = v465.ToString
    let v475 : string = v474 v473
    let _run_target_args'_v167 = v475 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v490 : string = $"near_sdk::env::block_timestamp()"
    let v491 : uint64 = Fable.Core.RustInterop.emitRustExpr () v490 
    let v494 : (int64 -> US2) = method9()
    let v495 : US2 option = v5 |> Option.map v494 
    let v509 : US2 = US2_1
    let v510 : US2 = v495 |> Option.defaultValue v509 
    let v522 : uint64 =
        match v510 with
        | US2_1 -> (* None *)
            v491
        | US2_0(v514) -> (* Some *)
            let v516 : (int64 -> uint64) = uint64
            let v517 : uint64 = v516 v514
            let v520 : uint64 = v491 - v517
            v520
    let v523 : uint64 = v522 / 1000000000UL
    let v524 : uint64 = v523 % 60UL
    let v525 : uint64 = v523 / 60UL
    let v526 : uint64 = v525 % 60UL
    let v527 : uint64 = v523 / 3600UL
    let v528 : uint64 = v527 % 24UL
    let v529 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v530 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v528, v526, v524) v529 
    let v531 : string = "fable_library_rust::String_::fromString($0)"
    let v532 : string = Fable.Core.RustInterop.emitRustExpr v530 v531 
    let _run_target_args'_v167 = v532 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v535 : (int64 -> US2) = method9()
    let v536 : US2 option = v5 |> Option.map v535 
    let v550 : US2 = US2_1
    let v551 : US2 = v536 |> Option.defaultValue v550 
    let v669 : System.DateTime =
        match v551 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v652 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v653 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v653 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v654 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v654 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v656 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v652 = v656 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v659 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v659 
            #endif
#if FABLE_COMPILER_PYTHON
            let v660 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v660 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v661 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v661 
            #endif
#else
            let v662 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v662 
            #endif
            let v663 : System.DateTime = _run_target_args'_v652 
            v663
        | US2_0(v555) -> (* Some *)
            (* run_target_args'
            let v558 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v559 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v559 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v560 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v560 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v562 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v558 = v562 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v565 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v565 
            #endif
#if FABLE_COMPILER_PYTHON
            let v566 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v566 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v567 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v567 
            #endif
#else
            let v568 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v568 
            #endif
            let v569 : System.DateTime = _run_target_args'_v558 
            (* run_target_args'
            let v577 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v578 : (System.DateTime -> int64) = _.Ticks
            let v579 : int64 = v578 v569
            let _run_target_args'_v577 = v579 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v580 : (System.DateTime -> int64) = _.Ticks
            let v581 : int64 = v580 v569
            let _run_target_args'_v577 = v581 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v583 : int64 = null |> unbox<int64>
            let _run_target_args'_v577 = v583 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v586 : (System.DateTime -> int64) = _.Ticks
            let v587 : int64 = v586 v569
            let _run_target_args'_v577 = v587 
            #endif
#if FABLE_COMPILER_PYTHON
            let v588 : (System.DateTime -> int64) = _.Ticks
            let v589 : int64 = v588 v569
            let _run_target_args'_v577 = v589 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v590 : (System.DateTime -> int64) = _.Ticks
            let v591 : int64 = v590 v569
            let _run_target_args'_v577 = v591 
            #endif
#else
            let v592 : (System.DateTime -> int64) = _.Ticks
            let v593 : int64 = v592 v569
            let _run_target_args'_v577 = v593 
            #endif
            let v594 : int64 = _run_target_args'_v577 
            let v615 : int64 = v594 |> int64 
            let v618 : int64 = v615 - v555
            let v621 : System.TimeSpan = v618 |> System.TimeSpan 
            let v627 : (System.TimeSpan -> int32) = _.Hours
            let v628 : int32 = v627 v621
            let v632 : (System.TimeSpan -> int32) = _.Minutes
            let v633 : int32 = v632 v621
            let v637 : (System.TimeSpan -> int32) = _.Seconds
            let v638 : int32 = v637 v621
            let v642 : (System.TimeSpan -> int32) = _.Milliseconds
            let v643 : int32 = v642 v621
            let v647 : System.DateTime = System.DateTime (1, 1, 1, v628, v633, v638, v643)
            v647
    let v671 : string = method11()
    let v675 : bool = v671 = ""
    let v677 : string =
        if v675 then
            let v676 : string = "M-d-y hh:mm:ss tt"
            v676
        else
            v671
    let v678 : (string -> string) = v669.ToString
    let v679 : string = v678 v677
    let _run_target_args'_v167 = v679 
    #endif
#if FABLE_COMPILER_PYTHON
    let v696 : (int64 -> US2) = method9()
    let v697 : US2 option = v5 |> Option.map v696 
    let v711 : US2 = US2_1
    let v712 : US2 = v697 |> Option.defaultValue v711 
    let v830 : System.DateTime =
        match v712 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v813 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v814 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v814 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v815 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v815 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v817 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v813 = v817 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v820 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v820 
            #endif
#if FABLE_COMPILER_PYTHON
            let v821 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v821 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v822 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v822 
            #endif
#else
            let v823 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v823 
            #endif
            let v824 : System.DateTime = _run_target_args'_v813 
            v824
        | US2_0(v716) -> (* Some *)
            (* run_target_args'
            let v719 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v720 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v720 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v721 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v721 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v723 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v719 = v723 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v726 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v726 
            #endif
#if FABLE_COMPILER_PYTHON
            let v727 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v727 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v728 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v728 
            #endif
#else
            let v729 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v729 
            #endif
            let v730 : System.DateTime = _run_target_args'_v719 
            (* run_target_args'
            let v738 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v739 : (System.DateTime -> int64) = _.Ticks
            let v740 : int64 = v739 v730
            let _run_target_args'_v738 = v740 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v741 : (System.DateTime -> int64) = _.Ticks
            let v742 : int64 = v741 v730
            let _run_target_args'_v738 = v742 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v744 : int64 = null |> unbox<int64>
            let _run_target_args'_v738 = v744 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v747 : (System.DateTime -> int64) = _.Ticks
            let v748 : int64 = v747 v730
            let _run_target_args'_v738 = v748 
            #endif
#if FABLE_COMPILER_PYTHON
            let v749 : (System.DateTime -> int64) = _.Ticks
            let v750 : int64 = v749 v730
            let _run_target_args'_v738 = v750 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v751 : (System.DateTime -> int64) = _.Ticks
            let v752 : int64 = v751 v730
            let _run_target_args'_v738 = v752 
            #endif
#else
            let v753 : (System.DateTime -> int64) = _.Ticks
            let v754 : int64 = v753 v730
            let _run_target_args'_v738 = v754 
            #endif
            let v755 : int64 = _run_target_args'_v738 
            let v776 : int64 = v755 |> int64 
            let v779 : int64 = v776 - v716
            let v782 : System.TimeSpan = v779 |> System.TimeSpan 
            let v788 : (System.TimeSpan -> int32) = _.Hours
            let v789 : int32 = v788 v782
            let v793 : (System.TimeSpan -> int32) = _.Minutes
            let v794 : int32 = v793 v782
            let v798 : (System.TimeSpan -> int32) = _.Seconds
            let v799 : int32 = v798 v782
            let v803 : (System.TimeSpan -> int32) = _.Milliseconds
            let v804 : int32 = v803 v782
            let v808 : System.DateTime = System.DateTime (1, 1, 1, v789, v794, v799, v804)
            v808
    let v832 : string = method11()
    let v836 : bool = v832 = ""
    let v838 : string =
        if v836 then
            let v837 : string = "M-d-y hh:mm:ss tt"
            v837
        else
            v832
    let v839 : (string -> string) = v830.ToString
    let v840 : string = v839 v838
    let _run_target_args'_v167 = v840 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v857 : (int64 -> US2) = method9()
    let v858 : US2 option = v5 |> Option.map v857 
    let v872 : US2 = US2_1
    let v873 : US2 = v858 |> Option.defaultValue v872 
    let v991 : System.DateTime =
        match v873 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v974 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v975 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v975 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v976 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v976 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v978 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v974 = v978 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v981 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v981 
            #endif
#if FABLE_COMPILER_PYTHON
            let v982 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v982 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v983 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v983 
            #endif
#else
            let v984 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v984 
            #endif
            let v985 : System.DateTime = _run_target_args'_v974 
            v985
        | US2_0(v877) -> (* Some *)
            (* run_target_args'
            let v880 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v881 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v881 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v882 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v882 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v884 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v880 = v884 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v887 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v887 
            #endif
#if FABLE_COMPILER_PYTHON
            let v888 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v888 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v889 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v889 
            #endif
#else
            let v890 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v890 
            #endif
            let v891 : System.DateTime = _run_target_args'_v880 
            (* run_target_args'
            let v899 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v900 : (System.DateTime -> int64) = _.Ticks
            let v901 : int64 = v900 v891
            let _run_target_args'_v899 = v901 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v902 : (System.DateTime -> int64) = _.Ticks
            let v903 : int64 = v902 v891
            let _run_target_args'_v899 = v903 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v905 : int64 = null |> unbox<int64>
            let _run_target_args'_v899 = v905 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v908 : (System.DateTime -> int64) = _.Ticks
            let v909 : int64 = v908 v891
            let _run_target_args'_v899 = v909 
            #endif
#if FABLE_COMPILER_PYTHON
            let v910 : (System.DateTime -> int64) = _.Ticks
            let v911 : int64 = v910 v891
            let _run_target_args'_v899 = v911 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v912 : (System.DateTime -> int64) = _.Ticks
            let v913 : int64 = v912 v891
            let _run_target_args'_v899 = v913 
            #endif
#else
            let v914 : (System.DateTime -> int64) = _.Ticks
            let v915 : int64 = v914 v891
            let _run_target_args'_v899 = v915 
            #endif
            let v916 : int64 = _run_target_args'_v899 
            let v937 : int64 = v916 |> int64 
            let v940 : int64 = v937 - v877
            let v943 : System.TimeSpan = v940 |> System.TimeSpan 
            let v949 : (System.TimeSpan -> int32) = _.Hours
            let v950 : int32 = v949 v943
            let v954 : (System.TimeSpan -> int32) = _.Minutes
            let v955 : int32 = v954 v943
            let v959 : (System.TimeSpan -> int32) = _.Seconds
            let v960 : int32 = v959 v943
            let v964 : (System.TimeSpan -> int32) = _.Milliseconds
            let v965 : int32 = v964 v943
            let v969 : System.DateTime = System.DateTime (1, 1, 1, v950, v955, v960, v965)
            v969
    let v993 : string = method11()
    let v997 : bool = v993 = ""
    let v999 : string =
        if v997 then
            let v998 : string = "M-d-y hh:mm:ss tt"
            v998
        else
            v993
    let v1000 : (string -> string) = v991.ToString
    let v1001 : string = v1000 v999
    let _run_target_args'_v167 = v1001 
    #endif
#else
    let v1018 : (int64 -> US2) = method9()
    let v1019 : US2 option = v5 |> Option.map v1018 
    let v1033 : US2 = US2_1
    let v1034 : US2 = v1019 |> Option.defaultValue v1033 
    let v1152 : System.DateTime =
        match v1034 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1135 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1136 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1136 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1137 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1137 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1139 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1135 = v1139 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1142 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1142 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1143 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1144 
            #endif
#else
            let v1145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1145 
            #endif
            let v1146 : System.DateTime = _run_target_args'_v1135 
            v1146
        | US2_0(v1038) -> (* Some *)
            (* run_target_args'
            let v1041 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1042 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1042 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1043 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1043 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1045 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1041 = v1045 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1048 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1048 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1049 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1049 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1050 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1050 
            #endif
#else
            let v1051 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1051 
            #endif
            let v1052 : System.DateTime = _run_target_args'_v1041 
            (* run_target_args'
            let v1060 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1061 : (System.DateTime -> int64) = _.Ticks
            let v1062 : int64 = v1061 v1052
            let _run_target_args'_v1060 = v1062 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1063 : (System.DateTime -> int64) = _.Ticks
            let v1064 : int64 = v1063 v1052
            let _run_target_args'_v1060 = v1064 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1066 : int64 = null |> unbox<int64>
            let _run_target_args'_v1060 = v1066 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1069 : (System.DateTime -> int64) = _.Ticks
            let v1070 : int64 = v1069 v1052
            let _run_target_args'_v1060 = v1070 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1071 : (System.DateTime -> int64) = _.Ticks
            let v1072 : int64 = v1071 v1052
            let _run_target_args'_v1060 = v1072 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1073 : (System.DateTime -> int64) = _.Ticks
            let v1074 : int64 = v1073 v1052
            let _run_target_args'_v1060 = v1074 
            #endif
#else
            let v1075 : (System.DateTime -> int64) = _.Ticks
            let v1076 : int64 = v1075 v1052
            let _run_target_args'_v1060 = v1076 
            #endif
            let v1077 : int64 = _run_target_args'_v1060 
            let v1098 : int64 = v1077 |> int64 
            let v1101 : int64 = v1098 - v1038
            let v1104 : System.TimeSpan = v1101 |> System.TimeSpan 
            let v1110 : (System.TimeSpan -> int32) = _.Hours
            let v1111 : int32 = v1110 v1104
            let v1115 : (System.TimeSpan -> int32) = _.Minutes
            let v1116 : int32 = v1115 v1104
            let v1120 : (System.TimeSpan -> int32) = _.Seconds
            let v1121 : int32 = v1120 v1104
            let v1125 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1126 : int32 = v1125 v1104
            let v1130 : System.DateTime = System.DateTime (1, 1, 1, v1111, v1116, v1121, v1126)
            v1130
    let v1154 : string = method11()
    let v1158 : bool = v1154 = ""
    let v1160 : string =
        if v1158 then
            let v1159 : string = "M-d-y hh:mm:ss tt"
            v1159
        else
            v1154
    let v1161 : (string -> string) = v1152.ToString
    let v1162 : string = v1161 v1160
    let _run_target_args'_v167 = v1162 
    #endif
    let v1177 : string = _run_target_args'_v167 
    v1177
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v1 : string = "Debug"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_blue"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_blue"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_blue"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[94m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[94m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[94m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[94m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "args"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"%A{v0}"
    let v38 : string = $"{v34}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v2, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v38 : char list = []
    let v40 : char list = '/' :: v38 
    let v44 : char list = ' ' :: v40 
    let v49 : (char list -> (char [])) = List.toArray
    let v50 : (char []) = v49 v44
    let v53 : string = v8.TrimEnd v50 
    v53
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.main"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure8(v24)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : (string -> unit) = closure9()
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = v27.l0
    let v52 : bool = v51 = ""
    let v60 : string =
        if v52 then
            v0
        else
            let v53 : bool = v0 = ""
            if v53 then
                let v54 : string = v27.l0
                v54
            else
                let v55 : string = v27.l0
                let v56 : string = "\n"
                let v57 : string = v55 + v56 
                let v58 : string = v57 + v0 
                v58
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "&*$0"
    let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "&*$0"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _run_target_args'_v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v81 
    #endif
#else
    let v85 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v85 
    #endif
    let v88 : Ref<Str> = _run_target_args'_v65 
    let v94 : string = $"$0.chars()"
    let v95 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let v96 : string = "$0"
    let v97 : _ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "$0.collect::<Vec<_>>()"
    let v99 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v101 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = "x"
    let v105 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v104 
    let v106 : string = "String::from_iter($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "true; $0 }).collect::<Vec<_>>()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_vec_map"
    let v111 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "$0.len()"
    let v113 : unativeint = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v119 : int32 = v113 |> int32 
    let v129 : string = ""
    let v130 : bool = v0 <> v129 
    let v134 : bool =
        if v130 then
            let v133 : bool = v119 <= 1
            v133
        else
            false
    if v134 then
        v27.l0 <- v60
        ()
    else
        v27.l0 <- v129
        let v135 : string = "true; $0.into_iter().for_each(|x| { //"
        let v136 : bool = Fable.Core.RustInterop.emitRustExpr v111 v135 
        let v137 : string = "x"
        let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v137 
        let v139 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v140 : bool = Fable.Core.RustInterop.emitRustExpr v138 v139 
        let v141 : string = $"true"
        let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
        let v143 : string = "true; }); //"
        let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v47 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#else
    v47 v0
    #endif
    // run_target_args' is_unit
    let v145 : (string -> unit) = v25.l0
    v145 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method16(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "target"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method28 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "extension"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "new_code"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method30 () : string =
    let v0 : string = ""
    v0
and method31 (v0 : string) : string =
    v0
and method32 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method33 () : string =
    let v0 : string = ""
    v0
and method29 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v107 : unit = ()
    let _let'_v107 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v110 : string seq = _let'_v107 
    let v116 : string = method30()
    let v118 : bool = v116 = "\n"
    let v120 : string =
        if v118 then
            method31(v116)
        else
            v116
    let v121 : (string -> (string seq -> string)) = String.concat
    let v122 : (string seq -> string) = v121 v120
    let v123 : string = v122 v110
    let v127 : Result<string, std_io_Error> = Ok v123 
    (* run_target_args'
    let v131 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v132 : string = "$0.unwrap()"
    let v133 : string = Fable.Core.RustInterop.emitRustExpr v127 v132 
    let _run_target_args'_v131 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string = "$0.unwrap()"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v127 v134 
    let _run_target_args'_v131 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "$0.unwrap()"
    let v137 : string = Fable.Core.RustInterop.emitRustExpr v127 v136 
    let _run_target_args'_v131 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v138 : string = match v127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v131 = v138 
    #endif
#if FABLE_COMPILER_PYTHON
    let v139 : string = match v127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v131 = v139 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : string = match v127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v131 = v140 
    #endif
#else
    let v141 : string = match v127 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v131 = v141 
    #endif
    let v142 : string = _run_target_args'_v131 
    let _run_target_args'_v5 = v142 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = null |> unbox<string>
    let _run_target_args'_v5 = v146 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v150 : string = null |> unbox<string>
    let _run_target_args'_v5 = v150 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : string = "crypto"
    let v154 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v153 
    let v155 : string = "v154.createHash($0)"
    let v156 : string = "sha256"
    let v157 : obj = Fable.Core.JsInterop.emitJsExpr v156 v155 
    let v158 : string = "$0.update($1, 'utf8')"
    let v159 : obj = Fable.Core.JsInterop.emitJsExpr struct (v157, v0) v158 
    let v160 : string = "$0.digest($1)"
    let v161 : string = "hex"
    let v162 : string = Fable.Core.JsInterop.emitJsExpr struct (v159, v161) v160 
    let _run_target_args'_v5 = v162 
    #endif
#if FABLE_COMPILER_PYTHON
    let v164 : string = "hashlib"
    let v165 : IHashlibSha256 = Fable.Core.PyInterop.importAll v164 
    let v166 : string = "v165.sha256()"
    let v167 : obj = Fable.Core.PyInterop.emitPyExpr () v166 
    let v171 : string = "$0.encode($1)"
    let v172 : string = "utf-8"
    let v173 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v172) v171 
    let v176 : string = "v167.update($0)"
    Fable.Core.PyInterop.emitPyExpr v173 v176 
    let v178 : string = "v167.hexdigest()"
    let v179 : string = Fable.Core.PyInterop.emitPyExpr () v178 
    let _run_target_args'_v5 = v179 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v183 : string = null |> unbox<string>
    let _run_target_args'_v5 = v183 
    #endif
#else
    let v186 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v187 : System.Security.Cryptography.SHA256 = v186 ()
    use v187 = v187 
    let v188 : System.Security.Cryptography.SHA256 = v187 
    let v189 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v190 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v191 : (string -> (uint8 [])) = v190 v189
    let v192 : (uint8 []) = v191 v0
    let v193 : ((uint8 []) -> (uint8 [])) = v188.ComputeHash
    let v194 : (uint8 []) = v193 v192
    let v195 : int32 = v194.Length
    let v196 : (string []) = Array.zeroCreate<string> (v195)
    let v197 : Mut5 = {l0 = 0} : Mut5
    while method32(v195, v197) do
        let v199 : int32 = v197.l0
        let v200 : uint8 = v194.[int v199]
        let v201 : (string -> string) = v200.ToString
        let v202 : string = "x2"
        let v203 : string = v201 v202
        v196.[int v199] <- v203
        let v204 : int32 = v199 + 1
        v197.l0 <- v204
        ()
    let v208 : unit = ()
    let _let'_v208 =
        seq {
            for i = 0 to v196.Length - 1 do yield v196.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v211 : string seq = _let'_v208 
    let v217 : string = method33()
    let v219 : bool = v217 = "\n"
    let v221 : string =
        if v219 then
            method31(v217)
        else
            v217
    let v222 : (string -> (string seq -> string)) = String.concat
    let v223 : (string seq -> string) = v222 v221
    let v224 : string = v223 v211
    let _run_target_args'_v5 = v224 
    #endif
    let v227 : string = _run_target_args'_v5 
    v227
and method34 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v59 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "format!(\"{}\", $0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v60 
    let _run_target_args'_v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "format!(\"{}\", $0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v62 
    let _run_target_args'_v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "format!(\"{}\", $0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v64 
    let _run_target_args'_v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v75 
    #endif
#else
    let v79 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v59 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v4 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = null |> unbox<string>
    let _run_target_args'_v4 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = "fs"
    let v99 : IFs = Fable.Core.JsInterop.importAll v98 
    let v100 : string = "fs.realpathSync('.')"
    let v101 : string = Fable.Core.JsInterop.emitJsExpr () v100 
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : string = null |> unbox<string>
    let _run_target_args'_v4 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = null |> unbox<string>
    let _run_target_args'_v4 = v107 
    #endif
#else
    let v110 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v111 : string = v110 ()
    let _run_target_args'_v4 = v111 
    #endif
    let v112 : string = _run_target_args'_v4 
    v112
and method36 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v44 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v45 
    let _run_target_args'_v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v47 
    let _run_target_args'_v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v49 
    let _run_target_args'_v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v60 
    #endif
#else
    let v64 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v64 
    #endif
    let v67 : std_string_String = _run_target_args'_v44 
    (* run_target_args'
    let v77 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v78 
    let _run_target_args'_v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "std::path::PathBuf::from($0)"
    let v81 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v80 
    let _run_target_args'_v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "std::path::PathBuf::from($0)"
    let v83 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v82 
    let _run_target_args'_v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v93 
    #endif
#else
    let v97 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v97 
    #endif
    let v100 : std_path_PathBuf = _run_target_args'_v77 
    (* run_target_args'
    let v110 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v111 
    let _run_target_args'_v110 = v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v113 
    let _run_target_args'_v110 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v115 
    let _run_target_args'_v110 = v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v126 
    #endif
#else
    let v130 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v130 
    #endif
    let v133 : Ref<Str> = _run_target_args'_v110 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v144 
    let _run_target_args'_v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v146 
    let _run_target_args'_v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "String::from($0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v148 
    let _run_target_args'_v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v159 
    #endif
#else
    let v163 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v163 
    #endif
    let v166 : std_string_String = _run_target_args'_v143 
    let v172 : string = "$0.join($1)"
    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v100, v166) v172 
    (* run_target_args'
    let v178 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v179 : string = "$0.display()"
    let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
    let _run_target_args'_v178 = v180 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = "$0.display()"
    let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
    let _run_target_args'_v178 = v182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v183 : string = "$0.display()"
    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
    let _run_target_args'_v178 = v184 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v186 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v186 
    #endif
#if FABLE_COMPILER_PYTHON
    let v190 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v190 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v194 
    #endif
#else
    let v198 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v198 
    #endif
    let v201 : std_path_Display = _run_target_args'_v178 
    (* run_target_args'
    let v211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v212 : string = "format!(\"{}\", $0)"
    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v212 
    let _run_target_args'_v211 = v213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v214 : string = "format!(\"{}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v214 
    let _run_target_args'_v211 = v215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v216 : string = "format!(\"{}\", $0)"
    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v216 
    let _run_target_args'_v211 = v217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v219 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v227 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v227 
    #endif
#else
    let v231 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v231 
    #endif
    let v234 : std_string_String = _run_target_args'_v211 
    let v240 : string = "fable_library_rust::String_::fromString($0)"
    let v241 : string = Fable.Core.RustInterop.emitRustExpr v234 v240 
    let _run_target_args'_v6 = v241 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v242 : US3 = US3_1
    let v243 : US4 = US4_3(v242)
    let v244 : string = $"file_system.(</>) / target: {v243} / a: {v0} / b: {v1}"
    let v245 : string = failwith<string> v244
    let _run_target_args'_v6 = v245 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = null |> unbox<string>
    let _run_target_args'_v6 = v247 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v250 : string = "path"
    let v251 : IPathJoin = Fable.Core.JsInterop.importAll v250 
    let v252 : string = "v251.join($0, $1)"
    let v253 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v252 
    let _run_target_args'_v6 = v253 
    #endif
#if FABLE_COMPILER_PYTHON
    let v254 : US3 = US3_0
    let v255 : US4 = US4_5(v254)
    let v256 : string = $"file_system.(</>) / target: {v255} / a: {v0} / b: {v1}"
    let v257 : string = failwith<string> v256
    let _run_target_args'_v6 = v257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v258 : US3 = US3_1
    let v259 : US4 = US4_1(v258)
    let v260 : string = $"file_system.(</>) / target: {v259} / a: {v0} / b: {v1}"
    let v261 : string = failwith<string> v260
    let _run_target_args'_v6 = v261 
    #endif
#else
    let v262 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v262 
    #endif
    let v263 : string = _run_target_args'_v6 
    v263
and method38 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_file()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.File.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure15 () (v0 : string) : bool =
    method38(v0)
and method39 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_dir()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.Directory.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure16 () (v0 : string) : bool =
    method39(v0)
and method41 (v0 : string) : string option =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v23 
    #endif
#else
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v27 
    #endif
    let v30 : Ref<Str> = _run_target_args'_v7 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
#else
    let v60 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v60 
    #endif
    let v63 : std_string_String = _run_target_args'_v40 
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "std::path::PathBuf::from($0)"
    let v75 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v74 
    let _run_target_args'_v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : string = "std::path::PathBuf::from($0)"
    let v77 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v78 
    let _run_target_args'_v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v89 
    #endif
#else
    let v93 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v93 
    #endif
    let v96 : std_path_PathBuf = _run_target_args'_v73 
    let v102 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v103 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let v104 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "x"
    let v107 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v106 
    (* run_target_args'
    let v112 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = "$0.display()"
    let v114 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v113 
    let _run_target_args'_v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = "$0.display()"
    let v116 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v115 
    let _run_target_args'_v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = "$0.display()"
    let v118 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v117 
    let _run_target_args'_v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v124 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v124 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v128 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v128 
    #endif
#else
    let v132 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v132 
    #endif
    let v135 : std_path_Display = _run_target_args'_v112 
    (* run_target_args'
    let v145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "format!(\"{}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v146 
    let _run_target_args'_v145 = v147 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v148 : string = "format!(\"{}\", $0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v148 
    let _run_target_args'_v145 = v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v150 
    let _run_target_args'_v145 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v153 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v157 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v161 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v165 
    #endif
    let v168 : std_string_String = _run_target_args'_v145 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v168 v174 
    let v176 : string = "true; $0 })"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "_optionm_map_"
    let v179 : string option = Fable.Core.RustInterop.emitRustExpr () v178 
    let _run_target_args'_v2 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v180 : string option = None
    let _run_target_args'_v2 = v180 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v181 : string option = None
    let _run_target_args'_v2 = v181 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathDirname = Fable.Core.JsInterop.importAll v182 
    let v184 : string = "v183.dirname($0)"
    let v185 : string = Fable.Core.JsInterop.emitJsExpr v0 v184 
    let v186 : bool = v185 = v0
    let v189 : US5 =
        if v186 then
            US5_1
        else
            US5_0(v185)
    let v197 : string option =
        match v189 with
        | US5_1 -> (* None *)
            let v195 : string option = None
            v195
        | US5_0(v190) -> (* Some *)
            let v192 : string option = Some v190 
            v192
    let _run_target_args'_v2 = v197 
    #endif
#if FABLE_COMPILER_PYTHON
    let v198 : string option = None
    let _run_target_args'_v2 = v198 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v199 : string option = None
    let _run_target_args'_v2 = v199 
    #endif
#else
    let v200 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v201 : System_IO_DirectoryInfo = v200 v0
    let v203 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v207 : bool = v201 = v203 
    let v249 : US5 =
        if v207 then
            US5_1
        else
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = null |> unbox<string>
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = null |> unbox<string>
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v225 : string = null |> unbox<string>
            let _run_target_args'_v215 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v229 : string = null |> unbox<string>
            let _run_target_args'_v215 = v229 
            #endif
#if FABLE_COMPILER_PYTHON
            let v233 : string = null |> unbox<string>
            let _run_target_args'_v215 = v233 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : string = null |> unbox<string>
            let _run_target_args'_v215 = v237 
            #endif
#else
            let v240 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v241 : string = v240 v201
            let _run_target_args'_v215 = v241 
            #endif
            let v242 : string = _run_target_args'_v215 
            US5_0(v242)
    let v257 : string option =
        match v249 with
        | US5_1 -> (* None *)
            let v255 : string option = None
            v255
        | US5_0(v250) -> (* Some *)
            let v252 : string option = Some v250 
            v252
    let _run_target_args'_v2 = v257 
    #endif
    let v258 : string option = _run_target_args'_v2 
    v258
and method42 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method36(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method41(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v26 : US5 = US5_1
        let v27 : US5 = v12 |> Option.defaultValue v26 
        match v27 with
        | US5_1 -> (* None *)
            let v33 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v34 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v35 : string = v33 + v34 
            US13_1(v35)
        | US5_0(v31) -> (* Some *)
            method42(v0, v1, v2, v3, v31)
and method40 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method36(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method41(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v25 : US5 = US5_1
        let v26 : US5 = v11 |> Option.defaultValue v25 
        match v26 with
        | US5_1 -> (* None *)
            let v32 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v33 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v34 : string = v32 + v33 
            US13_1(v34)
        | US5_0(v30) -> (* Some *)
            method42(v0, v1, v2, v3, v30)
and method37 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method40(v1, v2, v3, v6)
and method43 () : string =
    
    
    
    
    
    let v1 : string = "Warning"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_yellow"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_yellow"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_yellow"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[93m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[93m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[93m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[93m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method45 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "error"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method44 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method45(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.get_workspace_root"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method43()
        let v47 : string = method44(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method50 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v43 : string = $"{v36}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v2, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = v2.l0
    v51
and closure18 () (v0 : std_io_Error) : string =
    method50(v0)
and method49 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method51 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method52 () : (string -> US14) =
    closure20()
and method55 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v173 : US5 = US5_1
    let v174 : US5 = v159 |> Option.defaultValue v173 
    let v181 : string =
        match v174 with
        | US5_1 -> (* None *)
            let v179 : string = ""
            v179
        | US5_0(v178) -> (* Some *)
            v178
    let _run_target_args'_v5 = v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v182 : US3 = US3_1
    let v183 : US4 = US4_3(v182)
    let v184 : string = $"file_system.get_file_name / target: {v183} / path: {v0}"
    let v185 : string = failwith<string> v184
    let _run_target_args'_v5 = v185 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v187 : string = null |> unbox<string>
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v190 : string = "path"
    let v191 : IPathBasename = Fable.Core.JsInterop.importAll v190 
    let v192 : string = "v191.basename($0)"
    let v193 : string = Fable.Core.JsInterop.emitJsExpr v0 v192 
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v194 : US3 = US3_0
    let v195 : US4 = US4_5(v194)
    let v196 : string = $"file_system.get_file_name / target: {v195} / path: {v0}"
    let v197 : string = failwith<string> v196
    let _run_target_args'_v5 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v198 : US3 = US3_1
    let v199 : US4 = US4_1(v198)
    let v200 : string = $"file_system.get_file_name / target: {v199} / path: {v0}"
    let v201 : string = failwith<string> v200
    let _run_target_args'_v5 = v201 
    #endif
#else
    let v202 : (string -> string) = System.IO.Path.GetFileName
    let v203 : string = v202 v0
    let _run_target_args'_v5 = v203 
    #endif
    let v204 : string = _run_target_args'_v5 
    v204
and method56 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method54 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v24 : US5 = US5_1
    let v25 : US5 = v10 |> Option.defaultValue v24 
    let v29 : string = method56(v3)
    let v30 : bool = v2 >= 11uy
    if v30 then
        let v31 : string = $"file_system.read_link / "
        let v32 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v33 : string = v31 + v32 
        (* run_target_args'
        let v38 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v39 
        let _run_target_args'_v38 = v40 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v41 
        let _run_target_args'_v38 = v42 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v43 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v44 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v43 
        let _run_target_args'_v38 = v44 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v46 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v46 
        #endif
#if FABLE_COMPILER_PYTHON
        let v50 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v50 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v54 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v54 
        #endif
#else
        let v58 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v58 
        #endif
        let v61 : std_io_Error = _run_target_args'_v38 
        (* run_target_args'
        let v68 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v69 
        let _run_target_args'_v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v71 
        let _run_target_args'_v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "Err($0)"
        let v74 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v73 
        let _run_target_args'_v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v76 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v77 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v77 
        #endif
#else
        let v78 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v78 
        #endif
        let v79 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v68 
        v79
    else
        match v25 with
        | US5_0(v82) -> (* Some *)
            let v85 : string = ""
            let v86 : bool = v4 <> v85 
            if v86 then
                let v89 : uint8 = v2 + 1uy
                let v90 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v89
                let v91 : Result<std_path_PathBuf, std_io_Error> = v90 v82
                let v92 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v94 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v95 
                let _run_target_args'_v94 = v96 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v97 
                let _run_target_args'_v94 = v98 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v99 : string = "$0.map_err(|x| $1(x))"
                let v100 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v99 
                let _run_target_args'_v94 = v100 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v101 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v101 
                #endif
#if FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v102 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v103 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v103 
                #endif
#else
                let v104 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v104 
                #endif
                let v105 : Result<std_path_PathBuf, string> = _run_target_args'_v94 
                let v108 : (std_path_PathBuf -> US14) = method51()
                let v109 : (string -> US14) = method52()
                let v111 : US14 = match v105 with Ok x -> v108 x | Error x -> v109 x
                match v111 with
                | US14_1(v267) -> (* Error *)
                    let v268 : string = $"file_system.read_link / "
                    let v269 : string = $"error': {v267} / error: {v29} / name: {v5}"
                    let v270 : string = v268 + v269 
                    (* run_target_args'
                    let v275 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v276 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v277 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v276 
                    let _run_target_args'_v275 = v277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v278 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v279 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v278 
                    let _run_target_args'_v275 = v279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v280 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v281 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v280 
                    let _run_target_args'_v275 = v281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v283 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v283 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v287 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v287 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v291 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v291 
                    #endif
#else
                    let v295 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v295 
                    #endif
                    let v298 : std_io_Error = _run_target_args'_v275 
                    (* run_target_args'
                    let v305 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v306 : string = "Err($0)"
                    let v307 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v306 
                    let _run_target_args'_v305 = v307 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v308 : string = "Err($0)"
                    let v309 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v308 
                    let _run_target_args'_v305 = v309 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v310 : string = "Err($0)"
                    let v311 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v310 
                    let _run_target_args'_v305 = v311 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v312 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v313 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v314 
                    #endif
#else
                    let v315 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v315 
                    #endif
                    let v316 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v305 
                    v316
                | US14_0(v114) -> (* Ok *)
                    (* run_target_args'
                    let v119 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "$0.display()"
                    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v120 
                    let _run_target_args'_v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "$0.display()"
                    let v123 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v122 
                    let _run_target_args'_v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "$0.display()"
                    let v125 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v124 
                    let _run_target_args'_v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v135 
                    #endif
#else
                    let v139 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v139 
                    #endif
                    let v142 : std_path_Display = _run_target_args'_v119 
                    let v149 : string = v142 |> string 
                    let v152 : string = method36(v149, v5)
                    (* run_target_args'
                    let v157 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v158 
                    let _run_target_args'_v157 = v159 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v160 
                    let _run_target_args'_v157 = v161 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v162 : string = "&*$0"
                    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v162 
                    let _run_target_args'_v157 = v163 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v165 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v165 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v169 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v173 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v173 
                    #endif
#else
                    let v177 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v177 
                    #endif
                    let v180 : Ref<Str> = _run_target_args'_v157 
                    (* run_target_args'
                    let v190 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v191 : string = "String::from($0)"
                    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v191 
                    let _run_target_args'_v190 = v192 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v193 : string = "String::from($0)"
                    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v193 
                    let _run_target_args'_v190 = v194 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v195 : string = "String::from($0)"
                    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v195 
                    let _run_target_args'_v190 = v196 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v206 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v206 
                    #endif
#else
                    let v210 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v210 
                    #endif
                    let v213 : std_string_String = _run_target_args'_v190 
                    (* run_target_args'
                    let v223 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v224 : string = "std::path::PathBuf::from($0)"
                    let v225 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v224 
                    let _run_target_args'_v223 = v225 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v226 : string = "std::path::PathBuf::from($0)"
                    let v227 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v226 
                    let _run_target_args'_v223 = v227 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v228 : string = "std::path::PathBuf::from($0)"
                    let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v228 
                    let _run_target_args'_v223 = v229 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v231 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v235 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v235 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v239 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v239 
                    #endif
#else
                    let v243 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v243 
                    #endif
                    let v246 : std_path_PathBuf = _run_target_args'_v223 
                    (* run_target_args'
                    let v253 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "Ok($0)"
                    let v255 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v254 
                    let _run_target_args'_v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "Ok($0)"
                    let v257 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v256 
                    let _run_target_args'_v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "Ok($0)"
                    let v259 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v258 
                    let _run_target_args'_v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v262 
                    #endif
#else
                    let v263 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v263 
                    #endif
                    let v264 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v253 
                    v264
            else
                let v321 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v322 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
                let v323 : string = v321 + v322 
                (* run_target_args'
                let v328 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v329 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v330 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v329 
                let _run_target_args'_v328 = v330 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v331 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v332 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v331 
                let _run_target_args'_v328 = v332 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v333 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v334 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v333 
                let _run_target_args'_v328 = v334 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v336 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v336 
                #endif
#if FABLE_COMPILER_PYTHON
                let v340 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v340 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v344 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v344 
                #endif
#else
                let v348 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v348 
                #endif
                let v351 : std_io_Error = _run_target_args'_v328 
                (* run_target_args'
                let v358 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v359 : string = "Err($0)"
                let v360 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v359 
                let _run_target_args'_v358 = v360 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v361 : string = "Err($0)"
                let v362 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v361 
                let _run_target_args'_v358 = v362 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v363 : string = "Err($0)"
                let v364 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v363 
                let _run_target_args'_v358 = v364 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v365 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v365 
                #endif
#if FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v366 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v367 
                #endif
#else
                let v368 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v368 
                #endif
                let v369 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v358 
                v369
        | _ ->
            let v373 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v374 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
            let v375 : string = v373 + v374 
            (* run_target_args'
            let v380 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v381 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v382 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v381 
            let _run_target_args'_v380 = v382 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v383 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v384 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v383 
            let _run_target_args'_v380 = v384 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v385 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v386 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v385 
            let _run_target_args'_v380 = v386 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v388 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v388 
            #endif
#if FABLE_COMPILER_PYTHON
            let v392 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v392 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v396 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v396 
            #endif
#else
            let v400 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v400 
            #endif
            let v403 : std_io_Error = _run_target_args'_v380 
            (* run_target_args'
            let v410 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v411 : string = "Err($0)"
            let v412 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v411 
            let _run_target_args'_v410 = v412 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v413 : string = "Err($0)"
            let v414 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v413 
            let _run_target_args'_v410 = v414 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v415 : string = "Err($0)"
            let v416 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v415 
            let _run_target_args'_v410 = v416 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v417 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v417 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v419 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v419 
            #endif
#else
            let v420 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v420 
            #endif
            let v421 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v410 
            v421
and method53 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US14) = method51()
    let v27 : (string -> US14) = method52()
    let v29 : US14 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US14_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v49, v1, v48, v2)
        | US14_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US14) = method51()
    let v72 : (string -> US14) = method52()
    let v74 : US14 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US14_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v94, v1, v93, v2)
        | US14_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US14) = method51()
    let v117 : (string -> US14) = method52()
    let v119 : US14 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US14_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v139, v1, v138, v2)
        | US14_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method53(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v23 : US5 = US5_1
    let v24 : US5 = v9 |> Option.defaultValue v23 
    let v28 : string = method56(v3)
    let v29 : bool = v2 >= 11uy
    if v29 then
        let v30 : string = $"file_system.read_link / "
        let v31 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v32 : string = v30 + v31 
        (* run_target_args'
        let v37 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _run_target_args'_v37 = v39 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v40 
        let _run_target_args'_v37 = v41 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v42 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v43 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v42 
        let _run_target_args'_v37 = v43 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v45 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v45 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v49 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v53 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v53 
        #endif
#else
        let v57 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v57 
        #endif
        let v60 : std_io_Error = _run_target_args'_v37 
        (* run_target_args'
        let v67 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v68 
        let _run_target_args'_v67 = v69 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v70 
        let _run_target_args'_v67 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v72 : string = "Err($0)"
        let v73 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v72 
        let _run_target_args'_v67 = v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v76 
        #endif
#else
        let v77 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v77 
        #endif
        let v78 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v67 
        v78
    else
        match v24 with
        | US5_0(v81) -> (* Some *)
            let v84 : string = ""
            let v85 : bool = v0 <> v84 
            if v85 then
                let v88 : uint8 = v2 + 1uy
                let v89 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v88
                let v90 : Result<std_path_PathBuf, std_io_Error> = v89 v81
                let v91 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v93 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v94 
                let _run_target_args'_v93 = v95 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v96 
                let _run_target_args'_v93 = v97 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v98 : string = "$0.map_err(|x| $1(x))"
                let v99 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v98 
                let _run_target_args'_v93 = v99 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v100 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v100 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v102 
                #endif
#else
                let v103 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v103 
                #endif
                let v104 : Result<std_path_PathBuf, string> = _run_target_args'_v93 
                let v107 : (std_path_PathBuf -> US14) = method51()
                let v108 : (string -> US14) = method52()
                let v110 : US14 = match v104 with Ok x -> v107 x | Error x -> v108 x
                match v110 with
                | US14_1(v266) -> (* Error *)
                    let v267 : string = $"file_system.read_link / "
                    let v268 : string = $"error': {v266} / error: {v28} / name: {v4}"
                    let v269 : string = v267 + v268 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v278 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v280 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v282 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v290 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v290 
                    #endif
#else
                    let v294 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v294 
                    #endif
                    let v297 : std_io_Error = _run_target_args'_v274 
                    (* run_target_args'
                    let v304 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v305 
                    let _run_target_args'_v304 = v306 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v307 : string = "Err($0)"
                    let v308 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v307 
                    let _run_target_args'_v304 = v308 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v309 : string = "Err($0)"
                    let v310 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v309 
                    let _run_target_args'_v304 = v310 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v311 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v311 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v312 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v313 
                    #endif
#else
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v314 
                    #endif
                    let v315 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v304 
                    v315
                | US14_0(v113) -> (* Ok *)
                    (* run_target_args'
                    let v118 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v119 
                    let _run_target_args'_v118 = v120 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v121 : string = "$0.display()"
                    let v122 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v121 
                    let _run_target_args'_v118 = v122 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v123 : string = "$0.display()"
                    let v124 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v123 
                    let _run_target_args'_v118 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v134 
                    #endif
#else
                    let v138 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v138 
                    #endif
                    let v141 : std_path_Display = _run_target_args'_v118 
                    let v148 : string = v141 |> string 
                    let v151 : string = method36(v148, v4)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v164 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v164 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v168 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v172 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
#else
                    let v176 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v176 
                    #endif
                    let v179 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v189 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v190 
                    let _run_target_args'_v189 = v191 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v192 : string = "String::from($0)"
                    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v192 
                    let _run_target_args'_v189 = v193 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v194 : string = "String::from($0)"
                    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v194 
                    let _run_target_args'_v189 = v195 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v197 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v197 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v205 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v205 
                    #endif
#else
                    let v209 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v209 
                    #endif
                    let v212 : std_string_String = _run_target_args'_v189 
                    (* run_target_args'
                    let v222 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v223 
                    let _run_target_args'_v222 = v224 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v225 : string = "std::path::PathBuf::from($0)"
                    let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v225 
                    let _run_target_args'_v222 = v226 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v227 : string = "std::path::PathBuf::from($0)"
                    let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v227 
                    let _run_target_args'_v222 = v228 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v230 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v230 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v234 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v238 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v238 
                    #endif
#else
                    let v242 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v242 
                    #endif
                    let v245 : std_path_PathBuf = _run_target_args'_v222 
                    (* run_target_args'
                    let v252 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v253 
                    let _run_target_args'_v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : string = "Ok($0)"
                    let v256 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v255 
                    let _run_target_args'_v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : string = "Ok($0)"
                    let v258 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v257 
                    let _run_target_args'_v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v259 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v260 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v261 
                    #endif
#else
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v262 
                    #endif
                    let v263 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v252 
                    v263
            else
                let v320 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v321 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
                let v322 : string = v320 + v321 
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v328 
                let _run_target_args'_v327 = v329 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v330 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v331 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v330 
                let _run_target_args'_v327 = v331 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v332 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v333 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v332 
                let _run_target_args'_v327 = v333 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v335 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v335 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v343 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v343 
                #endif
#else
                let v347 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v347 
                #endif
                let v350 : std_io_Error = _run_target_args'_v327 
                (* run_target_args'
                let v357 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v358 
                let _run_target_args'_v357 = v359 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v360 : string = "Err($0)"
                let v361 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v360 
                let _run_target_args'_v357 = v361 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v362 : string = "Err($0)"
                let v363 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v362 
                let _run_target_args'_v357 = v363 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v364 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v364 
                #endif
#if FABLE_COMPILER_PYTHON
                let v365 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v365 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v366 
                #endif
#else
                let v367 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v367 
                #endif
                let v368 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v357 
                v368
        | _ ->
            let v372 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v373 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
            let v374 : string = v372 + v373 
            (* run_target_args'
            let v379 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v380 
            let _run_target_args'_v379 = v381 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v382 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v383 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v382 
            let _run_target_args'_v379 = v383 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v384 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v385 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v384 
            let _run_target_args'_v379 = v385 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v387 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v387 
            #endif
#if FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v391 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v395 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v395 
            #endif
#else
            let v399 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v399 
            #endif
            let v402 : std_io_Error = _run_target_args'_v379 
            (* run_target_args'
            let v409 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v409 = v411 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v412 : string = "Err($0)"
            let v413 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v409 = v413 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v414 : string = "Err($0)"
            let v415 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v414 
            let _run_target_args'_v409 = v415 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v416 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v416 
            #endif
#if FABLE_COMPILER_PYTHON
            let v417 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v417 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v418 
            #endif
#else
            let v419 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v419 
            #endif
            let v420 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v409 
            v420
and method48 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US14) = method51()
    let v26 : (string -> US14) = method52()
    let v28 : US14 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US14_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v48, v1, v47)
        | US14_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US14) = method51()
    let v71 : (string -> US14) = method52()
    let v73 : US14 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US14_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v93, v1, v92)
        | US14_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US14) = method51()
    let v116 : (string -> US14) = method52()
    let v118 : US14 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US14_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v138, v1, v137)
        | US14_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method59 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method60 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method61 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method63 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v24 : US5 = US5_1
    let v25 : US5 = v10 |> Option.defaultValue v24 
    let v29 : string = method50(v3)
    let v30 : bool = v2 >= 11uy
    if v30 then
        let v31 : string = $"file_system.read_link / "
        let v32 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v33 : string = v31 + v32 
        (* run_target_args'
        let v38 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v39 
        let _run_target_args'_v38 = v40 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v41 
        let _run_target_args'_v38 = v42 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v43 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v44 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v43 
        let _run_target_args'_v38 = v44 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v46 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v46 
        #endif
#if FABLE_COMPILER_PYTHON
        let v50 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v50 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v54 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v54 
        #endif
#else
        let v58 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v58 
        #endif
        let v61 : std_io_Error = _run_target_args'_v38 
        (* run_target_args'
        let v68 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v69 
        let _run_target_args'_v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v71 
        let _run_target_args'_v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "Err($0)"
        let v74 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v73 
        let _run_target_args'_v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v76 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v77 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v77 
        #endif
#else
        let v78 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v78 
        #endif
        let v79 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v68 
        v79
    else
        match v25 with
        | US5_0(v82) -> (* Some *)
            let v85 : string = ""
            let v86 : bool = v4 <> v85 
            if v86 then
                let v89 : uint8 = v2 + 1uy
                let v90 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v89
                let v91 : Result<std_path_PathBuf, std_io_Error> = v90 v82
                let v92 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v94 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v95 
                let _run_target_args'_v94 = v96 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v97 
                let _run_target_args'_v94 = v98 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v99 : string = "$0.map_err(|x| $1(x))"
                let v100 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v99 
                let _run_target_args'_v94 = v100 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v101 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v101 
                #endif
#if FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v102 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v103 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v103 
                #endif
#else
                let v104 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v104 
                #endif
                let v105 : Result<std_path_PathBuf, string> = _run_target_args'_v94 
                let v108 : (std_path_PathBuf -> US14) = method51()
                let v109 : (string -> US14) = method52()
                let v111 : US14 = match v105 with Ok x -> v108 x | Error x -> v109 x
                match v111 with
                | US14_1(v267) -> (* Error *)
                    let v268 : string = $"file_system.read_link / "
                    let v269 : string = $"error': {v267} / error: {v29} / name: {v5}"
                    let v270 : string = v268 + v269 
                    (* run_target_args'
                    let v275 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v276 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v277 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v276 
                    let _run_target_args'_v275 = v277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v278 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v279 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v278 
                    let _run_target_args'_v275 = v279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v280 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v281 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v280 
                    let _run_target_args'_v275 = v281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v283 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v283 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v287 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v287 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v291 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v291 
                    #endif
#else
                    let v295 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v295 
                    #endif
                    let v298 : std_io_Error = _run_target_args'_v275 
                    (* run_target_args'
                    let v305 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v306 : string = "Err($0)"
                    let v307 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v306 
                    let _run_target_args'_v305 = v307 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v308 : string = "Err($0)"
                    let v309 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v308 
                    let _run_target_args'_v305 = v309 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v310 : string = "Err($0)"
                    let v311 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v310 
                    let _run_target_args'_v305 = v311 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v312 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v313 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v314 
                    #endif
#else
                    let v315 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v315 
                    #endif
                    let v316 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v305 
                    v316
                | US14_0(v114) -> (* Ok *)
                    (* run_target_args'
                    let v119 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "$0.display()"
                    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v120 
                    let _run_target_args'_v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "$0.display()"
                    let v123 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v122 
                    let _run_target_args'_v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "$0.display()"
                    let v125 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v124 
                    let _run_target_args'_v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v135 
                    #endif
#else
                    let v139 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v139 
                    #endif
                    let v142 : std_path_Display = _run_target_args'_v119 
                    let v149 : string = v142 |> string 
                    let v152 : string = method36(v149, v5)
                    (* run_target_args'
                    let v157 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v158 
                    let _run_target_args'_v157 = v159 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v160 
                    let _run_target_args'_v157 = v161 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v162 : string = "&*$0"
                    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v162 
                    let _run_target_args'_v157 = v163 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v165 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v165 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v169 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v173 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v173 
                    #endif
#else
                    let v177 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v177 
                    #endif
                    let v180 : Ref<Str> = _run_target_args'_v157 
                    (* run_target_args'
                    let v190 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v191 : string = "String::from($0)"
                    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v191 
                    let _run_target_args'_v190 = v192 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v193 : string = "String::from($0)"
                    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v193 
                    let _run_target_args'_v190 = v194 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v195 : string = "String::from($0)"
                    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v195 
                    let _run_target_args'_v190 = v196 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v206 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v206 
                    #endif
#else
                    let v210 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v210 
                    #endif
                    let v213 : std_string_String = _run_target_args'_v190 
                    (* run_target_args'
                    let v223 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v224 : string = "std::path::PathBuf::from($0)"
                    let v225 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v224 
                    let _run_target_args'_v223 = v225 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v226 : string = "std::path::PathBuf::from($0)"
                    let v227 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v226 
                    let _run_target_args'_v223 = v227 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v228 : string = "std::path::PathBuf::from($0)"
                    let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v228 
                    let _run_target_args'_v223 = v229 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v231 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v235 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v235 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v239 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v239 
                    #endif
#else
                    let v243 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v243 
                    #endif
                    let v246 : std_path_PathBuf = _run_target_args'_v223 
                    (* run_target_args'
                    let v253 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "Ok($0)"
                    let v255 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v254 
                    let _run_target_args'_v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "Ok($0)"
                    let v257 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v256 
                    let _run_target_args'_v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "Ok($0)"
                    let v259 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v258 
                    let _run_target_args'_v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v262 
                    #endif
#else
                    let v263 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v263 
                    #endif
                    let v264 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v253 
                    v264
            else
                let v321 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v322 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
                let v323 : string = v321 + v322 
                (* run_target_args'
                let v328 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v329 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v330 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v329 
                let _run_target_args'_v328 = v330 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v331 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v332 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v331 
                let _run_target_args'_v328 = v332 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v333 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v334 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v333 
                let _run_target_args'_v328 = v334 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v336 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v336 
                #endif
#if FABLE_COMPILER_PYTHON
                let v340 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v340 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v344 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v344 
                #endif
#else
                let v348 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v348 
                #endif
                let v351 : std_io_Error = _run_target_args'_v328 
                (* run_target_args'
                let v358 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v359 : string = "Err($0)"
                let v360 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v359 
                let _run_target_args'_v358 = v360 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v361 : string = "Err($0)"
                let v362 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v361 
                let _run_target_args'_v358 = v362 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v363 : string = "Err($0)"
                let v364 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v363 
                let _run_target_args'_v358 = v364 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v365 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v365 
                #endif
#if FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v366 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v367 
                #endif
#else
                let v368 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v368 
                #endif
                let v369 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v358 
                v369
        | _ ->
            let v373 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v374 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
            let v375 : string = v373 + v374 
            (* run_target_args'
            let v380 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v381 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v382 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v381 
            let _run_target_args'_v380 = v382 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v383 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v384 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v383 
            let _run_target_args'_v380 = v384 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v385 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v386 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v385 
            let _run_target_args'_v380 = v386 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v388 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v388 
            #endif
#if FABLE_COMPILER_PYTHON
            let v392 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v392 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v396 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v396 
            #endif
#else
            let v400 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v400 
            #endif
            let v403 : std_io_Error = _run_target_args'_v380 
            (* run_target_args'
            let v410 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v411 : string = "Err($0)"
            let v412 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v411 
            let _run_target_args'_v410 = v412 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v413 : string = "Err($0)"
            let v414 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v413 
            let _run_target_args'_v410 = v414 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v415 : string = "Err($0)"
            let v416 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v415 
            let _run_target_args'_v410 = v416 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v417 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v417 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v419 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v419 
            #endif
#else
            let v420 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v420 
            #endif
            let v421 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v410 
            v421
and method62 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v42 : System.IO.FileAttributes = method59(v36)
    let v43 : System.IO.FileAttributes = method60()
    let v44 : bool = method61(v43, v42)
    if v44 then
        (* run_target_args'
        let v49 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v59 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v63 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v63 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v71 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v71 
        #endif
#else
        let v75 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v49 = v75 
        #endif
        let v78 : System_IO_FileInfo = _run_target_args'_v49 
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = null |> unbox<string>
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v94 : string = null |> unbox<string>
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = null |> unbox<string>
        let _run_target_args'_v88 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : string = null |> unbox<string>
        let _run_target_args'_v88 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v106 : string = null |> unbox<string>
        let _run_target_args'_v88 = v106 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v110 : string = null |> unbox<string>
        let _run_target_args'_v88 = v110 
        #endif
#else
        let v113 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v114 : string = v113 v78
        let _run_target_args'_v88 = v114 
        #endif
        let v115 : string = _run_target_args'_v88 
        let v122 : std_path_PathBuf = v115 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v126 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v127 : string = "Ok($0)"
        let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
        let _run_target_args'_v126 = v128 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v129 : string = "Ok($0)"
        let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
        let _run_target_args'_v126 = v130 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v131 : string = "Ok($0)"
        let v132 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v131 
        let _run_target_args'_v126 = v132 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v133 
        #endif
#if FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v134 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v135 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v135 
        #endif
#else
        let v136 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v136 
        #endif
        let v137 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v126 
        v137
    else
        let v140 : string = $"file_system.read_link / Fsharp / "
        let v141 : string = $"The file or directory is not a reparse point. / "
        let v142 : string = v140 + v141 
        let v143 : string = $"path: {v0} / result: {v44} / path': {v2} / n: {v1}"
        let v144 : string = v142 + v143 
        (* run_target_args'
        let v149 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v150 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v151 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v150 
        let _run_target_args'_v149 = v151 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v152 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v153 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v152 
        let _run_target_args'_v149 = v153 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v154 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v155 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v154 
        let _run_target_args'_v149 = v155 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v157 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v157 
        #endif
#if FABLE_COMPILER_PYTHON
        let v161 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v161 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v165 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v165 
        #endif
#else
        let v169 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v169 
        #endif
        let v172 : std_io_Error = _run_target_args'_v149 
        let v178 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method63(v0, v178, v1, v172, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method62(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method64 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v23 : US5 = US5_1
    let v24 : US5 = v9 |> Option.defaultValue v23 
    let v28 : string = method50(v3)
    let v29 : bool = v2 >= 11uy
    if v29 then
        let v30 : string = $"file_system.read_link / "
        let v31 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v32 : string = v30 + v31 
        (* run_target_args'
        let v37 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _run_target_args'_v37 = v39 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v40 
        let _run_target_args'_v37 = v41 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v42 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v43 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v42 
        let _run_target_args'_v37 = v43 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v45 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v45 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v49 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v53 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v53 
        #endif
#else
        let v57 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v57 
        #endif
        let v60 : std_io_Error = _run_target_args'_v37 
        (* run_target_args'
        let v67 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v68 
        let _run_target_args'_v67 = v69 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v70 
        let _run_target_args'_v67 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v72 : string = "Err($0)"
        let v73 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v72 
        let _run_target_args'_v67 = v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v76 
        #endif
#else
        let v77 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v77 
        #endif
        let v78 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v67 
        v78
    else
        match v24 with
        | US5_0(v81) -> (* Some *)
            let v84 : string = ""
            let v85 : bool = v0 <> v84 
            if v85 then
                let v88 : uint8 = v2 + 1uy
                let v89 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v88
                let v90 : Result<std_path_PathBuf, std_io_Error> = v89 v81
                let v91 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v93 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v94 
                let _run_target_args'_v93 = v95 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v96 
                let _run_target_args'_v93 = v97 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v98 : string = "$0.map_err(|x| $1(x))"
                let v99 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v98 
                let _run_target_args'_v93 = v99 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v100 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v100 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v102 
                #endif
#else
                let v103 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v103 
                #endif
                let v104 : Result<std_path_PathBuf, string> = _run_target_args'_v93 
                let v107 : (std_path_PathBuf -> US14) = method51()
                let v108 : (string -> US14) = method52()
                let v110 : US14 = match v104 with Ok x -> v107 x | Error x -> v108 x
                match v110 with
                | US14_1(v266) -> (* Error *)
                    let v267 : string = $"file_system.read_link / "
                    let v268 : string = $"error': {v266} / error: {v28} / name: {v4}"
                    let v269 : string = v267 + v268 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v278 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v280 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v282 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v290 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v290 
                    #endif
#else
                    let v294 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v294 
                    #endif
                    let v297 : std_io_Error = _run_target_args'_v274 
                    (* run_target_args'
                    let v304 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v305 
                    let _run_target_args'_v304 = v306 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v307 : string = "Err($0)"
                    let v308 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v307 
                    let _run_target_args'_v304 = v308 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v309 : string = "Err($0)"
                    let v310 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v309 
                    let _run_target_args'_v304 = v310 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v311 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v311 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v312 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v313 
                    #endif
#else
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v314 
                    #endif
                    let v315 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v304 
                    v315
                | US14_0(v113) -> (* Ok *)
                    (* run_target_args'
                    let v118 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v119 
                    let _run_target_args'_v118 = v120 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v121 : string = "$0.display()"
                    let v122 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v121 
                    let _run_target_args'_v118 = v122 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v123 : string = "$0.display()"
                    let v124 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v123 
                    let _run_target_args'_v118 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v134 
                    #endif
#else
                    let v138 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v138 
                    #endif
                    let v141 : std_path_Display = _run_target_args'_v118 
                    let v148 : string = v141 |> string 
                    let v151 : string = method36(v148, v4)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v164 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v164 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v168 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v172 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
#else
                    let v176 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v176 
                    #endif
                    let v179 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v189 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v190 
                    let _run_target_args'_v189 = v191 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v192 : string = "String::from($0)"
                    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v192 
                    let _run_target_args'_v189 = v193 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v194 : string = "String::from($0)"
                    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v194 
                    let _run_target_args'_v189 = v195 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v197 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v197 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v205 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v205 
                    #endif
#else
                    let v209 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v209 
                    #endif
                    let v212 : std_string_String = _run_target_args'_v189 
                    (* run_target_args'
                    let v222 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v223 
                    let _run_target_args'_v222 = v224 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v225 : string = "std::path::PathBuf::from($0)"
                    let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v225 
                    let _run_target_args'_v222 = v226 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v227 : string = "std::path::PathBuf::from($0)"
                    let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v227 
                    let _run_target_args'_v222 = v228 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v230 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v230 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v234 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v238 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v238 
                    #endif
#else
                    let v242 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v242 
                    #endif
                    let v245 : std_path_PathBuf = _run_target_args'_v222 
                    (* run_target_args'
                    let v252 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v253 
                    let _run_target_args'_v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : string = "Ok($0)"
                    let v256 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v255 
                    let _run_target_args'_v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : string = "Ok($0)"
                    let v258 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v257 
                    let _run_target_args'_v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v259 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v260 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v261 
                    #endif
#else
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v262 
                    #endif
                    let v263 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v252 
                    v263
            else
                let v320 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v321 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
                let v322 : string = v320 + v321 
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v328 
                let _run_target_args'_v327 = v329 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v330 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v331 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v330 
                let _run_target_args'_v327 = v331 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v332 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v333 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v332 
                let _run_target_args'_v327 = v333 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v335 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v335 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v343 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v343 
                #endif
#else
                let v347 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v347 
                #endif
                let v350 : std_io_Error = _run_target_args'_v327 
                (* run_target_args'
                let v357 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v358 
                let _run_target_args'_v357 = v359 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v360 : string = "Err($0)"
                let v361 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v360 
                let _run_target_args'_v357 = v361 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v362 : string = "Err($0)"
                let v363 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v362 
                let _run_target_args'_v357 = v363 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v364 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v364 
                #endif
#if FABLE_COMPILER_PYTHON
                let v365 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v365 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v366 
                #endif
#else
                let v367 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v367 
                #endif
                let v368 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v357 
                v368
        | _ ->
            let v372 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v373 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
            let v374 : string = v372 + v373 
            (* run_target_args'
            let v379 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v380 
            let _run_target_args'_v379 = v381 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v382 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v383 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v382 
            let _run_target_args'_v379 = v383 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v384 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v385 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v384 
            let _run_target_args'_v379 = v385 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v387 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v387 
            #endif
#if FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v391 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v395 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v395 
            #endif
#else
            let v399 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v399 
            #endif
            let v402 : std_io_Error = _run_target_args'_v379 
            (* run_target_args'
            let v409 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v409 = v411 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v412 : string = "Err($0)"
            let v413 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v409 = v413 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v414 : string = "Err($0)"
            let v415 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v414 
            let _run_target_args'_v409 = v415 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v416 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v416 
            #endif
#if FABLE_COMPILER_PYTHON
            let v417 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v417 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v418 
            #endif
#else
            let v419 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v419 
            #endif
            let v420 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v409 
            v420
and method58 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v41 : System.IO.FileAttributes = method59(v35)
    let v42 : System.IO.FileAttributes = method60()
    let v43 : bool = method61(v42, v41)
    if v43 then
        (* run_target_args'
        let v48 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v50 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v66 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v70 
        #endif
#else
        let v74 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v48 = v74 
        #endif
        let v77 : System_IO_FileInfo = _run_target_args'_v48 
        (* run_target_args'
        let v87 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = null |> unbox<string>
        let _run_target_args'_v87 = v89 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v93 : string = null |> unbox<string>
        let _run_target_args'_v87 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = null |> unbox<string>
        let _run_target_args'_v87 = v97 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : string = null |> unbox<string>
        let _run_target_args'_v87 = v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v105 : string = null |> unbox<string>
        let _run_target_args'_v87 = v105 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v109 : string = null |> unbox<string>
        let _run_target_args'_v87 = v109 
        #endif
#else
        let v112 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v113 : string = v112 v77
        let _run_target_args'_v87 = v113 
        #endif
        let v114 : string = _run_target_args'_v87 
        let v121 : std_path_PathBuf = v114 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v125 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v126 : string = "Ok($0)"
        let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
        let _run_target_args'_v125 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "Ok($0)"
        let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
        let _run_target_args'_v125 = v129 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = "Ok($0)"
        let v131 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v130 
        let _run_target_args'_v125 = v131 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v132 
        #endif
#if FABLE_COMPILER_PYTHON
        let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v133 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v134 
        #endif
#else
        let v135 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v135 
        #endif
        let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v125 
        v136
    else
        let v139 : string = $"file_system.read_link / Fsharp / "
        let v140 : string = $"The file or directory is not a reparse point. / "
        let v141 : string = v139 + v140 
        let v142 : string = $"path: {v0} / result: {v43} / path': {v0} / n: {v1}"
        let v143 : string = v141 + v142 
        (* run_target_args'
        let v148 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v149 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v150 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v149 
        let _run_target_args'_v148 = v150 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v151 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v152 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v151 
        let _run_target_args'_v148 = v152 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v153 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v154 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v153 
        let _run_target_args'_v148 = v154 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v156 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v156 
        #endif
#if FABLE_COMPILER_PYTHON
        let v160 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v160 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v164 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v164 
        #endif
#else
        let v168 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v168 
        #endif
        let v171 : std_io_Error = _run_target_args'_v148 
        let v177 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method64(v0, v177, v1, v171)
and method47 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method48(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method39(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method48(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method39(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method48(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method65 () : (std_path_PathBuf -> US15) =
    closure25()
and method67 (v0 : string) : string =
    v0
and method68 () : string =
    let v0 : string = ""
    v0
and method66 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method67(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method68()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method68()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method68()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method68()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method68()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method46 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method47(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US15) = method65()
        let v22 : US15 option = v16 |> Option.map v21 
        let v36 : US15 = US15_1
        let v37 : US15 = v22 |> Option.defaultValue v36 
        let v80 : string =
            match v37 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v41) -> (* Some *)
                (* run_target_args'
                let v46 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v47 : string = "$0.display()"
                let v48 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v47 
                let _run_target_args'_v46 = v48 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v49 : string = "$0.display()"
                let v50 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v49 
                let _run_target_args'_v46 = v50 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v51 : string = "$0.display()"
                let v52 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v51 
                let _run_target_args'_v46 = v52 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v54 
                #endif
#if FABLE_COMPILER_PYTHON
                let v58 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v58 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v62 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v62 
                #endif
#else
                let v66 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v66 
                #endif
                let v69 : std_path_Display = _run_target_args'_v46 
                let v76 : string = v69 |> string 
                v76
        let v81 : bool = v80 = ""
        let v82 : string =
            if v81 then
                v0
            else
                v80
        let v83 : string = "^\\\\\\\\\\?\\\\"
        let v84 : string = ""
        let v85 : string = method66(v83, v84, v82)
        let v86 : int32 = v85.Length
        let v87 : bool = v86 < 2
        if v87 then
            v0
        else
            let v88 : string = $"{v85.[0] |> string |> _.ToLower()}{v85.[1..]}"
            let v89 : string = "\\"
            let v90 : string = "/"
            let v91 : string = v88.Replace (v89, v90)
            v91
and method35 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method36(v2, v3)
    let v5 : US13 = method37(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure17(v0, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method46(v6)
        US5_0(v7)
and method71 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method72 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method70 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : bool = v106 = false
    let v289 : string =
        if v107 then
            let v108 : string = method34()
            let v109 : string = method36(v108, v0)
            let v110 : string = method46(v109)
            let v112 : string = "/"
            let v113 : (string []) = v110.Split v112 
            let v116 : (string []) = [||]
            let v117 : int32 = v113.Length
            let v118 : Mut6 = {l0 = 0; l1 = 0; l2 = v116} : Mut6
            while method71(v117, v118) do
                let v120 : int32 = v118.l0
                let v121 : int32 =  -v120
                let v122 : int32 = v121 + v117
                let v123 : int32 = v122 - 1
                let struct (v124 : int32, v125 : (string [])) = v118.l1, v118.l2
                let v126 : string = v113.[int v123]
                let v127 : bool = ".." = v126
                let struct (v172 : int32, v173 : (string [])) =
                    if v127 then
                        let v128 : int32 = v124 + 1
                        struct (v128, v125)
                    else
                        let v129 : bool = "." = v126
                        if v129 then
                            struct (v124, v125)
                        else
                            let v130 : bool = 0 = v124
                            if v130 then
                                let v132 : string = ":"
                                let v133 : bool = v126.EndsWith (v132, false, null)
                                if v133 then
                                    let v136 : string = $"{v108.[0]}:"
                                    let v137 : (string []) = [|v136|]
                                    let v138 : int32 = v137.Length
                                    let v139 : int32 = v125.Length
                                    let v140 : int32 = v138 + v139
                                    let v141 : (string []) = Array.zeroCreate<string> (v140)
                                    let v142 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v140, v142) do
                                        let v144 : int32 = v142.l0
                                        let v145 : bool = v144 < v138
                                        let v149 : string =
                                            if v145 then
                                                let v146 : string = v137.[int v144]
                                                v146
                                            else
                                                let v147 : int32 = v144 - v138
                                                let v148 : string = v125.[int v147]
                                                v148
                                        v141.[int v144] <- v149
                                        let v150 : int32 = v144 + 1
                                        v142.l0 <- v150
                                        ()
                                    struct (0, v141)
                                else
                                    let v151 : (string []) = [|v126|]
                                    let v152 : int32 = v151.Length
                                    let v153 : int32 = v125.Length
                                    let v154 : int32 = v152 + v153
                                    let v155 : (string []) = Array.zeroCreate<string> (v154)
                                    let v156 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v154, v156) do
                                        let v158 : int32 = v156.l0
                                        let v159 : bool = v158 < v152
                                        let v163 : string =
                                            if v159 then
                                                let v160 : string = v151.[int v158]
                                                v160
                                            else
                                                let v161 : int32 = v158 - v152
                                                let v162 : string = v125.[int v161]
                                                v162
                                        v155.[int v158] <- v163
                                        let v164 : int32 = v158 + 1
                                        v156.l0 <- v164
                                        ()
                                    struct (0, v155)
                            else
                                let v167 : int32 = v124 - 1
                                struct (v167, v125)
                let v174 : int32 = v120 + 1
                v118.l0 <- v174
                v118.l1 <- v172
                v118.l2 <- v173
                ()
            let struct (v175 : int32, v176 : (string [])) = v118.l1, v118.l2
            let v180 : unit = ()
            let _let'_v180 =
                seq {
                    for i = 0 to v176.Length - 1 do yield v176.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v183 : string seq = _let'_v180 
            let v189 : char = method72()
            let v191 : (char -> string) = _.ToString()
            let v192 : string = v191 v189
            let v196 : bool = v192 = "\n"
            let v198 : string =
                if v196 then
                    method31(v192)
                else
                    v192
            let v199 : (string -> (string seq -> string)) = String.concat
            let v200 : (string seq -> string) = v199 v198
            v200 v183
        else
            let v204 : string = "std::fs::canonicalize(&*$0)"
            let v205 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v204 
            (* run_target_args'
            let v207 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v208 : string = "$0.unwrap()"
            let v209 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v208 
            let _run_target_args'_v207 = v209 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v210 : string = "$0.unwrap()"
            let v211 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v210 
            let _run_target_args'_v207 = v211 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v212 : string = "$0.unwrap()"
            let v213 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v205 v212 
            let _run_target_args'_v207 = v213 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v214 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v214 
            #endif
#if FABLE_COMPILER_PYTHON
            let v215 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v215 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v216 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v216 
            #endif
#else
            let v217 : std_path_PathBuf = match v205 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v207 = v217 
            #endif
            let v218 : std_path_PathBuf = _run_target_args'_v207 
            (* run_target_args'
            let v225 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v226 : string = "$0.display()"
            let v227 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v226 
            let _run_target_args'_v225 = v227 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v228 : string = "$0.display()"
            let v229 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v228 
            let _run_target_args'_v225 = v229 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v230 : string = "$0.display()"
            let v231 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v218 v230 
            let _run_target_args'_v225 = v231 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v233 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v233 
            #endif
#if FABLE_COMPILER_PYTHON
            let v237 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v237 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v241 
            #endif
#else
            let v245 : std_path_Display = v218 |> unbox<std_path_Display>
            let _run_target_args'_v225 = v245 
            #endif
            let v248 : std_path_Display = _run_target_args'_v225 
            (* run_target_args'
            let v258 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v259 : string = "format!(\"{}\", $0)"
            let v260 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v259 
            let _run_target_args'_v258 = v260 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v261 : string = "format!(\"{}\", $0)"
            let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v261 
            let _run_target_args'_v258 = v262 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v263 : string = "format!(\"{}\", $0)"
            let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v248 v263 
            let _run_target_args'_v258 = v264 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v266 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v266 
            #endif
#if FABLE_COMPILER_PYTHON
            let v270 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v270 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v274 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v274 
            #endif
#else
            let v278 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v258 = v278 
            #endif
            let v281 : std_string_String = _run_target_args'_v258 
            let v287 : string = "fable_library_rust::String_::fromString($0)"
            let v288 : string = Fable.Core.RustInterop.emitRustExpr v281 v287 
            v288
    let _run_target_args'_v5 = v289 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v291 : string = null |> unbox<string>
    let _run_target_args'_v5 = v291 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v295 : string = null |> unbox<string>
    let _run_target_args'_v5 = v295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v299 : string = null |> unbox<string>
    let _run_target_args'_v5 = v299 
    #endif
#if FABLE_COMPILER_PYTHON
    let v303 : string = null |> unbox<string>
    let _run_target_args'_v5 = v303 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v307 : string = null |> unbox<string>
    let _run_target_args'_v5 = v307 
    #endif
#else
    let v310 : (string -> string) = System.IO.Path.GetFullPath
    let v311 : string = v310 v0
    let _run_target_args'_v5 = v311 
    #endif
    let v312 : string = _run_target_args'_v5 
    v312
and method69 (v0 : string) : string =
    let v1 : string = method70(v0)
    method46(v1)
and method73 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method74 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method75 () : string =
    let v0 : string = "\n"
    v0
and method77 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method38(v0)
    let v8 : bool = v7 = false
    let v113 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v65 : Vec<uint8> = method27(v59)
            let v66 : string = "std::string::String::from_utf8($0)"
            let v67 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v65 v66 
            (* run_target_args'
            let v69 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v70 : string = "$0.unwrap()"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v70 
            let _run_target_args'_v69 = v71 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v72 
            let _run_target_args'_v69 = v73 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v74 : string = "$0.unwrap()"
            let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v74 
            let _run_target_args'_v69 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v76 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v76 
            #endif
#if FABLE_COMPILER_PYTHON
            let v77 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v77 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v78 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v78 
            #endif
#else
            let v79 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v79 
            #endif
            let v80 : std_string_String = _run_target_args'_v69 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v80 v83 
            let _run_target_args'_v13 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v86 : string = null |> unbox<string>
            let _run_target_args'_v13 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v90 : string = null |> unbox<string>
            let _run_target_args'_v13 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v94 : string = null |> unbox<string>
            let _run_target_args'_v13 = v94 
            #endif
#if FABLE_COMPILER_PYTHON
            let v98 : string = null |> unbox<string>
            let _run_target_args'_v13 = v98 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v102 : string = null |> unbox<string>
            let _run_target_args'_v13 = v102 
            #endif
#else
            let v105 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v105 
            #endif
            let v106 : string = _run_target_args'_v13 
            let v112 : bool = v1 = v106
            v112
    let _run_target_args'_v6 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v119 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v131 
    #endif
#else
    let v135 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v135 
    #endif
    let v138 : bool = _run_target_args'_v6 
    v138
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method79 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method80 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method81 () : (std_string_String -> US16) =
    closure28()
and method82 () : string =
    
    
    
    
    
    let v1 : string = "Critical"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_red"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_red"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_red"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[91m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[91m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[91m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[91m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method84 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "error"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v81 : string = "format!(\"{:#?}\", $0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "format!(\"{:#?}\", $0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v76 = v88 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : string = $"%A{v1}"
    let _run_target_args'_v76 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : string = $"%A{v1}"
    let _run_target_args'_v76 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : string = $"%A{v1}"
    let _run_target_args'_v76 = v98 
    #endif
#else
    let v102 : string = $"%A{v1}"
    let _run_target_args'_v76 = v102 
    #endif
    let v105 : string = _run_target_args'_v76 
    let v112 : string = $"{v105}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v3, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = " }"
    let v122 : string = $"{v121}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v3, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = v3.l0
    v130
and method83 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method84(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method83(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method85 () : string =
    
    
    
    
    
    let v1 : string = "Verbose"
    let v2 : (unit -> string) = v1.ToLower
    let v3 : string = v2 ()
    let v6 : char = v3.[int 0]
    let v7 : string = method13(v6)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "inline_colorization::color_bright_black"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13 
    (* run_target_args'
    let v19 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "&*$0"
    let v21 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let _run_target_args'_v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "&*$0"
    let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v22 
    let _run_target_args'_v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "&*$0"
    let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let _run_target_args'_v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v35 
    #endif
#else
    let v39 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v19 = v39 
    #endif
    let v42 : Ref<Str> = _run_target_args'_v19 
    let v48 : string = "inline_colorization::color_reset"
    let v49 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14, v42, v49) v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v12 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "inline_colorization::color_bright_black"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v54 
    (* run_target_args'
    let v60 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v61 
    let _run_target_args'_v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "&*$0"
    let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v63 
    let _run_target_args'_v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v65 
    let _run_target_args'_v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v76 
    #endif
#else
    let v80 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v60 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v60 
    let v89 : string = "inline_colorization::color_reset"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v55, v83, v90) v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let _run_target_args'_v12 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "inline_colorization::color_bright_black"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "&*$0"
    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7 v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v117 
    #endif
#else
    let v121 : Ref<Str> = v7 |> unbox<Ref<Str>>
    let _run_target_args'_v101 = v121 
    #endif
    let v124 : Ref<Str> = _run_target_args'_v101 
    let v130 : string = "inline_colorization::color_reset"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v130 
    let v132 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v96, v124, v131) v132 
    let v134 : string = "fable_library_rust::String_::fromString($0)"
    let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let _run_target_args'_v12 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = "\u001b[90m"
    let v137 : string = method15()
    let v138 : string = v136 + v7 
    let v139 : string = v138 + v137 
    let _run_target_args'_v12 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = "\u001b[90m"
    let v141 : string = method15()
    let v142 : string = v140 + v7 
    let v143 : string = v142 + v141 
    let _run_target_args'_v12 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = "\u001b[90m"
    let v145 : string = method15()
    let v146 : string = v144 + v7 
    let v147 : string = v146 + v145 
    let _run_target_args'_v12 = v147 
    #endif
#else
    let v148 : string = "\u001b[90m"
    let v149 : string = method15()
    let v150 : string = v148 + v7 
    let v151 : string = v150 + v149 
    let _run_target_args'_v12 = v151 
    #endif
    let v152 : string = _run_target_args'_v12 
    v152
and method87 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "dir"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method86 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method87(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : string = method86(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method89 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method89(v1, v0)
and method88 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method90 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method91 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method93 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "dir"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method92 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method93(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method92(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method99 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "path"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method98 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method99(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.delete_directory_async"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = $"%A{v1}"
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : string = $"%A{v1}"
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : string = $"%A{v1}"
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : string = $"%A{v1}"
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : string = $"%A{v1}"
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : string = $"%A{v1}"
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v76 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v51 = v76 
        #endif
        let v77 : string = _run_target_args'_v51 
        let v83 : string = method55(v0)
        let v84 : string = method98(v27, v28, v29, v30, v31, v32, v45, v46, v77, v83)
        method19(v84)
and method97 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v23 : bool = true
                method89(v23, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v25 : exn = ex
                let v26 : int64 = v1 % 100L
                let v27 : bool = v26 = 0L
                if v27 then
                    let v28 : unit = ()
                    let v29 : (unit -> unit) = closure34(v0, v25)
                    let v30 : unit = (fun () -> v29 (); v28) ()
                    ()
                (* run_target_args'
                let v118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v119 : (int32 -> Async<unit>) = Async.Sleep
                let v120 : Async<unit> = v119 10
                let _run_target_args'_v118 = v120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v121 : (int32 -> Async<unit>) = Async.Sleep
                let v122 : Async<unit> = v121 10
                let _run_target_args'_v118 = v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : (int32 -> Async<unit>) = Async.Sleep
                let v124 : Async<unit> = v123 10
                let _run_target_args'_v118 = v124 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v125 : (int32 -> Async<unit>) = Async.Sleep
                let v126 : Async<unit> = v125 10
                let _run_target_args'_v118 = v126 
                #endif
#if FABLE_COMPILER_PYTHON
                let v127 : (int32 -> Async<unit>) = Async.Sleep
                let v128 : Async<unit> = v127 10
                let _run_target_args'_v118 = v128 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v129 : (int32 -> Async<unit>) = Async.Sleep
                let v130 : Async<unit> = v129 10
                let _run_target_args'_v118 = v130 
                #endif
#else
                let v131 : (int32 -> Async<unit>) = Async.Sleep
                let v132 : Async<unit> = v131 10
                let _run_target_args'_v118 = v132 
                #endif
                let v133 : Async<unit> = _run_target_args'_v118 
                do! v133 
                let v136 : int64 = v1 + 1L
                let v137 : Async<int64> = method96(v0, v136)
                return! v137 
                (* indent
                ()
            indent *)
            (* try_unit
            let v252 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1879 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v1879 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1881 : unit = ()
    let _let'_v1881 =
        async {
            try
                let v1884 : bool = true
                method89(v1884, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v1886 : exn = ex
                let v1887 : int64 = v1 % 100L
                let v1888 : bool = v1887 = 0L
                if v1888 then
                    let v1889 : unit = ()
                    let v1890 : (unit -> unit) = closure34(v0, v1886)
                    let v1891 : unit = (fun () -> v1890 (); v1889) ()
                    ()
                (* run_target_args'
                let v1979 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1980 : (int32 -> Async<unit>) = Async.Sleep
                let v1981 : Async<unit> = v1980 10
                let _run_target_args'_v1979 = v1981 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1982 : (int32 -> Async<unit>) = Async.Sleep
                let v1983 : Async<unit> = v1982 10
                let _run_target_args'_v1979 = v1983 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1984 : (int32 -> Async<unit>) = Async.Sleep
                let v1985 : Async<unit> = v1984 10
                let _run_target_args'_v1979 = v1985 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1986 : (int32 -> Async<unit>) = Async.Sleep
                let v1987 : Async<unit> = v1986 10
                let _run_target_args'_v1979 = v1987 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1988 : (int32 -> Async<unit>) = Async.Sleep
                let v1989 : Async<unit> = v1988 10
                let _run_target_args'_v1979 = v1989 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1990 : (int32 -> Async<unit>) = Async.Sleep
                let v1991 : Async<unit> = v1990 10
                let _run_target_args'_v1979 = v1991 
                #endif
#else
                let v1992 : (int32 -> Async<unit>) = Async.Sleep
                let v1993 : Async<unit> = v1992 10
                let _run_target_args'_v1979 = v1993 
                #endif
                let v1994 : Async<unit> = _run_target_args'_v1979 
                do! v1994 
                let v1997 : int64 = v1 + 1L
                let v1998 : Async<int64> = method96(v0, v1997)
                return! v1998 
                (* indent
                ()
            indent *)
            (* try_unit
            let v2113 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3740 : Async<int64> = _let'_v1881 
    let _run_target_args'_v6 = v3740 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3742 : unit = ()
    let _let'_v3742 =
        async {
            try
                let v3745 : bool = true
                method89(v3745, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v3747 : exn = ex
                let v3748 : int64 = v1 % 100L
                let v3749 : bool = v3748 = 0L
                if v3749 then
                    let v3750 : unit = ()
                    let v3751 : (unit -> unit) = closure34(v0, v3747)
                    let v3752 : unit = (fun () -> v3751 (); v3750) ()
                    ()
                (* run_target_args'
                let v3840 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3841 : (int32 -> Async<unit>) = Async.Sleep
                let v3842 : Async<unit> = v3841 10
                let _run_target_args'_v3840 = v3842 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3843 : (int32 -> Async<unit>) = Async.Sleep
                let v3844 : Async<unit> = v3843 10
                let _run_target_args'_v3840 = v3844 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3845 : (int32 -> Async<unit>) = Async.Sleep
                let v3846 : Async<unit> = v3845 10
                let _run_target_args'_v3840 = v3846 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3847 : (int32 -> Async<unit>) = Async.Sleep
                let v3848 : Async<unit> = v3847 10
                let _run_target_args'_v3840 = v3848 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3849 : (int32 -> Async<unit>) = Async.Sleep
                let v3850 : Async<unit> = v3849 10
                let _run_target_args'_v3840 = v3850 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3851 : (int32 -> Async<unit>) = Async.Sleep
                let v3852 : Async<unit> = v3851 10
                let _run_target_args'_v3840 = v3852 
                #endif
#else
                let v3853 : (int32 -> Async<unit>) = Async.Sleep
                let v3854 : Async<unit> = v3853 10
                let _run_target_args'_v3840 = v3854 
                #endif
                let v3855 : Async<unit> = _run_target_args'_v3840 
                do! v3855 
                let v3858 : int64 = v1 + 1L
                let v3859 : Async<int64> = method96(v0, v3858)
                return! v3859 
                (* indent
                ()
            indent *)
            (* try_unit
            let v3974 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5601 : Async<int64> = _let'_v3742 
    let _run_target_args'_v6 = v5601 
    #endif
#else
    let v5603 : unit = ()
    let _let'_v5603 =
        async {
            try
                let v5606 : bool = true
                method89(v5606, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v5608 : exn = ex
                let v5609 : int64 = v1 % 100L
                let v5610 : bool = v5609 = 0L
                if v5610 then
                    let v5611 : unit = ()
                    let v5612 : (unit -> unit) = closure34(v0, v5608)
                    let v5613 : unit = (fun () -> v5612 (); v5611) ()
                    ()
                (* run_target_args'
                let v5701 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5702 : (int32 -> Async<unit>) = Async.Sleep
                let v5703 : Async<unit> = v5702 10
                let _run_target_args'_v5701 = v5703 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5704 : (int32 -> Async<unit>) = Async.Sleep
                let v5705 : Async<unit> = v5704 10
                let _run_target_args'_v5701 = v5705 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5706 : (int32 -> Async<unit>) = Async.Sleep
                let v5707 : Async<unit> = v5706 10
                let _run_target_args'_v5701 = v5707 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5708 : (int32 -> Async<unit>) = Async.Sleep
                let v5709 : Async<unit> = v5708 10
                let _run_target_args'_v5701 = v5709 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5710 : (int32 -> Async<unit>) = Async.Sleep
                let v5711 : Async<unit> = v5710 10
                let _run_target_args'_v5701 = v5711 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v5712 : (int32 -> Async<unit>) = Async.Sleep
                let v5713 : Async<unit> = v5712 10
                let _run_target_args'_v5701 = v5713 
                #endif
#else
                let v5714 : (int32 -> Async<unit>) = Async.Sleep
                let v5715 : Async<unit> = v5714 10
                let _run_target_args'_v5701 = v5715 
                #endif
                let v5716 : Async<unit> = _run_target_args'_v5701 
                do! v5716 
                let v5719 : int64 = v1 + 1L
                let v5720 : Async<int64> = method96(v0, v5719)
                return! v5720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v5835 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7462 : Async<int64> = _let'_v5603 
    let _run_target_args'_v6 = v7462 
    #endif
    let v7463 : Async<int64> = _run_target_args'_v6 
    v7463
and method96 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method97(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method95 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method96(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method95(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : (Async<unit> -> unit) = Async.RunSynchronously
    v34 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : (Async<unit> -> unit) = Async.RunSynchronously
    v35 v27
    #endif
#else
    let v36 : (Async<unit> -> unit) = Async.RunSynchronously
    v36 v27
    #endif
    // run_target_args' is_unit
    ()
and method94 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method100 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method78 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v154 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : string = "std::fs::create_dir_all(&*$0)"
    let v156 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v155 
    let v157 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v159 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : string = "$0.map_err(|x| $1(x))"
    let v161 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v160 
    let _run_target_args'_v159 = v161 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v162 : string = "$0.map_err(|x| $1(x))"
    let v163 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v162 
    let _run_target_args'_v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v164 : string = "$0.map_err(|x| $1(x))"
    let v165 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v164 
    let _run_target_args'_v159 = v165 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v166 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v166 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v168 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v168 
    #endif
#else
    let v169 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v169 
    #endif
    let v170 : Result<unit, std_string_String> = _run_target_args'_v159 
    let v173 : (unit -> US16) = method80()
    let v174 : (std_string_String -> US16) = method81()
    let v176 : US16 = match v170 with Ok () -> v173 () | Error x -> v174 x
    match v176 with
    | US16_1(v228) -> (* Error *)
        let v229 : unit = ()
        let v230 : (unit -> unit) = closure29(v0, v228)
        let v231 : unit = (fun () -> v230 (); v229) ()
        ()
    | US16_0 -> (* Ok *)
        let v179 : unit = ()
        let v180 : (unit -> unit) = closure30(v0)
        let v181 : unit = (fun () -> v180 (); v179) ()
        ()
    (* run_target_args'
    let v282 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v283 : (unit -> unit) = method88(v0)
    let v284 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v283 "$0()" )
    let _run_target_args'_v282 = v284 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v285 : (unit -> unit) = method88(v0)
    let v286 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v285 "$0()" )
    let _run_target_args'_v282 = v286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : (unit -> unit) = method88(v0)
    let v288 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v287 "$0()" )
    let _run_target_args'_v282 = v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v289 : (unit -> unit) = method90(v0)
    let v290 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v289 () }
    let _run_target_args'_v282 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v291 : (unit -> unit) = method90(v0)
    let v292 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v291 () }
    let _run_target_args'_v282 = v292 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v293 : (unit -> unit) = method90(v0)
    let v294 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v293 () }
    let _run_target_args'_v282 = v294 
    #endif
#else
    let v295 : (unit -> unit) = method90(v0)
    let v296 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v295 () }
    let _run_target_args'_v282 = v296 
    #endif
    let v297 : System.IDisposable = _run_target_args'_v282 
    let _run_target_args'_v154 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v302 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v306 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v306 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v309 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v316 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v320 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v328 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v328 
    #endif
#if FABLE_COMPILER_PYTHON
    let v332 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v332 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v336 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v336 
    #endif
#else
    let v339 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v340 : bool = v339 v309
    let _run_target_args'_v314 = v340 
    #endif
    let v341 : bool = _run_target_args'_v314 
    let v347 : bool = v341 = false
    if v347 then
        (* run_target_args'
        let v352 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v354 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v354 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v358 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v358 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v362 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v362 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v366 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v366 
        #endif
#if FABLE_COMPILER_PYTHON
        let v370 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v370 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v374 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v374 
        #endif
#else
        let v377 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v378 : System.DateTime = v377 v309
        let _run_target_args'_v352 = v378 
        #endif
        let v379 : System.DateTime = _run_target_args'_v352 
        let v385 : _ = {| Exists = v341; CreationTime = v379 |}
        let v387 : string = $"%A{v385}"
        let v390 : unit = ()
        let v391 : (unit -> unit) = closure32(v0, v387)
        let v392 : unit = (fun () -> v391 (); v390) ()
        ()
    (* run_target_args'
    let v443 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v444 : (unit -> unit) = method94(v0)
    let v445 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v444 "$0()" )
    let _run_target_args'_v443 = v445 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v446 : (unit -> unit) = method94(v0)
    let v447 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v446 "$0()" )
    let _run_target_args'_v443 = v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v448 : (unit -> unit) = method94(v0)
    let v449 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v448 "$0()" )
    let _run_target_args'_v443 = v449 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : (unit -> unit) = method100(v0)
    let v451 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v450 () }
    let _run_target_args'_v443 = v451 
    #endif
#if FABLE_COMPILER_PYTHON
    let v452 : (unit -> unit) = method100(v0)
    let v453 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v452 () }
    let _run_target_args'_v443 = v453 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v454 : (unit -> unit) = method100(v0)
    let v455 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v454 () }
    let _run_target_args'_v443 = v455 
    #endif
#else
    let v456 : (unit -> unit) = method100(v0)
    let v457 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v456 () }
    let _run_target_args'_v443 = v457 
    #endif
    let v458 : System.IDisposable = _run_target_args'_v443 
    let _run_target_args'_v154 = v458 
    #endif
#if FABLE_COMPILER_PYTHON
    let v462 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v467 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v469 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v469 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v473 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v473 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v477 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v477 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v481 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v481 
    #endif
#if FABLE_COMPILER_PYTHON
    let v485 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v485 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v489 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v489 
    #endif
#else
    let v492 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v493 : bool = v492 v462
    let _run_target_args'_v467 = v493 
    #endif
    let v494 : bool = _run_target_args'_v467 
    let v500 : bool = v494 = false
    if v500 then
        (* run_target_args'
        let v505 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v507 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v507 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v511 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v511 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v515 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v515 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v519 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v519 
        #endif
#if FABLE_COMPILER_PYTHON
        let v523 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v523 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v527 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v527 
        #endif
#else
        let v530 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v531 : System.DateTime = v530 v462
        let _run_target_args'_v505 = v531 
        #endif
        let v532 : System.DateTime = _run_target_args'_v505 
        let v538 : _ = {| Exists = v494; CreationTime = v532 |}
        let v540 : string = $"%A{v538}"
        let v543 : unit = ()
        let v544 : (unit -> unit) = closure32(v0, v540)
        let v545 : unit = (fun () -> v544 (); v543) ()
        ()
    (* run_target_args'
    let v596 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v597 : (unit -> unit) = method94(v0)
    let v598 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v597 "$0()" )
    let _run_target_args'_v596 = v598 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v599 : (unit -> unit) = method94(v0)
    let v600 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v599 "$0()" )
    let _run_target_args'_v596 = v600 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v601 : (unit -> unit) = method94(v0)
    let v602 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v601 "$0()" )
    let _run_target_args'_v596 = v602 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v603 : (unit -> unit) = method100(v0)
    let v604 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v603 () }
    let _run_target_args'_v596 = v604 
    #endif
#if FABLE_COMPILER_PYTHON
    let v605 : (unit -> unit) = method100(v0)
    let v606 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v605 () }
    let _run_target_args'_v596 = v606 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v607 : (unit -> unit) = method100(v0)
    let v608 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v607 () }
    let _run_target_args'_v596 = v608 
    #endif
#else
    let v609 : (unit -> unit) = method100(v0)
    let v610 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v609 () }
    let _run_target_args'_v596 = v610 
    #endif
    let v611 : System.IDisposable = _run_target_args'_v596 
    let _run_target_args'_v154 = v611 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v615 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v620 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v622 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v626 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v626 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v630 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v630 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v634 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v634 
    #endif
#if FABLE_COMPILER_PYTHON
    let v638 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v638 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v642 
    #endif
#else
    let v645 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v646 : bool = v645 v615
    let _run_target_args'_v620 = v646 
    #endif
    let v647 : bool = _run_target_args'_v620 
    let v653 : bool = v647 = false
    if v653 then
        (* run_target_args'
        let v658 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v660 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v660 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v664 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v664 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v668 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v668 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v672 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v676 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v680 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v680 
        #endif
#else
        let v683 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v684 : System.DateTime = v683 v615
        let _run_target_args'_v658 = v684 
        #endif
        let v685 : System.DateTime = _run_target_args'_v658 
        let v691 : _ = {| Exists = v647; CreationTime = v685 |}
        let v693 : string = $"%A{v691}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure32(v0, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        ()
    (* run_target_args'
    let v749 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v750 : (unit -> unit) = method94(v0)
    let v751 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v750 "$0()" )
    let _run_target_args'_v749 = v751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v752 : (unit -> unit) = method94(v0)
    let v753 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v752 "$0()" )
    let _run_target_args'_v749 = v753 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v754 : (unit -> unit) = method94(v0)
    let v755 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v754 "$0()" )
    let _run_target_args'_v749 = v755 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v756 : (unit -> unit) = method100(v0)
    let v757 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v756 () }
    let _run_target_args'_v749 = v757 
    #endif
#if FABLE_COMPILER_PYTHON
    let v758 : (unit -> unit) = method100(v0)
    let v759 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v758 () }
    let _run_target_args'_v749 = v759 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v760 : (unit -> unit) = method100(v0)
    let v761 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v760 () }
    let _run_target_args'_v749 = v761 
    #endif
#else
    let v762 : (unit -> unit) = method100(v0)
    let v763 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v762 () }
    let _run_target_args'_v749 = v763 
    #endif
    let v764 : System.IDisposable = _run_target_args'_v749 
    let _run_target_args'_v154 = v764 
    #endif
#else
    let v768 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v773 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v775 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v775 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v779 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v779 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v783 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v783 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v787 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v787 
    #endif
#if FABLE_COMPILER_PYTHON
    let v791 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v791 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v795 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v795 
    #endif
#else
    let v798 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v799 : bool = v798 v768
    let _run_target_args'_v773 = v799 
    #endif
    let v800 : bool = _run_target_args'_v773 
    let v806 : bool = v800 = false
    if v806 then
        (* run_target_args'
        let v811 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v813 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v817 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v817 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v821 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v821 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v825 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v825 
        #endif
#if FABLE_COMPILER_PYTHON
        let v829 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v829 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v833 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v833 
        #endif
#else
        let v836 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v837 : System.DateTime = v836 v768
        let _run_target_args'_v811 = v837 
        #endif
        let v838 : System.DateTime = _run_target_args'_v811 
        let v844 : _ = {| Exists = v800; CreationTime = v838 |}
        let v846 : string = $"%A{v844}"
        let v849 : unit = ()
        let v850 : (unit -> unit) = closure32(v0, v846)
        let v851 : unit = (fun () -> v850 (); v849) ()
        ()
    (* run_target_args'
    let v902 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v903 : (unit -> unit) = method94(v0)
    let v904 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v903 "$0()" )
    let _run_target_args'_v902 = v904 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v905 : (unit -> unit) = method94(v0)
    let v906 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v905 "$0()" )
    let _run_target_args'_v902 = v906 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v907 : (unit -> unit) = method94(v0)
    let v908 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v907 "$0()" )
    let _run_target_args'_v902 = v908 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v909 : (unit -> unit) = method100(v0)
    let v910 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v909 () }
    let _run_target_args'_v902 = v910 
    #endif
#if FABLE_COMPILER_PYTHON
    let v911 : (unit -> unit) = method100(v0)
    let v912 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v911 () }
    let _run_target_args'_v902 = v912 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v913 : (unit -> unit) = method100(v0)
    let v914 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v913 () }
    let _run_target_args'_v902 = v914 
    #endif
#else
    let v915 : (unit -> unit) = method100(v0)
    let v916 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v915 () }
    let _run_target_args'_v902 = v916 
    #endif
    let v917 : System.IDisposable = _run_target_args'_v902 
    let _run_target_args'_v154 = v917 
    #endif
    let v921 : System.IDisposable = _run_target_args'_v154 
    v921
and method76 (v0 : string, v1 : string) : unit =
    let v2 : bool = method77(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method41(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method39(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method78(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method102 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method104 () : string =
    let v0 : string = ""
    v0
and closure37 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure36 () (v0 : char) : (UH0 -> UH0) =
    closure37(v0)
and method105 () : (char -> (UH0 -> UH0)) =
    closure36()
and method106 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method106(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure38 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method107(v0, v4)
        let v6 : string = " "
        let v7 : string = v2 + v6 
        v5 v7
and method107 (v0 : int32, v1 : int32) : (string -> string) =
    closure38(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method32(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v70 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v71 : (char -> (UH0 -> UH0)) = method105()
            let v72 : (char list -> (UH0 -> UH0)) = v70 v71
            let v73 : (UH0 -> UH0) = v72 v62
            let v74 : UH0 = UH0_0
            let v75 : UH0 = v73 v74
            let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method106(v75, v1, v2, v3)
            US18_0(v10, v45, v104, v105, v106)
        else
            let v109 : string = "\n"
            let v110 : int32 = v0.IndexOf v109 
            let v113 : int32 = v110 - 1
            let v114 : bool = -2 = v113
            let v122 : int32 =
                if v114 then
                    let v116 : (string -> int32) = String.length
                    let v117 : int32 = v116 v0
                    let v120 : int32 = v117 + 1
                    v120
                else
                    let v121 : int32 = v113 + 1
                    v121
            let v128 : int32 = 0 |> int32 
            let v141 : int32 = v122 |> int32 
            let v149 : int32 = v141 - 1
            let v151 : string = v0.[int v128..int v149]
            let v156 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v151}"
            let v159 : int32 = v3 - 1
            let v160 : int32 = 0
            let v161 : (string -> string) = method107(v159, v160)
            let v162 : string = ""
            let v163 : string = v161 v162
            let v164 : string = "^"
            let v165 : string = v163 + v164 
            let v167 : string = $"{v156}
{v165}
"
            US18_1(v167)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method32(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v70 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v71 : (char -> (UH0 -> UH0)) = method105()
            let v72 : (char list -> (UH0 -> UH0)) = v70 v71
            let v73 : (UH0 -> UH0) = v72 v62
            let v74 : UH0 = UH0_0
            let v75 : UH0 = v73 v74
            let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method106(v75, v1, v2, v3)
            US18_0(v10, v45, v104, v105, v106)
        else
            let v109 : string = "\n"
            let v110 : int32 = v0.IndexOf v109 
            let v113 : int32 = v110 - 1
            let v114 : bool = -2 = v113
            let v122 : int32 =
                if v114 then
                    let v116 : (string -> int32) = String.length
                    let v117 : int32 = v116 v0
                    let v120 : int32 = v117 + 1
                    v120
                else
                    let v121 : int32 = v113 + 1
                    v121
            let v128 : int32 = 0 |> int32 
            let v141 : int32 = v122 |> int32 
            let v149 : int32 = v141 - 1
            let v151 : string = v0.[int v128..int v149]
            let v156 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v151}"
            let v159 : int32 = v3 - 1
            let v160 : int32 = 0
            let v161 : (string -> string) = method107(v159, v160)
            let v162 : string = ""
            let v163 : string = v161 v162
            let v164 : string = "^"
            let v165 : string = v163 + v164 
            let v167 : string = $"{v156}
{v165}
"
            US18_1(v167)
and method108 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method108(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method109 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method109(v0, v17)
and method110 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v145 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method109(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int32 = v68.Length
                let v72 : (char []) = Array.zeroCreate<char> (v71)
                let v73 : Mut5 = {l0 = 0} : Mut5
                while method32(v71, v73) do
                    let v75 : int32 = v73.l0
                    let v76 : char = v68.[int v75]
                    v72.[int v75] <- v76
                    let v77 : int32 = v75 + 1
                    v73.l0 <- v77
                    ()
                let v79 : char list = v72 |> Array.toList
                let v87 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v88 : (char -> (UH0 -> UH0)) = method105()
                let v89 : (char list -> (UH0 -> UH0)) = v87 v88
                let v90 : (UH0 -> UH0) = v89 v79
                let v91 : UH0 = UH0_0
                let v92 : UH0 = v90 v91
                let struct (v121 : System.Text.StringBuilder, v122 : int32, v123 : int32) = method106(v92, v2, v3, v4)
                US18_0(v25, v62, v121, v122, v123)
            else
                let v125 : char list = []
                let v127 : char list = ''' :: v125 
                let v131 : char list = '"' :: v127 
                let v135 : (char list -> (char [])) = List.toArray
                let v136 : (char []) = v135 v131
                let v140 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v136} / s: %A{struct (v2, v3, v4)}"
                US18_1(v140)
    let v157 : US18 =
        match v145 with
        | US18_1(v154) -> (* Error *)
            US18_1(v154)
        | US18_0(v146, v147, v148, v149, v150) -> (* Ok *)
            let v151 : bool = '\\' = v146
            let v152 : char =
                if v151 then
                    '/'
                else
                    v146
            US18_0(v152, v147, v148, v149, v150)
    match v157 with
    | US18_1(v174) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v158, v159, v160, v161, v162) -> (* Ok *)
        let v164 : (char -> string) = _.ToString()
        let v165 : string = v164 v158
        let v168 : string = v0 + v165 
        method110(v168, v159, v160, v161, v162)
and method111 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method111(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method112 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method112(v0, v21)
and method113 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v153 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method112(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method32(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v91 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v92 : (char -> (UH0 -> UH0)) = method105()
                let v93 : (char list -> (UH0 -> UH0)) = v91 v92
                let v94 : (UH0 -> UH0) = v93 v83
                let v95 : UH0 = UH0_0
                let v96 : UH0 = v94 v95
                let struct (v125 : System.Text.StringBuilder, v126 : int32, v127 : int32) = method106(v96, v2, v3, v4)
                US18_0(v29, v66, v125, v126, v127)
            else
                let v129 : char list = []
                let v131 : char list = ' ' :: v129 
                let v135 : char list = ''' :: v131 
                let v139 : char list = '"' :: v135 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v139
                let v148 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US18_1(v148)
    let v165 : US18 =
        match v153 with
        | US18_1(v162) -> (* Error *)
            US18_1(v162)
        | US18_0(v154, v155, v156, v157, v158) -> (* Ok *)
            let v159 : bool = '\\' = v154
            let v160 : char =
                if v159 then
                    '/'
                else
                    v154
            US18_0(v160, v155, v156, v157, v158)
    match v165 with
    | US18_1(v182) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v166, v167, v168, v169, v170) -> (* Ok *)
        let v172 : (char -> string) = _.ToString()
        let v173 : string = v172 v166
        let v176 : string = v0 + v173 
        method113(v176, v167, v168, v169, v170)
and method114 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method114(v0, v6)
        else
            v1
and method115 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v108 : US18 =
        if v5 then
            let v7 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v7)
        else
            let v11 : char = v1.[int 0]
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v1
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v1.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v11
            let v54 : int32 = v51.Length
            let v55 : (char []) = Array.zeroCreate<char> (v54)
            let v56 : Mut5 = {l0 = 0} : Mut5
            while method32(v54, v56) do
                let v58 : int32 = v56.l0
                let v59 : char = v51.[int v58]
                v55.[int v58] <- v59
                let v60 : int32 = v58 + 1
                v56.l0 <- v60
                ()
            let v62 : char list = v55 |> Array.toList
            let v70 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v71 : (char -> (UH0 -> UH0)) = method105()
            let v72 : (char list -> (UH0 -> UH0)) = v70 v71
            let v73 : (UH0 -> UH0) = v72 v62
            let v74 : UH0 = UH0_0
            let v75 : UH0 = v73 v74
            let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method106(v75, v2, v3, v4)
            US18_0(v11, v45, v104, v105, v106)
    match v108 with
    | US18_1(v125) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v109, v110, v111, v112, v113) -> (* Ok *)
        let v115 : (char -> string) = _.ToString()
        let v116 : string = v115 v109
        let v119 : string = v0 + v116 
        method115(v119, v110, v111, v112, v113)
and method103 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure39()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US18 = method108(v10, v16, v23)
    let v244 : US19 =
        match v24 with
        | US18_1(v241) -> (* Error *)
            US19_1(v241)
        | US18_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v170 : US18 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US18_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method109(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int32 = v93.Length
                        let v97 : (char []) = Array.zeroCreate<char> (v96)
                        let v98 : Mut5 = {l0 = 0} : Mut5
                        while method32(v96, v98) do
                            let v100 : int32 = v98.l0
                            let v101 : char = v93.[int v100]
                            v97.[int v100] <- v101
                            let v102 : int32 = v100 + 1
                            v98.l0 <- v102
                            ()
                        let v104 : char list = v97 |> Array.toList
                        let v112 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v113 : (char -> (UH0 -> UH0)) = method105()
                        let v114 : (char list -> (UH0 -> UH0)) = v112 v113
                        let v115 : (UH0 -> UH0) = v114 v104
                        let v116 : UH0 = UH0_0
                        let v117 : UH0 = v115 v116
                        let struct (v146 : System.Text.StringBuilder, v147 : int32, v148 : int32) = method106(v117, v27, v28, v29)
                        US18_0(v50, v87, v146, v147, v148)
                    else
                        let v150 : char list = []
                        let v152 : char list = ''' :: v150 
                        let v156 : char list = '"' :: v152 
                        let v160 : (char list -> (char [])) = List.toArray
                        let v161 : (char []) = v160 v156
                        let v165 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v161} / s: %A{struct (v27, v28, v29)}"
                        US18_1(v165)
            let v182 : US18 =
                match v170 with
                | US18_1(v179) -> (* Error *)
                    US18_1(v179)
                | US18_0(v171, v172, v173, v174, v175) -> (* Ok *)
                    let v176 : bool = '\\' = v171
                    let v177 : char =
                        if v176 then
                            '/'
                        else
                            v171
                    US18_0(v177, v172, v173, v174, v175)
            let v202 : US19 =
                match v182 with
                | US18_1(v199) -> (* Error *)
                    US19_1(v199)
                | US18_0(v183, v184, v185, v186, v187) -> (* Ok *)
                    let v189 : (char -> string) = _.ToString()
                    let v190 : string = v189 v183
                    let struct (v193 : string, v194 : string, v195 : System.Text.StringBuilder, v196 : int32, v197 : int32) = method110(v190, v184, v185, v186, v187)
                    US19_0(v193, v194, v195, v196, v197)
            let v212 : US19 =
                match v202 with
                | US19_1(v209) -> (* Error *)
                    US19_0(v9, v26, v27, v28, v29)
                | US19_0(v203, v204, v205, v206, v207) -> (* Ok *)
                    US19_0(v203, v204, v205, v206, v207)
            match v212 with
            | US19_1(v236) -> (* Error *)
                let v237 : string = "parsing.between / expected content"
                US19_1(v237)
            | US19_0(v213, v214, v215, v216, v217) -> (* Ok *)
                let v218 : UH1 = UH1_0
                let v219 : UH1 = UH1_1(v20, v218)
                let v220 : UH1 = UH1_1(v19, v219)
                let v221 : US18 = method111(v214, v215, v216, v217, v220)
                match v221 with
                | US18_1(v228) -> (* Error *)
                    let v230 : string = $"parsing.between / expected closing delimiter / e: %A{v228} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v214, v215, v216, v217)}"
                    US19_1(v230)
                | US18_0(v222, v223, v224, v225, v226) -> (* Ok *)
                    US19_0(v213, v223, v224, v225, v226)
    let v510 : US19 =
        match v244 with
        | US19_1(v250) -> (* Error *)
            let v251 : bool = "" = v10
            let v401 : US18 =
                if v251 then
                    let v252 : char list = []
                    let v254 : char list = ' ' :: v252 
                    let v258 : char list = ''' :: v254 
                    let v262 : char list = '"' :: v258 
                    let v266 : (char list -> (char [])) = List.toArray
                    let v267 : (char []) = v266 v262
                    let v271 : string = $"parsing.none_of / unexpected end of input / chars: %A{v267} / s: %A{struct (v16, 1, 1)}"
                    US18_1(v271)
                else
                    let v275 : char = v10.[int 0]
                    let v276 : int64 = 0L
                    let v277 : bool = method112(v275, v276)
                    let v278 : bool = v277 = false
                    if v278 then
                        let v280 : (string -> int32) = String.length
                        let v281 : int32 = v280 v10
                        let v289 : int32 = 1 |> int32 
                        let v302 : int32 = v281 |> int32 
                        let v310 : int32 = v302 - 1
                        let v312 : string = v10.[int v289..int v310]
                        let v317 : (char -> string) = _.ToString()
                        let v318 : string = v317 v275
                        let v321 : int32 = v318.Length
                        let v322 : (char []) = Array.zeroCreate<char> (v321)
                        let v323 : Mut5 = {l0 = 0} : Mut5
                        while method32(v321, v323) do
                            let v325 : int32 = v323.l0
                            let v326 : char = v318.[int v325]
                            v322.[int v325] <- v326
                            let v327 : int32 = v325 + 1
                            v323.l0 <- v327
                            ()
                        let v329 : char list = v322 |> Array.toList
                        let v337 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v338 : (char -> (UH0 -> UH0)) = method105()
                        let v339 : (char list -> (UH0 -> UH0)) = v337 v338
                        let v340 : (UH0 -> UH0) = v339 v329
                        let v341 : UH0 = UH0_0
                        let v342 : UH0 = v340 v341
                        let v371 : int32 = 1
                        let v372 : int32 = 1
                        let struct (v373 : System.Text.StringBuilder, v374 : int32, v375 : int32) = method106(v342, v16, v371, v372)
                        US18_0(v275, v312, v373, v374, v375)
                    else
                        let v377 : char list = []
                        let v379 : char list = ' ' :: v377 
                        let v383 : char list = ''' :: v379 
                        let v387 : char list = '"' :: v383 
                        let v391 : (char list -> (char [])) = List.toArray
                        let v392 : (char []) = v391 v387
                        let v396 : string = $"parsing.none_of / unexpected char: '{v275}' / chars: %A{v392} / s: %A{struct (v16, 1, 1)}"
                        US18_1(v396)
            let v413 : US18 =
                match v401 with
                | US18_1(v410) -> (* Error *)
                    US18_1(v410)
                | US18_0(v402, v403, v404, v405, v406) -> (* Ok *)
                    let v407 : bool = '\\' = v402
                    let v408 : char =
                        if v407 then
                            '/'
                        else
                            v402
                    US18_0(v408, v403, v404, v405, v406)
            let v433 : US19 =
                match v413 with
                | US18_1(v430) -> (* Error *)
                    US19_1(v430)
                | US18_0(v414, v415, v416, v417, v418) -> (* Ok *)
                    let v420 : (char -> string) = _.ToString()
                    let v421 : string = v420 v414
                    let struct (v424 : string, v425 : string, v426 : System.Text.StringBuilder, v427 : int32, v428 : int32) = method113(v421, v415, v416, v417, v418)
                    US19_0(v424, v425, v426, v427, v428)
            match v433 with
            | US19_1(v439) -> (* Error *)
                let v440 : int32 = v10.Length
                let v441 : bool = v440 = 0
                let v448 : US21 =
                    if v441 then
                        US21_0(v10, v16, 1, 1)
                    else
                        let v444 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US21_1(v444)
                let v457 : US19 =
                    match v448 with
                    | US21_1(v454) -> (* Error *)
                        US19_1(v454)
                    | US21_0(v449, v450, v451, v452) -> (* Ok *)
                        US19_0(v9, v449, v450, v451, v452)
                match v457 with
                | US19_1(v503) -> (* Error *)
                    US19_1(v503)
                | US19_0(v458, v459, v460, v461, v462) -> (* Ok *)
                    let v463 : int32 = 0
                    let v464 : int32 = method114(v459, v463)
                    let v466 : (string -> int32) = String.length
                    let v467 : int32 = v466 v459
                    let v475 : int32 = v464 |> int32 
                    let v488 : int32 = v467 |> int32 
                    let v496 : int32 = v488 - 1
                    let v498 : string = v459.[int v475..int v496]
                    US19_0(v458, v498, v460, v461, v462)
            | US19_0(v434, v435, v436, v437, v438) -> (* Ok *)
                v433
        | US19_0(v245, v246, v247, v248, v249) -> (* Ok *)
            v244
    let v854 : US22 =
        match v510 with
        | US19_1(v851) -> (* Error *)
            US22_1(v851)
        | US19_0(v511, v512, v513, v514, v515) -> (* Ok *)
            let v516 : bool = "" = v512
            let v683 : US18 =
                if v516 then
                    let v518 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v513, v514, v515)}"
                    US18_1(v518)
                else
                    let v522 : char = v512.[int 0]
                    let v523 : bool = v522 = ' '
                    if v523 then
                        let v525 : (string -> int32) = String.length
                        let v526 : int32 = v525 v512
                        let v534 : int32 = 1 |> int32 
                        let v547 : int32 = v526 |> int32 
                        let v555 : int32 = v547 - 1
                        let v557 : string = v512.[int v534..int v555]
                        let v562 : (char -> string) = _.ToString()
                        let v563 : string = v562 v522
                        let v566 : int32 = v563.Length
                        let v567 : (char []) = Array.zeroCreate<char> (v566)
                        let v568 : Mut5 = {l0 = 0} : Mut5
                        while method32(v566, v568) do
                            let v570 : int32 = v568.l0
                            let v571 : char = v563.[int v570]
                            v567.[int v570] <- v571
                            let v572 : int32 = v570 + 1
                            v568.l0 <- v572
                            ()
                        let v574 : char list = v567 |> Array.toList
                        let v582 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v583 : (char -> (UH0 -> UH0)) = method105()
                        let v584 : (char list -> (UH0 -> UH0)) = v582 v583
                        let v585 : (UH0 -> UH0) = v584 v574
                        let v586 : UH0 = UH0_0
                        let v587 : UH0 = v585 v586
                        let struct (v616 : System.Text.StringBuilder, v617 : int32, v618 : int32) = method106(v587, v513, v514, v515)
                        US18_0(v522, v557, v616, v617, v618)
                    else
                        let v621 : string = "\n"
                        let v622 : int32 = v512.IndexOf v621 
                        let v625 : int32 = v622 - 1
                        let v626 : bool = -2 = v625
                        let v634 : int32 =
                            if v626 then
                                let v628 : (string -> int32) = String.length
                                let v629 : int32 = v628 v512
                                let v632 : int32 = v629 + 1
                                v632
                            else
                                let v633 : int32 = v625 + 1
                                v633
                        let v640 : int32 = 0 |> int32 
                        let v653 : int32 = v634 |> int32 
                        let v661 : int32 = v653 - 1
                        let v663 : string = v512.[int v640..int v661]
                        let v668 : string = $"parsing.p_char / expected: '{' '}' / line: {v514} / col: {v515}
{v513}{v663}"
                        let v671 : int32 = v515 - 1
                        let v672 : int32 = 0
                        let v673 : (string -> string) = method107(v671, v672)
                        let v674 : string = v673 v9
                        let v675 : string = "^"
                        let v676 : string = v674 + v675 
                        let v678 : string = $"{v668}
{v676}
"
                        US18_1(v678)
            let v695 : US23 =
                match v683 with
                | US18_1(v691) -> (* Error *)
                    let v692 : US20 = US20_1
                    US23_0(v692, v512, v513, v514, v515)
                | US18_0(v684, v685, v686, v687, v688) -> (* Ok *)
                    let v689 : US20 = US20_0(v684)
                    US23_0(v689, v685, v686, v687, v688)
            let v828 : US19 =
                match v695 with
                | US23_1(v825) -> (* Error *)
                    US19_1(v825)
                | US23_0(v696, v697, v698, v699, v700) -> (* Ok *)
                    let v701 : bool = "" = v697
                    let v804 : US18 =
                        if v701 then
                            let v703 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v698, v699, v700)}"
                            US18_1(v703)
                        else
                            let v707 : char = v697.[int 0]
                            let v709 : (string -> int32) = String.length
                            let v710 : int32 = v709 v697
                            let v718 : int32 = 1 |> int32 
                            let v731 : int32 = v710 |> int32 
                            let v739 : int32 = v731 - 1
                            let v741 : string = v697.[int v718..int v739]
                            let v746 : (char -> string) = _.ToString()
                            let v747 : string = v746 v707
                            let v750 : int32 = v747.Length
                            let v751 : (char []) = Array.zeroCreate<char> (v750)
                            let v752 : Mut5 = {l0 = 0} : Mut5
                            while method32(v750, v752) do
                                let v754 : int32 = v752.l0
                                let v755 : char = v747.[int v754]
                                v751.[int v754] <- v755
                                let v756 : int32 = v754 + 1
                                v752.l0 <- v756
                                ()
                            let v758 : char list = v751 |> Array.toList
                            let v766 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v767 : (char -> (UH0 -> UH0)) = method105()
                            let v768 : (char list -> (UH0 -> UH0)) = v766 v767
                            let v769 : (UH0 -> UH0) = v768 v758
                            let v770 : UH0 = UH0_0
                            let v771 : UH0 = v769 v770
                            let struct (v800 : System.Text.StringBuilder, v801 : int32, v802 : int32) = method106(v771, v698, v699, v700)
                            US18_0(v707, v741, v800, v801, v802)
                    match v804 with
                    | US18_1(v821) -> (* Error *)
                        US19_1(v821)
                    | US18_0(v805, v806, v807, v808, v809) -> (* Ok *)
                        let v811 : (char -> string) = _.ToString()
                        let v812 : string = v811 v805
                        let struct (v815 : string, v816 : string, v817 : System.Text.StringBuilder, v818 : int32, v819 : int32) = method115(v812, v806, v807, v808, v809)
                        US19_0(v815, v816, v817, v818, v819)
            let v840 : US24 =
                match v828 with
                | US19_1(v836) -> (* Error *)
                    let v837 : US5 = US5_1
                    US24_0(v837, v512, v513, v514, v515)
                | US19_0(v829, v830, v831, v832, v833) -> (* Ok *)
                    let v834 : US5 = US5_0(v829)
                    US24_0(v834, v830, v831, v832, v833)
            match v840 with
            | US24_1(v847) -> (* Error *)
                US22_1(v847)
            | US24_0(v841, v842, v843, v844, v845) -> (* Ok *)
                US22_0(v511, v841, v842, v843, v844, v845)
    match v854 with
    | US22_1(v862) -> (* Error *)
        US17_1(v862)
    | US22_0(v855, v856, v857, v858, v859, v860) -> (* Ok *)
        US17_0(v855, v856)
and method118 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method118(v0, v25)
and method119 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v161 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int32 = v76.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method32(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v76.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v87 : char list = v80 |> Array.toList
                let v95 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v96 : (char -> (UH0 -> UH0)) = method105()
                let v97 : (char list -> (UH0 -> UH0)) = v95 v96
                let v98 : (UH0 -> UH0) = v97 v87
                let v99 : UH0 = UH0_0
                let v100 : UH0 = v98 v99
                let struct (v129 : System.Text.StringBuilder, v130 : int32, v131 : int32) = method106(v100, v2, v3, v4)
                US18_0(v33, v70, v129, v130, v131)
            else
                let v133 : char list = []
                let v135 : char list = ' ' :: v133 
                let v139 : char list = '"' :: v135 
                let v143 : char list = '`' :: v139 
                let v147 : char list = '\\' :: v143 
                let v151 : (char list -> (char [])) = List.toArray
                let v152 : (char []) = v151 v147
                let v156 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v152} / s: %A{struct (v2, v3, v4)}"
                US18_1(v156)
    match v161 with
    | US18_1(v178) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v162, v163, v164, v165, v166) -> (* Ok *)
        let v168 : (char -> string) = _.ToString()
        let v169 : string = v168 v162
        let v172 : string = v0 + v169 
        method119(v172, v163, v164, v165, v166)
and method121 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method121(v0, v21)
and closure40 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v172 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int32 = v51.Length
                let v55 : (char []) = Array.zeroCreate<char> (v54)
                let v56 : Mut5 = {l0 = 0} : Mut5
                while method32(v54, v56) do
                    let v58 : int32 = v56.l0
                    let v59 : char = v51.[int v58]
                    v55.[int v58] <- v59
                    let v60 : int32 = v58 + 1
                    v56.l0 <- v60
                    ()
                let v62 : char list = v55 |> Array.toList
                let v70 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v71 : (char -> (UH0 -> UH0)) = method105()
                let v72 : (char list -> (UH0 -> UH0)) = v70 v71
                let v73 : (UH0 -> UH0) = v72 v62
                let v74 : UH0 = UH0_0
                let v75 : UH0 = v73 v74
                let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method106(v75, v1, v2, v3)
                US18_0(v10, v45, v104, v105, v106)
            else
                let v109 : string = "\n"
                let v110 : int32 = v0.IndexOf v109 
                let v113 : int32 = v110 - 1
                let v114 : bool = -2 = v113
                let v122 : int32 =
                    if v114 then
                        let v116 : (string -> int32) = String.length
                        let v117 : int32 = v116 v0
                        let v120 : int32 = v117 + 1
                        v120
                    else
                        let v121 : int32 = v113 + 1
                        v121
                let v128 : int32 = 0 |> int32 
                let v141 : int32 = v122 |> int32 
                let v149 : int32 = v141 - 1
                let v151 : string = v0.[int v128..int v149]
                let v156 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v151}"
                let v159 : int32 = v3 - 1
                let v160 : int32 = 0
                let v161 : (string -> string) = method107(v159, v160)
                let v162 : string = ""
                let v163 : string = v161 v162
                let v164 : string = "^"
                let v165 : string = v163 + v164 
                let v167 : string = $"{v156}
{v165}
"
                US18_1(v167)
    let v285 : US18 =
        match v172 with
        | US18_1(v282) -> (* Error *)
            US18_1(v282)
        | US18_0(v173, v174, v175, v176, v177) -> (* Ok *)
            let v178 : bool = "" = v174
            if v178 then
                let v180 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v175, v176, v177)}"
                US18_1(v180)
            else
                let v184 : char = v174.[int 0]
                let v186 : (string -> int32) = String.length
                let v187 : int32 = v186 v174
                let v195 : int32 = 1 |> int32 
                let v208 : int32 = v187 |> int32 
                let v216 : int32 = v208 - 1
                let v218 : string = v174.[int v195..int v216]
                let v223 : (char -> string) = _.ToString()
                let v224 : string = v223 v184
                let v227 : int32 = v224.Length
                let v228 : (char []) = Array.zeroCreate<char> (v227)
                let v229 : Mut5 = {l0 = 0} : Mut5
                while method32(v227, v229) do
                    let v231 : int32 = v229.l0
                    let v232 : char = v224.[int v231]
                    v228.[int v231] <- v232
                    let v233 : int32 = v231 + 1
                    v229.l0 <- v233
                    ()
                let v235 : char list = v228 |> Array.toList
                let v243 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v244 : (char -> (UH0 -> UH0)) = method105()
                let v245 : (char list -> (UH0 -> UH0)) = v243 v244
                let v246 : (UH0 -> UH0) = v245 v235
                let v247 : UH0 = UH0_0
                let v248 : UH0 = v246 v247
                let struct (v277 : System.Text.StringBuilder, v278 : int32, v279 : int32) = method106(v248, v175, v176, v177)
                US18_0(v184, v218, v277, v278, v279)
    match v285 with
    | US18_1(v303) -> (* Error *)
        US19_1(v303)
    | US18_0(v286, v287, v288, v289, v290) -> (* Ok *)
        let v292 : (char -> string) = _.ToString()
        let v293 : string = v292 '\\'
        let v297 : (char -> string) = _.ToString()
        let v298 : string = v297 v286
        let v301 : string = v293 + v298 
        US19_0(v301, v287, v288, v289, v290)
and closure41 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v172 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int32 = v51.Length
                let v55 : (char []) = Array.zeroCreate<char> (v54)
                let v56 : Mut5 = {l0 = 0} : Mut5
                while method32(v54, v56) do
                    let v58 : int32 = v56.l0
                    let v59 : char = v51.[int v58]
                    v55.[int v58] <- v59
                    let v60 : int32 = v58 + 1
                    v56.l0 <- v60
                    ()
                let v62 : char list = v55 |> Array.toList
                let v70 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v71 : (char -> (UH0 -> UH0)) = method105()
                let v72 : (char list -> (UH0 -> UH0)) = v70 v71
                let v73 : (UH0 -> UH0) = v72 v62
                let v74 : UH0 = UH0_0
                let v75 : UH0 = v73 v74
                let struct (v104 : System.Text.StringBuilder, v105 : int32, v106 : int32) = method106(v75, v1, v2, v3)
                US18_0(v10, v45, v104, v105, v106)
            else
                let v109 : string = "\n"
                let v110 : int32 = v0.IndexOf v109 
                let v113 : int32 = v110 - 1
                let v114 : bool = -2 = v113
                let v122 : int32 =
                    if v114 then
                        let v116 : (string -> int32) = String.length
                        let v117 : int32 = v116 v0
                        let v120 : int32 = v117 + 1
                        v120
                    else
                        let v121 : int32 = v113 + 1
                        v121
                let v128 : int32 = 0 |> int32 
                let v141 : int32 = v122 |> int32 
                let v149 : int32 = v141 - 1
                let v151 : string = v0.[int v128..int v149]
                let v156 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v151}"
                let v159 : int32 = v3 - 1
                let v160 : int32 = 0
                let v161 : (string -> string) = method107(v159, v160)
                let v162 : string = ""
                let v163 : string = v161 v162
                let v164 : string = "^"
                let v165 : string = v163 + v164 
                let v167 : string = $"{v156}
{v165}
"
                US18_1(v167)
    let v285 : US18 =
        match v172 with
        | US18_1(v282) -> (* Error *)
            US18_1(v282)
        | US18_0(v173, v174, v175, v176, v177) -> (* Ok *)
            let v178 : bool = "" = v174
            if v178 then
                let v180 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v175, v176, v177)}"
                US18_1(v180)
            else
                let v184 : char = v174.[int 0]
                let v186 : (string -> int32) = String.length
                let v187 : int32 = v186 v174
                let v195 : int32 = 1 |> int32 
                let v208 : int32 = v187 |> int32 
                let v216 : int32 = v208 - 1
                let v218 : string = v174.[int v195..int v216]
                let v223 : (char -> string) = _.ToString()
                let v224 : string = v223 v184
                let v227 : int32 = v224.Length
                let v228 : (char []) = Array.zeroCreate<char> (v227)
                let v229 : Mut5 = {l0 = 0} : Mut5
                while method32(v227, v229) do
                    let v231 : int32 = v229.l0
                    let v232 : char = v224.[int v231]
                    v228.[int v231] <- v232
                    let v233 : int32 = v231 + 1
                    v229.l0 <- v233
                    ()
                let v235 : char list = v228 |> Array.toList
                let v243 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v244 : (char -> (UH0 -> UH0)) = method105()
                let v245 : (char list -> (UH0 -> UH0)) = v243 v244
                let v246 : (UH0 -> UH0) = v245 v235
                let v247 : UH0 = UH0_0
                let v248 : UH0 = v246 v247
                let struct (v277 : System.Text.StringBuilder, v278 : int32, v279 : int32) = method106(v248, v175, v176, v177)
                US18_0(v184, v218, v277, v278, v279)
    match v285 with
    | US18_1(v303) -> (* Error *)
        US19_1(v303)
    | US18_0(v286, v287, v288, v289, v290) -> (* Ok *)
        let v292 : (char -> string) = _.ToString()
        let v293 : string = v292 '`'
        let v297 : (char -> string) = _.ToString()
        let v298 : string = v297 v286
        let v301 : string = v293 + v298 
        US19_0(v301, v287, v288, v289, v290)
and method122 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method122(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method123 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method123(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method120 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v153 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method32(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v91 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v92 : (char -> (UH0 -> UH0)) = method105()
                let v93 : (char list -> (UH0 -> UH0)) = v91 v92
                let v94 : (UH0 -> UH0) = v93 v83
                let v95 : UH0 = UH0_0
                let v96 : UH0 = v94 v95
                let struct (v125 : System.Text.StringBuilder, v126 : int32, v127 : int32) = method106(v96, v2, v3, v4)
                US18_0(v29, v66, v125, v126, v127)
            else
                let v129 : char list = []
                let v131 : char list = '"' :: v129 
                let v135 : char list = '`' :: v131 
                let v139 : char list = '\\' :: v135 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v139
                let v148 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US18_1(v148)
    let v168 : US19 =
        match v153 with
        | US18_1(v165) -> (* Error *)
            US19_1(v165)
        | US18_0(v154, v155, v156, v157, v158) -> (* Ok *)
            let v160 : (char -> string) = _.ToString()
            let v161 : string = v160 v154
            US19_0(v161, v155, v156, v157, v158)
    let v182 : US19 =
        match v168 with
        | US19_1(v174) -> (* Error *)
            let v175 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure40()
            let v176 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure41()
            let v177 : UH3 = UH3_0
            let v178 : UH3 = UH3_1(v176, v177)
            let v179 : UH3 = UH3_1(v175, v178)
            method122(v1, v2, v3, v4, v179)
        | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
            v168
    match v182 with
    | US19_1(v190) -> (* Error *)
        let v191 : UH2 = UH2_0
        let v192 : UH2 = method123(v0, v191)
        US26_0(v192, v1, v2, v3, v4)
    | US19_0(v183, v184, v185, v186, v187) -> (* Ok *)
        let v188 : UH2 = UH2_1(v183, v0)
        method120(v188, v184, v185, v186, v187)
and method124 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method124(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method125 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v153 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int32 = v72.Length
                let v76 : (char []) = Array.zeroCreate<char> (v75)
                let v77 : Mut5 = {l0 = 0} : Mut5
                while method32(v75, v77) do
                    let v79 : int32 = v77.l0
                    let v80 : char = v72.[int v79]
                    v76.[int v79] <- v80
                    let v81 : int32 = v79 + 1
                    v77.l0 <- v81
                    ()
                let v83 : char list = v76 |> Array.toList
                let v91 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v92 : (char -> (UH0 -> UH0)) = method105()
                let v93 : (char list -> (UH0 -> UH0)) = v91 v92
                let v94 : (UH0 -> UH0) = v93 v83
                let v95 : UH0 = UH0_0
                let v96 : UH0 = v94 v95
                let struct (v125 : System.Text.StringBuilder, v126 : int32, v127 : int32) = method106(v96, v2, v3, v4)
                US18_0(v29, v66, v125, v126, v127)
            else
                let v129 : char list = []
                let v131 : char list = '"' :: v129 
                let v135 : char list = '`' :: v131 
                let v139 : char list = '\\' :: v135 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v139
                let v148 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US18_1(v148)
    let v168 : US19 =
        match v153 with
        | US18_1(v165) -> (* Error *)
            US19_1(v165)
        | US18_0(v154, v155, v156, v157, v158) -> (* Ok *)
            let v160 : (char -> string) = _.ToString()
            let v161 : string = v160 v154
            US19_0(v161, v155, v156, v157, v158)
    match v168 with
    | US19_1(v176) -> (* Error *)
        let v177 : UH2 = UH2_0
        let v178 : UH2 = method123(v0, v177)
        US26_0(v178, v1, v2, v3, v4)
    | US19_0(v169, v170, v171, v172, v173) -> (* Ok *)
        let v174 : UH2 = UH2_1(v169, v0)
        method125(v174, v170, v171, v172, v173)
and method117 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v161 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int32 = v76.Length
                let v80 : (char []) = Array.zeroCreate<char> (v79)
                let v81 : Mut5 = {l0 = 0} : Mut5
                while method32(v79, v81) do
                    let v83 : int32 = v81.l0
                    let v84 : char = v76.[int v83]
                    v80.[int v83] <- v84
                    let v85 : int32 = v83 + 1
                    v81.l0 <- v85
                    ()
                let v87 : char list = v80 |> Array.toList
                let v95 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v96 : (char -> (UH0 -> UH0)) = method105()
                let v97 : (char list -> (UH0 -> UH0)) = v95 v96
                let v98 : (UH0 -> UH0) = v97 v87
                let v99 : UH0 = UH0_0
                let v100 : UH0 = v98 v99
                let struct (v129 : System.Text.StringBuilder, v130 : int32, v131 : int32) = method106(v100, v2, v3, v4)
                US18_0(v33, v70, v129, v130, v131)
            else
                let v133 : char list = []
                let v135 : char list = ' ' :: v133 
                let v139 : char list = '"' :: v135 
                let v143 : char list = '`' :: v139 
                let v147 : char list = '\\' :: v143 
                let v151 : (char list -> (char [])) = List.toArray
                let v152 : (char []) = v151 v147
                let v156 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v152} / s: %A{struct (v2, v3, v4)}"
                US18_1(v156)
    let v181 : US19 =
        match v161 with
        | US18_1(v178) -> (* Error *)
            US19_1(v178)
        | US18_0(v162, v163, v164, v165, v166) -> (* Ok *)
            let v168 : (char -> string) = _.ToString()
            let v169 : string = v168 v162
            let struct (v172 : string, v173 : string, v174 : System.Text.StringBuilder, v175 : int32, v176 : int32) = method119(v169, v163, v164, v165, v166)
            US19_0(v172, v173, v174, v175, v176)
    let v659 : US19 =
        match v181 with
        | US19_1(v187) -> (* Error *)
            let v355 : US18 =
                if v5 then
                    let v189 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v189)
                else
                    let v193 : char = v1.[int 0]
                    let v194 : bool = v193 = '"'
                    if v194 then
                        let v196 : (string -> int32) = String.length
                        let v197 : int32 = v196 v1
                        let v205 : int32 = 1 |> int32 
                        let v218 : int32 = v197 |> int32 
                        let v226 : int32 = v218 - 1
                        let v228 : string = v1.[int v205..int v226]
                        let v233 : (char -> string) = _.ToString()
                        let v234 : string = v233 v193
                        let v237 : int32 = v234.Length
                        let v238 : (char []) = Array.zeroCreate<char> (v237)
                        let v239 : Mut5 = {l0 = 0} : Mut5
                        while method32(v237, v239) do
                            let v241 : int32 = v239.l0
                            let v242 : char = v234.[int v241]
                            v238.[int v241] <- v242
                            let v243 : int32 = v241 + 1
                            v239.l0 <- v243
                            ()
                        let v245 : char list = v238 |> Array.toList
                        let v253 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v254 : (char -> (UH0 -> UH0)) = method105()
                        let v255 : (char list -> (UH0 -> UH0)) = v253 v254
                        let v256 : (UH0 -> UH0) = v255 v245
                        let v257 : UH0 = UH0_0
                        let v258 : UH0 = v256 v257
                        let struct (v287 : System.Text.StringBuilder, v288 : int32, v289 : int32) = method106(v258, v2, v3, v4)
                        US18_0(v193, v228, v287, v288, v289)
                    else
                        let v292 : string = "\n"
                        let v293 : int32 = v1.IndexOf v292 
                        let v296 : int32 = v293 - 1
                        let v297 : bool = -2 = v296
                        let v305 : int32 =
                            if v297 then
                                let v299 : (string -> int32) = String.length
                                let v300 : int32 = v299 v1
                                let v303 : int32 = v300 + 1
                                v303
                            else
                                let v304 : int32 = v296 + 1
                                v304
                        let v311 : int32 = 0 |> int32 
                        let v324 : int32 = v305 |> int32 
                        let v332 : int32 = v324 - 1
                        let v334 : string = v1.[int v311..int v332]
                        let v339 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v334}"
                        let v342 : int32 = v4 - 1
                        let v343 : int32 = 0
                        let v344 : (string -> string) = method107(v342, v343)
                        let v345 : string = ""
                        let v346 : string = v344 v345
                        let v347 : string = "^"
                        let v348 : string = v346 + v347 
                        let v350 : string = $"{v339}
{v348}
"
                        US18_1(v350)
            let v590 : US19 =
                match v355 with
                | US18_1(v587) -> (* Error *)
                    US19_1(v587)
                | US18_0(v356, v357, v358, v359, v360) -> (* Ok *)
                    let v361 : UH2 = UH2_0
                    let v362 : US26 = method120(v361, v357, v358, v359, v360)
                    let v393 : US19 =
                        match v362 with
                        | US26_1(v390) -> (* Error *)
                            US19_1(v390)
                        | US26_0(v363, v364, v365, v366, v367) -> (* Ok *)
                            let v368 : string list = []
                            let v369 : string list = method124(v363, v368)
                            let v373 : unit = ()
                            let _let'_v373 =
                                seq {
                                    yield! v369 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v376 : string seq = _let'_v373 
                            let v383 : (string -> (string seq -> string)) = String.concat
                            let v384 : string = ""
                            let v385 : (string seq -> string) = v383 v384
                            let v386 : string = v385 v376
                            US19_0(v386, v364, v365, v366, v367)
                    match v393 with
                    | US19_1(v582) -> (* Error *)
                        let v583 : string = "parsing.between / expected content"
                        US19_1(v583)
                    | US19_0(v394, v395, v396, v397, v398) -> (* Ok *)
                        let v399 : bool = "" = v395
                        let v567 : US18 =
                            if v399 then
                                let v401 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v396, v397, v398)}"
                                US18_1(v401)
                            else
                                let v405 : char = v395.[int 0]
                                let v406 : bool = v405 = '"'
                                if v406 then
                                    let v408 : (string -> int32) = String.length
                                    let v409 : int32 = v408 v395
                                    let v417 : int32 = 1 |> int32 
                                    let v430 : int32 = v409 |> int32 
                                    let v438 : int32 = v430 - 1
                                    let v440 : string = v395.[int v417..int v438]
                                    let v445 : (char -> string) = _.ToString()
                                    let v446 : string = v445 v405
                                    let v449 : int32 = v446.Length
                                    let v450 : (char []) = Array.zeroCreate<char> (v449)
                                    let v451 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v449, v451) do
                                        let v453 : int32 = v451.l0
                                        let v454 : char = v446.[int v453]
                                        v450.[int v453] <- v454
                                        let v455 : int32 = v453 + 1
                                        v451.l0 <- v455
                                        ()
                                    let v457 : char list = v450 |> Array.toList
                                    let v465 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v466 : (char -> (UH0 -> UH0)) = method105()
                                    let v467 : (char list -> (UH0 -> UH0)) = v465 v466
                                    let v468 : (UH0 -> UH0) = v467 v457
                                    let v469 : UH0 = UH0_0
                                    let v470 : UH0 = v468 v469
                                    let struct (v499 : System.Text.StringBuilder, v500 : int32, v501 : int32) = method106(v470, v396, v397, v398)
                                    US18_0(v405, v440, v499, v500, v501)
                                else
                                    let v504 : string = "\n"
                                    let v505 : int32 = v395.IndexOf v504 
                                    let v508 : int32 = v505 - 1
                                    let v509 : bool = -2 = v508
                                    let v517 : int32 =
                                        if v509 then
                                            let v511 : (string -> int32) = String.length
                                            let v512 : int32 = v511 v395
                                            let v515 : int32 = v512 + 1
                                            v515
                                        else
                                            let v516 : int32 = v508 + 1
                                            v516
                                    let v523 : int32 = 0 |> int32 
                                    let v536 : int32 = v517 |> int32 
                                    let v544 : int32 = v536 - 1
                                    let v546 : string = v395.[int v523..int v544]
                                    let v551 : string = $"parsing.p_char / expected: '{'"'}' / line: {v397} / col: {v398}
{v396}{v546}"
                                    let v554 : int32 = v398 - 1
                                    let v555 : int32 = 0
                                    let v556 : (string -> string) = method107(v554, v555)
                                    let v557 : string = ""
                                    let v558 : string = v556 v557
                                    let v559 : string = "^"
                                    let v560 : string = v558 + v559 
                                    let v562 : string = $"{v551}
{v560}
"
                                    US18_1(v562)
                        match v567 with
                        | US18_1(v574) -> (* Error *)
                            let v576 : string = $"parsing.between / expected closing delimiter / e: %A{v574} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v357, v358, v359, v360)} / rest2: %A{struct (v395, v396, v397, v398)}"
                            US19_1(v576)
                        | US18_0(v568, v569, v570, v571, v572) -> (* Ok *)
                            US19_0(v394, v569, v570, v571, v572)
            match v590 with
            | US19_1(v596) -> (* Error *)
                let v597 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure40()
                let v598 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure41()
                let v599 : UH3 = UH3_0
                let v600 : UH3 = UH3_1(v598, v599)
                let v601 : UH3 = UH3_1(v597, v600)
                let v602 : US19 = method122(v1, v2, v3, v4, v601)
                let v613 : US19 =
                    match v602 with
                    | US19_1(v610) -> (* Error *)
                        US19_1(v610)
                    | US19_0(v603, v604, v605, v606, v607) -> (* Ok *)
                        let v608 : string = ""
                        US19_0(v608, v604, v605, v606, v607)
                let v624 : US26 =
                    match v613 with
                    | US19_1(v621) -> (* Error *)
                        US26_1(v621)
                    | US19_0(v614, v615, v616, v617, v618) -> (* Ok *)
                        let v619 : UH2 = UH2_0
                        method125(v619, v615, v616, v617, v618)
                match v624 with
                | US26_1(v652) -> (* Error *)
                    US19_1(v652)
                | US26_0(v625, v626, v627, v628, v629) -> (* Ok *)
                    let v630 : string list = []
                    let v631 : string list = method124(v625, v630)
                    let v635 : unit = ()
                    let _let'_v635 =
                        seq {
                            yield! v631 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v638 : string seq = _let'_v635 
                    let v645 : (string -> (string seq -> string)) = String.concat
                    let v646 : string = ""
                    let v647 : (string seq -> string) = v645 v646
                    let v648 : string = v647 v638
                    US19_0(v648, v626, v627, v628, v629)
            | US19_0(v591, v592, v593, v594, v595) -> (* Ok *)
                v590
        | US19_0(v182, v183, v184, v185, v186) -> (* Ok *)
            v181
    match v659 with
    | US19_1(v722) -> (* Error *)
        let v723 : UH2 = UH2_0
        let v724 : UH2 = method123(v0, v723)
        US26_0(v724, v1, v2, v3, v4)
    | US19_0(v660, v661, v662, v663, v664) -> (* Ok *)
        let v665 : int32 = 0
        let v666 : int32 = method114(v661, v665)
        let v667 : bool = 0 = v666
        let v708 : US21 =
            if v667 then
                let v668 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v668)
            else
                let v671 : (string -> int32) = String.length
                let v672 : int32 = v671 v661
                let v680 : int32 = v666 |> int32 
                let v693 : int32 = v672 |> int32 
                let v701 : int32 = v693 - 1
                let v703 : string = v661.[int v680..int v701]
                US21_0(v703, v662, v663, v664)
        match v708 with
        | US21_1(v715) -> (* Error *)
            let v716 : UH2 = UH2_0
            let v717 : UH2 = UH2_1(v660, v716)
            let v718 : UH2 = method123(v0, v717)
            US26_0(v718, v661, v662, v663, v664)
        | US21_0(v709, v710, v711, v712) -> (* Ok *)
            let v713 : UH2 = UH2_1(v660, v0)
            method117(v713, v709, v710, v711, v712)
and method116 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US26 = method117(v19, v10, v16, v20, v21)
    match v22 with
    | US26_1(v36) -> (* Error *)
        US25_1(v36)
    | US26_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method124(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US25_0(v32)
and method127 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "file_name"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "arguments"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v51}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = "options"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v10, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v32}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v12}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v126 : string = "command"
    let v127 : string = $"{v126}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v136 : string = $"{v32}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v10, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v145 : string = $"{v2}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v10, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v154 : string = $"{v51}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v10, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v163 : string = "cancellation_token"
    let v164 : string = $"{v163}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v10, v164)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v173 : string = $"{v32}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v10, v173)
    let v178 : unit = (fun () -> v177 (); v176) ()
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v185 = v193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v185 = v197 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v199 : string = $"%A{v3}"
    let _run_target_args'_v185 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v185 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v185 = v207 
    #endif
#else
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v185 = v211 
    #endif
    let v214 : string = _run_target_args'_v185 
    let v221 : string = $"{v214}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v230 : string = $"{v51}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v10, v230)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v239 : string = "environment_variables"
    let v240 : string = $"{v239}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v249 : string = $"{v32}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"%A{v4}"
    let v262 : string = $"{v258}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"{v51}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = "on_line"
    let v281 : string = $"{v280}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v10, v281)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v290 : string = $"{v32}"
    let v293 : unit = ()
    let v294 : (unit -> unit) = closure7(v10, v290)
    let v295 : unit = (fun () -> v294 (); v293) ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = "format!(\"{:#?}\", $0)"
    let v304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v303 
    let v305 : string = "fable_library_rust::String_::fromString($0)"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr v304 v305 
    let _run_target_args'_v302 = v306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v302 = v310 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v302 = v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v316 : string = $"%A{v5}"
    let _run_target_args'_v302 = v316 
    #endif
#if FABLE_COMPILER_PYTHON
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v302 = v320 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v302 = v324 
    #endif
#else
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v302 = v328 
    #endif
    let v331 : string = _run_target_args'_v302 
    let v338 : string = $"{v331}"
    let v341 : unit = ()
    let v342 : (unit -> unit) = closure7(v10, v338)
    let v343 : unit = (fun () -> v342 (); v341) ()
    let v347 : string = $"{v51}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v10, v347)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v356 : string = "stdin"
    let v357 : string = $"{v356}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v366 : string = $"{v32}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    (* run_target_args'
    let v378 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v379 : string = "format!(\"{:#?}\", $0)"
    let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v379 
    let v381 : string = "fable_library_rust::String_::fromString($0)"
    let v382 : string = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let _run_target_args'_v378 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v378 = v386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v378 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v392 : string = $"%A{v6}"
    let _run_target_args'_v378 = v392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v378 = v396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v378 = v400 
    #endif
#else
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v378 = v404 
    #endif
    let v407 : string = _run_target_args'_v378 
    let v414 : string = $"{v407}"
    let v417 : unit = ()
    let v418 : (unit -> unit) = closure7(v10, v414)
    let v419 : unit = (fun () -> v418 (); v417) ()
    let v423 : string = $"{v51}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v10, v423)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v432 : string = "trace"
    let v433 : string = $"{v432}"
    let v436 : unit = ()
    let v437 : (unit -> unit) = closure7(v10, v433)
    let v438 : unit = (fun () -> v437 (); v436) ()
    let v442 : string = $"{v32}"
    let v445 : unit = ()
    let v446 : (unit -> unit) = closure7(v10, v442)
    let v447 : unit = (fun () -> v446 (); v445) ()
    let v452 : string =
        if v7 then
            let v450 : string = "true"
            v450
        else
            let v451 : string = "false"
            v451
    let v454 : string = $"{v452}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v463 : string = $"{v51}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v472 : string = "working_directory"
    let v473 : string = $"{v472}"
    let v476 : unit = ()
    let v477 : (unit -> unit) = closure7(v10, v473)
    let v478 : unit = (fun () -> v477 (); v476) ()
    let v482 : string = $"{v32}"
    let v485 : unit = ()
    let v486 : (unit -> unit) = closure7(v10, v482)
    let v487 : unit = (fun () -> v486 (); v485) ()
    (* run_target_args'
    let v494 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v495 : string = "format!(\"{:#?}\", $0)"
    let v496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v495 
    let v497 : string = "fable_library_rust::String_::fromString($0)"
    let v498 : string = Fable.Core.RustInterop.emitRustExpr v496 v497 
    let _run_target_args'_v494 = v498 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v494 = v502 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v494 = v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v508 : string = $"%A{v8}"
    let _run_target_args'_v494 = v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v494 = v512 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v494 = v516 
    #endif
#else
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v494 = v520 
    #endif
    let v523 : string = _run_target_args'_v494 
    let v530 : string = $"{v523}"
    let v533 : unit = ()
    let v534 : (unit -> unit) = closure7(v10, v530)
    let v535 : unit = (fun () -> v534 (); v533) ()
    let v539 : string = " }"
    let v540 : string = $"{v539}"
    let v543 : unit = ()
    let v544 : (unit -> unit) = closure7(v10, v540)
    let v545 : unit = (fun () -> v544 (); v543) ()
    let v549 : string = $"{v539}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v10, v549)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v557 : string = v10.l0
    v557
and method126 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method127(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure42 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v55 : string = $"%A{v8}"
        let v58 : string = method126(v34, v35, v36, v37, v38, v39, v52, v53, v7, v55, v0, v1, v2, v3, v4, v5, v6)
        method19(v58)
and closure43 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method128 () : (std_process_Child option -> std_process_Child option) =
    closure43()
and closure44 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method129 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure44()
and closure45 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method130 () : (std_string_String -> US27) =
    closure45()
and method132 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "error"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v37 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v37 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : string = $"%A{v0}"
    let _run_target_args'_v37 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v37 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v37 = v59 
    #endif
#else
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v37 = v63 
    #endif
    let v66 : string = _run_target_args'_v37 
    let v73 : string = $"{v66}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v2, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v2, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v2.l0
    v91
and method131 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / child error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure46 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method131(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method133 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure47 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method134 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure47()
and closure48 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method135 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and method136 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure48()
and closure49 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method137 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure49()
and closure50 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method138 () : (std_string_String -> US29) =
    closure50()
and closure51 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method139 () : (std_string_String -> US29) =
    closure51()
and method141 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "trace'"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v36 : string =
        if v0 then
            let v34 : string = "true"
            v34
        else
            let v35 : string = "false"
            v35
    let v38 : string = $"{v36}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v3, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "e"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v3, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v25}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v3, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    (* run_target_args'
    let v79 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : string = "format!(\"{:#?}\", $0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let v82 : string = "fable_library_rust::String_::fromString($0)"
    let v83 : string = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let _run_target_args'_v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v84 : string = "format!(\"{:#?}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let _run_target_args'_v79 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "format!(\"{:#?}\", $0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v88 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let _run_target_args'_v79 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : string = $"%A{v1}"
    let _run_target_args'_v79 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : string = $"%A{v1}"
    let _run_target_args'_v79 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : string = $"%A{v1}"
    let _run_target_args'_v79 = v101 
    #endif
#else
    let v105 : string = $"%A{v1}"
    let _run_target_args'_v79 = v105 
    #endif
    let v108 : string = _run_target_args'_v79 
    let v115 : string = $"{v108}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v3, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = " }"
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = v3.l0
    v133
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method141(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.stdio_line"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure52 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method140(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method143 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method142 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method143()
    let v10 : int64 = v0.l0
    let v12 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v12)
and closure53 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and closure54 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method144 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure54()
and method145 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure55 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method146 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure55()
and method147 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure56 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method148 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure56()
and method149 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure57 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method150 () : (std_process_Output -> US32) =
    closure57()
and closure58 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method151 () : (std_string_String -> US32) =
    closure58()
and method152 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / output error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure59 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method152(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure60 () (v0 : int32) : US33 =
    US33_0(v0)
and method153 () : (int32 -> US33) =
    closure60()
and method155 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "std_trace_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method154 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method155(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.execute_with_options / result"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure61 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method85()
        let v47 : int32 = v1.Length
        let v48 : string = method154(v27, v28, v29, v30, v31, v32, v45, v46, v0, v47)
        method19(v48)
and method159 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "file_name"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "arguments"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"%A{v1}"
    let v84 : string = $"{v80}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v10, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = $"{v51}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v10, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = "options"
    let v103 : string = $"{v102}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v10, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v32}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v10, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v12}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v10, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v130 : string = "command"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v10, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v140 : string = $"{v32}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v10, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v2}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v10, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = $"{v51}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v10, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = "cancellation_token"
    let v168 : string = $"{v167}"
    let v171 : unit = ()
    let v172 : (unit -> unit) = closure7(v10, v168)
    let v173 : unit = (fun () -> v172 (); v171) ()
    let v177 : string = $"{v32}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v10, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    (* run_target_args'
    let v189 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v189 = v193 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v189 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v189 = v201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v189 = v203 
    #endif
#if FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v189 = v207 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v189 = v211 
    #endif
#else
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v189 = v215 
    #endif
    let v218 : string = _run_target_args'_v189 
    let v225 : string = $"{v218}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v10, v225)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v234 : string = $"{v51}"
    let v237 : unit = ()
    let v238 : (unit -> unit) = closure7(v10, v234)
    let v239 : unit = (fun () -> v238 (); v237) ()
    let v243 : string = "environment_variables"
    let v244 : string = $"{v243}"
    let v247 : unit = ()
    let v248 : (unit -> unit) = closure7(v10, v244)
    let v249 : unit = (fun () -> v248 (); v247) ()
    let v253 : string = $"{v32}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v10, v253)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v262 : string = $"%A{v4}"
    let v266 : string = $"{v262}"
    let v269 : unit = ()
    let v270 : (unit -> unit) = closure7(v10, v266)
    let v271 : unit = (fun () -> v270 (); v269) ()
    let v275 : string = $"{v51}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v10, v275)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v284 : string = "on_line"
    let v285 : string = $"{v284}"
    let v288 : unit = ()
    let v289 : (unit -> unit) = closure7(v10, v285)
    let v290 : unit = (fun () -> v289 (); v288) ()
    let v294 : string = $"{v32}"
    let v297 : unit = ()
    let v298 : (unit -> unit) = closure7(v10, v294)
    let v299 : unit = (fun () -> v298 (); v297) ()
    (* run_target_args'
    let v306 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v306 = v310 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v306 = v314 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v315 : string = "format!(\"{:#?}\", $0)"
    let v316 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v315 
    let v317 : string = "fable_library_rust::String_::fromString($0)"
    let v318 : string = Fable.Core.RustInterop.emitRustExpr v316 v317 
    let _run_target_args'_v306 = v318 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v306 = v320 
    #endif
#if FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v306 = v324 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v306 = v328 
    #endif
#else
    let v332 : string = $"%A{v5}"
    let _run_target_args'_v306 = v332 
    #endif
    let v335 : string = _run_target_args'_v306 
    let v342 : string = $"{v335}"
    let v345 : unit = ()
    let v346 : (unit -> unit) = closure7(v10, v342)
    let v347 : unit = (fun () -> v346 (); v345) ()
    let v351 : string = $"{v51}"
    let v354 : unit = ()
    let v355 : (unit -> unit) = closure7(v10, v351)
    let v356 : unit = (fun () -> v355 (); v354) ()
    let v360 : string = "stdin"
    let v361 : string = $"{v360}"
    let v364 : unit = ()
    let v365 : (unit -> unit) = closure7(v10, v361)
    let v366 : unit = (fun () -> v365 (); v364) ()
    let v370 : string = $"{v32}"
    let v373 : unit = ()
    let v374 : (unit -> unit) = closure7(v10, v370)
    let v375 : unit = (fun () -> v374 (); v373) ()
    (* run_target_args'
    let v382 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v382 = v386 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v382 = v390 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v391 : string = "format!(\"{:#?}\", $0)"
    let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v391 
    let v393 : string = "fable_library_rust::String_::fromString($0)"
    let v394 : string = Fable.Core.RustInterop.emitRustExpr v392 v393 
    let _run_target_args'_v382 = v394 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v382 = v396 
    #endif
#if FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v382 = v400 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v382 = v404 
    #endif
#else
    let v408 : string = $"%A{v6}"
    let _run_target_args'_v382 = v408 
    #endif
    let v411 : string = _run_target_args'_v382 
    let v418 : string = $"{v411}"
    let v421 : unit = ()
    let v422 : (unit -> unit) = closure7(v10, v418)
    let v423 : unit = (fun () -> v422 (); v421) ()
    let v427 : string = $"{v51}"
    let v430 : unit = ()
    let v431 : (unit -> unit) = closure7(v10, v427)
    let v432 : unit = (fun () -> v431 (); v430) ()
    let v436 : string = "trace"
    let v437 : string = $"{v436}"
    let v440 : unit = ()
    let v441 : (unit -> unit) = closure7(v10, v437)
    let v442 : unit = (fun () -> v441 (); v440) ()
    let v446 : string = $"{v32}"
    let v449 : unit = ()
    let v450 : (unit -> unit) = closure7(v10, v446)
    let v451 : unit = (fun () -> v450 (); v449) ()
    let v456 : string =
        if v7 then
            let v454 : string = "true"
            v454
        else
            let v455 : string = "false"
            v455
    let v458 : string = $"{v456}"
    let v461 : unit = ()
    let v462 : (unit -> unit) = closure7(v10, v458)
    let v463 : unit = (fun () -> v462 (); v461) ()
    let v467 : string = $"{v51}"
    let v470 : unit = ()
    let v471 : (unit -> unit) = closure7(v10, v467)
    let v472 : unit = (fun () -> v471 (); v470) ()
    let v476 : string = "working_directory"
    let v477 : string = $"{v476}"
    let v480 : unit = ()
    let v481 : (unit -> unit) = closure7(v10, v477)
    let v482 : unit = (fun () -> v481 (); v480) ()
    let v486 : string = $"{v32}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    (* run_target_args'
    let v498 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v498 = v502 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v498 = v506 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v507 : string = "format!(\"{:#?}\", $0)"
    let v508 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v507 
    let v509 : string = "fable_library_rust::String_::fromString($0)"
    let v510 : string = Fable.Core.RustInterop.emitRustExpr v508 v509 
    let _run_target_args'_v498 = v510 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v498 = v512 
    #endif
#if FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v498 = v516 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v498 = v520 
    #endif
#else
    let v524 : string = $"%A{v8}"
    let _run_target_args'_v498 = v524 
    #endif
    let v527 : string = _run_target_args'_v498 
    let v534 : string = $"{v527}"
    let v537 : unit = ()
    let v538 : (unit -> unit) = closure7(v10, v534)
    let v539 : unit = (fun () -> v538 (); v537) ()
    let v543 : string = " }"
    let v544 : string = $"{v543}"
    let v547 : unit = ()
    let v548 : (unit -> unit) = closure7(v10, v544)
    let v549 : unit = (fun () -> v548 (); v547) ()
    let v553 : string = $"{v543}"
    let v556 : unit = ()
    let v557 : (unit -> unit) = closure7(v10, v553)
    let v558 : unit = (fun () -> v557 (); v556) ()
    let v561 : string = v10.l0
    v561
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method159(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure62 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : string = method158(v34, v35, v36, v37, v38, v39, v52, v53, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v54)
and method160 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method163 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure64 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method164 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure64()
and method165 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure65 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and method162 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v32 : string = method163(v10)
            let v34 : string = null |> unbox<string>
            let v37 : bool = v32 = v34
            let v38 : bool = v37 <> true
            if v38 then
                let v41 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v42 : US34 option = v3 |> Option.map v41 
                let v56 : US34 = US34_1
                let v57 : US34 = v42 |> Option.defaultValue v56 
                match v57 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v61) -> (* Some *)
                    let v62 : int32 = method165(v7)
                    let v63 : Async<unit> = v61 struct (v62, v32, v9)
                    do! v63 
                    ()
                let v66 : string =
                    if v9 then
                        let v64 : string = $"! {v32}"
                        v64
                    else
                        let v65 : string = $"> {v32}"
                        v65
                if v5 then
                    let v67 : unit = ()
                    let v68 : (unit -> unit) = closure65(v66)
                    let v69 : unit = (fun () -> v68 (); v67) ()
                    ()
                else
                    let v119 : unit = ()
                    let v120 : (unit -> unit) = closure10(v66)
                    let v121 : unit = (fun () -> v120 (); v119) ()
                    ()
                let v125 : string =
                    if v9 then
                        let v123 : string = "\u001b[7;4m"
                        v123
                    else
                        let v124 : string = ""
                        v124
                let v128 : string =
                    if v9 then
                        let v126 : string = "\u001b[0m"
                        v126
                    else
                        let v127 : string = ""
                        v127
                let v129 : string = $"{v125}{v32}{v128}"
                (* run_target_args'
                let v130 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v131 : (string -> unit) = v8.Push
                v131 v129
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v832 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v832 
    #endif
#if FABLE_COMPILER_PYTHON
    let v834 : unit = ()
    let _let'_v834 =
        async {
            let v837 : string = method163(v10)
            let v839 : string = null |> unbox<string>
            let v842 : bool = v837 = v839
            let v843 : bool = v842 <> true
            if v843 then
                let v846 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v847 : US34 option = v3 |> Option.map v846 
                let v861 : US34 = US34_1
                let v862 : US34 = v847 |> Option.defaultValue v861 
                match v862 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v866) -> (* Some *)
                    let v867 : int32 = method165(v7)
                    let v868 : Async<unit> = v866 struct (v867, v837, v9)
                    do! v868 
                    ()
                let v871 : string =
                    if v9 then
                        let v869 : string = $"! {v837}"
                        v869
                    else
                        let v870 : string = $"> {v837}"
                        v870
                if v5 then
                    let v872 : unit = ()
                    let v873 : (unit -> unit) = closure65(v871)
                    let v874 : unit = (fun () -> v873 (); v872) ()
                    ()
                else
                    let v924 : unit = ()
                    let v925 : (unit -> unit) = closure10(v871)
                    let v926 : unit = (fun () -> v925 (); v924) ()
                    ()
                let v930 : string =
                    if v9 then
                        let v928 : string = "\u001b[7;4m"
                        v928
                    else
                        let v929 : string = ""
                        v929
                let v933 : string =
                    if v9 then
                        let v931 : string = "\u001b[0m"
                        v931
                    else
                        let v932 : string = ""
                        v932
                let v934 : string = $"{v930}{v837}{v933}"
                (* run_target_args'
                let v935 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v936 : (string -> unit) = v8.Push
                v936 v934
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1637 : Async<unit> = _let'_v834 
    let _run_target_args'_v15 = v1637 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1639 : unit = ()
    let _let'_v1639 =
        async {
            let v1642 : string = method163(v10)
            let v1644 : string = null |> unbox<string>
            let v1647 : bool = v1642 = v1644
            let v1648 : bool = v1647 <> true
            if v1648 then
                let v1651 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v1652 : US34 option = v3 |> Option.map v1651 
                let v1666 : US34 = US34_1
                let v1667 : US34 = v1652 |> Option.defaultValue v1666 
                match v1667 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v1671) -> (* Some *)
                    let v1672 : int32 = method165(v7)
                    let v1673 : Async<unit> = v1671 struct (v1672, v1642, v9)
                    do! v1673 
                    ()
                let v1676 : string =
                    if v9 then
                        let v1674 : string = $"! {v1642}"
                        v1674
                    else
                        let v1675 : string = $"> {v1642}"
                        v1675
                if v5 then
                    let v1677 : unit = ()
                    let v1678 : (unit -> unit) = closure65(v1676)
                    let v1679 : unit = (fun () -> v1678 (); v1677) ()
                    ()
                else
                    let v1729 : unit = ()
                    let v1730 : (unit -> unit) = closure10(v1676)
                    let v1731 : unit = (fun () -> v1730 (); v1729) ()
                    ()
                let v1735 : string =
                    if v9 then
                        let v1733 : string = "\u001b[7;4m"
                        v1733
                    else
                        let v1734 : string = ""
                        v1734
                let v1738 : string =
                    if v9 then
                        let v1736 : string = "\u001b[0m"
                        v1736
                    else
                        let v1737 : string = ""
                        v1737
                let v1739 : string = $"{v1735}{v1642}{v1738}"
                (* run_target_args'
                let v1740 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v1741 : (string -> unit) = v8.Push
                v1741 v1739
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2442 : Async<unit> = _let'_v1639 
    let _run_target_args'_v15 = v2442 
    #endif
#else
    let v2444 : unit = ()
    let _let'_v2444 =
        async {
            let v2447 : string = method163(v10)
            let v2449 : string = null |> unbox<string>
            let v2452 : bool = v2447 = v2449
            let v2453 : bool = v2452 <> true
            if v2453 then
                let v2456 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v2457 : US34 option = v3 |> Option.map v2456 
                let v2471 : US34 = US34_1
                let v2472 : US34 = v2457 |> Option.defaultValue v2471 
                match v2472 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2476) -> (* Some *)
                    let v2477 : int32 = method165(v7)
                    let v2478 : Async<unit> = v2476 struct (v2477, v2447, v9)
                    do! v2478 
                    ()
                let v2481 : string =
                    if v9 then
                        let v2479 : string = $"! {v2447}"
                        v2479
                    else
                        let v2480 : string = $"> {v2447}"
                        v2480
                if v5 then
                    let v2482 : unit = ()
                    let v2483 : (unit -> unit) = closure65(v2481)
                    let v2484 : unit = (fun () -> v2483 (); v2482) ()
                    ()
                else
                    let v2534 : unit = ()
                    let v2535 : (unit -> unit) = closure10(v2481)
                    let v2536 : unit = (fun () -> v2535 (); v2534) ()
                    ()
                let v2540 : string =
                    if v9 then
                        let v2538 : string = "\u001b[7;4m"
                        v2538
                    else
                        let v2539 : string = ""
                        v2539
                let v2543 : string =
                    if v9 then
                        let v2541 : string = "\u001b[0m"
                        v2541
                    else
                        let v2542 : string = ""
                        v2542
                let v2544 : string = $"{v2540}{v2447}{v2543}"
                (* run_target_args'
                let v2545 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2546 : (string -> unit) = v8.Push
                v2546 v2544
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3247 : Async<unit> = _let'_v2444 
    let _run_target_args'_v15 = v3247 
    #endif
    let v3248 : Async<unit> = _run_target_args'_v15 
    v3248
and method161 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method162(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure63 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method161(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure66 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method166 () : (System.Threading.CancellationToken -> US35) =
    closure66()
and method167 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v26 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v28 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v28 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v32 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v36 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v44 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v48 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v48 
            #endif
#else
            let v51 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v51 = v51 
            let v52 : System.Threading.CancellationToken = v51 
            let v53 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v54 : (System.Threading.CancellationToken []) = [|v52; v53; v0|]
            let v55 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v56 : System.Threading.CancellationTokenSource = v55 v54
            let v57 : System.Threading.CancellationToken = v56.Token
            return v57 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v342 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : unit = ()
    let _let'_v344 =
        async {
            (* run_target_args'
            let v351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v353 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v353 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v357 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v361 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v361 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v365 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v365 
            #endif
#if FABLE_COMPILER_PYTHON
            let v369 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v373 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v373 
            #endif
#else
            let v376 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v376 = v376 
            let v377 : System.Threading.CancellationToken = v376 
            let v378 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v379 : (System.Threading.CancellationToken []) = [|v377; v378; v0|]
            let v380 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v381 : System.Threading.CancellationTokenSource = v380 v379
            let v382 : System.Threading.CancellationToken = v381.Token
            return v382 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v667 : Async<System.Threading.CancellationToken> = _let'_v344 
    let _run_target_args'_v5 = v667 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v669 : unit = ()
    let _let'_v669 =
        async {
            (* run_target_args'
            let v676 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v678 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v678 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v682 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v682 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v686 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v686 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v690 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v690 
            #endif
#if FABLE_COMPILER_PYTHON
            let v694 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v694 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v698 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v698 
            #endif
#else
            let v701 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v701 = v701 
            let v702 : System.Threading.CancellationToken = v701 
            let v703 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v704 : (System.Threading.CancellationToken []) = [|v702; v703; v0|]
            let v705 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v706 : System.Threading.CancellationTokenSource = v705 v704
            let v707 : System.Threading.CancellationToken = v706.Token
            return v707 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v992 : Async<System.Threading.CancellationToken> = _let'_v669 
    let _run_target_args'_v5 = v992 
    #endif
#else
    let v994 : unit = ()
    let _let'_v994 =
        async {
            (* run_target_args'
            let v1001 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1003 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1007 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1007 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1011 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1011 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1015 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1015 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1019 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1019 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1023 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1023 
            #endif
#else
            let v1026 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1026 = v1026 
            let v1027 : System.Threading.CancellationToken = v1026 
            let v1028 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1029 : (System.Threading.CancellationToken []) = [|v1027; v1028; v0|]
            let v1030 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1031 : System.Threading.CancellationTokenSource = v1030 v1029
            let v1032 : System.Threading.CancellationToken = v1031.Token
            return v1032 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1317 : Async<System.Threading.CancellationToken> = _let'_v994 
    let _run_target_args'_v5 = v1317 
    #endif
    let v1318 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v1318
and method168 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method169 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure67 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method168(v0)
    let v2 : bool = v1 = false
    if v2 then
        method169(v0)
and method172 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "ex"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v37 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v37 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : string = $"%A{v0}"
    let _run_target_args'_v37 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v37 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v37 = v59 
    #endif
#else
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v37 = v63 
    #endif
    let v66 : string = _run_target_args'_v37 
    let v73 : string = $"{v66}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v2, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v2, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v2.l0
    v91
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method172(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure68 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method43()
        let v46 : string = method171(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method170 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v28 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v30 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v34 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v38 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v38 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v42 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v42 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v50 
                #endif
#else
                let v53 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v28 = v53 
                #endif
                let v54 : System.Threading.Tasks.Task = _run_target_args'_v28 
                (* run_target_args'
                let v64 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v66 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v70 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v70 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v74 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v74 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v77 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v78 : Async<unit> = v77 v54
                let _run_target_args'_v64 = v78 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v80 : Async<unit> = v79 v54
                let _run_target_args'_v64 = v80 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v81 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v82 : Async<unit> = v81 v54
                let _run_target_args'_v64 = v82 
                #endif
#else
                let v83 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v84 : Async<unit> = v83 v54
                let _run_target_args'_v64 = v84 
                #endif
                let v85 : Async<unit> = _run_target_args'_v64 
                do! v85 
                (* run_target_args'
                let v95 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v97 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v97 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v101 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v101 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v113 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v113 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v117 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v117 
                #endif
#else
                let v120 : int32 = v0.ExitCode
                let _run_target_args'_v95 = v120 
                #endif
                let v121 : int32 = _run_target_args'_v95 
                return v121 
                (* indent
                ()
            indent *)
            with ex ->
                let v230 : exn = ex
                (* run_target_args'
                let v235 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v237 : string = $"%A{v230}"
                let _run_target_args'_v235 = v237 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v241 : string = $"%A{v230}"
                let _run_target_args'_v235 = v241 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v245 : string = $"%A{v230}"
                let _run_target_args'_v235 = v245 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v249 : string = $"%A{v230}"
                let _run_target_args'_v235 = v249 
                #endif
#if FABLE_COMPILER_PYTHON
                let v253 : string = $"%A{v230}"
                let _run_target_args'_v235 = v253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v257 : string = $"%A{v230}"
                let _run_target_args'_v235 = v257 
                #endif
#else
                let v260 : string = $"{v230.GetType ()}: {v230.Message}"
                let _run_target_args'_v235 = v260 
                #endif
                let v261 : string = _run_target_args'_v235 
                (* run_target_args'
                let v267 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v268 : (string -> unit) = v1.Push
                v268 v261
                #endif
                // run_target_args' is_unit
                let v270 : System.Threading.Tasks.TaskCanceledException = v230 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v273 : unit = ()
                let v274 : (unit -> unit) = closure68(v270)
                let v275 : unit = (fun () -> v274 (); v273) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3144 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v3144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3146 : unit = ()
    let _let'_v3146 =
        async {
            try
                (* run_target_args'
                let v3153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3155 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3155 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3159 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3159 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3163 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3167 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3167 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3171 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3171 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3175 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3175 
                #endif
#else
                let v3178 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v3153 = v3178 
                #endif
                let v3179 : System.Threading.Tasks.Task = _run_target_args'_v3153 
                (* run_target_args'
                let v3189 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3191 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3191 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3195 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3199 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3199 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3202 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3203 : Async<unit> = v3202 v3179
                let _run_target_args'_v3189 = v3203 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3204 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3205 : Async<unit> = v3204 v3179
                let _run_target_args'_v3189 = v3205 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3206 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3207 : Async<unit> = v3206 v3179
                let _run_target_args'_v3189 = v3207 
                #endif
#else
                let v3208 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3209 : Async<unit> = v3208 v3179
                let _run_target_args'_v3189 = v3209 
                #endif
                let v3210 : Async<unit> = _run_target_args'_v3189 
                do! v3210 
                (* run_target_args'
                let v3220 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3222 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3222 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3226 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3230 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3230 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3234 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3234 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3238 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3242 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3242 
                #endif
#else
                let v3245 : int32 = v0.ExitCode
                let _run_target_args'_v3220 = v3245 
                #endif
                let v3246 : int32 = _run_target_args'_v3220 
                return v3246 
                (* indent
                ()
            indent *)
            with ex ->
                let v3355 : exn = ex
                (* run_target_args'
                let v3360 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3362 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3362 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3366 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3366 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3370 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3374 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3374 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3378 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3378 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3382 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3382 
                #endif
#else
                let v3385 : string = $"{v3355.GetType ()}: {v3355.Message}"
                let _run_target_args'_v3360 = v3385 
                #endif
                let v3386 : string = _run_target_args'_v3360 
                (* run_target_args'
                let v3392 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v3393 : (string -> unit) = v1.Push
                v3393 v3386
                #endif
                // run_target_args' is_unit
                let v3395 : System.Threading.Tasks.TaskCanceledException = v3355 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v3398 : unit = ()
                let v3399 : (unit -> unit) = closure68(v3395)
                let v3400 : unit = (fun () -> v3399 (); v3398) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6269 : Async<int32> = _let'_v3146 
    let _run_target_args'_v7 = v6269 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6271 : unit = ()
    let _let'_v6271 =
        async {
            try
                (* run_target_args'
                let v6278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6280 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6284 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6284 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6288 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6288 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6292 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6292 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6296 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6296 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6300 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6300 
                #endif
#else
                let v6303 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v6278 = v6303 
                #endif
                let v6304 : System.Threading.Tasks.Task = _run_target_args'_v6278 
                (* run_target_args'
                let v6314 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6316 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6316 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6320 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6320 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6324 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6324 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6327 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6328 : Async<unit> = v6327 v6304
                let _run_target_args'_v6314 = v6328 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6329 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6330 : Async<unit> = v6329 v6304
                let _run_target_args'_v6314 = v6330 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6331 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6332 : Async<unit> = v6331 v6304
                let _run_target_args'_v6314 = v6332 
                #endif
#else
                let v6333 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6334 : Async<unit> = v6333 v6304
                let _run_target_args'_v6314 = v6334 
                #endif
                let v6335 : Async<unit> = _run_target_args'_v6314 
                do! v6335 
                (* run_target_args'
                let v6345 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6347 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6347 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6351 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6351 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6355 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6355 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6359 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6363 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6367 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6367 
                #endif
#else
                let v6370 : int32 = v0.ExitCode
                let _run_target_args'_v6345 = v6370 
                #endif
                let v6371 : int32 = _run_target_args'_v6345 
                return v6371 
                (* indent
                ()
            indent *)
            with ex ->
                let v6480 : exn = ex
                (* run_target_args'
                let v6485 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6487 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6487 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6491 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6491 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6495 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6495 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6499 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6499 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6503 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6503 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6507 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6507 
                #endif
#else
                let v6510 : string = $"{v6480.GetType ()}: {v6480.Message}"
                let _run_target_args'_v6485 = v6510 
                #endif
                let v6511 : string = _run_target_args'_v6485 
                (* run_target_args'
                let v6517 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v6518 : (string -> unit) = v1.Push
                v6518 v6511
                #endif
                // run_target_args' is_unit
                let v6520 : System.Threading.Tasks.TaskCanceledException = v6480 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v6523 : unit = ()
                let v6524 : (unit -> unit) = closure68(v6520)
                let v6525 : unit = (fun () -> v6524 (); v6523) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9394 : Async<int32> = _let'_v6271 
    let _run_target_args'_v7 = v9394 
    #endif
#else
    let v9396 : unit = ()
    let _let'_v9396 =
        async {
            try
                (* run_target_args'
                let v9403 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9405 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9409 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9409 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9413 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9413 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9417 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9417 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9421 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9421 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9425 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9425 
                #endif
#else
                let v9428 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v9403 = v9428 
                #endif
                let v9429 : System.Threading.Tasks.Task = _run_target_args'_v9403 
                (* run_target_args'
                let v9439 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9441 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9441 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9445 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9445 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9449 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9449 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9453 : Async<unit> = v9452 v9429
                let _run_target_args'_v9439 = v9453 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9455 : Async<unit> = v9454 v9429
                let _run_target_args'_v9439 = v9455 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9456 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9457 : Async<unit> = v9456 v9429
                let _run_target_args'_v9439 = v9457 
                #endif
#else
                let v9458 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9459 : Async<unit> = v9458 v9429
                let _run_target_args'_v9439 = v9459 
                #endif
                let v9460 : Async<unit> = _run_target_args'_v9439 
                do! v9460 
                (* run_target_args'
                let v9470 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9472 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9472 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9476 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9476 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9480 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9484 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9488 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9488 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9492 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9492 
                #endif
#else
                let v9495 : int32 = v0.ExitCode
                let _run_target_args'_v9470 = v9495 
                #endif
                let v9496 : int32 = _run_target_args'_v9470 
                return v9496 
                (* indent
                ()
            indent *)
            with ex ->
                let v9605 : exn = ex
                (* run_target_args'
                let v9610 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9612 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9612 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9616 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9616 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9620 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9620 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9624 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9624 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9628 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9628 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9632 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9632 
                #endif
#else
                let v9635 : string = $"{v9605.GetType ()}: {v9605.Message}"
                let _run_target_args'_v9610 = v9635 
                #endif
                let v9636 : string = _run_target_args'_v9610 
                (* run_target_args'
                let v9642 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9643 : (string -> unit) = v1.Push
                v9643 v9636
                #endif
                // run_target_args' is_unit
                let v9645 : System.Threading.Tasks.TaskCanceledException = v9605 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v9648 : unit = ()
                let v9649 : (unit -> unit) = closure68(v9645)
                let v9650 : unit = (fun () -> v9649 (); v9648) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12519 : Async<int32> = _let'_v9396 
    let _run_target_args'_v7 = v12519 
    #endif
    let v12520 : Async<int32> = _run_target_args'_v7 
    v12520
and method174 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v12 : string = "{ "
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v10, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v22 : string = "exit_code"
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v10, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v10, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v10, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v10, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v61 : string = "output_length"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v10, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v32}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v10, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v51}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = "options"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v10, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v32}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v12}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v126 : string = "command"
    let v127 : string = $"{v126}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v136 : string = $"{v32}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v10, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v145 : string = $"{v2}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v10, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v154 : string = $"{v51}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v10, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v163 : string = "cancellation_token"
    let v164 : string = $"{v163}"
    let v167 : unit = ()
    let v168 : (unit -> unit) = closure7(v10, v164)
    let v169 : unit = (fun () -> v168 (); v167) ()
    let v173 : string = $"{v32}"
    let v176 : unit = ()
    let v177 : (unit -> unit) = closure7(v10, v173)
    let v178 : unit = (fun () -> v177 (); v176) ()
    (* run_target_args'
    let v185 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v186 : string = "format!(\"{:#?}\", $0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v186 
    let v188 : string = "fable_library_rust::String_::fromString($0)"
    let v189 : string = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let _run_target_args'_v185 = v189 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : string = "format!(\"{:#?}\", $0)"
    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v190 
    let v192 : string = "fable_library_rust::String_::fromString($0)"
    let v193 : string = Fable.Core.RustInterop.emitRustExpr v191 v192 
    let _run_target_args'_v185 = v193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v185 = v197 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v199 : string = $"%A{v3}"
    let _run_target_args'_v185 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : string = $"%A{v3}"
    let _run_target_args'_v185 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v185 = v207 
    #endif
#else
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v185 = v211 
    #endif
    let v214 : string = _run_target_args'_v185 
    let v221 : string = $"{v214}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v230 : string = $"{v51}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v10, v230)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v239 : string = "environment_variables"
    let v240 : string = $"{v239}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v249 : string = $"{v32}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"%A{v4}"
    let v262 : string = $"{v258}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"{v51}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = "on_line"
    let v281 : string = $"{v280}"
    let v284 : unit = ()
    let v285 : (unit -> unit) = closure7(v10, v281)
    let v286 : unit = (fun () -> v285 (); v284) ()
    let v290 : string = $"{v32}"
    let v293 : unit = ()
    let v294 : (unit -> unit) = closure7(v10, v290)
    let v295 : unit = (fun () -> v294 (); v293) ()
    (* run_target_args'
    let v302 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v303 : string = "format!(\"{:#?}\", $0)"
    let v304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v303 
    let v305 : string = "fable_library_rust::String_::fromString($0)"
    let v306 : string = Fable.Core.RustInterop.emitRustExpr v304 v305 
    let _run_target_args'_v302 = v306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v307 : string = "format!(\"{:#?}\", $0)"
    let v308 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v307 
    let v309 : string = "fable_library_rust::String_::fromString($0)"
    let v310 : string = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let _run_target_args'_v302 = v310 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v311 : string = "format!(\"{:#?}\", $0)"
    let v312 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v311 
    let v313 : string = "fable_library_rust::String_::fromString($0)"
    let v314 : string = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let _run_target_args'_v302 = v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v316 : string = $"%A{v5}"
    let _run_target_args'_v302 = v316 
    #endif
#if FABLE_COMPILER_PYTHON
    let v320 : string = $"%A{v5}"
    let _run_target_args'_v302 = v320 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v324 : string = $"%A{v5}"
    let _run_target_args'_v302 = v324 
    #endif
#else
    let v328 : string = $"%A{v5}"
    let _run_target_args'_v302 = v328 
    #endif
    let v331 : string = _run_target_args'_v302 
    let v338 : string = $"{v331}"
    let v341 : unit = ()
    let v342 : (unit -> unit) = closure7(v10, v338)
    let v343 : unit = (fun () -> v342 (); v341) ()
    let v347 : string = $"{v51}"
    let v350 : unit = ()
    let v351 : (unit -> unit) = closure7(v10, v347)
    let v352 : unit = (fun () -> v351 (); v350) ()
    let v356 : string = "stdin"
    let v357 : string = $"{v356}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v366 : string = $"{v32}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    (* run_target_args'
    let v378 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v379 : string = "format!(\"{:#?}\", $0)"
    let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v379 
    let v381 : string = "fable_library_rust::String_::fromString($0)"
    let v382 : string = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let _run_target_args'_v378 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = "format!(\"{:#?}\", $0)"
    let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v383 
    let v385 : string = "fable_library_rust::String_::fromString($0)"
    let v386 : string = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let _run_target_args'_v378 = v386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v387 : string = "format!(\"{:#?}\", $0)"
    let v388 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v387 
    let v389 : string = "fable_library_rust::String_::fromString($0)"
    let v390 : string = Fable.Core.RustInterop.emitRustExpr v388 v389 
    let _run_target_args'_v378 = v390 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v392 : string = $"%A{v6}"
    let _run_target_args'_v378 = v392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v396 : string = $"%A{v6}"
    let _run_target_args'_v378 = v396 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v400 : string = $"%A{v6}"
    let _run_target_args'_v378 = v400 
    #endif
#else
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v378 = v404 
    #endif
    let v407 : string = _run_target_args'_v378 
    let v414 : string = $"{v407}"
    let v417 : unit = ()
    let v418 : (unit -> unit) = closure7(v10, v414)
    let v419 : unit = (fun () -> v418 (); v417) ()
    let v423 : string = $"{v51}"
    let v426 : unit = ()
    let v427 : (unit -> unit) = closure7(v10, v423)
    let v428 : unit = (fun () -> v427 (); v426) ()
    let v432 : string = "trace"
    let v433 : string = $"{v432}"
    let v436 : unit = ()
    let v437 : (unit -> unit) = closure7(v10, v433)
    let v438 : unit = (fun () -> v437 (); v436) ()
    let v442 : string = $"{v32}"
    let v445 : unit = ()
    let v446 : (unit -> unit) = closure7(v10, v442)
    let v447 : unit = (fun () -> v446 (); v445) ()
    let v452 : string =
        if v7 then
            let v450 : string = "true"
            v450
        else
            let v451 : string = "false"
            v451
    let v454 : string = $"{v452}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v463 : string = $"{v51}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v472 : string = "working_directory"
    let v473 : string = $"{v472}"
    let v476 : unit = ()
    let v477 : (unit -> unit) = closure7(v10, v473)
    let v478 : unit = (fun () -> v477 (); v476) ()
    let v482 : string = $"{v32}"
    let v485 : unit = ()
    let v486 : (unit -> unit) = closure7(v10, v482)
    let v487 : unit = (fun () -> v486 (); v485) ()
    (* run_target_args'
    let v494 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v495 : string = "format!(\"{:#?}\", $0)"
    let v496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v495 
    let v497 : string = "fable_library_rust::String_::fromString($0)"
    let v498 : string = Fable.Core.RustInterop.emitRustExpr v496 v497 
    let _run_target_args'_v494 = v498 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v499 : string = "format!(\"{:#?}\", $0)"
    let v500 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v499 
    let v501 : string = "fable_library_rust::String_::fromString($0)"
    let v502 : string = Fable.Core.RustInterop.emitRustExpr v500 v501 
    let _run_target_args'_v494 = v502 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v503 : string = "format!(\"{:#?}\", $0)"
    let v504 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v503 
    let v505 : string = "fable_library_rust::String_::fromString($0)"
    let v506 : string = Fable.Core.RustInterop.emitRustExpr v504 v505 
    let _run_target_args'_v494 = v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v508 : string = $"%A{v8}"
    let _run_target_args'_v494 = v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v512 : string = $"%A{v8}"
    let _run_target_args'_v494 = v512 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v516 : string = $"%A{v8}"
    let _run_target_args'_v494 = v516 
    #endif
#else
    let v520 : string = $"%A{v8}"
    let _run_target_args'_v494 = v520 
    #endif
    let v523 : string = _run_target_args'_v494 
    let v530 : string = $"{v523}"
    let v533 : unit = ()
    let v534 : (unit -> unit) = closure7(v10, v530)
    let v535 : unit = (fun () -> v534 (); v533) ()
    let v539 : string = " }"
    let v540 : string = $"{v539}"
    let v543 : unit = ()
    let v544 : (unit -> unit) = closure7(v10, v540)
    let v545 : unit = (fun () -> v544 (); v543) ()
    let v549 : string = $"{v539}"
    let v552 : unit = ()
    let v553 : (unit -> unit) = closure7(v10, v549)
    let v554 : unit = (fun () -> v553 (); v552) ()
    let v557 : string = v10.l0
    v557
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method174(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure69 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : int32 = v8.Length
        let v55 : string = method173(v34, v35, v36, v37, v38, v39, v52, v53, v7, v54, v0, v1, v2, v3, v4, v5, v6)
        method19(v55)
and method157 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v36 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v39 : int32, v40 : string) = null |> unbox<struct (int32 * string)>
            return struct (v39, v40) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v47 : int32, v48 : string) = null |> unbox<struct (int32 * string)>
            return struct (v47, v48) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v55 : int32, v56 : string) = null |> unbox<struct (int32 * string)>
            return struct (v55, v56) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v63 : int32, v64 : string) = null |> unbox<struct (int32 * string)>
            return struct (v63, v64) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v71 : int32, v72 : string) = null |> unbox<struct (int32 * string)>
            return struct (v71, v72) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v79 : int32, v80 : string) = null |> unbox<struct (int32 * string)>
            return struct (v79, v80) 
            #endif
#else
            let v85 : US17 = method103(v0)
            let struct (v97 : string, v98 : US5) =
                match v85 with
                | US17_1(v88) -> (* Error *)
                    let v90 : string = $"resultm.get / Result value was Error: {v88}"
                    failwith<struct (string * US5)> v90
                | US17_0(v86, v87) -> (* Ok *)
                    struct (v86, v87)
            let v101 : (string -> US5) = method6()
            let v102 : US5 option = v6 |> Option.map v101 
            let v116 : US5 = US5_1
            let v117 : US5 = v102 |> Option.defaultValue v116 
            let v124 : string =
                match v117 with
                | US5_1 -> (* None *)
                    let v122 : string = ""
                    v122
                | US5_0(v121) -> (* Some *)
                    v121
            let v125 : unit = ()
            let v126 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v98, v97)
            let v127 : unit = (fun () -> v126 (); v125) ()
            let v174 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v178 : string =
                match v98 with
                | US5_1 -> (* None *)
                    let v176 : string = ""
                    v176
                | US5_0(v175) -> (* Some *)
                    v175
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v178,
              StandardOutputEncoding = v174,
              WorkingDirectory = v124,
              FileName = v97,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v179 : System.Diagnostics.ProcessStartInfo = start_info
            let v180 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v181 : int32 = v180.Length
            let v182 : Mut5 = {l0 = 0} : Mut5
            while method32(v181, v182) do
                let v184 : int32 = v182.l0
                let struct (v185 : string, v186 : string) = v180.[int v184]
                v179.EnvironmentVariables.[v185] <- v186 
                let v187 : int32 = v184 + 1
                v182.l0 <- v187
                ()
            let v188 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v179)
            use v188 = v188 
            let v189 : System.Diagnostics.Process = v188 
            let v190 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v191 : System.Collections.Concurrent.ConcurrentStack<string> = v190 ()
            let v192 : bool = false
            let v193 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v189, v191, v192)
            v189.OutputDataReceived.Add v193 
            let v194 : bool = true
            let v195 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v189, v191, v194)
            v189.ErrorDataReceived.Add v195 
            let v196 : (unit -> bool) = v189.Start
            let v197 : bool = v196 ()
            let v198 : bool = v197 = false
            if v198 then
                let v199 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v199
            let v200 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v200 v189
            let v201 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v201 v189
            let v204 : (System.Threading.CancellationToken -> US35) = method166()
            let v205 : US35 option = v1 |> Option.map v204 
            let v219 : US35 = US35_1
            let v220 : US35 = v205 |> Option.defaultValue v219 
            let v227 : System.Threading.CancellationToken =
                match v220 with
                | US35_1 -> (* None *)
                    let v225 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v225
                | US35_0(v224) -> (* Some *)
                    v224
            let v228 : Async<System.Threading.CancellationToken> = method167(v227)
            let! v228 = v228 
            let v229 : System.Threading.CancellationToken = v228 
            let v230 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v229.Register
            let v231 : (unit -> unit) = closure67(v189)
            let v232 : System.Threading.CancellationTokenRegistration = v230 v231
            use v232 = v232 
            let v233 : System.Threading.CancellationTokenRegistration = v232 
            let v234 : Async<int32> = method170(v189, v191, v229)
            let! v234 = v234 
            let v235 : int32 = v234 
            let v237 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v238 : string seq = v237 v191
            let v242 : (string seq -> string seq) = Seq.rev
            let v243 : string seq = v242 v238
            let v247 : string = method75()
            let v248 : (string -> (string seq -> string)) = String.concat
            let v249 : (string seq -> string) = v248 v247
            let v250 : string = v249 v243
            let v254 : unit = ()
            let v255 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v235, v250)
            let v256 : unit = (fun () -> v255 (); v254) ()
            return struct (v235, v250) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2300 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v2300 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2302 : unit = ()
    let _let'_v2302 =
        async {
            (* run_target_args'
            let v2313 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v2316 : int32, v2317 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2316, v2317) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v2324 : int32, v2325 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2324, v2325) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v2332 : int32, v2333 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2332, v2333) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v2340 : int32, v2341 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2340, v2341) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v2348 : int32, v2349 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2348, v2349) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v2356 : int32, v2357 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2356, v2357) 
            #endif
#else
            let v2362 : US17 = method103(v0)
            let struct (v2374 : string, v2375 : US5) =
                match v2362 with
                | US17_1(v2365) -> (* Error *)
                    let v2367 : string = $"resultm.get / Result value was Error: {v2365}"
                    failwith<struct (string * US5)> v2367
                | US17_0(v2363, v2364) -> (* Ok *)
                    struct (v2363, v2364)
            let v2378 : (string -> US5) = method6()
            let v2379 : US5 option = v6 |> Option.map v2378 
            let v2393 : US5 = US5_1
            let v2394 : US5 = v2379 |> Option.defaultValue v2393 
            let v2401 : string =
                match v2394 with
                | US5_1 -> (* None *)
                    let v2399 : string = ""
                    v2399
                | US5_0(v2398) -> (* Some *)
                    v2398
            let v2402 : unit = ()
            let v2403 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v2375, v2374)
            let v2404 : unit = (fun () -> v2403 (); v2402) ()
            let v2451 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2455 : string =
                match v2375 with
                | US5_1 -> (* None *)
                    let v2453 : string = ""
                    v2453
                | US5_0(v2452) -> (* Some *)
                    v2452
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2455,
              StandardOutputEncoding = v2451,
              WorkingDirectory = v2401,
              FileName = v2374,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2456 : System.Diagnostics.ProcessStartInfo = start_info
            let v2457 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v2458 : int32 = v2457.Length
            let v2459 : Mut5 = {l0 = 0} : Mut5
            while method32(v2458, v2459) do
                let v2461 : int32 = v2459.l0
                let struct (v2462 : string, v2463 : string) = v2457.[int v2461]
                v2456.EnvironmentVariables.[v2462] <- v2463 
                let v2464 : int32 = v2461 + 1
                v2459.l0 <- v2464
                ()
            let v2465 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2456)
            use v2465 = v2465 
            let v2466 : System.Diagnostics.Process = v2465 
            let v2467 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2468 : System.Collections.Concurrent.ConcurrentStack<string> = v2467 ()
            let v2469 : bool = false
            let v2470 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2466, v2468, v2469)
            v2466.OutputDataReceived.Add v2470 
            let v2471 : bool = true
            let v2472 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v2466, v2468, v2471)
            v2466.ErrorDataReceived.Add v2472 
            let v2473 : (unit -> bool) = v2466.Start
            let v2474 : bool = v2473 ()
            let v2475 : bool = v2474 = false
            if v2475 then
                let v2476 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2476
            let v2477 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v2477 v2466
            let v2478 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v2478 v2466
            let v2481 : (System.Threading.CancellationToken -> US35) = method166()
            let v2482 : US35 option = v1 |> Option.map v2481 
            let v2496 : US35 = US35_1
            let v2497 : US35 = v2482 |> Option.defaultValue v2496 
            let v2504 : System.Threading.CancellationToken =
                match v2497 with
                | US35_1 -> (* None *)
                    let v2502 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2502
                | US35_0(v2501) -> (* Some *)
                    v2501
            let v2505 : Async<System.Threading.CancellationToken> = method167(v2504)
            let! v2505 = v2505 
            let v2506 : System.Threading.CancellationToken = v2505 
            let v2507 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2506.Register
            let v2508 : (unit -> unit) = closure67(v2466)
            let v2509 : System.Threading.CancellationTokenRegistration = v2507 v2508
            use v2509 = v2509 
            let v2510 : System.Threading.CancellationTokenRegistration = v2509 
            let v2511 : Async<int32> = method170(v2466, v2468, v2506)
            let! v2511 = v2511 
            let v2512 : int32 = v2511 
            let v2514 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2515 : string seq = v2514 v2468
            let v2519 : (string seq -> string seq) = Seq.rev
            let v2520 : string seq = v2519 v2515
            let v2524 : string = method75()
            let v2525 : (string -> (string seq -> string)) = String.concat
            let v2526 : (string seq -> string) = v2525 v2524
            let v2527 : string = v2526 v2520
            let v2531 : unit = ()
            let v2532 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v2512, v2527)
            let v2533 : unit = (fun () -> v2532 (); v2531) ()
            return struct (v2512, v2527) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4577 : Async<struct (int32 * string)> = _let'_v2302 
    let _run_target_args'_v11 = v4577 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4579 : unit = ()
    let _let'_v4579 =
        async {
            (* run_target_args'
            let v4590 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v4593 : int32, v4594 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4593, v4594) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v4601 : int32, v4602 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4601, v4602) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v4609 : int32, v4610 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4609, v4610) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v4617 : int32, v4618 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4617, v4618) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v4625 : int32, v4626 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4625, v4626) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v4633 : int32, v4634 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4633, v4634) 
            #endif
#else
            let v4639 : US17 = method103(v0)
            let struct (v4651 : string, v4652 : US5) =
                match v4639 with
                | US17_1(v4642) -> (* Error *)
                    let v4644 : string = $"resultm.get / Result value was Error: {v4642}"
                    failwith<struct (string * US5)> v4644
                | US17_0(v4640, v4641) -> (* Ok *)
                    struct (v4640, v4641)
            let v4655 : (string -> US5) = method6()
            let v4656 : US5 option = v6 |> Option.map v4655 
            let v4670 : US5 = US5_1
            let v4671 : US5 = v4656 |> Option.defaultValue v4670 
            let v4678 : string =
                match v4671 with
                | US5_1 -> (* None *)
                    let v4676 : string = ""
                    v4676
                | US5_0(v4675) -> (* Some *)
                    v4675
            let v4679 : unit = ()
            let v4680 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v4652, v4651)
            let v4681 : unit = (fun () -> v4680 (); v4679) ()
            let v4728 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v4732 : string =
                match v4652 with
                | US5_1 -> (* None *)
                    let v4730 : string = ""
                    v4730
                | US5_0(v4729) -> (* Some *)
                    v4729
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v4732,
              StandardOutputEncoding = v4728,
              WorkingDirectory = v4678,
              FileName = v4651,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v4733 : System.Diagnostics.ProcessStartInfo = start_info
            let v4734 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v4735 : int32 = v4734.Length
            let v4736 : Mut5 = {l0 = 0} : Mut5
            while method32(v4735, v4736) do
                let v4738 : int32 = v4736.l0
                let struct (v4739 : string, v4740 : string) = v4734.[int v4738]
                v4733.EnvironmentVariables.[v4739] <- v4740 
                let v4741 : int32 = v4738 + 1
                v4736.l0 <- v4741
                ()
            let v4742 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v4733)
            use v4742 = v4742 
            let v4743 : System.Diagnostics.Process = v4742 
            let v4744 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v4745 : System.Collections.Concurrent.ConcurrentStack<string> = v4744 ()
            let v4746 : bool = false
            let v4747 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v4743, v4745, v4746)
            v4743.OutputDataReceived.Add v4747 
            let v4748 : bool = true
            let v4749 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v4743, v4745, v4748)
            v4743.ErrorDataReceived.Add v4749 
            let v4750 : (unit -> bool) = v4743.Start
            let v4751 : bool = v4750 ()
            let v4752 : bool = v4751 = false
            if v4752 then
                let v4753 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v4753
            let v4754 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v4754 v4743
            let v4755 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v4755 v4743
            let v4758 : (System.Threading.CancellationToken -> US35) = method166()
            let v4759 : US35 option = v1 |> Option.map v4758 
            let v4773 : US35 = US35_1
            let v4774 : US35 = v4759 |> Option.defaultValue v4773 
            let v4781 : System.Threading.CancellationToken =
                match v4774 with
                | US35_1 -> (* None *)
                    let v4779 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v4779
                | US35_0(v4778) -> (* Some *)
                    v4778
            let v4782 : Async<System.Threading.CancellationToken> = method167(v4781)
            let! v4782 = v4782 
            let v4783 : System.Threading.CancellationToken = v4782 
            let v4784 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v4783.Register
            let v4785 : (unit -> unit) = closure67(v4743)
            let v4786 : System.Threading.CancellationTokenRegistration = v4784 v4785
            use v4786 = v4786 
            let v4787 : System.Threading.CancellationTokenRegistration = v4786 
            let v4788 : Async<int32> = method170(v4743, v4745, v4783)
            let! v4788 = v4788 
            let v4789 : int32 = v4788 
            let v4791 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v4792 : string seq = v4791 v4745
            let v4796 : (string seq -> string seq) = Seq.rev
            let v4797 : string seq = v4796 v4792
            let v4801 : string = method75()
            let v4802 : (string -> (string seq -> string)) = String.concat
            let v4803 : (string seq -> string) = v4802 v4801
            let v4804 : string = v4803 v4797
            let v4808 : unit = ()
            let v4809 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v4789, v4804)
            let v4810 : unit = (fun () -> v4809 (); v4808) ()
            return struct (v4789, v4804) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6854 : Async<struct (int32 * string)> = _let'_v4579 
    let _run_target_args'_v11 = v6854 
    #endif
#else
    let v6856 : unit = ()
    let _let'_v6856 =
        async {
            (* run_target_args'
            let v6867 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v6870 : int32, v6871 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6870, v6871) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v6878 : int32, v6879 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6878, v6879) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v6886 : int32, v6887 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6886, v6887) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v6894 : int32, v6895 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6894, v6895) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v6902 : int32, v6903 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6902, v6903) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v6910 : int32, v6911 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6910, v6911) 
            #endif
#else
            let v6916 : US17 = method103(v0)
            let struct (v6928 : string, v6929 : US5) =
                match v6916 with
                | US17_1(v6919) -> (* Error *)
                    let v6921 : string = $"resultm.get / Result value was Error: {v6919}"
                    failwith<struct (string * US5)> v6921
                | US17_0(v6917, v6918) -> (* Ok *)
                    struct (v6917, v6918)
            let v6932 : (string -> US5) = method6()
            let v6933 : US5 option = v6 |> Option.map v6932 
            let v6947 : US5 = US5_1
            let v6948 : US5 = v6933 |> Option.defaultValue v6947 
            let v6955 : string =
                match v6948 with
                | US5_1 -> (* None *)
                    let v6953 : string = ""
                    v6953
                | US5_0(v6952) -> (* Some *)
                    v6952
            let v6956 : unit = ()
            let v6957 : (unit -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v6929, v6928)
            let v6958 : unit = (fun () -> v6957 (); v6956) ()
            let v7005 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v7009 : string =
                match v6929 with
                | US5_1 -> (* None *)
                    let v7007 : string = ""
                    v7007
                | US5_0(v7006) -> (* Some *)
                    v7006
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v7009,
              StandardOutputEncoding = v7005,
              WorkingDirectory = v6955,
              FileName = v6928,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v7010 : System.Diagnostics.ProcessStartInfo = start_info
            let v7011 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v7012 : int32 = v7011.Length
            let v7013 : Mut5 = {l0 = 0} : Mut5
            while method32(v7012, v7013) do
                let v7015 : int32 = v7013.l0
                let struct (v7016 : string, v7017 : string) = v7011.[int v7015]
                v7010.EnvironmentVariables.[v7016] <- v7017 
                let v7018 : int32 = v7015 + 1
                v7013.l0 <- v7018
                ()
            let v7019 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v7010)
            use v7019 = v7019 
            let v7020 : System.Diagnostics.Process = v7019 
            let v7021 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v7022 : System.Collections.Concurrent.ConcurrentStack<string> = v7021 ()
            let v7023 : bool = false
            let v7024 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v7020, v7022, v7023)
            v7020.OutputDataReceived.Add v7024 
            let v7025 : bool = true
            let v7026 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure63(v0, v1, v2, v3, v4, v5, v6, v7020, v7022, v7025)
            v7020.ErrorDataReceived.Add v7026 
            let v7027 : (unit -> bool) = v7020.Start
            let v7028 : bool = v7027 ()
            let v7029 : bool = v7028 = false
            if v7029 then
                let v7030 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v7030
            let v7031 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v7031 v7020
            let v7032 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v7032 v7020
            let v7035 : (System.Threading.CancellationToken -> US35) = method166()
            let v7036 : US35 option = v1 |> Option.map v7035 
            let v7050 : US35 = US35_1
            let v7051 : US35 = v7036 |> Option.defaultValue v7050 
            let v7058 : System.Threading.CancellationToken =
                match v7051 with
                | US35_1 -> (* None *)
                    let v7056 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v7056
                | US35_0(v7055) -> (* Some *)
                    v7055
            let v7059 : Async<System.Threading.CancellationToken> = method167(v7058)
            let! v7059 = v7059 
            let v7060 : System.Threading.CancellationToken = v7059 
            let v7061 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v7060.Register
            let v7062 : (unit -> unit) = closure67(v7020)
            let v7063 : System.Threading.CancellationTokenRegistration = v7061 v7062
            use v7063 = v7063 
            let v7064 : System.Threading.CancellationTokenRegistration = v7063 
            let v7065 : Async<int32> = method170(v7020, v7022, v7060)
            let! v7065 = v7065 
            let v7066 : int32 = v7065 
            let v7068 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v7069 : string seq = v7068 v7022
            let v7073 : (string seq -> string seq) = Seq.rev
            let v7074 : string seq = v7073 v7069
            let v7078 : string = method75()
            let v7079 : (string -> (string seq -> string)) = String.concat
            let v7080 : (string seq -> string) = v7079 v7078
            let v7081 : string = v7080 v7074
            let v7085 : unit = ()
            let v7086 : (unit -> unit) = closure69(v0, v1, v2, v3, v4, v5, v6, v7066, v7081)
            let v7087 : unit = (fun () -> v7086 (); v7085) ()
            return struct (v7066, v7081) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9131 : Async<struct (int32 * string)> = _let'_v6856 
    let _run_target_args'_v11 = v9131 
    #endif
    let v9132 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v9132
and method156 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method157(v0, v1, v2, v3, v4, v5, v6)
and method101 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method102(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US17 = method103(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US17_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US17_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US25 = method116(v34)
    let v44 : (string []) =
        match v35 with
        | US25_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US25_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "_vec_map"
    let v120 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure42(v0, v1, v2, v3, v4, v5, v6, v29, v120)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v175 : bool = true
    let mutable _capture_v175 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v176 : string = "std::process::Command::new(&*$0)"
    let v177 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v176 
    let v178 : string = "true; let mut v177 = v177"
    let v179 : bool = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : string = "true; std::process::Command::args(&mut v177, &*$0)"
    let v181 : bool = Fable.Core.RustInterop.emitRustExpr v120 v180 
    let v182 : string = "$0"
    let v183 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v177 v182 
    let v184 : string = "std::process::Stdio::piped()"
    let v185 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "true; let mut v183 = v183"
    let v187 : bool = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "true; std::process::Command::stdout(&mut v183, std::process::Stdio::piped())"
    let v189 : bool = Fable.Core.RustInterop.emitRustExpr () v188 
    let v190 : string = "$0"
    let v191 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let v192 : string = "std::process::Stdio::piped()"
    let v193 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v192 
    let v194 : string = "true; let mut v191 = v191"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "true; std::process::Command::stderr(&mut v191, std::process::Stdio::piped())"
    let v197 : bool = Fable.Core.RustInterop.emitRustExpr () v196 
    let v198 : string = "$0"
    let v199 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let v200 : string = "std::process::Stdio::piped()"
    let v201 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : string = "true; let mut v199 = v199"
    let v203 : bool = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : string = "true; std::process::Command::stdin(&mut v199, std::process::Stdio::piped())"
    let v205 : bool = Fable.Core.RustInterop.emitRustExpr () v204 
    let v206 : string = "$0"
    let v207 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v199 v206 
    let v210 : (string -> US5) = method6()
    let v211 : US5 option = v6 |> Option.map v210 
    let v225 : US5 = US5_1
    let v226 : US5 = v211 |> Option.defaultValue v225 
    let v240 : std_process_Command =
        match v226 with
        | US5_1 -> (* None *)
            let v237 : string = $"v207"
            let v238 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v237 
            v238
        | US5_0(v230) -> (* Some *)
            let v231 : string = "true; let mut v207 = v207"
            let v232 : bool = Fable.Core.RustInterop.emitRustExpr () v231 
            let v233 : string = "true; std::process::Command::current_dir(&mut v207, &*$0)"
            let v234 : bool = Fable.Core.RustInterop.emitRustExpr v230 v233 
            let v235 : string = $"v207"
            let v236 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v235 
            v236
    let v241 : uint64 = System.Convert.ToUInt64 v2.Length
    let v242 : bool = v241 = 0UL
    let v262 : std_process_Command =
        if v242 then
            v240
        else
            let v243 : string = "$0.to_vec()"
            let v244 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v243 
            let v245 : string = "true; let _vec_fold_ = $0.into_iter().fold(v240, |acc, x| { //"
            let v246 : bool = Fable.Core.RustInterop.emitRustExpr v244 v245 
            let v247 : string = "acc"
            let v248 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v247 
            let v249 : string = "x"
            let struct (v250 : string, v251 : string) = Fable.Core.RustInterop.emitRustExpr () v249 
            let v252 : string = "true; let mut v248 = v248"
            let v253 : bool = Fable.Core.RustInterop.emitRustExpr () v252 
            let v254 : string = "true; std::process::Command::env(&mut v248, &*$0, &*$1)"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr struct (v250, v251) v254 
            let v256 : string = "$0"
            let v257 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v248 v256 
            let v258 : string = "true; $0 })"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "_vec_fold_"
            let v261 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v260 
            v261
    let v263 : string = "true; let mut v262 = v262"
    let v264 : bool = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "std::process::Command::spawn(&mut v262)"
    let v266 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v265 
    let v267 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v269 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v270 : string = "$0.map_err(|x| $1(x))"
    let v271 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v270 
    let _run_target_args'_v269 = v271 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v272 : string = "$0.map_err(|x| $1(x))"
    let v273 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v272 
    let _run_target_args'_v269 = v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : string = "$0.map_err(|x| $1(x))"
    let v275 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v274 
    let _run_target_args'_v269 = v275 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v276 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v276 
    #endif
#if FABLE_COMPILER_PYTHON
    let v277 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v277 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v278 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v278 
    #endif
#else
    let v279 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v279 
    #endif
    let v280 : Result<std_process_Child, std_string_String> = _run_target_args'_v269 
    let v283 : (std_process_Child option -> std_process_Child option) = method128()
    let v284 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v285 : bool = Fable.Core.RustInterop.emitRustExpr v280 v284 
    let v286 : string = "x"
    let v287 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v286 
    let v289 : std_process_Child option = Some v287 
    let v292 : std_process_Child option = v283 v289
    let v293 : string = "std::sync::Mutex::new(v292)"
    let v294 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v293 
    let v295 : string = "std::sync::Arc::new(v294)"
    let v296 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : string = "true; $0 })"
    let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
    let v299 : string = "_result_map_"
    let v300 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v299 
    let v301 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method129()
    let v302 : (std_string_String -> US27) = method130()
    let v303 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v304 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v301, v302, v300) v303 
    let struct (v1607 : int32, v1608 : US7, v1609 : US28) =
        match v304 with
        | US27_1(v1552) -> (* Error *)
            let v1553 : unit = ()
            let v1554 : (unit -> unit) = closure46(v1552)
            let v1555 : unit = (fun () -> v1554 (); v1553) ()
            let v1602 : US7 = US7_0(v1552)
            let v1603 : US28 = US28_1
            struct (-1, v1602, v1603)
        | US27_0(v305) -> (* Ok *)
            let v306 : string = "true; let _capture = (|| { //"
            let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
            let v308 : string = "$0"
            let v309 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v308 
            let v310 : string = "v309.lock()"
            let v311 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v310 
            (* run_target_args'
            let v313 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "$0.unwrap()"
            let v315 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v314 
            let _run_target_args'_v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "$0.unwrap()"
            let v317 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v316 
            let _run_target_args'_v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "$0.unwrap()"
            let v319 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v318 
            let _run_target_args'_v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v322 
            #endif
#else
            let v323 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v323 
            #endif
            let v324 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v313 
            let v327 : std_sync_MutexGuard<std_process_Child option> = method133(v324)
            let v328 : string = "true; let mut v327 = v327"
            let v329 : bool = Fable.Core.RustInterop.emitRustExpr () v328 
            let v330 : string = "&mut $0"
            let v331 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v327 v330 
            let v332 : string = "$0.as_mut()"
            let v333 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "$0.unwrap()"
            let v335 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "&mut $0.stdout"
            let v337 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "Option::take($0)"
            let v339 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v337 v338 
            let v340 : string = "$0.unwrap()"
            let v341 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v339 v340 
            let v342 : string = "true; $0 })()"
            let v343 : bool = Fable.Core.RustInterop.emitRustExpr v341 v342 
            let v344 : string = "_capture"
            let v345 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : string = "true; let _capture = (|| { //"
            let v347 : bool = Fable.Core.RustInterop.emitRustExpr () v346 
            let v348 : string = "$0"
            let v349 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v348 
            let v350 : string = "v349.lock()"
            let v351 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v350 
            (* run_target_args'
            let v353 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v354 : string = "$0.unwrap()"
            let v355 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v354 
            let _run_target_args'_v353 = v355 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v356 : string = "$0.unwrap()"
            let v357 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v356 
            let _run_target_args'_v353 = v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v358 : string = "$0.unwrap()"
            let v359 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v358 
            let _run_target_args'_v353 = v359 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v360 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v360 
            #endif
#if FABLE_COMPILER_PYTHON
            let v361 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v361 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v362 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v362 
            #endif
#else
            let v363 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v363 
            #endif
            let v364 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v353 
            let v367 : std_sync_MutexGuard<std_process_Child option> = method133(v364)
            let v368 : string = "true; let mut v367 = v367"
            let v369 : bool = Fable.Core.RustInterop.emitRustExpr () v368 
            let v370 : string = "&mut $0"
            let v371 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v367 v370 
            let v372 : string = "$0.as_mut()"
            let v373 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v371 v372 
            let v374 : string = "$0.unwrap()"
            let v375 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v373 v374 
            let v376 : string = "&mut $0.stderr"
            let v377 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v375 v376 
            let v378 : string = "Option::take($0)"
            let v379 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v377 v378 
            let v380 : string = "$0.unwrap()"
            let v381 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v379 v380 
            let v382 : string = "true; $0 })()"
            let v383 : bool = Fable.Core.RustInterop.emitRustExpr v381 v382 
            let v384 : string = "_capture"
            let v385 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v384 
            let v386 : string = "true; let _capture = (|| { //"
            let v387 : bool = Fable.Core.RustInterop.emitRustExpr () v386 
            let v388 : string = "$0"
            let v389 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v388 
            let v390 : string = "v389.lock()"
            let v391 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v390 
            (* run_target_args'
            let v393 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v394 : string = "$0.unwrap()"
            let v395 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v394 
            let _run_target_args'_v393 = v395 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v396 : string = "$0.unwrap()"
            let v397 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v396 
            let _run_target_args'_v393 = v397 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v398 : string = "$0.unwrap()"
            let v399 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v398 
            let _run_target_args'_v393 = v399 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v400 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v400 
            #endif
#if FABLE_COMPILER_PYTHON
            let v401 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v401 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v402 
            #endif
#else
            let v403 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v403 
            #endif
            let v404 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v393 
            let v407 : std_sync_MutexGuard<std_process_Child option> = method133(v404)
            let v408 : string = "true; let mut v407 = v407"
            let v409 : bool = Fable.Core.RustInterop.emitRustExpr () v408 
            let v410 : string = "&mut $0"
            let v411 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v407 v410 
            let v412 : string = "$0.as_mut()"
            let v413 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v411 v412 
            let v414 : string = "$0.unwrap()"
            let v415 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v413 v414 
            let v416 : string = "&mut $0.stdin"
            let v417 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "Option::take($0)"
            let v419 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v420 : string = "$0.unwrap()"
            let v421 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v423 : std_process_ChildStdin option = Some v421 
            let v426 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method134()
            let v427 : std_process_ChildStdin option = v426 v423
            let v428 : string = "std::sync::Mutex::new(v427)"
            let v429 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v428 
            let v430 : string = "std::sync::Arc::new(v429)"
            let v431 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v430 
            let v432 : string = "true; $0 })()"
            let v433 : bool = Fable.Core.RustInterop.emitRustExpr v431 v432 
            let v434 : string = "_capture"
            let v435 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v434 
            let v436 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v437 : std_sync_mpsc_Sender<std_string_String>, v438 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v436 
            let v439 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method135()
            let v440 : std_sync_mpsc_Sender<std_string_String> = v439 v437
            let v441 : string = "std::sync::Mutex::new(v440)"
            let v442 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v441 
            let v443 : string = "std::sync::Arc::new(v442)"
            let v444 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v443 
            let v445 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method136()
            let v446 : std_sync_mpsc_Sender<std_string_String> = v445 v437
            let v447 : string = "std::sync::Mutex::new(v446)"
            let v448 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v447 
            let v449 : string = "std::sync::Arc::new(v448)"
            let v450 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v449 
            let v451 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method137()
            let v452 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v451 v438
            let v453 : string = "std::sync::Mutex::new(v452)"
            let v454 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v453 
            let v455 : string = "std::sync::Arc::new(v454)"
            let v456 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v455 
            let v457 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v458 : bool = Fable.Core.RustInterop.emitRustExpr () v457 
            let v459 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v460 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v345 v459 
            let v461 : string = "std::io::BufReader::new($0)"
            let v462 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v460 v461 
            let v463 : string = "std::io::BufRead::lines(v462)"
            let v464 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v463 
            let v465 : string = "true; let mut v464 = v464; let _iter_try_for_each = v464.try_for_each(|x| { //"
            let v466 : bool = Fable.Core.RustInterop.emitRustExpr () v465 
            let v467 : string = "x"
            let v468 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v467 
            let v469 : string = "$0.clone()"
            let v470 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v444 v469 
            let v471 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v473 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : string = "$0.map_err(|x| $1(x))"
            let v475 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v474 
            let _run_target_args'_v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : string = "$0.map_err(|x| $1(x))"
            let v477 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v476 
            let _run_target_args'_v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : string = "$0.map_err(|x| $1(x))"
            let v479 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v478 
            let _run_target_args'_v473 = v479 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v480 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v480 
            #endif
#if FABLE_COMPILER_PYTHON
            let v481 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v481 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v482 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v482 
            #endif
#else
            let v483 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v483 
            #endif
            let v484 : Result<std_string_String, std_string_String> = _run_target_args'_v473 
            let v487 : (std_string_String -> US29) = method138()
            let v488 : (std_string_String -> US29) = method139()
            let v489 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v490 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v487, v488, v484) v489 
            let v727 : std_string_String =
                match v490 with
                | US29_1(v609) -> (* Error *)
                    let v610 : unit = ()
                    let v611 : (unit -> unit) = closure52(v5, v609)
                    let v612 : unit = (fun () -> v611 (); v610) ()
                    let v659 : string = $"\u001b[4;7m{v609}\u001b[0m"
                    (* run_target_args'
                    let v664 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v665 : string = "&*$0"
                    let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v665 
                    let _run_target_args'_v664 = v666 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v667 : string = "&*$0"
                    let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v667 
                    let _run_target_args'_v664 = v668 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v669 : string = "&*$0"
                    let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v669 
                    let _run_target_args'_v664 = v670 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v672 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v672 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v676 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v680 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v680 
                    #endif
#else
                    let v684 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v684 
                    #endif
                    let v687 : Ref<Str> = _run_target_args'_v664 
                    (* run_target_args'
                    let v697 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v698 : string = "String::from($0)"
                    let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v698 
                    let _run_target_args'_v697 = v699 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v700 : string = "String::from($0)"
                    let v701 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v700 
                    let _run_target_args'_v697 = v701 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v702 : string = "String::from($0)"
                    let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v702 
                    let _run_target_args'_v697 = v703 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v705 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v705 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v709 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v709 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v713 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v713 
                    #endif
#else
                    let v717 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v717 
                    #endif
                    let v720 : std_string_String = _run_target_args'_v697 
                    v720
                | US29_0(v491) -> (* Ok *)
                    let v492 : string = "fable_library_rust::String_::fromString($0)"
                    let v493 : string = Fable.Core.RustInterop.emitRustExpr v491 v492 
                    let v494 : string = "encoding_rs::UTF_8"
                    let v495 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v494 
                    let v496 : string = "$0.encode(&*$1).0"
                    let v497 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v495, v493) v496 
                    let v498 : string = "$0.as_ref()"
                    let v499 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v497 v498 
                    let v500 : string = "std::str::from_utf8($0)"
                    let v501 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v499 v500 
                    (* run_target_args'
                    let v503 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v504 : string = "$0.unwrap()"
                    let v505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v504 
                    let _run_target_args'_v503 = v505 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v506 : string = "$0.unwrap()"
                    let v507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v506 
                    let _run_target_args'_v503 = v507 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v508 : string = "$0.unwrap()"
                    let v509 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v508 
                    let _run_target_args'_v503 = v509 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v510 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v510 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v511 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v511 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v512 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v512 
                    #endif
#else
                    let v513 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v513 
                    #endif
                    let v514 : Ref<Str> = _run_target_args'_v503 
                    (* run_target_args'
                    let v521 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v522 : string = "String::from($0)"
                    let v523 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v522 
                    let _run_target_args'_v521 = v523 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v524 : string = "String::from($0)"
                    let v525 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v524 
                    let _run_target_args'_v521 = v525 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v526 : string = "String::from($0)"
                    let v527 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v526 
                    let _run_target_args'_v521 = v527 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v529 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v529 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v533 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v533 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v537 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v537 
                    #endif
#else
                    let v541 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v541 
                    #endif
                    let v544 : std_string_String = _run_target_args'_v521 
                    let v550 : string = "fable_library_rust::String_::fromString($0)"
                    let v551 : string = Fable.Core.RustInterop.emitRustExpr v544 v550 
                    let v552 : string = $"> {v551}"
                    if v5 then
                        let v553 : unit = ()
                        let v554 : (unit -> unit) = closure53(v552)
                        let v555 : unit = (fun () -> v554 (); v553) ()
                        ()
                    else
                        let v605 : unit = ()
                        let v606 : (unit -> unit) = closure10(v552)
                        let v607 : unit = (fun () -> v606 (); v605) ()
                        ()
                    v544
            let v728 : string = "$0"
            let v729 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v470 v728 
            let v730 : string = "v729.lock()"
            let v731 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v730 
            (* run_target_args'
            let v733 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v734 : string = "$0.unwrap()"
            let v735 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v734 
            let _run_target_args'_v733 = v735 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v736 : string = "$0.unwrap()"
            let v737 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v736 
            let _run_target_args'_v733 = v737 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v738 : string = "$0.unwrap()"
            let v739 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v738 
            let _run_target_args'_v733 = v739 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v740 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v740 
            #endif
#if FABLE_COMPILER_PYTHON
            let v741 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v741 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v742 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v742 
            #endif
#else
            let v743 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v743 
            #endif
            let v744 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v733 
            let v747 : string = "&$0"
            let v748 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v744 v747 
            let v749 : string = "$0.send($1)"
            let v750 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v748, v727) v749 
            let v751 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v753 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v754 : string = "$0.map_err(|x| $1(x))"
            let v755 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v754 
            let _run_target_args'_v753 = v755 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v756 : string = "$0.map_err(|x| $1(x))"
            let v757 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v756 
            let _run_target_args'_v753 = v757 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v758 : string = "$0.map_err(|x| $1(x))"
            let v759 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v758 
            let _run_target_args'_v753 = v759 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v760 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v760 
            #endif
#if FABLE_COMPILER_PYTHON
            let v761 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v761 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v762 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v762 
            #endif
#else
            let v763 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v763 
            #endif
            let v764 : Result<unit, std_string_String> = _run_target_args'_v753 
            let v767 : string = "$0"
            let v768 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v764 v767 
            let v769 : string = "true; $0 }); //"
            let v770 : bool = Fable.Core.RustInterop.emitRustExpr v768 v769 
            let v771 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v772 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v771 
            let v773 : Result<unit, string> = method145(v772)
            let v774 : string = ""
            let v775 : string = "}"
            let v776 : string = v774 + v775 
            let x = v773 //
            let v777 : _ = x
            let v778 : unit = ()
            (* run_target_args'
            let v779 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v780 : string = $"true; let _fix_closure_v778 = $0"
            let v781 : bool = Fable.Core.RustInterop.emitRustExpr v777 v780 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v782 : string = $"true; let _fix_closure_v778 = $0"
            let v783 : bool = Fable.Core.RustInterop.emitRustExpr v777 v782 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v784 : string = $"true; let _fix_closure_v778 = $0"
            let v785 : bool = Fable.Core.RustInterop.emitRustExpr v777 v784 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v779 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v779 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v779 = false 
            #endif
#else
            let _run_target_args'_v779 = false 
            #endif
            let v786 : bool = _run_target_args'_v779 
            let v788 : string = $"true; _fix_closure_v778 " + v776 + "); " + v774 + " // rust.fix_closure'"
            let v789 : bool = Fable.Core.RustInterop.emitRustExpr () v788 
            let v790 : string = "__spawn"
            let v791 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v790 
            let v792 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v795 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v385 v794 
            let v796 : string = "std::io::BufReader::new($0)"
            let v797 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
            let v798 : string = "std::io::BufRead::lines(v797)"
            let v799 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v798 
            let v800 : string = "true; let mut v799 = v799; let _iter_try_for_each = v799.try_for_each(|x| { //"
            let v801 : bool = Fable.Core.RustInterop.emitRustExpr () v800 
            let v802 : string = "x"
            let v803 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v802 
            let v804 : string = "$0.clone()"
            let v805 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v450 v804 
            let v806 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v808 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v809 : string = "$0.map_err(|x| $1(x))"
            let v810 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v809 
            let _run_target_args'_v808 = v810 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v811 : string = "$0.map_err(|x| $1(x))"
            let v812 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v811 
            let _run_target_args'_v808 = v812 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v813 : string = "$0.map_err(|x| $1(x))"
            let v814 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v813 
            let _run_target_args'_v808 = v814 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v815 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v815 
            #endif
#if FABLE_COMPILER_PYTHON
            let v816 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v816 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v817 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v817 
            #endif
#else
            let v818 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v818 
            #endif
            let v819 : Result<std_string_String, std_string_String> = _run_target_args'_v808 
            let v822 : (std_string_String -> US29) = method138()
            let v823 : (std_string_String -> US29) = method139()
            let v824 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v825 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v822, v823, v819) v824 
            let v1128 : std_string_String =
                match v825 with
                | US29_1(v1010) -> (* Error *)
                    let v1011 : unit = ()
                    let v1012 : (unit -> unit) = closure52(v5, v1010)
                    let v1013 : unit = (fun () -> v1012 (); v1011) ()
                    let v1060 : string = $"\u001b[4;7m{v1010}\u001b[0m"
                    (* run_target_args'
                    let v1065 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1066 : string = "&*$0"
                    let v1067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1066 
                    let _run_target_args'_v1065 = v1067 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1068 : string = "&*$0"
                    let v1069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1068 
                    let _run_target_args'_v1065 = v1069 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1070 : string = "&*$0"
                    let v1071 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1070 
                    let _run_target_args'_v1065 = v1071 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1073 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1073 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1077 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1077 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1081 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1081 
                    #endif
#else
                    let v1085 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1085 
                    #endif
                    let v1088 : Ref<Str> = _run_target_args'_v1065 
                    (* run_target_args'
                    let v1098 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1099 : string = "String::from($0)"
                    let v1100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1099 
                    let _run_target_args'_v1098 = v1100 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1101 : string = "String::from($0)"
                    let v1102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1101 
                    let _run_target_args'_v1098 = v1102 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1103 : string = "String::from($0)"
                    let v1104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1103 
                    let _run_target_args'_v1098 = v1104 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1106 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1106 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1110 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1110 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1114 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1114 
                    #endif
#else
                    let v1118 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1118 
                    #endif
                    let v1121 : std_string_String = _run_target_args'_v1098 
                    v1121
                | US29_0(v826) -> (* Ok *)
                    let v827 : string = "fable_library_rust::String_::fromString($0)"
                    let v828 : string = Fable.Core.RustInterop.emitRustExpr v826 v827 
                    let v829 : string = "encoding_rs::UTF_8"
                    let v830 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v829 
                    let v831 : string = "$0.encode(&*$1).0"
                    let v832 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v830, v828) v831 
                    let v833 : string = "$0.as_ref()"
                    let v834 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
                    let v835 : string = "std::str::from_utf8($0)"
                    let v836 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v834 v835 
                    (* run_target_args'
                    let v838 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v839 : string = "$0.unwrap()"
                    let v840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v839 
                    let _run_target_args'_v838 = v840 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v841 : string = "$0.unwrap()"
                    let v842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v841 
                    let _run_target_args'_v838 = v842 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v843 : string = "$0.unwrap()"
                    let v844 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v843 
                    let _run_target_args'_v838 = v844 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v845 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v845 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v846 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v846 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v847 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v847 
                    #endif
#else
                    let v848 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v848 
                    #endif
                    let v849 : Ref<Str> = _run_target_args'_v838 
                    (* run_target_args'
                    let v856 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v857 : string = "String::from($0)"
                    let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v857 
                    let _run_target_args'_v856 = v858 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v859 : string = "String::from($0)"
                    let v860 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v859 
                    let _run_target_args'_v856 = v860 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v861 : string = "String::from($0)"
                    let v862 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v861 
                    let _run_target_args'_v856 = v862 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v864 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v864 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v868 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v868 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v872 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v872 
                    #endif
#else
                    let v876 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v876 
                    #endif
                    let v879 : std_string_String = _run_target_args'_v856 
                    let v885 : string = "fable_library_rust::String_::fromString($0)"
                    let v886 : string = Fable.Core.RustInterop.emitRustExpr v879 v885 
                    let v887 : string = $"! {v886}"
                    if v5 then
                        let v888 : unit = ()
                        let v889 : (unit -> unit) = closure53(v887)
                        let v890 : unit = (fun () -> v889 (); v888) ()
                        ()
                    else
                        let v939 : unit = ()
                        let v940 : (unit -> unit) = closure10(v887)
                        let v941 : unit = (fun () -> v940 (); v939) ()
                        ()
                    let v943 : string = $"\u001b[4;7m{v879}\u001b[0m"
                    (* run_target_args'
                    let v948 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v949 : string = "&*$0"
                    let v950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v949 
                    let _run_target_args'_v948 = v950 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v951 : string = "&*$0"
                    let v952 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v951 
                    let _run_target_args'_v948 = v952 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v953 : string = "&*$0"
                    let v954 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v953 
                    let _run_target_args'_v948 = v954 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v956 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v956 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v960 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v960 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v964 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v964 
                    #endif
#else
                    let v968 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v968 
                    #endif
                    let v971 : Ref<Str> = _run_target_args'_v948 
                    (* run_target_args'
                    let v981 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v982 : string = "String::from($0)"
                    let v983 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v982 
                    let _run_target_args'_v981 = v983 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v984 : string = "String::from($0)"
                    let v985 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v984 
                    let _run_target_args'_v981 = v985 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v986 : string = "String::from($0)"
                    let v987 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v986 
                    let _run_target_args'_v981 = v987 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v989 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v989 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v993 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v993 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v997 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v997 
                    #endif
#else
                    let v1001 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v1001 
                    #endif
                    let v1004 : std_string_String = _run_target_args'_v981 
                    v1004
            let v1129 : string = "$0"
            let v1130 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v805 v1129 
            let v1131 : string = "v1130.lock()"
            let v1132 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1131 
            (* run_target_args'
            let v1134 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1135 : string = "$0.unwrap()"
            let v1136 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1135 
            let _run_target_args'_v1134 = v1136 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1137 : string = "$0.unwrap()"
            let v1138 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1137 
            let _run_target_args'_v1134 = v1138 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1139 : string = "$0.unwrap()"
            let v1140 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1139 
            let _run_target_args'_v1134 = v1140 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1141 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1141 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1142 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1142 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1143 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1143 
            #endif
#else
            let v1144 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1144 
            #endif
            let v1145 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1134 
            let v1148 : string = "&$0"
            let v1149 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1145 v1148 
            let v1150 : string = "$0.send($1)"
            let v1151 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1149, v1128) v1150 
            let v1152 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v1154 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1155 : string = "$0.map_err(|x| $1(x))"
            let v1156 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1155 
            let _run_target_args'_v1154 = v1156 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1157 : string = "$0.map_err(|x| $1(x))"
            let v1158 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1157 
            let _run_target_args'_v1154 = v1158 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1159 : string = "$0.map_err(|x| $1(x))"
            let v1160 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1159 
            let _run_target_args'_v1154 = v1160 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1161 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1161 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1162 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1162 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1163 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1163 
            #endif
#else
            let v1164 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1164 
            #endif
            let v1165 : Result<unit, std_string_String> = _run_target_args'_v1154 
            let v1168 : string = "$0"
            let v1169 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1165 v1168 
            let v1170 : string = "true; $0 }); //"
            let v1171 : bool = Fable.Core.RustInterop.emitRustExpr v1169 v1170 
            let v1172 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1173 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1172 
            let v1174 : Result<unit, string> = method145(v1173)
            let v1175 : string = v774 + v775 
            let x = v1174 //
            let v1176 : _ = x
            let v1177 : unit = ()
            (* run_target_args'
            let v1178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1179 : string = $"true; let _fix_closure_v1177 = $0"
            let v1180 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1179 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1181 : string = $"true; let _fix_closure_v1177 = $0"
            let v1182 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1181 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1183 : string = $"true; let _fix_closure_v1177 = $0"
            let v1184 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1183 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1178 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1178 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1178 = false 
            #endif
#else
            let _run_target_args'_v1178 = false 
            #endif
            let v1185 : bool = _run_target_args'_v1178 
            let v1187 : string = $"true; _fix_closure_v1177 " + v1175 + "); " + v774 + " // rust.fix_closure'"
            let v1188 : bool = Fable.Core.RustInterop.emitRustExpr () v1187 
            let v1189 : string = "__spawn"
            let v1190 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1189 
            let v1193 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method146()
            let v1194 : US30 option = v4 |> Option.map v1193 
            let v1208 : US30 = US30_1
            let v1209 : US30 = v1194 |> Option.defaultValue v1208 
            match v1209 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1213) -> (* Some *)
                let v1214 : string = "$0"
                let v1215 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v435 v1214 
                let v1216 : string = "v1215.lock()"
                let v1217 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1216 
                (* run_target_args'
                let v1219 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1220 : string = "$0.unwrap()"
                let v1221 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1220 
                let _run_target_args'_v1219 = v1221 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1222 : string = "$0.unwrap()"
                let v1223 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1222 
                let _run_target_args'_v1219 = v1223 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1224 : string = "$0.unwrap()"
                let v1225 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1224 
                let _run_target_args'_v1219 = v1225 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1226 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1226 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1227 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1227 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1228 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1228 
                #endif
#else
                let v1229 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1229 
                #endif
                let v1230 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1219 
                let v1233 : std_sync_MutexGuard<std_process_ChildStdin option> = method147(v1230)
                let v1234 : string = "true; let mut v1233 = v1233"
                let v1235 : bool = Fable.Core.RustInterop.emitRustExpr () v1234 
                let v1236 : string = "&mut $0"
                let v1237 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1233 v1236 
                let v1238 : string = "Option::take($0)"
                let v1239 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1237 v1238 
                let v1240 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1241 : bool = Fable.Core.RustInterop.emitRustExpr v1239 v1240 
                let v1242 : string = "x"
                let v1243 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1242 
                let v1244 : string = "std::sync::Mutex::new(v1243)"
                let v1245 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1244 
                let v1246 : string = "std::sync::Arc::new(v1245)"
                let v1247 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1246 
                let v1248 : string = "true; $0 })"
                let v1249 : bool = Fable.Core.RustInterop.emitRustExpr v1247 v1248 
                let v1250 : string = "_optionm_map_"
                let v1251 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1250 
                let v1254 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method148()
                let v1255 : US31 option = v1251 |> Option.map v1254 
                let v1269 : US31 = US31_1
                let v1270 : US31 = v1255 |> Option.defaultValue v1269 
                match v1270 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1274) -> (* Some *)
                    v1213 v1274
                    let v1275 : string = "$0"
                    let v1276 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1274 v1275 
                    let v1277 : string = "v1276.lock()"
                    let v1278 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1277 
                    (* run_target_args'
                    let v1280 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1281 : string = "$0.unwrap()"
                    let v1282 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1281 
                    let _run_target_args'_v1280 = v1282 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1283 : string = "$0.unwrap()"
                    let v1284 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1283 
                    let _run_target_args'_v1280 = v1284 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1285 : string = "$0.unwrap()"
                    let v1286 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1285 
                    let _run_target_args'_v1280 = v1286 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1287 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1287 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1288 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1288 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1289 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1289 
                    #endif
#else
                    let v1290 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1290 
                    #endif
                    let v1291 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1280 
                    let v1294 : std_sync_MutexGuard<std_process_ChildStdin> = method149(v1291)
                    let v1295 : string = "true; let mut v1294 = v1294"
                    let v1296 : bool = Fable.Core.RustInterop.emitRustExpr () v1295 
                    let v1297 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1298 : bool = Fable.Core.RustInterop.emitRustExpr v1294 v1297 
                    ()
            let v1299 : string = "$0"
            let v1300 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v1299 
            let v1301 : string = "v1300.lock()"
            let v1302 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1301 
            (* run_target_args'
            let v1304 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1305 : string = "$0.unwrap()"
            let v1306 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1305 
            let _run_target_args'_v1304 = v1306 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1307 : string = "$0.unwrap()"
            let v1308 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1307 
            let _run_target_args'_v1304 = v1308 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1309 : string = "$0.unwrap()"
            let v1310 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1309 
            let _run_target_args'_v1304 = v1310 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1311 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1311 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1312 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1312 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1313 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1313 
            #endif
#else
            let v1314 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1314 
            #endif
            let v1315 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1304 
            let v1318 : std_sync_MutexGuard<std_process_Child option> = method133(v1315)
            let v1319 : string = "true; let mut v1318 = v1318"
            let v1320 : bool = Fable.Core.RustInterop.emitRustExpr () v1319 
            let v1321 : string = "&mut $0"
            let v1322 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1318 v1321 
            let v1323 : string = "Option::take($0)"
            let v1324 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1322 v1323 
            let v1325 : string = "$0.unwrap()"
            let v1326 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1324 v1325 
            let v1327 : string = "$0.wait_with_output()"
            let v1328 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1326 v1327 
            let v1329 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v1331 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1332 : string = "$0.map_err(|x| $1(x))"
            let v1333 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1332 
            let _run_target_args'_v1331 = v1333 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1334 : string = "$0.map_err(|x| $1(x))"
            let v1335 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1334 
            let _run_target_args'_v1331 = v1335 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1336 : string = "$0.map_err(|x| $1(x))"
            let v1337 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1336 
            let _run_target_args'_v1331 = v1337 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1338 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1338 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1339 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1339 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1340 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1340 
            #endif
#else
            let v1341 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1341 
            #endif
            let v1342 : Result<std_process_Output, std_string_String> = _run_target_args'_v1331 
            let v1345 : string = "v1190"
            let v1346 : string = v1345 + v774 
            let v1347 : string = v1346 + v774 
            let v1348 : string = "v791"
            let v1349 : string = ", "
            let v1350 : string = v1348 + v1349 
            let v1351 : string = v1350 + v1347 
            let v1352 : string = "vec![" + v1351 + "]"
            let v1353 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1352 
            let v1354 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1355 : bool = Fable.Core.RustInterop.emitRustExpr v1353 v1354 
            let v1356 : string = "x"
            let v1357 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1356 
            let v1358 : string = "std::thread::JoinHandle::join($0)"
            let v1359 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1357 v1358 
            (* run_target_args'
            let v1361 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1362 : string = "$0.unwrap()"
            let v1363 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1362 
            let _run_target_args'_v1361 = v1363 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1364 : string = "$0.unwrap()"
            let v1365 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1364 
            let _run_target_args'_v1361 = v1365 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1366 : string = "$0.unwrap()"
            let v1367 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1366 
            let _run_target_args'_v1361 = v1367 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1368 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1368 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1369 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1370 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1370 
            #endif
#else
            let v1371 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1371 
            #endif
            let v1372 : Result<unit, string> = _run_target_args'_v1361 
            (* run_target_args'
            let v1375 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1376 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1376 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1377 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1377 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1378 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1378 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1379 : string = $"true"
            let v1380 : bool = Fable.Core.RustInterop.emitRustExpr () v1379 
            let v1381 : string = "true; }}); { //"
            let v1382 : bool = Fable.Core.RustInterop.emitRustExpr () v1381 
            let v1383 : (std_process_Output -> US32) = method150()
            let v1384 : (std_string_String -> US32) = method151()
            let v1386 : US32 = match v1342 with Ok x -> v1383 x | Error x -> v1384 x
            match v1386 with
            | US32_1(v1494) -> (* Error *)
                let v1495 : unit = ()
                let v1496 : (unit -> unit) = closure59(v1494)
                let v1497 : unit = (fun () -> v1496 (); v1495) ()
                let v1544 : US7 = US7_0(v1494)
                let v1545 : US28 = US28_1
                struct (-2, v1544, v1545)
            | US32_0(v1389) -> (* Ok *)
                let v1390 : string = "$0.status"
                let v1391 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1389 v1390 
                let v1392 : string = "$0.code()"
                let v1393 : int32 option = Fable.Core.RustInterop.emitRustExpr v1391 v1392 
                let v1396 : (int32 -> US33) = method153()
                let v1397 : US33 option = v1393 |> Option.map v1396 
                let v1411 : US33 = US33_1
                let v1412 : US33 = v1397 |> Option.defaultValue v1411 
                match v1412 with
                | US33_1 -> (* None *)
                    let v1419 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1424 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1425 : string = "&*$0"
                    let v1426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1425 
                    let _run_target_args'_v1424 = v1426 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1427 : string = "&*$0"
                    let v1428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1427 
                    let _run_target_args'_v1424 = v1428 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1429 : string = "&*$0"
                    let v1430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1429 
                    let _run_target_args'_v1424 = v1430 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1432 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1432 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1436 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1436 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1440 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1440 
                    #endif
#else
                    let v1444 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1444 
                    #endif
                    let v1447 : Ref<Str> = _run_target_args'_v1424 
                    (* run_target_args'
                    let v1457 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1458 : string = "String::from($0)"
                    let v1459 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1458 
                    let _run_target_args'_v1457 = v1459 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1460 : string = "String::from($0)"
                    let v1461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1460 
                    let _run_target_args'_v1457 = v1461 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1462 : string = "String::from($0)"
                    let v1463 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1462 
                    let _run_target_args'_v1457 = v1463 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1465 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1465 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1469 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1469 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1473 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1473 
                    #endif
#else
                    let v1477 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1477 
                    #endif
                    let v1480 : std_string_String = _run_target_args'_v1457 
                    let v1486 : US7 = US7_0(v1480)
                    let v1487 : US28 = US28_0(v456)
                    struct (-1, v1486, v1487)
                | US33_0(v1416) -> (* Some *)
                    let v1417 : US7 = US7_1
                    let v1418 : US28 = US28_0(v456)
                    struct (v1416, v1417, v1418)
    let v1617 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1609 with
        | US28_1 -> (* None *)
            let v1615 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1615
        | US28_0(v1610) -> (* Some *)
            let v1612 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1610 
            v1612
    let v1618 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1619 : bool = Fable.Core.RustInterop.emitRustExpr v1617 v1618 
    let v1620 : string = "x"
    let v1621 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1620 
    let v1622 : string = "$0"
    let v1623 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1621 v1622 
    let v1624 : string = "v1623.lock()"
    let v1625 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1624 
    (* run_target_args'
    let v1627 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1628 : string = "$0.unwrap()"
    let v1629 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1628 
    let _run_target_args'_v1627 = v1629 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1630 : string = "$0.unwrap()"
    let v1631 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1630 
    let _run_target_args'_v1627 = v1631 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1632 : string = "$0.unwrap()"
    let v1633 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1632 
    let _run_target_args'_v1627 = v1633 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1634 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1634 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1635 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1635 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1636 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1636 
    #endif
#else
    let v1637 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1637 
    #endif
    let v1638 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v1627 
    let v1641 : string = "$0.iter()"
    let v1642 : _ = Fable.Core.RustInterop.emitRustExpr v1638 v1641 
    let v1643 : string = "$0.collect::<Vec<_>>()"
    let v1644 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1642 v1643 
    let v1645 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1646 : bool = Fable.Core.RustInterop.emitRustExpr v1644 v1645 
    let v1647 : string = "x"
    let v1648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1647 
    let v1649 : string = "fable_library_rust::String_::fromString($0)"
    let v1650 : string = Fable.Core.RustInterop.emitRustExpr v1648 v1649 
    let v1651 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1652 : bool = Fable.Core.RustInterop.emitRustExpr v1650 v1651 
    let v1653 : string = "_vec_map"
    let v1654 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1653 
    let v1655 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v1656 : (string []) = Fable.Core.RustInterop.emitRustExpr v1654 v1655 
    let v1658 : string seq = v1656 |> Seq.ofArray
    let v1662 : string = method75()
    let v1663 : (string -> (string seq -> string)) = String.concat
    let v1664 : (string seq -> string) = v1663 v1662
    let v1665 : string = v1664 v1658
    let v1669 : string = "true; $0 })"
    let v1670 : bool = Fable.Core.RustInterop.emitRustExpr v1665 v1669 
    let v1671 : string = "_optionm_map_"
    let v1672 : string option = Fable.Core.RustInterop.emitRustExpr () v1671 
    let v1679 : US5 =
        match v1608 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1673) -> (* Some *)
            let v1674 : string = "fable_library_rust::String_::fromString($0)"
            let v1675 : string = Fable.Core.RustInterop.emitRustExpr v1673 v1674 
            US5_0(v1675)
    let v1683 : string =
        match v1679 with
        | US5_1 -> (* None *)
            let v1681 : string = ""
            v1681
        | US5_0(v1680) -> (* Some *)
            v1680
    let v1685 : string = v1672 |> Option.defaultValue v1683 
    let v1688 : unit = ()
    let v1689 : (unit -> unit) = closure61(v1607, v1685)
    let v1690 : unit = (fun () -> v1689 (); v1688) ()
    let v1739 : (int32 * string) = v1607, v1685 
    v1739 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v175 <- Some x
    let v1742 : (int32 * string) = match _capture_v175 with Some x -> x | None -> failwith "base.capture / _capture_v175=None"
    let (a, b) = v1742 
    let v3310 : int32 = a
    let v3311 : string = b
    let _run_target_args'_v15 = struct (v3310, v3311) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3318 : int32, v3319 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3318, v3319) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3326 : int32, v3327 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3326, v3327) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3334 : int32, v3335 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3334, v3335) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v3342 : int32, v3343 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3342, v3343) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v3350 : int32, v3351 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3350, v3351) 
    #endif
#else
    let v3356 : Async<struct (int32 * string)> = method156(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v3365 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v3368 : int32, v3369 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3365 = struct (v3368, v3369) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3376 : int32, v3377 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3365 = struct (v3376, v3377) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3384 : int32, v3385 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3365 = struct (v3384, v3385) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3392 : int32, v3393 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3365 = struct (v3392, v3393) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3398 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3399 : int32, v3400 : string) = v3398 v3356
    let _run_target_args'_v3365 = struct (v3399, v3400) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3401 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3402 : int32, v3403 : string) = v3401 v3356
    let _run_target_args'_v3365 = struct (v3402, v3403) 
    #endif
#else
    let v3404 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3405 : int32, v3406 : string) = v3404 v3356
    let _run_target_args'_v3365 = struct (v3405, v3406) 
    #endif
    let struct (v3407 : int32, v3408 : string) = _run_target_args'_v3365 
    let _run_target_args'_v15 = struct (v3407, v3408) 
    #endif
    let struct (v3413 : int32, v3414 : string) = _run_target_args'_v15 
    struct (v3413, v3414)
and method176 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "run_result"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "new_code_path"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v2}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = " }"
    let v121 : string = $"{v120}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v129 : string = v4.l0
    v129
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method176(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / format error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method82()
        let v48 : string = method175(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and closure71 () (v0 : string) : US5 =
    US5_0(v0)
and closure72 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method75()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method178 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "run_result'"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    (* run_target_args'
    let v117 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v118 : string = "format!(\"{:#?}\", $0)"
    let v119 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v118 
    let v120 : string = "fable_library_rust::String_::fromString($0)"
    let v121 : string = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let _run_target_args'_v117 = v121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v122 : string = "format!(\"{:#?}\", $0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v122 
    let v124 : string = "fable_library_rust::String_::fromString($0)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let _run_target_args'_v117 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "format!(\"{:#?}\", $0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v126 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let _run_target_args'_v117 = v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v131 : string = $"%A{v1}"
    let _run_target_args'_v117 = v131 
    #endif
#if FABLE_COMPILER_PYTHON
    let v135 : string = $"%A{v1}"
    let _run_target_args'_v117 = v135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v139 : string = $"%A{v1}"
    let _run_target_args'_v117 = v139 
    #endif
#else
    let v143 : string = $"%A{v1}"
    let _run_target_args'_v117 = v143 
    #endif
    let v146 : string = _run_target_args'_v117 
    let v153 : string = $"{v146}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v5, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = $"{v85}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v5, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v171 : string = "new_code_path"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v27}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v5, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v190 : string = $"{v2}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v5, v190)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v199 : string = $"{v85}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v5, v199)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v208 : string = "external_command"
    let v209 : string = $"{v208}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v5, v209)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v218 : string = $"{v27}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v5, v218)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v227 : string = $"{v3}"
    let v230 : unit = ()
    let v231 : (unit -> unit) = closure7(v5, v227)
    let v232 : unit = (fun () -> v231 (); v230) ()
    let v236 : string = " }"
    let v237 : string = $"{v236}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v5, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v245 : string = v5.l0
    v245
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure74 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method177(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v0, v1)
        method19(v49)
and closure73 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure74(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method180 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v5, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v5, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v56 : string = "run_result"
    let v57 : string = $"{v56}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v5, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v66 : string = $"{v27}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v5, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v75 : string = $"{v1}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v84 : string = $"{v46}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = "new_code_path"
    let v94 : string = $"{v93}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v5, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v103 : string = $"{v27}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v2}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v46}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v5, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v130 : string = "external_command"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v5, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v140 : string = $"{v27}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v5, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v3}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v5, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = " }"
    let v159 : string = $"{v158}"
    let v162 : unit = ()
    let v163 : (unit -> unit) = closure7(v5, v159)
    let v164 : unit = (fun () -> v163 (); v162) ()
    let v167 : string = v5.l0
    v167
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure75 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method179(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method181 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method181(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method182 () : string =
    let v0 : string = "py-path"
    v0
and method183 () : string =
    let v0 : string = "env"
    v0
and method185 (v0 : US38, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "env"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v5, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v50 : string = "; "
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v60 : string = "exit_code"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v5, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v27}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v50}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v5, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v97 : string = "run_result"
    let v98 : string = $"{v97}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v5, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v107 : string = $"{v27}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v5, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v116 : string = $"{v2}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v5, v116)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v125 : string = $"{v50}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v134 : string = "new_code_path"
    let v135 : string = $"{v134}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v5, v135)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v144 : string = $"{v27}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v144)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v153 : string = $"{v3}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v5, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = " }"
    let v163 : string = $"{v162}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = v5.l0
    v171
and method184 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method185(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / env install error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure77 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method184(v29, v30, v31, v32, v33, v34, v47, v48, v0, v3, v2, v1)
        method19(v49)
and closure78 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method75()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method187 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "run_result"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "new_code_path"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "external_command"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method187(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method186(v29, v30, v31, v32, v33, v34, v47, v48, v3, v1, v0, v2)
        method19(v49)
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method188 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method188(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method189 () : string =
    let v0 : string = "fs-path"
    v0
and method190 () : string =
    let v0 : string = "command"
    v0
and method191 () : string =
    let v0 : string = "path"
    v0
and method193 (v0 : string) : string =
    let v1 : string = method34()
    let v2 : string = method36(v1, v0)
    method69(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method193(v2)
and method192 () : (std_string_String -> string) =
    closure82()
and method194 () : string =
    let v0 : string = "retries"
    v0
and method195 () : string =
    let v0 : string = "working-directory"
    v0
and method198 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "repl_result"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "retry"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v2}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = " }"
    let v121 : string = $"{v120}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v129 : string = v4.l0
    v129
and method197 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method198(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.run / repl error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v1}/{v0}"
        let v50 : string = method197(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v49)
        method19(v50)
and method196 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v22 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v20 : string option = None
            v20
        | US5_0(v15) -> (* Some *)
            let v17 : string option = Some v15 
            v17
    let v23 : bool = false
    let struct (v24 : int32, v25 : string) = method101(v9, v4, v14, v6, v7, v23, v22)
    let v26 : bool = v24 = 0
    let v28 : bool =
        if v26 then
            true
        else
            let v27 : bool = v3 >= v1
            v27
    if v28 then
        struct (v24, v25)
    else
        let v29 : unit = ()
        let v30 : (unit -> unit) = closure83(v1, v3, v25, v24)
        let v31 : unit = (fun () -> v30 (); v29) ()
        let v79 : uint8 = v3 + 1uy
        method196(v0, v1, v2, v79)
and method200 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "jupyter_result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method200(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / jupyter nbconvert"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method199(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method202 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "pwsh_replace_html_result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method201 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method202(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / html cell ids"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method201(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method204 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "result_length"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method203 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method204(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method203(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method205 () : string =
    let v0 : string = "cleanup"
    v0
and method206 () : string =
    let v0 : string = "wasm"
    v0
and method207 () : string =
    let v0 : string = "contract"
    v0
and method208 (v0 : string, v1 : string, v2 : US39) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v4, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v16 : string = "extension"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v4, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v4, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v36 : string = $"{v0}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v4, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = "; "
    let v46 : string = $"{v45}"
    let v49 : unit = ()
    let v50 : (unit -> unit) = closure7(v4, v46)
    let v51 : unit = (fun () -> v50 (); v49) ()
    let v55 : string = "code"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v4, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v65 : string = $"{v26}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v4, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v1}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v45}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = "runtime"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v4, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v102 : string = $"{v26}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"%A{v2}"
    let v115 : string = $"{v111}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v4, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = " }"
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v4, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = v4.l0
    v133
and method209 (v0 : US5, v1 : string, v2 : US42, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method36(v3, v4)
    let v6 : string = method36(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US42_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method36(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US41_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US41_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US41_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method36(v10, v42)
            method36(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method211 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method211(v0, v4, v2)
        let v6 : string = method36(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method212 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method212(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method210 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method78(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method36(v4, v7)
    let v9 : string = method46(v8)
    method76(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method211(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method124(v11, v12)
    let v17 : unit = ()
    let _let'_v17 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v20 : string seq = _let'_v17 
    let v27 : (string -> (string seq -> string)) = String.concat
    let v28 : string = "\\n        "
    let v29 : (string seq -> string) = v27 v28
    let v30 : string = v29 v20
    let v33 : UH2 = UH2_0
    let v34 : UH2 = method212(v3, v33)
    let v35 : string list = []
    let v36 : string list = method124(v34, v35)
    let v40 : unit = ()
    let _let'_v40 =
        seq {
            yield! v36 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v43 : string seq = _let'_v40 
    let v50 : (string -> (string seq -> string)) = String.concat
    let v51 : (string seq -> string) = v50 v28
    let v52 : string = v51 v43
    let v55 : string = $"{v1}.fsproj"
    let v56 : string = method36(v4, v55)
    let v57 : string = method46(v56)
    let v58 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v59 : string = $"<PropertyGroup>"
    let v60 : string = "\n"
    let v61 : string = v58 + v60 
    let v62 : string = v61 + v59 
    let v63 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v64 : string = v62 + v60 
    let v65 : string = v64 + v63 
    let v66 : string = $"    <LangVersion>preview</LangVersion>"
    let v67 : string = v65 + v60 
    let v68 : string = v67 + v66 
    let v69 : string = $"    <RollForward>Major</RollForward>"
    let v70 : string = v68 + v60 
    let v71 : string = v70 + v69 
    let v72 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v73 : string = v71 + v60 
    let v74 : string = v73 + v72 
    let v75 : string = $"    <PublishAot>false</PublishAot>"
    let v76 : string = v74 + v60 
    let v77 : string = v76 + v75 
    let v78 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v79 : string = v77 + v60 
    let v80 : string = v79 + v78 
    let v81 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v82 : string = v80 + v60 
    let v83 : string = v82 + v81 
    let v84 : string = $"    <SelfContained>true</SelfContained>"
    let v85 : string = v83 + v60 
    let v86 : string = v85 + v84 
    let v87 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v88 : string = v86 + v60 
    let v89 : string = v88 + v87 
    let v90 : string = $"    <OutputType>Exe</OutputType>"
    let v91 : string = v89 + v60 
    let v92 : string = v91 + v90 
    let v93 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v94 : string = v92 + v60 
    let v95 : string = v94 + v93 
    let v96 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v97 : string = v95 + v60 
    let v98 : string = v97 + v96 
    let v99 : string = $"</PropertyGroup>"
    let v100 : string = v98 + v60 
    let v101 : string = v100 + v99 
    let v102 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v103 : string = v101 + v60 
    let v104 : string = v103 + v102 
    let v105 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v106 : string = v104 + v60 
    let v107 : string = v106 + v105 
    let v108 : string = $"</PropertyGroup>"
    let v109 : string = v107 + v60 
    let v110 : string = v109 + v108 
    let v111 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v112 : string = v110 + v60 
    let v113 : string = v112 + v111 
    let v114 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v115 : string = v113 + v60 
    let v116 : string = v115 + v114 
    let v117 : string = $"</PropertyGroup>"
    let v118 : string = v116 + v60 
    let v119 : string = v118 + v117 
    let v120 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v121 : string = v119 + v60 
    let v122 : string = v121 + v120 
    let v123 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v124 : string = v122 + v60 
    let v125 : string = v124 + v123 
    let v126 : string = $"</PropertyGroup>"
    let v127 : string = v125 + v60 
    let v128 : string = v127 + v126 
    let v129 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v130 : string = v128 + v60 
    let v131 : string = v130 + v129 
    let v132 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v133 : string = v131 + v60 
    let v134 : string = v133 + v132 
    let v135 : string = $"</PropertyGroup>"
    let v136 : string = v134 + v60 
    let v137 : string = v136 + v135 
    let v138 : string = $"<ItemGroup>"
    let v139 : string = v137 + v60 
    let v140 : string = v139 + v138 
    let v141 : string = $"    {v30}"
    let v142 : string = v140 + v60 
    let v143 : string = v142 + v141 
    let v144 : string = $"    <Compile Include=\"{v9}\" />"
    let v145 : string = v143 + v60 
    let v146 : string = v145 + v144 
    let v147 : string = $"</ItemGroup>"
    let v148 : string = v146 + v60 
    let v149 : string = v148 + v147 
    let v150 : string = $"<ItemGroup>"
    let v151 : string = v149 + v60 
    let v152 : string = v151 + v150 
    let v153 : string = $"    {v52}"
    let v154 : string = v152 + v60 
    let v155 : string = v154 + v153 
    let v156 : string = $"</ItemGroup>"
    let v157 : string = v155 + v60 
    let v158 : string = v157 + v156 
    let v159 : string = $"</Project>"
    let v160 : string = v158 + v60 
    let v161 : string = v160 + v159 
    method76(v57, v161)
    v57
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US43 =
    US43_0(v0)
and method214 () : (chrono_DateTime<chrono_Utc> -> US43) =
    closure87()
and method215 () : string =
    let v0 : string = "hh:mm"
    v0
and method216 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method217 () : string =
    let v0 : string = "hhmm"
    v0
and method213 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v569 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v571 : System.DateTime = System.DateTime.UnixEpoch
    let v575 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v576 : System.DateTime = v575 v571
    let v580 : System.DateTimeKind = System.DateTimeKind.Local
    let v581 : System.DateTime = System.DateTime.SpecifyKind (v1, v580)
    let v585 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v586 : System.DateTime = v585 v581
    (* run_target_args'
    let v592 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v593 : (System.DateTime -> int64) = _.Ticks
    let v594 : int64 = v593 v586
    let _run_target_args'_v592 = v594 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v595 : (System.DateTime -> int64) = _.Ticks
    let v596 : int64 = v595 v586
    let _run_target_args'_v592 = v596 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v598 : int64 = null |> unbox<int64>
    let _run_target_args'_v592 = v598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v601 : (System.DateTime -> int64) = _.Ticks
    let v602 : int64 = v601 v586
    let _run_target_args'_v592 = v602 
    #endif
#if FABLE_COMPILER_PYTHON
    let v603 : (System.DateTime -> int64) = _.Ticks
    let v604 : int64 = v603 v586
    let _run_target_args'_v592 = v604 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v605 : (System.DateTime -> int64) = _.Ticks
    let v606 : int64 = v605 v586
    let _run_target_args'_v592 = v606 
    #endif
#else
    let v607 : (System.DateTime -> int64) = _.Ticks
    let v608 : int64 = v607 v586
    let _run_target_args'_v592 = v608 
    #endif
    let v609 : int64 = _run_target_args'_v592 
    (* run_target_args'
    let v632 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v633 : (System.DateTime -> int64) = _.Ticks
    let v634 : int64 = v633 v576
    let _run_target_args'_v632 = v634 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v635 : (System.DateTime -> int64) = _.Ticks
    let v636 : int64 = v635 v576
    let _run_target_args'_v632 = v636 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v638 : int64 = null |> unbox<int64>
    let _run_target_args'_v632 = v638 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v641 : (System.DateTime -> int64) = _.Ticks
    let v642 : int64 = v641 v576
    let _run_target_args'_v632 = v642 
    #endif
#if FABLE_COMPILER_PYTHON
    let v643 : (System.DateTime -> int64) = _.Ticks
    let v644 : int64 = v643 v576
    let _run_target_args'_v632 = v644 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v645 : (System.DateTime -> int64) = _.Ticks
    let v646 : int64 = v645 v576
    let _run_target_args'_v632 = v646 
    #endif
#else
    let v647 : (System.DateTime -> int64) = _.Ticks
    let v648 : int64 = v647 v576
    let _run_target_args'_v632 = v648 
    #endif
    let v649 : int64 = _run_target_args'_v632 
    let v670 : int64 = v609 |> int64 
    let v674 : int64 = v649 |> int64 
    let v677 : int64 = v670 - v674
    let v678 : int64 = v677 / 10L
    let v679 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v680 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v678 v679 
    let v683 : (chrono_DateTime<chrono_Utc> -> US43) = method214()
    let v684 : US43 option = v680 |> Option.map v683 
    let v698 : US43 = US43_1
    let v699 : US43 = v684 |> Option.defaultValue v698 
    let v719 : US5 =
        match v699 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v703) -> (* Some *)
            let v704 : string = "$0.naive_utc()"
            let v705 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v703 v704 
            let v706 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v707 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v705 v706 
            let v708 : string = "%Y%m%d-%H%M-%S%f"
            let v709 : string = "r#\"" + v708 + "\"#"
            let v710 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v709 
            let v711 : string = "$0.format($1).to_string()"
            let v712 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v707, v710) v711 
            let v713 : string = "fable_library_rust::String_::fromString($0)"
            let v714 : string = Fable.Core.RustInterop.emitRustExpr v712 v713 
            let v715 : string = $"{v714.[0..17]}-{v714.[18..21]}-{v714.[22]}"
            US5_0(v715)
    let v723 : string =
        match v719 with
        | US5_1 -> (* None *)
            let v721 : string = ""
            v721
        | US5_0(v720) -> (* Some *)
            v720
    (* run_target_args'
    let v728 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v729 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v730 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v729 
    let _run_target_args'_v728 = v730 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v732 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v732 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v736 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v736 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v740 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v740 
    #endif
#if FABLE_COMPILER_PYTHON
    let v744 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v744 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v747 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v728 = v747 
    #endif
#else
    let v748 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v728 = v748 
    #endif
    let v749 : System.TimeZoneInfo = _run_target_args'_v728 
    (* run_target_args'
    let v762 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v766 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v767 : (System.DateTime -> int64) = _.Ticks
    let v768 : int64 = v767 v586
    let _run_target_args'_v766 = v768 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v769 : (System.DateTime -> int64) = _.Ticks
    let v770 : int64 = v769 v586
    let _run_target_args'_v766 = v770 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v772 : int64 = null |> unbox<int64>
    let _run_target_args'_v766 = v772 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v775 : (System.DateTime -> int64) = _.Ticks
    let v776 : int64 = v775 v586
    let _run_target_args'_v766 = v776 
    #endif
#if FABLE_COMPILER_PYTHON
    let v777 : (System.DateTime -> int64) = _.Ticks
    let v778 : int64 = v777 v586
    let _run_target_args'_v766 = v778 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v779 : (System.DateTime -> int64) = _.Ticks
    let v780 : int64 = v779 v586
    let _run_target_args'_v766 = v780 
    #endif
#else
    let v781 : (System.DateTime -> int64) = _.Ticks
    let v782 : int64 = v781 v586
    let _run_target_args'_v766 = v782 
    #endif
    let v783 : int64 = _run_target_args'_v766 
    let v803 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v804 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v783) v803 
    let v806 : System.TimeSpan = v804 |> System.TimeSpan 
    let _run_target_args'_v762 = v806 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v812 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v813 : (System.DateTime -> int64) = _.Ticks
    let v814 : int64 = v813 v586
    let _run_target_args'_v812 = v814 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v815 : (System.DateTime -> int64) = _.Ticks
    let v816 : int64 = v815 v586
    let _run_target_args'_v812 = v816 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v818 : int64 = null |> unbox<int64>
    let _run_target_args'_v812 = v818 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v821 : (System.DateTime -> int64) = _.Ticks
    let v822 : int64 = v821 v586
    let _run_target_args'_v812 = v822 
    #endif
#if FABLE_COMPILER_PYTHON
    let v823 : (System.DateTime -> int64) = _.Ticks
    let v824 : int64 = v823 v586
    let _run_target_args'_v812 = v824 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v825 : (System.DateTime -> int64) = _.Ticks
    let v826 : int64 = v825 v586
    let _run_target_args'_v812 = v826 
    #endif
#else
    let v827 : (System.DateTime -> int64) = _.Ticks
    let v828 : int64 = v827 v586
    let _run_target_args'_v812 = v828 
    #endif
    let v829 : int64 = _run_target_args'_v812 
    let v849 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v850 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v829) v849 
    let v852 : System.TimeSpan = v850 |> System.TimeSpan 
    let _run_target_args'_v762 = v852 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v856 : US3 = US3_2
    let v857 : US4 = US4_3(v856)
    let v858 : string = $"date_time.get_utc_offset / target: {v857}"
    let v859 : System.TimeSpan = failwith<System.TimeSpan> v858
    let _run_target_args'_v762 = v859 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v863 : US3 = US3_0
    let v864 : US4 = US4_4(v863)
    let v865 : string = $"date_time.get_utc_offset / target: {v864}"
    let v866 : System.TimeSpan = failwith<System.TimeSpan> v865
    let _run_target_args'_v762 = v866 
    #endif
#if FABLE_COMPILER_PYTHON
    let v870 : US3 = US3_0
    let v871 : US4 = US4_5(v870)
    let v872 : string = $"date_time.get_utc_offset / target: {v871}"
    let v873 : System.TimeSpan = failwith<System.TimeSpan> v872
    let _run_target_args'_v762 = v873 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v876 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v881 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v882 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v883 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v882 
    let _run_target_args'_v881 = v883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v885 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v885 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v889 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v889 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v893 
    #endif
#if FABLE_COMPILER_PYTHON
    let v897 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v897 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v900 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v881 = v900 
    #endif
#else
    let v901 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v881 = v901 
    #endif
    let v902 : System.TimeZoneInfo = _run_target_args'_v881 
    let v908 : (System.DateTime -> System.TimeSpan) = v876 v902
    let v909 : System.TimeSpan = v908 v586
    let _run_target_args'_v762 = v909 
    #endif
#else
    let v910 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v915 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v916 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v917 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v916 
    let _run_target_args'_v915 = v917 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v919 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v923 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v927 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v927 
    #endif
#if FABLE_COMPILER_PYTHON
    let v931 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v931 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v934 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v915 = v934 
    #endif
#else
    let v935 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v915 = v935 
    #endif
    let v936 : System.TimeZoneInfo = _run_target_args'_v915 
    let v942 : (System.DateTime -> System.TimeSpan) = v910 v936
    let v943 : System.TimeSpan = v942 v586
    let _run_target_args'_v762 = v943 
    #endif
    let v944 : System.TimeSpan = _run_target_args'_v762 
    let v954 : (System.TimeSpan -> int32) = _.Hours
    let v955 : int32 = v954 v944
    let v958 : bool = v955 > 0
    let v959 : uint8 =
        if v958 then
            1uy
        else
            0uy
    let v960 : string = method215()
    (* run_target_args'
    let v1014 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1015 : string = "$0.toString($1)"
    let v1016 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1015 
    let _run_target_args'_v1014 = v1016 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1017 : string = "$0.toString($1)"
    let v1018 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1017 
    let _run_target_args'_v1014 = v1018 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1019 : string = "$0.toString($1)"
    let v1020 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1019 
    let _run_target_args'_v1014 = v1020 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1021 : string = v944.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1014 = v1021 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1022 : string = v944.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1014 = v1022 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1024 : string = v944.ToString v960 
    let _run_target_args'_v1014 = v1024 
    #endif
#else
    let v1077 : string = v944.ToString v960 
    let _run_target_args'_v1014 = v1077 
    #endif
    let v1129 : string = _run_target_args'_v1014 
    let v1184 : string = $"{v959}{v1129.[0..1]}{v1129.[3..4]}"
    let v1186 : (System.Guid -> string) = _.ToString()
    let v1187 : string = v1186 v0
    let v1190 : int32 = v723.Length
    let v1191 : int32 = v1184.Length
    let v1192 : int32 = v1190 + v1191
    let v1194 : (string -> int32) = String.length
    let v1195 : int32 = v1194 v1187
    let v1203 : int32 = v1192 |> int32 
    let v1216 : int32 = v1195 |> int32 
    let v1224 : int32 = v1216 - 1
    let v1226 : string = v1187.[int v1203..int v1224]
    let v1230 : string = $"{v723}{v1184}{v1226}"
    (* run_target_args'
    let v1235 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1237 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1237 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1241 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1245 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1235 = v1245 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1249 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1249 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1253 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1253 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1257 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1257 
    #endif
#else
    let v1261 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1261 
    #endif
    let v1264 : System.Guid = _run_target_args'_v1235 
    let _run_target_args'_v569 = v1264 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1271 : System.DateTime = System.DateTime.UnixEpoch
    let v1275 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1276 : System.DateTime = v1275 v1271
    let v1280 : System.DateTimeKind = System.DateTimeKind.Local
    let v1281 : System.DateTime = System.DateTime.SpecifyKind (v1, v1280)
    let v1285 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1286 : System.DateTime = v1285 v1281
    (* run_target_args'
    let v1292 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1293 : (System.DateTime -> int64) = _.Ticks
    let v1294 : int64 = v1293 v1286
    let _run_target_args'_v1292 = v1294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1295 : (System.DateTime -> int64) = _.Ticks
    let v1296 : int64 = v1295 v1286
    let _run_target_args'_v1292 = v1296 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1298 : int64 = null |> unbox<int64>
    let _run_target_args'_v1292 = v1298 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1301 : (System.DateTime -> int64) = _.Ticks
    let v1302 : int64 = v1301 v1286
    let _run_target_args'_v1292 = v1302 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1303 : (System.DateTime -> int64) = _.Ticks
    let v1304 : int64 = v1303 v1286
    let _run_target_args'_v1292 = v1304 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1305 : (System.DateTime -> int64) = _.Ticks
    let v1306 : int64 = v1305 v1286
    let _run_target_args'_v1292 = v1306 
    #endif
#else
    let v1307 : (System.DateTime -> int64) = _.Ticks
    let v1308 : int64 = v1307 v1286
    let _run_target_args'_v1292 = v1308 
    #endif
    let v1309 : int64 = _run_target_args'_v1292 
    (* run_target_args'
    let v1332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1333 : (System.DateTime -> int64) = _.Ticks
    let v1334 : int64 = v1333 v1276
    let _run_target_args'_v1332 = v1334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1335 : (System.DateTime -> int64) = _.Ticks
    let v1336 : int64 = v1335 v1276
    let _run_target_args'_v1332 = v1336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1338 : int64 = null |> unbox<int64>
    let _run_target_args'_v1332 = v1338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1341 : (System.DateTime -> int64) = _.Ticks
    let v1342 : int64 = v1341 v1276
    let _run_target_args'_v1332 = v1342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1343 : (System.DateTime -> int64) = _.Ticks
    let v1344 : int64 = v1343 v1276
    let _run_target_args'_v1332 = v1344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1345 : (System.DateTime -> int64) = _.Ticks
    let v1346 : int64 = v1345 v1276
    let _run_target_args'_v1332 = v1346 
    #endif
#else
    let v1347 : (System.DateTime -> int64) = _.Ticks
    let v1348 : int64 = v1347 v1276
    let _run_target_args'_v1332 = v1348 
    #endif
    let v1349 : int64 = _run_target_args'_v1332 
    let v1370 : int64 = v1309 |> int64 
    let v1374 : int64 = v1349 |> int64 
    let v1377 : int64 = v1370 - v1374
    let v1378 : int64 = v1377 / 10L
    let v1379 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1380 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1378 v1379 
    let v1383 : (chrono_DateTime<chrono_Utc> -> US43) = method214()
    let v1384 : US43 option = v1380 |> Option.map v1383 
    let v1398 : US43 = US43_1
    let v1399 : US43 = v1384 |> Option.defaultValue v1398 
    let v1419 : US5 =
        match v1399 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v1403) -> (* Some *)
            let v1404 : string = "$0.naive_utc()"
            let v1405 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1403 v1404 
            let v1406 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1407 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
            let v1408 : string = "%Y%m%d-%H%M-%S%f"
            let v1409 : string = "r#\"" + v1408 + "\"#"
            let v1410 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1409 
            let v1411 : string = "$0.format($1).to_string()"
            let v1412 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1407, v1410) v1411 
            let v1413 : string = "fable_library_rust::String_::fromString($0)"
            let v1414 : string = Fable.Core.RustInterop.emitRustExpr v1412 v1413 
            let v1415 : string = $"{v1414.[0..17]}-{v1414.[18..21]}-{v1414.[22]}"
            US5_0(v1415)
    let v1423 : string =
        match v1419 with
        | US5_1 -> (* None *)
            let v1421 : string = ""
            v1421
        | US5_0(v1420) -> (* Some *)
            v1420
    (* run_target_args'
    let v1428 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1429 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1430 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1429 
    let _run_target_args'_v1428 = v1430 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1432 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1436 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1436 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1440 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1444 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1447 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1428 = v1447 
    #endif
#else
    let v1448 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1428 = v1448 
    #endif
    let v1449 : System.TimeZoneInfo = _run_target_args'_v1428 
    (* run_target_args'
    let v1462 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1466 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1467 : (System.DateTime -> int64) = _.Ticks
    let v1468 : int64 = v1467 v1286
    let _run_target_args'_v1466 = v1468 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1469 : (System.DateTime -> int64) = _.Ticks
    let v1470 : int64 = v1469 v1286
    let _run_target_args'_v1466 = v1470 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1472 : int64 = null |> unbox<int64>
    let _run_target_args'_v1466 = v1472 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1475 : (System.DateTime -> int64) = _.Ticks
    let v1476 : int64 = v1475 v1286
    let _run_target_args'_v1466 = v1476 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1477 : (System.DateTime -> int64) = _.Ticks
    let v1478 : int64 = v1477 v1286
    let _run_target_args'_v1466 = v1478 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1479 : (System.DateTime -> int64) = _.Ticks
    let v1480 : int64 = v1479 v1286
    let _run_target_args'_v1466 = v1480 
    #endif
#else
    let v1481 : (System.DateTime -> int64) = _.Ticks
    let v1482 : int64 = v1481 v1286
    let _run_target_args'_v1466 = v1482 
    #endif
    let v1483 : int64 = _run_target_args'_v1466 
    let v1503 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1504 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1286, v1483) v1503 
    let v1506 : System.TimeSpan = v1504 |> System.TimeSpan 
    let _run_target_args'_v1462 = v1506 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1512 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1513 : (System.DateTime -> int64) = _.Ticks
    let v1514 : int64 = v1513 v1286
    let _run_target_args'_v1512 = v1514 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1515 : (System.DateTime -> int64) = _.Ticks
    let v1516 : int64 = v1515 v1286
    let _run_target_args'_v1512 = v1516 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1518 : int64 = null |> unbox<int64>
    let _run_target_args'_v1512 = v1518 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1521 : (System.DateTime -> int64) = _.Ticks
    let v1522 : int64 = v1521 v1286
    let _run_target_args'_v1512 = v1522 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1523 : (System.DateTime -> int64) = _.Ticks
    let v1524 : int64 = v1523 v1286
    let _run_target_args'_v1512 = v1524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1525 : (System.DateTime -> int64) = _.Ticks
    let v1526 : int64 = v1525 v1286
    let _run_target_args'_v1512 = v1526 
    #endif
#else
    let v1527 : (System.DateTime -> int64) = _.Ticks
    let v1528 : int64 = v1527 v1286
    let _run_target_args'_v1512 = v1528 
    #endif
    let v1529 : int64 = _run_target_args'_v1512 
    let v1549 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1550 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1286, v1529) v1549 
    let v1552 : System.TimeSpan = v1550 |> System.TimeSpan 
    let _run_target_args'_v1462 = v1552 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1556 : US3 = US3_2
    let v1557 : US4 = US4_3(v1556)
    let v1558 : string = $"date_time.get_utc_offset / target: {v1557}"
    let v1559 : System.TimeSpan = failwith<System.TimeSpan> v1558
    let _run_target_args'_v1462 = v1559 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1563 : US3 = US3_0
    let v1564 : US4 = US4_4(v1563)
    let v1565 : string = $"date_time.get_utc_offset / target: {v1564}"
    let v1566 : System.TimeSpan = failwith<System.TimeSpan> v1565
    let _run_target_args'_v1462 = v1566 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1570 : US3 = US3_0
    let v1571 : US4 = US4_5(v1570)
    let v1572 : string = $"date_time.get_utc_offset / target: {v1571}"
    let v1573 : System.TimeSpan = failwith<System.TimeSpan> v1572
    let _run_target_args'_v1462 = v1573 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1576 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1581 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1582 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1583 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1582 
    let _run_target_args'_v1581 = v1583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1585 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1585 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1589 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1589 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1597 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1600 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1581 = v1600 
    #endif
#else
    let v1601 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1581 = v1601 
    #endif
    let v1602 : System.TimeZoneInfo = _run_target_args'_v1581 
    let v1608 : (System.DateTime -> System.TimeSpan) = v1576 v1602
    let v1609 : System.TimeSpan = v1608 v1286
    let _run_target_args'_v1462 = v1609 
    #endif
#else
    let v1610 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1615 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1616 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1617 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1616 
    let _run_target_args'_v1615 = v1617 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1619 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1619 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1623 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1623 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1627 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1627 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1631 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1631 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1634 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1634 
    #endif
#else
    let v1635 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1635 
    #endif
    let v1636 : System.TimeZoneInfo = _run_target_args'_v1615 
    let v1642 : (System.DateTime -> System.TimeSpan) = v1610 v1636
    let v1643 : System.TimeSpan = v1642 v1286
    let _run_target_args'_v1462 = v1643 
    #endif
    let v1644 : System.TimeSpan = _run_target_args'_v1462 
    let v1654 : (System.TimeSpan -> int32) = _.Hours
    let v1655 : int32 = v1654 v1644
    let v1658 : bool = v1655 > 0
    let v1659 : uint8 =
        if v1658 then
            1uy
        else
            0uy
    let v1660 : string = method215()
    (* run_target_args'
    let v1714 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1715 : string = "$0.toString($1)"
    let v1716 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1715 
    let _run_target_args'_v1714 = v1716 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1717 : string = "$0.toString($1)"
    let v1718 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1717 
    let _run_target_args'_v1714 = v1718 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1719 : string = "$0.toString($1)"
    let v1720 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1719 
    let _run_target_args'_v1714 = v1720 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1721 : string = v1644.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1714 = v1721 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1722 : string = v1644.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1714 = v1722 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1724 : string = v1644.ToString v1660 
    let _run_target_args'_v1714 = v1724 
    #endif
#else
    let v1777 : string = v1644.ToString v1660 
    let _run_target_args'_v1714 = v1777 
    #endif
    let v1829 : string = _run_target_args'_v1714 
    let v1884 : string = $"{v1659}{v1829.[0..1]}{v1829.[3..4]}"
    let v1886 : (System.Guid -> string) = _.ToString()
    let v1887 : string = v1886 v0
    let v1890 : int32 = v1423.Length
    let v1891 : int32 = v1884.Length
    let v1892 : int32 = v1890 + v1891
    let v1894 : (string -> int32) = String.length
    let v1895 : int32 = v1894 v1887
    let v1903 : int32 = v1892 |> int32 
    let v1916 : int32 = v1895 |> int32 
    let v1924 : int32 = v1916 - 1
    let v1926 : string = v1887.[int v1903..int v1924]
    let v1930 : string = $"{v1423}{v1884}{v1926}"
    (* run_target_args'
    let v1935 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1937 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1937 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1941 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1941 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1945 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1935 = v1945 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1949 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1949 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1953 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1953 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1957 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1957 
    #endif
#else
    let v1961 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1961 
    #endif
    let v1964 : System.Guid = _run_target_args'_v1935 
    let _run_target_args'_v569 = v1964 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1971 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v569 = v1971 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1974 : string = method216()
    let v1976 : bool = v1974 = ""
    let v1978 : string =
        if v1976 then
            let v1977 : string = "M-d-y hh:mm:ss tt"
            v1977
        else
            v1974
    let v1979 : (string -> string) = v1.ToString
    let v1980 : string = v1979 v1978
    (* run_target_args'
    let v1999 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2000 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2001 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2000 
    let _run_target_args'_v1999 = v2001 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2003 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2003 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2007 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2007 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2011 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2011 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2015 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2015 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2018 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2018 
    #endif
#else
    let v2019 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2019 
    #endif
    let v2020 : System.TimeZoneInfo = _run_target_args'_v1999 
    (* run_target_args'
    let v2033 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2037 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2038 : (System.DateTime -> int64) = _.Ticks
    let v2039 : int64 = v2038 v1
    let _run_target_args'_v2037 = v2039 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2040 : (System.DateTime -> int64) = _.Ticks
    let v2041 : int64 = v2040 v1
    let _run_target_args'_v2037 = v2041 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2043 : int64 = null |> unbox<int64>
    let _run_target_args'_v2037 = v2043 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2046 : (System.DateTime -> int64) = _.Ticks
    let v2047 : int64 = v2046 v1
    let _run_target_args'_v2037 = v2047 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2048 : (System.DateTime -> int64) = _.Ticks
    let v2049 : int64 = v2048 v1
    let _run_target_args'_v2037 = v2049 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2050 : (System.DateTime -> int64) = _.Ticks
    let v2051 : int64 = v2050 v1
    let _run_target_args'_v2037 = v2051 
    #endif
#else
    let v2052 : (System.DateTime -> int64) = _.Ticks
    let v2053 : int64 = v2052 v1
    let _run_target_args'_v2037 = v2053 
    #endif
    let v2054 : int64 = _run_target_args'_v2037 
    let v2074 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2075 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2054) v2074 
    let v2077 : System.TimeSpan = v2075 |> System.TimeSpan 
    let _run_target_args'_v2033 = v2077 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2083 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2084 : (System.DateTime -> int64) = _.Ticks
    let v2085 : int64 = v2084 v1
    let _run_target_args'_v2083 = v2085 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2086 : (System.DateTime -> int64) = _.Ticks
    let v2087 : int64 = v2086 v1
    let _run_target_args'_v2083 = v2087 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2089 : int64 = null |> unbox<int64>
    let _run_target_args'_v2083 = v2089 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2092 : (System.DateTime -> int64) = _.Ticks
    let v2093 : int64 = v2092 v1
    let _run_target_args'_v2083 = v2093 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2094 : (System.DateTime -> int64) = _.Ticks
    let v2095 : int64 = v2094 v1
    let _run_target_args'_v2083 = v2095 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2096 : (System.DateTime -> int64) = _.Ticks
    let v2097 : int64 = v2096 v1
    let _run_target_args'_v2083 = v2097 
    #endif
#else
    let v2098 : (System.DateTime -> int64) = _.Ticks
    let v2099 : int64 = v2098 v1
    let _run_target_args'_v2083 = v2099 
    #endif
    let v2100 : int64 = _run_target_args'_v2083 
    let v2120 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2121 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2100) v2120 
    let v2123 : System.TimeSpan = v2121 |> System.TimeSpan 
    let _run_target_args'_v2033 = v2123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2127 : US3 = US3_2
    let v2128 : US4 = US4_3(v2127)
    let v2129 : string = $"date_time.get_utc_offset / target: {v2128}"
    let v2130 : System.TimeSpan = failwith<System.TimeSpan> v2129
    let _run_target_args'_v2033 = v2130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2134 : US3 = US3_0
    let v2135 : US4 = US4_4(v2134)
    let v2136 : string = $"date_time.get_utc_offset / target: {v2135}"
    let v2137 : System.TimeSpan = failwith<System.TimeSpan> v2136
    let _run_target_args'_v2033 = v2137 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2141 : US3 = US3_0
    let v2142 : US4 = US4_5(v2141)
    let v2143 : string = $"date_time.get_utc_offset / target: {v2142}"
    let v2144 : System.TimeSpan = failwith<System.TimeSpan> v2143
    let _run_target_args'_v2033 = v2144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2147 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2152 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2153 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2154 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2153 
    let _run_target_args'_v2152 = v2154 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2156 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2160 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2164 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2168 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2168 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2171 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2152 = v2171 
    #endif
#else
    let v2172 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2152 = v2172 
    #endif
    let v2173 : System.TimeZoneInfo = _run_target_args'_v2152 
    let v2179 : (System.DateTime -> System.TimeSpan) = v2147 v2173
    let v2180 : System.TimeSpan = v2179 v1
    let _run_target_args'_v2033 = v2180 
    #endif
#else
    let v2181 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2186 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2187 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2188 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2187 
    let _run_target_args'_v2186 = v2188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2190 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2190 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2194 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2194 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2198 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2202 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2205 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2186 = v2205 
    #endif
#else
    let v2206 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2186 = v2206 
    #endif
    let v2207 : System.TimeZoneInfo = _run_target_args'_v2186 
    let v2213 : (System.DateTime -> System.TimeSpan) = v2181 v2207
    let v2214 : System.TimeSpan = v2213 v1
    let _run_target_args'_v2033 = v2214 
    #endif
    let v2215 : System.TimeSpan = _run_target_args'_v2033 
    let v2225 : (System.TimeSpan -> int32) = _.Hours
    let v2226 : int32 = v2225 v2215
    let v2229 : bool = v2226 > 0
    let v2230 : uint8 =
        if v2229 then
            1uy
        else
            0uy
    let v2231 : string = method217()
    (* run_target_args'
    let v2285 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2286 : string = "$0.toString($1)"
    let v2287 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2286 
    let _run_target_args'_v2285 = v2287 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2288 : string = "$0.toString($1)"
    let v2289 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2288 
    let _run_target_args'_v2285 = v2289 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2290 : string = "$0.toString($1)"
    let v2291 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2290 
    let _run_target_args'_v2285 = v2291 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2292 : string = v2215.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2285 = v2292 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2293 : string = v2215.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2285 = v2293 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2295 : string = v2215.ToString v2231 
    let _run_target_args'_v2285 = v2295 
    #endif
#else
    let v2348 : string = v2215.ToString v2231 
    let _run_target_args'_v2285 = v2348 
    #endif
    let v2400 : string = _run_target_args'_v2285 
    let v2455 : string = $"{v2230}{v2400}"
    let v2457 : (System.Guid -> string) = _.ToString()
    let v2458 : string = v2457 v0
    let v2461 : int32 = v1980.Length
    let v2462 : int32 = v2455.Length
    let v2463 : int32 = v2461 + v2462
    let v2465 : (string -> int32) = String.length
    let v2466 : int32 = v2465 v2458
    let v2474 : int32 = v2463 |> int32 
    let v2487 : int32 = v2466 |> int32 
    let v2495 : int32 = v2487 - 1
    let v2497 : string = v2458.[int v2474..int v2495]
    let v2501 : string = $"{v1980}{v2455}{v2497}"
    (* run_target_args'
    let v2506 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2508 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2508 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2512 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2512 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2516 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2506 = v2516 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2520 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2520 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2524 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2528 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2528 
    #endif
#else
    let v2532 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2532 
    #endif
    let v2535 : System.Guid = _run_target_args'_v2506 
    let _run_target_args'_v569 = v2535 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2541 : string = method216()
    let v2543 : bool = v2541 = ""
    let v2545 : string =
        if v2543 then
            let v2544 : string = "M-d-y hh:mm:ss tt"
            v2544
        else
            v2541
    let v2546 : (string -> string) = v1.ToString
    let v2547 : string = v2546 v2545
    (* run_target_args'
    let v2566 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2567 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2568 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2567 
    let _run_target_args'_v2566 = v2568 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2570 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2570 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2574 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2574 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2578 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2582 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2582 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2585 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2566 = v2585 
    #endif
#else
    let v2586 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2566 = v2586 
    #endif
    let v2587 : System.TimeZoneInfo = _run_target_args'_v2566 
    (* run_target_args'
    let v2600 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2604 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2605 : (System.DateTime -> int64) = _.Ticks
    let v2606 : int64 = v2605 v1
    let _run_target_args'_v2604 = v2606 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2607 : (System.DateTime -> int64) = _.Ticks
    let v2608 : int64 = v2607 v1
    let _run_target_args'_v2604 = v2608 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2610 : int64 = null |> unbox<int64>
    let _run_target_args'_v2604 = v2610 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2613 : (System.DateTime -> int64) = _.Ticks
    let v2614 : int64 = v2613 v1
    let _run_target_args'_v2604 = v2614 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2615 : (System.DateTime -> int64) = _.Ticks
    let v2616 : int64 = v2615 v1
    let _run_target_args'_v2604 = v2616 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2617 : (System.DateTime -> int64) = _.Ticks
    let v2618 : int64 = v2617 v1
    let _run_target_args'_v2604 = v2618 
    #endif
#else
    let v2619 : (System.DateTime -> int64) = _.Ticks
    let v2620 : int64 = v2619 v1
    let _run_target_args'_v2604 = v2620 
    #endif
    let v2621 : int64 = _run_target_args'_v2604 
    let v2641 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2642 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2621) v2641 
    let v2644 : System.TimeSpan = v2642 |> System.TimeSpan 
    let _run_target_args'_v2600 = v2644 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2650 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2651 : (System.DateTime -> int64) = _.Ticks
    let v2652 : int64 = v2651 v1
    let _run_target_args'_v2650 = v2652 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2653 : (System.DateTime -> int64) = _.Ticks
    let v2654 : int64 = v2653 v1
    let _run_target_args'_v2650 = v2654 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2656 : int64 = null |> unbox<int64>
    let _run_target_args'_v2650 = v2656 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2659 : (System.DateTime -> int64) = _.Ticks
    let v2660 : int64 = v2659 v1
    let _run_target_args'_v2650 = v2660 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2661 : (System.DateTime -> int64) = _.Ticks
    let v2662 : int64 = v2661 v1
    let _run_target_args'_v2650 = v2662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2663 : (System.DateTime -> int64) = _.Ticks
    let v2664 : int64 = v2663 v1
    let _run_target_args'_v2650 = v2664 
    #endif
#else
    let v2665 : (System.DateTime -> int64) = _.Ticks
    let v2666 : int64 = v2665 v1
    let _run_target_args'_v2650 = v2666 
    #endif
    let v2667 : int64 = _run_target_args'_v2650 
    let v2687 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2688 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2667) v2687 
    let v2690 : System.TimeSpan = v2688 |> System.TimeSpan 
    let _run_target_args'_v2600 = v2690 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2694 : US3 = US3_2
    let v2695 : US4 = US4_3(v2694)
    let v2696 : string = $"date_time.get_utc_offset / target: {v2695}"
    let v2697 : System.TimeSpan = failwith<System.TimeSpan> v2696
    let _run_target_args'_v2600 = v2697 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2701 : US3 = US3_0
    let v2702 : US4 = US4_4(v2701)
    let v2703 : string = $"date_time.get_utc_offset / target: {v2702}"
    let v2704 : System.TimeSpan = failwith<System.TimeSpan> v2703
    let _run_target_args'_v2600 = v2704 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2708 : US3 = US3_0
    let v2709 : US4 = US4_5(v2708)
    let v2710 : string = $"date_time.get_utc_offset / target: {v2709}"
    let v2711 : System.TimeSpan = failwith<System.TimeSpan> v2710
    let _run_target_args'_v2600 = v2711 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2714 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2719 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2720 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2721 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2720 
    let _run_target_args'_v2719 = v2721 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2723 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2723 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2727 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2727 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2731 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2731 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2735 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2735 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2738 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2719 = v2738 
    #endif
#else
    let v2739 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2719 = v2739 
    #endif
    let v2740 : System.TimeZoneInfo = _run_target_args'_v2719 
    let v2746 : (System.DateTime -> System.TimeSpan) = v2714 v2740
    let v2747 : System.TimeSpan = v2746 v1
    let _run_target_args'_v2600 = v2747 
    #endif
#else
    let v2748 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2753 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2754 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2755 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2754 
    let _run_target_args'_v2753 = v2755 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2757 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2757 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2761 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2761 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2765 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2765 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2769 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2769 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2772 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2753 = v2772 
    #endif
#else
    let v2773 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2753 = v2773 
    #endif
    let v2774 : System.TimeZoneInfo = _run_target_args'_v2753 
    let v2780 : (System.DateTime -> System.TimeSpan) = v2748 v2774
    let v2781 : System.TimeSpan = v2780 v1
    let _run_target_args'_v2600 = v2781 
    #endif
    let v2782 : System.TimeSpan = _run_target_args'_v2600 
    let v2792 : (System.TimeSpan -> int32) = _.Hours
    let v2793 : int32 = v2792 v2782
    let v2796 : bool = v2793 > 0
    let v2797 : uint8 =
        if v2796 then
            1uy
        else
            0uy
    let v2798 : string = method217()
    (* run_target_args'
    let v2852 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2853 : string = "$0.toString($1)"
    let v2854 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2853 
    let _run_target_args'_v2852 = v2854 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2855 : string = "$0.toString($1)"
    let v2856 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2855 
    let _run_target_args'_v2852 = v2856 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2857 : string = "$0.toString($1)"
    let v2858 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2857 
    let _run_target_args'_v2852 = v2858 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2859 : string = v2782.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2852 = v2859 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2860 : string = v2782.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2852 = v2860 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2862 : string = v2782.ToString v2798 
    let _run_target_args'_v2852 = v2862 
    #endif
#else
    let v2915 : string = v2782.ToString v2798 
    let _run_target_args'_v2852 = v2915 
    #endif
    let v2967 : string = _run_target_args'_v2852 
    let v3022 : string = $"{v2797}{v2967}"
    let v3024 : (System.Guid -> string) = _.ToString()
    let v3025 : string = v3024 v0
    let v3028 : int32 = v2547.Length
    let v3029 : int32 = v3022.Length
    let v3030 : int32 = v3028 + v3029
    let v3032 : (string -> int32) = String.length
    let v3033 : int32 = v3032 v3025
    let v3041 : int32 = v3030 |> int32 
    let v3054 : int32 = v3033 |> int32 
    let v3062 : int32 = v3054 - 1
    let v3064 : string = v3025.[int v3041..int v3062]
    let v3068 : string = $"{v2547}{v3022}{v3064}"
    (* run_target_args'
    let v3073 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3075 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3075 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3079 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3079 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3083 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3073 = v3083 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3087 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3087 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3091 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3095 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3095 
    #endif
#else
    let v3099 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3099 
    #endif
    let v3102 : System.Guid = _run_target_args'_v3073 
    let _run_target_args'_v569 = v3102 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3108 : string = method216()
    let v3110 : bool = v3108 = ""
    let v3112 : string =
        if v3110 then
            let v3111 : string = "M-d-y hh:mm:ss tt"
            v3111
        else
            v3108
    let v3113 : (string -> string) = v1.ToString
    let v3114 : string = v3113 v3112
    (* run_target_args'
    let v3133 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3134 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3135 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3134 
    let _run_target_args'_v3133 = v3135 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3137 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3145 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3145 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3149 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3149 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3152 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3133 = v3152 
    #endif
#else
    let v3153 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3133 = v3153 
    #endif
    let v3154 : System.TimeZoneInfo = _run_target_args'_v3133 
    (* run_target_args'
    let v3167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3171 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3172 : (System.DateTime -> int64) = _.Ticks
    let v3173 : int64 = v3172 v1
    let _run_target_args'_v3171 = v3173 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3174 : (System.DateTime -> int64) = _.Ticks
    let v3175 : int64 = v3174 v1
    let _run_target_args'_v3171 = v3175 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3177 : int64 = null |> unbox<int64>
    let _run_target_args'_v3171 = v3177 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3180 : (System.DateTime -> int64) = _.Ticks
    let v3181 : int64 = v3180 v1
    let _run_target_args'_v3171 = v3181 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3182 : (System.DateTime -> int64) = _.Ticks
    let v3183 : int64 = v3182 v1
    let _run_target_args'_v3171 = v3183 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3184 : (System.DateTime -> int64) = _.Ticks
    let v3185 : int64 = v3184 v1
    let _run_target_args'_v3171 = v3185 
    #endif
#else
    let v3186 : (System.DateTime -> int64) = _.Ticks
    let v3187 : int64 = v3186 v1
    let _run_target_args'_v3171 = v3187 
    #endif
    let v3188 : int64 = _run_target_args'_v3171 
    let v3208 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3209 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3188) v3208 
    let v3211 : System.TimeSpan = v3209 |> System.TimeSpan 
    let _run_target_args'_v3167 = v3211 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3217 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3218 : (System.DateTime -> int64) = _.Ticks
    let v3219 : int64 = v3218 v1
    let _run_target_args'_v3217 = v3219 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3220 : (System.DateTime -> int64) = _.Ticks
    let v3221 : int64 = v3220 v1
    let _run_target_args'_v3217 = v3221 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3223 : int64 = null |> unbox<int64>
    let _run_target_args'_v3217 = v3223 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3226 : (System.DateTime -> int64) = _.Ticks
    let v3227 : int64 = v3226 v1
    let _run_target_args'_v3217 = v3227 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3228 : (System.DateTime -> int64) = _.Ticks
    let v3229 : int64 = v3228 v1
    let _run_target_args'_v3217 = v3229 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3230 : (System.DateTime -> int64) = _.Ticks
    let v3231 : int64 = v3230 v1
    let _run_target_args'_v3217 = v3231 
    #endif
#else
    let v3232 : (System.DateTime -> int64) = _.Ticks
    let v3233 : int64 = v3232 v1
    let _run_target_args'_v3217 = v3233 
    #endif
    let v3234 : int64 = _run_target_args'_v3217 
    let v3254 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3255 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3234) v3254 
    let v3257 : System.TimeSpan = v3255 |> System.TimeSpan 
    let _run_target_args'_v3167 = v3257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3261 : US3 = US3_2
    let v3262 : US4 = US4_3(v3261)
    let v3263 : string = $"date_time.get_utc_offset / target: {v3262}"
    let v3264 : System.TimeSpan = failwith<System.TimeSpan> v3263
    let _run_target_args'_v3167 = v3264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3268 : US3 = US3_0
    let v3269 : US4 = US4_4(v3268)
    let v3270 : string = $"date_time.get_utc_offset / target: {v3269}"
    let v3271 : System.TimeSpan = failwith<System.TimeSpan> v3270
    let _run_target_args'_v3167 = v3271 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3275 : US3 = US3_0
    let v3276 : US4 = US4_5(v3275)
    let v3277 : string = $"date_time.get_utc_offset / target: {v3276}"
    let v3278 : System.TimeSpan = failwith<System.TimeSpan> v3277
    let _run_target_args'_v3167 = v3278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3281 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3286 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3287 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3288 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3287 
    let _run_target_args'_v3286 = v3288 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3290 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3294 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3294 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3298 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3298 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3302 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3302 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3305 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3286 = v3305 
    #endif
#else
    let v3306 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3286 = v3306 
    #endif
    let v3307 : System.TimeZoneInfo = _run_target_args'_v3286 
    let v3313 : (System.DateTime -> System.TimeSpan) = v3281 v3307
    let v3314 : System.TimeSpan = v3313 v1
    let _run_target_args'_v3167 = v3314 
    #endif
#else
    let v3315 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3320 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3321 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3322 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3321 
    let _run_target_args'_v3320 = v3322 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3324 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3328 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3332 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3332 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3336 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3336 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3339 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3320 = v3339 
    #endif
#else
    let v3340 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3320 = v3340 
    #endif
    let v3341 : System.TimeZoneInfo = _run_target_args'_v3320 
    let v3347 : (System.DateTime -> System.TimeSpan) = v3315 v3341
    let v3348 : System.TimeSpan = v3347 v1
    let _run_target_args'_v3167 = v3348 
    #endif
    let v3349 : System.TimeSpan = _run_target_args'_v3167 
    let v3359 : (System.TimeSpan -> int32) = _.Hours
    let v3360 : int32 = v3359 v3349
    let v3363 : bool = v3360 > 0
    let v3364 : uint8 =
        if v3363 then
            1uy
        else
            0uy
    let v3365 : string = method217()
    (* run_target_args'
    let v3419 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3420 : string = "$0.toString($1)"
    let v3421 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3420 
    let _run_target_args'_v3419 = v3421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3422 : string = "$0.toString($1)"
    let v3423 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3422 
    let _run_target_args'_v3419 = v3423 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3424 : string = "$0.toString($1)"
    let v3425 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3424 
    let _run_target_args'_v3419 = v3425 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3426 : string = v3349.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3419 = v3426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3427 : string = v3349.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3419 = v3427 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3429 : string = v3349.ToString v3365 
    let _run_target_args'_v3419 = v3429 
    #endif
#else
    let v3482 : string = v3349.ToString v3365 
    let _run_target_args'_v3419 = v3482 
    #endif
    let v3534 : string = _run_target_args'_v3419 
    let v3589 : string = $"{v3364}{v3534}"
    let v3591 : (System.Guid -> string) = _.ToString()
    let v3592 : string = v3591 v0
    let v3595 : int32 = v3114.Length
    let v3596 : int32 = v3589.Length
    let v3597 : int32 = v3595 + v3596
    let v3599 : (string -> int32) = String.length
    let v3600 : int32 = v3599 v3592
    let v3608 : int32 = v3597 |> int32 
    let v3621 : int32 = v3600 |> int32 
    let v3629 : int32 = v3621 - 1
    let v3631 : string = v3592.[int v3608..int v3629]
    let v3635 : string = $"{v3114}{v3589}{v3631}"
    (* run_target_args'
    let v3640 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3642 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3646 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3650 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3640 = v3650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3654 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3654 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3658 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3658 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3662 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3662 
    #endif
#else
    let v3666 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3666 
    #endif
    let v3669 : System.Guid = _run_target_args'_v3640 
    let _run_target_args'_v569 = v3669 
    #endif
#else
    let v3675 : string = method216()
    let v3677 : bool = v3675 = ""
    let v3679 : string =
        if v3677 then
            let v3678 : string = "M-d-y hh:mm:ss tt"
            v3678
        else
            v3675
    let v3680 : (string -> string) = v1.ToString
    let v3681 : string = v3680 v3679
    (* run_target_args'
    let v3700 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3701 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3702 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3701 
    let _run_target_args'_v3700 = v3702 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3704 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3704 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3708 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3708 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3712 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3712 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3716 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3716 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3719 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3700 = v3719 
    #endif
#else
    let v3720 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3700 = v3720 
    #endif
    let v3721 : System.TimeZoneInfo = _run_target_args'_v3700 
    (* run_target_args'
    let v3734 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3738 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3739 : (System.DateTime -> int64) = _.Ticks
    let v3740 : int64 = v3739 v1
    let _run_target_args'_v3738 = v3740 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3741 : (System.DateTime -> int64) = _.Ticks
    let v3742 : int64 = v3741 v1
    let _run_target_args'_v3738 = v3742 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3744 : int64 = null |> unbox<int64>
    let _run_target_args'_v3738 = v3744 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3747 : (System.DateTime -> int64) = _.Ticks
    let v3748 : int64 = v3747 v1
    let _run_target_args'_v3738 = v3748 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3749 : (System.DateTime -> int64) = _.Ticks
    let v3750 : int64 = v3749 v1
    let _run_target_args'_v3738 = v3750 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3751 : (System.DateTime -> int64) = _.Ticks
    let v3752 : int64 = v3751 v1
    let _run_target_args'_v3738 = v3752 
    #endif
#else
    let v3753 : (System.DateTime -> int64) = _.Ticks
    let v3754 : int64 = v3753 v1
    let _run_target_args'_v3738 = v3754 
    #endif
    let v3755 : int64 = _run_target_args'_v3738 
    let v3775 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3776 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3755) v3775 
    let v3778 : System.TimeSpan = v3776 |> System.TimeSpan 
    let _run_target_args'_v3734 = v3778 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3784 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3785 : (System.DateTime -> int64) = _.Ticks
    let v3786 : int64 = v3785 v1
    let _run_target_args'_v3784 = v3786 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3787 : (System.DateTime -> int64) = _.Ticks
    let v3788 : int64 = v3787 v1
    let _run_target_args'_v3784 = v3788 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3790 : int64 = null |> unbox<int64>
    let _run_target_args'_v3784 = v3790 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3793 : (System.DateTime -> int64) = _.Ticks
    let v3794 : int64 = v3793 v1
    let _run_target_args'_v3784 = v3794 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3795 : (System.DateTime -> int64) = _.Ticks
    let v3796 : int64 = v3795 v1
    let _run_target_args'_v3784 = v3796 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3797 : (System.DateTime -> int64) = _.Ticks
    let v3798 : int64 = v3797 v1
    let _run_target_args'_v3784 = v3798 
    #endif
#else
    let v3799 : (System.DateTime -> int64) = _.Ticks
    let v3800 : int64 = v3799 v1
    let _run_target_args'_v3784 = v3800 
    #endif
    let v3801 : int64 = _run_target_args'_v3784 
    let v3821 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3822 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3801) v3821 
    let v3824 : System.TimeSpan = v3822 |> System.TimeSpan 
    let _run_target_args'_v3734 = v3824 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3828 : US3 = US3_2
    let v3829 : US4 = US4_3(v3828)
    let v3830 : string = $"date_time.get_utc_offset / target: {v3829}"
    let v3831 : System.TimeSpan = failwith<System.TimeSpan> v3830
    let _run_target_args'_v3734 = v3831 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3835 : US3 = US3_0
    let v3836 : US4 = US4_4(v3835)
    let v3837 : string = $"date_time.get_utc_offset / target: {v3836}"
    let v3838 : System.TimeSpan = failwith<System.TimeSpan> v3837
    let _run_target_args'_v3734 = v3838 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3842 : US3 = US3_0
    let v3843 : US4 = US4_5(v3842)
    let v3844 : string = $"date_time.get_utc_offset / target: {v3843}"
    let v3845 : System.TimeSpan = failwith<System.TimeSpan> v3844
    let _run_target_args'_v3734 = v3845 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3848 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3853 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3854 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3855 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3854 
    let _run_target_args'_v3853 = v3855 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3857 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3857 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3861 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3861 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3865 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3865 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3869 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3869 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3872 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3853 = v3872 
    #endif
#else
    let v3873 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3853 = v3873 
    #endif
    let v3874 : System.TimeZoneInfo = _run_target_args'_v3853 
    let v3880 : (System.DateTime -> System.TimeSpan) = v3848 v3874
    let v3881 : System.TimeSpan = v3880 v1
    let _run_target_args'_v3734 = v3881 
    #endif
#else
    let v3882 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3887 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3888 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3889 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3888 
    let _run_target_args'_v3887 = v3889 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3891 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3891 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3895 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3895 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3899 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3899 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3903 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3903 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3906 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3887 = v3906 
    #endif
#else
    let v3907 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3887 = v3907 
    #endif
    let v3908 : System.TimeZoneInfo = _run_target_args'_v3887 
    let v3914 : (System.DateTime -> System.TimeSpan) = v3882 v3908
    let v3915 : System.TimeSpan = v3914 v1
    let _run_target_args'_v3734 = v3915 
    #endif
    let v3916 : System.TimeSpan = _run_target_args'_v3734 
    let v3926 : (System.TimeSpan -> int32) = _.Hours
    let v3927 : int32 = v3926 v3916
    let v3930 : bool = v3927 > 0
    let v3931 : uint8 =
        if v3930 then
            1uy
        else
            0uy
    let v3932 : string = method217()
    (* run_target_args'
    let v3986 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3987 : string = "$0.toString($1)"
    let v3988 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3987 
    let _run_target_args'_v3986 = v3988 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3989 : string = "$0.toString($1)"
    let v3990 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3989 
    let _run_target_args'_v3986 = v3990 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3991 : string = "$0.toString($1)"
    let v3992 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3991 
    let _run_target_args'_v3986 = v3992 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3993 : string = v3916.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3986 = v3993 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3994 : string = v3916.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3986 = v3994 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3996 : string = v3916.ToString v3932 
    let _run_target_args'_v3986 = v3996 
    #endif
#else
    let v4049 : string = v3916.ToString v3932 
    let _run_target_args'_v3986 = v4049 
    #endif
    let v4101 : string = _run_target_args'_v3986 
    let v4156 : string = $"{v3931}{v4101}"
    let v4158 : (System.Guid -> string) = _.ToString()
    let v4159 : string = v4158 v0
    let v4162 : int32 = v3681.Length
    let v4163 : int32 = v4156.Length
    let v4164 : int32 = v4162 + v4163
    let v4166 : (string -> int32) = String.length
    let v4167 : int32 = v4166 v4159
    let v4175 : int32 = v4164 |> int32 
    let v4188 : int32 = v4167 |> int32 
    let v4196 : int32 = v4188 - 1
    let v4198 : string = v4159.[int v4175..int v4196]
    let v4202 : string = $"{v3681}{v4156}{v4198}"
    (* run_target_args'
    let v4207 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4209 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4209 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4213 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4213 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4217 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4207 = v4217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4221 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4225 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4225 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4229 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4229 
    #endif
#else
    let v4233 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4233 
    #endif
    let v4236 : System.Guid = _run_target_args'_v4207 
    let _run_target_args'_v569 = v4236 
    #endif
    let v4242 : System.Guid = _run_target_args'_v569 
    v4242
and method218 (v0 : string, v1 : string) : unit =
    let v2 : bool = method39(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method78(v0)
        ()
    let v5 : string option = method41(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method39(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method78(v9)
        ()
    let v15 : bool = method39(v1)
    let v26 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method47(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v26 then
        let v27 : bool = true
        method89(v27, v1)
    let v28 : bool = method39(v1)
    let v29 : bool = v28 = false
    if v29 then
        (* run_target_args'
        let v30 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v31 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let v33 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v34 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v35 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method220 () : string =
    let v0 : string = "("
    v0
and method221 () : string =
    let v0 : string = " "
    v0
and method222 (v0 : US40) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v2, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = v2.l0
    v16
and method226 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "is_error"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v38 : string =
        if v0 then
            let v36 : string = "true"
            v36
        else
            let v37 : string = "false"
            v37
    let v40 : string = $"{v38}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v5, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v5, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v59 : string = "retry"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v5, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v27}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v5, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v87 : string = $"{v49}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v96 : string = "result"
    let v97 : string = $"{v96}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v106 : string = $"{v27}"
    let v109 : unit = ()
    let v110 : (unit -> unit) = closure7(v5, v106)
    let v111 : unit = (fun () -> v110 (); v109) ()
    let v115 : string = $"{v2}"
    let v118 : unit = ()
    let v119 : (unit -> unit) = closure7(v5, v115)
    let v120 : unit = (fun () -> v119 (); v118) ()
    let v124 : string = ", "
    let v125 : string = $"{v124}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v134 : string = $"{v3}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v5, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = " }"
    let v144 : string = $"{v143}"
    let v147 : unit = ()
    let v148 : (unit -> unit) = closure7(v5, v144)
    let v149 : unit = (fun () -> v148 (); v147) ()
    let v152 : string = v5.l0
    v152
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method226(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "common.retry_fn' / loop"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method12()
        let v50 : string = $"{v1}/{v0}"
        let v51 : string = method225(v30, v31, v32, v33, v34, v35, v48, v49, v4, v50, v2, v3)
        method19(v51)
and method224 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method101(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US44 =
        if v11 then
            US44_0(v9, v10)
        else
            US44_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US44_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US44_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v78 : uint8 = v8 + 1uy
        method224(v0, v1, v2, v3, v4, v5, v6, v7, v78)
and method223 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method224(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method219 (v0 : US39, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "cfg!(windows)"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "cfg!(windows)"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _run_target_args'_v14 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : US3 = US3_0
    let v26 : US4 = US4_5(v25)
    let v27 : string = $"platform.is_windows / target: {v26}"
    let v28 : bool = failwith<bool> v27
    let _run_target_args'_v14 = v28 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v30 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v31 : bool = v30 v29
    let _run_target_args'_v14 = v31 
    #endif
#else
    let v32 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v33 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v34 : bool = v33 v32
    let _run_target_args'_v14 = v34 
    #endif
    let v35 : bool = _run_target_args'_v14 
    let v43 : string =
        if v35 then
            let v41 : string = "_WINDOWS"
            v41
        else
            let v42 : string = "_LINUX"
            v42
    let v44 : string = $" --define {v43}"
    let v152 : string =
        match v0 with
        | US39_1 -> (* None *)
            let v150 : string = ""
            v150
        | US39_0(v45) -> (* Some *)
            let v47 : string = Unchecked.defaultof<_>
            let v51 : string = Unchecked.defaultof<_>
            let v56 : bool =
                match v45 with
                | US40_0(v54) -> (* Wasm *)
                    let v55 : bool = v47 = v54
                    v55
                | _ ->
                    false
            let v93 : US5 =
                if v56 then
                    let v57 : string = "Wasm"
                    US5_0(v57)
                else
                    (* run_target_args'
                    let v61 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v62 : string = method220()
                    let _run_target_args'_v61 = v62 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v63 : string = method220()
                    let _run_target_args'_v61 = v63 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v64 : string = method220()
                    let _run_target_args'_v61 = v64 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v65 : string = method221()
                    let _run_target_args'_v61 = v65 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v66 : string = method221()
                    let _run_target_args'_v61 = v66 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v67 : string = method221()
                    let _run_target_args'_v61 = v67 
                    #endif
#else
                    let v68 : string = method221()
                    let _run_target_args'_v61 = v68 
                    #endif
                    let v69 : string = _run_target_args'_v61 
                    let v74 : US40 = US40_0(v47)
                    let v75 : string = method222(v74)
                    let v77 : (string []) = v75.Split v69 
                    let v81 : string = v77.[int 0]
                    let v84 : string = method222(v45)
                    let v86 : bool = v84.StartsWith (v81, false, null)
                    if v86 then
                        let v89 : string = "Wasm"
                        US5_0(v89)
                    else
                        US5_1
            let v142 : US5 =
                match v93 with
                | US5_1 -> (* None *)
                    let v98 : bool =
                        match v45 with
                        | US40_1(v96) -> (* Contract *)
                            let v97 : bool = v51 = v96
                            v97
                        | _ ->
                            false
                    let v135 : US5 =
                        if v98 then
                            let v99 : string = "Contract"
                            US5_0(v99)
                        else
                            (* run_target_args'
                            let v103 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v104 : string = method220()
                            let _run_target_args'_v103 = v104 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v105 : string = method220()
                            let _run_target_args'_v103 = v105 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v106 : string = method220()
                            let _run_target_args'_v103 = v106 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v107 : string = method221()
                            let _run_target_args'_v103 = v107 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v108 : string = method221()
                            let _run_target_args'_v103 = v108 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v109 : string = method221()
                            let _run_target_args'_v103 = v109 
                            #endif
#else
                            let v110 : string = method221()
                            let _run_target_args'_v103 = v110 
                            #endif
                            let v111 : string = _run_target_args'_v103 
                            let v116 : US40 = US40_1(v51)
                            let v117 : string = method222(v116)
                            let v119 : (string []) = v117.Split v111 
                            let v123 : string = v119.[int 0]
                            let v126 : string = method222(v45)
                            let v128 : bool = v126.StartsWith (v123, false, null)
                            if v128 then
                                let v131 : string = "Contract"
                                US5_0(v131)
                            else
                                US5_1
                    match v135 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v136) -> (* Some *)
                        US5_0(v136)
                | US5_0(v94) -> (* Some *)
                    US5_0(v94)
            let v146 : string =
                match v142 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v143) -> (* Some *)
                    v143
            let v147 : (unit -> string) = v146.ToUpper
            let v148 : string = v147 ()
            let v149 : string = $" --define {v148}"
            v149
    let v153 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v44}{v152}"
    let v165 : Result<string, string> =
        match v4 with
        | US13_1(v159) -> (* Error *)
            let v161 : Result<string, string> = Error v159 
            v161
        | US13_0(v154) -> (* Ok *)
            let v156 : Result<string, string> = Ok v154 
            v156
    (* run_target_args'
    let v167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v168 : string = "$0.ok()"
    let v169 : string option = Fable.Core.RustInterop.emitRustExpr v165 v168 
    let _run_target_args'_v167 = v169 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v170 : string = "$0.ok()"
    let v171 : string option = Fable.Core.RustInterop.emitRustExpr v165 v170 
    let _run_target_args'_v167 = v171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v172 : string = "$0.ok()"
    let v173 : string option = Fable.Core.RustInterop.emitRustExpr v165 v172 
    let _run_target_args'_v167 = v173 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v174 : string option = match v165 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v167 = v174 
    #endif
#if FABLE_COMPILER_PYTHON
    let v175 : string option = match v165 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v167 = v175 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v176 : string option = match v165 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v167 = v176 
    #endif
#else
    let v177 : string option = match v165 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v167 = v177 
    #endif
    let v178 : string option = _run_target_args'_v167 
    let v181 : uint8 = 3uy
    let v182 : bool = true
    method223(v181, v153, v5, v6, v7, v8, v182, v178)
and method228 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "dotnet_fable_result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / dotnet fable error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method227(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v4 : string = "near-sdk"
    let v5 : bool = v2.Contains v4 
    v5
and method229 () : (std_string_String -> bool) =
    closure90()
and method230 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method231 () : string =
    let v0 : string = "("
    v0
and method232 () : string =
    let v0 : string = "("
    v0
and method234 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v55 
    #endif
#else
    let v59 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v59 
    #endif
    let v62 : std_string_String = _run_target_args'_v39 
    let v68 : string = "true; let _capture_move = (move || { //"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v62 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0"
    let v75 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = $"$0.captures_iter(v73)"
    let v77 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "true; let _regex_captures : Vec<_> = v77.map(|x| { //"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = $"x"
    let v81 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "Box::new($0)"
    let v83 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "Box::leak($0)"
    let v85 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = $"$0.capture_names()"
    let v87 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v87.map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "x.unwrap_or(\"\").to_string().into()"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "$0.clone()"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = $"v85.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v91 v94 
    let v97 : (string * string) = v93, v95 
    let v100 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v102 : string = "_regex_captures"
    let v103 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "true; $0 }).collect::<Vec<_>>()"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "_regex_captures"
    let v107 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : string = "true; $0 })()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_capture_move"
    let v111 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v110 
    v111
and closure91 () (v0 : std_collections_HashMap<string, string>) : US45 =
    US45_0(v0)
and method235 () : (std_collections_HashMap<string, string> -> US45) =
    closure91()
and method236 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v0}/{3uy}"
        let v50 : string = method225(v29, v30, v31, v32, v33, v34, v47, v48, v3, v49, v1, v2)
        method19(v50)
and method233 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v20 : Result<string, string> =
        match v0 with
        | US13_1(v14) -> (* Error *)
            let v16 : Result<string, string> = Error v14 
            v16
        | US13_0(v9) -> (* Ok *)
            let v11 : Result<string, string> = Ok v9 
            v11
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.ok()"
    let v24 : string option = Fable.Core.RustInterop.emitRustExpr v20 v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.ok()"
    let v26 : string option = Fable.Core.RustInterop.emitRustExpr v20 v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.ok()"
    let v28 : string option = Fable.Core.RustInterop.emitRustExpr v20 v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : string option = _run_target_args'_v22 
    let v36 : bool = true
    let struct (v37 : int32, v38 : string) = method101(v8, v3, v4, v5, v6, v36, v33)
    let v40 : string = "failed to load manifest for workspace member"
    let v41 : bool = v38.Contains v40 
    let v44 : bool = v41 = false
    let v202 : US44 =
        if v44 then
            let v45 : bool = v37 = 0
            if v45 then
                US44_0(v37, v38)
            else
                US44_1(v37, v38)
        else
            let v49 : string = $"regex::Regex::new(&$0)"
            let v50 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v51 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v50 v49 
            (* run_target_args'
            let v53 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v54 : string = "$0.unwrap()"
            let v55 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v51 v54 
            let _run_target_args'_v53 = v55 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v56 : string = "$0.unwrap()"
            let v57 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v51 v56 
            let _run_target_args'_v53 = v57 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v58 : string = "$0.unwrap()"
            let v59 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v51 v58 
            let _run_target_args'_v53 = v59 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v60 : regex_Regex = match v51 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v53 = v60 
            #endif
#if FABLE_COMPILER_PYTHON
            let v61 : regex_Regex = match v51 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v53 = v61 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v62 : regex_Regex = match v51 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v53 = v62 
            #endif
#else
            let v63 : regex_Regex = match v51 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v53 = v63 
            #endif
            let v64 : regex_Regex = _run_target_args'_v53 
            let v67 : Vec<std_collections_HashMap<string, string>> = method234(v38, v64)
            let v68 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v69 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v67 v68 
            let v70 : std_collections_HashMap<string, string> option = v69 |> Array.tryItem 0 
            let v73 : (std_collections_HashMap<string, string> -> US45) = method235()
            let v74 : US45 option = v70 |> Option.map v73 
            let v88 : US45 = US45_1
            let v89 : US45 = v74 |> Option.defaultValue v88 
            let v122 : US46 =
                match v89 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v93) -> (* Some *)
                    let v94 : string = method236()
                    let v95 : string = "std::collections::HashMap::get(&$0, &v94).map(|x| x).cloned()"
                    let v96 : string option = Fable.Core.RustInterop.emitRustExpr v93 v95 
                    let v99 : (string -> US5) = method6()
                    let v100 : US5 option = v96 |> Option.map v99 
                    let v114 : US5 = US5_1
                    let v115 : US5 = v100 |> Option.defaultValue v114 
                    US46_0(v115)
            let v129 : US5 =
                match v122 with
                | US46_0(v123) -> (* Some *)
                    match v123 with
                    | US5_0(v124) -> (* Some *)
                        US5_0(v124)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v129 with
            | US5_1 -> (* None *)
                US44_1(v37, v38)
            | US5_0(v131) -> (* Some *)
                let v132 : bool = method38(v131)
                let v133 : bool = v132 = false
                if v133 then
                    let v134 : string option = method41(v131)
                    let v137 : string = ""
                    let v138 : string = v134 |> Option.defaultValue v137 
                    let v141 : System.IDisposable = method78(v138)
                    (* run_target_args'
                    let v144 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v144 = v148 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v152 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v152 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v153 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v153 
                    #endif
#else
                    let v154 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v144 = v154 
                    #endif
                    let v155 : System.DateTime = _run_target_args'_v144 
                    let v161 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v162 : System.Guid = v161 ()
                    let v165 : System.Guid = method213(v162, v155)
                    let v167 : (System.Guid -> string) = _.ToString()
                    let v168 : string = v167 v165
                    let v171 : string = $"[package]"
                    let v172 : string = $"name = \"spiral_{v168}\""
                    let v173 : string = "\n"
                    let v174 : string = v171 + v173 
                    let v175 : string = v174 + v172 
                    let v176 : string = $"version = \"0.0.1\""
                    let v177 : string = v175 + v173 
                    let v178 : string = v177 + v176 
                    let v179 : string = $"edition = \"2021\""
                    let v180 : string = v178 + v173 
                    let v181 : string = v180 + v179 
                    let v182 : string = $""
                    let v183 : string = v181 + v173 
                    let v184 : string = v183 + v182 
                    let v185 : string = $"[[bin]]"
                    let v186 : string = v184 + v173 
                    let v187 : string = v186 + v185 
                    let v188 : string = $"name = \"spiral_{v168}\""
                    let v189 : string = v187 + v173 
                    let v190 : string = v189 + v188 
                    let v191 : string = $"path = \"spiral.rs\""
                    let v192 : string = v190 + v173 
                    let v193 : string = v192 + v191 
                    (* run_target_args'
                    let v194 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v195 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v131, v193) v195 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v131, v193)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v196 : bool = v37 = 0
                if v196 then
                    US44_0(v37, v38)
                else
                    US44_1(v37, v38)
    let struct (v210 : bool, v211 : int32, v212 : string) =
        match v202 with
        | US44_1(v205, v206) -> (* Error *)
            struct (true, v205, v206)
        | US44_0(v203, v204) -> (* Ok *)
            struct (false, v203, v204)
    let v213 : bool = v210 = false
    let v215 : bool =
        if v213 then
            true
        else
            let v214 : bool = v2 >= 3uy
            v214
    if v215 then
        struct (v211, v212)
    else
        let v216 : unit = ()
        let v217 : (unit -> unit) = closure92(v2, v211, v212, v210)
        let v218 : unit = (fun () -> v217 (); v216) ()
        let v266 : uint8 = v2 + 1uy
        method233(v0, v1, v266)
and method238 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "cargo_fmt_result"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v1}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v3, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = " }"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v3, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = v3.l0
    v91
and method237 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method238(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / cargo fmt error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method237(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method239 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method241 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v6, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v6, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v6, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v6, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v6, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "new_code_path"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v6, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v28}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v6, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v1}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v47}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = "external_command"
    let v95 : string = $"{v94}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v6, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v104 : string = $"{v28}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v6, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v2}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v6, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v47}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v6, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = "cleanup"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v6, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v28}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v6, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string =
        if v3 then
            let v149 : string = "true"
            v149
        else
            let v150 : string = "false"
            v150
    let v153 : string = $"{v151}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v6, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = $"{v47}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v171 : string = "cargo_result"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v6, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v28}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v190 : string = $"{v4}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v6, v190)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v6, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v208 : string = v6.l0
    v208
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method241(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = method240(v30, v31, v32, v33, v34, v35, v48, v49, v3, v1, v4, v0, v2)
        method19(v50)
and closure99 () (v0 : string) : bool =
    let v2 : string = "profile [optimized] target"
    let v3 : bool = v0.Contains v2 
    let v6 : bool = v3 = false
    if v6 then
        let v8 : string = "profile [unoptimized] target"
        let v9 : bool = v0.Contains v8 
        let v12 : bool = v9 = false
        if v12 then
            let v14 : string = "profile [unoptimized + debuginfo] target"
            let v15 : bool = v0.Contains v14 
            let v18 : bool = v15 = false
            v18
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v6 : (string -> bool) = closure99()
    let v7 : (string []) = v3 |> Array.skipWhile v6 
    let v8 : (string []) = v7 |> Array.skip 2 
    let v10 : string seq = v8 |> Seq.ofArray
    let v14 : string = method75()
    let v15 : (string -> (string seq -> string)) = String.concat
    let v16 : (string seq -> string) = v15 v14
    v16 v10
and method243 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "new_code_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "external_command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "cargo_result"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method243(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method242(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method245 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v6, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v6, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v6, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v6, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = "; "
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v6, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v57 : string = "new_code_path"
    let v58 : string = $"{v57}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v6, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v67 : string = $"{v28}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v6, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v1}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v47}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = "cargo_result"
    let v95 : string = $"{v94}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v6, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v104 : string = $"{v28}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v6, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v2}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v6, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v47}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v6, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = "cleanup"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v6, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v28}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v6, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string =
        if v3 then
            let v149 : string = "true"
            v149
        else
            let v150 : string = "false"
            v150
    let v153 : string = $"{v151}"
    let v156 : unit = ()
    let v157 : (unit -> unit) = closure7(v6, v153)
    let v158 : unit = (fun () -> v157 (); v156) ()
    let v162 : string = $"{v47}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v171 : string = "spiral_wasm_result"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v6, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v28}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v6, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    let v190 : string = $"{v4}"
    let v193 : unit = ()
    let v194 : (unit -> unit) = closure7(v6, v190)
    let v195 : unit = (fun () -> v194 (); v193) ()
    let v199 : string = " }"
    let v200 : string = $"{v199}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v6, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v208 : string = v6.l0
    v208
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method245(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / wasm error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = $"\n{v3}"
        let v51 : string = method244(v30, v31, v32, v33, v34, v35, v48, v49, v4, v1, v2, v0, v50)
        method19(v51)
and method247 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v7, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v19 : string = "exit_code"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v7, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v7, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v7, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v7, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v58 : string = "new_code_path"
    let v59 : string = $"{v58}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v7, v59)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v68 : string = $"{v29}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v7, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v77 : string = $"{v1}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v7, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v86 : string = $"{v48}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v7, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "wasm_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v7, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v29}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v7, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v2}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v7, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v48}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v7, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v7, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v29}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v7, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v3}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v7, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v48}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v7, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "cleanup"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v7, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v29}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v7, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v189 : string =
        if v4 then
            let v187 : string = "true"
            v187
        else
            let v188 : string = "false"
            v188
    let v191 : string = $"{v189}"
    let v194 : unit = ()
    let v195 : (unit -> unit) = closure7(v7, v191)
    let v196 : unit = (fun () -> v195 (); v194) ()
    let v200 : string = $"{v48}"
    let v203 : unit = ()
    let v204 : (unit -> unit) = closure7(v7, v200)
    let v205 : unit = (fun () -> v204 (); v203) ()
    let v209 : string = "cargo_result"
    let v210 : string = $"{v209}"
    let v213 : unit = ()
    let v214 : (unit -> unit) = closure7(v7, v210)
    let v215 : unit = (fun () -> v214 (); v213) ()
    let v219 : string = $"{v29}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v7, v219)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v228 : string = $"{v5}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v7, v228)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v237 : string = " }"
    let v238 : string = $"{v237}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v7, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v246 : string = v7.l0
    v246
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method247(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v17 : string = "spiral.process_rust / cargo error"
    let v18 : string = $"{v6} {v7} #{v15} %s{v17} / {v14}"
    method18(v18)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v31 : Mut0, v32 : Mut1, v33 : Mut2, v34 : Mut3, v35 : Mut4, v36 : int64 option) = TraceState.trace_state.Value
        let v49 : string = method8(v31, v32, v33, v34, v35, v36)
        let v50 : string = method82()
        let v51 : string = $"\n{v2}"
        let v52 : string = method246(v31, v32, v33, v34, v35, v36, v49, v50, v3, v1, v4, v5, v0, v51)
        method19(v52)
and method249 (v0 : string, v1 : UH5) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "new_code_path"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v3, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v3, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v54 : string = "cleanup"
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v3, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v64 : string = $"{v25}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v3, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"%A{v1}"
    let v77 : string = $"{v73}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v3, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v3.l0
    v95
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method249(v8, v24)
    let v26 : int64 = v0.l0
    let v28 : string = "spiral.process_rust / cleanup"
    let v29 : string = $"{v6} {v7} #{v26} %s{v28} / {v25}"
    method18(v29)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v36 : Mut0, v37 : Mut1, v38 : Mut2, v39 : Mut3, v40 : Mut4, v41 : int64 option) = TraceState.trace_state.Value
        let v54 : string = method8(v36, v37, v38, v39, v40, v41)
        let v55 : string = method85()
        let v56 : string = method248(v36, v37, v38, v39, v40, v41, v54, v55, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v56)
and closure105 () () : US47 =
    US47_0
and method251 () : (unit -> US47) =
    closure105()
and closure106 () (v0 : string) : US47 =
    US47_1(v0)
and method252 () : (string -> US47) =
    closure106()
and method254 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "error'"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method253 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method254(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.file_delete"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure107 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method253(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method250 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method49()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US47) = method251()
        let v24 : (string -> US47) = method252()
        let v26 : US47 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US47_1(v29) -> (* Error *)
            let v30 : unit = ()
            let v31 : (unit -> unit) = closure107(v29)
            let v32 : unit = (fun () -> v31 (); v30) ()
            ()
        | US47_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v79 : (string -> unit) = System.IO.File.Delete
        v79 v1
        #endif
        // run_target_args' is_unit
        method250(v3)
    | UH5_0 -> (* Nil *)
        ()
and method255 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US48 =
    US48_0(v0)
and method256 () : (std_fs_FileType -> US48) =
    closure109()
and closure110 () (v0 : std_string_String) : US48 =
    US48_1(v0)
and method257 () : (std_string_String -> US48) =
    closure110()
and method258 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v173 : US5 = US5_1
    let v174 : US5 = v159 |> Option.defaultValue v173 
    let v181 : string =
        match v174 with
        | US5_1 -> (* None *)
            let v179 : string = ""
            v179
        | US5_0(v178) -> (* Some *)
            v178
    let _run_target_args'_v5 = v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v183 : string = null |> unbox<string>
    let _run_target_args'_v5 = v183 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v187 : string = null |> unbox<string>
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : string = null |> unbox<string>
    let _run_target_args'_v5 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v195 : string = null |> unbox<string>
    let _run_target_args'_v5 = v195 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v198 : (string -> string) = System.IO.Path.GetDirectoryName
    let v199 : string = v198 v0
    let _run_target_args'_v5 = v199 
    #endif
#else
    let v200 : (string -> string) = System.IO.Path.GetDirectoryName
    let v201 : string = v200 v0
    let _run_target_args'_v5 = v201 
    #endif
    let v202 : string = _run_target_args'_v5 
    v202
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US48) = method256()
    let v37 : (std_string_String -> US48) = method257()
    let v39 : US48 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v272 : US49 =
        match v39 with
        | US48_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US49_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v86 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v87 : string = "format!(\"{}\", $0)"
                let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v87 
                let _run_target_args'_v86 = v88 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v89 : string = "format!(\"{}\", $0)"
                let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v89 
                let _run_target_args'_v86 = v90 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v91 : string = "format!(\"{}\", $0)"
                let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v91 
                let _run_target_args'_v86 = v92 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v94 
                #endif
#if FABLE_COMPILER_PYTHON
                let v98 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v98 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v102 
                #endif
#else
                let v106 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v106 
                #endif
                let v109 : std_string_String = _run_target_args'_v86 
                let v115 : string = "fable_library_rust::String_::fromString($0)"
                let v116 : string = Fable.Core.RustInterop.emitRustExpr v109 v115 
                let v117 : string = method258(v116)
                let v119 : bool = v117.StartsWith (v0, false, null)
                let v122 : bool = v119 = false
                if v122 then
                    US49_1
                else
                    let v124 : string option = method41(v116)
                    let v127 : (string -> US5) = method6()
                    let v128 : US5 option = v124 |> Option.map v127 
                    let v142 : US5 = US5_1
                    let v143 : US5 = v128 |> Option.defaultValue v142 
                    match v143 with
                    | US5_0(v147) -> (* Some *)
                        let v149 : bool = v147.Contains v0 
                        let v152 : bool = v149 = false
                        if v152 then
                            US49_2
                        else
                            US49_1
                    | _ ->
                        US49_1
        | _ ->
            let v160 : string = "async_walkdir::DirEntry::path(&$0)"
            let v161 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v160 
            (* run_target_args'
            let v166 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v167 : string = "$0.display()"
            let v168 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v167 
            let _run_target_args'_v166 = v168 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v169 : string = "$0.display()"
            let v170 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v169 
            let _run_target_args'_v166 = v170 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : string = "$0.display()"
            let v172 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v171 
            let _run_target_args'_v166 = v172 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v174 
            #endif
#if FABLE_COMPILER_PYTHON
            let v178 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v178 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v182 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v182 
            #endif
#else
            let v186 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v186 
            #endif
            let v189 : std_path_Display = _run_target_args'_v166 
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = "format!(\"{}\", $0)"
            let v201 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v200 
            let _run_target_args'_v199 = v201 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v202 : string = "format!(\"{}\", $0)"
            let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v202 
            let _run_target_args'_v199 = v203 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v204 : string = "format!(\"{}\", $0)"
            let v205 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v204 
            let _run_target_args'_v199 = v205 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v207 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v207 
            #endif
#if FABLE_COMPILER_PYTHON
            let v211 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v211 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v215 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v215 
            #endif
#else
            let v219 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v219 
            #endif
            let v222 : std_string_String = _run_target_args'_v199 
            let v228 : string = "fable_library_rust::String_::fromString($0)"
            let v229 : string = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let v230 : string = method258(v229)
            let v232 : bool = v230.StartsWith (v0, false, null)
            let v235 : bool = v232 = false
            if v235 then
                US49_1
            else
                let v237 : string option = method41(v229)
                let v240 : (string -> US5) = method6()
                let v241 : US5 option = v237 |> Option.map v240 
                let v255 : US5 = US5_1
                let v256 : US5 = v241 |> Option.defaultValue v255 
                match v256 with
                | US5_0(v260) -> (* Some *)
                    let v262 : bool = v260.Contains v0 
                    let v265 : bool = v262 = false
                    if v265 then
                        US49_2
                    else
                        US49_1
                | _ ->
                    US49_1
    let v273 : string = ""
    let v274 : string = "}"
    let v275 : string = v273 + v274 
    let x = v272 //
    let v276 : _ = x
    let v277 : unit = ()
    (* run_target_args'
    let v278 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v279 : string = $"true; let _fix_closure_v277 = $0"
    let v280 : bool = Fable.Core.RustInterop.emitRustExpr v276 v279 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v281 : string = $"true; let _fix_closure_v277 = $0"
    let v282 : bool = Fable.Core.RustInterop.emitRustExpr v276 v281 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v283 : string = $"true; let _fix_closure_v277 = $0"
    let v284 : bool = Fable.Core.RustInterop.emitRustExpr v276 v283 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v278 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v278 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v278 = false 
    #endif
#else
    let _run_target_args'_v278 = false 
    #endif
    let v285 : bool = _run_target_args'_v278 
    let v287 : string = $"true; _fix_closure_v277 " + v275 + "); " + v273 + " // rust.fix_closure'"
    let v288 : bool = Fable.Core.RustInterop.emitRustExpr () v287 
    let v289 : string = "__future_init"
    let v290 : _ = Fable.Core.RustInterop.emitRustExpr () v289 
    let v291 : string = "v290"
    let v292 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US49>>, Send<Dyn<std_future_Future<US49>>>>>> = Fable.Core.RustInterop.emitRustExpr () v291 
    let v293 : string = "v292.await"
    let v294 : US49 = Fable.Core.RustInterop.emitRustExpr () v293 
    let v303 : async_walkdir_Filtering =
        match v294 with
        | US49_2 -> (* Continue *)
            let v299 : string = "async_walkdir::Filtering::Continue"
            let v300 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v299 
            v300
        | US49_0 -> (* Ignore *)
            let v295 : string = "async_walkdir::Filtering::Ignore"
            let v296 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v295 
            v296
        | US49_1 -> (* IgnoreDir *)
            let v297 : string = "async_walkdir::Filtering::IgnoreDir"
            let v298 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v297 
            v298
    let v304 : string = v273 + v274 
    let x = v303 //
    let v305 : _ = x
    let v306 : unit = ()
    (* run_target_args'
    let v307 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v308 : string = $"true; let _fix_closure_v306 = $0"
    let v309 : bool = Fable.Core.RustInterop.emitRustExpr v305 v308 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v310 : string = $"true; let _fix_closure_v306 = $0"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr v305 v310 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v312 : string = $"true; let _fix_closure_v306 = $0"
    let v313 : bool = Fable.Core.RustInterop.emitRustExpr v305 v312 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v307 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v307 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v307 = false 
    #endif
#else
    let _run_target_args'_v307 = false 
    #endif
    let v314 : bool = _run_target_args'_v307 
    let v316 : string = $"true; _fix_closure_v306 " + v304 + "); " + v273 + " // rust.fix_closure'"
    let v317 : bool = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : string = "__future_init"
    let v319 : _ = Fable.Core.RustInterop.emitRustExpr () v318 
    let v320 : string = "v319"
    let v321 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v320 
    v321
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method260 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US50 =
    US50_0(v0)
and method261 () : (async_walkdir_DirEntry -> US50) =
    closure113()
and closure114 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method262 () : (std_string_String -> US50) =
    closure114()
and method263 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript / stream_filter_map"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure115 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method263(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method260()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US50) = method261()
    let v19 : (std_string_String -> US50) = method262()
    let v21 : US50 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v233 : US51 =
        match v21 with
        | US50_1(v181) -> (* Error *)
            let v182 : unit = ()
            let v183 : (unit -> unit) = closure115(v181)
            let v184 : unit = (fun () -> v183 (); v182) ()
            US51_1
        | US50_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v64 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v65 
            let _run_target_args'_v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v67 
            let _run_target_args'_v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "format!(\"{}\", $0)"
            let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v69 
            let _run_target_args'_v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v76 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v76 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v80 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v80 
            #endif
#else
            let v84 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v84 
            #endif
            let v87 : std_string_String = _run_target_args'_v64 
            let v93 : string = "fable_library_rust::String_::fromString($0)"
            let v94 : string = Fable.Core.RustInterop.emitRustExpr v87 v93 
            let v95 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v96 : string = $"regex::Regex::new(&$0)"
            let v97 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v95 v96 
            (* run_target_args'
            let v99 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v100 : string = "$0.unwrap()"
            let v101 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v100 
            let _run_target_args'_v99 = v101 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v102 : string = "$0.unwrap()"
            let v103 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v102 
            let _run_target_args'_v99 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : string = "$0.unwrap()"
            let v105 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v104 
            let _run_target_args'_v99 = v105 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v106 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v106 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v107 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v108 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v108 
            #endif
#else
            let v109 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v109 
            #endif
            let v110 : regex_Regex = _run_target_args'_v99 
            let v113 : Vec<std_collections_HashMap<string, string>> = method234(v94, v110)
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : (std_collections_HashMap<string, string> -> US45) = method235()
            let v120 : US45 option = v116 |> Option.map v119 
            let v134 : US45 = US45_1
            let v135 : US45 = v120 |> Option.defaultValue v134 
            let v168 : US46 =
                match v135 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v139) -> (* Some *)
                    let v140 : string = method236()
                    let v141 : string = "std::collections::HashMap::get(&$0, &v140).map(|x| x).cloned()"
                    let v142 : string option = Fable.Core.RustInterop.emitRustExpr v139 v141 
                    let v145 : (string -> US5) = method6()
                    let v146 : US5 option = v142 |> Option.map v145 
                    let v160 : US5 = US5_1
                    let v161 : US5 = v146 |> Option.defaultValue v160 
                    US46_0(v161)
            let v175 : US5 =
                match v168 with
                | US46_0(v169) -> (* Some *)
                    match v169 with
                    | US5_0(v170) -> (* Some *)
                        US5_0(v170)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v175 with
            | US5_1 -> (* None *)
                US51_1
            | US5_0(v176) -> (* Some *)
                US51_0(v94, v176)
    match v233 with
    | US51_1 -> (* None *)
        let v240 : struct (string * string) option = None
        v240
    | US51_0(v234, v235) -> (* Some *)
        let v237 : struct (string * string) option = Some struct (v234, v235) 
        v237
and method259 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US51 =
    US51_0(v0, v1)
and method264 () : (struct (string * string) -> US51) =
    closure117()
and method266 (v0 : US51) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "version"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"%A{v0}"
    let v38 : string = $"{v34}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v2, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method265 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US51) : string =
    let v9 : string = method266(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure118 (v0 : US51) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method265(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method267 (v0 : string, v1 : string, v2 : US51) : unit =
    match v2 with
    | US51_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US51_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method36(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method36(v0, v8)
        method218(v7, v9)
and method268 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_typescript"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method268(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method270 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v2, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v14 : string = "new_code_path"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v2, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v2, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v2, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v43 : string = " }"
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v2, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = v2.l0
    v52
and method269 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method270(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure120 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method269(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method271 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method271(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method272 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method272(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method75()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method274 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v5, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v5, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v5, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v5, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = "; "
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v5, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v95 : string = "new_code_path"
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v5, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v105 : string = $"{v27}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v1}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v85}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v5, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v132 : string = "external_command"
    let v133 : string = $"{v132}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v142 : string = $"{v27}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v2}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v85}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = "run_result"
    let v170 : string = $"{v169}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v5, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v179 : string = $"{v27}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v5, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v188 : string = $"{v3}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v5, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v197 : string = " }"
    let v198 : string = $"{v197}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v5, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v206 : string = v5.l0
    v206
and method273 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method274(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method273(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method275 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method275(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method276 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_python"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method276(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method277 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method270(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_python"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure126 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method277(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure127 (v0 : string) () : string =
    let v2 : string = "\n"
    let v3 : (string []) = v0.Split v2 
    let v7 : string seq = v3 |> Seq.ofArray
    let v11 : string = method75()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v7
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method274(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method278(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method279 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method279(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method281 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v3, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v15 : string = "subcommand"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v3, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v3, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "format!(\"{:#?}\", $0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v43 
    let v45 : string = "fable_library_rust::String_::fromString($0)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let _run_target_args'_v38 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "format!(\"{:#?}\", $0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v47 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v48 v49 
    let _run_target_args'_v38 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : string = $"%A{v0}"
    let _run_target_args'_v38 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : string = $"%A{v0}"
    let _run_target_args'_v38 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : string = $"%A{v0}"
    let _run_target_args'_v38 = v60 
    #endif
#else
    let v64 : string = $"%A{v0}"
    let _run_target_args'_v38 = v64 
    #endif
    let v67 : string = _run_target_args'_v38 
    let v74 : string = $"{v67}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = "; "
    let v84 : string = $"{v83}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v3, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = "arg_matches"
    let v94 : string = $"{v93}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v3, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v103 : string = $"{v25}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v3, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    (* run_target_args'
    let v115 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "format!(\"{:#?}\", $0)"
    let v117 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v116 
    let v118 : string = "fable_library_rust::String_::fromString($0)"
    let v119 : string = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let _run_target_args'_v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : string = "format!(\"{:#?}\", $0)"
    let v121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v120 
    let v122 : string = "fable_library_rust::String_::fromString($0)"
    let v123 : string = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let _run_target_args'_v115 = v123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v124 : string = "format!(\"{:#?}\", $0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v124 
    let v126 : string = "fable_library_rust::String_::fromString($0)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let _run_target_args'_v115 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : string = $"%A{v1}"
    let _run_target_args'_v115 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : string = $"%A{v1}"
    let _run_target_args'_v115 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : string = $"%A{v1}"
    let _run_target_args'_v115 = v137 
    #endif
#else
    let v141 : string = $"%A{v1}"
    let _run_target_args'_v115 = v141 
    #endif
    let v144 : string = _run_target_args'_v115 
    let v151 : string = $"{v144}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v3, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = " }"
    let v161 : string = $"{v160}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v3, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v169 : string = v3.l0
    v169
and method280 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method281(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / invalid subcommand"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method280(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v28 v34 
    v35
and method282 () : (serde_json_Error -> string) =
    closure132()
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v14 : US6 option = v10 |> Option.map v13 
    let v29 : US6 = US6_1
    let v30 : US6 = v14 |> Option.defaultValue v29 
    let v6579 : (struct (string * string) []) =
        match v30 with
        | US6_0(v34, v35) -> (* Some *)
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v34 v36 
            let v38 : bool = v37 = "gleam"
            if v38 then
                let v39 : string = method22()
                (* run_target_args'
                let v44 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v45 : string = "&*$0"
                let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v45 
                let _run_target_args'_v44 = v46 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v47 : string = "&*$0"
                let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v47 
                let _run_target_args'_v44 = v48 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v49 : string = "&*$0"
                let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v49 
                let _run_target_args'_v44 = v50 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v52 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v52 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v56 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v60 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v60 
                #endif
#else
                let v64 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v64 
                #endif
                let v67 : Ref<Str> = _run_target_args'_v44 
                let v73 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v74 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v67) v73 
                let v77 : (std_string_String -> US7) = method23()
                let v78 : US7 option = v74 |> Option.map v77 
                let v92 : US7 = US7_1
                let v93 : US7 = v78 |> Option.defaultValue v92 
                let v100 : std_string_String =
                    match v93 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v97) -> (* Some *)
                        v97
                let v101 : string = "fable_library_rust::String_::fromString($0)"
                let v102 : string = Fable.Core.RustInterop.emitRustExpr v100 v101 
                let v103 : string = method24()
                (* run_target_args'
                let v108 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v109 : string = "&*$0"
                let v110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v109 
                let _run_target_args'_v108 = v110 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v111 : string = "&*$0"
                let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v111 
                let _run_target_args'_v108 = v112 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v113 : string = "&*$0"
                let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v113 
                let _run_target_args'_v108 = v114 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v116 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v116 
                #endif
#if FABLE_COMPILER_PYTHON
                let v120 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v120 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v124 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v124 
                #endif
#else
                let v128 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v128 
                #endif
                let v131 : Ref<Str> = _run_target_args'_v108 
                let v137 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v138 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v131) v137 
                let v141 : (std_string_String -> US7) = method23()
                let v142 : US7 option = v138 |> Option.map v141 
                let v156 : US7 = US7_1
                let v157 : US7 = v142 |> Option.defaultValue v156 
                let v216 : US8 =
                    match v157 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v161) -> (* Some *)
                        let v162 : string = "fable_library_rust::String_::fromString($0)"
                        let v163 : string = Fable.Core.RustInterop.emitRustExpr v161 v162 
                        
                        
                        
                        
                        let v165 : string = "JavaScript"
                        let v166 : (unit -> string) = v165.ToLower
                        let v167 : string = v166 ()
                        let v171 : string = "Erlang"
                        let v172 : (unit -> string) = v171.ToLower
                        let v173 : string = v172 ()
                        let v176 : bool = "Erlang" = v163
                        let v180 : US9 =
                            if v176 then
                                let v177 : US10 = US10_0
                                US9_0(v177)
                            else
                                US9_1
                        let v212 : US9 =
                            match v180 with
                            | US9_1 -> (* None *)
                                let v183 : bool = "JavaScript" = v163
                                let v187 : US9 =
                                    if v183 then
                                        let v184 : US10 = US10_1
                                        US9_0(v184)
                                    else
                                        US9_1
                                match v187 with
                                | US9_1 -> (* None *)
                                    let v190 : bool = v173 = v163
                                    let v194 : US9 =
                                        if v190 then
                                            let v191 : US10 = US10_0
                                            US9_0(v191)
                                        else
                                            US9_1
                                    match v194 with
                                    | US9_1 -> (* None *)
                                        let v197 : bool = v167 = v163
                                        let v201 : US9 =
                                            if v197 then
                                                let v198 : US10 = US10_1
                                                US9_0(v198)
                                            else
                                                US9_1
                                        match v201 with
                                        | US9_1 -> (* None *)
                                            US9_1
                                        | US9_0(v202) -> (* Some *)
                                            US9_0(v202)
                                    | US9_0(v195) -> (* Some *)
                                        US9_0(v195)
                                | US9_0(v188) -> (* Some *)
                                    US9_0(v188)
                            | US9_0(v181) -> (* Some *)
                                US9_0(v181)
                        US8_0(v212)
                let v223 : US9 =
                    match v216 with
                    | US8_0(v217) -> (* Some *)
                        match v217 with
                        | US9_0(v218) -> (* Some *)
                            US9_0(v218)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v227 : US10 =
                    match v223 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v224) -> (* Some *)
                        v224
                let v228 : string = method25()
                (* run_target_args'
                let v233 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v234 : string = "&*$0"
                let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v228 v234 
                let _run_target_args'_v233 = v235 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v236 : string = "&*$0"
                let v237 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v228 v236 
                let _run_target_args'_v233 = v237 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v238 : string = "&*$0"
                let v239 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v228 v238 
                let _run_target_args'_v233 = v239 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v241 : Ref<Str> = v228 |> unbox<Ref<Str>>
                let _run_target_args'_v233 = v241 
                #endif
#if FABLE_COMPILER_PYTHON
                let v245 : Ref<Str> = v228 |> unbox<Ref<Str>>
                let _run_target_args'_v233 = v245 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v249 : Ref<Str> = v228 |> unbox<Ref<Str>>
                let _run_target_args'_v233 = v249 
                #endif
#else
                let v253 : Ref<Str> = v228 |> unbox<Ref<Str>>
                let _run_target_args'_v233 = v253 
                #endif
                let v256 : Ref<Str> = _run_target_args'_v233 
                let v262 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v263 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v256) v262 
                let v266 : (Vec<std_string_String> -> US11) = method26()
                let v267 : US11 option = v263 |> Option.map v266 
                let v281 : US11 = US11_1
                let v282 : US11 = v267 |> Option.defaultValue v281 
                let v286 : (std_string_String []) = [||]
                let v287 : string = "$0.to_vec()"
                let v288 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v286 v287 
                let v291 : Vec<std_string_String> =
                    match v282 with
                    | US11_1 -> (* None *)
                        v288
                    | US11_0(v289) -> (* Some *)
                        v289
                (* run_target_args'
                let v296 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v301 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v302 : string = "std::fs::read(&*$0)"
                let v303 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v102 v302 
                (* run_target_args'
                let v305 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v306 : string = "$0.unwrap()"
                let v307 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v303 v306 
                let _run_target_args'_v305 = v307 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v308 : string = "$0.unwrap()"
                let v309 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v303 v308 
                let _run_target_args'_v305 = v309 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v310 : string = "$0.unwrap()"
                let v311 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v303 v310 
                let _run_target_args'_v305 = v311 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v312 : Vec<uint8> = match v303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v305 = v312 
                #endif
#if FABLE_COMPILER_PYTHON
                let v313 : Vec<uint8> = match v303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v305 = v313 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v314 : Vec<uint8> = match v303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v305 = v314 
                #endif
#else
                let v315 : Vec<uint8> = match v303 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v305 = v315 
                #endif
                let v316 : Vec<uint8> = _run_target_args'_v305 
                let _run_target_args'_v301 = v316 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v320 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v301 = v320 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v324 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v301 = v324 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v328 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v301 = v328 
                #endif
#if FABLE_COMPILER_PYTHON
                let v332 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v301 = v332 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v336 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v301 = v336 
                #endif
#else
                let v339 : (uint8 []) = v102 |> System.IO.File.ReadAllBytes
                let v340 : string = "$0.to_vec()"
                let v341 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v339 v340 
                let _run_target_args'_v301 = v341 
                #endif
                let v342 : Vec<uint8> = _run_target_args'_v301 
                let v348 : Vec<uint8> = method27(v342)
                let v349 : string = "std::string::String::from_utf8($0)"
                let v350 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v348 v349 
                (* run_target_args'
                let v352 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v353 : string = "$0.unwrap()"
                let v354 : std_string_String = Fable.Core.RustInterop.emitRustExpr v350 v353 
                let _run_target_args'_v352 = v354 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v355 : string = "$0.unwrap()"
                let v356 : std_string_String = Fable.Core.RustInterop.emitRustExpr v350 v355 
                let _run_target_args'_v352 = v356 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v357 : string = "$0.unwrap()"
                let v358 : std_string_String = Fable.Core.RustInterop.emitRustExpr v350 v357 
                let _run_target_args'_v352 = v358 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v359 : std_string_String = match v350 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v352 = v359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v360 : std_string_String = match v350 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v352 = v360 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v361 : std_string_String = match v350 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v352 = v361 
                #endif
#else
                let v362 : std_string_String = match v350 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v352 = v362 
                #endif
                let v363 : std_string_String = _run_target_args'_v352 
                let v366 : string = "fable_library_rust::String_::fromString($0)"
                let v367 : string = Fable.Core.RustInterop.emitRustExpr v363 v366 
                let _run_target_args'_v296 = v367 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v369 : string = null |> unbox<string>
                let _run_target_args'_v296 = v369 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v373 : string = null |> unbox<string>
                let _run_target_args'_v296 = v373 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v377 : string = null |> unbox<string>
                let _run_target_args'_v296 = v377 
                #endif
#if FABLE_COMPILER_PYTHON
                let v381 : string = null |> unbox<string>
                let _run_target_args'_v296 = v381 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v385 : string = null |> unbox<string>
                let _run_target_args'_v296 = v385 
                #endif
#else
                let v388 : string = v102 |> System.IO.File.ReadAllText
                let _run_target_args'_v296 = v388 
                #endif
                let v389 : string = _run_target_args'_v296 
                let v395 : string = "gleam"
                let v396 : string = method28(v395, v389)
                let v397 : string = method29(v396)
                let v398 : string = method34()
                let v399 : US5 = method35(v398)
                let v405 : US5 =
                    match v399 with
                    | US5_1 -> (* None *)
                        let v402 : string = __SOURCE_DIRECTORY__
                        method35(v402)
                    | US5_0(v400) -> (* Some *)
                        US5_0(v400)
                let v411 : US5 =
                    match v405 with
                    | US5_1 -> (* None *)
                        let v408 : string = "/workspaces"
                        method35(v408)
                    | US5_0(v406) -> (* Some *)
                        US5_0(v406)
                let v415 : string =
                    match v411 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v412) -> (* Some *)
                        v412
                let v416 : string = method55(v415)
                let v417 : bool = "deps" = v416
                let v428 : string =
                    if v417 then
                        let v418 : string option = method41(v415)
                        let v420 : string = v418 |> Option.get
                        let v423 : US5 = method35(v420)
                        match v423 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v424) -> (* Some *)
                            v424
                    else
                        v415
                let v429 : string = "polyglot"
                let v430 : string = method36(v428, v429)
                let v431 : string = method34()
                let v433 : (unit -> string) = v431.ToLower
                let v434 : string = v433 ()
                let v438 : (unit -> string) = v430.ToLower
                let v439 : string = v438 ()
                let v443 : bool = v434.StartsWith (v439, false, null)
                let v448 : US13 =
                    if v443 then
                        US13_1(v439)
                    else
                        US13_0(v439)
                let v460 : Result<string, string> =
                    match v448 with
                    | US13_1(v454) -> (* Error *)
                        let v456 : Result<string, string> = Error v454 
                        v456
                    | US13_0(v449) -> (* Ok *)
                        let v451 : Result<string, string> = Ok v449 
                        v451
                let v461 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v462 : bool = Fable.Core.RustInterop.emitRustExpr v460 v461 
                let v463 : string = "x"
                let v464 : string = Fable.Core.RustInterop.emitRustExpr () v463 
                let v465 : string = "true; $0 })"
                let v466 : bool = Fable.Core.RustInterop.emitRustExpr v464 v465 
                let v467 : string = "_result_unwrap_or_else"
                let v468 : string = Fable.Core.RustInterop.emitRustExpr () v467 
                let v469 : string = method69(v468)
                let v470 : string option = method41(v102)
                let v473 : string = ""
                let v474 : string = v470 |> Option.defaultValue v473 
                let v477 : string = ".."
                let v478 : string = method36(v474, v477)
                let v479 : string = method69(v478)
                let v480 : string = "gleam.toml"
                let v481 : string = method36(v479, v480)
                let v482 : string = "gleam_stdlib=\">=0.55.0 and <1.0.0\""
                let v483 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v484 : (string []) = [|v482; v483|]
                let v485 : string = "$0.to_vec()"
                let v486 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v484 v485 
                let v487 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v488 : bool = Fable.Core.RustInterop.emitRustExpr v486 v487 
                let v489 : string = "x"
                let v490 : string = Fable.Core.RustInterop.emitRustExpr () v489 
                (* run_target_args'
                let v495 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v496 : string = "&*$0"
                let v497 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v490 v496 
                let _run_target_args'_v495 = v497 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v498 : string = "&*$0"
                let v499 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v490 v498 
                let _run_target_args'_v495 = v499 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v500 : string = "&*$0"
                let v501 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v490 v500 
                let _run_target_args'_v495 = v501 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v503 : Ref<Str> = v490 |> unbox<Ref<Str>>
                let _run_target_args'_v495 = v503 
                #endif
#if FABLE_COMPILER_PYTHON
                let v507 : Ref<Str> = v490 |> unbox<Ref<Str>>
                let _run_target_args'_v495 = v507 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v511 : Ref<Str> = v490 |> unbox<Ref<Str>>
                let _run_target_args'_v495 = v511 
                #endif
#else
                let v515 : Ref<Str> = v490 |> unbox<Ref<Str>>
                let _run_target_args'_v495 = v515 
                #endif
                let v518 : Ref<Str> = _run_target_args'_v495 
                (* run_target_args'
                let v528 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v529 : string = "String::from($0)"
                let v530 : std_string_String = Fable.Core.RustInterop.emitRustExpr v518 v529 
                let _run_target_args'_v528 = v530 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v531 : string = "String::from($0)"
                let v532 : std_string_String = Fable.Core.RustInterop.emitRustExpr v518 v531 
                let _run_target_args'_v528 = v532 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v533 : string = "String::from($0)"
                let v534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v518 v533 
                let _run_target_args'_v528 = v534 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v536 : std_string_String = v518 |> unbox<std_string_String>
                let _run_target_args'_v528 = v536 
                #endif
#if FABLE_COMPILER_PYTHON
                let v540 : std_string_String = v518 |> unbox<std_string_String>
                let _run_target_args'_v528 = v540 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v544 : std_string_String = v518 |> unbox<std_string_String>
                let _run_target_args'_v528 = v544 
                #endif
#else
                let v548 : std_string_String = v518 |> unbox<std_string_String>
                let _run_target_args'_v528 = v548 
                #endif
                let v551 : std_string_String = _run_target_args'_v528 
                let v557 : string = "true; $0 }).collect::<Vec<_>>()"
                let v558 : bool = Fable.Core.RustInterop.emitRustExpr v551 v557 
                let v559 : string = "_vec_map"
                let v560 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v559 
                let v561 : Vec<std_string_String> = method73(v291)
                let v562 : Vec<std_string_String> = method74(v560)
                let v563 : string = "true; let mut v562 = v562"
                let v564 : bool = Fable.Core.RustInterop.emitRustExpr () v563 
                let v565 : string = "true; v562.extend(v561)"
                let v566 : bool = Fable.Core.RustInterop.emitRustExpr () v565 
                let v567 : string = "v562"
                let v568 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v567 
                let v569 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v570 : bool = Fable.Core.RustInterop.emitRustExpr v568 v569 
                let v571 : string = "x"
                let v572 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v571 
                let v573 : string = "fable_library_rust::String_::fromString($0)"
                let v574 : string = Fable.Core.RustInterop.emitRustExpr v572 v573 
                let v576 : string = "="
                let v577 : bool = v574.Contains v576 
                let v591 : string =
                    if v577 then
                        v574
                    else
                        let v581 : string = "]"
                        let v582 : bool = v574.EndsWith (v581, false, null)
                        if v582 then
                            let v585 : string = $"={{version='*',features=["
                            let v586 : string = "["
                            let v587 : string = v574.Replace (v586, v585)
                            let v588 : string = $"{v587}}}"
                            v588
                        else
                            let v589 : string = $"{v574}='*'"
                            v589
                let v592 : string = "true; $0 }).collect::<Vec<_>>()"
                let v593 : bool = Fable.Core.RustInterop.emitRustExpr v591 v592 
                let v594 : string = "_vec_map"
                let v595 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v594 
                let v596 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v597 : (string []) = Fable.Core.RustInterop.emitRustExpr v595 v596 
                let v601 : unit = ()
                let _let'_v601 =
                    seq {
                        for i = 0 to v597.Length - 1 do yield v597.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v604 : string seq = _let'_v601 
                let v611 : string = method75()
                let v612 : (string -> (string seq -> string)) = String.concat
                let v613 : (string seq -> string) = v612 v611
                let v614 : string = v613 v604
                
                
                let v618 : bool =
                    match v227 with
                    | US10_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v622 : US5 =
                    if v618 then
                        let v619 : string = "Erlang"
                        US5_0(v619)
                    else
                        US5_1
                let v636 : US5 =
                    match v622 with
                    | US5_1 -> (* None *)
                        let v625 : bool =
                            match v227 with
                            | US10_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v629 : US5 =
                            if v625 then
                                let v626 : string = "JavaScript"
                                US5_0(v626)
                            else
                                US5_1
                        match v629 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v630) -> (* Some *)
                            US5_0(v630)
                    | US5_0(v623) -> (* Some *)
                        US5_0(v623)
                let v640 : string =
                    match v636 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v637) -> (* Some *)
                        v637
                let v642 : (unit -> string) = v640.ToLower
                let v643 : string = v642 ()
                let v646 : string = $"name = \"main\""
                let v647 : string = $"target = \"{v643}\""
                let v648 : string = "\n"
                let v649 : string = v646 + v648 
                let v650 : string = v649 + v647 
                let v651 : string = $""
                let v652 : string = v650 + v648 
                let v653 : string = v652 + v651 
                let v654 : string = $"[dependencies]"
                let v655 : string = v653 + v648 
                let v656 : string = v655 + v654 
                let v657 : string = $"{v614}"
                let v658 : string = v656 + v648 
                let v659 : string = v658 + v657 
                method76(v481, v659)
                let v660 : System.Threading.CancellationToken option = None
                let v661 : (struct (string * string) []) = [||]
                let v662 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v663 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v664 : string option = None
                let v665 : string = $"gleam format"
                let v667 : string option = Some v479 
                let v670 : bool = true
                let struct (v671 : int32, v672 : string) = method101(v665, v660, v661, v662, v663, v670, v667)
                let v674 : bool = v671 <> 0 
                let struct (v947 : US5, v948 : US5, v949 : US5, v950 : US5) =
                    if v674 then
                        let v677 : unit = ()
                        let v678 : (unit -> unit) = closure70(v102, v672, v671)
                        let v679 : unit = (fun () -> v678 (); v677) ()
                        let v726 : US5 = US5_0(v395)
                        let v727 : US5 = US5_1
                        let v728 : US5 = US5_1
                        let v729 : US5 = US5_1
                        struct (v726, v727, v728, v729)
                    else
                        let v730 : bool =
                            match v227 with
                            | US10_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v733 : string =
                            if v730 then
                                let v731 : string = $"gleam run --no-print-progress \"{v102}\""
                                v731
                            else
                                let v732 : string = $"gleam build --no-print-progress"
                                v732
                        let v734 : string = "TRACE_LEVEL"
                        let v735 : string = "GLEAM_LOG"
                        let v736 : string = "GLEAM_LOG_NOCOLOUR"
                        let v737 : (struct (string * string) []) = [|struct (v734, v473); struct (v735, v473); struct (v736, v473)|]
                        let v738 : System.Threading.CancellationToken option = None
                        let v739 : (struct (string * string) []) = [||]
                        let v740 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v741 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v742 : string option = None
                        let v744 : string option = Some v479 
                        let v747 : bool = true
                        let struct (v748 : int32, v749 : string) = method101(v733, v738, v737, v740, v741, v747, v744)
                        let v750 : int32 = v737.Length
                        let v751 : (string []) = Array.zeroCreate<string> (v750)
                        let v752 : Mut5 = {l0 = 0} : Mut5
                        while method32(v750, v752) do
                            let v754 : int32 = v752.l0
                            let struct (v755 : string, v756 : string) = v737.[int v754]
                            let v757 : string = $"$env:{v755}=''{v756}''"
                            v751.[int v754] <- v757
                            let v758 : int32 = v754 + 1
                            v752.l0 <- v758
                            ()
                        let v760 : string seq = v751 |> Seq.ofArray
                        let v764 : (string -> (string seq -> string)) = String.concat
                        let v765 : string = ";"
                        let v766 : (string seq -> string) = v764 v765
                        let v767 : string = v766 v760
                        let v770 : string = $"pwsh -c '{v767}; {v733}'"
                        let v771 : bool = v748 = 0
                        let struct (v943 : US5, v944 : US5, v945 : US5, v946 : US5) =
                            if v771 then
                                let v772 : bool =
                                    match v227 with
                                    | US10_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v800 : string =
                                    if v772 then
                                        v749
                                    else
                                        let v773 : string = "http://localhost:3000"
                                        let v774 : string = v479.Replace (v469, v773)
                                        let v775 : string =     $"<link"
                                        let v776 : string = $"  rel=\"stylesheet\""
                                        let v777 : string = v775 + v648 
                                        let v778 : string = v777 + v776 
                                        let v779 : string = $"  href=\"{v774}/build/dev/javascript/lustre_ui/priv/styles.css\""
                                        let v780 : string = v778 + v648 
                                        let v781 : string = v780 + v779 
                                        let v782 : string = $"/>"
                                        let v783 : string = v781 + v648 
                                        let v784 : string = v783 + v782 
                                        let v785 : string = $"<div id=\"app\"></div>"
                                        let v786 : string = v784 + v648 
                                        let v787 : string = v786 + v785 
                                        let v788 : string = $"<script type=\"module\">"
                                        let v789 : string = v787 + v648 
                                        let v790 : string = v789 + v788 
                                        let v791 : string = $"  import * as main from \"{v774}/build/dev/javascript/main/main.mjs\""
                                        let v792 : string = v790 + v648 
                                        let v793 : string = v792 + v791 
                                        let v794 : string = $"  main.main()"
                                        let v795 : string = v793 + v648 
                                        let v796 : string = v795 + v794 
                                        let v797 : string = $"</script>"
                                        let v798 : string = v796 + v648 
                                        let v799 : string = v798 + v797 
                                        v799
                                (* run_target_args'
                                let v805 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v806 : string = "&*$0"
                                let v807 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v800 v806 
                                let _run_target_args'_v805 = v807 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v808 : string = "&*$0"
                                let v809 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v800 v808 
                                let _run_target_args'_v805 = v809 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v810 : string = "&*$0"
                                let v811 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v800 v810 
                                let _run_target_args'_v805 = v811 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v813 : Ref<Str> = v800 |> unbox<Ref<Str>>
                                let _run_target_args'_v805 = v813 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v817 : Ref<Str> = v800 |> unbox<Ref<Str>>
                                let _run_target_args'_v805 = v817 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v821 : Ref<Str> = v800 |> unbox<Ref<Str>>
                                let _run_target_args'_v805 = v821 
                                #endif
#else
                                let v825 : Ref<Str> = v800 |> unbox<Ref<Str>>
                                let _run_target_args'_v805 = v825 
                                #endif
                                let v828 : Ref<Str> = _run_target_args'_v805 
                                (* run_target_args'
                                let v838 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v839 : string = "String::from($0)"
                                let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v839 
                                let _run_target_args'_v838 = v840 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v841 : string = "String::from($0)"
                                let v842 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v841 
                                let _run_target_args'_v838 = v842 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v843 : string = "String::from($0)"
                                let v844 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v843 
                                let _run_target_args'_v838 = v844 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v846 : std_string_String = v828 |> unbox<std_string_String>
                                let _run_target_args'_v838 = v846 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v850 : std_string_String = v828 |> unbox<std_string_String>
                                let _run_target_args'_v838 = v850 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v854 : std_string_String = v828 |> unbox<std_string_String>
                                let _run_target_args'_v838 = v854 
                                #endif
#else
                                let v858 : std_string_String = v828 |> unbox<std_string_String>
                                let _run_target_args'_v838 = v858 
                                #endif
                                let v861 : std_string_String = _run_target_args'_v838 
                                let v867 : (string -> US5) = closure71()
                                let v868 : (unit -> string) = closure72(v800)
                                let v869 : (exn -> US5) = closure73(v102, v770, v861)
                                let v871 : US5 = US5_1
                                let result = ref v871
                                try
                                    result.Value <- v868 () |> v867 
                                with ex ->
                                    result.Value <- v869 ex 
                                let v872 : US5 = result.Value
                                let v883 : string option =
                                    match v872 with
                                    | US5_1 -> (* None *)
                                        let v881 : string option = None
                                        v881
                                    | US5_0(v876) -> (* Some *)
                                        let v878 : string option = Some v876 
                                        v878
                                let v884 : string = "$0.unwrap()"
                                let v885 : string = Fable.Core.RustInterop.emitRustExpr v883 v884 
                                let v886 : US5 = US5_0(v395)
                                let v887 : US5 = US5_0(v389)
                                let v888 : US5 = US5_0(v102)
                                let v889 : US5 = US5_0(v885)
                                struct (v886, v887, v888, v889)
                            else
                                let v890 : unit = ()
                                let v891 : (unit -> unit) = closure75(v102, v749, v748, v770)
                                let v892 : unit = (fun () -> v891 (); v890) ()
                                let v939 : US5 = US5_0(v395)
                                let v940 : US5 = US5_1
                                let v941 : US5 = US5_1
                                let v942 : US5 = US5_1
                                struct (v939, v940, v941, v942)
                        struct (v943, v944, v945, v946)
                let v953 : string =
                    match v947 with
                    | US5_1 -> (* None *)
                        v473
                    | US5_0(v951) -> (* Some *)
                        v951
                let v954 : string = "extension"
                let v957 : string =
                    match v948 with
                    | US5_1 -> (* None *)
                        v473
                    | US5_0(v955) -> (* Some *)
                        v955
                let v958 : string = "code"
                let v961 : string =
                    match v950 with
                    | US5_1 -> (* None *)
                        v473
                    | US5_0(v959) -> (* Some *)
                        v959
                let v962 : string = "output"
                let v963 : (struct (string * string) []) = [|struct (v954, v953); struct (v958, v957); struct (v962, v961)|]
                let v964 : string = "$0.to_vec()"
                let v965 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v963 v964 
                let v966 : unit = ()
                let v967 : string = $"true; let _func1_from_v966 = Func1::from(move |value| {{ //"
                let v968 : bool = Fable.Core.RustInterop.emitRustExpr () v967 
                let v969 : string = $"value"
                let struct (v970 : string, v971 : string) = Fable.Core.RustInterop.emitRustExpr () v969 
                (* run_target_args'
                let v976 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v977 : string = "&*$0"
                let v978 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v970 v977 
                let _run_target_args'_v976 = v978 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v979 : string = "&*$0"
                let v980 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v970 v979 
                let _run_target_args'_v976 = v980 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v981 : string = "&*$0"
                let v982 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v970 v981 
                let _run_target_args'_v976 = v982 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v984 : Ref<Str> = v970 |> unbox<Ref<Str>>
                let _run_target_args'_v976 = v984 
                #endif
#if FABLE_COMPILER_PYTHON
                let v988 : Ref<Str> = v970 |> unbox<Ref<Str>>
                let _run_target_args'_v976 = v988 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v992 : Ref<Str> = v970 |> unbox<Ref<Str>>
                let _run_target_args'_v976 = v992 
                #endif
#else
                let v996 : Ref<Str> = v970 |> unbox<Ref<Str>>
                let _run_target_args'_v976 = v996 
                #endif
                let v999 : Ref<Str> = _run_target_args'_v976 
                (* run_target_args'
                let v1009 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1010 : string = "String::from($0)"
                let v1011 : std_string_String = Fable.Core.RustInterop.emitRustExpr v999 v1010 
                let _run_target_args'_v1009 = v1011 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1012 : string = "String::from($0)"
                let v1013 : std_string_String = Fable.Core.RustInterop.emitRustExpr v999 v1012 
                let _run_target_args'_v1009 = v1013 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1014 : string = "String::from($0)"
                let v1015 : std_string_String = Fable.Core.RustInterop.emitRustExpr v999 v1014 
                let _run_target_args'_v1009 = v1015 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1017 : std_string_String = v999 |> unbox<std_string_String>
                let _run_target_args'_v1009 = v1017 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1021 : std_string_String = v999 |> unbox<std_string_String>
                let _run_target_args'_v1009 = v1021 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1025 : std_string_String = v999 |> unbox<std_string_String>
                let _run_target_args'_v1009 = v1025 
                #endif
#else
                let v1029 : std_string_String = v999 |> unbox<std_string_String>
                let _run_target_args'_v1009 = v1029 
                #endif
                let v1032 : std_string_String = _run_target_args'_v1009 
                (* run_target_args'
                let v1042 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1043 : string = "&*$0"
                let v1044 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v971 v1043 
                let _run_target_args'_v1042 = v1044 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1045 : string = "&*$0"
                let v1046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v971 v1045 
                let _run_target_args'_v1042 = v1046 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1047 : string = "&*$0"
                let v1048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v971 v1047 
                let _run_target_args'_v1042 = v1048 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1050 : Ref<Str> = v971 |> unbox<Ref<Str>>
                let _run_target_args'_v1042 = v1050 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1054 : Ref<Str> = v971 |> unbox<Ref<Str>>
                let _run_target_args'_v1042 = v1054 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1058 : Ref<Str> = v971 |> unbox<Ref<Str>>
                let _run_target_args'_v1042 = v1058 
                #endif
#else
                let v1062 : Ref<Str> = v971 |> unbox<Ref<Str>>
                let _run_target_args'_v1042 = v1062 
                #endif
                let v1065 : Ref<Str> = _run_target_args'_v1042 
                (* run_target_args'
                let v1075 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1076 : string = "String::from($0)"
                let v1077 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1065 v1076 
                let _run_target_args'_v1075 = v1077 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1078 : string = "String::from($0)"
                let v1079 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1065 v1078 
                let _run_target_args'_v1075 = v1079 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1080 : string = "String::from($0)"
                let v1081 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1065 v1080 
                let _run_target_args'_v1075 = v1081 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1083 : std_string_String = v1065 |> unbox<std_string_String>
                let _run_target_args'_v1075 = v1083 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1087 : std_string_String = v1065 |> unbox<std_string_String>
                let _run_target_args'_v1075 = v1087 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1091 : std_string_String = v1065 |> unbox<std_string_String>
                let _run_target_args'_v1075 = v1091 
                #endif
#else
                let v1095 : std_string_String = v1065 |> unbox<std_string_String>
                let _run_target_args'_v1075 = v1095 
                #endif
                let v1098 : std_string_String = _run_target_args'_v1075 
                let v1105 : (std_string_String * std_string_String) = v1032, v1098 
                let func1_from_result = v1105 //
                let v1108 : _ = func1_from_result
                let v1109 : string = $"true; $0 /*"
                let v1110 : bool = Fable.Core.RustInterop.emitRustExpr v1108 v1109 
                let v1111 : string = $"*/ }}); //"
                let v1112 : bool = Fable.Core.RustInterop.emitRustExpr () v1111 
                let v1113 : string = $"_func1_from_v966"
                let v1114 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v1113 
                let v1115 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v1116 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v1114)
                let v1117 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v965, v1116) v1115 
                let v1118 : string = "std::collections::BTreeMap::from_iter(v1117.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v1119 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1118 
                let v1120 : string = "serde_json::to_string(&v1119)"
                let v1121 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v1120 
                (* run_target_args'
                let v1123 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1124 : string = "$0.unwrap()"
                let v1125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1124 
                let _run_target_args'_v1123 = v1125 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1126 : string = "$0.unwrap()"
                let v1127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1126 
                let _run_target_args'_v1123 = v1127 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1128 : string = "$0.unwrap()"
                let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1128 
                let _run_target_args'_v1123 = v1129 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1130 : std_string_String = match v1121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1123 = v1130 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1131 : std_string_String = match v1121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1123 = v1131 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1132 : std_string_String = match v1121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1123 = v1132 
                #endif
#else
                let v1133 : std_string_String = match v1121 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1123 = v1133 
                #endif
                let v1134 : std_string_String = _run_target_args'_v1123 
                let v1137 : string = "fable_library_rust::String_::fromString($0)"
                let v1138 : string = Fable.Core.RustInterop.emitRustExpr v1134 v1137 
                let v1139 : string = "command_result"
                [|struct (v1139, v1138)|]
            else
                let v1141 : string = "fable_library_rust::String_::fromString($0)"
                let v1142 : string = Fable.Core.RustInterop.emitRustExpr v34 v1141 
                let v1143 : bool = v1142 = "cuda"
                if v1143 then
                    let v1144 : string = method182()
                    (* run_target_args'
                    let v1149 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1150 : string = "&*$0"
                    let v1151 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1144 v1150 
                    let _run_target_args'_v1149 = v1151 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1152 : string = "&*$0"
                    let v1153 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1144 v1152 
                    let _run_target_args'_v1149 = v1153 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1154 : string = "&*$0"
                    let v1155 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1144 v1154 
                    let _run_target_args'_v1149 = v1155 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1157 : Ref<Str> = v1144 |> unbox<Ref<Str>>
                    let _run_target_args'_v1149 = v1157 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1161 : Ref<Str> = v1144 |> unbox<Ref<Str>>
                    let _run_target_args'_v1149 = v1161 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1165 : Ref<Str> = v1144 |> unbox<Ref<Str>>
                    let _run_target_args'_v1149 = v1165 
                    #endif
#else
                    let v1169 : Ref<Str> = v1144 |> unbox<Ref<Str>>
                    let _run_target_args'_v1149 = v1169 
                    #endif
                    let v1172 : Ref<Str> = _run_target_args'_v1149 
                    let v1178 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1179 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1172) v1178 
                    let v1182 : (std_string_String -> US7) = method23()
                    let v1183 : US7 option = v1179 |> Option.map v1182 
                    let v1197 : US7 = US7_1
                    let v1198 : US7 = v1183 |> Option.defaultValue v1197 
                    let v1205 : std_string_String =
                        match v1198 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v1202) -> (* Some *)
                            v1202
                    let v1206 : string = "fable_library_rust::String_::fromString($0)"
                    let v1207 : string = Fable.Core.RustInterop.emitRustExpr v1205 v1206 
                    let v1208 : string = method183()
                    (* run_target_args'
                    let v1213 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1214 : string = "&*$0"
                    let v1215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1208 v1214 
                    let _run_target_args'_v1213 = v1215 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1216 : string = "&*$0"
                    let v1217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1208 v1216 
                    let _run_target_args'_v1213 = v1217 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1218 : string = "&*$0"
                    let v1219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1208 v1218 
                    let _run_target_args'_v1213 = v1219 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1221 : Ref<Str> = v1208 |> unbox<Ref<Str>>
                    let _run_target_args'_v1213 = v1221 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1225 : Ref<Str> = v1208 |> unbox<Ref<Str>>
                    let _run_target_args'_v1213 = v1225 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1229 : Ref<Str> = v1208 |> unbox<Ref<Str>>
                    let _run_target_args'_v1213 = v1229 
                    #endif
#else
                    let v1233 : Ref<Str> = v1208 |> unbox<Ref<Str>>
                    let _run_target_args'_v1213 = v1233 
                    #endif
                    let v1236 : Ref<Str> = _run_target_args'_v1213 
                    let v1242 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1243 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1236) v1242 
                    let v1246 : (std_string_String -> US7) = method23()
                    let v1247 : US7 option = v1243 |> Option.map v1246 
                    let v1261 : US7 = US7_1
                    let v1262 : US7 = v1247 |> Option.defaultValue v1261 
                    let v1321 : US36 =
                        match v1262 with
                        | US7_1 -> (* None *)
                            US36_1
                        | US7_0(v1266) -> (* Some *)
                            let v1267 : string = "fable_library_rust::String_::fromString($0)"
                            let v1268 : string = Fable.Core.RustInterop.emitRustExpr v1266 v1267 
                            
                            
                            
                            
                            let v1270 : string = "Poetry"
                            let v1271 : (unit -> string) = v1270.ToLower
                            let v1272 : string = v1271 ()
                            let v1276 : string = "Pip"
                            let v1277 : (unit -> string) = v1276.ToLower
                            let v1278 : string = v1277 ()
                            let v1281 : bool = "Pip" = v1268
                            let v1285 : US37 =
                                if v1281 then
                                    let v1282 : US38 = US38_0
                                    US37_0(v1282)
                                else
                                    US37_1
                            let v1317 : US37 =
                                match v1285 with
                                | US37_1 -> (* None *)
                                    let v1288 : bool = "Poetry" = v1268
                                    let v1292 : US37 =
                                        if v1288 then
                                            let v1289 : US38 = US38_1
                                            US37_0(v1289)
                                        else
                                            US37_1
                                    match v1292 with
                                    | US37_1 -> (* None *)
                                        let v1295 : bool = v1278 = v1268
                                        let v1299 : US37 =
                                            if v1295 then
                                                let v1296 : US38 = US38_0
                                                US37_0(v1296)
                                            else
                                                US37_1
                                        match v1299 with
                                        | US37_1 -> (* None *)
                                            let v1302 : bool = v1272 = v1268
                                            let v1306 : US37 =
                                                if v1302 then
                                                    let v1303 : US38 = US38_1
                                                    US37_0(v1303)
                                                else
                                                    US37_1
                                            match v1306 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v1307) -> (* Some *)
                                                US37_0(v1307)
                                        | US37_0(v1300) -> (* Some *)
                                            US37_0(v1300)
                                    | US37_0(v1293) -> (* Some *)
                                        US37_0(v1293)
                                | US37_0(v1286) -> (* Some *)
                                    US37_0(v1286)
                            US36_0(v1317)
                    let v1328 : US37 =
                        match v1321 with
                        | US36_0(v1322) -> (* Some *)
                            match v1322 with
                            | US37_0(v1323) -> (* Some *)
                                US37_0(v1323)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v1332 : US38 =
                        match v1328 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v1329) -> (* Some *)
                            v1329
                    let v1333 : string = method25()
                    (* run_target_args'
                    let v1338 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1339 : string = "&*$0"
                    let v1340 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1333 v1339 
                    let _run_target_args'_v1338 = v1340 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1341 : string = "&*$0"
                    let v1342 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1333 v1341 
                    let _run_target_args'_v1338 = v1342 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1343 : string = "&*$0"
                    let v1344 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1333 v1343 
                    let _run_target_args'_v1338 = v1344 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1346 : Ref<Str> = v1333 |> unbox<Ref<Str>>
                    let _run_target_args'_v1338 = v1346 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1350 : Ref<Str> = v1333 |> unbox<Ref<Str>>
                    let _run_target_args'_v1338 = v1350 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1354 : Ref<Str> = v1333 |> unbox<Ref<Str>>
                    let _run_target_args'_v1338 = v1354 
                    #endif
#else
                    let v1358 : Ref<Str> = v1333 |> unbox<Ref<Str>>
                    let _run_target_args'_v1338 = v1358 
                    #endif
                    let v1361 : Ref<Str> = _run_target_args'_v1338 
                    let v1367 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v1368 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1361) v1367 
                    let v1371 : (Vec<std_string_String> -> US11) = method26()
                    let v1372 : US11 option = v1368 |> Option.map v1371 
                    let v1386 : US11 = US11_1
                    let v1387 : US11 = v1372 |> Option.defaultValue v1386 
                    let v1391 : (std_string_String []) = [||]
                    let v1392 : string = "$0.to_vec()"
                    let v1393 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1391 v1392 
                    let v1396 : Vec<std_string_String> =
                        match v1387 with
                        | US11_1 -> (* None *)
                            v1393
                        | US11_0(v1394) -> (* Some *)
                            v1394
                    (* run_target_args'
                    let v1401 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v1406 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1407 : string = "std::fs::read(&*$0)"
                    let v1408 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1207 v1407 
                    (* run_target_args'
                    let v1410 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1411 : string = "$0.unwrap()"
                    let v1412 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1408 v1411 
                    let _run_target_args'_v1410 = v1412 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1413 : string = "$0.unwrap()"
                    let v1414 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1408 v1413 
                    let _run_target_args'_v1410 = v1414 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1415 : string = "$0.unwrap()"
                    let v1416 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1408 v1415 
                    let _run_target_args'_v1410 = v1416 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1417 : Vec<uint8> = match v1408 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1410 = v1417 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1418 : Vec<uint8> = match v1408 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1410 = v1418 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1419 : Vec<uint8> = match v1408 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1410 = v1419 
                    #endif
#else
                    let v1420 : Vec<uint8> = match v1408 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1410 = v1420 
                    #endif
                    let v1421 : Vec<uint8> = _run_target_args'_v1410 
                    let _run_target_args'_v1406 = v1421 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1425 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1406 = v1425 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1429 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1406 = v1429 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1433 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1406 = v1433 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1437 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1406 = v1437 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1441 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1406 = v1441 
                    #endif
#else
                    let v1444 : (uint8 []) = v1207 |> System.IO.File.ReadAllBytes
                    let v1445 : string = "$0.to_vec()"
                    let v1446 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1444 v1445 
                    let _run_target_args'_v1406 = v1446 
                    #endif
                    let v1447 : Vec<uint8> = _run_target_args'_v1406 
                    let v1453 : Vec<uint8> = method27(v1447)
                    let v1454 : string = "std::string::String::from_utf8($0)"
                    let v1455 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1453 v1454 
                    (* run_target_args'
                    let v1457 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1458 : string = "$0.unwrap()"
                    let v1459 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1455 v1458 
                    let _run_target_args'_v1457 = v1459 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1460 : string = "$0.unwrap()"
                    let v1461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1455 v1460 
                    let _run_target_args'_v1457 = v1461 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1462 : string = "$0.unwrap()"
                    let v1463 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1455 v1462 
                    let _run_target_args'_v1457 = v1463 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1464 : std_string_String = match v1455 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1457 = v1464 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1465 : std_string_String = match v1455 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1457 = v1465 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1466 : std_string_String = match v1455 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1457 = v1466 
                    #endif
#else
                    let v1467 : std_string_String = match v1455 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1457 = v1467 
                    #endif
                    let v1468 : std_string_String = _run_target_args'_v1457 
                    let v1471 : string = "fable_library_rust::String_::fromString($0)"
                    let v1472 : string = Fable.Core.RustInterop.emitRustExpr v1468 v1471 
                    let _run_target_args'_v1401 = v1472 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1474 : string = null |> unbox<string>
                    let _run_target_args'_v1401 = v1474 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1478 : string = null |> unbox<string>
                    let _run_target_args'_v1401 = v1478 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1482 : string = null |> unbox<string>
                    let _run_target_args'_v1401 = v1482 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1486 : string = null |> unbox<string>
                    let _run_target_args'_v1401 = v1486 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1490 : string = null |> unbox<string>
                    let _run_target_args'_v1401 = v1490 
                    #endif
#else
                    let v1493 : string = v1207 |> System.IO.File.ReadAllText
                    let _run_target_args'_v1401 = v1493 
                    #endif
                    let v1494 : string = _run_target_args'_v1401 
                    let v1500 : string = method34()
                    let v1501 : US5 = method35(v1500)
                    let v1507 : US5 =
                        match v1501 with
                        | US5_1 -> (* None *)
                            let v1504 : string = __SOURCE_DIRECTORY__
                            method35(v1504)
                        | US5_0(v1502) -> (* Some *)
                            US5_0(v1502)
                    let v1513 : US5 =
                        match v1507 with
                        | US5_1 -> (* None *)
                            let v1510 : string = "/workspaces"
                            method35(v1510)
                        | US5_0(v1508) -> (* Some *)
                            US5_0(v1508)
                    let v1517 : string =
                        match v1513 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v1514) -> (* Some *)
                            v1514
                    let v1518 : string = method55(v1517)
                    let v1519 : bool = "deps" = v1518
                    let v1530 : string =
                        if v1519 then
                            let v1520 : string option = method41(v1517)
                            let v1522 : string = v1520 |> Option.get
                            let v1525 : US5 = method35(v1522)
                            match v1525 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v1526) -> (* Some *)
                                v1526
                        else
                            v1517
                    let v1531 : string = "polyglot"
                    let v1532 : string = method36(v1530, v1531)
                    let v1533 : string = method34()
                    let v1535 : (unit -> string) = v1533.ToLower
                    let v1536 : string = v1535 ()
                    let v1540 : (unit -> string) = v1532.ToLower
                    let v1541 : string = v1540 ()
                    let v1545 : bool = v1536.StartsWith (v1541, false, null)
                    let v1550 : US13 =
                        if v1545 then
                            US13_1(v1541)
                        else
                            US13_0(v1541)
                    let v1562 : Result<string, string> =
                        match v1550 with
                        | US13_1(v1556) -> (* Error *)
                            let v1558 : Result<string, string> = Error v1556 
                            v1558
                        | US13_0(v1551) -> (* Ok *)
                            let v1553 : Result<string, string> = Ok v1551 
                            v1553
                    let v1563 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v1564 : bool = Fable.Core.RustInterop.emitRustExpr v1562 v1563 
                    let v1565 : string = "x"
                    let v1566 : string = Fable.Core.RustInterop.emitRustExpr () v1565 
                    let v1567 : string = "true; $0 })"
                    let v1568 : bool = Fable.Core.RustInterop.emitRustExpr v1566 v1567 
                    let v1569 : string = "_result_unwrap_or_else"
                    let v1570 : string = Fable.Core.RustInterop.emitRustExpr () v1569 
                    let v1571 : string option = method41(v1207)
                    let v1574 : string = ""
                    let v1575 : string = v1571 |> Option.defaultValue v1574 
                    let v1583 : string =
                        match v1332 with
                        | US38_0 -> (* Pip *)
                            let v1578 : string = "requirements.txt"
                            method36(v1575, v1578)
                        | US38_1 -> (* Poetry *)
                            let v1580 : string = "pyproject.toml"
                            method36(v1575, v1580)
                    let v1584 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v1585 : bool = Fable.Core.RustInterop.emitRustExpr v1396 v1584 
                    let v1586 : string = "x"
                    let v1587 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1586 
                    let v1588 : string = "fable_library_rust::String_::fromString($0)"
                    let v1589 : string = Fable.Core.RustInterop.emitRustExpr v1587 v1588 
                    let v1591 : string = "="
                    let v1592 : bool = v1589.Contains v1591 
                    let v1606 : string =
                        if v1592 then
                            v1589
                        else
                            let v1596 : string = "]"
                            let v1597 : bool = v1589.EndsWith (v1596, false, null)
                            if v1597 then
                                let v1600 : string = $"={{version='*',features=["
                                let v1601 : string = "["
                                let v1602 : string = v1589.Replace (v1601, v1600)
                                let v1603 : string = $"{v1602}}}"
                                v1603
                            else
                                let v1604 : string = $"{v1589}='*'"
                                v1604
                    let v1607 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v1608 : bool = Fable.Core.RustInterop.emitRustExpr v1606 v1607 
                    let v1609 : string = "_vec_map"
                    let v1610 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1609 
                    let v1611 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v1612 : (string []) = Fable.Core.RustInterop.emitRustExpr v1610 v1611 
                    let v1616 : unit = ()
                    let _let'_v1616 =
                        seq {
                            for i = 0 to v1612.Length - 1 do yield v1612.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v1619 : string seq = _let'_v1616 
                    let v1626 : string = method75()
                    let v1627 : (string -> (string seq -> string)) = String.concat
                    let v1628 : (string seq -> string) = v1627 v1626
                    let v1629 : string = v1628 v1619
                    let v1633 : bool = v1629 = ""
                    let struct (v1690 : int32, v1691 : string) =
                        if v1633 then
                            struct (0, v1574)
                        else
                            let v1673 : string =
                                match v1332 with
                                | US38_0 -> (* Pip *)
                                    v1629
                                | US38_1 -> (* Poetry *)
                                    let v1634 : string = $"[tool.poetry]"
                                    let v1635 : string = $"name = \"test\""
                                    let v1636 : string = "\n"
                                    let v1637 : string = v1634 + v1636 
                                    let v1638 : string = v1637 + v1635 
                                    let v1639 : string = $"version = \"0.0.1\""
                                    let v1640 : string = v1638 + v1636 
                                    let v1641 : string = v1640 + v1639 
                                    let v1642 : string = $"description = \"\""
                                    let v1643 : string = v1641 + v1636 
                                    let v1644 : string = v1643 + v1642 
                                    let v1645 : string = $"authors = []"
                                    let v1646 : string = v1644 + v1636 
                                    let v1647 : string = v1646 + v1645 
                                    let v1648 : string = $""
                                    let v1649 : string = v1647 + v1636 
                                    let v1650 : string = v1649 + v1648 
                                    let v1651 : string = $"[tool.poetry.dependencies]"
                                    let v1652 : string = v1650 + v1636 
                                    let v1653 : string = v1652 + v1651 
                                    let v1654 : string = $"python=\"~3.12\""
                                    let v1655 : string = v1653 + v1636 
                                    let v1656 : string = v1655 + v1654 
                                    let v1657 : string = $"{v1629}"
                                    let v1658 : string = v1656 + v1636 
                                    let v1659 : string = v1658 + v1657 
                                    let v1660 : string = $""
                                    let v1661 : string = v1659 + v1636 
                                    let v1662 : string = v1661 + v1660 
                                    let v1663 : string = $"[build-system]"
                                    let v1664 : string = v1662 + v1636 
                                    let v1665 : string = v1664 + v1663 
                                    let v1666 : string = $"requires = [\"poetry-core\"]"
                                    let v1667 : string = v1665 + v1636 
                                    let v1668 : string = v1667 + v1666 
                                    let v1669 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v1670 : string = v1668 + v1636 
                                    let v1671 : string = v1670 + v1669 
                                    v1671
                            method76(v1583, v1673)
                            let v1674 : System.Threading.CancellationToken option = None
                            let v1675 : (struct (string * string) []) = [||]
                            let v1676 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1677 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1678 : string option = None
                            let v1682 : string =
                                match v1332 with
                                | US38_0 -> (* Pip *)
                                    let v1679 : string = $"pip install -r requirements.txt"
                                    v1679
                                | US38_1 -> (* Poetry *)
                                    let v1680 : string = $"poetry install"
                                    v1680
                            let v1684 : string option = Some v1575 
                            let v1687 : bool = true
                            method101(v1682, v1674, v1675, v1676, v1677, v1687, v1684)
                    let v1693 : bool = v1690 <> 0 
                    let struct (v1879 : US5, v1880 : US5, v1881 : US5, v1882 : US5) =
                        if v1693 then
                            let v1696 : unit = ()
                            let v1697 : (unit -> unit) = closure77(v1332, v1207, v1691, v1690)
                            let v1698 : unit = (fun () -> v1697 (); v1696) ()
                            let v1745 : string = "py"
                            let v1746 : US5 = US5_0(v1745)
                            let v1747 : US5 = US5_1
                            let v1748 : US5 = US5_1
                            let v1749 : US5 = US5_1
                            struct (v1746, v1747, v1748, v1749)
                        else
                            let v1753 : string =
                                match v1332 with
                                | US38_0 -> (* Pip *)
                                    let v1750 : string = $"python \"{v1207}\""
                                    v1750
                                | US38_1 -> (* Poetry *)
                                    let v1751 : string = $"poetry run python \"{v1207}\""
                                    v1751
                            let v1754 : string = "TRACE_LEVEL"
                            let v1755 : string = "Verbose"
                            let v1756 : (struct (string * string) []) = [|struct (v1754, v1755)|]
                            let v1757 : System.Threading.CancellationToken option = None
                            let v1758 : (struct (string * string) []) = [||]
                            let v1759 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1760 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1761 : string option = None
                            let v1763 : string option = Some v1575 
                            let v1766 : bool = true
                            let struct (v1767 : int32, v1768 : string) = method101(v1753, v1757, v1756, v1759, v1760, v1766, v1763)
                            let v1769 : int32 = v1756.Length
                            let v1770 : (string []) = Array.zeroCreate<string> (v1769)
                            let v1771 : Mut5 = {l0 = 0} : Mut5
                            while method32(v1769, v1771) do
                                let v1773 : int32 = v1771.l0
                                let struct (v1774 : string, v1775 : string) = v1756.[int v1773]
                                let v1776 : string = $"$env:{v1774}=''{v1775}''"
                                v1770.[int v1773] <- v1776
                                let v1777 : int32 = v1773 + 1
                                v1771.l0 <- v1777
                                ()
                            let v1779 : string seq = v1770 |> Seq.ofArray
                            let v1783 : (string -> (string seq -> string)) = String.concat
                            let v1784 : string = ";"
                            let v1785 : (string seq -> string) = v1783 v1784
                            let v1786 : string = v1785 v1779
                            let v1789 : string = $"pwsh -c '{v1786}; {v1753}'"
                            let v1790 : bool = v1767 = 0
                            let v1796 : bool =
                                if v1790 then
                                    true
                                else
                                    let v1792 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v1793 : bool = v1768.Contains v1792 
                                    v1793
                            let struct (v1875 : US5, v1876 : US5, v1877 : US5, v1878 : US5) =
                                if v1796 then
                                    let v1797 : (string -> US5) = closure71()
                                    let v1798 : (unit -> string) = closure78(v1768)
                                    let v1799 : (exn -> US5) = closure79(v1207, v1768, v1789)
                                    let v1801 : US5 = US5_1
                                    let result = ref v1801
                                    try
                                        result.Value <- v1798 () |> v1797 
                                    with ex ->
                                        result.Value <- v1799 ex 
                                    let v1802 : US5 = result.Value
                                    let v1813 : string option =
                                        match v1802 with
                                        | US5_1 -> (* None *)
                                            let v1811 : string option = None
                                            v1811
                                        | US5_0(v1806) -> (* Some *)
                                            let v1808 : string option = Some v1806 
                                            v1808
                                    let v1814 : string = "$0.unwrap()"
                                    let v1815 : string = Fable.Core.RustInterop.emitRustExpr v1813 v1814 
                                    let v1816 : string = "py"
                                    let v1817 : US5 = US5_0(v1816)
                                    let v1818 : US5 = US5_0(v1494)
                                    let v1819 : US5 = US5_0(v1207)
                                    let v1820 : US5 = US5_0(v1815)
                                    struct (v1817, v1818, v1819, v1820)
                                else
                                    let v1821 : unit = ()
                                    let v1822 : (unit -> unit) = closure81(v1207, v1768, v1767, v1789)
                                    let v1823 : unit = (fun () -> v1822 (); v1821) ()
                                    let v1870 : string = "py"
                                    let v1871 : US5 = US5_0(v1870)
                                    let v1872 : US5 = US5_1
                                    let v1873 : US5 = US5_1
                                    let v1874 : US5 = US5_1
                                    struct (v1871, v1872, v1873, v1874)
                            struct (v1875, v1876, v1877, v1878)
                    let v1885 : string =
                        match v1879 with
                        | US5_1 -> (* None *)
                            v1574
                        | US5_0(v1883) -> (* Some *)
                            v1883
                    let v1886 : string = "extension"
                    let v1889 : string =
                        match v1880 with
                        | US5_1 -> (* None *)
                            v1574
                        | US5_0(v1887) -> (* Some *)
                            v1887
                    let v1890 : string = "code"
                    let v1893 : string =
                        match v1882 with
                        | US5_1 -> (* None *)
                            v1574
                        | US5_0(v1891) -> (* Some *)
                            v1891
                    let v1894 : string = "output"
                    let v1895 : (struct (string * string) []) = [|struct (v1886, v1885); struct (v1890, v1889); struct (v1894, v1893)|]
                    let v1896 : string = "$0.to_vec()"
                    let v1897 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v1895 v1896 
                    let v1898 : unit = ()
                    let v1899 : string = $"true; let _func1_from_v1898 = Func1::from(move |value| {{ //"
                    let v1900 : bool = Fable.Core.RustInterop.emitRustExpr () v1899 
                    let v1901 : string = $"value"
                    let struct (v1902 : string, v1903 : string) = Fable.Core.RustInterop.emitRustExpr () v1901 
                    (* run_target_args'
                    let v1908 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1909 : string = "&*$0"
                    let v1910 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1902 v1909 
                    let _run_target_args'_v1908 = v1910 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1911 : string = "&*$0"
                    let v1912 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1902 v1911 
                    let _run_target_args'_v1908 = v1912 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1913 : string = "&*$0"
                    let v1914 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1902 v1913 
                    let _run_target_args'_v1908 = v1914 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1916 : Ref<Str> = v1902 |> unbox<Ref<Str>>
                    let _run_target_args'_v1908 = v1916 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1920 : Ref<Str> = v1902 |> unbox<Ref<Str>>
                    let _run_target_args'_v1908 = v1920 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1924 : Ref<Str> = v1902 |> unbox<Ref<Str>>
                    let _run_target_args'_v1908 = v1924 
                    #endif
#else
                    let v1928 : Ref<Str> = v1902 |> unbox<Ref<Str>>
                    let _run_target_args'_v1908 = v1928 
                    #endif
                    let v1931 : Ref<Str> = _run_target_args'_v1908 
                    (* run_target_args'
                    let v1941 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1942 : string = "String::from($0)"
                    let v1943 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1931 v1942 
                    let _run_target_args'_v1941 = v1943 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1944 : string = "String::from($0)"
                    let v1945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1931 v1944 
                    let _run_target_args'_v1941 = v1945 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1946 : string = "String::from($0)"
                    let v1947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1931 v1946 
                    let _run_target_args'_v1941 = v1947 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1949 : std_string_String = v1931 |> unbox<std_string_String>
                    let _run_target_args'_v1941 = v1949 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1953 : std_string_String = v1931 |> unbox<std_string_String>
                    let _run_target_args'_v1941 = v1953 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1957 : std_string_String = v1931 |> unbox<std_string_String>
                    let _run_target_args'_v1941 = v1957 
                    #endif
#else
                    let v1961 : std_string_String = v1931 |> unbox<std_string_String>
                    let _run_target_args'_v1941 = v1961 
                    #endif
                    let v1964 : std_string_String = _run_target_args'_v1941 
                    (* run_target_args'
                    let v1974 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1975 : string = "&*$0"
                    let v1976 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1903 v1975 
                    let _run_target_args'_v1974 = v1976 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1977 : string = "&*$0"
                    let v1978 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1903 v1977 
                    let _run_target_args'_v1974 = v1978 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1979 : string = "&*$0"
                    let v1980 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1903 v1979 
                    let _run_target_args'_v1974 = v1980 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1982 : Ref<Str> = v1903 |> unbox<Ref<Str>>
                    let _run_target_args'_v1974 = v1982 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1986 : Ref<Str> = v1903 |> unbox<Ref<Str>>
                    let _run_target_args'_v1974 = v1986 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1990 : Ref<Str> = v1903 |> unbox<Ref<Str>>
                    let _run_target_args'_v1974 = v1990 
                    #endif
#else
                    let v1994 : Ref<Str> = v1903 |> unbox<Ref<Str>>
                    let _run_target_args'_v1974 = v1994 
                    #endif
                    let v1997 : Ref<Str> = _run_target_args'_v1974 
                    (* run_target_args'
                    let v2007 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2008 : string = "String::from($0)"
                    let v2009 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1997 v2008 
                    let _run_target_args'_v2007 = v2009 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2010 : string = "String::from($0)"
                    let v2011 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1997 v2010 
                    let _run_target_args'_v2007 = v2011 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2012 : string = "String::from($0)"
                    let v2013 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1997 v2012 
                    let _run_target_args'_v2007 = v2013 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2015 : std_string_String = v1997 |> unbox<std_string_String>
                    let _run_target_args'_v2007 = v2015 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2019 : std_string_String = v1997 |> unbox<std_string_String>
                    let _run_target_args'_v2007 = v2019 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2023 : std_string_String = v1997 |> unbox<std_string_String>
                    let _run_target_args'_v2007 = v2023 
                    #endif
#else
                    let v2027 : std_string_String = v1997 |> unbox<std_string_String>
                    let _run_target_args'_v2007 = v2027 
                    #endif
                    let v2030 : std_string_String = _run_target_args'_v2007 
                    let v2037 : (std_string_String * std_string_String) = v1964, v2030 
                    let func1_from_result = v2037 //
                    let v2040 : _ = func1_from_result
                    let v2041 : string = $"true; $0 /*"
                    let v2042 : bool = Fable.Core.RustInterop.emitRustExpr v2040 v2041 
                    let v2043 : string = $"*/ }}); //"
                    let v2044 : bool = Fable.Core.RustInterop.emitRustExpr () v2043 
                    let v2045 : string = $"_func1_from_v1898"
                    let v2046 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v2045 
                    let v2047 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v2048 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v2046)
                    let v2049 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v1897, v2048) v2047 
                    let v2050 : string = "std::collections::BTreeMap::from_iter(v2049.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v2051 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2050 
                    let v2052 : string = "serde_json::to_string(&v2051)"
                    let v2053 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2052 
                    (* run_target_args'
                    let v2055 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2056 : string = "$0.unwrap()"
                    let v2057 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2053 v2056 
                    let _run_target_args'_v2055 = v2057 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2058 : string = "$0.unwrap()"
                    let v2059 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2053 v2058 
                    let _run_target_args'_v2055 = v2059 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2060 : string = "$0.unwrap()"
                    let v2061 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2053 v2060 
                    let _run_target_args'_v2055 = v2061 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2062 : std_string_String = match v2053 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2055 = v2062 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2063 : std_string_String = match v2053 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2055 = v2063 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2064 : std_string_String = match v2053 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2055 = v2064 
                    #endif
#else
                    let v2065 : std_string_String = match v2053 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2055 = v2065 
                    #endif
                    let v2066 : std_string_String = _run_target_args'_v2055 
                    let v2069 : string = "fable_library_rust::String_::fromString($0)"
                    let v2070 : string = Fable.Core.RustInterop.emitRustExpr v2066 v2069 
                    let v2071 : string = "command_result"
                    [|struct (v2071, v2070)|]
                else
                    let v2073 : string = "fable_library_rust::String_::fromString($0)"
                    let v2074 : string = Fable.Core.RustInterop.emitRustExpr v34 v2073 
                    let v2075 : bool = v2074 = "fable"
                    if v2075 then
                        let v2076 : string = method189()
                        (* run_target_args'
                        let v2081 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2082 : string = "&*$0"
                        let v2083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2076 v2082 
                        let _run_target_args'_v2081 = v2083 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2084 : string = "&*$0"
                        let v2085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2076 v2084 
                        let _run_target_args'_v2081 = v2085 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2086 : string = "&*$0"
                        let v2087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2076 v2086 
                        let _run_target_args'_v2081 = v2087 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2089 : Ref<Str> = v2076 |> unbox<Ref<Str>>
                        let _run_target_args'_v2081 = v2089 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2093 : Ref<Str> = v2076 |> unbox<Ref<Str>>
                        let _run_target_args'_v2081 = v2093 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2097 : Ref<Str> = v2076 |> unbox<Ref<Str>>
                        let _run_target_args'_v2081 = v2097 
                        #endif
#else
                        let v2101 : Ref<Str> = v2076 |> unbox<Ref<Str>>
                        let _run_target_args'_v2081 = v2101 
                        #endif
                        let v2104 : Ref<Str> = _run_target_args'_v2081 
                        let v2110 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2111 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2104) v2110 
                        let v2114 : (std_string_String -> US7) = method23()
                        let v2115 : US7 option = v2111 |> Option.map v2114 
                        let v2129 : US7 = US7_1
                        let v2130 : US7 = v2115 |> Option.defaultValue v2129 
                        let v2137 : std_string_String =
                            match v2130 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v2134) -> (* Some *)
                                v2134
                        let v2138 : string = "fable_library_rust::String_::fromString($0)"
                        let v2139 : string = Fable.Core.RustInterop.emitRustExpr v2137 v2138 
                        let v2140 : string = method190()
                        (* run_target_args'
                        let v2145 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2146 : string = "&*$0"
                        let v2147 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2140 v2146 
                        let _run_target_args'_v2145 = v2147 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2148 : string = "&*$0"
                        let v2149 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2140 v2148 
                        let _run_target_args'_v2145 = v2149 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2150 : string = "&*$0"
                        let v2151 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2140 v2150 
                        let _run_target_args'_v2145 = v2151 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2153 : Ref<Str> = v2140 |> unbox<Ref<Str>>
                        let _run_target_args'_v2145 = v2153 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2157 : Ref<Str> = v2140 |> unbox<Ref<Str>>
                        let _run_target_args'_v2145 = v2157 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2161 : Ref<Str> = v2140 |> unbox<Ref<Str>>
                        let _run_target_args'_v2145 = v2161 
                        #endif
#else
                        let v2165 : Ref<Str> = v2140 |> unbox<Ref<Str>>
                        let _run_target_args'_v2145 = v2165 
                        #endif
                        let v2168 : Ref<Str> = _run_target_args'_v2145 
                        let v2174 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2175 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2168) v2174 
                        let v2178 : (std_string_String -> US7) = method23()
                        let v2179 : US7 option = v2175 |> Option.map v2178 
                        let v2193 : US7 = US7_1
                        let v2194 : US7 = v2179 |> Option.defaultValue v2193 
                        let v2204 : US5 =
                            match v2194 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v2198) -> (* Some *)
                                let v2199 : string = "fable_library_rust::String_::fromString($0)"
                                let v2200 : string = Fable.Core.RustInterop.emitRustExpr v2198 v2199 
                                US5_0(v2200)
                        let v2316 : string =
                            match v2204 with
                            | US5_1 -> (* None *)
                                let v2314 : string = "{}"
                                v2314
                            | US5_0(v2205) -> (* Some *)
                                let v2206 : clap_Command = method0()
                                let v2207 : string = $"_ {v2205} --fs-path \"{v2139}\""
                                let v2208 : US25 = method116(v2207)
                                let v2217 : (string []) =
                                    match v2208 with
                                    | US25_1(v2210) -> (* Error *)
                                        let v2212 : string = $"resultm.get / Result value was Error: {v2210}"
                                        failwith<(string [])> v2212
                                    | US25_0(v2209) -> (* Ok *)
                                        v2209
                                let v2218 : string = "$0.to_vec()"
                                let v2219 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v2217 v2218 
                                let v2220 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v2221 : bool = Fable.Core.RustInterop.emitRustExpr v2219 v2220 
                                let v2222 : string = "x"
                                let v2223 : string = Fable.Core.RustInterop.emitRustExpr () v2222 
                                (* run_target_args'
                                let v2228 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2229 : string = "&*$0"
                                let v2230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2223 v2229 
                                let _run_target_args'_v2228 = v2230 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2231 : string = "&*$0"
                                let v2232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2223 v2231 
                                let _run_target_args'_v2228 = v2232 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2233 : string = "&*$0"
                                let v2234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2223 v2233 
                                let _run_target_args'_v2228 = v2234 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2236 : Ref<Str> = v2223 |> unbox<Ref<Str>>
                                let _run_target_args'_v2228 = v2236 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2240 : Ref<Str> = v2223 |> unbox<Ref<Str>>
                                let _run_target_args'_v2228 = v2240 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2244 : Ref<Str> = v2223 |> unbox<Ref<Str>>
                                let _run_target_args'_v2228 = v2244 
                                #endif
#else
                                let v2248 : Ref<Str> = v2223 |> unbox<Ref<Str>>
                                let _run_target_args'_v2228 = v2248 
                                #endif
                                let v2251 : Ref<Str> = _run_target_args'_v2228 
                                (* run_target_args'
                                let v2261 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2262 : string = "String::from($0)"
                                let v2263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2251 v2262 
                                let _run_target_args'_v2261 = v2263 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2264 : string = "String::from($0)"
                                let v2265 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2251 v2264 
                                let _run_target_args'_v2261 = v2265 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2266 : string = "String::from($0)"
                                let v2267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2251 v2266 
                                let _run_target_args'_v2261 = v2267 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2269 : std_string_String = v2251 |> unbox<std_string_String>
                                let _run_target_args'_v2261 = v2269 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2273 : std_string_String = v2251 |> unbox<std_string_String>
                                let _run_target_args'_v2261 = v2273 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2277 : std_string_String = v2251 |> unbox<std_string_String>
                                let _run_target_args'_v2261 = v2277 
                                #endif
#else
                                let v2281 : std_string_String = v2251 |> unbox<std_string_String>
                                let _run_target_args'_v2261 = v2281 
                                #endif
                                let v2284 : std_string_String = _run_target_args'_v2261 
                                let v2290 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v2291 : bool = Fable.Core.RustInterop.emitRustExpr v2284 v2290 
                                let v2292 : string = "_vec_map"
                                let v2293 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2292 
                                let v2294 : string = "clap::Command::get_matches_from($0, v2293)"
                                let v2295 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v2206 v2294 
                                let v2296 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v2295)
                                let v2297 : string = "v2296.await"
                                let v2298 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v2297 
                                (* run_target_args'
                                let v2300 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2301 : string = "$0.unwrap()"
                                let v2302 : string = Fable.Core.RustInterop.emitRustExpr v2298 v2301 
                                let _run_target_args'_v2300 = v2302 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2303 : string = "$0.unwrap()"
                                let v2304 : string = Fable.Core.RustInterop.emitRustExpr v2298 v2303 
                                let _run_target_args'_v2300 = v2304 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2305 : string = "$0.unwrap()"
                                let v2306 : string = Fable.Core.RustInterop.emitRustExpr v2298 v2305 
                                let _run_target_args'_v2300 = v2306 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2307 : string = match v2298 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2300 = v2307 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2308 : string = match v2298 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2300 = v2308 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2309 : string = match v2298 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2300 = v2309 
                                #endif
#else
                                let v2310 : string = match v2298 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2300 = v2310 
                                #endif
                                let v2311 : string = _run_target_args'_v2300 
                                v2311
                        let v2317 : string = "command_result"
                        [|struct (v2317, v2316)|]
                    else
                        let v2319 : string = "fable_library_rust::String_::fromString($0)"
                        let v2320 : string = Fable.Core.RustInterop.emitRustExpr v34 v2319 
                        let v2321 : bool = v2320 = "dib"
                        if v2321 then
                            let v2322 : string = method191()
                            (* run_target_args'
                            let v2327 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2328 : string = "&*$0"
                            let v2329 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2322 v2328 
                            let _run_target_args'_v2327 = v2329 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2330 : string = "&*$0"
                            let v2331 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2322 v2330 
                            let _run_target_args'_v2327 = v2331 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2332 : string = "&*$0"
                            let v2333 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2322 v2332 
                            let _run_target_args'_v2327 = v2333 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2335 : Ref<Str> = v2322 |> unbox<Ref<Str>>
                            let _run_target_args'_v2327 = v2335 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2339 : Ref<Str> = v2322 |> unbox<Ref<Str>>
                            let _run_target_args'_v2327 = v2339 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2343 : Ref<Str> = v2322 |> unbox<Ref<Str>>
                            let _run_target_args'_v2327 = v2343 
                            #endif
#else
                            let v2347 : Ref<Str> = v2322 |> unbox<Ref<Str>>
                            let _run_target_args'_v2327 = v2347 
                            #endif
                            let v2350 : Ref<Str> = _run_target_args'_v2327 
                            let v2356 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2357 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2350) v2356 
                            let v2360 : (std_string_String -> string) = method192()
                            let v2361 : string option = v2357 |> Option.map v2360 
                            let v2375 : string = "$0.unwrap()"
                            let v2376 : string = Fable.Core.RustInterop.emitRustExpr v2361 v2375 
                            let v2377 : string = method194()
                            (* run_target_args'
                            let v2382 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2383 : string = "&*$0"
                            let v2384 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2377 v2383 
                            let _run_target_args'_v2382 = v2384 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2385 : string = "&*$0"
                            let v2386 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2377 v2385 
                            let _run_target_args'_v2382 = v2386 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2387 : string = "&*$0"
                            let v2388 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2377 v2387 
                            let _run_target_args'_v2382 = v2388 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2390 : Ref<Str> = v2377 |> unbox<Ref<Str>>
                            let _run_target_args'_v2382 = v2390 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2394 : Ref<Str> = v2377 |> unbox<Ref<Str>>
                            let _run_target_args'_v2382 = v2394 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2398 : Ref<Str> = v2377 |> unbox<Ref<Str>>
                            let _run_target_args'_v2382 = v2398 
                            #endif
#else
                            let v2402 : Ref<Str> = v2377 |> unbox<Ref<Str>>
                            let _run_target_args'_v2382 = v2402 
                            #endif
                            let v2405 : Ref<Str> = _run_target_args'_v2382 
                            let v2411 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2412 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2405) v2411 
                            let v2414 : uint8 = v2412 |> Option.defaultValue 1uy 
                            let v2417 : string = method195()
                            (* run_target_args'
                            let v2422 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2423 : string = "&*$0"
                            let v2424 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2417 v2423 
                            let _run_target_args'_v2422 = v2424 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2425 : string = "&*$0"
                            let v2426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2417 v2425 
                            let _run_target_args'_v2422 = v2426 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2427 : string = "&*$0"
                            let v2428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2417 v2427 
                            let _run_target_args'_v2422 = v2428 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2430 : Ref<Str> = v2417 |> unbox<Ref<Str>>
                            let _run_target_args'_v2422 = v2430 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2434 : Ref<Str> = v2417 |> unbox<Ref<Str>>
                            let _run_target_args'_v2422 = v2434 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2438 : Ref<Str> = v2417 |> unbox<Ref<Str>>
                            let _run_target_args'_v2422 = v2438 
                            #endif
#else
                            let v2442 : Ref<Str> = v2417 |> unbox<Ref<Str>>
                            let _run_target_args'_v2422 = v2442 
                            #endif
                            let v2445 : Ref<Str> = _run_target_args'_v2422 
                            let v2451 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2452 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2445) v2451 
                            let v2455 : (std_string_String -> US7) = method23()
                            let v2456 : US7 option = v2452 |> Option.map v2455 
                            let v2470 : US7 = US7_1
                            let v2471 : US7 = v2456 |> Option.defaultValue v2470 
                            let v2481 : US5 =
                                match v2471 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v2475) -> (* Some *)
                                    let v2476 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2477 : string = Fable.Core.RustInterop.emitRustExpr v2475 v2476 
                                    US5_0(v2477)
                            let v2482 : uint8 = 1uy
                            let struct (v2483 : int32, v2484 : string) = method196(v2481, v2414, v2376, v2482)
                            let v2486 : bool = v2483 <> 0 
                            let struct (v2839 : int32, v2840 : string) =
                                if v2486 then
                                    struct (v2483, v2484)
                                else
                                    let v2489 : System.Threading.CancellationToken option = None
                                    let v2490 : (struct (string * string) []) = [||]
                                    let v2491 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v2492 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v2493 : string option = None
                                    let v2494 : string = $"jupyter nbconvert \"{v2376}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v2495 : bool = true
                                    let struct (v2496 : int32, v2497 : string) = method101(v2494, v2489, v2490, v2491, v2492, v2495, v2493)
                                    let v2498 : unit = ()
                                    let v2499 : (unit -> unit) = closure84(v2497, v2496)
                                    let v2500 : unit = (fun () -> v2499 (); v2498) ()
                                    let v2549 : bool = v2496 <> 0 
                                    if v2549 then
                                        let v2552 : string = $"repl_result: {v2484}

jupyter_result: {v2497}"
                                        struct (v2496, v2552)
                                    else
                                        let v2553 : string = "'"
                                        let v2554 : string = "''"
                                        let v2555 : string = v2376.Replace (v2553, v2554)
                                        let v2556 : System.Threading.CancellationToken option = None
                                        let v2557 : (struct (string * string) []) = [||]
                                        let v2558 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2559 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2560 : string option = None
                                        let v2561 : string = $"pwsh -c \"$counter = 1; $path = '{v2555}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v2562 : bool = true
                                        let struct (v2563 : int32, v2564 : string) = method101(v2561, v2556, v2557, v2558, v2559, v2562, v2560)
                                        let v2565 : unit = ()
                                        let v2566 : (unit -> unit) = closure85(v2564, v2563)
                                        let v2567 : unit = (fun () -> v2566 (); v2565) ()
                                        let v2615 : string = $"{v2376}.html"
                                        (* run_target_args'
                                        let v2620 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2625 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2626 : string = "std::fs::read(&*$0)"
                                        let v2627 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2615 v2626 
                                        (* run_target_args'
                                        let v2629 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2630 : string = "$0.unwrap()"
                                        let v2631 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2627 v2630 
                                        let _run_target_args'_v2629 = v2631 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2632 : string = "$0.unwrap()"
                                        let v2633 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2627 v2632 
                                        let _run_target_args'_v2629 = v2633 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2634 : string = "$0.unwrap()"
                                        let v2635 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2627 v2634 
                                        let _run_target_args'_v2629 = v2635 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2636 : Vec<uint8> = match v2627 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2629 = v2636 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2637 : Vec<uint8> = match v2627 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2629 = v2637 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2638 : Vec<uint8> = match v2627 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2629 = v2638 
                                        #endif
#else
                                        let v2639 : Vec<uint8> = match v2627 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2629 = v2639 
                                        #endif
                                        let v2640 : Vec<uint8> = _run_target_args'_v2629 
                                        let _run_target_args'_v2625 = v2640 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2644 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2625 = v2644 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2648 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2625 = v2648 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2652 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2625 = v2652 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2656 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2625 = v2656 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2660 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2625 = v2660 
                                        #endif
#else
                                        let v2663 : (uint8 []) = v2615 |> System.IO.File.ReadAllBytes
                                        let v2664 : string = "$0.to_vec()"
                                        let v2665 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2663 v2664 
                                        let _run_target_args'_v2625 = v2665 
                                        #endif
                                        let v2666 : Vec<uint8> = _run_target_args'_v2625 
                                        let v2672 : Vec<uint8> = method27(v2666)
                                        let v2673 : string = "std::string::String::from_utf8($0)"
                                        let v2674 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2672 v2673 
                                        (* run_target_args'
                                        let v2676 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2677 : string = "$0.unwrap()"
                                        let v2678 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2674 v2677 
                                        let _run_target_args'_v2676 = v2678 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2679 : string = "$0.unwrap()"
                                        let v2680 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2674 v2679 
                                        let _run_target_args'_v2676 = v2680 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2681 : string = "$0.unwrap()"
                                        let v2682 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2674 v2681 
                                        let _run_target_args'_v2676 = v2682 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2683 : std_string_String = match v2674 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2676 = v2683 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2684 : std_string_String = match v2674 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2676 = v2684 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2685 : std_string_String = match v2674 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2676 = v2685 
                                        #endif
#else
                                        let v2686 : std_string_String = match v2674 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2676 = v2686 
                                        #endif
                                        let v2687 : std_string_String = _run_target_args'_v2676 
                                        let v2690 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2691 : string = Fable.Core.RustInterop.emitRustExpr v2687 v2690 
                                        let _run_target_args'_v2620 = v2691 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2693 : string = null |> unbox<string>
                                        let _run_target_args'_v2620 = v2693 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2697 : string = null |> unbox<string>
                                        let _run_target_args'_v2620 = v2697 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2701 : string = null |> unbox<string>
                                        let _run_target_args'_v2620 = v2701 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2705 : string = null |> unbox<string>
                                        let _run_target_args'_v2620 = v2705 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2709 : string = null |> unbox<string>
                                        let _run_target_args'_v2620 = v2709 
                                        #endif
#else
                                        let v2712 : string = v2615 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2620 = v2712 
                                        #endif
                                        let v2713 : string = _run_target_args'_v2620 
                                        let v2719 : string = "\r\n"
                                        let v2720 : string = "\n"
                                        let v2721 : string = v2713.Replace (v2719, v2720)
                                        let v2722 : string = $"{v2376}.html"
                                        (* run_target_args'
                                        let v2723 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2724 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2722, v2721) v2724 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2722, v2721)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2725 : string = $"{v2376}.ipynb"
                                        (* run_target_args'
                                        let v2730 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2735 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2736 : string = "std::fs::read(&*$0)"
                                        let v2737 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2725 v2736 
                                        (* run_target_args'
                                        let v2739 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2740 : string = "$0.unwrap()"
                                        let v2741 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2737 v2740 
                                        let _run_target_args'_v2739 = v2741 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2742 : string = "$0.unwrap()"
                                        let v2743 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2737 v2742 
                                        let _run_target_args'_v2739 = v2743 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2744 : string = "$0.unwrap()"
                                        let v2745 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2737 v2744 
                                        let _run_target_args'_v2739 = v2745 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2746 : Vec<uint8> = match v2737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2739 = v2746 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2747 : Vec<uint8> = match v2737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2739 = v2747 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2748 : Vec<uint8> = match v2737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2739 = v2748 
                                        #endif
#else
                                        let v2749 : Vec<uint8> = match v2737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2739 = v2749 
                                        #endif
                                        let v2750 : Vec<uint8> = _run_target_args'_v2739 
                                        let _run_target_args'_v2735 = v2750 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2754 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2735 = v2754 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2758 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2735 = v2758 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2762 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2735 = v2762 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2766 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2735 = v2766 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2770 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2735 = v2770 
                                        #endif
#else
                                        let v2773 : (uint8 []) = v2725 |> System.IO.File.ReadAllBytes
                                        let v2774 : string = "$0.to_vec()"
                                        let v2775 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2773 v2774 
                                        let _run_target_args'_v2735 = v2775 
                                        #endif
                                        let v2776 : Vec<uint8> = _run_target_args'_v2735 
                                        let v2782 : Vec<uint8> = method27(v2776)
                                        let v2783 : string = "std::string::String::from_utf8($0)"
                                        let v2784 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2782 v2783 
                                        (* run_target_args'
                                        let v2786 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2787 : string = "$0.unwrap()"
                                        let v2788 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2784 v2787 
                                        let _run_target_args'_v2786 = v2788 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2789 : string = "$0.unwrap()"
                                        let v2790 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2784 v2789 
                                        let _run_target_args'_v2786 = v2790 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2791 : string = "$0.unwrap()"
                                        let v2792 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2784 v2791 
                                        let _run_target_args'_v2786 = v2792 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2793 : std_string_String = match v2784 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2786 = v2793 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2794 : std_string_String = match v2784 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2786 = v2794 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2795 : std_string_String = match v2784 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2786 = v2795 
                                        #endif
#else
                                        let v2796 : std_string_String = match v2784 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2786 = v2796 
                                        #endif
                                        let v2797 : std_string_String = _run_target_args'_v2786 
                                        let v2800 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2801 : string = Fable.Core.RustInterop.emitRustExpr v2797 v2800 
                                        let _run_target_args'_v2730 = v2801 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2803 : string = null |> unbox<string>
                                        let _run_target_args'_v2730 = v2803 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2807 : string = null |> unbox<string>
                                        let _run_target_args'_v2730 = v2807 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2811 : string = null |> unbox<string>
                                        let _run_target_args'_v2730 = v2811 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2815 : string = null |> unbox<string>
                                        let _run_target_args'_v2730 = v2815 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2819 : string = null |> unbox<string>
                                        let _run_target_args'_v2730 = v2819 
                                        #endif
#else
                                        let v2822 : string = v2725 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2730 = v2822 
                                        #endif
                                        let v2823 : string = _run_target_args'_v2730 
                                        let v2829 : string = v2823.Replace (v2719, v2720)
                                        let v2830 : string = "\\r\\n"
                                        let v2831 : string = "\\n"
                                        let v2832 : string = v2829.Replace (v2830, v2831)
                                        let v2833 : string = $"{v2376}.ipynb"
                                        (* run_target_args'
                                        let v2834 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2835 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2833, v2832) v2835 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2833, v2832)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2836 : string = $"repl_result: {v2484}

jupyter_result: {v2497}

pwsh_replace_html_result: {v2564}"
                                        struct (v2563, v2836)
                            let v2841 : unit = ()
                            let v2842 : (unit -> unit) = closure86(v2840, v2839)
                            let v2843 : unit = (fun () -> v2842 (); v2841) ()
                            let v2892 : bool = v2839 <> 0 
                            if v2892 then
                                let v2895 : string = $"spiral.run / dib / exit_code: {v2839} / result: {v2840}"
                                failwith<unit> v2895
                            let v2896 : string = "stdio"
                            [|struct (v2896, v2840)|]
                        else
                            let v2898 : string = "fable_library_rust::String_::fromString($0)"
                            let v2899 : string = Fable.Core.RustInterop.emitRustExpr v34 v2898 
                            let v2900 : bool = v2899 = "rust"
                            let struct (v6544 : US5, v6545 : US5, v6546 : US5, v6547 : US5) =
                                if v2900 then
                                    let v2901 : string = method189()
                                    (* run_target_args'
                                    let v2906 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2907 : string = "&*$0"
                                    let v2908 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2901 v2907 
                                    let _run_target_args'_v2906 = v2908 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2909 : string = "&*$0"
                                    let v2910 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2901 v2909 
                                    let _run_target_args'_v2906 = v2910 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2911 : string = "&*$0"
                                    let v2912 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2901 v2911 
                                    let _run_target_args'_v2906 = v2912 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2914 : Ref<Str> = v2901 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2906 = v2914 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2918 : Ref<Str> = v2901 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2906 = v2918 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2922 : Ref<Str> = v2901 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2906 = v2922 
                                    #endif
#else
                                    let v2926 : Ref<Str> = v2901 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2906 = v2926 
                                    #endif
                                    let v2929 : Ref<Str> = _run_target_args'_v2906 
                                    let v2935 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v2936 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2929) v2935 
                                    let v2939 : (std_string_String -> US7) = method23()
                                    let v2940 : US7 option = v2936 |> Option.map v2939 
                                    let v2954 : US7 = US7_1
                                    let v2955 : US7 = v2940 |> Option.defaultValue v2954 
                                    let v2962 : std_string_String =
                                        match v2955 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v2959) -> (* Some *)
                                            v2959
                                    let v2963 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2964 : string = Fable.Core.RustInterop.emitRustExpr v2962 v2963 
                                    let v2965 : string = method25()
                                    (* run_target_args'
                                    let v2970 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2971 : string = "&*$0"
                                    let v2972 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2965 v2971 
                                    let _run_target_args'_v2970 = v2972 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2973 : string = "&*$0"
                                    let v2974 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2965 v2973 
                                    let _run_target_args'_v2970 = v2974 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2975 : string = "&*$0"
                                    let v2976 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2965 v2975 
                                    let _run_target_args'_v2970 = v2976 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2978 : Ref<Str> = v2965 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2970 = v2978 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2982 : Ref<Str> = v2965 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2970 = v2982 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2986 : Ref<Str> = v2965 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2970 = v2986 
                                    #endif
#else
                                    let v2990 : Ref<Str> = v2965 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2970 = v2990 
                                    #endif
                                    let v2993 : Ref<Str> = _run_target_args'_v2970 
                                    let v2999 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v3000 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2993) v2999 
                                    let v3003 : (Vec<std_string_String> -> US11) = method26()
                                    let v3004 : US11 option = v3000 |> Option.map v3003 
                                    let v3018 : US11 = US11_1
                                    let v3019 : US11 = v3004 |> Option.defaultValue v3018 
                                    let v3023 : (std_string_String []) = [||]
                                    let v3024 : string = "$0.to_vec()"
                                    let v3025 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3023 v3024 
                                    let v3028 : Vec<std_string_String> =
                                        match v3019 with
                                        | US11_1 -> (* None *)
                                            v3025
                                        | US11_0(v3026) -> (* Some *)
                                            v3026
                                    let v3029 : string = method205()
                                    (* run_target_args'
                                    let v3034 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3035 : string = "&*$0"
                                    let v3036 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3029 v3035 
                                    let _run_target_args'_v3034 = v3036 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3037 : string = "&*$0"
                                    let v3038 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3029 v3037 
                                    let _run_target_args'_v3034 = v3038 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3039 : string = "&*$0"
                                    let v3040 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3029 v3039 
                                    let _run_target_args'_v3034 = v3040 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3042 : Ref<Str> = v3029 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3034 = v3042 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3046 : Ref<Str> = v3029 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3034 = v3046 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3050 : Ref<Str> = v3029 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3034 = v3050 
                                    #endif
#else
                                    let v3054 : Ref<Str> = v3029 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3034 = v3054 
                                    #endif
                                    let v3057 : Ref<Str> = _run_target_args'_v3034 
                                    let v3063 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v3064 : bool = Fable.Core.RustInterop.emitRustExpr struct (v35, v3057) v3063 
                                    let v3065 : string = method206()
                                    (* run_target_args'
                                    let v3070 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3071 : string = "&*$0"
                                    let v3072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3065 v3071 
                                    let _run_target_args'_v3070 = v3072 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3073 : string = "&*$0"
                                    let v3074 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3065 v3073 
                                    let _run_target_args'_v3070 = v3074 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3075 : string = "&*$0"
                                    let v3076 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3065 v3075 
                                    let _run_target_args'_v3070 = v3076 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3078 : Ref<Str> = v3065 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3070 = v3078 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3082 : Ref<Str> = v3065 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3070 = v3082 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3086 : Ref<Str> = v3065 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3070 = v3086 
                                    #endif
#else
                                    let v3090 : Ref<Str> = v3065 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3070 = v3090 
                                    #endif
                                    let v3093 : Ref<Str> = _run_target_args'_v3070 
                                    let v3099 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3100 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v3093) v3099 
                                    let v3103 : (std_string_String -> US7) = method23()
                                    let v3104 : US7 option = v3100 |> Option.map v3103 
                                    let v3118 : US7 = US7_1
                                    let v3119 : US7 = v3104 |> Option.defaultValue v3118 
                                    let v3129 : US5 =
                                        match v3119 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3123) -> (* Some *)
                                            let v3124 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3125 : string = Fable.Core.RustInterop.emitRustExpr v3123 v3124 
                                            US5_0(v3125)
                                    let v3130 : string = method207()
                                    (* run_target_args'
                                    let v3135 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3136 : string = "&*$0"
                                    let v3137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3130 v3136 
                                    let _run_target_args'_v3135 = v3137 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3138 : string = "&*$0"
                                    let v3139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3130 v3138 
                                    let _run_target_args'_v3135 = v3139 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3140 : string = "&*$0"
                                    let v3141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3130 v3140 
                                    let _run_target_args'_v3135 = v3141 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3143 : Ref<Str> = v3130 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3135 = v3143 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3147 : Ref<Str> = v3130 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3135 = v3147 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3151 : Ref<Str> = v3130 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3135 = v3151 
                                    #endif
#else
                                    let v3155 : Ref<Str> = v3130 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3135 = v3155 
                                    #endif
                                    let v3158 : Ref<Str> = _run_target_args'_v3135 
                                    let v3164 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3165 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v3158) v3164 
                                    let v3168 : (std_string_String -> US7) = method23()
                                    let v3169 : US7 option = v3165 |> Option.map v3168 
                                    let v3183 : US7 = US7_1
                                    let v3184 : US7 = v3169 |> Option.defaultValue v3183 
                                    let v3194 : US5 =
                                        match v3184 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3188) -> (* Some *)
                                            let v3189 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3190 : string = Fable.Core.RustInterop.emitRustExpr v3188 v3189 
                                            US5_0(v3190)
                                    let v3203 : US39 =
                                        match v3129 with
                                        | US5_0(v3195) -> (* Some *)
                                            let v3196 : US40 = US40_0(v3195)
                                            US39_0(v3196)
                                        | _ ->
                                            match v3194 with
                                            | US5_0(v3198) -> (* Some *)
                                                let v3199 : US40 = US40_1(v3198)
                                                US39_0(v3199)
                                            | _ ->
                                                US39_1
                                    (* run_target_args'
                                    let v3208 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v3213 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3214 : string = "std::fs::read(&*$0)"
                                    let v3215 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2964 v3214 
                                    (* run_target_args'
                                    let v3217 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3218 : string = "$0.unwrap()"
                                    let v3219 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3215 v3218 
                                    let _run_target_args'_v3217 = v3219 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3220 : string = "$0.unwrap()"
                                    let v3221 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3215 v3220 
                                    let _run_target_args'_v3217 = v3221 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3222 : string = "$0.unwrap()"
                                    let v3223 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3215 v3222 
                                    let _run_target_args'_v3217 = v3223 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3224 : Vec<uint8> = match v3215 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3217 = v3224 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3225 : Vec<uint8> = match v3215 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3217 = v3225 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3226 : Vec<uint8> = match v3215 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3217 = v3226 
                                    #endif
#else
                                    let v3227 : Vec<uint8> = match v3215 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3217 = v3227 
                                    #endif
                                    let v3228 : Vec<uint8> = _run_target_args'_v3217 
                                    let _run_target_args'_v3213 = v3228 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3232 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3213 = v3232 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3236 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3213 = v3236 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3240 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3213 = v3240 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3244 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3213 = v3244 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3248 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3213 = v3248 
                                    #endif
#else
                                    let v3251 : (uint8 []) = v2964 |> System.IO.File.ReadAllBytes
                                    let v3252 : string = "$0.to_vec()"
                                    let v3253 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3251 v3252 
                                    let _run_target_args'_v3213 = v3253 
                                    #endif
                                    let v3254 : Vec<uint8> = _run_target_args'_v3213 
                                    let v3260 : Vec<uint8> = method27(v3254)
                                    let v3261 : string = "std::string::String::from_utf8($0)"
                                    let v3262 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3260 v3261 
                                    (* run_target_args'
                                    let v3264 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3265 : string = "$0.unwrap()"
                                    let v3266 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3262 v3265 
                                    let _run_target_args'_v3264 = v3266 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3267 : string = "$0.unwrap()"
                                    let v3268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3262 v3267 
                                    let _run_target_args'_v3264 = v3268 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3269 : string = "$0.unwrap()"
                                    let v3270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3262 v3269 
                                    let _run_target_args'_v3264 = v3270 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3271 : std_string_String = match v3262 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3264 = v3271 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3272 : std_string_String = match v3262 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3264 = v3272 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3273 : std_string_String = match v3262 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3264 = v3273 
                                    #endif
#else
                                    let v3274 : std_string_String = match v3262 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3264 = v3274 
                                    #endif
                                    let v3275 : std_string_String = _run_target_args'_v3264 
                                    let v3278 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3279 : string = Fable.Core.RustInterop.emitRustExpr v3275 v3278 
                                    let _run_target_args'_v3208 = v3279 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3281 : string = null |> unbox<string>
                                    let _run_target_args'_v3208 = v3281 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3285 : string = null |> unbox<string>
                                    let _run_target_args'_v3208 = v3285 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3289 : string = null |> unbox<string>
                                    let _run_target_args'_v3208 = v3289 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3293 : string = null |> unbox<string>
                                    let _run_target_args'_v3208 = v3293 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3297 : string = null |> unbox<string>
                                    let _run_target_args'_v3208 = v3297 
                                    #endif
#else
                                    let v3300 : string = v2964 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v3208 = v3300 
                                    #endif
                                    let v3301 : string = _run_target_args'_v3208 
                                    let v3307 : string = "rs"
                                    let v3308 : string = method208(v3307, v3301, v3203)
                                    let v3309 : string = method29(v3308)
                                    let v3310 : string = method34()
                                    let v3311 : US5 = method35(v3310)
                                    let v3317 : US5 =
                                        match v3311 with
                                        | US5_1 -> (* None *)
                                            let v3314 : string = __SOURCE_DIRECTORY__
                                            method35(v3314)
                                        | US5_0(v3312) -> (* Some *)
                                            US5_0(v3312)
                                    let v3323 : US5 =
                                        match v3317 with
                                        | US5_1 -> (* None *)
                                            let v3320 : string = "/workspaces"
                                            method35(v3320)
                                        | US5_0(v3318) -> (* Some *)
                                            US5_0(v3318)
                                    let v3327 : string =
                                        match v3323 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v3324) -> (* Some *)
                                            v3324
                                    let v3328 : string = method55(v3327)
                                    let v3329 : bool = "deps" = v3328
                                    let v3340 : string =
                                        if v3329 then
                                            let v3330 : string option = method41(v3327)
                                            let v3332 : string = v3330 |> Option.get
                                            let v3335 : US5 = method35(v3332)
                                            match v3335 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3336) -> (* Some *)
                                                v3336
                                        else
                                            v3327
                                    let v3341 : string = "polyglot"
                                    let v3342 : string = method36(v3340, v3341)
                                    let v3343 : string = method34()
                                    let v3345 : (unit -> string) = v3343.ToLower
                                    let v3346 : string = v3345 ()
                                    let v3350 : (unit -> string) = v3342.ToLower
                                    let v3351 : string = v3350 ()
                                    let v3355 : bool = v3346.StartsWith (v3351, false, null)
                                    let v3360 : US13 =
                                        if v3355 then
                                            US13_1(v3351)
                                        else
                                            US13_0(v3351)
                                    let v3372 : Result<string, string> =
                                        match v3360 with
                                        | US13_1(v3366) -> (* Error *)
                                            let v3368 : Result<string, string> = Error v3366 
                                            v3368
                                        | US13_0(v3361) -> (* Ok *)
                                            let v3363 : Result<string, string> = Ok v3361 
                                            v3363
                                    let v3373 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v3374 : bool = Fable.Core.RustInterop.emitRustExpr v3372 v3373 
                                    let v3375 : string = "x"
                                    let v3376 : string = Fable.Core.RustInterop.emitRustExpr () v3375 
                                    let v3377 : string = "true; $0 })"
                                    let v3378 : bool = Fable.Core.RustInterop.emitRustExpr v3376 v3377 
                                    let v3379 : string = "_result_unwrap_or_else"
                                    let v3380 : string = Fable.Core.RustInterop.emitRustExpr () v3379 
                                    let v3381 : string = "spiral"
                                    let v3382 : US41 = US41_0
                                    let v3383 : US42 = US42_0(v3382)
                                    let v3384 : US5 = US5_0(v3309)
                                    let v3385 : string = method209(v3384, v3381, v3383, v3380)
                                    let v3386 : string = "Fable.Core"
                                    let v3387 : string = "4.3.0"
                                    let v3388 : UH4 = UH4_0
                                    let v3389 : UH4 = UH4_1(v3386, v3387, v3388)
                                    let v3390 : UH2 = UH2_0
                                    let v3391 : string = method210(v3301, v3381, v3390, v3389, v3385, v3380)
                                    let v3392 : string = "../../.."
                                    let v3393 : string = method36(v3385, v3392)
                                    let v3394 : string = "Cargo.toml"
                                    let v3395 : string = method36(v3393, v3394)
                                    let v3396 : bool = method38(v3395)
                                    let v3397 : bool = v3396 = false
                                    if v3397 then
                                        (* run_target_args'
                                        let v3400 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3401 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3401 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3402 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3402 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3404 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3400 = v3404 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3407 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3407 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3408 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3408 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3409 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3409 
                                        #endif
#else
                                        let v3410 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3400 = v3410 
                                        #endif
                                        let v3411 : System.DateTime = _run_target_args'_v3400 
                                        let v3417 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3418 : System.Guid = v3417 ()
                                        let v3421 : System.Guid = method213(v3418, v3411)
                                        let v3423 : (System.Guid -> string) = _.ToString()
                                        let v3424 : string = v3423 v3421
                                        let v3427 : string = $"[package]"
                                        let v3428 : string = $"name = \"spiral_{v3424}\""
                                        let v3429 : string = "\n"
                                        let v3430 : string = v3427 + v3429 
                                        let v3431 : string = v3430 + v3428 
                                        let v3432 : string = $"version = \"0.0.1\""
                                        let v3433 : string = v3431 + v3429 
                                        let v3434 : string = v3433 + v3432 
                                        let v3435 : string = $"edition = \"2021\""
                                        let v3436 : string = v3434 + v3429 
                                        let v3437 : string = v3436 + v3435 
                                        let v3438 : string = $""
                                        let v3439 : string = v3437 + v3429 
                                        let v3440 : string = v3439 + v3438 
                                        let v3441 : string = $"[[bin]]"
                                        let v3442 : string = v3440 + v3429 
                                        let v3443 : string = v3442 + v3441 
                                        let v3444 : string = $"name = \"spiral_{v3424}\""
                                        let v3445 : string = v3443 + v3429 
                                        let v3446 : string = v3445 + v3444 
                                        let v3447 : string = $"path = \"spiral.rs\""
                                        let v3448 : string = v3446 + v3429 
                                        let v3449 : string = v3448 + v3447 
                                        (* run_target_args'
                                        let v3450 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3451 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3395, v3449) v3451 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3395, v3449)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3452 : string = method36(v3385, v3394)
                                    let v3453 : bool = method38(v3452)
                                    let v3454 : bool = v3453 = false
                                    if v3454 then
                                        (* run_target_args'
                                        let v3457 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3458 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3458 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3459 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3459 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3461 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3457 = v3461 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3464 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3464 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3465 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3465 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3466 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3466 
                                        #endif
#else
                                        let v3467 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3457 = v3467 
                                        #endif
                                        let v3468 : System.DateTime = _run_target_args'_v3457 
                                        let v3474 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3475 : System.Guid = v3474 ()
                                        let v3478 : System.Guid = method213(v3475, v3468)
                                        let v3480 : (System.Guid -> string) = _.ToString()
                                        let v3481 : string = v3480 v3478
                                        let v3484 : string = $"[package]"
                                        let v3485 : string = $"name = \"spiral_{v3481}\""
                                        let v3486 : string = "\n"
                                        let v3487 : string = v3484 + v3486 
                                        let v3488 : string = v3487 + v3485 
                                        let v3489 : string = $"version = \"0.0.1\""
                                        let v3490 : string = v3488 + v3486 
                                        let v3491 : string = v3490 + v3489 
                                        let v3492 : string = $"edition = \"2021\""
                                        let v3493 : string = v3491 + v3486 
                                        let v3494 : string = v3493 + v3492 
                                        let v3495 : string = $""
                                        let v3496 : string = v3494 + v3486 
                                        let v3497 : string = v3496 + v3495 
                                        let v3498 : string = $"[[bin]]"
                                        let v3499 : string = v3497 + v3486 
                                        let v3500 : string = v3499 + v3498 
                                        let v3501 : string = $"name = \"spiral_{v3481}\""
                                        let v3502 : string = v3500 + v3486 
                                        let v3503 : string = v3502 + v3501 
                                        let v3504 : string = $"path = \"spiral.rs\""
                                        let v3505 : string = v3503 + v3486 
                                        let v3506 : string = v3505 + v3504 
                                        (* run_target_args'
                                        let v3507 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3508 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3452, v3506) v3508 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3452, v3506)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3509 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v3510 : string = method36(v3380, v3509)
                                    let v3511 : string = "fable_modules/fable-library-rust"
                                    let v3512 : string = method36(v3385, v3511)
                                    method218(v3510, v3512)
                                    let struct (v3513 : int32, v3514 : string) = method219(v3203, v3385, v3307, v3391, v3360)
                                    let v3516 : bool = v3513 <> 0 
                                    let struct (v4806 : US5, v4807 : US5, v4808 : US5, v4809 : US5) =
                                        if v3516 then
                                            let v3519 : unit = ()
                                            let v3520 : (unit -> unit) = closure89(v3514, v3513)
                                            let v3521 : unit = (fun () -> v3520 (); v3519) ()
                                            let v3568 : US5 = US5_0(v3307)
                                            let v3569 : US5 = US5_1
                                            let v3570 : US5 = US5_1
                                            let v3571 : US5 = US5_0(v3514)
                                            struct (v3568, v3569, v3570, v3571)
                                        else
                                            let v3572 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3672 : Vec<std_string_String> =
                                                if v3572 then
                                                    v3028
                                                else
                                                    let v3573 : (std_string_String -> bool) = method229()
                                                    let v3574 : Vec<std_string_String> = method230(v3028)
                                                    let v3575 : string = "v3574.into_iter().filter(|x| v3573(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v3576 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3575 
                                                    let v3577 : string = "$0.len()"
                                                    let v3578 : unativeint = Fable.Core.RustInterop.emitRustExpr v3576 v3577 
                                                    let v3584 : int32 = v3578 |> int32 
                                                    let v3592 : bool = v3584 > 0
                                                    if v3592 then
                                                        v3028
                                                    else
                                                        let v3593 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v3598 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3599 : string = "&*$0"
                                                        let v3600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3593 v3599 
                                                        let _run_target_args'_v3598 = v3600 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3601 : string = "&*$0"
                                                        let v3602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3593 v3601 
                                                        let _run_target_args'_v3598 = v3602 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3603 : string = "&*$0"
                                                        let v3604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3593 v3603 
                                                        let _run_target_args'_v3598 = v3604 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3606 : Ref<Str> = v3593 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3598 = v3606 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3610 : Ref<Str> = v3593 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3598 = v3610 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3614 : Ref<Str> = v3593 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3598 = v3614 
                                                        #endif
#else
                                                        let v3618 : Ref<Str> = v3593 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3598 = v3618 
                                                        #endif
                                                        let v3621 : Ref<Str> = _run_target_args'_v3598 
                                                        (* run_target_args'
                                                        let v3631 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3632 : string = "String::from($0)"
                                                        let v3633 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3621 v3632 
                                                        let _run_target_args'_v3631 = v3633 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3634 : string = "String::from($0)"
                                                        let v3635 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3621 v3634 
                                                        let _run_target_args'_v3631 = v3635 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3636 : string = "String::from($0)"
                                                        let v3637 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3621 v3636 
                                                        let _run_target_args'_v3631 = v3637 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3639 : std_string_String = v3621 |> unbox<std_string_String>
                                                        let _run_target_args'_v3631 = v3639 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3643 : std_string_String = v3621 |> unbox<std_string_String>
                                                        let _run_target_args'_v3631 = v3643 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3647 : std_string_String = v3621 |> unbox<std_string_String>
                                                        let _run_target_args'_v3631 = v3647 
                                                        #endif
#else
                                                        let v3651 : std_string_String = v3621 |> unbox<std_string_String>
                                                        let _run_target_args'_v3631 = v3651 
                                                        #endif
                                                        let v3654 : std_string_String = _run_target_args'_v3631 
                                                        let v3660 : (std_string_String []) = [|v3654|]
                                                        let v3661 : string = "$0.to_vec()"
                                                        let v3662 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3660 v3661 
                                                        let v3663 : Vec<std_string_String> = method73(v3662)
                                                        let v3664 : Vec<std_string_String> = method74(v3028)
                                                        let v3665 : string = "true; let mut v3664 = v3664"
                                                        let v3666 : bool = Fable.Core.RustInterop.emitRustExpr () v3665 
                                                        let v3667 : string = "true; v3664.extend(v3663)"
                                                        let v3668 : bool = Fable.Core.RustInterop.emitRustExpr () v3667 
                                                        let v3669 : string = "v3664"
                                                        let v3670 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3669 
                                                        v3670
                                            let v3673 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v3674 : bool = Fable.Core.RustInterop.emitRustExpr v3672 v3673 
                                            let v3675 : string = "x"
                                            let v3676 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3675 
                                            let v3677 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3678 : string = Fable.Core.RustInterop.emitRustExpr v3676 v3677 
                                            let v3680 : string = "="
                                            let v3681 : bool = v3678.Contains v3680 
                                            let v3695 : string =
                                                if v3681 then
                                                    v3678
                                                else
                                                    let v3685 : string = "]"
                                                    let v3686 : bool = v3678.EndsWith (v3685, false, null)
                                                    if v3686 then
                                                        let v3689 : string = $"={{version='*',features=["
                                                        let v3690 : string = "["
                                                        let v3691 : string = v3678.Replace (v3690, v3689)
                                                        let v3692 : string = $"{v3691}}}"
                                                        v3692
                                                    else
                                                        let v3693 : string = $"{v3678}='*'"
                                                        v3693
                                            let v3696 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v3697 : bool = Fable.Core.RustInterop.emitRustExpr v3695 v3696 
                                            let v3698 : string = "_vec_map"
                                            let v3699 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3698 
                                            let v3700 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v3701 : (string []) = Fable.Core.RustInterop.emitRustExpr v3699 v3700 
                                            let v3705 : unit = ()
                                            let _let'_v3705 =
                                                seq {
                                                    for i = 0 to v3701.Length - 1 do yield v3701.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v3708 : string seq = _let'_v3705 
                                            let v3715 : string = method75()
                                            let v3716 : (string -> (string seq -> string)) = String.concat
                                            let v3717 : (string seq -> string) = v3716 v3715
                                            let v3718 : string = v3717 v3708
                                            let v3722 : string = $"{v3381}.{v3307}"
                                            let v3723 : string = method36(v3385, v3722)
                                            (* run_target_args'
                                            let v3728 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v3733 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3734 : string = "std::fs::read(&*$0)"
                                            let v3735 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3723 v3734 
                                            (* run_target_args'
                                            let v3737 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3738 : string = "$0.unwrap()"
                                            let v3739 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3735 v3738 
                                            let _run_target_args'_v3737 = v3739 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3740 : string = "$0.unwrap()"
                                            let v3741 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3735 v3740 
                                            let _run_target_args'_v3737 = v3741 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3742 : string = "$0.unwrap()"
                                            let v3743 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3735 v3742 
                                            let _run_target_args'_v3737 = v3743 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3744 : Vec<uint8> = match v3735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3737 = v3744 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3745 : Vec<uint8> = match v3735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3737 = v3745 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3746 : Vec<uint8> = match v3735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3737 = v3746 
                                            #endif
#else
                                            let v3747 : Vec<uint8> = match v3735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3737 = v3747 
                                            #endif
                                            let v3748 : Vec<uint8> = _run_target_args'_v3737 
                                            let _run_target_args'_v3733 = v3748 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3752 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3733 = v3752 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3756 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3733 = v3756 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3760 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3733 = v3760 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3764 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3733 = v3764 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3768 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3733 = v3768 
                                            #endif
#else
                                            let v3771 : (uint8 []) = v3723 |> System.IO.File.ReadAllBytes
                                            let v3772 : string = "$0.to_vec()"
                                            let v3773 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3771 v3772 
                                            let _run_target_args'_v3733 = v3773 
                                            #endif
                                            let v3774 : Vec<uint8> = _run_target_args'_v3733 
                                            let v3780 : Vec<uint8> = method27(v3774)
                                            let v3781 : string = "std::string::String::from_utf8($0)"
                                            let v3782 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3780 v3781 
                                            (* run_target_args'
                                            let v3784 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3785 : string = "$0.unwrap()"
                                            let v3786 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3782 v3785 
                                            let _run_target_args'_v3784 = v3786 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3787 : string = "$0.unwrap()"
                                            let v3788 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3782 v3787 
                                            let _run_target_args'_v3784 = v3788 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3789 : string = "$0.unwrap()"
                                            let v3790 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3782 v3789 
                                            let _run_target_args'_v3784 = v3790 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3791 : std_string_String = match v3782 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3784 = v3791 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3792 : std_string_String = match v3782 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3784 = v3792 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3793 : std_string_String = match v3782 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3784 = v3793 
                                            #endif
#else
                                            let v3794 : std_string_String = match v3782 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3784 = v3794 
                                            #endif
                                            let v3795 : std_string_String = _run_target_args'_v3784 
                                            let v3798 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3799 : string = Fable.Core.RustInterop.emitRustExpr v3795 v3798 
                                            let _run_target_args'_v3728 = v3799 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3801 : string = null |> unbox<string>
                                            let _run_target_args'_v3728 = v3801 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3805 : string = null |> unbox<string>
                                            let _run_target_args'_v3728 = v3805 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3809 : string = null |> unbox<string>
                                            let _run_target_args'_v3728 = v3809 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3813 : string = null |> unbox<string>
                                            let _run_target_args'_v3728 = v3813 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3817 : string = null |> unbox<string>
                                            let _run_target_args'_v3728 = v3817 
                                            #endif
#else
                                            let v3820 : string = v3723 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v3728 = v3820 
                                            #endif
                                            let v3821 : string = _run_target_args'_v3728 
                                            let v3827 : string = method231()
                                            let v3828 : string = "on_startup!"
                                            let v3829 : string = v3828 + v3827 
                                            let v3830 : string = method232()
                                            let v3831 : string = " method0"
                                            let v3832 : string = v3831 + v3830 
                                            let v3834 : bool = v3821.Contains v3829 
                                            let v3842 : bool =
                                                if v3834 then
                                                    let v3838 : bool = v3821.Contains v3832 
                                                    let v3841 : bool = v3838 = false
                                                    v3841
                                                else
                                                    false
                                            let v3843 : string = $"[package]"
                                            let v3844 : string = $"name = \"spiral_{v3309}\""
                                            let v3845 : string = "\n"
                                            let v3846 : string = v3843 + v3845 
                                            let v3847 : string = v3846 + v3844 
                                            let v3848 : string = $"version = \"0.0.1\""
                                            let v3849 : string = v3847 + v3845 
                                            let v3850 : string = v3849 + v3848 
                                            let v3851 : string = $"edition = \"2021\""
                                            let v3852 : string = v3850 + v3845 
                                            let v3853 : string = v3852 + v3851 
                                            let v3854 : string = $""
                                            let v3855 : string = v3853 + v3845 
                                            let v3856 : string = v3855 + v3854 
                                            let v3857 : string = $"[dependencies]"
                                            let v3858 : string = v3856 + v3845 
                                            let v3859 : string = v3858 + v3857 
                                            let v3862 : US39 = US39_1
                                            let v3863 : bool = v3203 <> v3862 
                                            let v3881 : string =
                                                if v3863 then
                                                    let v3867 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v3867
                                                else
                                                    let v3868 : string = $"fable_library_rust = {{"
                                                    let v3869 : string = $" workspace = true,"
                                                    let v3870 : string = v3868 + v3869 
                                                    let v3871 : string = $" features = ["
                                                    let v3872 : string = v3870 + v3871 
                                                    let v3875 : string =
                                                        if v3842 then
                                                            let v3873 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v3873
                                                        else
                                                            let v3874 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v3874
                                                    let v3876 : string = v3872 + v3875 
                                                    let v3877 : string = $"]"
                                                    let v3878 : string = v3876 + v3877 
                                                    let v3879 : string = $"}}"
                                                    let v3880 : string = v3878 + v3879 
                                                    v3880
                                            let v3882 : string = v3859 + v3845 
                                            let v3883 : string = v3882 + v3881 
                                            let v3884 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v3885 : string = v3883 + v3845 
                                            let v3886 : string = v3885 + v3884 
                                            let v3887 : string = $"{v3718}"
                                            let v3888 : string = v3886 + v3845 
                                            let v3889 : string = v3888 + v3887 
                                            let v3890 : string = $""
                                            let v3891 : string = v3889 + v3845 
                                            let v3892 : string = v3891 + v3890 
                                            let v3893 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3902 : string =
                                                if v3893 then
                                                    let v3894 : string = $"[[bin]]"
                                                    let v3895 : string = $"name = \"spiral_{v3309}\""
                                                    let v3896 : string = v3894 + v3845 
                                                    let v3897 : string = v3896 + v3895 
                                                    v3897
                                                else
                                                    let v3898 : string = $"[lib]"
                                                    let v3899 : string = $"crate-type = [\"cdylib\"]"
                                                    let v3900 : string = v3898 + v3845 
                                                    let v3901 : string = v3900 + v3899 
                                                    v3901
                                            let v3903 : string = v3892 + v3845 
                                            let v3904 : string = v3903 + v3902 
                                            let v3905 : string = $"path = \"spiral.rs\""
                                            let v3906 : string = v3904 + v3845 
                                            let v3907 : string = v3906 + v3905 
                                            let v3908 : string = method46(v3380)
                                            let v3909 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v3910 : string = $""
                                            let v3911 : string = v3909 + v3845 
                                            let v3912 : string = v3911 + v3910 
                                            let v3913 : string = $"[workspace]"
                                            let v3914 : string = v3912 + v3845 
                                            let v3915 : string = v3914 + v3913 
                                            let v3916 : string = $"resolver = \"2\""
                                            let v3917 : string = v3915 + v3845 
                                            let v3918 : string = v3917 + v3916 
                                            let v3919 : string = $"members = [\"packages/Rust/*\"]"
                                            let v3920 : string = v3918 + v3845 
                                            let v3921 : string = v3920 + v3919 
                                            let v3922 : string = $""
                                            let v3923 : string = v3921 + v3845 
                                            let v3924 : string = v3923 + v3922 
                                            let v3925 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v3926 : string = v3924 + v3845 
                                            let v3927 : string = v3926 + v3925 
                                            let v3928 : string = $"path = \"{v3908}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v3929 : string = v3927 + v3845 
                                            let v3930 : string = v3929 + v3928 
                                            let v3931 : string = $"default-features = false"
                                            let v3932 : string = v3930 + v3845 
                                            let v3933 : string = v3932 + v3931 
                                            let v3934 : string = $"features = []"
                                            let v3935 : string = v3933 + v3845 
                                            let v3936 : string = v3935 + v3934 
                                            let v3937 : string = $""
                                            let v3938 : string = v3936 + v3845 
                                            let v3939 : string = v3938 + v3937 
                                            let v3940 : string = $"[workspace.dependencies]"
                                            let v3941 : string = v3939 + v3845 
                                            let v3942 : string = v3941 + v3940 
                                            let v3943 : string = $"inline_colorization = \"~0.1\""
                                            let v3944 : string = v3942 + v3845 
                                            let v3945 : string = v3944 + v3943 
                                            let v3946 : string = $""
                                            let v3947 : string = v3945 + v3845 
                                            let v3948 : string = v3947 + v3946 
                                            let v3949 : string = $"[profile.release]"
                                            let v3950 : string = v3948 + v3845 
                                            let v3951 : string = v3950 + v3949 
                                            let v3952 : string = $"codegen-units = 1"
                                            let v3953 : string = v3951 + v3845 
                                            let v3954 : string = v3953 + v3952 
                                            let v3955 : string = $"opt-level = \"z\""
                                            let v3956 : string = v3954 + v3845 
                                            let v3957 : string = v3956 + v3955 
                                            let v3958 : string = $"lto = true"
                                            let v3959 : string = v3957 + v3845 
                                            let v3960 : string = v3959 + v3958 
                                            let v3961 : string = $"debug = false"
                                            let v3962 : string = v3960 + v3845 
                                            let v3963 : string = v3962 + v3961 
                                            let v3964 : string = $"panic = \"abort\""
                                            let v3965 : string = v3963 + v3845 
                                            let v3966 : string = v3965 + v3964 
                                            let v3967 : string = $"overflow-checks = true"
                                            let v3968 : string = v3966 + v3845 
                                            let v3969 : string = v3968 + v3967 
                                            let v3970 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v3971 : string = v3969 + v3845 
                                            let v3972 : string = v3971 + v3970 
                                            method76(v3452, v3907)
                                            method76(v3395, v3972)
                                            let v3973 : string = "src/Range.rs"
                                            let v3974 : string = method36(v3512, v3973)
                                            let v3975 : bool = method38(v3974)
                                            if v3975 then
                                                (* run_target_args'
                                                let v3980 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v3985 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3986 : string = "std::fs::read(&*$0)"
                                                let v3987 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3974 v3986 
                                                (* run_target_args'
                                                let v3989 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3990 : string = "$0.unwrap()"
                                                let v3991 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3987 v3990 
                                                let _run_target_args'_v3989 = v3991 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3992 : string = "$0.unwrap()"
                                                let v3993 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3987 v3992 
                                                let _run_target_args'_v3989 = v3993 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3994 : string = "$0.unwrap()"
                                                let v3995 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3987 v3994 
                                                let _run_target_args'_v3989 = v3995 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3996 : Vec<uint8> = match v3987 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3989 = v3996 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3997 : Vec<uint8> = match v3987 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3989 = v3997 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3998 : Vec<uint8> = match v3987 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3989 = v3998 
                                                #endif
#else
                                                let v3999 : Vec<uint8> = match v3987 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v3989 = v3999 
                                                #endif
                                                let v4000 : Vec<uint8> = _run_target_args'_v3989 
                                                let _run_target_args'_v3985 = v4000 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4004 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3985 = v4004 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4008 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3985 = v4008 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4012 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3985 = v4012 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4016 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3985 = v4016 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4020 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v3985 = v4020 
                                                #endif
#else
                                                let v4023 : (uint8 []) = v3974 |> System.IO.File.ReadAllBytes
                                                let v4024 : string = "$0.to_vec()"
                                                let v4025 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4023 v4024 
                                                let _run_target_args'_v3985 = v4025 
                                                #endif
                                                let v4026 : Vec<uint8> = _run_target_args'_v3985 
                                                let v4032 : Vec<uint8> = method27(v4026)
                                                let v4033 : string = "std::string::String::from_utf8($0)"
                                                let v4034 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4032 v4033 
                                                (* run_target_args'
                                                let v4036 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4037 : string = "$0.unwrap()"
                                                let v4038 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4034 v4037 
                                                let _run_target_args'_v4036 = v4038 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4039 : string = "$0.unwrap()"
                                                let v4040 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4034 v4039 
                                                let _run_target_args'_v4036 = v4040 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4041 : string = "$0.unwrap()"
                                                let v4042 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4034 v4041 
                                                let _run_target_args'_v4036 = v4042 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4043 : std_string_String = match v4034 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4036 = v4043 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4044 : std_string_String = match v4034 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4036 = v4044 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4045 : std_string_String = match v4034 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4036 = v4045 
                                                #endif
#else
                                                let v4046 : std_string_String = match v4034 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4036 = v4046 
                                                #endif
                                                let v4047 : std_string_String = _run_target_args'_v4036 
                                                let v4050 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4051 : string = Fable.Core.RustInterop.emitRustExpr v4047 v4050 
                                                let _run_target_args'_v3980 = v4051 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4053 : string = null |> unbox<string>
                                                let _run_target_args'_v3980 = v4053 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4057 : string = null |> unbox<string>
                                                let _run_target_args'_v3980 = v4057 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4061 : string = null |> unbox<string>
                                                let _run_target_args'_v3980 = v4061 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4065 : string = null |> unbox<string>
                                                let _run_target_args'_v3980 = v4065 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4069 : string = null |> unbox<string>
                                                let _run_target_args'_v3980 = v4069 
                                                #endif
#else
                                                let v4072 : string = v3974 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v3980 = v4072 
                                                #endif
                                                let v4073 : string = _run_target_args'_v3980 
                                                let v4079 : string = "use crate::String_::fromCharCode;"
                                                let v4080 : string = "use crate::String_::fromChar;"
                                                let v4081 : string = v4073.Replace (v4079, v4080)
                                                let v4082 : string = "fromCharCode(c)"
                                                let v4083 : string = "std::char::from_u32(c).unwrap()"
                                                let v4084 : string = v4081.Replace (v4082, v4083)
                                                method76(v3974, v4084)
                                            let v4085 : uint8 = 1uy
                                            let struct (v4086 : int32, v4087 : string) = method233(v3360, v3452, v4085)
                                            let v4089 : bool = v4086 <> 0 
                                            if v4089 then
                                                let v4092 : unit = ()
                                                let v4093 : (unit -> unit) = closure93(v4087, v4086)
                                                let v4094 : unit = (fun () -> v4093 (); v4092) ()
                                                ()
                                            (* run_target_args'
                                            let v4145 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4150 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4151 : string = "std::fs::read(&*$0)"
                                            let v4152 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3723 v4151 
                                            (* run_target_args'
                                            let v4154 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4155 : string = "$0.unwrap()"
                                            let v4156 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4152 v4155 
                                            let _run_target_args'_v4154 = v4156 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4157 : string = "$0.unwrap()"
                                            let v4158 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4152 v4157 
                                            let _run_target_args'_v4154 = v4158 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4159 : string = "$0.unwrap()"
                                            let v4160 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4152 v4159 
                                            let _run_target_args'_v4154 = v4160 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4161 : Vec<uint8> = match v4152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4154 = v4161 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4162 : Vec<uint8> = match v4152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4154 = v4162 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4163 : Vec<uint8> = match v4152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4154 = v4163 
                                            #endif
#else
                                            let v4164 : Vec<uint8> = match v4152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4154 = v4164 
                                            #endif
                                            let v4165 : Vec<uint8> = _run_target_args'_v4154 
                                            let _run_target_args'_v4150 = v4165 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4169 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4150 = v4169 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4173 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4150 = v4173 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4177 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4150 = v4177 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4181 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4150 = v4181 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4185 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4150 = v4185 
                                            #endif
#else
                                            let v4188 : (uint8 []) = v3723 |> System.IO.File.ReadAllBytes
                                            let v4189 : string = "$0.to_vec()"
                                            let v4190 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4188 v4189 
                                            let _run_target_args'_v4150 = v4190 
                                            #endif
                                            let v4191 : Vec<uint8> = _run_target_args'_v4150 
                                            let v4197 : Vec<uint8> = method27(v4191)
                                            let v4198 : string = "std::string::String::from_utf8($0)"
                                            let v4199 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4197 v4198 
                                            (* run_target_args'
                                            let v4201 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4202 : string = "$0.unwrap()"
                                            let v4203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4199 v4202 
                                            let _run_target_args'_v4201 = v4203 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4204 : string = "$0.unwrap()"
                                            let v4205 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4199 v4204 
                                            let _run_target_args'_v4201 = v4205 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4206 : string = "$0.unwrap()"
                                            let v4207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4199 v4206 
                                            let _run_target_args'_v4201 = v4207 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4208 : std_string_String = match v4199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4201 = v4208 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4209 : std_string_String = match v4199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4201 = v4209 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4210 : std_string_String = match v4199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4201 = v4210 
                                            #endif
#else
                                            let v4211 : std_string_String = match v4199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4201 = v4211 
                                            #endif
                                            let v4212 : std_string_String = _run_target_args'_v4201 
                                            let v4215 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4216 : string = Fable.Core.RustInterop.emitRustExpr v4212 v4215 
                                            let _run_target_args'_v4145 = v4216 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4218 : string = null |> unbox<string>
                                            let _run_target_args'_v4145 = v4218 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4222 : string = null |> unbox<string>
                                            let _run_target_args'_v4145 = v4222 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4226 : string = null |> unbox<string>
                                            let _run_target_args'_v4145 = v4226 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4230 : string = null |> unbox<string>
                                            let _run_target_args'_v4145 = v4230 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4234 : string = null |> unbox<string>
                                            let _run_target_args'_v4145 = v4234 
                                            #endif
#else
                                            let v4237 : string = v3723 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4145 = v4237 
                                            #endif
                                            let v4238 : string = _run_target_args'_v4145 
                                            let v4244 : string = method239()
                                            let v4245 : string = "pub fn main() -> Result<(), String> "
                                            let v4246 : string = v4245 + v4244 
                                            let v4247 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4280 : string =
                                                if v4247 then
                                                    let v4248 : string = ""
                                                    v4248
                                                else
                                                    let v4249 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4250 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v4251 : string = v4249 + v3845 
                                                    let v4252 : string = v4251 + v4250 
                                                    let v4253 : string = $"pub struct MainState {{"
                                                    let v4254 : string = v4252 + v3845 
                                                    let v4255 : string = v4254 + v4253 
                                                    let v4256 : string = $"}}"
                                                    let v4257 : string = v4255 + v3845 
                                                    let v4258 : string = v4257 + v4256 
                                                    let v4259 : string = $""
                                                    let v4260 : string = v4258 + v3845 
                                                    let v4261 : string = v4260 + v4259 
                                                    let v4262 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4263 : string = v4261 + v3845 
                                                    let v4264 : string = v4263 + v4262 
                                                    let v4265 : string = $"impl MainState {{"
                                                    let v4266 : string = v4264 + v3845 
                                                    let v4267 : string = v4266 + v4265 
                                                    let v4268 : string = $"    pub fn state_main() {{"
                                                    let v4269 : string = v4267 + v3845 
                                                    let v4270 : string = v4269 + v4268 
                                                    let v4271 : string = $"        Spiral::method0();"
                                                    let v4272 : string = v4270 + v3845 
                                                    let v4273 : string = v4272 + v4271 
                                                    let v4274 : string = $"    }}"
                                                    let v4275 : string = v4273 + v3845 
                                                    let v4276 : string = v4275 + v4274 
                                                    let v4277 : string = $"}}"
                                                    let v4278 : string = v4276 + v3845 
                                                    let v4279 : string = v4278 + v4277 
                                                    v4279
                                            let v4281 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4288 : bool =
                                                if v4281 then
                                                    let v4282 : string = "Spiral::method0()"
                                                    let v4283 : string = v3829 + v4282 
                                                    let v4285 : bool = v4238.Contains v4283 
                                                    v4285
                                                else
                                                    false
                                            let v4291 : string =
                                                if v4288 then
                                                    let v4289 : string = $"{v4246} Ok(Spiral::method0()) }}"
                                                    v4289
                                                else
                                                    let v4290 : string = $"{v4246} Ok(()) }}"
                                                    v4290
                                            let v4292 : string = v4280 + v3845 
                                            let v4293 : string = v4292 + v4291 
                                            let v4295 : bool = v4238.Contains v4246 
                                            let v4298 : string = $"{v4238}\n\n{v4293}\n"
                                            let v4397 : string =
                                                if v4295 then
                                                    v4238
                                                else
                                                    let v4302 : bool =
                                                        match v3203 with
                                                        | US39_0(v4299) -> (* Some *)
                                                            match v4299 with
                                                            | US40_1(v4300) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v4303 : string = "\";\".into()"
                                                    let v4304 : string = Fable.Core.RustInterop.emitRustExpr () v4303 
                                                    let v4305 : string = "),)"
                                                    let v4306 : string = v4305 + v4304 
                                                    let v4307 : string = "));"
                                                    let v4308 : string = v4298.Replace (v4306, v4307)
                                                    let v4309 : string = "\";\".into()"
                                                    let v4310 : string = Fable.Core.RustInterop.emitRustExpr () v4309 
                                                    let v4311 : string = "},)"
                                                    let v4312 : string = v4311 + v4310 
                                                    let v4313 : string = "});"
                                                    let v4314 : string = v4308.Replace (v4312, v4313)
                                                    let v4315 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v4316 : string = " defaultOf::<()>();"
                                                    let v4317 : string = method66(v4315, v4316, v4314)
                                                    let v4318 : string = "\\s\\sgetZero\\(\\);"
                                                    let v4319 : string = " getZero::<()>();"
                                                    let v4320 : string = method66(v4318, v4319, v4317)
                                                    let v4321 : string = "\"t\".into()"
                                                    let v4322 : string = Fable.Core.RustInterop.emitRustExpr () v4321 
                                                    let v4323 : string = "(&e.get_Curren"
                                                    let v4324 : string = v4323 + v4322 
                                                    let v4325 : string = "(e.get_Current"
                                                    let v4326 : string = v4320.Replace (v4324, v4325)
                                                    let v4327 : string = "\"::<()>()\".into()"
                                                    let v4328 : string = Fable.Core.RustInterop.emitRustExpr () v4327 
                                                    let v4329 : string = "getNull"
                                                    let v4330 : string = v4329 + v4328 
                                                    let v4331 : string = "fable_library_rust::Native_::getZero()"
                                                    let v4332 : string = v4326.Replace (v4330, v4331)
                                                    let v4333 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v4334 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v4335 : string = method66(v4333, v4334, v4332)
                                                    let v4336 : string = "::Slice'_"
                                                    let v4337 : string = "::Slice__"
                                                    let v4338 : string = v4335.Replace (v4336, v4337)
                                                    let v4339 : string = " Slice'_"
                                                    let v4340 : string = " Slice__"
                                                    let v4341 : string = v4338.Replace (v4339, v4340)
                                                    let v4342 : string = "\",\".into()"
                                                    let v4343 : string = Fable.Core.RustInterop.emitRustExpr () v4342 
                                                    let v4344 : string = "defaultOf()"
                                                    let v4345 : string = v4344 + v4343 
                                                    let v4346 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v4347 : string = v4341.Replace (v4345, v4346)
                                                    let v4348 : string = "\"__.\".into()"
                                                    let v4349 : string = Fable.Core.RustInterop.emitRustExpr () v4348 
                                                    let v4350 : string = "__self"
                                                    let v4351 : string = v4350 + v4349 
                                                    let v4352 : string = "self."
                                                    let v4353 : string = v4347.Replace (v4351, v4352)
                                                    let v4354 : string = "\"_.\".into()"
                                                    let v4355 : string = Fable.Core.RustInterop.emitRustExpr () v4354 
                                                    let v4356 : string = "_self"
                                                    let v4357 : string = v4356 + v4355 
                                                    let v4358 : string = v4353.Replace (v4357, v4352)
                                                    let v4359 : string = "\"h\".into()"
                                                    let v4360 : string = Fable.Core.RustInterop.emitRustExpr () v4359 
                                                    let v4361 : string = "get_or_insert_wit"
                                                    let v4362 : string = v4361 + v4360 
                                                    let v4363 : string = "get_or_init"
                                                    let v4364 : string = v4358.Replace (v4362, v4363)
                                                    let v4365 : string = "\";\".into()"
                                                    let v4366 : string = Fable.Core.RustInterop.emitRustExpr () v4365 
                                                    let v4367 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v4368 : string = v4367 + v4366 
                                                    let v4369 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v4370 : string = v4364.Replace (v4368, v4369)
                                                    let v4371 : string = "\";\".into()"
                                                    let v4372 : string = Fable.Core.RustInterop.emitRustExpr () v4371 
                                                    let v4373 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v4374 : string = v4373 + v4372 
                                                    let v4375 : string = "type TimeZoneInfo = i64;"
                                                    let v4376 : string = v4370.Replace (v4374, v4375)
                                                    let v4377 : string = "\";\".into()"
                                                    let v4378 : string = Fable.Core.RustInterop.emitRustExpr () v4377 
                                                    let v4379 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v4380 : string = v4379 + v4378 
                                                    let v4381 : string = "type TaskCanceledException = ();"
                                                    let v4382 : string = v4376.Replace (v4380, v4381)
                                                    let v4387 : (string -> string) =
                                                        if v3842 then
                                                            closure94()
                                                        else
                                                            let v4384 : string = "// "
                                                            let v4385 : string = v4384 + v3829 
                                                            closure95(v3829, v4385)
                                                    let v4388 : string = v4387 v4382
                                                    let v4389 : bool = v4302 = false
                                                    let v4395 : (string -> string) =
                                                        if v4389 then
                                                            closure94()
                                                        else
                                                            let v4391 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v4392 : string = ";"
                                                            let v4393 : string = v4391 + v4392 
                                                            closure96(v4393)
                                                    v4395 v4388
                                            let v4398 : bool = v4295 = false
                                            if v4398 then
                                                method76(v3723, v4397)
                                            let v4399 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4400 : bool = v4399 <> true
                                            let v4403 : string =
                                                if v4400 then
                                                    let v4401 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v3452}\""
                                                    v4401
                                                else
                                                    let v4402 : string = $"cargo run --manifest-path \"{v3452}\""
                                                    v4402
                                            let v4404 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4405 : bool = v4404 <> true
                                            let v4416 : (struct (string * string) []) =
                                                if v4405 then
                                                    [||]
                                                else
                                                    let v4407 : string = "TRACE_LEVEL"
                                                    let v4408 : string = "Verbose"
                                                    let v4409 : string = "RUSTC_WRAPPER"
                                                    let v4410 : string = "sccache"
                                                    let v4411 : string = "RUST_BACKTRACE"
                                                    let v4412 : string = "full"
                                                    let v4413 : string = "RUSTFLAGS"
                                                    let v4414 : string = "-C prefer-dynamic"
                                                    [|struct (v4407, v4408); struct (v4409, v4410); struct (v4411, v4412); struct (v4413, v4414)|]
                                            let v4417 : System.Threading.CancellationToken option = None
                                            let v4418 : (struct (string * string) []) = [||]
                                            let v4419 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v4420 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v4421 : string option = None
                                            let v4433 : Result<string, string> =
                                                match v3360 with
                                                | US13_1(v4427) -> (* Error *)
                                                    let v4429 : Result<string, string> = Error v4427 
                                                    v4429
                                                | US13_0(v4422) -> (* Ok *)
                                                    let v4424 : Result<string, string> = Ok v4422 
                                                    v4424
                                            (* run_target_args'
                                            let v4435 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4436 : string = "$0.ok()"
                                            let v4437 : string option = Fable.Core.RustInterop.emitRustExpr v4433 v4436 
                                            let _run_target_args'_v4435 = v4437 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4438 : string = "$0.ok()"
                                            let v4439 : string option = Fable.Core.RustInterop.emitRustExpr v4433 v4438 
                                            let _run_target_args'_v4435 = v4439 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4440 : string = "$0.ok()"
                                            let v4441 : string option = Fable.Core.RustInterop.emitRustExpr v4433 v4440 
                                            let _run_target_args'_v4435 = v4441 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4442 : string option = match v4433 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4435 = v4442 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4443 : string option = match v4433 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4435 = v4443 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4444 : string option = match v4433 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4435 = v4444 
                                            #endif
#else
                                            let v4445 : string option = match v4433 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4435 = v4445 
                                            #endif
                                            let v4446 : string option = _run_target_args'_v4435 
                                            let v4449 : bool = true
                                            let struct (v4450 : int32, v4451 : string) = method101(v4403, v4417, v4416, v4419, v4420, v4449, v4446)
                                            let v4452 : bool =
                                                match v3203 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v4716 : US5, v4717 : US5, v4718 : US5, v4719 : US5) =
                                                if v4452 then
                                                    let v4453 : int32 = v4416.Length
                                                    let v4454 : (string []) = Array.zeroCreate<string> (v4453)
                                                    let v4455 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v4453, v4455) do
                                                        let v4457 : int32 = v4455.l0
                                                        let struct (v4458 : string, v4459 : string) = v4416.[int v4457]
                                                        let v4460 : string = $"$env:{v4458}=''{v4459}''"
                                                        v4454.[int v4457] <- v4460
                                                        let v4461 : int32 = v4457 + 1
                                                        v4455.l0 <- v4461
                                                        ()
                                                    let v4463 : string seq = v4454 |> Seq.ofArray
                                                    let v4467 : (string -> (string seq -> string)) = String.concat
                                                    let v4468 : string = ";"
                                                    let v4469 : (string seq -> string) = v4467 v4468
                                                    let v4470 : string = v4469 v4463
                                                    let v4473 : (string []) = [|v4470; v4403|]
                                                    let v4475 : string seq = v4473 |> Seq.ofArray
                                                    let v4479 : (string -> (string seq -> string)) = String.concat
                                                    let v4480 : (string seq -> string) = v4479 v4468
                                                    let v4481 : string = v4480 v4475
                                                    let v4484 : string = $"pwsh -c '{v4481}'"
                                                    let v4486 : bool = v4450 <> 0 
                                                    let struct (v4565 : US5, v4566 : US5, v4567 : US5, v4568 : US5) =
                                                        if v4486 then
                                                            let v4489 : unit = ()
                                                            let v4490 : (unit -> unit) = closure97(v3064, v3723, v4451, v4450, v4484)
                                                            let v4491 : unit = (fun () -> v4490 (); v4489) ()
                                                            let v4538 : US5 = US5_0(v3307)
                                                            let v4539 : US5 = US5_1
                                                            let v4540 : US5 = US5_1
                                                            let v4541 : US5 = US5_1
                                                            struct (v4538, v4539, v4540, v4541)
                                                        else
                                                            let v4542 : (string -> US5) = closure71()
                                                            let v4543 : (unit -> string) = closure98(v4451)
                                                            let v4544 : (exn -> US5) = closure100(v3723, v4451, v4484)
                                                            let v4546 : US5 = US5_1
                                                            let result = ref v4546
                                                            try
                                                                result.Value <- v4543 () |> v4542 
                                                            with ex ->
                                                                result.Value <- v4544 ex 
                                                            let v4547 : US5 = result.Value
                                                            let v4558 : string option =
                                                                match v4547 with
                                                                | US5_1 -> (* None *)
                                                                    let v4556 : string option = None
                                                                    v4556
                                                                | US5_0(v4551) -> (* Some *)
                                                                    let v4553 : string option = Some v4551 
                                                                    v4553
                                                            let v4559 : string = "$0.unwrap()"
                                                            let v4560 : string = Fable.Core.RustInterop.emitRustExpr v4558 v4559 
                                                            let v4561 : US5 = US5_0(v3307)
                                                            let v4562 : US5 = US5_0(v4397)
                                                            let v4563 : US5 = US5_0(v3723)
                                                            let v4564 : US5 = US5_0(v4560)
                                                            struct (v4561, v4562, v4563, v4564)
                                                    struct (v4565, v4566, v4567, v4568)
                                                else
                                                    let v4569 : string = $"target/spiral/{v3381}/target/wasm32-unknown-unknown/release/spiral_{v3309}.wasm"
                                                    let v4576 : string =
                                                        match v3203 with
                                                        | US39_0(v4570) -> (* Some *)
                                                            match v4570 with
                                                            | US40_1(v4572) -> (* Contract *)
                                                                v4572
                                                            | US40_0(v4571) -> (* Wasm *)
                                                                v4571
                                                        | _ ->
                                                            let v4575 : string = ""
                                                            v4575
                                                    let v4577 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v4569} -t Debug {v4576}'"
                                                    let v4578 : string = "AUTOMATION"
                                                    let v4579 : string = method3(v4578)
                                                    let v4580 : string = "scripts/invoke-block.ps1"
                                                    let v4581 : string = $"pwsh -c \"pwsh {v4580} {v4577} -Linux -EnvironmentVariables AUTOMATION={v4579}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v4582 : bool = v4450 = 0
                                                    let struct (v4712 : US5, v4713 : US5, v4714 : US5, v4715 : US5) =
                                                        if v4582 then
                                                            let v4583 : System.Threading.CancellationToken option = None
                                                            let v4584 : (struct (string * string) []) = [||]
                                                            let v4585 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v4586 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v4587 : string option = None
                                                            let v4589 : string option = Some v3380 
                                                            let v4592 : bool = true
                                                            let struct (v4593 : int32, v4594 : string) = method101(v4581, v4583, v4584, v4585, v4586, v4592, v4589)
                                                            let v4595 : bool = v4593 = 0
                                                            let struct (v4654 : US5, v4655 : US5, v4656 : US5, v4657 : US5) =
                                                                if v4595 then
                                                                    let v4596 : US5 = US5_0(v3307)
                                                                    let v4597 : US5 = US5_0(v4397)
                                                                    let v4598 : US5 = US5_0(v3723)
                                                                    let v4599 : US5 = US5_0(v4594)
                                                                    struct (v4596, v4597, v4598, v4599)
                                                                else
                                                                    let v4600 : unit = ()
                                                                    let v4601 : (unit -> unit) = closure102(v3064, v3723, v4451, v4594, v4593)
                                                                    let v4602 : unit = (fun () -> v4601 (); v4600) ()
                                                                    let v4650 : US5 = US5_0(v3307)
                                                                    let v4651 : US5 = US5_1
                                                                    let v4652 : US5 = US5_1
                                                                    let v4653 : US5 = US5_1
                                                                    struct (v4650, v4651, v4652, v4653)
                                                            struct (v4654, v4655, v4656, v4657)
                                                        else
                                                            let v4658 : unit = ()
                                                            let v4659 : (unit -> unit) = closure103(v3064, v3723, v4451, v4450, v4569, v4581)
                                                            let v4660 : unit = (fun () -> v4659 (); v4658) ()
                                                            let v4708 : US5 = US5_0(v3307)
                                                            let v4709 : US5 = US5_1
                                                            let v4710 : US5 = US5_1
                                                            let v4711 : US5 = US5_1
                                                            struct (v4708, v4709, v4710, v4711)
                                                    struct (v4712, v4713, v4714, v4715)
                                            if v3064 then
                                                let v4720 : bool =
                                                    match v3203 with
                                                    | US39_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v4721 : bool = v4720 <> true
                                                let v4724 : string =
                                                    if v4721 then
                                                        let v4722 : string = "wasm32-unknown-unknown/release"
                                                        v4722
                                                    else
                                                        let v4723 : string = "debug"
                                                        v4723
                                                let v4725 : string = ""
                                                let v4726 : string = $"target/{v4724}/spiral_{v3309}{v4725}"
                                                let v4727 : string = method36(v3393, v4726)
                                                let v4728 : string = ".wasm"
                                                let v4729 : string = $"target/{v4724}/spiral_{v3309}{v4728}"
                                                let v4730 : string = method36(v3393, v4729)
                                                let v4731 : string = ".pdb"
                                                let v4732 : string = $"target/{v4724}/spiral_{v3309}{v4731}"
                                                let v4733 : string = method36(v3393, v4732)
                                                let v4734 : string = ".exe"
                                                let v4735 : string = $"target/{v4724}/spiral_{v3309}{v4734}"
                                                let v4736 : string = method36(v3393, v4735)
                                                let v4737 : string = ".d"
                                                let v4738 : string = $"target/{v4724}/spiral_{v3309}{v4737}"
                                                let v4739 : string = method36(v3393, v4738)
                                                let v4740 : bool = method38(v4727)
                                                let v4741 : bool = method38(v4730)
                                                let v4742 : bool = method38(v4733)
                                                let v4743 : bool = method38(v4736)
                                                let v4744 : bool = method38(v4739)
                                                let v4745 : unit = ()
                                                let v4746 : (unit -> unit) = closure104(v3723, v4739, v4744, v4736, v4743, v4733, v4742, v4730, v4741, v4727, v4740)
                                                let v4747 : unit = (fun () -> v4746 (); v4745) ()
                                                let v4797 : UH5 =
                                                    if v4740 then
                                                        let v4794 : UH5 = UH5_0
                                                        UH5_1(v4727, v4740, v4794)
                                                    else
                                                        UH5_0
                                                let v4799 : UH5 =
                                                    if v4741 then
                                                        UH5_1(v4730, v4741, v4797)
                                                    else
                                                        v4797
                                                let v4801 : UH5 =
                                                    if v4742 then
                                                        UH5_1(v4733, v4742, v4799)
                                                    else
                                                        v4799
                                                let v4803 : UH5 =
                                                    if v4743 then
                                                        UH5_1(v4736, v4743, v4801)
                                                    else
                                                        v4801
                                                let v4805 : UH5 =
                                                    if v4744 then
                                                        UH5_1(v4739, v4744, v4803)
                                                    else
                                                        v4803
                                                method250(v4805)
                                            struct (v4716, v4717, v4718, v4719)
                                    struct (v4806, v4807, v4808, v4809)
                                else
                                    let v4810 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4811 : string = Fable.Core.RustInterop.emitRustExpr v34 v4810 
                                    let v4812 : bool = v4811 = "typescript"
                                    let struct (v6540 : US5, v6541 : US5, v6542 : US5, v6543 : US5) =
                                        if v4812 then
                                            let v4813 : string = method189()
                                            (* run_target_args'
                                            let v4818 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4819 : string = "&*$0"
                                            let v4820 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4813 v4819 
                                            let _run_target_args'_v4818 = v4820 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4821 : string = "&*$0"
                                            let v4822 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4813 v4821 
                                            let _run_target_args'_v4818 = v4822 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4823 : string = "&*$0"
                                            let v4824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4813 v4823 
                                            let _run_target_args'_v4818 = v4824 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4826 : Ref<Str> = v4813 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4818 = v4826 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4830 : Ref<Str> = v4813 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4818 = v4830 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4834 : Ref<Str> = v4813 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4818 = v4834 
                                            #endif
#else
                                            let v4838 : Ref<Str> = v4813 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4818 = v4838 
                                            #endif
                                            let v4841 : Ref<Str> = _run_target_args'_v4818 
                                            let v4847 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v4848 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v4841) v4847 
                                            let v4851 : (std_string_String -> US7) = method23()
                                            let v4852 : US7 option = v4848 |> Option.map v4851 
                                            let v4866 : US7 = US7_1
                                            let v4867 : US7 = v4852 |> Option.defaultValue v4866 
                                            let v4874 : std_string_String =
                                                match v4867 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v4871) -> (* Some *)
                                                    v4871
                                            let v4875 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4876 : string = Fable.Core.RustInterop.emitRustExpr v4874 v4875 
                                            let v4877 : string = method25()
                                            (* run_target_args'
                                            let v4882 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4883 : string = "&*$0"
                                            let v4884 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4877 v4883 
                                            let _run_target_args'_v4882 = v4884 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4885 : string = "&*$0"
                                            let v4886 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4877 v4885 
                                            let _run_target_args'_v4882 = v4886 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4887 : string = "&*$0"
                                            let v4888 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4877 v4887 
                                            let _run_target_args'_v4882 = v4888 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4890 : Ref<Str> = v4877 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4882 = v4890 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4894 : Ref<Str> = v4877 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4882 = v4894 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4898 : Ref<Str> = v4877 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4882 = v4898 
                                            #endif
#else
                                            let v4902 : Ref<Str> = v4877 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4882 = v4902 
                                            #endif
                                            let v4905 : Ref<Str> = _run_target_args'_v4882 
                                            let v4911 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v4912 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v4905) v4911 
                                            let v4915 : (Vec<std_string_String> -> US11) = method26()
                                            let v4916 : US11 option = v4912 |> Option.map v4915 
                                            let v4930 : US11 = US11_1
                                            let v4931 : US11 = v4916 |> Option.defaultValue v4930 
                                            let v4935 : (std_string_String []) = [||]
                                            let v4936 : string = "$0.to_vec()"
                                            let v4937 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4935 v4936 
                                            let v4940 : Vec<std_string_String> =
                                                match v4931 with
                                                | US11_1 -> (* None *)
                                                    v4937
                                                | US11_0(v4938) -> (* Some *)
                                                    v4938
                                            (* run_target_args'
                                            let v4945 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4950 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4951 : string = "std::fs::read(&*$0)"
                                            let v4952 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4876 v4951 
                                            (* run_target_args'
                                            let v4954 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4955 : string = "$0.unwrap()"
                                            let v4956 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4952 v4955 
                                            let _run_target_args'_v4954 = v4956 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4957 : string = "$0.unwrap()"
                                            let v4958 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4952 v4957 
                                            let _run_target_args'_v4954 = v4958 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4959 : string = "$0.unwrap()"
                                            let v4960 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4952 v4959 
                                            let _run_target_args'_v4954 = v4960 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4961 : Vec<uint8> = match v4952 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4954 = v4961 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4962 : Vec<uint8> = match v4952 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4954 = v4962 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4963 : Vec<uint8> = match v4952 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4954 = v4963 
                                            #endif
#else
                                            let v4964 : Vec<uint8> = match v4952 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4954 = v4964 
                                            #endif
                                            let v4965 : Vec<uint8> = _run_target_args'_v4954 
                                            let _run_target_args'_v4950 = v4965 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4969 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4950 = v4969 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4973 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4950 = v4973 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4977 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4950 = v4977 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4981 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4950 = v4981 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4985 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4950 = v4985 
                                            #endif
#else
                                            let v4988 : (uint8 []) = v4876 |> System.IO.File.ReadAllBytes
                                            let v4989 : string = "$0.to_vec()"
                                            let v4990 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4988 v4989 
                                            let _run_target_args'_v4950 = v4990 
                                            #endif
                                            let v4991 : Vec<uint8> = _run_target_args'_v4950 
                                            let v4997 : Vec<uint8> = method27(v4991)
                                            let v4998 : string = "std::string::String::from_utf8($0)"
                                            let v4999 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4997 v4998 
                                            (* run_target_args'
                                            let v5001 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5002 : string = "$0.unwrap()"
                                            let v5003 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4999 v5002 
                                            let _run_target_args'_v5001 = v5003 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5004 : string = "$0.unwrap()"
                                            let v5005 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4999 v5004 
                                            let _run_target_args'_v5001 = v5005 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5006 : string = "$0.unwrap()"
                                            let v5007 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4999 v5006 
                                            let _run_target_args'_v5001 = v5007 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5008 : std_string_String = match v4999 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5001 = v5008 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5009 : std_string_String = match v4999 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5001 = v5009 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5010 : std_string_String = match v4999 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5001 = v5010 
                                            #endif
#else
                                            let v5011 : std_string_String = match v4999 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5001 = v5011 
                                            #endif
                                            let v5012 : std_string_String = _run_target_args'_v5001 
                                            let v5015 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5016 : string = Fable.Core.RustInterop.emitRustExpr v5012 v5015 
                                            let _run_target_args'_v4945 = v5016 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5018 : string = null |> unbox<string>
                                            let _run_target_args'_v4945 = v5018 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5022 : string = null |> unbox<string>
                                            let _run_target_args'_v4945 = v5022 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5026 : string = null |> unbox<string>
                                            let _run_target_args'_v4945 = v5026 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5030 : string = null |> unbox<string>
                                            let _run_target_args'_v4945 = v5030 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5034 : string = null |> unbox<string>
                                            let _run_target_args'_v4945 = v5034 
                                            #endif
#else
                                            let v5037 : string = v4876 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4945 = v5037 
                                            #endif
                                            let v5038 : string = _run_target_args'_v4945 
                                            let v5046 : string = "ts"
                                            let v5047 : string = $"%A{struct (v5046, v5038)}"
                                            let v5050 : string = method29(v5047)
                                            let v5051 : string = method34()
                                            let v5052 : US5 = method35(v5051)
                                            let v5058 : US5 =
                                                match v5052 with
                                                | US5_1 -> (* None *)
                                                    let v5055 : string = __SOURCE_DIRECTORY__
                                                    method35(v5055)
                                                | US5_0(v5053) -> (* Some *)
                                                    US5_0(v5053)
                                            let v5064 : US5 =
                                                match v5058 with
                                                | US5_1 -> (* None *)
                                                    let v5061 : string = "/workspaces"
                                                    method35(v5061)
                                                | US5_0(v5059) -> (* Some *)
                                                    US5_0(v5059)
                                            let v5068 : string =
                                                match v5064 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v5065) -> (* Some *)
                                                    v5065
                                            let v5069 : string = method55(v5068)
                                            let v5070 : bool = "deps" = v5069
                                            let v5081 : string =
                                                if v5070 then
                                                    let v5071 : string option = method41(v5068)
                                                    let v5073 : string = v5071 |> Option.get
                                                    let v5076 : US5 = method35(v5073)
                                                    match v5076 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v5077) -> (* Some *)
                                                        v5077
                                                else
                                                    v5068
                                            let v5082 : string = "polyglot"
                                            let v5083 : string = method36(v5081, v5082)
                                            let v5084 : string = method34()
                                            let v5086 : (unit -> string) = v5084.ToLower
                                            let v5087 : string = v5086 ()
                                            let v5091 : (unit -> string) = v5083.ToLower
                                            let v5092 : string = v5091 ()
                                            let v5096 : bool = v5087.StartsWith (v5092, false, null)
                                            let v5101 : US13 =
                                                if v5096 then
                                                    US13_1(v5092)
                                                else
                                                    US13_0(v5092)
                                            let v5113 : Result<string, string> =
                                                match v5101 with
                                                | US13_1(v5107) -> (* Error *)
                                                    let v5109 : Result<string, string> = Error v5107 
                                                    v5109
                                                | US13_0(v5102) -> (* Ok *)
                                                    let v5104 : Result<string, string> = Ok v5102 
                                                    v5104
                                            let v5114 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v5115 : bool = Fable.Core.RustInterop.emitRustExpr v5113 v5114 
                                            let v5116 : string = "x"
                                            let v5117 : string = Fable.Core.RustInterop.emitRustExpr () v5116 
                                            let v5118 : string = "true; $0 })"
                                            let v5119 : bool = Fable.Core.RustInterop.emitRustExpr v5117 v5118 
                                            let v5120 : string = "_result_unwrap_or_else"
                                            let v5121 : string = Fable.Core.RustInterop.emitRustExpr () v5120 
                                            let v5122 : string = "spiral"
                                            let v5123 : US41 = US41_1
                                            let v5124 : US42 = US42_0(v5123)
                                            let v5125 : US5 = US5_0(v5050)
                                            let v5126 : string = method209(v5125, v5122, v5124, v5121)
                                            let v5127 : string = "Fable.Core"
                                            let v5128 : string = "4.3.0"
                                            let v5129 : UH4 = UH4_0
                                            let v5130 : UH4 = UH4_1(v5127, v5128, v5129)
                                            let v5131 : UH2 = UH2_0
                                            let v5132 : string = method210(v5038, v5122, v5131, v5130, v5126, v5121)
                                            let v5133 : string = "lib/typescript/fable/fable_modules"
                                            let v5134 : string = method36(v5121, v5133)
                                            let v5135 : string = $"fable-library-{v5046}"
                                            let v5136 : string = method255(v5135)
                                            let v5137 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v5138 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v5134 v5137 
                                            let v5139 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v5140 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v5135)
                                            let v5141 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v5138, v5140) v5139 
                                            let v5142 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method259(v5136)
                                            let v5143 : string = "futures::stream::StreamExt::filter_map(v5141, |x| async { v5142(x) })"
                                            let v5144 : _ = Fable.Core.RustInterop.emitRustExpr () v5143 
                                            let v5145 : string = "Box::pin(futures::stream::StreamExt::collect(v5144))"
                                            let v5146 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v5145 
                                            let v5147 : string = "v5146.await"
                                            let v5148 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v5147 
                                            let v5149 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v5150 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5148 v5149 
                                            let v5151 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v5152 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v5153 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v5150, v5152) v5151 
                                            let v5154 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v5155 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5153 v5154 
                                            let v5156 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v5157 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v5155 v5156 
                                            let v5158 : struct (string * string) option = v5157 |> Array.tryItem 0 
                                            let v5161 : (struct (string * string) -> US51) = method264()
                                            let v5162 : US51 option = v5158 |> Option.map v5161 
                                            let v5177 : US51 = US51_1
                                            let v5178 : US51 = v5162 |> Option.defaultValue v5177 
                                            let v5182 : unit = ()
                                            let v5183 : (unit -> unit) = closure118(v5178)
                                            let v5184 : unit = (fun () -> v5183 (); v5182) ()
                                            method267(v5126, v5134, v5178)
                                            let v5231 : US39 = US39_1
                                            let struct (v5232 : int32, v5233 : string) = method219(v5231, v5126, v5046, v5132, v5101)
                                            method267(v5126, v5134, v5178)
                                            let v5235 : bool = v5232 <> 0 
                                            let struct (v5715 : US5, v5716 : US5, v5717 : US5, v5718 : US5) =
                                                if v5235 then
                                                    let v5238 : unit = ()
                                                    let v5239 : (unit -> unit) = closure119(v5233, v5232)
                                                    let v5240 : unit = (fun () -> v5239 (); v5238) ()
                                                    let v5287 : US5 = US5_0(v5046)
                                                    let v5288 : US5 = US5_1
                                                    let v5289 : US5 = US5_1
                                                    let v5290 : US5 = US5_0(v5233)
                                                    struct (v5287, v5288, v5289, v5290)
                                                else
                                                    let v5291 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v5292 : bool = Fable.Core.RustInterop.emitRustExpr v4940 v5291 
                                                    let v5293 : string = "x"
                                                    let v5294 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5293 
                                                    let v5295 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5296 : string = Fable.Core.RustInterop.emitRustExpr v5294 v5295 
                                                    let v5298 : string = "="
                                                    let v5299 : bool = v5296.Contains v5298 
                                                    let v5303 : string =
                                                        if v5299 then
                                                            v5296
                                                        else
                                                            let v5302 : string = $"\"{v5296}\":\"*\""
                                                            v5302
                                                    let v5304 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v5305 : bool = Fable.Core.RustInterop.emitRustExpr v5303 v5304 
                                                    let v5306 : string = "_vec_map"
                                                    let v5307 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5306 
                                                    let v5308 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v5309 : (string []) = Fable.Core.RustInterop.emitRustExpr v5307 v5308 
                                                    let v5313 : unit = ()
                                                    let _let'_v5313 =
                                                        seq {
                                                            for i = 0 to v5309.Length - 1 do yield v5309.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v5316 : string seq = _let'_v5313 
                                                    let v5323 : (string -> (string seq -> string)) = String.concat
                                                    let v5324 : string = ",\n"
                                                    let v5325 : (string seq -> string) = v5323 v5324
                                                    let v5326 : string = v5325 v5316
                                                    let v5329 : string = $"{{"
                                                    let v5330 : string = $"  \"name\": \"spiral_{v5050}\","
                                                    let v5331 : string = v5329 + v5330 
                                                    let v5332 : string = $"  \"dependencies\": {{"
                                                    let v5333 : string = v5331 + v5332 
                                                    let v5334 : string = v5333 + v5326 
                                                    let v5335 : string = $"  }},"
                                                    let v5336 : string = v5334 + v5335 
                                                    let v5337 : string = $"    \"devDependencies\": {{"
                                                    let v5338 : string = v5336 + v5337 
                                                    let v5339 : string = $"  }},"
                                                    let v5340 : string = v5338 + v5339 
                                                    let v5341 : string = $"}}"
                                                    let v5342 : string = v5340 + v5341 
                                                    let v5343 : string = "package.json"
                                                    let v5344 : string = method36(v5126, v5343)
                                                    let v5345 : string = "../.."
                                                    let v5346 : string = method36(v5126, v5345)
                                                    let v5347 : string = method36(v5346, v5343)
                                                    method76(v5344, v5342)
                                                    let v5348 : string = ""
                                                    method76(v5347, v5348)
                                                    let v5349 : string = $"{v5122}.{v5046}"
                                                    let v5350 : string = method36(v5126, v5349)
                                                    let v5351 : unit = ()
                                                    let v5352 : (unit -> unit) = closure120(v5350)
                                                    let v5353 : unit = (fun () -> v5352 (); v5351) ()
                                                    (* run_target_args'
                                                    let v5404 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5409 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5410 : string = "std::fs::read(&*$0)"
                                                    let v5411 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5350 v5410 
                                                    (* run_target_args'
                                                    let v5413 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5414 : string = "$0.unwrap()"
                                                    let v5415 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5411 v5414 
                                                    let _run_target_args'_v5413 = v5415 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5416 : string = "$0.unwrap()"
                                                    let v5417 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5411 v5416 
                                                    let _run_target_args'_v5413 = v5417 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5418 : string = "$0.unwrap()"
                                                    let v5419 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5411 v5418 
                                                    let _run_target_args'_v5413 = v5419 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5420 : Vec<uint8> = match v5411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5413 = v5420 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5421 : Vec<uint8> = match v5411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5413 = v5421 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5422 : Vec<uint8> = match v5411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5413 = v5422 
                                                    #endif
#else
                                                    let v5423 : Vec<uint8> = match v5411 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5413 = v5423 
                                                    #endif
                                                    let v5424 : Vec<uint8> = _run_target_args'_v5413 
                                                    let _run_target_args'_v5409 = v5424 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5428 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5409 = v5428 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5432 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5409 = v5432 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5436 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5409 = v5436 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5440 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5409 = v5440 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5444 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5409 = v5444 
                                                    #endif
#else
                                                    let v5447 : (uint8 []) = v5350 |> System.IO.File.ReadAllBytes
                                                    let v5448 : string = "$0.to_vec()"
                                                    let v5449 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5447 v5448 
                                                    let _run_target_args'_v5409 = v5449 
                                                    #endif
                                                    let v5450 : Vec<uint8> = _run_target_args'_v5409 
                                                    let v5456 : Vec<uint8> = method27(v5450)
                                                    let v5457 : string = "std::string::String::from_utf8($0)"
                                                    let v5458 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5456 v5457 
                                                    (* run_target_args'
                                                    let v5460 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5461 : string = "$0.unwrap()"
                                                    let v5462 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5458 v5461 
                                                    let _run_target_args'_v5460 = v5462 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5463 : string = "$0.unwrap()"
                                                    let v5464 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5458 v5463 
                                                    let _run_target_args'_v5460 = v5464 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5465 : string = "$0.unwrap()"
                                                    let v5466 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5458 v5465 
                                                    let _run_target_args'_v5460 = v5466 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5467 : std_string_String = match v5458 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5460 = v5467 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5468 : std_string_String = match v5458 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5460 = v5468 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5469 : std_string_String = match v5458 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5460 = v5469 
                                                    #endif
#else
                                                    let v5470 : std_string_String = match v5458 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5460 = v5470 
                                                    #endif
                                                    let v5471 : std_string_String = _run_target_args'_v5460 
                                                    let v5474 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5475 : string = Fable.Core.RustInterop.emitRustExpr v5471 v5474 
                                                    let _run_target_args'_v5404 = v5475 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5477 : string = null |> unbox<string>
                                                    let _run_target_args'_v5404 = v5477 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5481 : string = null |> unbox<string>
                                                    let _run_target_args'_v5404 = v5481 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5485 : string = null |> unbox<string>
                                                    let _run_target_args'_v5404 = v5485 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5489 : string = null |> unbox<string>
                                                    let _run_target_args'_v5404 = v5489 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5493 : string = null |> unbox<string>
                                                    let _run_target_args'_v5404 = v5493 
                                                    #endif
#else
                                                    let v5496 : string = v5350 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5404 = v5496 
                                                    #endif
                                                    let v5497 : string = _run_target_args'_v5404 
                                                    let v5504 : string = "// spiral.process_typescript"
                                                    let v5505 : bool = v5497.Contains v5504 
                                                    let v5514 : string =
                                                        if v5505 then
                                                            v5497
                                                        else
                                                            let v5508 : string = $"\"./fable_modules/fable-library-ts.{v5178}/"
                                                            let v5509 : string = $"\"{v5121}/lib/typescript/fable/fable_modules/fable-library-ts.{v5178}/"
                                                            let v5510 : string = v5497.Replace (v5508, v5509)
                                                            let v5511 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v5512 : string = " defaultOf::<()>();"
                                                            method66(v5511, v5512, v5510)
                                                    let v5515 : bool = v5505 = false
                                                    if v5515 then
                                                        let v5516 : string = $"{v5514}\n\n{v5504}\n"
                                                        method76(v5350, v5516)
                                                    let v5517 : string = $"bun run \"{v5350}\""
                                                    let v5518 : string = "PATH"
                                                    let v5519 : string = method3(v5518)
                                                    let v5520 : bool = v5519 = ""
                                                    let v5559 : US5 =
                                                        if v5520 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v5526 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5527 : string = "cfg!(windows)"
                                                            let v5528 : bool = Fable.Core.RustInterop.emitRustExpr () v5527 
                                                            let _run_target_args'_v5526 = v5528 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5529 : string = "cfg!(windows)"
                                                            let v5530 : bool = Fable.Core.RustInterop.emitRustExpr () v5529 
                                                            let _run_target_args'_v5526 = v5530 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5531 : string = "cfg!(windows)"
                                                            let v5532 : bool = Fable.Core.RustInterop.emitRustExpr () v5531 
                                                            let _run_target_args'_v5526 = v5532 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5533 : US3 = US3_0
                                                            let v5534 : US4 = US4_4(v5533)
                                                            let v5535 : string = $"platform.is_windows / target: {v5534}"
                                                            let v5536 : bool = failwith<bool> v5535
                                                            let _run_target_args'_v5526 = v5536 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5537 : US3 = US3_0
                                                            let v5538 : US4 = US4_5(v5537)
                                                            let v5539 : string = $"platform.is_windows / target: {v5538}"
                                                            let v5540 : bool = failwith<bool> v5539
                                                            let _run_target_args'_v5526 = v5540 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5541 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5542 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5543 : bool = v5542 v5541
                                                            let _run_target_args'_v5526 = v5543 
                                                            #endif
#else
                                                            let v5544 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5545 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5546 : bool = v5545 v5544
                                                            let _run_target_args'_v5526 = v5546 
                                                            #endif
                                                            let v5547 : bool = _run_target_args'_v5526 
                                                            let v5555 : string =
                                                                if v5547 then
                                                                    let v5553 : string = ";"
                                                                    v5553
                                                                else
                                                                    let v5554 : string = ":"
                                                                    v5554
                                                            let v5556 : string = "~/.bun/bin"
                                                            let v5557 : string = $"{v5556}{v5555}{v5519}"
                                                            US5_0(v5557)
                                                    let v5565 : UH4 =
                                                        match v5559 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v5560) -> (* Some *)
                                                            let v5561 : UH4 = UH4_0
                                                            UH4_1(v5518, v5560, v5561)
                                                    let v5566 : string = "TRACE_LEVEL"
                                                    let v5567 : string = "Verbose"
                                                    let v5568 : UH4 = UH4_0
                                                    let v5569 : UH4 = UH4_1(v5566, v5567, v5568)
                                                    let v5570 : UH4 = method271(v5565, v5569)
                                                    let v5571 : struct (string * string) list = []
                                                    let v5572 : struct (string * string) list = method272(v5570, v5571)
                                                    let v5574 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v5575 : (struct (string * string) []) = v5574 v5572
                                                    let v5578 : System.Threading.CancellationToken option = None
                                                    let v5579 : (struct (string * string) []) = [||]
                                                    let v5580 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v5581 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v5582 : string option = None
                                                    let v5594 : Result<string, string> =
                                                        match v5101 with
                                                        | US13_1(v5588) -> (* Error *)
                                                            let v5590 : Result<string, string> = Error v5588 
                                                            v5590
                                                        | US13_0(v5583) -> (* Ok *)
                                                            let v5585 : Result<string, string> = Ok v5583 
                                                            v5585
                                                    (* run_target_args'
                                                    let v5596 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5597 : string = "$0.ok()"
                                                    let v5598 : string option = Fable.Core.RustInterop.emitRustExpr v5594 v5597 
                                                    let _run_target_args'_v5596 = v5598 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5599 : string = "$0.ok()"
                                                    let v5600 : string option = Fable.Core.RustInterop.emitRustExpr v5594 v5599 
                                                    let _run_target_args'_v5596 = v5600 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5601 : string = "$0.ok()"
                                                    let v5602 : string option = Fable.Core.RustInterop.emitRustExpr v5594 v5601 
                                                    let _run_target_args'_v5596 = v5602 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5603 : string option = match v5594 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5596 = v5603 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5604 : string option = match v5594 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5596 = v5604 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5605 : string option = match v5594 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5596 = v5605 
                                                    #endif
#else
                                                    let v5606 : string option = match v5594 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5596 = v5606 
                                                    #endif
                                                    let v5607 : string option = _run_target_args'_v5596 
                                                    let v5610 : bool = true
                                                    let struct (v5611 : int32, v5612 : string) = method101(v5517, v5578, v5575, v5580, v5581, v5610, v5607)
                                                    let v5613 : int32 = v5575.Length
                                                    let v5614 : (string []) = Array.zeroCreate<string> (v5613)
                                                    let v5615 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v5613, v5615) do
                                                        let v5617 : int32 = v5615.l0
                                                        let struct (v5618 : string, v5619 : string) = v5575.[int v5617]
                                                        let v5620 : string = $"$env:{v5618}=''{v5619}''"
                                                        v5614.[int v5617] <- v5620
                                                        let v5621 : int32 = v5617 + 1
                                                        v5615.l0 <- v5621
                                                        ()
                                                    let v5623 : string seq = v5614 |> Seq.ofArray
                                                    let v5627 : (string -> (string seq -> string)) = String.concat
                                                    let v5628 : string = ";"
                                                    let v5629 : (string seq -> string) = v5627 v5628
                                                    let v5630 : string = v5629 v5623
                                                    let v5633 : string = $"pwsh -c '{v5630}; {v5517}'"
                                                    let v5634 : bool = v5611 = 0
                                                    let struct (v5711 : US5, v5712 : US5, v5713 : US5, v5714 : US5) =
                                                        if v5634 then
                                                            let v5635 : (string -> US5) = closure71()
                                                            let v5636 : (unit -> string) = closure121(v5612)
                                                            let v5637 : (exn -> US5) = closure122(v5350, v5612, v5633)
                                                            let v5639 : US5 = US5_1
                                                            let result = ref v5639
                                                            try
                                                                result.Value <- v5636 () |> v5635 
                                                            with ex ->
                                                                result.Value <- v5637 ex 
                                                            let v5640 : US5 = result.Value
                                                            let v5651 : string option =
                                                                match v5640 with
                                                                | US5_1 -> (* None *)
                                                                    let v5649 : string option = None
                                                                    v5649
                                                                | US5_0(v5644) -> (* Some *)
                                                                    let v5646 : string option = Some v5644 
                                                                    v5646
                                                            let v5652 : string = "$0.unwrap()"
                                                            let v5653 : string = Fable.Core.RustInterop.emitRustExpr v5651 v5652 
                                                            let v5654 : US5 = US5_0(v5046)
                                                            let v5655 : US5 = US5_0(v5514)
                                                            let v5656 : US5 = US5_0(v5350)
                                                            let v5657 : US5 = US5_0(v5653)
                                                            struct (v5654, v5655, v5656, v5657)
                                                        else
                                                            let v5658 : unit = ()
                                                            let v5659 : (unit -> unit) = closure124(v5350, v5612, v5611, v5633)
                                                            let v5660 : unit = (fun () -> v5659 (); v5658) ()
                                                            let v5707 : US5 = US5_0(v5046)
                                                            let v5708 : US5 = US5_1
                                                            let v5709 : US5 = US5_1
                                                            let v5710 : US5 = US5_1
                                                            struct (v5707, v5708, v5709, v5710)
                                                    struct (v5711, v5712, v5713, v5714)
                                            struct (v5715, v5716, v5717, v5718)
                                        else
                                            let v5719 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5720 : string = Fable.Core.RustInterop.emitRustExpr v34 v5719 
                                            let v5721 : bool = v5720 = "python"
                                            let struct (v6536 : US5, v6537 : US5, v6538 : US5, v6539 : US5) =
                                                if v5721 then
                                                    let v5722 : string = method189()
                                                    (* run_target_args'
                                                    let v5727 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5728 : string = "&*$0"
                                                    let v5729 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5722 v5728 
                                                    let _run_target_args'_v5727 = v5729 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5730 : string = "&*$0"
                                                    let v5731 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5722 v5730 
                                                    let _run_target_args'_v5727 = v5731 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5732 : string = "&*$0"
                                                    let v5733 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5722 v5732 
                                                    let _run_target_args'_v5727 = v5733 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5735 : Ref<Str> = v5722 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5727 = v5735 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5739 : Ref<Str> = v5722 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5727 = v5739 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5743 : Ref<Str> = v5722 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5727 = v5743 
                                                    #endif
#else
                                                    let v5747 : Ref<Str> = v5722 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5727 = v5747 
                                                    #endif
                                                    let v5750 : Ref<Str> = _run_target_args'_v5727 
                                                    let v5756 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v5757 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v5750) v5756 
                                                    let v5760 : (std_string_String -> US7) = method23()
                                                    let v5761 : US7 option = v5757 |> Option.map v5760 
                                                    let v5775 : US7 = US7_1
                                                    let v5776 : US7 = v5761 |> Option.defaultValue v5775 
                                                    let v5783 : std_string_String =
                                                        match v5776 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v5780) -> (* Some *)
                                                            v5780
                                                    let v5784 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5785 : string = Fable.Core.RustInterop.emitRustExpr v5783 v5784 
                                                    let v5786 : string = method25()
                                                    (* run_target_args'
                                                    let v5791 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5792 : string = "&*$0"
                                                    let v5793 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5786 v5792 
                                                    let _run_target_args'_v5791 = v5793 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5794 : string = "&*$0"
                                                    let v5795 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5786 v5794 
                                                    let _run_target_args'_v5791 = v5795 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5796 : string = "&*$0"
                                                    let v5797 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5786 v5796 
                                                    let _run_target_args'_v5791 = v5797 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5799 : Ref<Str> = v5786 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5791 = v5799 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5803 : Ref<Str> = v5786 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5791 = v5803 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5807 : Ref<Str> = v5786 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5791 = v5807 
                                                    #endif
#else
                                                    let v5811 : Ref<Str> = v5786 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5791 = v5811 
                                                    #endif
                                                    let v5814 : Ref<Str> = _run_target_args'_v5791 
                                                    let v5820 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v5821 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v5814) v5820 
                                                    let v5824 : (Vec<std_string_String> -> US11) = method26()
                                                    let v5825 : US11 option = v5821 |> Option.map v5824 
                                                    let v5839 : US11 = US11_1
                                                    let v5840 : US11 = v5825 |> Option.defaultValue v5839 
                                                    let v5844 : (std_string_String []) = [||]
                                                    let v5845 : string = "$0.to_vec()"
                                                    let v5846 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5844 v5845 
                                                    let v5849 : Vec<std_string_String> =
                                                        match v5840 with
                                                        | US11_1 -> (* None *)
                                                            v5846
                                                        | US11_0(v5847) -> (* Some *)
                                                            v5847
                                                    let v5850 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v5855 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5860 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5861 : string = "std::fs::read(&*$0)"
                                                    let v5862 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5785 v5861 
                                                    (* run_target_args'
                                                    let v5864 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5865 : string = "$0.unwrap()"
                                                    let v5866 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5862 v5865 
                                                    let _run_target_args'_v5864 = v5866 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5867 : string = "$0.unwrap()"
                                                    let v5868 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5862 v5867 
                                                    let _run_target_args'_v5864 = v5868 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5869 : string = "$0.unwrap()"
                                                    let v5870 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5862 v5869 
                                                    let _run_target_args'_v5864 = v5870 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5871 : Vec<uint8> = match v5862 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5864 = v5871 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5872 : Vec<uint8> = match v5862 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5864 = v5872 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5873 : Vec<uint8> = match v5862 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5864 = v5873 
                                                    #endif
#else
                                                    let v5874 : Vec<uint8> = match v5862 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5864 = v5874 
                                                    #endif
                                                    let v5875 : Vec<uint8> = _run_target_args'_v5864 
                                                    let _run_target_args'_v5860 = v5875 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5879 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5860 = v5879 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5883 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5860 = v5883 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5887 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5860 = v5887 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5891 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5860 = v5891 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5895 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5860 = v5895 
                                                    #endif
#else
                                                    let v5898 : (uint8 []) = v5785 |> System.IO.File.ReadAllBytes
                                                    let v5899 : string = "$0.to_vec()"
                                                    let v5900 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5898 v5899 
                                                    let _run_target_args'_v5860 = v5900 
                                                    #endif
                                                    let v5901 : Vec<uint8> = _run_target_args'_v5860 
                                                    let v5907 : Vec<uint8> = method27(v5901)
                                                    let v5908 : string = "std::string::String::from_utf8($0)"
                                                    let v5909 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5907 v5908 
                                                    (* run_target_args'
                                                    let v5911 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5912 : string = "$0.unwrap()"
                                                    let v5913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5909 v5912 
                                                    let _run_target_args'_v5911 = v5913 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5914 : string = "$0.unwrap()"
                                                    let v5915 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5909 v5914 
                                                    let _run_target_args'_v5911 = v5915 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5916 : string = "$0.unwrap()"
                                                    let v5917 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5909 v5916 
                                                    let _run_target_args'_v5911 = v5917 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5918 : std_string_String = match v5909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5911 = v5918 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5919 : std_string_String = match v5909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5911 = v5919 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5920 : std_string_String = match v5909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5911 = v5920 
                                                    #endif
#else
                                                    let v5921 : std_string_String = match v5909 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5911 = v5921 
                                                    #endif
                                                    let v5922 : std_string_String = _run_target_args'_v5911 
                                                    let v5925 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5926 : string = Fable.Core.RustInterop.emitRustExpr v5922 v5925 
                                                    let _run_target_args'_v5855 = v5926 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5928 : string = null |> unbox<string>
                                                    let _run_target_args'_v5855 = v5928 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5932 : string = null |> unbox<string>
                                                    let _run_target_args'_v5855 = v5932 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5936 : string = null |> unbox<string>
                                                    let _run_target_args'_v5855 = v5936 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5940 : string = null |> unbox<string>
                                                    let _run_target_args'_v5855 = v5940 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5944 : string = null |> unbox<string>
                                                    let _run_target_args'_v5855 = v5944 
                                                    #endif
#else
                                                    let v5947 : string = v5785 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5855 = v5947 
                                                    #endif
                                                    let v5948 : string = _run_target_args'_v5855 
                                                    let v5956 : string = "py"
                                                    let v5957 : string = $"%A{struct (v5956, v5948)}"
                                                    let v5960 : string = method29(v5957)
                                                    let v5961 : string = method34()
                                                    let v5962 : US5 = method35(v5961)
                                                    let v5968 : US5 =
                                                        match v5962 with
                                                        | US5_1 -> (* None *)
                                                            let v5965 : string = __SOURCE_DIRECTORY__
                                                            method35(v5965)
                                                        | US5_0(v5963) -> (* Some *)
                                                            US5_0(v5963)
                                                    let v5974 : US5 =
                                                        match v5968 with
                                                        | US5_1 -> (* None *)
                                                            let v5971 : string = "/workspaces"
                                                            method35(v5971)
                                                        | US5_0(v5969) -> (* Some *)
                                                            US5_0(v5969)
                                                    let v5978 : string =
                                                        match v5974 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v5975) -> (* Some *)
                                                            v5975
                                                    let v5979 : string = method55(v5978)
                                                    let v5980 : bool = "deps" = v5979
                                                    let v5991 : string =
                                                        if v5980 then
                                                            let v5981 : string option = method41(v5978)
                                                            let v5983 : string = v5981 |> Option.get
                                                            let v5986 : US5 = method35(v5983)
                                                            match v5986 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v5987) -> (* Some *)
                                                                v5987
                                                        else
                                                            v5978
                                                    let v5992 : string = "polyglot"
                                                    let v5993 : string = method36(v5991, v5992)
                                                    let v5994 : string = method34()
                                                    let v5996 : (unit -> string) = v5994.ToLower
                                                    let v5997 : string = v5996 ()
                                                    let v6001 : (unit -> string) = v5993.ToLower
                                                    let v6002 : string = v6001 ()
                                                    let v6006 : bool = v5997.StartsWith (v6002, false, null)
                                                    let v6011 : US13 =
                                                        if v6006 then
                                                            US13_1(v6002)
                                                        else
                                                            US13_0(v6002)
                                                    let v6023 : Result<string, string> =
                                                        match v6011 with
                                                        | US13_1(v6017) -> (* Error *)
                                                            let v6019 : Result<string, string> = Error v6017 
                                                            v6019
                                                        | US13_0(v6012) -> (* Ok *)
                                                            let v6014 : Result<string, string> = Ok v6012 
                                                            v6014
                                                    let v6024 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v6025 : bool = Fable.Core.RustInterop.emitRustExpr v6023 v6024 
                                                    let v6026 : string = "x"
                                                    let v6027 : string = Fable.Core.RustInterop.emitRustExpr () v6026 
                                                    let v6028 : string = "true; $0 })"
                                                    let v6029 : bool = Fable.Core.RustInterop.emitRustExpr v6027 v6028 
                                                    let v6030 : string = "_result_unwrap_or_else"
                                                    let v6031 : string = Fable.Core.RustInterop.emitRustExpr () v6030 
                                                    let v6032 : string = "spiral"
                                                    let v6033 : US41 = US41_2
                                                    let v6034 : US42 = US42_0(v6033)
                                                    let v6035 : US5 = US5_0(v5960)
                                                    let v6036 : string = method209(v6035, v6032, v6034, v6031)
                                                    let v6037 : string = "Fable.Core"
                                                    let v6038 : string = "4.3.0"
                                                    let v6039 : UH4 = UH4_0
                                                    let v6040 : UH4 = UH4_1(v6037, v6038, v6039)
                                                    let v6041 : UH2 = UH2_0
                                                    let v6042 : string = method210(v5948, v6032, v6041, v6040, v6036, v6031)
                                                    let v6043 : string = "lib/python/fable/fable_modules"
                                                    let v6044 : string = method36(v6031, v6043)
                                                    let v6045 : string = $"fable_library"
                                                    let v6046 : string = method36(v6044, v6045)
                                                    let v6047 : string = $"fable_modules/fable_library"
                                                    let v6048 : string = method36(v6036, v6047)
                                                    method218(v6046, v6048)
                                                    let v6049 : US39 = US39_1
                                                    let struct (v6050 : int32, v6051 : string) = method219(v6049, v6036, v5956, v6042, v6011)
                                                    let v6053 : bool = v6050 <> 0 
                                                    let struct (v6479 : US5, v6480 : US5, v6481 : US5, v6482 : US5) =
                                                        if v6053 then
                                                            let v6056 : unit = ()
                                                            let v6057 : (unit -> unit) = closure125(v6051, v6050)
                                                            let v6058 : unit = (fun () -> v6057 (); v6056) ()
                                                            let v6105 : US5 = US5_0(v5956)
                                                            let v6106 : US5 = US5_1
                                                            let v6107 : US5 = US5_1
                                                            let v6108 : US5 = US5_0(v6051)
                                                            struct (v6105, v6106, v6107, v6108)
                                                        else
                                                            let v6109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v6110 : bool = Fable.Core.RustInterop.emitRustExpr v5849 v6109 
                                                            let v6111 : string = "x"
                                                            let v6112 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6111 
                                                            let v6113 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v6114 : string = Fable.Core.RustInterop.emitRustExpr v6112 v6113 
                                                            let v6116 : string = "="
                                                            let v6117 : bool = v6114.Contains v6116 
                                                            let v6121 : string =
                                                                if v6117 then
                                                                    v6114
                                                                else
                                                                    let v6120 : string = $"\"{v6114}\":\"*\""
                                                                    v6120
                                                            let v6122 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v6123 : bool = Fable.Core.RustInterop.emitRustExpr v6121 v6122 
                                                            let v6124 : string = "_vec_map"
                                                            let v6125 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6124 
                                                            let v6126 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v6127 : (string []) = Fable.Core.RustInterop.emitRustExpr v6125 v6126 
                                                            let v6131 : unit = ()
                                                            let _let'_v6131 =
                                                                seq {
                                                                    for i = 0 to v6127.Length - 1 do yield v6127.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v6134 : string seq = _let'_v6131 
                                                            let v6141 : (string -> (string seq -> string)) = String.concat
                                                            let v6142 : string = ",\n"
                                                            let v6143 : (string seq -> string) = v6141 v6142
                                                            let v6144 : string = v6143 v6134
                                                            let v6147 : string = $"{{"
                                                            let v6148 : string = $"  \"name\": \"spiral_{v5960}\","
                                                            let v6149 : string = v6147 + v6148 
                                                            let v6150 : string = $"  \"dependencies\": {{"
                                                            let v6151 : string = v6149 + v6150 
                                                            let v6152 : string = v6151 + v6144 
                                                            let v6153 : string = $"  }},"
                                                            let v6154 : string = v6152 + v6153 
                                                            let v6155 : string = $"    \"devDependencies\": {{"
                                                            let v6156 : string = v6154 + v6155 
                                                            let v6157 : string = $"  }},"
                                                            let v6158 : string = v6156 + v6157 
                                                            let v6159 : string = $"}}"
                                                            let v6160 : string = v6158 + v6159 
                                                            let v6161 : string = "package.json"
                                                            let v6162 : string = method36(v6036, v6161)
                                                            let v6163 : string = "../.."
                                                            let v6164 : string = method36(v6036, v6163)
                                                            let v6165 : string = method36(v6164, v6161)
                                                            method76(v6162, v6160)
                                                            let v6166 : string = ""
                                                            method76(v6165, v6166)
                                                            let v6167 : string = $"{v6032}.{v5956}"
                                                            let v6168 : string = method36(v6036, v6167)
                                                            let v6169 : unit = ()
                                                            let v6170 : (unit -> unit) = closure126(v6168)
                                                            let v6171 : unit = (fun () -> v6170 (); v6169) ()
                                                            (* run_target_args'
                                                            let v6222 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v6227 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6228 : string = "std::fs::read(&*$0)"
                                                            let v6229 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6168 v6228 
                                                            (* run_target_args'
                                                            let v6231 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6232 : string = "$0.unwrap()"
                                                            let v6233 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6229 v6232 
                                                            let _run_target_args'_v6231 = v6233 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6234 : string = "$0.unwrap()"
                                                            let v6235 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6229 v6234 
                                                            let _run_target_args'_v6231 = v6235 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6236 : string = "$0.unwrap()"
                                                            let v6237 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6229 v6236 
                                                            let _run_target_args'_v6231 = v6237 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6238 : Vec<uint8> = match v6229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6231 = v6238 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6239 : Vec<uint8> = match v6229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6231 = v6239 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6240 : Vec<uint8> = match v6229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6231 = v6240 
                                                            #endif
#else
                                                            let v6241 : Vec<uint8> = match v6229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6231 = v6241 
                                                            #endif
                                                            let v6242 : Vec<uint8> = _run_target_args'_v6231 
                                                            let _run_target_args'_v6227 = v6242 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6246 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6227 = v6246 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6250 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6227 = v6250 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6254 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6227 = v6254 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6258 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6227 = v6258 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6262 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6227 = v6262 
                                                            #endif
#else
                                                            let v6265 : (uint8 []) = v6168 |> System.IO.File.ReadAllBytes
                                                            let v6266 : string = "$0.to_vec()"
                                                            let v6267 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6265 v6266 
                                                            let _run_target_args'_v6227 = v6267 
                                                            #endif
                                                            let v6268 : Vec<uint8> = _run_target_args'_v6227 
                                                            let v6274 : Vec<uint8> = method27(v6268)
                                                            let v6275 : string = "std::string::String::from_utf8($0)"
                                                            let v6276 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6274 v6275 
                                                            (* run_target_args'
                                                            let v6278 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6279 : string = "$0.unwrap()"
                                                            let v6280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6276 v6279 
                                                            let _run_target_args'_v6278 = v6280 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6281 : string = "$0.unwrap()"
                                                            let v6282 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6276 v6281 
                                                            let _run_target_args'_v6278 = v6282 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6283 : string = "$0.unwrap()"
                                                            let v6284 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6276 v6283 
                                                            let _run_target_args'_v6278 = v6284 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6285 : std_string_String = match v6276 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6278 = v6285 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6286 : std_string_String = match v6276 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6278 = v6286 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6287 : std_string_String = match v6276 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6278 = v6287 
                                                            #endif
#else
                                                            let v6288 : std_string_String = match v6276 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6278 = v6288 
                                                            #endif
                                                            let v6289 : std_string_String = _run_target_args'_v6278 
                                                            let v6292 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v6293 : string = Fable.Core.RustInterop.emitRustExpr v6289 v6292 
                                                            let _run_target_args'_v6222 = v6293 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6295 : string = null |> unbox<string>
                                                            let _run_target_args'_v6222 = v6295 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6299 : string = null |> unbox<string>
                                                            let _run_target_args'_v6222 = v6299 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6303 : string = null |> unbox<string>
                                                            let _run_target_args'_v6222 = v6303 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6307 : string = null |> unbox<string>
                                                            let _run_target_args'_v6222 = v6307 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6311 : string = null |> unbox<string>
                                                            let _run_target_args'_v6222 = v6311 
                                                            #endif
#else
                                                            let v6314 : string = v6168 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v6222 = v6314 
                                                            #endif
                                                            let v6315 : string = _run_target_args'_v6222 
                                                            let v6322 : string = "# spiral.process_python"
                                                            let v6323 : bool = v6315.Contains v6322 
                                                            let v6335 : string =
                                                                if v6323 then
                                                                    v6315
                                                                else
                                                                    let v6326 : string = "\";\".into()"
                                                                    let v6327 : string = Fable.Core.RustInterop.emitRustExpr () v6326 
                                                                    let v6328 : string = "),)"
                                                                    let v6329 : string = v6328 + v6327 
                                                                    let v6330 : string = "));"
                                                                    let v6331 : string = v6315.Replace (v6329, v6330)
                                                                    let v6332 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v6333 : string = " defaultOf::<()>();"
                                                                    method66(v6332, v6333, v6331)
                                                            let v6336 : bool = v6323 = false
                                                            if v6336 then
                                                                let v6337 : string = $"{v6335}\n\n{v6322}\n"
                                                                method76(v6168, v6337)
                                                            let v6338 : string = $"python \"{v6168}\""
                                                            let v6339 : string = "TRACE_LEVEL"
                                                            let v6340 : string = "Verbose"
                                                            let v6341 : (struct (string * string) []) = [|struct (v6339, v6340)|]
                                                            let v6342 : System.Threading.CancellationToken option = None
                                                            let v6343 : (struct (string * string) []) = [||]
                                                            let v6344 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v6345 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v6346 : string option = None
                                                            let v6358 : Result<string, string> =
                                                                match v6011 with
                                                                | US13_1(v6352) -> (* Error *)
                                                                    let v6354 : Result<string, string> = Error v6352 
                                                                    v6354
                                                                | US13_0(v6347) -> (* Ok *)
                                                                    let v6349 : Result<string, string> = Ok v6347 
                                                                    v6349
                                                            (* run_target_args'
                                                            let v6360 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6361 : string = "$0.ok()"
                                                            let v6362 : string option = Fable.Core.RustInterop.emitRustExpr v6358 v6361 
                                                            let _run_target_args'_v6360 = v6362 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6363 : string = "$0.ok()"
                                                            let v6364 : string option = Fable.Core.RustInterop.emitRustExpr v6358 v6363 
                                                            let _run_target_args'_v6360 = v6364 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6365 : string = "$0.ok()"
                                                            let v6366 : string option = Fable.Core.RustInterop.emitRustExpr v6358 v6365 
                                                            let _run_target_args'_v6360 = v6366 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6367 : string option = match v6358 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6360 = v6367 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6368 : string option = match v6358 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6360 = v6368 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6369 : string option = match v6358 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6360 = v6369 
                                                            #endif
#else
                                                            let v6370 : string option = match v6358 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6360 = v6370 
                                                            #endif
                                                            let v6371 : string option = _run_target_args'_v6360 
                                                            let v6374 : bool = true
                                                            let struct (v6375 : int32, v6376 : string) = method101(v6338, v6342, v6341, v6344, v6345, v6374, v6371)
                                                            let v6377 : int32 = v6341.Length
                                                            let v6378 : (string []) = Array.zeroCreate<string> (v6377)
                                                            let v6379 : Mut5 = {l0 = 0} : Mut5
                                                            while method32(v6377, v6379) do
                                                                let v6381 : int32 = v6379.l0
                                                                let struct (v6382 : string, v6383 : string) = v6341.[int v6381]
                                                                let v6384 : string = $"$env:{v6382}=''{v6383}''"
                                                                v6378.[int v6381] <- v6384
                                                                let v6385 : int32 = v6381 + 1
                                                                v6379.l0 <- v6385
                                                                ()
                                                            let v6387 : string seq = v6378 |> Seq.ofArray
                                                            let v6391 : (string -> (string seq -> string)) = String.concat
                                                            let v6392 : string = ";"
                                                            let v6393 : (string seq -> string) = v6391 v6392
                                                            let v6394 : string = v6393 v6387
                                                            let v6397 : string = $"pwsh -c '{v6394}; {v6338}'"
                                                            let v6398 : bool = v6375 = 0
                                                            let struct (v6475 : US5, v6476 : US5, v6477 : US5, v6478 : US5) =
                                                                if v6398 then
                                                                    let v6399 : (string -> US5) = closure71()
                                                                    let v6400 : (unit -> string) = closure127(v6376)
                                                                    let v6401 : (exn -> US5) = closure128(v6168, v6376, v6397)
                                                                    let v6403 : US5 = US5_1
                                                                    let result = ref v6403
                                                                    try
                                                                        result.Value <- v6400 () |> v6399 
                                                                    with ex ->
                                                                        result.Value <- v6401 ex 
                                                                    let v6404 : US5 = result.Value
                                                                    let v6415 : string option =
                                                                        match v6404 with
                                                                        | US5_1 -> (* None *)
                                                                            let v6413 : string option = None
                                                                            v6413
                                                                        | US5_0(v6408) -> (* Some *)
                                                                            let v6410 : string option = Some v6408 
                                                                            v6410
                                                                    let v6416 : string = "$0.unwrap()"
                                                                    let v6417 : string = Fable.Core.RustInterop.emitRustExpr v6415 v6416 
                                                                    let v6418 : US5 = US5_0(v5956)
                                                                    let v6419 : US5 = US5_0(v6335)
                                                                    let v6420 : US5 = US5_0(v6168)
                                                                    let v6421 : US5 = US5_0(v6417)
                                                                    struct (v6418, v6419, v6420, v6421)
                                                                else
                                                                    let v6422 : unit = ()
                                                                    let v6423 : (unit -> unit) = closure130(v6168, v6376, v6375, v6397)
                                                                    let v6424 : unit = (fun () -> v6423 (); v6422) ()
                                                                    let v6471 : US5 = US5_0(v5956)
                                                                    let v6472 : US5 = US5_1
                                                                    let v6473 : US5 = US5_1
                                                                    let v6474 : US5 = US5_1
                                                                    struct (v6471, v6472, v6473, v6474)
                                                            struct (v6475, v6476, v6477, v6478)
                                                    struct (v6479, v6480, v6481, v6482)
                                                else
                                                    let v6483 : unit = ()
                                                    let v6484 : (unit -> unit) = closure131(v35, v34)
                                                    let v6485 : unit = (fun () -> v6484 (); v6483) ()
                                                    let v6532 : US5 = US5_1
                                                    let v6533 : US5 = US5_1
                                                    let v6534 : US5 = US5_1
                                                    let v6535 : US5 = US5_1
                                                    struct (v6532, v6533, v6534, v6535)
                                            struct (v6536, v6537, v6538, v6539)
                                    struct (v6540, v6541, v6542, v6543)
                            let v6551 : string =
                                match v6544 with
                                | US5_1 -> (* None *)
                                    let v6549 : string = ""
                                    v6549
                                | US5_0(v6548) -> (* Some *)
                                    v6548
                            let v6552 : string = "extension"
                            let v6556 : string =
                                match v6545 with
                                | US5_1 -> (* None *)
                                    let v6554 : string = ""
                                    v6554
                                | US5_0(v6553) -> (* Some *)
                                    v6553
                            let v6557 : string = "code"
                            let v6561 : string =
                                match v6546 with
                                | US5_1 -> (* None *)
                                    let v6559 : string = ""
                                    v6559
                                | US5_0(v6558) -> (* Some *)
                                    v6558
                            let v6562 : string = "code_path"
                            let v6566 : string =
                                match v6547 with
                                | US5_1 -> (* None *)
                                    let v6564 : string = ""
                                    v6564
                                | US5_0(v6563) -> (* Some *)
                                    v6563
                            let v6567 : string = "output"
                            [|struct (v6552, v6551); struct (v6557, v6556); struct (v6562, v6561); struct (v6567, v6566)|]
        | _ ->
            let v6573 : string = "extension"
            let v6574 : string = ""
            let v6575 : string = "code"
            let v6576 : string = "code_path"
            let v6577 : string = "output"
            [|struct (v6573, v6574); struct (v6575, v6574); struct (v6576, v6574); struct (v6577, v6574)|]
    let v6580 : string = "$0.to_vec()"
    let v6581 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6579 v6580 
    let v6582 : unit = ()
    let v6583 : string = $"true; let _func1_from_v6582 = Func1::from(move |value| {{ //"
    let v6584 : bool = Fable.Core.RustInterop.emitRustExpr () v6583 
    let v6585 : string = $"value"
    let struct (v6586 : string, v6587 : string) = Fable.Core.RustInterop.emitRustExpr () v6585 
    (* run_target_args'
    let v6592 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6593 : string = "&*$0"
    let v6594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6586 v6593 
    let _run_target_args'_v6592 = v6594 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6595 : string = "&*$0"
    let v6596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6586 v6595 
    let _run_target_args'_v6592 = v6596 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6597 : string = "&*$0"
    let v6598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6586 v6597 
    let _run_target_args'_v6592 = v6598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6600 : Ref<Str> = v6586 |> unbox<Ref<Str>>
    let _run_target_args'_v6592 = v6600 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6604 : Ref<Str> = v6586 |> unbox<Ref<Str>>
    let _run_target_args'_v6592 = v6604 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6608 : Ref<Str> = v6586 |> unbox<Ref<Str>>
    let _run_target_args'_v6592 = v6608 
    #endif
#else
    let v6612 : Ref<Str> = v6586 |> unbox<Ref<Str>>
    let _run_target_args'_v6592 = v6612 
    #endif
    let v6615 : Ref<Str> = _run_target_args'_v6592 
    (* run_target_args'
    let v6625 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6626 : string = "String::from($0)"
    let v6627 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6615 v6626 
    let _run_target_args'_v6625 = v6627 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6628 : string = "String::from($0)"
    let v6629 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6615 v6628 
    let _run_target_args'_v6625 = v6629 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6630 : string = "String::from($0)"
    let v6631 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6615 v6630 
    let _run_target_args'_v6625 = v6631 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6633 : std_string_String = v6615 |> unbox<std_string_String>
    let _run_target_args'_v6625 = v6633 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6637 : std_string_String = v6615 |> unbox<std_string_String>
    let _run_target_args'_v6625 = v6637 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6641 : std_string_String = v6615 |> unbox<std_string_String>
    let _run_target_args'_v6625 = v6641 
    #endif
#else
    let v6645 : std_string_String = v6615 |> unbox<std_string_String>
    let _run_target_args'_v6625 = v6645 
    #endif
    let v6648 : std_string_String = _run_target_args'_v6625 
    (* run_target_args'
    let v6658 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6659 : string = "&*$0"
    let v6660 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6587 v6659 
    let _run_target_args'_v6658 = v6660 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6661 : string = "&*$0"
    let v6662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6587 v6661 
    let _run_target_args'_v6658 = v6662 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6663 : string = "&*$0"
    let v6664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6587 v6663 
    let _run_target_args'_v6658 = v6664 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6666 : Ref<Str> = v6587 |> unbox<Ref<Str>>
    let _run_target_args'_v6658 = v6666 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6670 : Ref<Str> = v6587 |> unbox<Ref<Str>>
    let _run_target_args'_v6658 = v6670 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6674 : Ref<Str> = v6587 |> unbox<Ref<Str>>
    let _run_target_args'_v6658 = v6674 
    #endif
#else
    let v6678 : Ref<Str> = v6587 |> unbox<Ref<Str>>
    let _run_target_args'_v6658 = v6678 
    #endif
    let v6681 : Ref<Str> = _run_target_args'_v6658 
    (* run_target_args'
    let v6691 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6692 : string = "String::from($0)"
    let v6693 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6681 v6692 
    let _run_target_args'_v6691 = v6693 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6694 : string = "String::from($0)"
    let v6695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6681 v6694 
    let _run_target_args'_v6691 = v6695 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6696 : string = "String::from($0)"
    let v6697 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6681 v6696 
    let _run_target_args'_v6691 = v6697 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6699 : std_string_String = v6681 |> unbox<std_string_String>
    let _run_target_args'_v6691 = v6699 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6703 : std_string_String = v6681 |> unbox<std_string_String>
    let _run_target_args'_v6691 = v6703 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6707 : std_string_String = v6681 |> unbox<std_string_String>
    let _run_target_args'_v6691 = v6707 
    #endif
#else
    let v6711 : std_string_String = v6681 |> unbox<std_string_String>
    let _run_target_args'_v6691 = v6711 
    #endif
    let v6714 : std_string_String = _run_target_args'_v6691 
    let v6721 : (std_string_String * std_string_String) = v6648, v6714 
    let func1_from_result = v6721 //
    let v6724 : _ = func1_from_result
    let v6725 : string = $"true; $0 /*"
    let v6726 : bool = Fable.Core.RustInterop.emitRustExpr v6724 v6725 
    let v6727 : string = $"*/ }}); //"
    let v6728 : bool = Fable.Core.RustInterop.emitRustExpr () v6727 
    let v6729 : string = $"_func1_from_v6582"
    let v6730 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6729 
    let v6731 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v6732 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v6730)
    let v6733 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6581, v6732) v6731 
    let v6734 : string = "std::collections::BTreeMap::from_iter(v6733.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v6735 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6734 
    let v6736 : string = "serde_json::to_string(&v6735)"
    let v6737 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6736 
    let v6738 : (serde_json_Error -> string) = method282()
    (* run_target_args'
    let v6740 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6741 : string = "$0.map_err(|x| $1(x))"
    let v6742 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6737, v6738) v6741 
    let _run_target_args'_v6740 = v6742 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6743 : string = "$0.map_err(|x| $1(x))"
    let v6744 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6737, v6738) v6743 
    let _run_target_args'_v6740 = v6744 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6745 : string = "$0.map_err(|x| $1(x))"
    let v6746 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6737, v6738) v6745 
    let _run_target_args'_v6740 = v6746 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6747 : Result<std_string_String, string> = match v6737 with Ok x -> Ok x | Error x -> Error (v6738 x)
    let _run_target_args'_v6740 = v6747 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6748 : Result<std_string_String, string> = match v6737 with Ok x -> Ok x | Error x -> Error (v6738 x)
    let _run_target_args'_v6740 = v6748 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6749 : Result<std_string_String, string> = match v6737 with Ok x -> Ok x | Error x -> Error (v6738 x)
    let _run_target_args'_v6740 = v6749 
    #endif
#else
    let v6750 : Result<std_string_String, string> = match v6737 with Ok x -> Ok x | Error x -> Error (v6738 x)
    let _run_target_args'_v6740 = v6750 
    #endif
    let v6751 : Result<std_string_String, string> = _run_target_args'_v6740 
    let v6754 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6755 : bool = Fable.Core.RustInterop.emitRustExpr v6751 v6754 
    let v6756 : string = "x"
    let v6757 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6756 
    let v6758 : string = "fable_library_rust::String_::fromString($0)"
    let v6759 : string = Fable.Core.RustInterop.emitRustExpr v6757 v6758 
    let v6760 : string = "true; $0 })"
    let v6761 : bool = Fable.Core.RustInterop.emitRustExpr v6759 v6760 
    let v6762 : string = "_result_map_"
    let v6763 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6762 
    let v6764 : string = ""
    let v6765 : string = "}"
    let v6766 : string = v6764 + v6765 
    let x = v6763 //
    let v6767 : _ = x
    let v6768 : unit = ()
    (* run_target_args'
    let v6769 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6770 : string = $"true; let _fix_closure_v6768 = $0"
    let v6771 : bool = Fable.Core.RustInterop.emitRustExpr v6767 v6770 
    let _run_target_args'_v6769 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6772 : string = $"true; let _fix_closure_v6768 = $0"
    let v6773 : bool = Fable.Core.RustInterop.emitRustExpr v6767 v6772 
    let _run_target_args'_v6769 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6774 : string = $"true; let _fix_closure_v6768 = $0"
    let v6775 : bool = Fable.Core.RustInterop.emitRustExpr v6767 v6774 
    let _run_target_args'_v6769 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v6769 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v6769 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v6769 = false 
    #endif
#else
    let _run_target_args'_v6769 = false 
    #endif
    let v6776 : bool = _run_target_args'_v6769 
    let v6778 : string = $"true; _fix_closure_v6768 " + v6766 + "); " + v6764 + " // rust.fix_closure'"
    let v6779 : bool = Fable.Core.RustInterop.emitRustExpr () v6778 
    let v6780 : string = "__future_init"
    let v6781 : _ = Fable.Core.RustInterop.emitRustExpr () v6780 
    let v6782 : string = "v6781"
    let v6783 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v6782 
    v6783
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure5(v0)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v90 : clap_Command = method0()
    let v91 : string = "clap::Command::get_matches($0)"
    let v92 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : US0 = v28.l0
    let v94 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v93, v92)
    let v95 : string = "futures::executor::block_on($0)"
    let v96 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v94 v95 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "$0.unwrap()"
    let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "$0.unwrap()"
    let v102 : string = Fable.Core.RustInterop.emitRustExpr v96 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "$0.unwrap()"
    let v104 : string = Fable.Core.RustInterop.emitRustExpr v96 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v107 
    #endif
#else
    let v108 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v108 
    #endif
    let v109 : string = _run_target_args'_v98 
    let v112 : US0 = v28.l0
    let v113 : bool =
        match v112 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v113 then
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure10(v109)
        let v116 : unit = (fun () -> v115 (); v114) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
