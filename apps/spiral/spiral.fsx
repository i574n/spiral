#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : string
    | US40_1 of f1_0 : string
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : US41
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US43_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : int32 * f0_1 : string
    | US44_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_collections_HashMap<string, string>
    | US45_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US5
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0
    | US47_1 of f1_0 : string
and [<Struct>] US48 =
    | US48_0 of f0_0 : std_fs_FileType
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0
    | US49_1
    | US49_2
and [<Struct>] US50 =
    | US50_0 of f0_0 : async_walkdir_DirEntry
    | US50_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : string * f0_1 : string
    | US51_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v84 : (string list -> (string [])) = List.toArray
    let v85 : (string []) = v84 v80
    let v88 : string = "$0.to_vec()"
    let v89 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v85 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    (* run_target_args'
    let v131 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v132 : string = "String::from($0)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v132 
    let _run_target_args'_v131 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string = "String::from($0)"
    let v135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v134 
    let _run_target_args'_v131 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v136 
    let _run_target_args'_v131 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v143 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v147 
    #endif
#else
    let v151 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v151 
    #endif
    let v154 : std_string_String = _run_target_args'_v131 
    let v160 : string = "Box::new($0)"
    let v161 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v154 v160 
    let v162 : string = "Box::leak($0)"
    let v163 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v161 v162 
    let v164 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v165 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "true; $0 }).collect::<Vec<_>>()"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : string = "_vec_map"
    let v169 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v171 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "$0.value_parser($1)"
    let v173 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v171) v172 
    let v174 : string = "clap::Command::arg($0, $1)"
    let v175 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v173) v174 
    let v176 : string = "NAME"
    let v177 : string = "r#\"" + v176 + "\"#"
    let v178 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v177 
    let v179 : string = "VERSION"
    let v180 : string = "r#\"" + v179 + "\"#"
    let v181 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v178; v181|]
    let v184 : unativeint = 1 |> unativeint 
    let v188 : unativeint = 0 |> unativeint 
    let v192 : unativeint = 0 |> unativeint 
    let v196 : bool = v188 = v192 
    let v204 : clap_builder_ValueRange =
        if v196 then
            let v199 : string = "clap::builder::ValueRange::new($0..)"
            let v200 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v184 v199 
            v200
        else
            let v201 : string = ""
            let v202 : string = "clap::builder::ValueRange::new($0.." + v201 + "$1)"
            let v203 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v184, v188) v202 
            v203
    let v205 : string = "deps"
    let v206 : string = "r#\"" + v205 + "\"#"
    let v207 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v206 
    let v208 : string = "clap::Arg::new($0)"
    let v209 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let v210 : string = "$0.short($1)"
    let v211 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v209, 'd') v210 
    let v212 : string = "r#\"" + v205 + "\"#"
    let v213 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v212 
    let v214 : string = "$0.long($1)"
    let v215 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v211, v213) v214 
    let v216 : string = "$0.to_vec()"
    let v217 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v182 v216 
    let v218 : string = "$0.value_names($1)"
    let v219 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v215, v217) v218 
    let v220 : string = "$0.num_args($1)"
    let v221 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v219, v204) v220 
    let v222 : string = "clap::ArgAction::Append"
    let v223 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v222 
    let v224 : string = "$0.action($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v221, v223) v224 
    let v226 : string = "clap::Command::arg($0, $1)"
    let v227 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v175, v225) v226 
    let v228 : string = "clap::Command::subcommand($0, v227)"
    let v229 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v228 
    let v230 : string = "cuda"
    let v231 : string = "r#\"" + v230 + "\"#"
    let v232 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v231 
    let v233 : string = "clap::Command::new($0)"
    let v234 : clap_Command = Fable.Core.RustInterop.emitRustExpr v232 v233 
    let v235 : string = "py-path"
    let v236 : string = "r#\"" + v235 + "\"#"
    let v237 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : string = "clap::Arg::new($0)"
    let v239 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v237 v238 
    let v240 : string = "$0.short($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v239, 'p') v240 
    let v242 : string = "r#\"" + v235 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "$0.long($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, v243) v244 
    let v246 : string = "$0.required($1)"
    let v247 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, true) v246 
    let v248 : string = "clap::Command::arg($0, $1)"
    let v249 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v234, v247) v248 
    let v250 : string = "env"
    let v251 : string = "r#\"" + v250 + "\"#"
    let v252 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "clap::Arg::new($0)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "$0.short($1)"
    let v256 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, 'e') v255 
    let v257 : string = "r#\"" + v250 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "$0.long($1)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v256, v258) v259 
    
    
    let v263 : string = "Poetry"
    let v264 : (unit -> string) = v263.ToLower
    let v265 : string = v264 ()
    let v270 : string = "Pip"
    let v271 : (unit -> string) = v270.ToLower
    let v272 : string = v271 ()
    let v275 : string list = []
    let v277 : string list = v265 :: v275 
    let v281 : string list = v272 :: v277 
    let v285 : (string list -> (string [])) = List.toArray
    let v286 : (string []) = v285 v281
    let v289 : string = "$0.to_vec()"
    let v290 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v286 v289 
    let v291 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
    let v293 : string = "x"
    let v294 : string = Fable.Core.RustInterop.emitRustExpr () v293 
    (* run_target_args'
    let v299 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v300 : string = "&*$0"
    let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v300 
    let _run_target_args'_v299 = v301 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : string = "&*$0"
    let v303 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v302 
    let _run_target_args'_v299 = v303 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v304 : string = "&*$0"
    let v305 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v304 
    let _run_target_args'_v299 = v305 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v315 
    #endif
#else
    let v319 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v319 
    #endif
    let v322 : Ref<Str> = _run_target_args'_v299 
    (* run_target_args'
    let v332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v333 : string = "String::from($0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v333 
    let _run_target_args'_v332 = v334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v335 : string = "String::from($0)"
    let v336 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v335 
    let _run_target_args'_v332 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "String::from($0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v337 
    let _run_target_args'_v332 = v338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v340 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v340 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v348 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v348 
    #endif
#else
    let v352 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v352 
    #endif
    let v355 : std_string_String = _run_target_args'_v332 
    let v361 : string = "Box::new($0)"
    let v362 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v355 v361 
    let v363 : string = "Box::leak($0)"
    let v364 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v362 v363 
    let v365 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v366 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v364 v365 
    let v367 : string = "true; $0 }).collect::<Vec<_>>()"
    let v368 : bool = Fable.Core.RustInterop.emitRustExpr v366 v367 
    let v369 : string = "_vec_map"
    let v370 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v372 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v370 v371 
    let v373 : string = "$0.value_parser($1)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, v372) v373 
    let v375 : string = "clap::Command::arg($0, $1)"
    let v376 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v249, v374) v375 
    let v377 : string = "r#\"" + v176 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "r#\"" + v179 + "\"#"
    let v380 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v378; v380|]
    let v383 : unativeint = 1 |> unativeint 
    let v387 : unativeint = 0 |> unativeint 
    let v391 : unativeint = 0 |> unativeint 
    let v395 : bool = v387 = v391 
    let v403 : clap_builder_ValueRange =
        if v395 then
            let v398 : string = "clap::builder::ValueRange::new($0..)"
            let v399 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v383 v398 
            v399
        else
            let v400 : string = ""
            let v401 : string = "clap::builder::ValueRange::new($0.." + v400 + "$1)"
            let v402 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v383, v387) v401 
            v402
    let v404 : string = "r#\"" + v205 + "\"#"
    let v405 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v404 
    let v406 : string = "clap::Arg::new($0)"
    let v407 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v405 v406 
    let v408 : string = "$0.short($1)"
    let v409 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v407, 'd') v408 
    let v410 : string = "r#\"" + v205 + "\"#"
    let v411 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v410 
    let v412 : string = "$0.long($1)"
    let v413 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v409, v411) v412 
    let v414 : string = "$0.to_vec()"
    let v415 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v381 v414 
    let v416 : string = "$0.value_names($1)"
    let v417 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v413, v415) v416 
    let v418 : string = "$0.num_args($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v417, v403) v418 
    let v420 : string = "clap::ArgAction::Append"
    let v421 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "$0.action($1)"
    let v423 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, v421) v422 
    let v424 : string = "clap::Command::arg($0, $1)"
    let v425 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v376, v423) v424 
    let v426 : string = "clap::Command::subcommand($0, v425)"
    let v427 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v426 
    let v428 : string = "fable"
    let v429 : string = "r#\"" + v428 + "\"#"
    let v430 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "clap::Command::new($0)"
    let v432 : clap_Command = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let v433 : string = "fs-path"
    let v434 : string = "r#\"" + v433 + "\"#"
    let v435 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v434 
    let v436 : string = "clap::Arg::new($0)"
    let v437 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v435 v436 
    let v438 : string = "$0.short($1)"
    let v439 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v437, 'f') v438 
    let v440 : string = "r#\"" + v433 + "\"#"
    let v441 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v440 
    let v442 : string = "$0.long($1)"
    let v443 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v439, v441) v442 
    let v444 : string = "$0.required($1)"
    let v445 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v443, true) v444 
    let v446 : string = "clap::Command::arg($0, $1)"
    let v447 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v432, v445) v446 
    let v448 : string = "r#\"" + v0 + "\"#"
    let v449 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v448 
    let v450 : string = "clap::Arg::new($0)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v449 v450 
    let v452 : string = "$0.short($1)"
    let v453 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, 'c') v452 
    let v454 : string = "r#\"" + v0 + "\"#"
    let v455 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v454 
    let v456 : string = "$0.long($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v453, v455) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v447, v457) v458 
    let v460 : string = "clap::Command::subcommand($0, v459)"
    let v461 : clap_Command = Fable.Core.RustInterop.emitRustExpr v427 v460 
    let v462 : string = "rust"
    let v463 : string = "r#\"" + v462 + "\"#"
    let v464 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v463 
    let v465 : string = "clap::Command::new($0)"
    let v466 : clap_Command = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let v467 : string = "r#\"" + v433 + "\"#"
    let v468 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v467 
    let v469 : string = "clap::Arg::new($0)"
    let v470 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v468 v469 
    let v471 : string = "$0.short($1)"
    let v472 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v470, 'f') v471 
    let v473 : string = "r#\"" + v433 + "\"#"
    let v474 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v473 
    let v475 : string = "$0.long($1)"
    let v476 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v472, v474) v475 
    let v477 : string = "$0.required($1)"
    let v478 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v476, true) v477 
    let v479 : string = "clap::Command::arg($0, $1)"
    let v480 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v466, v478) v479 
    let v481 : string = "r#\"" + v176 + "\"#"
    let v482 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "r#\"" + v179 + "\"#"
    let v484 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v483 
    let v485 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v482; v484|]
    let v487 : unativeint = 1 |> unativeint 
    let v491 : unativeint = 0 |> unativeint 
    let v495 : unativeint = 0 |> unativeint 
    let v499 : bool = v491 = v495 
    let v507 : clap_builder_ValueRange =
        if v499 then
            let v502 : string = "clap::builder::ValueRange::new($0..)"
            let v503 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v487 v502 
            v503
        else
            let v504 : string = ""
            let v505 : string = "clap::builder::ValueRange::new($0.." + v504 + "$1)"
            let v506 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v487, v491) v505 
            v506
    let v508 : string = "r#\"" + v205 + "\"#"
    let v509 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v508 
    let v510 : string = "clap::Arg::new($0)"
    let v511 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let v512 : string = "$0.short($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v511, 'd') v512 
    let v514 : string = "r#\"" + v205 + "\"#"
    let v515 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v514 
    let v516 : string = "$0.long($1)"
    let v517 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v515) v516 
    let v518 : string = "$0.to_vec()"
    let v519 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v485 v518 
    let v520 : string = "$0.value_names($1)"
    let v521 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v517, v519) v520 
    let v522 : string = "$0.num_args($1)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v521, v507) v522 
    let v524 : string = "clap::ArgAction::Append"
    let v525 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v524 
    let v526 : string = "$0.action($1)"
    let v527 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v523, v525) v526 
    let v528 : string = "clap::Command::arg($0, $1)"
    let v529 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v480, v527) v528 
    let v531 : unativeint = 0 |> unativeint 
    let v535 : unativeint = 1 |> unativeint 
    let v539 : unativeint = 0 |> unativeint 
    let v543 : bool = v535 = v539 
    let v551 : clap_builder_ValueRange =
        if v543 then
            let v546 : string = "clap::builder::ValueRange::new($0..)"
            let v547 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v531 v546 
            v547
        else
            let v548 : string = "="
            let v549 : string = "clap::builder::ValueRange::new($0.." + v548 + "$1)"
            let v550 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v531, v535) v549 
            v550
    let v552 : string = "wasm"
    let v553 : string = "r#\"" + v552 + "\"#"
    let v554 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v553 
    let v555 : string = "clap::Arg::new($0)"
    let v556 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v554 v555 
    let v557 : string = "$0.short($1)"
    let v558 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v556, 'w') v557 
    let v559 : string = "r#\"" + v552 + "\"#"
    let v560 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v559 
    let v561 : string = "$0.long($1)"
    let v562 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v558, v560) v561 
    let v563 : string = "$0.num_args($1)"
    let v564 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v562, v551) v563 
    let v565 : string = "$0.require_equals($1)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v564, true) v565 
    let v567 : string = ""
    let v568 : string = "r#\"" + v567 + "\"#"
    let v569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v568 
    let v570 : string = "$0.default_missing_value($1)"
    let v571 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, v569) v570 
    let v572 : string = "clap::Command::arg($0, $1)"
    let v573 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v529, v571) v572 
    let v575 : unativeint = 0 |> unativeint 
    let v579 : unativeint = 1 |> unativeint 
    let v583 : unativeint = 0 |> unativeint 
    let v587 : bool = v579 = v583 
    let v595 : clap_builder_ValueRange =
        if v587 then
            let v590 : string = "clap::builder::ValueRange::new($0..)"
            let v591 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v575 v590 
            v591
        else
            let v592 : string = "="
            let v593 : string = "clap::builder::ValueRange::new($0.." + v592 + "$1)"
            let v594 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v575, v579) v593 
            v594
    let v596 : string = "contract"
    let v597 : string = "r#\"" + v596 + "\"#"
    let v598 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v597 
    let v599 : string = "clap::Arg::new($0)"
    let v600 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v598 v599 
    let v601 : string = "$0.short($1)"
    let v602 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v600, 'c') v601 
    let v603 : string = "r#\"" + v596 + "\"#"
    let v604 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v603 
    let v605 : string = "$0.long($1)"
    let v606 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v602, v604) v605 
    let v607 : string = "$0.num_args($1)"
    let v608 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v606, v595) v607 
    let v609 : string = "$0.require_equals($1)"
    let v610 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v608, true) v609 
    let v611 : string = "r#\"" + v567 + "\"#"
    let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
    let v613 : string = "$0.default_missing_value($1)"
    let v614 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v610, v612) v613 
    let v615 : string = "clap::Command::arg($0, $1)"
    let v616 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v573, v614) v615 
    let v617 : string = "cleanup"
    let v618 : string = "r#\"" + v617 + "\"#"
    let v619 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v618 
    let v620 : string = "clap::Arg::new($0)"
    let v621 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v619 v620 
    let v622 : string = "$0.short($1)"
    let v623 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v621, 'l') v622 
    let v624 : string = "r#\"" + v617 + "\"#"
    let v625 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v624 
    let v626 : string = "$0.long($1)"
    let v627 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v623, v625) v626 
    let v628 : string = "true"
    let v629 : string = "r#\"" + v628 + "\"#"
    let v630 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.default_value($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v627, v630) v631 
    let v633 : string = "clap::ArgAction::SetFalse"
    let v634 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v633 
    let v635 : string = "$0.action($1)"
    let v636 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v632, v634) v635 
    let v637 : string = "clap::Command::arg($0, $1)"
    let v638 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v616, v636) v637 
    let v639 : string = "clap::Command::subcommand($0, v638)"
    let v640 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v639 
    let v641 : string = "typescript"
    let v642 : string = "r#\"" + v641 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "clap::Command::new($0)"
    let v645 : clap_Command = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let v646 : string = "r#\"" + v433 + "\"#"
    let v647 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v646 
    let v648 : string = "clap::Arg::new($0)"
    let v649 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let v650 : string = "$0.short($1)"
    let v651 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v649, 'f') v650 
    let v652 : string = "r#\"" + v433 + "\"#"
    let v653 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v652 
    let v654 : string = "$0.long($1)"
    let v655 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v651, v653) v654 
    let v656 : string = "$0.required($1)"
    let v657 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v655, true) v656 
    let v658 : string = "clap::Command::arg($0, $1)"
    let v659 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v645, v657) v658 
    let v660 : string = "r#\"" + v176 + "\"#"
    let v661 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v660 
    let v662 : string = "r#\"" + v179 + "\"#"
    let v663 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v662 
    let v664 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v661; v663|]
    let v666 : unativeint = 1 |> unativeint 
    let v670 : unativeint = 0 |> unativeint 
    let v674 : unativeint = 0 |> unativeint 
    let v678 : bool = v670 = v674 
    let v685 : clap_builder_ValueRange =
        if v678 then
            let v681 : string = "clap::builder::ValueRange::new($0..)"
            let v682 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v666 v681 
            v682
        else
            let v683 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v684 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v666, v670) v683 
            v684
    let v686 : string = "r#\"" + v205 + "\"#"
    let v687 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v686 
    let v688 : string = "clap::Arg::new($0)"
    let v689 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v687 v688 
    let v690 : string = "$0.short($1)"
    let v691 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v689, 'd') v690 
    let v692 : string = "r#\"" + v205 + "\"#"
    let v693 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v692 
    let v694 : string = "$0.long($1)"
    let v695 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v691, v693) v694 
    let v696 : string = "$0.to_vec()"
    let v697 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v664 v696 
    let v698 : string = "$0.value_names($1)"
    let v699 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v695, v697) v698 
    let v700 : string = "$0.num_args($1)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v699, v685) v700 
    let v702 : string = "clap::ArgAction::Append"
    let v703 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v702 
    let v704 : string = "$0.action($1)"
    let v705 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v701, v703) v704 
    let v706 : string = "clap::Command::arg($0, $1)"
    let v707 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v659, v705) v706 
    let v708 : string = "clap::Command::subcommand($0, v707)"
    let v709 : clap_Command = Fable.Core.RustInterop.emitRustExpr v640 v708 
    let v710 : string = "python"
    let v711 : string = "r#\"" + v710 + "\"#"
    let v712 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v711 
    let v713 : string = "clap::Command::new($0)"
    let v714 : clap_Command = Fable.Core.RustInterop.emitRustExpr v712 v713 
    let v715 : string = "r#\"" + v433 + "\"#"
    let v716 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v715 
    let v717 : string = "clap::Arg::new($0)"
    let v718 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v716 v717 
    let v719 : string = "$0.short($1)"
    let v720 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v718, 'f') v719 
    let v721 : string = "r#\"" + v433 + "\"#"
    let v722 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v721 
    let v723 : string = "$0.long($1)"
    let v724 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v720, v722) v723 
    let v725 : string = "$0.required($1)"
    let v726 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v724, true) v725 
    let v727 : string = "clap::Command::arg($0, $1)"
    let v728 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v714, v726) v727 
    let v729 : string = "r#\"" + v176 + "\"#"
    let v730 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "r#\"" + v179 + "\"#"
    let v732 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v731 
    let v733 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v730; v732|]
    let v735 : unativeint = 1 |> unativeint 
    let v739 : unativeint = 0 |> unativeint 
    let v743 : unativeint = 0 |> unativeint 
    let v747 : bool = v739 = v743 
    let v754 : clap_builder_ValueRange =
        if v747 then
            let v750 : string = "clap::builder::ValueRange::new($0..)"
            let v751 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v735 v750 
            v751
        else
            let v752 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v753 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v735, v739) v752 
            v753
    let v755 : string = "r#\"" + v205 + "\"#"
    let v756 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v755 
    let v757 : string = "clap::Arg::new($0)"
    let v758 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v756 v757 
    let v759 : string = "$0.short($1)"
    let v760 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v758, 'd') v759 
    let v761 : string = "r#\"" + v205 + "\"#"
    let v762 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v761 
    let v763 : string = "$0.long($1)"
    let v764 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v760, v762) v763 
    let v765 : string = "$0.to_vec()"
    let v766 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v733 v765 
    let v767 : string = "$0.value_names($1)"
    let v768 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v764, v766) v767 
    let v769 : string = "$0.num_args($1)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v768, v754) v769 
    let v771 : string = "clap::ArgAction::Append"
    let v772 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v771 
    let v773 : string = "$0.action($1)"
    let v774 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v770, v772) v773 
    let v775 : string = "clap::Command::arg($0, $1)"
    let v776 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v728, v774) v775 
    let v777 : string = "clap::Command::subcommand($0, v776)"
    let v778 : clap_Command = Fable.Core.RustInterop.emitRustExpr v709 v777 
    let v779 : string = "dib"
    let v780 : string = "r#\"" + v779 + "\"#"
    let v781 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v780 
    let v782 : string = "clap::Command::new($0)"
    let v783 : clap_Command = Fable.Core.RustInterop.emitRustExpr v781 v782 
    let v784 : string = "path"
    let v785 : string = "r#\"" + v784 + "\"#"
    let v786 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v785 
    let v787 : string = "clap::Arg::new($0)"
    let v788 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v786 v787 
    let v789 : string = "$0.short($1)"
    let v790 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v788, 'p') v789 
    let v791 : string = "r#\"" + v784 + "\"#"
    let v792 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v791 
    let v793 : string = "$0.long($1)"
    let v794 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v790, v792) v793 
    let v795 : string = "$0.required($1)"
    let v796 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v794, true) v795 
    let v797 : string = "clap::Command::arg($0, $1)"
    let v798 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v783, v796) v797 
    let v799 : string = "u8"
    let v800 : string = "clap::value_parser!(" + v799 + ").into()"
    let v801 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v800 
    let v802 : string = "retries"
    let v803 : string = "r#\"" + v802 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "clap::Arg::new($0)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v804 v805 
    let v807 : string = "$0.short($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, 'r') v807 
    let v809 : string = "r#\"" + v802 + "\"#"
    let v810 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v809 
    let v811 : string = "$0.long($1)"
    let v812 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v810) v811 
    let v813 : string = "$0.value_parser($1)"
    let v814 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v812, v801) v813 
    let v815 : string = "clap::Command::arg($0, $1)"
    let v816 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v798, v814) v815 
    let v817 : string = "working-directory"
    let v818 : string = "r#\"" + v817 + "\"#"
    let v819 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v818 
    let v820 : string = "clap::Arg::new($0)"
    let v821 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v819 v820 
    let v822 : string = "$0.short($1)"
    let v823 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v821, 'w') v822 
    let v824 : string = "r#\"" + v817 + "\"#"
    let v825 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v824 
    let v826 : string = "$0.long($1)"
    let v827 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v823, v825) v826 
    let v828 : string = "clap::Command::arg($0, $1)"
    let v829 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v816, v827) v828 
    let v830 : string = "clap::Command::subcommand($0, v829)"
    let v831 : clap_Command = Fable.Core.RustInterop.emitRustExpr v778 v830 
    v831
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = method4(v0)
    let v7 : string = "std::env::var(&*$0)"
    let v8 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "x"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::String_::fromString($0)"
    let v14 : string = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; $0 })"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "_result_map_"
    let v18 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = method5()
    let v20 : string = "$0.unwrap_or($1)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr struct (v18, v19) v20 
    let _run_target_args'_v5 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US3 = US3_1
    let v23 : US4 = US4_3(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _run_target_args'_v5 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : US3 = US3_2
    let v27 : US4 = US4_3(v26)
    let v28 : string = $"env.get_environment_variable / target: {v27} / var: {v0}"
    let v29 : string = failwith<string> v28
    let _run_target_args'_v5 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : string = "process.env[$0] ?? \"\""
    let v31 : string = Fable.Core.JsInterop.emitJsExpr v0 v30 
    let _run_target_args'_v5 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : string = "os"
    let v34 : IOsEnviron = Fable.Core.PyInterop.importAll v33 
    let v35 : string = "v34.environ"
    let v36 : obj = Fable.Core.PyInterop.emitPyExpr () v35 
    let v40 : string = "v36.get($0)"
    let v41 : string = Fable.Core.PyInterop.emitPyExpr v0 v40 
    let mutable _v41 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v45 : (string -> string option) = Option.ofObj
    let v46 : string option = v45 v41
    v46 
    #else
    Some v41 
    #endif
    |> fun x -> _v41 <- Some x
    let v47 : string option = match _v41 with Some x -> x | None -> failwith "optionm'.of_obj / _v41=None"
    let v52 : (string -> US5) = method6()
    let v53 : US5 option = v47 |> Option.map v52 
    let v67 : US5 = US5_1
    let v68 : US5 = v53 |> Option.defaultValue v67 
    let v75 : string =
        match v68 with
        | US5_1 -> (* None *)
            let v73 : string = ""
            v73
        | US5_0(v72) -> (* Some *)
            v72
    let _run_target_args'_v5 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : US3 = US3_1
    let v77 : US4 = US4_1(v76)
    let v78 : string = $"env.get_environment_variable / target: {v77} / var: {v0}"
    let v79 : string = failwith<string> v78
    let _run_target_args'_v5 = v79 
    #endif
#else
    let v80 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v81 : string = v80 v0
    let mutable _v81 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v83 : (string -> string option) = Option.ofObj
    let v84 : string option = v83 v81
    v84 
    #else
    Some v81 
    #endif
    |> fun x -> _v81 <- Some x
    let v85 : string option = match _v81 with Some x -> x | None -> failwith "optionm'.of_obj / _v81=None"
    let v90 : (string -> US5) = method6()
    let v91 : US5 option = v85 |> Option.map v90 
    let v105 : US5 = US5_1
    let v106 : US5 = v91 |> Option.defaultValue v105 
    let v113 : string =
        match v106 with
        | US5_1 -> (* None *)
            let v111 : string = ""
            v111
        | US5_0(v110) -> (* Some *)
            v110
    let _run_target_args'_v5 = v113 
    #endif
    let v114 : string = _run_target_args'_v5 
    v114
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v200 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v139 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v140 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v140 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v141 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v141 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v143 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v139 = v143 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v146 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v146 
            #endif
#if FABLE_COMPILER_PYTHON
            let v147 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v147 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v148 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v148 
            #endif
#else
            let v149 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v149 
            #endif
            let v150 : System.DateTime = _run_target_args'_v139 
            (* run_target_args'
            let v158 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v159 : (System.DateTime -> int64) = _.Ticks
            let v160 : int64 = v159 v150
            let _run_target_args'_v158 = v160 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v161 : (System.DateTime -> int64) = _.Ticks
            let v162 : int64 = v161 v150
            let _run_target_args'_v158 = v162 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v164 : int64 = null |> unbox<int64>
            let _run_target_args'_v158 = v164 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v167 : (System.DateTime -> int64) = _.Ticks
            let v168 : int64 = v167 v150
            let _run_target_args'_v158 = v168 
            #endif
#if FABLE_COMPILER_PYTHON
            let v169 : (System.DateTime -> int64) = _.Ticks
            let v170 : int64 = v169 v150
            let _run_target_args'_v158 = v170 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v171 : (System.DateTime -> int64) = _.Ticks
            let v172 : int64 = v171 v150
            let _run_target_args'_v158 = v172 
            #endif
#else
            let v173 : (System.DateTime -> int64) = _.Ticks
            let v174 : int64 = v173 v150
            let _run_target_args'_v158 = v174 
            #endif
            let v175 : int64 = _run_target_args'_v158 
            let v196 : int64 = v175 |> int64 
            US2_0(v196)
    struct (v127, v200)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v13 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v51 
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "String::from($0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v65 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v65 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v73 
    #endif
#else
    let v77 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v77 
    #endif
    let v80 : std_string_String = _run_target_args'_v57 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v13 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v88 
    (* run_target_args'
    let v94 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v95 
    let _run_target_args'_v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v97 
    let _run_target_args'_v94 = v98 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v99 
    let _run_target_args'_v94 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v110 
    #endif
#else
    let v114 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v114 
    #endif
    let v117 : std_string_String = _run_target_args'_v94 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v117 v123 
    let _run_target_args'_v13 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v126 : string = null |> unbox<string>
    let _run_target_args'_v13 = v126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v13 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v134 : string = null |> unbox<string>
    let _run_target_args'_v13 = v134 
    #endif
#else
    let v138 : string = null |> unbox<string>
    let _run_target_args'_v13 = v138 
    #endif
    let v141 : string = _run_target_args'_v13 
    let v149 : string = "True"
    let v150 : bool = v141 <> v149 
    let v162 : US2 =
        if v150 then
            US2_1
        else
            let v154 : string = $"near_sdk::env::block_timestamp()"
            let v155 : uint64 = Fable.Core.RustInterop.emitRustExpr () v154 
            let v157 : (uint64 -> int64) = int64
            let v158 : int64 = v157 v155
            US2_0(v158)
    let v163 : US1 = US1_1
    let _run_target_args'_v3 = struct (v163, v162) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v164 : US1, v165 : US2) = method2()
    let _run_target_args'_v3 = struct (v164, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v166 : US1, v167 : US2) = method2()
    let _run_target_args'_v3 = struct (v166, v167) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v168 : US1, v169 : US2) = method2()
    let _run_target_args'_v3 = struct (v168, v169) 
    #endif
#else
    let struct (v170 : US1, v171 : US2) = method2()
    let _run_target_args'_v3 = struct (v170, v171) 
    #endif
    let struct (v172 : US1, v173 : US2) = _run_target_args'_v3 
    let v178 : Mut0 = {l0 = 1L} : Mut0
    let v179 : (string -> unit) = closure4()
    let v180 : Mut1 = {l0 = v179} : Mut1
    let v181 : Mut2 = {l0 = true} : Mut2
    let v182 : string = ""
    let v183 : Mut3 = {l0 = v182} : Mut3
    let v186 : US0 =
        match v172 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v184) -> (* Some *)
            v184
    let v187 : Mut4 = {l0 = v186} : Mut4
    let v195 : int64 option =
        match v173 with
        | US2_1 -> (* None *)
            let v193 : int64 option = None
            v193
        | US2_0(v188) -> (* Some *)
            let v190 : int64 option = Some v188 
            v190
    struct (v178, v180, v181, v183, v187, v195)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : US0 = v28.l0
    let v43 : bool = v26.l0
    let v44 : bool = v43 = false
    if v44 then
        false
    else
        let v45 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v46 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v42
        let v47 : bool = v45 >= v46
        v47
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v170 : (int64 -> US2) = method9()
    let v171 : US2 option = v5 |> Option.map v170 
    let v185 : US2 = US2_1
    let v186 : US2 = v171 |> Option.defaultValue v185 
    let v304 : System.DateTime =
        match v186 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v287 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v288 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v288 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v289 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v289 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v291 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v287 = v291 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v294 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v294 
            #endif
#if FABLE_COMPILER_PYTHON
            let v295 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v295 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v296 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v296 
            #endif
#else
            let v297 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v287 = v297 
            #endif
            let v298 : System.DateTime = _run_target_args'_v287 
            v298
        | US2_0(v190) -> (* Some *)
            (* run_target_args'
            let v193 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v194 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v194 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v195 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v195 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v197 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v193 = v197 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v200 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v200 
            #endif
#if FABLE_COMPILER_PYTHON
            let v201 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v201 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v202 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v202 
            #endif
#else
            let v203 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v193 = v203 
            #endif
            let v204 : System.DateTime = _run_target_args'_v193 
            (* run_target_args'
            let v212 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v213 : (System.DateTime -> int64) = _.Ticks
            let v214 : int64 = v213 v204
            let _run_target_args'_v212 = v214 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v215 : (System.DateTime -> int64) = _.Ticks
            let v216 : int64 = v215 v204
            let _run_target_args'_v212 = v216 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v218 : int64 = null |> unbox<int64>
            let _run_target_args'_v212 = v218 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : (System.DateTime -> int64) = _.Ticks
            let v222 : int64 = v221 v204
            let _run_target_args'_v212 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v223 : (System.DateTime -> int64) = _.Ticks
            let v224 : int64 = v223 v204
            let _run_target_args'_v212 = v224 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v225 : (System.DateTime -> int64) = _.Ticks
            let v226 : int64 = v225 v204
            let _run_target_args'_v212 = v226 
            #endif
#else
            let v227 : (System.DateTime -> int64) = _.Ticks
            let v228 : int64 = v227 v204
            let _run_target_args'_v212 = v228 
            #endif
            let v229 : int64 = _run_target_args'_v212 
            let v250 : int64 = v229 |> int64 
            let v253 : int64 = v250 - v190
            let v256 : System.TimeSpan = v253 |> System.TimeSpan 
            let v262 : (System.TimeSpan -> int32) = _.Hours
            let v263 : int32 = v262 v256
            let v267 : (System.TimeSpan -> int32) = _.Minutes
            let v268 : int32 = v267 v256
            let v272 : (System.TimeSpan -> int32) = _.Seconds
            let v273 : int32 = v272 v256
            let v277 : (System.TimeSpan -> int32) = _.Milliseconds
            let v278 : int32 = v277 v256
            let v282 : System.DateTime = System.DateTime (1, 1, 1, v263, v268, v273, v278)
            v282
    let v306 : string = method10()
    let v310 : bool = v306 = ""
    let v312 : string =
        if v310 then
            let v311 : string = "M-d-y hh:mm:ss tt"
            v311
        else
            v306
    let v313 : (string -> string) = v304.ToString
    let v314 : string = v313 v312
    let _run_target_args'_v167 = v314 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v331 : (int64 -> US2) = method9()
    let v332 : US2 option = v5 |> Option.map v331 
    let v346 : US2 = US2_1
    let v347 : US2 = v332 |> Option.defaultValue v346 
    let v465 : System.DateTime =
        match v347 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v448 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v449 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v449 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v450 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v450 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v452 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v448 = v452 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v455 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v455 
            #endif
#if FABLE_COMPILER_PYTHON
            let v456 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v456 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v457 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v457 
            #endif
#else
            let v458 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v448 = v458 
            #endif
            let v459 : System.DateTime = _run_target_args'_v448 
            v459
        | US2_0(v351) -> (* Some *)
            (* run_target_args'
            let v354 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v355 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v355 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v356 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v356 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v358 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v354 = v358 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v361 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v361 
            #endif
#if FABLE_COMPILER_PYTHON
            let v362 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v362 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v363 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v363 
            #endif
#else
            let v364 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v354 = v364 
            #endif
            let v365 : System.DateTime = _run_target_args'_v354 
            (* run_target_args'
            let v373 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v374 : (System.DateTime -> int64) = _.Ticks
            let v375 : int64 = v374 v365
            let _run_target_args'_v373 = v375 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v376 : (System.DateTime -> int64) = _.Ticks
            let v377 : int64 = v376 v365
            let _run_target_args'_v373 = v377 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v379 : int64 = null |> unbox<int64>
            let _run_target_args'_v373 = v379 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v382 : (System.DateTime -> int64) = _.Ticks
            let v383 : int64 = v382 v365
            let _run_target_args'_v373 = v383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v384 : (System.DateTime -> int64) = _.Ticks
            let v385 : int64 = v384 v365
            let _run_target_args'_v373 = v385 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v386 : (System.DateTime -> int64) = _.Ticks
            let v387 : int64 = v386 v365
            let _run_target_args'_v373 = v387 
            #endif
#else
            let v388 : (System.DateTime -> int64) = _.Ticks
            let v389 : int64 = v388 v365
            let _run_target_args'_v373 = v389 
            #endif
            let v390 : int64 = _run_target_args'_v373 
            let v411 : int64 = v390 |> int64 
            let v414 : int64 = v411 - v351
            let v417 : System.TimeSpan = v414 |> System.TimeSpan 
            let v423 : (System.TimeSpan -> int32) = _.Hours
            let v424 : int32 = v423 v417
            let v428 : (System.TimeSpan -> int32) = _.Minutes
            let v429 : int32 = v428 v417
            let v433 : (System.TimeSpan -> int32) = _.Seconds
            let v434 : int32 = v433 v417
            let v438 : (System.TimeSpan -> int32) = _.Milliseconds
            let v439 : int32 = v438 v417
            let v443 : System.DateTime = System.DateTime (1, 1, 1, v424, v429, v434, v439)
            v443
    let v467 : string = method10()
    let v471 : bool = v467 = ""
    let v473 : string =
        if v471 then
            let v472 : string = "M-d-y hh:mm:ss tt"
            v472
        else
            v467
    let v474 : (string -> string) = v465.ToString
    let v475 : string = v474 v473
    let _run_target_args'_v167 = v475 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v490 : string = $"near_sdk::env::block_timestamp()"
    let v491 : uint64 = Fable.Core.RustInterop.emitRustExpr () v490 
    let v494 : (int64 -> US2) = method9()
    let v495 : US2 option = v5 |> Option.map v494 
    let v509 : US2 = US2_1
    let v510 : US2 = v495 |> Option.defaultValue v509 
    let v522 : uint64 =
        match v510 with
        | US2_1 -> (* None *)
            v491
        | US2_0(v514) -> (* Some *)
            let v516 : (int64 -> uint64) = uint64
            let v517 : uint64 = v516 v514
            let v520 : uint64 = v491 - v517
            v520
    let v523 : uint64 = v522 / 1000000000UL
    let v524 : uint64 = v523 % 60UL
    let v525 : uint64 = v523 / 60UL
    let v526 : uint64 = v525 % 60UL
    let v527 : uint64 = v523 / 3600UL
    let v528 : uint64 = v527 % 24UL
    let v529 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v530 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v528, v526, v524) v529 
    let v531 : string = "fable_library_rust::String_::fromString($0)"
    let v532 : string = Fable.Core.RustInterop.emitRustExpr v530 v531 
    let _run_target_args'_v167 = v532 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v535 : (int64 -> US2) = method9()
    let v536 : US2 option = v5 |> Option.map v535 
    let v550 : US2 = US2_1
    let v551 : US2 = v536 |> Option.defaultValue v550 
    let v669 : System.DateTime =
        match v551 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v652 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v653 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v653 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v654 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v654 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v656 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v652 = v656 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v659 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v659 
            #endif
#if FABLE_COMPILER_PYTHON
            let v660 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v660 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v661 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v661 
            #endif
#else
            let v662 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v652 = v662 
            #endif
            let v663 : System.DateTime = _run_target_args'_v652 
            v663
        | US2_0(v555) -> (* Some *)
            (* run_target_args'
            let v558 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v559 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v559 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v560 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v560 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v562 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v558 = v562 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v565 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v565 
            #endif
#if FABLE_COMPILER_PYTHON
            let v566 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v566 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v567 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v567 
            #endif
#else
            let v568 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v558 = v568 
            #endif
            let v569 : System.DateTime = _run_target_args'_v558 
            (* run_target_args'
            let v577 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v578 : (System.DateTime -> int64) = _.Ticks
            let v579 : int64 = v578 v569
            let _run_target_args'_v577 = v579 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v580 : (System.DateTime -> int64) = _.Ticks
            let v581 : int64 = v580 v569
            let _run_target_args'_v577 = v581 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v583 : int64 = null |> unbox<int64>
            let _run_target_args'_v577 = v583 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v586 : (System.DateTime -> int64) = _.Ticks
            let v587 : int64 = v586 v569
            let _run_target_args'_v577 = v587 
            #endif
#if FABLE_COMPILER_PYTHON
            let v588 : (System.DateTime -> int64) = _.Ticks
            let v589 : int64 = v588 v569
            let _run_target_args'_v577 = v589 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v590 : (System.DateTime -> int64) = _.Ticks
            let v591 : int64 = v590 v569
            let _run_target_args'_v577 = v591 
            #endif
#else
            let v592 : (System.DateTime -> int64) = _.Ticks
            let v593 : int64 = v592 v569
            let _run_target_args'_v577 = v593 
            #endif
            let v594 : int64 = _run_target_args'_v577 
            let v615 : int64 = v594 |> int64 
            let v618 : int64 = v615 - v555
            let v621 : System.TimeSpan = v618 |> System.TimeSpan 
            let v627 : (System.TimeSpan -> int32) = _.Hours
            let v628 : int32 = v627 v621
            let v632 : (System.TimeSpan -> int32) = _.Minutes
            let v633 : int32 = v632 v621
            let v637 : (System.TimeSpan -> int32) = _.Seconds
            let v638 : int32 = v637 v621
            let v642 : (System.TimeSpan -> int32) = _.Milliseconds
            let v643 : int32 = v642 v621
            let v647 : System.DateTime = System.DateTime (1, 1, 1, v628, v633, v638, v643)
            v647
    let v671 : string = method11()
    let v675 : bool = v671 = ""
    let v677 : string =
        if v675 then
            let v676 : string = "M-d-y hh:mm:ss tt"
            v676
        else
            v671
    let v678 : (string -> string) = v669.ToString
    let v679 : string = v678 v677
    let _run_target_args'_v167 = v679 
    #endif
#if FABLE_COMPILER_PYTHON
    let v696 : (int64 -> US2) = method9()
    let v697 : US2 option = v5 |> Option.map v696 
    let v711 : US2 = US2_1
    let v712 : US2 = v697 |> Option.defaultValue v711 
    let v830 : System.DateTime =
        match v712 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v813 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v814 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v814 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v815 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v815 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v817 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v813 = v817 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v820 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v820 
            #endif
#if FABLE_COMPILER_PYTHON
            let v821 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v821 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v822 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v822 
            #endif
#else
            let v823 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v813 = v823 
            #endif
            let v824 : System.DateTime = _run_target_args'_v813 
            v824
        | US2_0(v716) -> (* Some *)
            (* run_target_args'
            let v719 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v720 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v720 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v721 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v721 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v723 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v719 = v723 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v726 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v726 
            #endif
#if FABLE_COMPILER_PYTHON
            let v727 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v727 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v728 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v728 
            #endif
#else
            let v729 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v719 = v729 
            #endif
            let v730 : System.DateTime = _run_target_args'_v719 
            (* run_target_args'
            let v738 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v739 : (System.DateTime -> int64) = _.Ticks
            let v740 : int64 = v739 v730
            let _run_target_args'_v738 = v740 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v741 : (System.DateTime -> int64) = _.Ticks
            let v742 : int64 = v741 v730
            let _run_target_args'_v738 = v742 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v744 : int64 = null |> unbox<int64>
            let _run_target_args'_v738 = v744 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v747 : (System.DateTime -> int64) = _.Ticks
            let v748 : int64 = v747 v730
            let _run_target_args'_v738 = v748 
            #endif
#if FABLE_COMPILER_PYTHON
            let v749 : (System.DateTime -> int64) = _.Ticks
            let v750 : int64 = v749 v730
            let _run_target_args'_v738 = v750 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v751 : (System.DateTime -> int64) = _.Ticks
            let v752 : int64 = v751 v730
            let _run_target_args'_v738 = v752 
            #endif
#else
            let v753 : (System.DateTime -> int64) = _.Ticks
            let v754 : int64 = v753 v730
            let _run_target_args'_v738 = v754 
            #endif
            let v755 : int64 = _run_target_args'_v738 
            let v776 : int64 = v755 |> int64 
            let v779 : int64 = v776 - v716
            let v782 : System.TimeSpan = v779 |> System.TimeSpan 
            let v788 : (System.TimeSpan -> int32) = _.Hours
            let v789 : int32 = v788 v782
            let v793 : (System.TimeSpan -> int32) = _.Minutes
            let v794 : int32 = v793 v782
            let v798 : (System.TimeSpan -> int32) = _.Seconds
            let v799 : int32 = v798 v782
            let v803 : (System.TimeSpan -> int32) = _.Milliseconds
            let v804 : int32 = v803 v782
            let v808 : System.DateTime = System.DateTime (1, 1, 1, v789, v794, v799, v804)
            v808
    let v832 : string = method11()
    let v836 : bool = v832 = ""
    let v838 : string =
        if v836 then
            let v837 : string = "M-d-y hh:mm:ss tt"
            v837
        else
            v832
    let v839 : (string -> string) = v830.ToString
    let v840 : string = v839 v838
    let _run_target_args'_v167 = v840 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v857 : (int64 -> US2) = method9()
    let v858 : US2 option = v5 |> Option.map v857 
    let v872 : US2 = US2_1
    let v873 : US2 = v858 |> Option.defaultValue v872 
    let v991 : System.DateTime =
        match v873 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v974 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v975 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v975 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v976 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v976 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v978 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v974 = v978 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v981 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v981 
            #endif
#if FABLE_COMPILER_PYTHON
            let v982 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v982 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v983 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v983 
            #endif
#else
            let v984 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v974 = v984 
            #endif
            let v985 : System.DateTime = _run_target_args'_v974 
            v985
        | US2_0(v877) -> (* Some *)
            (* run_target_args'
            let v880 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v881 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v881 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v882 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v882 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v884 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v880 = v884 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v887 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v887 
            #endif
#if FABLE_COMPILER_PYTHON
            let v888 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v888 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v889 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v889 
            #endif
#else
            let v890 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v880 = v890 
            #endif
            let v891 : System.DateTime = _run_target_args'_v880 
            (* run_target_args'
            let v899 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v900 : (System.DateTime -> int64) = _.Ticks
            let v901 : int64 = v900 v891
            let _run_target_args'_v899 = v901 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v902 : (System.DateTime -> int64) = _.Ticks
            let v903 : int64 = v902 v891
            let _run_target_args'_v899 = v903 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v905 : int64 = null |> unbox<int64>
            let _run_target_args'_v899 = v905 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v908 : (System.DateTime -> int64) = _.Ticks
            let v909 : int64 = v908 v891
            let _run_target_args'_v899 = v909 
            #endif
#if FABLE_COMPILER_PYTHON
            let v910 : (System.DateTime -> int64) = _.Ticks
            let v911 : int64 = v910 v891
            let _run_target_args'_v899 = v911 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v912 : (System.DateTime -> int64) = _.Ticks
            let v913 : int64 = v912 v891
            let _run_target_args'_v899 = v913 
            #endif
#else
            let v914 : (System.DateTime -> int64) = _.Ticks
            let v915 : int64 = v914 v891
            let _run_target_args'_v899 = v915 
            #endif
            let v916 : int64 = _run_target_args'_v899 
            let v937 : int64 = v916 |> int64 
            let v940 : int64 = v937 - v877
            let v943 : System.TimeSpan = v940 |> System.TimeSpan 
            let v949 : (System.TimeSpan -> int32) = _.Hours
            let v950 : int32 = v949 v943
            let v954 : (System.TimeSpan -> int32) = _.Minutes
            let v955 : int32 = v954 v943
            let v959 : (System.TimeSpan -> int32) = _.Seconds
            let v960 : int32 = v959 v943
            let v964 : (System.TimeSpan -> int32) = _.Milliseconds
            let v965 : int32 = v964 v943
            let v969 : System.DateTime = System.DateTime (1, 1, 1, v950, v955, v960, v965)
            v969
    let v993 : string = method11()
    let v997 : bool = v993 = ""
    let v999 : string =
        if v997 then
            let v998 : string = "M-d-y hh:mm:ss tt"
            v998
        else
            v993
    let v1000 : (string -> string) = v991.ToString
    let v1001 : string = v1000 v999
    let _run_target_args'_v167 = v1001 
    #endif
#else
    let v1018 : (int64 -> US2) = method9()
    let v1019 : US2 option = v5 |> Option.map v1018 
    let v1033 : US2 = US2_1
    let v1034 : US2 = v1019 |> Option.defaultValue v1033 
    let v1152 : System.DateTime =
        match v1034 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1135 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1136 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1136 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1137 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1137 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1139 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1135 = v1139 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1142 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1142 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1143 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1143 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1144 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1144 
            #endif
#else
            let v1145 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1135 = v1145 
            #endif
            let v1146 : System.DateTime = _run_target_args'_v1135 
            v1146
        | US2_0(v1038) -> (* Some *)
            (* run_target_args'
            let v1041 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1042 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1042 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1043 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1043 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1045 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1041 = v1045 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1048 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1048 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1049 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1049 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1050 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1050 
            #endif
#else
            let v1051 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1041 = v1051 
            #endif
            let v1052 : System.DateTime = _run_target_args'_v1041 
            (* run_target_args'
            let v1060 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1061 : (System.DateTime -> int64) = _.Ticks
            let v1062 : int64 = v1061 v1052
            let _run_target_args'_v1060 = v1062 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1063 : (System.DateTime -> int64) = _.Ticks
            let v1064 : int64 = v1063 v1052
            let _run_target_args'_v1060 = v1064 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1066 : int64 = null |> unbox<int64>
            let _run_target_args'_v1060 = v1066 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1069 : (System.DateTime -> int64) = _.Ticks
            let v1070 : int64 = v1069 v1052
            let _run_target_args'_v1060 = v1070 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1071 : (System.DateTime -> int64) = _.Ticks
            let v1072 : int64 = v1071 v1052
            let _run_target_args'_v1060 = v1072 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1073 : (System.DateTime -> int64) = _.Ticks
            let v1074 : int64 = v1073 v1052
            let _run_target_args'_v1060 = v1074 
            #endif
#else
            let v1075 : (System.DateTime -> int64) = _.Ticks
            let v1076 : int64 = v1075 v1052
            let _run_target_args'_v1060 = v1076 
            #endif
            let v1077 : int64 = _run_target_args'_v1060 
            let v1098 : int64 = v1077 |> int64 
            let v1101 : int64 = v1098 - v1038
            let v1104 : System.TimeSpan = v1101 |> System.TimeSpan 
            let v1110 : (System.TimeSpan -> int32) = _.Hours
            let v1111 : int32 = v1110 v1104
            let v1115 : (System.TimeSpan -> int32) = _.Minutes
            let v1116 : int32 = v1115 v1104
            let v1120 : (System.TimeSpan -> int32) = _.Seconds
            let v1121 : int32 = v1120 v1104
            let v1125 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1126 : int32 = v1125 v1104
            let v1130 : System.DateTime = System.DateTime (1, 1, 1, v1111, v1116, v1121, v1126)
            v1130
    let v1154 : string = method11()
    let v1158 : bool = v1154 = ""
    let v1160 : string =
        if v1158 then
            let v1159 : string = "M-d-y hh:mm:ss tt"
            v1159
        else
            v1154
    let v1161 : (string -> string) = v1152.ToString
    let v1162 : string = v1161 v1160
    let _run_target_args'_v167 = v1162 
    #endif
    let v1177 : string = _run_target_args'_v167 
    v1177
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_blue"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_blue"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_blue"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[94m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[94m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[94m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[94m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "args"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v2, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = " }"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v2, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = v2.l0
    v60
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v40 : char list = []
    let v42 : char list = '/' :: v40 
    let v46 : char list = ' ' :: v42 
    let v51 : (char list -> (char [])) = List.toArray
    let v52 : (char []) = v51 v46
    let v55 : string = v8.TrimEnd v52 
    v55
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.main"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure8(v24)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : (string -> unit) = closure9()
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = v27.l0
    let v52 : bool = v51 = ""
    let v60 : string =
        if v52 then
            v0
        else
            let v53 : bool = v0 = ""
            if v53 then
                let v54 : string = v27.l0
                v54
            else
                let v55 : string = v27.l0
                let v56 : string = "\n"
                let v57 : string = v55 + v56 
                let v58 : string = v57 + v0 
                v58
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "&*$0"
    let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "&*$0"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _run_target_args'_v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v81 
    #endif
#else
    let v85 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v85 
    #endif
    let v88 : Ref<Str> = _run_target_args'_v65 
    let v94 : string = $"$0.chars()"
    let v95 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let v96 : string = "$0"
    let v97 : _ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "$0.collect::<Vec<_>>()"
    let v99 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v101 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = "x"
    let v105 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v104 
    let v106 : string = "String::from_iter($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "true; $0 }).collect::<Vec<_>>()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_vec_map"
    let v111 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "$0.len()"
    let v113 : unativeint = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v119 : int32 = v113 |> int32 
    let v129 : string = ""
    let v130 : bool = v0 <> v129 
    let v134 : bool =
        if v130 then
            let v133 : bool = v119 <= 1
            v133
        else
            false
    if v134 then
        v27.l0 <- v60
        ()
    else
        v27.l0 <- v129
        let v135 : string = "true; $0.into_iter().for_each(|x| { //"
        let v136 : bool = Fable.Core.RustInterop.emitRustExpr v111 v135 
        let v137 : string = "x"
        let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v137 
        let v139 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v140 : bool = Fable.Core.RustInterop.emitRustExpr v138 v139 
        let v141 : string = $"true"
        let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
        let v143 : string = "true; }); //"
        let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v47 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#else
    v47 v0
    #endif
    // run_target_args' is_unit
    let v145 : (string -> unit) = v25.l0
    v145 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method16(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "target"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method28 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "extension"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "new_code"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method30 () : string =
    let v0 : string = ""
    v0
and method31 (v0 : string) : string =
    v0
and method32 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method33 () : string =
    let v0 : string = ""
    v0
and method29 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method30()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method31(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method32(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method33()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method31(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method34 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v59 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "format!(\"{}\", $0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v60 
    let _run_target_args'_v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "format!(\"{}\", $0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v62 
    let _run_target_args'_v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "format!(\"{}\", $0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v64 
    let _run_target_args'_v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v75 
    #endif
#else
    let v79 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v59 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v4 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = null |> unbox<string>
    let _run_target_args'_v4 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = "fs"
    let v99 : IFs = Fable.Core.JsInterop.importAll v98 
    let v100 : string = "fs.realpathSync('.')"
    let v101 : string = Fable.Core.JsInterop.emitJsExpr () v100 
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : string = null |> unbox<string>
    let _run_target_args'_v4 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = null |> unbox<string>
    let _run_target_args'_v4 = v107 
    #endif
#else
    let v110 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v111 : string = v110 ()
    let _run_target_args'_v4 = v111 
    #endif
    let v112 : string = _run_target_args'_v4 
    v112
and method36 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v44 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v45 
    let _run_target_args'_v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v47 
    let _run_target_args'_v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v49 
    let _run_target_args'_v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v60 
    #endif
#else
    let v64 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v64 
    #endif
    let v67 : std_string_String = _run_target_args'_v44 
    (* run_target_args'
    let v77 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v78 
    let _run_target_args'_v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "std::path::PathBuf::from($0)"
    let v81 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v80 
    let _run_target_args'_v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "std::path::PathBuf::from($0)"
    let v83 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v82 
    let _run_target_args'_v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v93 
    #endif
#else
    let v97 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v97 
    #endif
    let v100 : std_path_PathBuf = _run_target_args'_v77 
    (* run_target_args'
    let v110 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v111 
    let _run_target_args'_v110 = v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v113 
    let _run_target_args'_v110 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v115 
    let _run_target_args'_v110 = v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v126 
    #endif
#else
    let v130 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v130 
    #endif
    let v133 : Ref<Str> = _run_target_args'_v110 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v144 
    let _run_target_args'_v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v146 
    let _run_target_args'_v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "String::from($0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v148 
    let _run_target_args'_v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v159 
    #endif
#else
    let v163 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v163 
    #endif
    let v166 : std_string_String = _run_target_args'_v143 
    let v172 : string = "$0.join($1)"
    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v100, v166) v172 
    (* run_target_args'
    let v178 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v179 : string = "$0.display()"
    let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
    let _run_target_args'_v178 = v180 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = "$0.display()"
    let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
    let _run_target_args'_v178 = v182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v183 : string = "$0.display()"
    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
    let _run_target_args'_v178 = v184 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v186 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v186 
    #endif
#if FABLE_COMPILER_PYTHON
    let v190 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v190 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v194 
    #endif
#else
    let v198 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v198 
    #endif
    let v201 : std_path_Display = _run_target_args'_v178 
    (* run_target_args'
    let v211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v212 : string = "format!(\"{}\", $0)"
    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v212 
    let _run_target_args'_v211 = v213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v214 : string = "format!(\"{}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v214 
    let _run_target_args'_v211 = v215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v216 : string = "format!(\"{}\", $0)"
    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v216 
    let _run_target_args'_v211 = v217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v219 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v227 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v227 
    #endif
#else
    let v231 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v231 
    #endif
    let v234 : std_string_String = _run_target_args'_v211 
    let v240 : string = "fable_library_rust::String_::fromString($0)"
    let v241 : string = Fable.Core.RustInterop.emitRustExpr v234 v240 
    let _run_target_args'_v6 = v241 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v242 : US3 = US3_1
    let v243 : US4 = US4_3(v242)
    let v244 : string = $"file_system.(</>) / target: {v243} / a: {v0} / b: {v1}"
    let v245 : string = failwith<string> v244
    let _run_target_args'_v6 = v245 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = null |> unbox<string>
    let _run_target_args'_v6 = v247 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v250 : string = "path"
    let v251 : IPathJoin = Fable.Core.JsInterop.importAll v250 
    let v252 : string = "v251.join($0, $1)"
    let v253 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v252 
    let _run_target_args'_v6 = v253 
    #endif
#if FABLE_COMPILER_PYTHON
    let v254 : US3 = US3_0
    let v255 : US4 = US4_5(v254)
    let v256 : string = $"file_system.(</>) / target: {v255} / a: {v0} / b: {v1}"
    let v257 : string = failwith<string> v256
    let _run_target_args'_v6 = v257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v258 : US3 = US3_1
    let v259 : US4 = US4_1(v258)
    let v260 : string = $"file_system.(</>) / target: {v259} / a: {v0} / b: {v1}"
    let v261 : string = failwith<string> v260
    let _run_target_args'_v6 = v261 
    #endif
#else
    let v262 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v262 
    #endif
    let v263 : string = _run_target_args'_v6 
    v263
and method38 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_file()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.File.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure15 () (v0 : string) : bool =
    method38(v0)
and method39 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_dir()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.Directory.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure16 () (v0 : string) : bool =
    method39(v0)
and method41 (v0 : string) : string option =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v23 
    #endif
#else
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v7 = v27 
    #endif
    let v30 : Ref<Str> = _run_target_args'_v7 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
#else
    let v60 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v40 = v60 
    #endif
    let v63 : std_string_String = _run_target_args'_v40 
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "std::path::PathBuf::from($0)"
    let v75 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v74 
    let _run_target_args'_v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : string = "std::path::PathBuf::from($0)"
    let v77 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v63 v78 
    let _run_target_args'_v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v89 
    #endif
#else
    let v93 : std_path_PathBuf = v63 |> unbox<std_path_PathBuf>
    let _run_target_args'_v73 = v93 
    #endif
    let v96 : std_path_PathBuf = _run_target_args'_v73 
    let v102 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v103 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let v104 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "x"
    let v107 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v106 
    (* run_target_args'
    let v112 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = "$0.display()"
    let v114 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v113 
    let _run_target_args'_v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = "$0.display()"
    let v116 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v115 
    let _run_target_args'_v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = "$0.display()"
    let v118 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v107 v117 
    let _run_target_args'_v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v124 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v124 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v128 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v128 
    #endif
#else
    let v132 : std_path_Display = v107 |> unbox<std_path_Display>
    let _run_target_args'_v112 = v132 
    #endif
    let v135 : std_path_Display = _run_target_args'_v112 
    (* run_target_args'
    let v145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v146 : string = "format!(\"{}\", $0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v146 
    let _run_target_args'_v145 = v147 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v148 : string = "format!(\"{}\", $0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v148 
    let _run_target_args'_v145 = v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v135 v150 
    let _run_target_args'_v145 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v153 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v153 
    #endif
#if FABLE_COMPILER_PYTHON
    let v157 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v157 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v161 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v145 = v165 
    #endif
    let v168 : std_string_String = _run_target_args'_v145 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v168 v174 
    let v176 : string = "true; $0 })"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "_optionm_map_"
    let v179 : string option = Fable.Core.RustInterop.emitRustExpr () v178 
    let _run_target_args'_v2 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v180 : string option = None
    let _run_target_args'_v2 = v180 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v181 : string option = None
    let _run_target_args'_v2 = v181 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathDirname = Fable.Core.JsInterop.importAll v182 
    let v184 : string = "v183.dirname($0)"
    let v185 : string = Fable.Core.JsInterop.emitJsExpr v0 v184 
    let v186 : bool = v185 = v0
    let v189 : US5 =
        if v186 then
            US5_1
        else
            US5_0(v185)
    let v197 : string option =
        match v189 with
        | US5_1 -> (* None *)
            let v195 : string option = None
            v195
        | US5_0(v190) -> (* Some *)
            let v192 : string option = Some v190 
            v192
    let _run_target_args'_v2 = v197 
    #endif
#if FABLE_COMPILER_PYTHON
    let v198 : string option = None
    let _run_target_args'_v2 = v198 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v199 : string option = None
    let _run_target_args'_v2 = v199 
    #endif
#else
    let v200 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v201 : System_IO_DirectoryInfo = v200 v0
    let v203 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v207 : bool = v201 = v203 
    let v249 : US5 =
        if v207 then
            US5_1
        else
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = null |> unbox<string>
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v221 : string = null |> unbox<string>
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v225 : string = null |> unbox<string>
            let _run_target_args'_v215 = v225 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v229 : string = null |> unbox<string>
            let _run_target_args'_v215 = v229 
            #endif
#if FABLE_COMPILER_PYTHON
            let v233 : string = null |> unbox<string>
            let _run_target_args'_v215 = v233 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : string = null |> unbox<string>
            let _run_target_args'_v215 = v237 
            #endif
#else
            let v240 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v241 : string = v240 v201
            let _run_target_args'_v215 = v241 
            #endif
            let v242 : string = _run_target_args'_v215 
            US5_0(v242)
    let v257 : string option =
        match v249 with
        | US5_1 -> (* None *)
            let v255 : string option = None
            v255
        | US5_0(v250) -> (* Some *)
            let v252 : string option = Some v250 
            v252
    let _run_target_args'_v2 = v257 
    #endif
    let v258 : string option = _run_target_args'_v2 
    v258
and method42 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method36(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method41(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v26 : US5 = US5_1
        let v27 : US5 = v12 |> Option.defaultValue v26 
        match v27 with
        | US5_1 -> (* None *)
            let v33 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v34 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v35 : string = v33 + v34 
            US13_1(v35)
        | US5_0(v31) -> (* Some *)
            method42(v0, v1, v2, v3, v31)
and method40 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method36(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method41(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v25 : US5 = US5_1
        let v26 : US5 = v11 |> Option.defaultValue v25 
        match v26 with
        | US5_1 -> (* None *)
            let v32 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v33 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v34 : string = v32 + v33 
            US13_1(v34)
        | US5_0(v30) -> (* Some *)
            method42(v0, v1, v2, v3, v30)
and method37 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method40(v1, v2, v3, v6)
and method43 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_yellow"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_yellow"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_yellow"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[93m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[93m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[93m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[93m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method45 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "error"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method44 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method45(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.get_workspace_root"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method43()
        let v47 : string = method44(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method50 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v43 : string = $"{v36}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v2, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = v2.l0
    v51
and closure18 () (v0 : std_io_Error) : string =
    method50(v0)
and method49 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method51 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method52 () : (string -> US14) =
    closure20()
and method55 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v173 : US5 = US5_1
    let v174 : US5 = v159 |> Option.defaultValue v173 
    let v181 : string =
        match v174 with
        | US5_1 -> (* None *)
            let v179 : string = ""
            v179
        | US5_0(v178) -> (* Some *)
            v178
    let _run_target_args'_v5 = v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v182 : US3 = US3_1
    let v183 : US4 = US4_3(v182)
    let v184 : string = $"file_system.get_file_name / target: {v183} / path: {v0}"
    let v185 : string = failwith<string> v184
    let _run_target_args'_v5 = v185 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v187 : string = null |> unbox<string>
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v190 : string = "path"
    let v191 : IPathBasename = Fable.Core.JsInterop.importAll v190 
    let v192 : string = "v191.basename($0)"
    let v193 : string = Fable.Core.JsInterop.emitJsExpr v0 v192 
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v194 : US3 = US3_0
    let v195 : US4 = US4_5(v194)
    let v196 : string = $"file_system.get_file_name / target: {v195} / path: {v0}"
    let v197 : string = failwith<string> v196
    let _run_target_args'_v5 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v198 : US3 = US3_1
    let v199 : US4 = US4_1(v198)
    let v200 : string = $"file_system.get_file_name / target: {v199} / path: {v0}"
    let v201 : string = failwith<string> v200
    let _run_target_args'_v5 = v201 
    #endif
#else
    let v202 : (string -> string) = System.IO.Path.GetFileName
    let v203 : string = v202 v0
    let _run_target_args'_v5 = v203 
    #endif
    let v204 : string = _run_target_args'_v5 
    v204
and method56 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method54 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v24 : US5 = US5_1
    let v25 : US5 = v10 |> Option.defaultValue v24 
    let v29 : string = method56(v3)
    let v30 : bool = v2 >= 11uy
    if v30 then
        let v31 : string = $"file_system.read_link / "
        let v32 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v33 : string = v31 + v32 
        (* run_target_args'
        let v38 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v39 
        let _run_target_args'_v38 = v40 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v41 
        let _run_target_args'_v38 = v42 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v43 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v44 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v43 
        let _run_target_args'_v38 = v44 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v46 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v46 
        #endif
#if FABLE_COMPILER_PYTHON
        let v50 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v50 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v54 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v54 
        #endif
#else
        let v58 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v58 
        #endif
        let v61 : std_io_Error = _run_target_args'_v38 
        (* run_target_args'
        let v68 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v69 
        let _run_target_args'_v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v71 
        let _run_target_args'_v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "Err($0)"
        let v74 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v73 
        let _run_target_args'_v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v76 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v77 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v77 
        #endif
#else
        let v78 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v78 
        #endif
        let v79 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v68 
        v79
    else
        match v25 with
        | US5_0(v82) -> (* Some *)
            let v85 : string = ""
            let v86 : bool = v4 <> v85 
            if v86 then
                let v89 : uint8 = v2 + 1uy
                let v90 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v89
                let v91 : Result<std_path_PathBuf, std_io_Error> = v90 v82
                let v92 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v94 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v95 
                let _run_target_args'_v94 = v96 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v97 
                let _run_target_args'_v94 = v98 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v99 : string = "$0.map_err(|x| $1(x))"
                let v100 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v99 
                let _run_target_args'_v94 = v100 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v101 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v101 
                #endif
#if FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v102 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v103 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v103 
                #endif
#else
                let v104 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v104 
                #endif
                let v105 : Result<std_path_PathBuf, string> = _run_target_args'_v94 
                let v108 : (std_path_PathBuf -> US14) = method51()
                let v109 : (string -> US14) = method52()
                let v111 : US14 = match v105 with Ok x -> v108 x | Error x -> v109 x
                match v111 with
                | US14_1(v267) -> (* Error *)
                    let v268 : string = $"file_system.read_link / "
                    let v269 : string = $"error': {v267} / error: {v29} / name: {v5}"
                    let v270 : string = v268 + v269 
                    (* run_target_args'
                    let v275 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v276 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v277 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v276 
                    let _run_target_args'_v275 = v277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v278 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v279 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v278 
                    let _run_target_args'_v275 = v279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v280 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v281 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v280 
                    let _run_target_args'_v275 = v281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v283 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v283 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v287 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v287 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v291 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v291 
                    #endif
#else
                    let v295 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v295 
                    #endif
                    let v298 : std_io_Error = _run_target_args'_v275 
                    (* run_target_args'
                    let v305 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v306 : string = "Err($0)"
                    let v307 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v306 
                    let _run_target_args'_v305 = v307 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v308 : string = "Err($0)"
                    let v309 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v308 
                    let _run_target_args'_v305 = v309 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v310 : string = "Err($0)"
                    let v311 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v310 
                    let _run_target_args'_v305 = v311 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v312 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v313 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v314 
                    #endif
#else
                    let v315 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v315 
                    #endif
                    let v316 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v305 
                    v316
                | US14_0(v114) -> (* Ok *)
                    (* run_target_args'
                    let v119 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "$0.display()"
                    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v120 
                    let _run_target_args'_v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "$0.display()"
                    let v123 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v122 
                    let _run_target_args'_v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "$0.display()"
                    let v125 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v124 
                    let _run_target_args'_v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v135 
                    #endif
#else
                    let v139 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v139 
                    #endif
                    let v142 : std_path_Display = _run_target_args'_v119 
                    let v149 : string = v142 |> string 
                    let v152 : string = method36(v149, v5)
                    (* run_target_args'
                    let v157 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v158 
                    let _run_target_args'_v157 = v159 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v160 
                    let _run_target_args'_v157 = v161 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v162 : string = "&*$0"
                    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v162 
                    let _run_target_args'_v157 = v163 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v165 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v165 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v169 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v173 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v173 
                    #endif
#else
                    let v177 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v177 
                    #endif
                    let v180 : Ref<Str> = _run_target_args'_v157 
                    (* run_target_args'
                    let v190 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v191 : string = "String::from($0)"
                    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v191 
                    let _run_target_args'_v190 = v192 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v193 : string = "String::from($0)"
                    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v193 
                    let _run_target_args'_v190 = v194 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v195 : string = "String::from($0)"
                    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v195 
                    let _run_target_args'_v190 = v196 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v206 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v206 
                    #endif
#else
                    let v210 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v210 
                    #endif
                    let v213 : std_string_String = _run_target_args'_v190 
                    (* run_target_args'
                    let v223 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v224 : string = "std::path::PathBuf::from($0)"
                    let v225 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v224 
                    let _run_target_args'_v223 = v225 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v226 : string = "std::path::PathBuf::from($0)"
                    let v227 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v226 
                    let _run_target_args'_v223 = v227 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v228 : string = "std::path::PathBuf::from($0)"
                    let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v228 
                    let _run_target_args'_v223 = v229 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v231 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v235 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v235 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v239 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v239 
                    #endif
#else
                    let v243 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v243 
                    #endif
                    let v246 : std_path_PathBuf = _run_target_args'_v223 
                    (* run_target_args'
                    let v253 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "Ok($0)"
                    let v255 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v254 
                    let _run_target_args'_v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "Ok($0)"
                    let v257 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v256 
                    let _run_target_args'_v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "Ok($0)"
                    let v259 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v258 
                    let _run_target_args'_v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v262 
                    #endif
#else
                    let v263 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v263 
                    #endif
                    let v264 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v253 
                    v264
            else
                let v321 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v322 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
                let v323 : string = v321 + v322 
                (* run_target_args'
                let v328 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v329 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v330 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v329 
                let _run_target_args'_v328 = v330 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v331 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v332 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v331 
                let _run_target_args'_v328 = v332 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v333 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v334 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v333 
                let _run_target_args'_v328 = v334 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v336 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v336 
                #endif
#if FABLE_COMPILER_PYTHON
                let v340 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v340 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v344 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v344 
                #endif
#else
                let v348 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v348 
                #endif
                let v351 : std_io_Error = _run_target_args'_v328 
                (* run_target_args'
                let v358 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v359 : string = "Err($0)"
                let v360 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v359 
                let _run_target_args'_v358 = v360 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v361 : string = "Err($0)"
                let v362 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v361 
                let _run_target_args'_v358 = v362 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v363 : string = "Err($0)"
                let v364 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v363 
                let _run_target_args'_v358 = v364 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v365 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v365 
                #endif
#if FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v366 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v367 
                #endif
#else
                let v368 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v368 
                #endif
                let v369 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v358 
                v369
        | _ ->
            let v373 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v374 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
            let v375 : string = v373 + v374 
            (* run_target_args'
            let v380 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v381 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v382 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v381 
            let _run_target_args'_v380 = v382 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v383 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v384 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v383 
            let _run_target_args'_v380 = v384 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v385 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v386 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v385 
            let _run_target_args'_v380 = v386 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v388 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v388 
            #endif
#if FABLE_COMPILER_PYTHON
            let v392 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v392 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v396 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v396 
            #endif
#else
            let v400 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v400 
            #endif
            let v403 : std_io_Error = _run_target_args'_v380 
            (* run_target_args'
            let v410 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v411 : string = "Err($0)"
            let v412 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v411 
            let _run_target_args'_v410 = v412 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v413 : string = "Err($0)"
            let v414 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v413 
            let _run_target_args'_v410 = v414 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v415 : string = "Err($0)"
            let v416 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v415 
            let _run_target_args'_v410 = v416 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v417 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v417 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v419 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v419 
            #endif
#else
            let v420 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v420 
            #endif
            let v421 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v410 
            v421
and method53 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US14) = method51()
    let v27 : (string -> US14) = method52()
    let v29 : US14 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US14_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v49, v1, v48, v2)
        | US14_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US14) = method51()
    let v72 : (string -> US14) = method52()
    let v74 : US14 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US14_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v94, v1, v93, v2)
        | US14_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US14) = method51()
    let v117 : (string -> US14) = method52()
    let v119 : US14 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US14_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v139, v1, v138, v2)
        | US14_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method53(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v23 : US5 = US5_1
    let v24 : US5 = v9 |> Option.defaultValue v23 
    let v28 : string = method56(v3)
    let v29 : bool = v2 >= 11uy
    if v29 then
        let v30 : string = $"file_system.read_link / "
        let v31 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v32 : string = v30 + v31 
        (* run_target_args'
        let v37 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _run_target_args'_v37 = v39 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v40 
        let _run_target_args'_v37 = v41 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v42 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v43 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v42 
        let _run_target_args'_v37 = v43 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v45 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v45 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v49 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v53 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v53 
        #endif
#else
        let v57 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v57 
        #endif
        let v60 : std_io_Error = _run_target_args'_v37 
        (* run_target_args'
        let v67 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v68 
        let _run_target_args'_v67 = v69 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v70 
        let _run_target_args'_v67 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v72 : string = "Err($0)"
        let v73 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v72 
        let _run_target_args'_v67 = v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v76 
        #endif
#else
        let v77 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v77 
        #endif
        let v78 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v67 
        v78
    else
        match v24 with
        | US5_0(v81) -> (* Some *)
            let v84 : string = ""
            let v85 : bool = v0 <> v84 
            if v85 then
                let v88 : uint8 = v2 + 1uy
                let v89 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v88
                let v90 : Result<std_path_PathBuf, std_io_Error> = v89 v81
                let v91 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v93 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v94 
                let _run_target_args'_v93 = v95 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v96 
                let _run_target_args'_v93 = v97 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v98 : string = "$0.map_err(|x| $1(x))"
                let v99 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v98 
                let _run_target_args'_v93 = v99 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v100 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v100 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v102 
                #endif
#else
                let v103 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v103 
                #endif
                let v104 : Result<std_path_PathBuf, string> = _run_target_args'_v93 
                let v107 : (std_path_PathBuf -> US14) = method51()
                let v108 : (string -> US14) = method52()
                let v110 : US14 = match v104 with Ok x -> v107 x | Error x -> v108 x
                match v110 with
                | US14_1(v266) -> (* Error *)
                    let v267 : string = $"file_system.read_link / "
                    let v268 : string = $"error': {v266} / error: {v28} / name: {v4}"
                    let v269 : string = v267 + v268 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v278 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v280 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v282 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v290 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v290 
                    #endif
#else
                    let v294 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v294 
                    #endif
                    let v297 : std_io_Error = _run_target_args'_v274 
                    (* run_target_args'
                    let v304 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v305 
                    let _run_target_args'_v304 = v306 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v307 : string = "Err($0)"
                    let v308 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v307 
                    let _run_target_args'_v304 = v308 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v309 : string = "Err($0)"
                    let v310 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v309 
                    let _run_target_args'_v304 = v310 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v311 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v311 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v312 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v313 
                    #endif
#else
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v314 
                    #endif
                    let v315 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v304 
                    v315
                | US14_0(v113) -> (* Ok *)
                    (* run_target_args'
                    let v118 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v119 
                    let _run_target_args'_v118 = v120 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v121 : string = "$0.display()"
                    let v122 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v121 
                    let _run_target_args'_v118 = v122 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v123 : string = "$0.display()"
                    let v124 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v123 
                    let _run_target_args'_v118 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v134 
                    #endif
#else
                    let v138 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v138 
                    #endif
                    let v141 : std_path_Display = _run_target_args'_v118 
                    let v148 : string = v141 |> string 
                    let v151 : string = method36(v148, v4)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v164 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v164 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v168 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v172 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
#else
                    let v176 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v176 
                    #endif
                    let v179 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v189 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v190 
                    let _run_target_args'_v189 = v191 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v192 : string = "String::from($0)"
                    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v192 
                    let _run_target_args'_v189 = v193 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v194 : string = "String::from($0)"
                    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v194 
                    let _run_target_args'_v189 = v195 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v197 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v197 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v205 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v205 
                    #endif
#else
                    let v209 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v209 
                    #endif
                    let v212 : std_string_String = _run_target_args'_v189 
                    (* run_target_args'
                    let v222 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v223 
                    let _run_target_args'_v222 = v224 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v225 : string = "std::path::PathBuf::from($0)"
                    let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v225 
                    let _run_target_args'_v222 = v226 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v227 : string = "std::path::PathBuf::from($0)"
                    let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v227 
                    let _run_target_args'_v222 = v228 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v230 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v230 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v234 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v238 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v238 
                    #endif
#else
                    let v242 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v242 
                    #endif
                    let v245 : std_path_PathBuf = _run_target_args'_v222 
                    (* run_target_args'
                    let v252 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v253 
                    let _run_target_args'_v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : string = "Ok($0)"
                    let v256 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v255 
                    let _run_target_args'_v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : string = "Ok($0)"
                    let v258 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v257 
                    let _run_target_args'_v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v259 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v260 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v261 
                    #endif
#else
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v262 
                    #endif
                    let v263 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v252 
                    v263
            else
                let v320 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v321 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
                let v322 : string = v320 + v321 
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v328 
                let _run_target_args'_v327 = v329 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v330 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v331 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v330 
                let _run_target_args'_v327 = v331 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v332 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v333 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v332 
                let _run_target_args'_v327 = v333 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v335 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v335 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v343 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v343 
                #endif
#else
                let v347 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v347 
                #endif
                let v350 : std_io_Error = _run_target_args'_v327 
                (* run_target_args'
                let v357 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v358 
                let _run_target_args'_v357 = v359 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v360 : string = "Err($0)"
                let v361 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v360 
                let _run_target_args'_v357 = v361 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v362 : string = "Err($0)"
                let v363 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v362 
                let _run_target_args'_v357 = v363 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v364 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v364 
                #endif
#if FABLE_COMPILER_PYTHON
                let v365 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v365 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v366 
                #endif
#else
                let v367 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v367 
                #endif
                let v368 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v357 
                v368
        | _ ->
            let v372 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v373 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
            let v374 : string = v372 + v373 
            (* run_target_args'
            let v379 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v380 
            let _run_target_args'_v379 = v381 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v382 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v383 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v382 
            let _run_target_args'_v379 = v383 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v384 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v385 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v384 
            let _run_target_args'_v379 = v385 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v387 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v387 
            #endif
#if FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v391 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v395 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v395 
            #endif
#else
            let v399 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v399 
            #endif
            let v402 : std_io_Error = _run_target_args'_v379 
            (* run_target_args'
            let v409 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v409 = v411 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v412 : string = "Err($0)"
            let v413 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v409 = v413 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v414 : string = "Err($0)"
            let v415 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v414 
            let _run_target_args'_v409 = v415 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v416 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v416 
            #endif
#if FABLE_COMPILER_PYTHON
            let v417 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v417 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v418 
            #endif
#else
            let v419 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v419 
            #endif
            let v420 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v409 
            v420
and method48 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US14) = method51()
    let v26 : (string -> US14) = method52()
    let v28 : US14 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US14_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v48, v1, v47)
        | US14_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US14) = method51()
    let v71 : (string -> US14) = method52()
    let v73 : US14 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US14_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v93, v1, v92)
        | US14_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US14) = method51()
    let v116 : (string -> US14) = method52()
    let v118 : US14 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US14_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v138, v1, v137)
        | US14_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method59 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method60 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method61 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method63 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v24 : US5 = US5_1
    let v25 : US5 = v10 |> Option.defaultValue v24 
    let v29 : string = method50(v3)
    let v30 : bool = v2 >= 11uy
    if v30 then
        let v31 : string = $"file_system.read_link / "
        let v32 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v33 : string = v31 + v32 
        (* run_target_args'
        let v38 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v39 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v40 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v39 
        let _run_target_args'_v38 = v40 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v41 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v42 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v41 
        let _run_target_args'_v38 = v42 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v43 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v44 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v33 v43 
        let _run_target_args'_v38 = v44 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v46 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v46 
        #endif
#if FABLE_COMPILER_PYTHON
        let v50 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v50 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v54 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v54 
        #endif
#else
        let v58 : std_io_Error = v33 |> unbox<std_io_Error>
        let _run_target_args'_v38 = v58 
        #endif
        let v61 : std_io_Error = _run_target_args'_v38 
        (* run_target_args'
        let v68 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "Err($0)"
        let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v69 
        let _run_target_args'_v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "Err($0)"
        let v72 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v71 
        let _run_target_args'_v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "Err($0)"
        let v74 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v73 
        let _run_target_args'_v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v76 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v77 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v77 
        #endif
#else
        let v78 : Result<std_path_PathBuf, std_io_Error> = v61 |> Error
        let _run_target_args'_v68 = v78 
        #endif
        let v79 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v68 
        v79
    else
        match v25 with
        | US5_0(v82) -> (* Some *)
            let v85 : string = ""
            let v86 : bool = v4 <> v85 
            if v86 then
                let v89 : uint8 = v2 + 1uy
                let v90 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v89
                let v91 : Result<std_path_PathBuf, std_io_Error> = v90 v82
                let v92 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v94 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v95 : string = "$0.map_err(|x| $1(x))"
                let v96 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v95 
                let _run_target_args'_v94 = v96 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v97 : string = "$0.map_err(|x| $1(x))"
                let v98 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v97 
                let _run_target_args'_v94 = v98 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v99 : string = "$0.map_err(|x| $1(x))"
                let v100 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v91, v92) v99 
                let _run_target_args'_v94 = v100 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v101 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v101 
                #endif
#if FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v102 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v103 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v103 
                #endif
#else
                let v104 : Result<std_path_PathBuf, string> = match v91 with Ok x -> Ok x | Error x -> Error (v92 x)
                let _run_target_args'_v94 = v104 
                #endif
                let v105 : Result<std_path_PathBuf, string> = _run_target_args'_v94 
                let v108 : (std_path_PathBuf -> US14) = method51()
                let v109 : (string -> US14) = method52()
                let v111 : US14 = match v105 with Ok x -> v108 x | Error x -> v109 x
                match v111 with
                | US14_1(v267) -> (* Error *)
                    let v268 : string = $"file_system.read_link / "
                    let v269 : string = $"error': {v267} / error: {v29} / name: {v5}"
                    let v270 : string = v268 + v269 
                    (* run_target_args'
                    let v275 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v276 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v277 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v276 
                    let _run_target_args'_v275 = v277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v278 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v279 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v278 
                    let _run_target_args'_v275 = v279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v280 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v281 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v270 v280 
                    let _run_target_args'_v275 = v281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v283 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v283 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v287 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v287 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v291 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v291 
                    #endif
#else
                    let v295 : std_io_Error = v270 |> unbox<std_io_Error>
                    let _run_target_args'_v275 = v295 
                    #endif
                    let v298 : std_io_Error = _run_target_args'_v275 
                    (* run_target_args'
                    let v305 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v306 : string = "Err($0)"
                    let v307 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v306 
                    let _run_target_args'_v305 = v307 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v308 : string = "Err($0)"
                    let v309 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v308 
                    let _run_target_args'_v305 = v309 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v310 : string = "Err($0)"
                    let v311 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v298 v310 
                    let _run_target_args'_v305 = v311 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v312 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v313 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v314 
                    #endif
#else
                    let v315 : Result<std_path_PathBuf, std_io_Error> = v298 |> Error
                    let _run_target_args'_v305 = v315 
                    #endif
                    let v316 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v305 
                    v316
                | US14_0(v114) -> (* Ok *)
                    (* run_target_args'
                    let v119 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "$0.display()"
                    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v120 
                    let _run_target_args'_v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "$0.display()"
                    let v123 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v122 
                    let _run_target_args'_v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "$0.display()"
                    let v125 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v114 v124 
                    let _run_target_args'_v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v131 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v131 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v135 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v135 
                    #endif
#else
                    let v139 : std_path_Display = v114 |> unbox<std_path_Display>
                    let _run_target_args'_v119 = v139 
                    #endif
                    let v142 : std_path_Display = _run_target_args'_v119 
                    let v149 : string = v142 |> string 
                    let v152 : string = method36(v149, v5)
                    (* run_target_args'
                    let v157 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v158 
                    let _run_target_args'_v157 = v159 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v160 
                    let _run_target_args'_v157 = v161 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v162 : string = "&*$0"
                    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v152 v162 
                    let _run_target_args'_v157 = v163 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v165 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v165 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v169 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v173 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v173 
                    #endif
#else
                    let v177 : Ref<Str> = v152 |> unbox<Ref<Str>>
                    let _run_target_args'_v157 = v177 
                    #endif
                    let v180 : Ref<Str> = _run_target_args'_v157 
                    (* run_target_args'
                    let v190 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v191 : string = "String::from($0)"
                    let v192 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v191 
                    let _run_target_args'_v190 = v192 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v193 : string = "String::from($0)"
                    let v194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v193 
                    let _run_target_args'_v190 = v194 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v195 : string = "String::from($0)"
                    let v196 : std_string_String = Fable.Core.RustInterop.emitRustExpr v180 v195 
                    let _run_target_args'_v190 = v196 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v202 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v202 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v206 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v206 
                    #endif
#else
                    let v210 : std_string_String = v180 |> unbox<std_string_String>
                    let _run_target_args'_v190 = v210 
                    #endif
                    let v213 : std_string_String = _run_target_args'_v190 
                    (* run_target_args'
                    let v223 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v224 : string = "std::path::PathBuf::from($0)"
                    let v225 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v224 
                    let _run_target_args'_v223 = v225 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v226 : string = "std::path::PathBuf::from($0)"
                    let v227 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v226 
                    let _run_target_args'_v223 = v227 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v228 : string = "std::path::PathBuf::from($0)"
                    let v229 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v228 
                    let _run_target_args'_v223 = v229 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v231 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v231 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v235 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v235 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v239 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v239 
                    #endif
#else
                    let v243 : std_path_PathBuf = v213 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v223 = v243 
                    #endif
                    let v246 : std_path_PathBuf = _run_target_args'_v223 
                    (* run_target_args'
                    let v253 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "Ok($0)"
                    let v255 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v254 
                    let _run_target_args'_v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "Ok($0)"
                    let v257 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v256 
                    let _run_target_args'_v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "Ok($0)"
                    let v259 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v246 v258 
                    let _run_target_args'_v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v262 
                    #endif
#else
                    let v263 : Result<std_path_PathBuf, std_io_Error> = v246 |> Ok
                    let _run_target_args'_v253 = v263 
                    #endif
                    let v264 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v253 
                    v264
            else
                let v321 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v322 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
                let v323 : string = v321 + v322 
                (* run_target_args'
                let v328 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v329 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v330 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v329 
                let _run_target_args'_v328 = v330 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v331 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v332 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v331 
                let _run_target_args'_v328 = v332 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v333 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v334 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v323 v333 
                let _run_target_args'_v328 = v334 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v336 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v336 
                #endif
#if FABLE_COMPILER_PYTHON
                let v340 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v340 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v344 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v344 
                #endif
#else
                let v348 : std_io_Error = v323 |> unbox<std_io_Error>
                let _run_target_args'_v328 = v348 
                #endif
                let v351 : std_io_Error = _run_target_args'_v328 
                (* run_target_args'
                let v358 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v359 : string = "Err($0)"
                let v360 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v359 
                let _run_target_args'_v358 = v360 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v361 : string = "Err($0)"
                let v362 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v361 
                let _run_target_args'_v358 = v362 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v363 : string = "Err($0)"
                let v364 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v351 v363 
                let _run_target_args'_v358 = v364 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v365 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v365 
                #endif
#if FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v366 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v367 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v367 
                #endif
#else
                let v368 : Result<std_path_PathBuf, std_io_Error> = v351 |> Error
                let _run_target_args'_v358 = v368 
                #endif
                let v369 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v358 
                v369
        | _ ->
            let v373 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v374 : string = $"path: {v0} / error: {v29} / path': {v4} / name: {v5}"
            let v375 : string = v373 + v374 
            (* run_target_args'
            let v380 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v381 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v382 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v381 
            let _run_target_args'_v380 = v382 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v383 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v384 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v383 
            let _run_target_args'_v380 = v384 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v385 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v386 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v375 v385 
            let _run_target_args'_v380 = v386 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v388 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v388 
            #endif
#if FABLE_COMPILER_PYTHON
            let v392 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v392 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v396 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v396 
            #endif
#else
            let v400 : std_io_Error = v375 |> unbox<std_io_Error>
            let _run_target_args'_v380 = v400 
            #endif
            let v403 : std_io_Error = _run_target_args'_v380 
            (* run_target_args'
            let v410 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v411 : string = "Err($0)"
            let v412 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v411 
            let _run_target_args'_v410 = v412 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v413 : string = "Err($0)"
            let v414 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v413 
            let _run_target_args'_v410 = v414 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v415 : string = "Err($0)"
            let v416 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v403 v415 
            let _run_target_args'_v410 = v416 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v417 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v417 
            #endif
#if FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v418 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v419 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v419 
            #endif
#else
            let v420 : Result<std_path_PathBuf, std_io_Error> = v403 |> Error
            let _run_target_args'_v410 = v420 
            #endif
            let v421 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v410 
            v421
and method62 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v42 : System.IO.FileAttributes = method59(v36)
    let v43 : System.IO.FileAttributes = method60()
    let v44 : bool = method61(v43, v42)
    if v44 then
        (* run_target_args'
        let v49 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v59 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v63 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v63 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v71 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v71 
        #endif
#else
        let v75 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v49 = v75 
        #endif
        let v78 : System_IO_FileInfo = _run_target_args'_v49 
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = null |> unbox<string>
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v94 : string = null |> unbox<string>
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = null |> unbox<string>
        let _run_target_args'_v88 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : string = null |> unbox<string>
        let _run_target_args'_v88 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v106 : string = null |> unbox<string>
        let _run_target_args'_v88 = v106 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v110 : string = null |> unbox<string>
        let _run_target_args'_v88 = v110 
        #endif
#else
        let v113 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v114 : string = v113 v78
        let _run_target_args'_v88 = v114 
        #endif
        let v115 : string = _run_target_args'_v88 
        let v122 : std_path_PathBuf = v115 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v126 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v127 : string = "Ok($0)"
        let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
        let _run_target_args'_v126 = v128 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v129 : string = "Ok($0)"
        let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
        let _run_target_args'_v126 = v130 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v131 : string = "Ok($0)"
        let v132 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v131 
        let _run_target_args'_v126 = v132 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v133 
        #endif
#if FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v134 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v135 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v135 
        #endif
#else
        let v136 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v136 
        #endif
        let v137 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v126 
        v137
    else
        let v140 : string = $"file_system.read_link / Fsharp / "
        let v141 : string = $"The file or directory is not a reparse point. / "
        let v142 : string = v140 + v141 
        let v143 : string = $"path: {v0} / result: {v44} / path': {v2} / n: {v1}"
        let v144 : string = v142 + v143 
        (* run_target_args'
        let v149 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v150 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v151 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v150 
        let _run_target_args'_v149 = v151 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v152 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v153 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v152 
        let _run_target_args'_v149 = v153 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v154 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v155 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v154 
        let _run_target_args'_v149 = v155 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v157 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v157 
        #endif
#if FABLE_COMPILER_PYTHON
        let v161 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v161 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v165 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v165 
        #endif
#else
        let v169 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v169 
        #endif
        let v172 : std_io_Error = _run_target_args'_v149 
        let v178 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method63(v0, v178, v1, v172, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method62(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method64 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v23 : US5 = US5_1
    let v24 : US5 = v9 |> Option.defaultValue v23 
    let v28 : string = method50(v3)
    let v29 : bool = v2 >= 11uy
    if v29 then
        let v30 : string = $"file_system.read_link / "
        let v31 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v32 : string = v30 + v31 
        (* run_target_args'
        let v37 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v38 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v39 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _run_target_args'_v37 = v39 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v40 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v41 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v40 
        let _run_target_args'_v37 = v41 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v42 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v43 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v32 v42 
        let _run_target_args'_v37 = v43 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v45 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v45 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v49 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v53 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v53 
        #endif
#else
        let v57 : std_io_Error = v32 |> unbox<std_io_Error>
        let _run_target_args'_v37 = v57 
        #endif
        let v60 : std_io_Error = _run_target_args'_v37 
        (* run_target_args'
        let v67 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v68 : string = "Err($0)"
        let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v68 
        let _run_target_args'_v67 = v69 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v70 : string = "Err($0)"
        let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v70 
        let _run_target_args'_v67 = v71 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v72 : string = "Err($0)"
        let v73 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v60 v72 
        let _run_target_args'_v67 = v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v75 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v76 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v76 
        #endif
#else
        let v77 : Result<std_path_PathBuf, std_io_Error> = v60 |> Error
        let _run_target_args'_v67 = v77 
        #endif
        let v78 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v67 
        v78
    else
        match v24 with
        | US5_0(v81) -> (* Some *)
            let v84 : string = ""
            let v85 : bool = v0 <> v84 
            if v85 then
                let v88 : uint8 = v2 + 1uy
                let v89 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v88
                let v90 : Result<std_path_PathBuf, std_io_Error> = v89 v81
                let v91 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v93 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v94 : string = "$0.map_err(|x| $1(x))"
                let v95 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v94 
                let _run_target_args'_v93 = v95 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v96 : string = "$0.map_err(|x| $1(x))"
                let v97 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v96 
                let _run_target_args'_v93 = v97 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v98 : string = "$0.map_err(|x| $1(x))"
                let v99 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v98 
                let _run_target_args'_v93 = v99 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v100 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v100 
                #endif
#if FABLE_COMPILER_PYTHON
                let v101 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v101 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v102 
                #endif
#else
                let v103 : Result<std_path_PathBuf, string> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
                let _run_target_args'_v93 = v103 
                #endif
                let v104 : Result<std_path_PathBuf, string> = _run_target_args'_v93 
                let v107 : (std_path_PathBuf -> US14) = method51()
                let v108 : (string -> US14) = method52()
                let v110 : US14 = match v104 with Ok x -> v107 x | Error x -> v108 x
                match v110 with
                | US14_1(v266) -> (* Error *)
                    let v267 : string = $"file_system.read_link / "
                    let v268 : string = $"error': {v266} / error: {v28} / name: {v4}"
                    let v269 : string = v267 + v268 
                    (* run_target_args'
                    let v274 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v275 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v276 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v275 
                    let _run_target_args'_v274 = v276 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v277 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v278 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v277 
                    let _run_target_args'_v274 = v278 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v279 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v280 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v269 v279 
                    let _run_target_args'_v274 = v280 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v282 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v290 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v290 
                    #endif
#else
                    let v294 : std_io_Error = v269 |> unbox<std_io_Error>
                    let _run_target_args'_v274 = v294 
                    #endif
                    let v297 : std_io_Error = _run_target_args'_v274 
                    (* run_target_args'
                    let v304 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v305 : string = "Err($0)"
                    let v306 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v305 
                    let _run_target_args'_v304 = v306 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v307 : string = "Err($0)"
                    let v308 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v307 
                    let _run_target_args'_v304 = v308 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v309 : string = "Err($0)"
                    let v310 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v297 v309 
                    let _run_target_args'_v304 = v310 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v311 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v311 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v312 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v312 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v313 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v313 
                    #endif
#else
                    let v314 : Result<std_path_PathBuf, std_io_Error> = v297 |> Error
                    let _run_target_args'_v304 = v314 
                    #endif
                    let v315 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v304 
                    v315
                | US14_0(v113) -> (* Ok *)
                    (* run_target_args'
                    let v118 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v119 : string = "$0.display()"
                    let v120 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v119 
                    let _run_target_args'_v118 = v120 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v121 : string = "$0.display()"
                    let v122 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v121 
                    let _run_target_args'_v118 = v122 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v123 : string = "$0.display()"
                    let v124 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v113 v123 
                    let _run_target_args'_v118 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v134 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v134 
                    #endif
#else
                    let v138 : std_path_Display = v113 |> unbox<std_path_Display>
                    let _run_target_args'_v118 = v138 
                    #endif
                    let v141 : std_path_Display = _run_target_args'_v118 
                    let v148 : string = v141 |> string 
                    let v151 : string = method36(v148, v4)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v164 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v164 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v168 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v172 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
#else
                    let v176 : Ref<Str> = v151 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v176 
                    #endif
                    let v179 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v189 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v190 : string = "String::from($0)"
                    let v191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v190 
                    let _run_target_args'_v189 = v191 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v192 : string = "String::from($0)"
                    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v192 
                    let _run_target_args'_v189 = v193 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v194 : string = "String::from($0)"
                    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v179 v194 
                    let _run_target_args'_v189 = v195 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v197 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v197 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v201 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v201 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v205 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v205 
                    #endif
#else
                    let v209 : std_string_String = v179 |> unbox<std_string_String>
                    let _run_target_args'_v189 = v209 
                    #endif
                    let v212 : std_string_String = _run_target_args'_v189 
                    (* run_target_args'
                    let v222 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v223 : string = "std::path::PathBuf::from($0)"
                    let v224 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v223 
                    let _run_target_args'_v222 = v224 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v225 : string = "std::path::PathBuf::from($0)"
                    let v226 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v225 
                    let _run_target_args'_v222 = v226 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v227 : string = "std::path::PathBuf::from($0)"
                    let v228 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v212 v227 
                    let _run_target_args'_v222 = v228 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v230 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v230 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v234 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v234 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v238 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v238 
                    #endif
#else
                    let v242 : std_path_PathBuf = v212 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v222 = v242 
                    #endif
                    let v245 : std_path_PathBuf = _run_target_args'_v222 
                    (* run_target_args'
                    let v252 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : string = "Ok($0)"
                    let v254 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v253 
                    let _run_target_args'_v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : string = "Ok($0)"
                    let v256 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v255 
                    let _run_target_args'_v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : string = "Ok($0)"
                    let v258 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v245 v257 
                    let _run_target_args'_v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v259 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v260 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v260 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v261 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v261 
                    #endif
#else
                    let v262 : Result<std_path_PathBuf, std_io_Error> = v245 |> Ok
                    let _run_target_args'_v252 = v262 
                    #endif
                    let v263 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v252 
                    v263
            else
                let v320 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v321 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
                let v322 : string = v320 + v321 
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v329 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v328 
                let _run_target_args'_v327 = v329 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v330 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v331 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v330 
                let _run_target_args'_v327 = v331 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v332 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v333 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v322 v332 
                let _run_target_args'_v327 = v333 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v335 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v335 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v343 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v343 
                #endif
#else
                let v347 : std_io_Error = v322 |> unbox<std_io_Error>
                let _run_target_args'_v327 = v347 
                #endif
                let v350 : std_io_Error = _run_target_args'_v327 
                (* run_target_args'
                let v357 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v358 : string = "Err($0)"
                let v359 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v358 
                let _run_target_args'_v357 = v359 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v360 : string = "Err($0)"
                let v361 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v360 
                let _run_target_args'_v357 = v361 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v362 : string = "Err($0)"
                let v363 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v350 v362 
                let _run_target_args'_v357 = v363 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v364 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v364 
                #endif
#if FABLE_COMPILER_PYTHON
                let v365 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v365 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v366 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v366 
                #endif
#else
                let v367 : Result<std_path_PathBuf, std_io_Error> = v350 |> Error
                let _run_target_args'_v357 = v367 
                #endif
                let v368 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v357 
                v368
        | _ ->
            let v372 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v373 : string = $"path: {v0} / error: {v28} / path': {v0} / name: {v4}"
            let v374 : string = v372 + v373 
            (* run_target_args'
            let v379 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v380 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v381 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v380 
            let _run_target_args'_v379 = v381 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v382 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v383 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v382 
            let _run_target_args'_v379 = v383 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v384 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v385 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v374 v384 
            let _run_target_args'_v379 = v385 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v387 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v387 
            #endif
#if FABLE_COMPILER_PYTHON
            let v391 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v391 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v395 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v395 
            #endif
#else
            let v399 : std_io_Error = v374 |> unbox<std_io_Error>
            let _run_target_args'_v379 = v399 
            #endif
            let v402 : std_io_Error = _run_target_args'_v379 
            (* run_target_args'
            let v409 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v410 : string = "Err($0)"
            let v411 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v410 
            let _run_target_args'_v409 = v411 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v412 : string = "Err($0)"
            let v413 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v412 
            let _run_target_args'_v409 = v413 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v414 : string = "Err($0)"
            let v415 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v402 v414 
            let _run_target_args'_v409 = v415 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v416 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v416 
            #endif
#if FABLE_COMPILER_PYTHON
            let v417 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v417 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v418 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v418 
            #endif
#else
            let v419 : Result<std_path_PathBuf, std_io_Error> = v402 |> Error
            let _run_target_args'_v409 = v419 
            #endif
            let v420 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v409 
            v420
and method58 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v41 : System.IO.FileAttributes = method59(v35)
    let v42 : System.IO.FileAttributes = method60()
    let v43 : bool = method61(v42, v41)
    if v43 then
        (* run_target_args'
        let v48 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v50 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v66 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v70 
        #endif
#else
        let v74 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v48 = v74 
        #endif
        let v77 : System_IO_FileInfo = _run_target_args'_v48 
        (* run_target_args'
        let v87 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = null |> unbox<string>
        let _run_target_args'_v87 = v89 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v93 : string = null |> unbox<string>
        let _run_target_args'_v87 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = null |> unbox<string>
        let _run_target_args'_v87 = v97 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : string = null |> unbox<string>
        let _run_target_args'_v87 = v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v105 : string = null |> unbox<string>
        let _run_target_args'_v87 = v105 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v109 : string = null |> unbox<string>
        let _run_target_args'_v87 = v109 
        #endif
#else
        let v112 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v113 : string = v112 v77
        let _run_target_args'_v87 = v113 
        #endif
        let v114 : string = _run_target_args'_v87 
        let v121 : std_path_PathBuf = v114 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v125 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v126 : string = "Ok($0)"
        let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
        let _run_target_args'_v125 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "Ok($0)"
        let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
        let _run_target_args'_v125 = v129 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = "Ok($0)"
        let v131 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v130 
        let _run_target_args'_v125 = v131 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v132 
        #endif
#if FABLE_COMPILER_PYTHON
        let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v133 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v134 
        #endif
#else
        let v135 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v135 
        #endif
        let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v125 
        v136
    else
        let v139 : string = $"file_system.read_link / Fsharp / "
        let v140 : string = $"The file or directory is not a reparse point. / "
        let v141 : string = v139 + v140 
        let v142 : string = $"path: {v0} / result: {v43} / path': {v0} / n: {v1}"
        let v143 : string = v141 + v142 
        (* run_target_args'
        let v148 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v149 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v150 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v149 
        let _run_target_args'_v148 = v150 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v151 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v152 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v151 
        let _run_target_args'_v148 = v152 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v153 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v154 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v153 
        let _run_target_args'_v148 = v154 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v156 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v156 
        #endif
#if FABLE_COMPILER_PYTHON
        let v160 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v160 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v164 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v164 
        #endif
#else
        let v168 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v168 
        #endif
        let v171 : std_io_Error = _run_target_args'_v148 
        let v177 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method64(v0, v177, v1, v171)
and method47 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method48(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method39(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method48(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method39(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method48(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method65 () : (std_path_PathBuf -> US15) =
    closure25()
and method67 (v0 : string) : string =
    v0
and method68 () : string =
    let v0 : string = ""
    v0
and method66 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method67(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method68()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method68()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method68()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method68()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method68()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method46 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method47(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US15) = method65()
        let v22 : US15 option = v16 |> Option.map v21 
        let v36 : US15 = US15_1
        let v37 : US15 = v22 |> Option.defaultValue v36 
        let v80 : string =
            match v37 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v41) -> (* Some *)
                (* run_target_args'
                let v46 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v47 : string = "$0.display()"
                let v48 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v47 
                let _run_target_args'_v46 = v48 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v49 : string = "$0.display()"
                let v50 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v49 
                let _run_target_args'_v46 = v50 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v51 : string = "$0.display()"
                let v52 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v41 v51 
                let _run_target_args'_v46 = v52 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v54 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v54 
                #endif
#if FABLE_COMPILER_PYTHON
                let v58 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v58 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v62 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v62 
                #endif
#else
                let v66 : std_path_Display = v41 |> unbox<std_path_Display>
                let _run_target_args'_v46 = v66 
                #endif
                let v69 : std_path_Display = _run_target_args'_v46 
                let v76 : string = v69 |> string 
                v76
        let v81 : bool = v80 = ""
        let v82 : string =
            if v81 then
                v0
            else
                v80
        let v83 : string = "^\\\\\\\\\\?\\\\"
        let v84 : string = ""
        let v85 : string = method66(v83, v84, v82)
        let v86 : int32 = v85.Length
        let v87 : bool = v86 < 2
        if v87 then
            v0
        else
            let v88 : string = $"{v85.[0] |> string |> _.ToLower()}{v85.[1..]}"
            let v89 : string = "\\"
            let v90 : string = "/"
            let v91 : string = v88.Replace (v89, v90)
            v91
and method35 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method36(v2, v3)
    let v5 : US13 = method37(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure17(v0, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method46(v6)
        US5_0(v7)
and method71 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method72 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method70 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : bool = v106 = false
    let v297 : string =
        if v107 then
            let v108 : string = method34()
            let v109 : string = method36(v108, v0)
            let v110 : string = method46(v109)
            let v118 : string = "/"
            let v119 : (string []) = v110.Split v118 
            let v122 : (string []) = [||]
            let v123 : int32 = v119.Length
            let v124 : Mut6 = {l0 = 0; l1 = 0; l2 = v122} : Mut6
            while method71(v123, v124) do
                let v126 : int32 = v124.l0
                let v127 : int32 =  -v126
                let v128 : int32 = v127 + v123
                let v129 : int32 = v128 - 1
                let struct (v130 : int32, v131 : (string [])) = v124.l1, v124.l2
                let v132 : string = v119.[int v129]
                let v133 : bool = ".." = v132
                let struct (v179 : int32, v180 : (string [])) =
                    if v133 then
                        let v134 : int32 = v130 + 1
                        struct (v134, v131)
                    else
                        let v135 : bool = "." = v132
                        if v135 then
                            struct (v130, v131)
                        else
                            let v136 : bool = 0 = v130
                            if v136 then
                                let v139 : string = ":"
                                let v140 : bool = v132.EndsWith (v139, false, null)
                                if v140 then
                                    let v143 : string = $"{v108.[0]}:"
                                    let v144 : (string []) = [|v143|]
                                    let v145 : int32 = v144.Length
                                    let v146 : int32 = v131.Length
                                    let v147 : int32 = v145 + v146
                                    let v148 : (string []) = Array.zeroCreate<string> (v147)
                                    let v149 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v147, v149) do
                                        let v151 : int32 = v149.l0
                                        let v152 : bool = v151 < v145
                                        let v156 : string =
                                            if v152 then
                                                let v153 : string = v144.[int v151]
                                                v153
                                            else
                                                let v154 : int32 = v151 - v145
                                                let v155 : string = v131.[int v154]
                                                v155
                                        v148.[int v151] <- v156
                                        let v157 : int32 = v151 + 1
                                        v149.l0 <- v157
                                        ()
                                    struct (0, v148)
                                else
                                    let v158 : (string []) = [|v132|]
                                    let v159 : int32 = v158.Length
                                    let v160 : int32 = v131.Length
                                    let v161 : int32 = v159 + v160
                                    let v162 : (string []) = Array.zeroCreate<string> (v161)
                                    let v163 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v161, v163) do
                                        let v165 : int32 = v163.l0
                                        let v166 : bool = v165 < v159
                                        let v170 : string =
                                            if v166 then
                                                let v167 : string = v158.[int v165]
                                                v167
                                            else
                                                let v168 : int32 = v165 - v159
                                                let v169 : string = v131.[int v168]
                                                v169
                                        v162.[int v165] <- v170
                                        let v171 : int32 = v165 + 1
                                        v163.l0 <- v171
                                        ()
                                    struct (0, v162)
                            else
                                let v174 : int32 = v130 - 1
                                struct (v174, v131)
                let v181 : int32 = v126 + 1
                v124.l0 <- v181
                v124.l1 <- v179
                v124.l2 <- v180
                ()
            let struct (v182 : int32, v183 : (string [])) = v124.l1, v124.l2
            let v188 : unit = ()
            let _let'_v188 =
                seq {
                    for i = 0 to v183.Length - 1 do yield v183.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v191 : string seq = _let'_v188 
            let v197 : char = method72()
            let v199 : (char -> string) = _.ToString()
            let v200 : string = v199 v197
            let v204 : bool = v200 = "\n"
            let v206 : string =
                if v204 then
                    method31(v200)
                else
                    v200
            let v207 : (string -> (string seq -> string)) = String.concat
            let v208 : (string seq -> string) = v207 v206
            v208 v191
        else
            let v212 : string = "std::fs::canonicalize(&*$0)"
            let v213 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v212 
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "$0.unwrap()"
            let v217 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "$0.unwrap()"
            let v219 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "$0.unwrap()"
            let v221 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v223 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v223 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v224 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v224 
            #endif
#else
            let v225 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v225 
            #endif
            let v226 : std_path_PathBuf = _run_target_args'_v215 
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : string = "$0.display()"
            let v235 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v234 
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v236 : string = "$0.display()"
            let v237 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v236 
            let _run_target_args'_v233 = v237 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v238 : string = "$0.display()"
            let v239 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v238 
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v241 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v241 
            #endif
#if FABLE_COMPILER_PYTHON
            let v245 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v245 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v249 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v249 
            #endif
#else
            let v253 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v253 
            #endif
            let v256 : std_path_Display = _run_target_args'_v233 
            (* run_target_args'
            let v266 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v267 : string = "format!(\"{}\", $0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v267 
            let _run_target_args'_v266 = v268 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v269 : string = "format!(\"{}\", $0)"
            let v270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v269 
            let _run_target_args'_v266 = v270 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v271 : string = "format!(\"{}\", $0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v271 
            let _run_target_args'_v266 = v272 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v274 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v274 
            #endif
#if FABLE_COMPILER_PYTHON
            let v278 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v278 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v282 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v282 
            #endif
#else
            let v286 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v286 
            #endif
            let v289 : std_string_String = _run_target_args'_v266 
            let v295 : string = "fable_library_rust::String_::fromString($0)"
            let v296 : string = Fable.Core.RustInterop.emitRustExpr v289 v295 
            v296
    let _run_target_args'_v5 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v299 : string = null |> unbox<string>
    let _run_target_args'_v5 = v299 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v303 : string = null |> unbox<string>
    let _run_target_args'_v5 = v303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : string = null |> unbox<string>
    let _run_target_args'_v5 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string = null |> unbox<string>
    let _run_target_args'_v5 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : string = null |> unbox<string>
    let _run_target_args'_v5 = v315 
    #endif
#else
    let v318 : (string -> string) = System.IO.Path.GetFullPath
    let v319 : string = v318 v0
    let _run_target_args'_v5 = v319 
    #endif
    let v320 : string = _run_target_args'_v5 
    v320
and method69 (v0 : string) : string =
    let v1 : string = method70(v0)
    method46(v1)
and method73 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method74 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method75 () : string =
    let v0 : string = "\n"
    v0
and method77 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method38(v0)
    let v8 : bool = v7 = false
    let v113 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v65 : Vec<uint8> = method27(v59)
            let v66 : string = "std::string::String::from_utf8($0)"
            let v67 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v65 v66 
            (* run_target_args'
            let v69 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v70 : string = "$0.unwrap()"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v70 
            let _run_target_args'_v69 = v71 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v72 
            let _run_target_args'_v69 = v73 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v74 : string = "$0.unwrap()"
            let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v74 
            let _run_target_args'_v69 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v76 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v76 
            #endif
#if FABLE_COMPILER_PYTHON
            let v77 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v77 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v78 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v78 
            #endif
#else
            let v79 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v79 
            #endif
            let v80 : std_string_String = _run_target_args'_v69 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v80 v83 
            let _run_target_args'_v13 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v86 : string = null |> unbox<string>
            let _run_target_args'_v13 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v90 : string = null |> unbox<string>
            let _run_target_args'_v13 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v94 : string = null |> unbox<string>
            let _run_target_args'_v13 = v94 
            #endif
#if FABLE_COMPILER_PYTHON
            let v98 : string = null |> unbox<string>
            let _run_target_args'_v13 = v98 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v102 : string = null |> unbox<string>
            let _run_target_args'_v13 = v102 
            #endif
#else
            let v105 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v105 
            #endif
            let v106 : string = _run_target_args'_v13 
            let v112 : bool = v1 = v106
            v112
    let _run_target_args'_v6 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v119 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v131 
    #endif
#else
    let v135 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v135 
    #endif
    let v138 : bool = _run_target_args'_v6 
    v138
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method79 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method80 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method81 () : (std_string_String -> US16) =
    closure28()
and method82 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_red"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_red"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_red"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[91m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[91m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[91m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[91m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method84 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "error"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v1}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v1}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v1}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v1}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v117 : string = $"{v110}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v3, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v3, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v3.l0
    v136
and method83 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method84(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method83(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method85 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_black"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_black"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_black"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[90m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[90m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[90m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[90m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method87 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "dir"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method86 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method87(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : string = method86(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method89 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method89(v1, v0)
and method88 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method90 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method91 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method93 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method92 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method93(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method92(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method99 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "path"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method98 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method99(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.delete_directory_async"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = $"%A{v1}"
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : string = $"%A{v1}"
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : string = $"%A{v1}"
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : string = $"%A{v1}"
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : string = $"%A{v1}"
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : string = $"%A{v1}"
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v76 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v51 = v76 
        #endif
        let v77 : string = _run_target_args'_v51 
        let v83 : string = method55(v0)
        let v84 : string = method98(v27, v28, v29, v30, v31, v32, v45, v46, v77, v83)
        method19(v84)
and method97 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v23 : bool = true
                method89(v23, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v25 : exn = ex
                let v26 : int64 = v1 % 100L
                let v27 : bool = v26 = 0L
                if v27 then
                    let v28 : unit = ()
                    let v29 : (unit -> unit) = closure34(v0, v25)
                    let v30 : unit = (fun () -> v29 (); v28) ()
                    ()
                (* run_target_args'
                let v118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v119 : (int32 -> Async<unit>) = Async.Sleep
                let v120 : Async<unit> = v119 10
                let _run_target_args'_v118 = v120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v121 : (int32 -> Async<unit>) = Async.Sleep
                let v122 : Async<unit> = v121 10
                let _run_target_args'_v118 = v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : (int32 -> Async<unit>) = Async.Sleep
                let v124 : Async<unit> = v123 10
                let _run_target_args'_v118 = v124 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v125 : (int32 -> Async<unit>) = Async.Sleep
                let v126 : Async<unit> = v125 10
                let _run_target_args'_v118 = v126 
                #endif
#if FABLE_COMPILER_PYTHON
                let v127 : (int32 -> Async<unit>) = Async.Sleep
                let v128 : Async<unit> = v127 10
                let _run_target_args'_v118 = v128 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v129 : (int32 -> Async<unit>) = Async.Sleep
                let v130 : Async<unit> = v129 10
                let _run_target_args'_v118 = v130 
                #endif
#else
                let v131 : (int32 -> Async<unit>) = Async.Sleep
                let v132 : Async<unit> = v131 10
                let _run_target_args'_v118 = v132 
                #endif
                let v133 : Async<unit> = _run_target_args'_v118 
                do! v133 
                let v136 : int64 = v1 + 1L
                let v137 : Async<int64> = method96(v0, v136)
                return! v137 
                (* indent
                ()
            indent *)
            (* try_unit
            let v252 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1879 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v1879 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1881 : unit = ()
    let _let'_v1881 =
        async {
            try
                let v1884 : bool = true
                method89(v1884, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v1886 : exn = ex
                let v1887 : int64 = v1 % 100L
                let v1888 : bool = v1887 = 0L
                if v1888 then
                    let v1889 : unit = ()
                    let v1890 : (unit -> unit) = closure34(v0, v1886)
                    let v1891 : unit = (fun () -> v1890 (); v1889) ()
                    ()
                (* run_target_args'
                let v1979 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1980 : (int32 -> Async<unit>) = Async.Sleep
                let v1981 : Async<unit> = v1980 10
                let _run_target_args'_v1979 = v1981 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1982 : (int32 -> Async<unit>) = Async.Sleep
                let v1983 : Async<unit> = v1982 10
                let _run_target_args'_v1979 = v1983 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1984 : (int32 -> Async<unit>) = Async.Sleep
                let v1985 : Async<unit> = v1984 10
                let _run_target_args'_v1979 = v1985 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1986 : (int32 -> Async<unit>) = Async.Sleep
                let v1987 : Async<unit> = v1986 10
                let _run_target_args'_v1979 = v1987 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1988 : (int32 -> Async<unit>) = Async.Sleep
                let v1989 : Async<unit> = v1988 10
                let _run_target_args'_v1979 = v1989 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1990 : (int32 -> Async<unit>) = Async.Sleep
                let v1991 : Async<unit> = v1990 10
                let _run_target_args'_v1979 = v1991 
                #endif
#else
                let v1992 : (int32 -> Async<unit>) = Async.Sleep
                let v1993 : Async<unit> = v1992 10
                let _run_target_args'_v1979 = v1993 
                #endif
                let v1994 : Async<unit> = _run_target_args'_v1979 
                do! v1994 
                let v1997 : int64 = v1 + 1L
                let v1998 : Async<int64> = method96(v0, v1997)
                return! v1998 
                (* indent
                ()
            indent *)
            (* try_unit
            let v2113 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3740 : Async<int64> = _let'_v1881 
    let _run_target_args'_v6 = v3740 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3742 : unit = ()
    let _let'_v3742 =
        async {
            try
                let v3745 : bool = true
                method89(v3745, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v3747 : exn = ex
                let v3748 : int64 = v1 % 100L
                let v3749 : bool = v3748 = 0L
                if v3749 then
                    let v3750 : unit = ()
                    let v3751 : (unit -> unit) = closure34(v0, v3747)
                    let v3752 : unit = (fun () -> v3751 (); v3750) ()
                    ()
                (* run_target_args'
                let v3840 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3841 : (int32 -> Async<unit>) = Async.Sleep
                let v3842 : Async<unit> = v3841 10
                let _run_target_args'_v3840 = v3842 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3843 : (int32 -> Async<unit>) = Async.Sleep
                let v3844 : Async<unit> = v3843 10
                let _run_target_args'_v3840 = v3844 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3845 : (int32 -> Async<unit>) = Async.Sleep
                let v3846 : Async<unit> = v3845 10
                let _run_target_args'_v3840 = v3846 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3847 : (int32 -> Async<unit>) = Async.Sleep
                let v3848 : Async<unit> = v3847 10
                let _run_target_args'_v3840 = v3848 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3849 : (int32 -> Async<unit>) = Async.Sleep
                let v3850 : Async<unit> = v3849 10
                let _run_target_args'_v3840 = v3850 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3851 : (int32 -> Async<unit>) = Async.Sleep
                let v3852 : Async<unit> = v3851 10
                let _run_target_args'_v3840 = v3852 
                #endif
#else
                let v3853 : (int32 -> Async<unit>) = Async.Sleep
                let v3854 : Async<unit> = v3853 10
                let _run_target_args'_v3840 = v3854 
                #endif
                let v3855 : Async<unit> = _run_target_args'_v3840 
                do! v3855 
                let v3858 : int64 = v1 + 1L
                let v3859 : Async<int64> = method96(v0, v3858)
                return! v3859 
                (* indent
                ()
            indent *)
            (* try_unit
            let v3974 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5601 : Async<int64> = _let'_v3742 
    let _run_target_args'_v6 = v5601 
    #endif
#else
    let v5603 : unit = ()
    let _let'_v5603 =
        async {
            try
                let v5606 : bool = true
                method89(v5606, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v5608 : exn = ex
                let v5609 : int64 = v1 % 100L
                let v5610 : bool = v5609 = 0L
                if v5610 then
                    let v5611 : unit = ()
                    let v5612 : (unit -> unit) = closure34(v0, v5608)
                    let v5613 : unit = (fun () -> v5612 (); v5611) ()
                    ()
                (* run_target_args'
                let v5701 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5702 : (int32 -> Async<unit>) = Async.Sleep
                let v5703 : Async<unit> = v5702 10
                let _run_target_args'_v5701 = v5703 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5704 : (int32 -> Async<unit>) = Async.Sleep
                let v5705 : Async<unit> = v5704 10
                let _run_target_args'_v5701 = v5705 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5706 : (int32 -> Async<unit>) = Async.Sleep
                let v5707 : Async<unit> = v5706 10
                let _run_target_args'_v5701 = v5707 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5708 : (int32 -> Async<unit>) = Async.Sleep
                let v5709 : Async<unit> = v5708 10
                let _run_target_args'_v5701 = v5709 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5710 : (int32 -> Async<unit>) = Async.Sleep
                let v5711 : Async<unit> = v5710 10
                let _run_target_args'_v5701 = v5711 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v5712 : (int32 -> Async<unit>) = Async.Sleep
                let v5713 : Async<unit> = v5712 10
                let _run_target_args'_v5701 = v5713 
                #endif
#else
                let v5714 : (int32 -> Async<unit>) = Async.Sleep
                let v5715 : Async<unit> = v5714 10
                let _run_target_args'_v5701 = v5715 
                #endif
                let v5716 : Async<unit> = _run_target_args'_v5701 
                do! v5716 
                let v5719 : int64 = v1 + 1L
                let v5720 : Async<int64> = method96(v0, v5719)
                return! v5720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v5835 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7462 : Async<int64> = _let'_v5603 
    let _run_target_args'_v6 = v7462 
    #endif
    let v7463 : Async<int64> = _run_target_args'_v6 
    v7463
and method96 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method97(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method95 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method96(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method95(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : (Async<unit> -> unit) = Async.RunSynchronously
    v34 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : (Async<unit> -> unit) = Async.RunSynchronously
    v35 v27
    #endif
#else
    let v36 : (Async<unit> -> unit) = Async.RunSynchronously
    v36 v27
    #endif
    // run_target_args' is_unit
    ()
and method94 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method100 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method78 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v154 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : string = "std::fs::create_dir_all(&*$0)"
    let v156 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v155 
    let v157 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v159 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : string = "$0.map_err(|x| $1(x))"
    let v161 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v160 
    let _run_target_args'_v159 = v161 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v162 : string = "$0.map_err(|x| $1(x))"
    let v163 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v162 
    let _run_target_args'_v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v164 : string = "$0.map_err(|x| $1(x))"
    let v165 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v164 
    let _run_target_args'_v159 = v165 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v166 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v166 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v168 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v168 
    #endif
#else
    let v169 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v169 
    #endif
    let v170 : Result<unit, std_string_String> = _run_target_args'_v159 
    let v173 : (unit -> US16) = method80()
    let v174 : (std_string_String -> US16) = method81()
    let v176 : US16 = match v170 with Ok () -> v173 () | Error x -> v174 x
    match v176 with
    | US16_1(v228) -> (* Error *)
        let v229 : unit = ()
        let v230 : (unit -> unit) = closure29(v0, v228)
        let v231 : unit = (fun () -> v230 (); v229) ()
        ()
    | US16_0 -> (* Ok *)
        let v179 : unit = ()
        let v180 : (unit -> unit) = closure30(v0)
        let v181 : unit = (fun () -> v180 (); v179) ()
        ()
    (* run_target_args'
    let v282 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v283 : (unit -> unit) = method88(v0)
    let v284 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v283 "$0()" )
    let _run_target_args'_v282 = v284 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v285 : (unit -> unit) = method88(v0)
    let v286 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v285 "$0()" )
    let _run_target_args'_v282 = v286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : (unit -> unit) = method88(v0)
    let v288 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v287 "$0()" )
    let _run_target_args'_v282 = v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v289 : (unit -> unit) = method90(v0)
    let v290 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v289 () }
    let _run_target_args'_v282 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v291 : (unit -> unit) = method90(v0)
    let v292 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v291 () }
    let _run_target_args'_v282 = v292 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v293 : (unit -> unit) = method90(v0)
    let v294 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v293 () }
    let _run_target_args'_v282 = v294 
    #endif
#else
    let v295 : (unit -> unit) = method90(v0)
    let v296 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v295 () }
    let _run_target_args'_v282 = v296 
    #endif
    let v297 : System.IDisposable = _run_target_args'_v282 
    let _run_target_args'_v154 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v302 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v306 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v306 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v309 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v316 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v320 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v328 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v328 
    #endif
#if FABLE_COMPILER_PYTHON
    let v332 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v332 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v336 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v336 
    #endif
#else
    let v339 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v340 : bool = v339 v309
    let _run_target_args'_v314 = v340 
    #endif
    let v341 : bool = _run_target_args'_v314 
    let v347 : bool = v341 = false
    if v347 then
        (* run_target_args'
        let v352 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v354 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v354 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v358 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v358 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v362 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v362 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v366 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v366 
        #endif
#if FABLE_COMPILER_PYTHON
        let v370 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v370 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v374 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v374 
        #endif
#else
        let v377 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v378 : System.DateTime = v377 v309
        let _run_target_args'_v352 = v378 
        #endif
        let v379 : System.DateTime = _run_target_args'_v352 
        let v385 : _ = {| Exists = v341; CreationTime = v379 |}
        let v387 : string = $"%A{v385}"
        let v390 : unit = ()
        let v391 : (unit -> unit) = closure32(v0, v387)
        let v392 : unit = (fun () -> v391 (); v390) ()
        ()
    (* run_target_args'
    let v443 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v444 : (unit -> unit) = method94(v0)
    let v445 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v444 "$0()" )
    let _run_target_args'_v443 = v445 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v446 : (unit -> unit) = method94(v0)
    let v447 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v446 "$0()" )
    let _run_target_args'_v443 = v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v448 : (unit -> unit) = method94(v0)
    let v449 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v448 "$0()" )
    let _run_target_args'_v443 = v449 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : (unit -> unit) = method100(v0)
    let v451 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v450 () }
    let _run_target_args'_v443 = v451 
    #endif
#if FABLE_COMPILER_PYTHON
    let v452 : (unit -> unit) = method100(v0)
    let v453 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v452 () }
    let _run_target_args'_v443 = v453 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v454 : (unit -> unit) = method100(v0)
    let v455 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v454 () }
    let _run_target_args'_v443 = v455 
    #endif
#else
    let v456 : (unit -> unit) = method100(v0)
    let v457 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v456 () }
    let _run_target_args'_v443 = v457 
    #endif
    let v458 : System.IDisposable = _run_target_args'_v443 
    let _run_target_args'_v154 = v458 
    #endif
#if FABLE_COMPILER_PYTHON
    let v462 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v467 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v469 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v469 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v473 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v473 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v477 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v477 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v481 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v481 
    #endif
#if FABLE_COMPILER_PYTHON
    let v485 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v485 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v489 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v489 
    #endif
#else
    let v492 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v493 : bool = v492 v462
    let _run_target_args'_v467 = v493 
    #endif
    let v494 : bool = _run_target_args'_v467 
    let v500 : bool = v494 = false
    if v500 then
        (* run_target_args'
        let v505 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v507 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v507 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v511 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v511 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v515 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v515 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v519 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v519 
        #endif
#if FABLE_COMPILER_PYTHON
        let v523 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v523 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v527 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v527 
        #endif
#else
        let v530 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v531 : System.DateTime = v530 v462
        let _run_target_args'_v505 = v531 
        #endif
        let v532 : System.DateTime = _run_target_args'_v505 
        let v538 : _ = {| Exists = v494; CreationTime = v532 |}
        let v540 : string = $"%A{v538}"
        let v543 : unit = ()
        let v544 : (unit -> unit) = closure32(v0, v540)
        let v545 : unit = (fun () -> v544 (); v543) ()
        ()
    (* run_target_args'
    let v596 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v597 : (unit -> unit) = method94(v0)
    let v598 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v597 "$0()" )
    let _run_target_args'_v596 = v598 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v599 : (unit -> unit) = method94(v0)
    let v600 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v599 "$0()" )
    let _run_target_args'_v596 = v600 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v601 : (unit -> unit) = method94(v0)
    let v602 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v601 "$0()" )
    let _run_target_args'_v596 = v602 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v603 : (unit -> unit) = method100(v0)
    let v604 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v603 () }
    let _run_target_args'_v596 = v604 
    #endif
#if FABLE_COMPILER_PYTHON
    let v605 : (unit -> unit) = method100(v0)
    let v606 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v605 () }
    let _run_target_args'_v596 = v606 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v607 : (unit -> unit) = method100(v0)
    let v608 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v607 () }
    let _run_target_args'_v596 = v608 
    #endif
#else
    let v609 : (unit -> unit) = method100(v0)
    let v610 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v609 () }
    let _run_target_args'_v596 = v610 
    #endif
    let v611 : System.IDisposable = _run_target_args'_v596 
    let _run_target_args'_v154 = v611 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v615 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v620 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v622 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v626 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v626 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v630 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v630 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v634 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v634 
    #endif
#if FABLE_COMPILER_PYTHON
    let v638 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v638 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v642 
    #endif
#else
    let v645 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v646 : bool = v645 v615
    let _run_target_args'_v620 = v646 
    #endif
    let v647 : bool = _run_target_args'_v620 
    let v653 : bool = v647 = false
    if v653 then
        (* run_target_args'
        let v658 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v660 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v660 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v664 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v664 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v668 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v668 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v672 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v676 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v680 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v680 
        #endif
#else
        let v683 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v684 : System.DateTime = v683 v615
        let _run_target_args'_v658 = v684 
        #endif
        let v685 : System.DateTime = _run_target_args'_v658 
        let v691 : _ = {| Exists = v647; CreationTime = v685 |}
        let v693 : string = $"%A{v691}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure32(v0, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        ()
    (* run_target_args'
    let v749 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v750 : (unit -> unit) = method94(v0)
    let v751 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v750 "$0()" )
    let _run_target_args'_v749 = v751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v752 : (unit -> unit) = method94(v0)
    let v753 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v752 "$0()" )
    let _run_target_args'_v749 = v753 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v754 : (unit -> unit) = method94(v0)
    let v755 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v754 "$0()" )
    let _run_target_args'_v749 = v755 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v756 : (unit -> unit) = method100(v0)
    let v757 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v756 () }
    let _run_target_args'_v749 = v757 
    #endif
#if FABLE_COMPILER_PYTHON
    let v758 : (unit -> unit) = method100(v0)
    let v759 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v758 () }
    let _run_target_args'_v749 = v759 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v760 : (unit -> unit) = method100(v0)
    let v761 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v760 () }
    let _run_target_args'_v749 = v761 
    #endif
#else
    let v762 : (unit -> unit) = method100(v0)
    let v763 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v762 () }
    let _run_target_args'_v749 = v763 
    #endif
    let v764 : System.IDisposable = _run_target_args'_v749 
    let _run_target_args'_v154 = v764 
    #endif
#else
    let v768 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v773 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v775 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v775 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v779 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v779 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v783 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v783 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v787 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v787 
    #endif
#if FABLE_COMPILER_PYTHON
    let v791 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v791 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v795 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v795 
    #endif
#else
    let v798 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v799 : bool = v798 v768
    let _run_target_args'_v773 = v799 
    #endif
    let v800 : bool = _run_target_args'_v773 
    let v806 : bool = v800 = false
    if v806 then
        (* run_target_args'
        let v811 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v813 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v817 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v817 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v821 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v821 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v825 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v825 
        #endif
#if FABLE_COMPILER_PYTHON
        let v829 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v829 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v833 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v833 
        #endif
#else
        let v836 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v837 : System.DateTime = v836 v768
        let _run_target_args'_v811 = v837 
        #endif
        let v838 : System.DateTime = _run_target_args'_v811 
        let v844 : _ = {| Exists = v800; CreationTime = v838 |}
        let v846 : string = $"%A{v844}"
        let v849 : unit = ()
        let v850 : (unit -> unit) = closure32(v0, v846)
        let v851 : unit = (fun () -> v850 (); v849) ()
        ()
    (* run_target_args'
    let v902 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v903 : (unit -> unit) = method94(v0)
    let v904 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v903 "$0()" )
    let _run_target_args'_v902 = v904 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v905 : (unit -> unit) = method94(v0)
    let v906 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v905 "$0()" )
    let _run_target_args'_v902 = v906 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v907 : (unit -> unit) = method94(v0)
    let v908 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v907 "$0()" )
    let _run_target_args'_v902 = v908 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v909 : (unit -> unit) = method100(v0)
    let v910 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v909 () }
    let _run_target_args'_v902 = v910 
    #endif
#if FABLE_COMPILER_PYTHON
    let v911 : (unit -> unit) = method100(v0)
    let v912 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v911 () }
    let _run_target_args'_v902 = v912 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v913 : (unit -> unit) = method100(v0)
    let v914 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v913 () }
    let _run_target_args'_v902 = v914 
    #endif
#else
    let v915 : (unit -> unit) = method100(v0)
    let v916 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v915 () }
    let _run_target_args'_v902 = v916 
    #endif
    let v917 : System.IDisposable = _run_target_args'_v902 
    let _run_target_args'_v154 = v917 
    #endif
    let v921 : System.IDisposable = _run_target_args'_v154 
    v921
and method76 (v0 : string, v1 : string) : unit =
    let v2 : bool = method77(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method41(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method39(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method78(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method102 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method104 () : string =
    let v0 : string = ""
    v0
and method105 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method105(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method106 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method106(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method107(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method107 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method105(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method107(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method105(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method107(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and method108 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method108(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method109 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method109(v0, v17)
and method110 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v98 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method109(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int64 = System.Convert.ToInt64 v68.Length
                let v72 : int64 = 0L
                let v73 : UH0 = method105(v71, v68, v72)
                let struct (v74 : System.Text.StringBuilder, v75 : int32, v76 : int32) = method106(v73, v2, v3, v4)
                US18_0(v25, v62, v74, v75, v76)
            else
                let v78 : char list = []
                let v80 : char list = ''' :: v78 
                let v84 : char list = '"' :: v80 
                let v88 : (char list -> (char [])) = List.toArray
                let v89 : (char []) = v88 v84
                let v93 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v89} / s: %A{struct (v2, v3, v4)}"
                US18_1(v93)
    let v110 : US18 =
        match v98 with
        | US18_1(v107) -> (* Error *)
            US18_1(v107)
        | US18_0(v99, v100, v101, v102, v103) -> (* Ok *)
            let v104 : bool = '\\' = v99
            let v105 : char =
                if v104 then
                    '/'
                else
                    v99
            US18_0(v105, v100, v101, v102, v103)
    match v110 with
    | US18_1(v127) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v111, v112, v113, v114, v115) -> (* Ok *)
        let v117 : (char -> string) = _.ToString()
        let v118 : string = v117 v111
        let v121 : string = v0 + v118 
        method110(v121, v112, v113, v114, v115)
and method111 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method111(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method112 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method112(v0, v21)
and method113 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method112(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = ' ' :: v82 
                let v88 : char list = ''' :: v84 
                let v92 : char list = '"' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v118 : US18 =
        match v106 with
        | US18_1(v115) -> (* Error *)
            US18_1(v115)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v112 : bool = '\\' = v107
            let v113 : char =
                if v112 then
                    '/'
                else
                    v107
            US18_0(v113, v108, v109, v110, v111)
    match v118 with
    | US18_1(v135) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v119, v120, v121, v122, v123) -> (* Ok *)
        let v125 : (char -> string) = _.ToString()
        let v126 : string = v125 v119
        let v129 : string = v0 + v126 
        method113(v129, v120, v121, v122, v123)
and method114 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method114(v0, v6)
        else
            v1
and method115 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US18 =
        if v5 then
            let v12 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v12)
        else
            let v16 : char = v1.[int 0]
            let v18 : (string -> int32) = String.length
            let v19 : int32 = v18 v1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v19 |> int32 
            let v48 : int32 = v40 - 1
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v16
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method105(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method106(v61, v2, v3, v4)
            US18_0(v16, v50, v62, v63, v64)
    match v66 with
    | US18_1(v83) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v77 : string = v0 + v74 
        method115(v77, v68, v69, v70, v71)
and method103 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US18 = method108(v10, v16, v23)
    let v197 : US19 =
        match v24 with
        | US18_1(v194) -> (* Error *)
            US19_1(v194)
        | US18_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v123 : US18 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US18_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method109(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int64 = System.Convert.ToInt64 v93.Length
                        let v97 : int64 = 0L
                        let v98 : UH0 = method105(v96, v93, v97)
                        let struct (v99 : System.Text.StringBuilder, v100 : int32, v101 : int32) = method106(v98, v27, v28, v29)
                        US18_0(v50, v87, v99, v100, v101)
                    else
                        let v103 : char list = []
                        let v105 : char list = ''' :: v103 
                        let v109 : char list = '"' :: v105 
                        let v113 : (char list -> (char [])) = List.toArray
                        let v114 : (char []) = v113 v109
                        let v118 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v114} / s: %A{struct (v27, v28, v29)}"
                        US18_1(v118)
            let v135 : US18 =
                match v123 with
                | US18_1(v132) -> (* Error *)
                    US18_1(v132)
                | US18_0(v124, v125, v126, v127, v128) -> (* Ok *)
                    let v129 : bool = '\\' = v124
                    let v130 : char =
                        if v129 then
                            '/'
                        else
                            v124
                    US18_0(v130, v125, v126, v127, v128)
            let v155 : US19 =
                match v135 with
                | US18_1(v152) -> (* Error *)
                    US19_1(v152)
                | US18_0(v136, v137, v138, v139, v140) -> (* Ok *)
                    let v142 : (char -> string) = _.ToString()
                    let v143 : string = v142 v136
                    let struct (v146 : string, v147 : string, v148 : System.Text.StringBuilder, v149 : int32, v150 : int32) = method110(v143, v137, v138, v139, v140)
                    US19_0(v146, v147, v148, v149, v150)
            let v165 : US19 =
                match v155 with
                | US19_1(v162) -> (* Error *)
                    US19_0(v9, v26, v27, v28, v29)
                | US19_0(v156, v157, v158, v159, v160) -> (* Ok *)
                    US19_0(v156, v157, v158, v159, v160)
            match v165 with
            | US19_1(v189) -> (* Error *)
                let v190 : string = "parsing.between / expected content"
                US19_1(v190)
            | US19_0(v166, v167, v168, v169, v170) -> (* Ok *)
                let v171 : UH1 = UH1_0
                let v172 : UH1 = UH1_1(v20, v171)
                let v173 : UH1 = UH1_1(v19, v172)
                let v174 : US18 = method111(v167, v168, v169, v170, v173)
                match v174 with
                | US18_1(v181) -> (* Error *)
                    let v183 : string = $"parsing.between / expected closing delimiter / e: %A{v181} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v167, v168, v169, v170)}"
                    US19_1(v183)
                | US18_0(v175, v176, v177, v178, v179) -> (* Ok *)
                    US19_0(v166, v176, v177, v178, v179)
    let v416 : US19 =
        match v197 with
        | US19_1(v203) -> (* Error *)
            let v204 : bool = "" = v10
            let v307 : US18 =
                if v204 then
                    let v205 : char list = []
                    let v207 : char list = ' ' :: v205 
                    let v211 : char list = ''' :: v207 
                    let v215 : char list = '"' :: v211 
                    let v219 : (char list -> (char [])) = List.toArray
                    let v220 : (char []) = v219 v215
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v220} / s: %A{struct (v16, 1, 1)}"
                    US18_1(v224)
                else
                    let v228 : char = v10.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method112(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v233 : (string -> int32) = String.length
                        let v234 : int32 = v233 v10
                        let v242 : int32 = 1 |> int32 
                        let v255 : int32 = v234 |> int32 
                        let v263 : int32 = v255 - 1
                        let v265 : string = v10.[int v242..int v263]
                        let v270 : (char -> string) = _.ToString()
                        let v271 : string = v270 v228
                        let v274 : int64 = System.Convert.ToInt64 v271.Length
                        let v275 : int64 = 0L
                        let v276 : UH0 = method105(v274, v271, v275)
                        let v277 : int32 = 1
                        let v278 : int32 = 1
                        let struct (v279 : System.Text.StringBuilder, v280 : int32, v281 : int32) = method106(v276, v16, v277, v278)
                        US18_0(v228, v265, v279, v280, v281)
                    else
                        let v283 : char list = []
                        let v285 : char list = ' ' :: v283 
                        let v289 : char list = ''' :: v285 
                        let v293 : char list = '"' :: v289 
                        let v297 : (char list -> (char [])) = List.toArray
                        let v298 : (char []) = v297 v293
                        let v302 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v298} / s: %A{struct (v16, 1, 1)}"
                        US18_1(v302)
            let v319 : US18 =
                match v307 with
                | US18_1(v316) -> (* Error *)
                    US18_1(v316)
                | US18_0(v308, v309, v310, v311, v312) -> (* Ok *)
                    let v313 : bool = '\\' = v308
                    let v314 : char =
                        if v313 then
                            '/'
                        else
                            v308
                    US18_0(v314, v309, v310, v311, v312)
            let v339 : US19 =
                match v319 with
                | US18_1(v336) -> (* Error *)
                    US19_1(v336)
                | US18_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v326 : (char -> string) = _.ToString()
                    let v327 : string = v326 v320
                    let struct (v330 : string, v331 : string, v332 : System.Text.StringBuilder, v333 : int32, v334 : int32) = method113(v327, v321, v322, v323, v324)
                    US19_0(v330, v331, v332, v333, v334)
            match v339 with
            | US19_1(v345) -> (* Error *)
                let v346 : int32 = v10.Length
                let v347 : bool = v346 = 0
                let v354 : US21 =
                    if v347 then
                        US21_0(v10, v16, 1, 1)
                    else
                        let v350 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US21_1(v350)
                let v363 : US19 =
                    match v354 with
                    | US21_1(v360) -> (* Error *)
                        US19_1(v360)
                    | US21_0(v355, v356, v357, v358) -> (* Ok *)
                        US19_0(v9, v355, v356, v357, v358)
                match v363 with
                | US19_1(v409) -> (* Error *)
                    US19_1(v409)
                | US19_0(v364, v365, v366, v367, v368) -> (* Ok *)
                    let v369 : int32 = 0
                    let v370 : int32 = method114(v365, v369)
                    let v372 : (string -> int32) = String.length
                    let v373 : int32 = v372 v365
                    let v381 : int32 = v370 |> int32 
                    let v394 : int32 = v373 |> int32 
                    let v402 : int32 = v394 - 1
                    let v404 : string = v365.[int v381..int v402]
                    US19_0(v364, v404, v366, v367, v368)
            | US19_0(v340, v341, v342, v343, v344) -> (* Ok *)
                v339
        | US19_0(v198, v199, v200, v201, v202) -> (* Ok *)
            v197
    let v671 : US22 =
        match v416 with
        | US19_1(v668) -> (* Error *)
            US22_1(v668)
        | US19_0(v417, v418, v419, v420, v421) -> (* Ok *)
            let v422 : bool = "" = v418
            let v542 : US18 =
                if v422 then
                    let v424 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v419, v420, v421)}"
                    US18_1(v424)
                else
                    let v428 : char = v418.[int 0]
                    let v429 : bool = v428 = ' '
                    if v429 then
                        let v431 : (string -> int32) = String.length
                        let v432 : int32 = v431 v418
                        let v440 : int32 = 1 |> int32 
                        let v453 : int32 = v432 |> int32 
                        let v461 : int32 = v453 - 1
                        let v463 : string = v418.[int v440..int v461]
                        let v468 : (char -> string) = _.ToString()
                        let v469 : string = v468 v428
                        let v472 : int64 = System.Convert.ToInt64 v469.Length
                        let v473 : int64 = 0L
                        let v474 : UH0 = method105(v472, v469, v473)
                        let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method106(v474, v419, v420, v421)
                        US18_0(v428, v463, v475, v476, v477)
                    else
                        let v480 : string = "\n"
                        let v481 : int32 = v418.IndexOf v480 
                        let v484 : int32 = v481 - 1
                        let v485 : bool = -2 = v484
                        let v493 : int32 =
                            if v485 then
                                let v487 : (string -> int32) = String.length
                                let v488 : int32 = v487 v418
                                let v491 : int32 = v488 + 1
                                v491
                            else
                                let v492 : int32 = v484 + 1
                                v492
                        let v499 : int32 = 0 |> int32 
                        let v512 : int32 = v493 |> int32 
                        let v520 : int32 = v512 - 1
                        let v522 : string = v418.[int v499..int v520]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v420} / col: {v421}
{v419}{v522}"
                        let v530 : int32 = v421 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method107(v530, v531)
                        let v533 : string = v532 v9
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v537 : string = $"{v527}
{v535}
"
                        US18_1(v537)
            let v554 : US23 =
                match v542 with
                | US18_1(v550) -> (* Error *)
                    let v551 : US20 = US20_1
                    US23_0(v551, v418, v419, v420, v421)
                | US18_0(v543, v544, v545, v546, v547) -> (* Ok *)
                    let v548 : US20 = US20_0(v543)
                    US23_0(v548, v544, v545, v546, v547)
            let v645 : US19 =
                match v554 with
                | US23_1(v642) -> (* Error *)
                    US19_1(v642)
                | US23_0(v555, v556, v557, v558, v559) -> (* Ok *)
                    let v560 : bool = "" = v556
                    let v621 : US18 =
                        if v560 then
                            let v567 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v557, v558, v559)}"
                            US18_1(v567)
                        else
                            let v571 : char = v556.[int 0]
                            let v573 : (string -> int32) = String.length
                            let v574 : int32 = v573 v556
                            let v582 : int32 = 1 |> int32 
                            let v595 : int32 = v574 |> int32 
                            let v603 : int32 = v595 - 1
                            let v605 : string = v556.[int v582..int v603]
                            let v610 : (char -> string) = _.ToString()
                            let v611 : string = v610 v571
                            let v614 : int64 = System.Convert.ToInt64 v611.Length
                            let v615 : int64 = 0L
                            let v616 : UH0 = method105(v614, v611, v615)
                            let struct (v617 : System.Text.StringBuilder, v618 : int32, v619 : int32) = method106(v616, v557, v558, v559)
                            US18_0(v571, v605, v617, v618, v619)
                    match v621 with
                    | US18_1(v638) -> (* Error *)
                        US19_1(v638)
                    | US18_0(v622, v623, v624, v625, v626) -> (* Ok *)
                        let v628 : (char -> string) = _.ToString()
                        let v629 : string = v628 v622
                        let struct (v632 : string, v633 : string, v634 : System.Text.StringBuilder, v635 : int32, v636 : int32) = method115(v629, v623, v624, v625, v626)
                        US19_0(v632, v633, v634, v635, v636)
            let v657 : US24 =
                match v645 with
                | US19_1(v653) -> (* Error *)
                    let v654 : US5 = US5_1
                    US24_0(v654, v418, v419, v420, v421)
                | US19_0(v646, v647, v648, v649, v650) -> (* Ok *)
                    let v651 : US5 = US5_0(v646)
                    US24_0(v651, v647, v648, v649, v650)
            match v657 with
            | US24_1(v664) -> (* Error *)
                US22_1(v664)
            | US24_0(v658, v659, v660, v661, v662) -> (* Ok *)
                US22_0(v417, v658, v659, v660, v661, v662)
    match v671 with
    | US22_1(v679) -> (* Error *)
        US17_1(v679)
    | US22_0(v672, v673, v674, v675, v676, v677) -> (* Ok *)
        US17_0(v672, v673)
and method118 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method118(v0, v25)
and method119 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method105(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method106(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    match v114 with
    | US18_1(v131) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v121 : (char -> string) = _.ToString()
        let v122 : string = v121 v115
        let v125 : string = v0 + v122 
        method119(v125, v116, v117, v118, v119)
and method121 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method121(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method105(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method107(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method105(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method106(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '\\'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method105(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method107(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method105(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method106(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '`'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and method122 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method122(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method123 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method123(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method120 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    let v135 : US19 =
        match v121 with
        | US19_1(v127) -> (* Error *)
            let v128 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
            let v129 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
            let v130 : UH3 = UH3_0
            let v131 : UH3 = UH3_1(v129, v130)
            let v132 : UH3 = UH3_1(v128, v131)
            method122(v1, v2, v3, v4, v132)
        | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
            v121
    match v135 with
    | US19_1(v143) -> (* Error *)
        let v144 : UH2 = UH2_0
        let v145 : UH2 = method123(v0, v144)
        US26_0(v145, v1, v2, v3, v4)
    | US19_0(v136, v137, v138, v139, v140) -> (* Ok *)
        let v141 : UH2 = UH2_1(v136, v0)
        method120(v141, v137, v138, v139, v140)
and method124 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method124(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method125 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    match v121 with
    | US19_1(v129) -> (* Error *)
        let v130 : UH2 = UH2_0
        let v131 : UH2 = method123(v0, v130)
        US26_0(v131, v1, v2, v3, v4)
    | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : UH2 = UH2_1(v122, v0)
        method125(v127, v123, v124, v125, v126)
and method117 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method105(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method106(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    let v134 : US19 =
        match v114 with
        | US18_1(v131) -> (* Error *)
            US19_1(v131)
        | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v115
            let struct (v125 : string, v126 : string, v127 : System.Text.StringBuilder, v128 : int32, v129 : int32) = method119(v122, v116, v117, v118, v119)
            US19_0(v125, v126, v127, v128, v129)
    let v522 : US19 =
        match v134 with
        | US19_1(v140) -> (* Error *)
            let v261 : US18 =
                if v5 then
                    let v142 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v142)
                else
                    let v146 : char = v1.[int 0]
                    let v147 : bool = v146 = '"'
                    if v147 then
                        let v149 : (string -> int32) = String.length
                        let v150 : int32 = v149 v1
                        let v158 : int32 = 1 |> int32 
                        let v171 : int32 = v150 |> int32 
                        let v179 : int32 = v171 - 1
                        let v181 : string = v1.[int v158..int v179]
                        let v186 : (char -> string) = _.ToString()
                        let v187 : string = v186 v146
                        let v190 : int64 = System.Convert.ToInt64 v187.Length
                        let v191 : int64 = 0L
                        let v192 : UH0 = method105(v190, v187, v191)
                        let struct (v193 : System.Text.StringBuilder, v194 : int32, v195 : int32) = method106(v192, v2, v3, v4)
                        US18_0(v146, v181, v193, v194, v195)
                    else
                        let v198 : string = "\n"
                        let v199 : int32 = v1.IndexOf v198 
                        let v202 : int32 = v199 - 1
                        let v203 : bool = -2 = v202
                        let v211 : int32 =
                            if v203 then
                                let v205 : (string -> int32) = String.length
                                let v206 : int32 = v205 v1
                                let v209 : int32 = v206 + 1
                                v209
                            else
                                let v210 : int32 = v202 + 1
                                v210
                        let v217 : int32 = 0 |> int32 
                        let v230 : int32 = v211 |> int32 
                        let v238 : int32 = v230 - 1
                        let v240 : string = v1.[int v217..int v238]
                        let v245 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v240}"
                        let v248 : int32 = v4 - 1
                        let v249 : int32 = 0
                        let v250 : (string -> string) = method107(v248, v249)
                        let v251 : string = ""
                        let v252 : string = v250 v251
                        let v253 : string = "^"
                        let v254 : string = v252 + v253 
                        let v256 : string = $"{v245}
{v254}
"
                        US18_1(v256)
            let v451 : US19 =
                match v261 with
                | US18_1(v448) -> (* Error *)
                    US19_1(v448)
                | US18_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US26 = method120(v267, v263, v264, v265, v266)
                    let v301 : US19 =
                        match v268 with
                        | US26_1(v298) -> (* Error *)
                            US19_1(v298)
                        | US26_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method124(v269, v274)
                            let v280 : unit = ()
                            let _let'_v280 =
                                seq {
                                    yield! v275 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v283 : string seq = _let'_v280 
                            let v291 : (string -> (string seq -> string)) = String.concat
                            let v292 : string = ""
                            let v293 : (string seq -> string) = v291 v292
                            let v294 : string = v293 v283
                            US19_0(v294, v270, v271, v272, v273)
                    match v301 with
                    | US19_1(v443) -> (* Error *)
                        let v444 : string = "parsing.between / expected content"
                        US19_1(v444)
                    | US19_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v428 : US18 =
                            if v307 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v304, v305, v306)}"
                                US18_1(v309)
                            else
                                let v313 : char = v303.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v316 : (string -> int32) = String.length
                                    let v317 : int32 = v316 v303
                                    let v325 : int32 = 1 |> int32 
                                    let v338 : int32 = v317 |> int32 
                                    let v346 : int32 = v338 - 1
                                    let v348 : string = v303.[int v325..int v346]
                                    let v353 : (char -> string) = _.ToString()
                                    let v354 : string = v353 v313
                                    let v357 : int64 = System.Convert.ToInt64 v354.Length
                                    let v358 : int64 = 0L
                                    let v359 : UH0 = method105(v357, v354, v358)
                                    let struct (v360 : System.Text.StringBuilder, v361 : int32, v362 : int32) = method106(v359, v304, v305, v306)
                                    US18_0(v313, v348, v360, v361, v362)
                                else
                                    let v365 : string = "\n"
                                    let v366 : int32 = v303.IndexOf v365 
                                    let v369 : int32 = v366 - 1
                                    let v370 : bool = -2 = v369
                                    let v378 : int32 =
                                        if v370 then
                                            let v372 : (string -> int32) = String.length
                                            let v373 : int32 = v372 v303
                                            let v376 : int32 = v373 + 1
                                            v376
                                        else
                                            let v377 : int32 = v369 + 1
                                            v377
                                    let v384 : int32 = 0 |> int32 
                                    let v397 : int32 = v378 |> int32 
                                    let v405 : int32 = v397 - 1
                                    let v407 : string = v303.[int v384..int v405]
                                    let v412 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v407}"
                                    let v415 : int32 = v306 - 1
                                    let v416 : int32 = 0
                                    let v417 : (string -> string) = method107(v415, v416)
                                    let v418 : string = ""
                                    let v419 : string = v417 v418
                                    let v420 : string = "^"
                                    let v421 : string = v419 + v420 
                                    let v423 : string = $"{v412}
{v421}
"
                                    US18_1(v423)
                        match v428 with
                        | US18_1(v435) -> (* Error *)
                            let v437 : string = $"parsing.between / expected closing delimiter / e: %A{v435} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US19_1(v437)
                        | US18_0(v429, v430, v431, v432, v433) -> (* Ok *)
                            US19_0(v302, v430, v431, v432, v433)
            match v451 with
            | US19_1(v457) -> (* Error *)
                let v458 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
                let v460 : UH3 = UH3_0
                let v461 : UH3 = UH3_1(v459, v460)
                let v462 : UH3 = UH3_1(v458, v461)
                let v463 : US19 = method122(v1, v2, v3, v4, v462)
                let v474 : US19 =
                    match v463 with
                    | US19_1(v471) -> (* Error *)
                        US19_1(v471)
                    | US19_0(v464, v465, v466, v467, v468) -> (* Ok *)
                        let v469 : string = ""
                        US19_0(v469, v465, v466, v467, v468)
                let v485 : US26 =
                    match v474 with
                    | US19_1(v482) -> (* Error *)
                        US26_1(v482)
                    | US19_0(v475, v476, v477, v478, v479) -> (* Ok *)
                        let v480 : UH2 = UH2_0
                        method125(v480, v476, v477, v478, v479)
                match v485 with
                | US26_1(v515) -> (* Error *)
                    US19_1(v515)
                | US26_0(v486, v487, v488, v489, v490) -> (* Ok *)
                    let v491 : string list = []
                    let v492 : string list = method124(v486, v491)
                    let v497 : unit = ()
                    let _let'_v497 =
                        seq {
                            yield! v492 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v500 : string seq = _let'_v497 
                    let v508 : (string -> (string seq -> string)) = String.concat
                    let v509 : string = ""
                    let v510 : (string seq -> string) = v508 v509
                    let v511 : string = v510 v500
                    US19_0(v511, v487, v488, v489, v490)
            | US19_0(v452, v453, v454, v455, v456) -> (* Ok *)
                v451
        | US19_0(v135, v136, v137, v138, v139) -> (* Ok *)
            v134
    match v522 with
    | US19_1(v585) -> (* Error *)
        let v586 : UH2 = UH2_0
        let v587 : UH2 = method123(v0, v586)
        US26_0(v587, v1, v2, v3, v4)
    | US19_0(v523, v524, v525, v526, v527) -> (* Ok *)
        let v528 : int32 = 0
        let v529 : int32 = method114(v524, v528)
        let v530 : bool = 0 = v529
        let v571 : US21 =
            if v530 then
                let v531 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v531)
            else
                let v534 : (string -> int32) = String.length
                let v535 : int32 = v534 v524
                let v543 : int32 = v529 |> int32 
                let v556 : int32 = v535 |> int32 
                let v564 : int32 = v556 - 1
                let v566 : string = v524.[int v543..int v564]
                US21_0(v566, v525, v526, v527)
        match v571 with
        | US21_1(v578) -> (* Error *)
            let v579 : UH2 = UH2_0
            let v580 : UH2 = UH2_1(v523, v579)
            let v581 : UH2 = method123(v0, v580)
            US26_0(v581, v524, v525, v526, v527)
        | US21_0(v572, v573, v574, v575) -> (* Ok *)
            let v576 : UH2 = UH2_1(v523, v0)
            method117(v576, v572, v573, v574, v575)
and method116 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US26 = method117(v19, v10, v16, v20, v21)
    match v22 with
    | US26_1(v36) -> (* Error *)
        US25_1(v36)
    | US26_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method124(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US25_0(v32)
and method127 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "file_name"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "arguments"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v1}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v10, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = $"{v55}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v10, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v104 : string = "options"
    let v105 : string = $"{v104}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v35}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v13}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v10, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v133 : string = "command"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v10, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = $"{v35}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v10, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v152 : string = $"{v2}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v10, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v161 : string = $"{v55}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v10, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v171 : string = "cancellation_token"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v10, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v35}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v10, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v193 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v193 = v207 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v193 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v193 = v215 
    #endif
#else
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v193 = v219 
    #endif
    let v222 : string = _run_target_args'_v193 
    let v229 : string = $"{v222}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v238 : string = $"{v55}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v10, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v248 : string = "environment_variables"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"{v35}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v10, v258)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v267 : string = $"%A{v4}"
    let v271 : string = $"{v267}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = $"{v55}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v10, v280)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v290 : string = "on_line"
    let v291 : string = $"{v290}"
    let v294 : unit = ()
    let v295 : (unit -> unit) = closure7(v10, v291)
    let v296 : unit = (fun () -> v295 (); v294) ()
    let v300 : string = $"{v35}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    (* run_target_args'
    let v312 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v313 : string = "format!(\"{:#?}\", $0)"
    let v314 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v313 
    let v315 : string = "fable_library_rust::String_::fromString($0)"
    let v316 : string = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let _run_target_args'_v312 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v312 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v312 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : string = $"%A{v5}"
    let _run_target_args'_v312 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v312 = v330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v312 = v334 
    #endif
#else
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v312 = v338 
    #endif
    let v341 : string = _run_target_args'_v312 
    let v348 : string = $"{v341}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v10, v348)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v357 : string = $"{v55}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v367 : string = "stdin"
    let v368 : string = $"{v367}"
    let v371 : unit = ()
    let v372 : (unit -> unit) = closure7(v10, v368)
    let v373 : unit = (fun () -> v372 (); v371) ()
    let v377 : string = $"{v35}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v10, v377)
    let v382 : unit = (fun () -> v381 (); v380) ()
    (* run_target_args'
    let v389 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v390 : string = "format!(\"{:#?}\", $0)"
    let v391 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v390 
    let v392 : string = "fable_library_rust::String_::fromString($0)"
    let v393 : string = Fable.Core.RustInterop.emitRustExpr v391 v392 
    let _run_target_args'_v389 = v393 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v389 = v397 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v389 = v401 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v403 : string = $"%A{v6}"
    let _run_target_args'_v389 = v403 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v389 = v407 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v389 = v411 
    #endif
#else
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v389 = v415 
    #endif
    let v418 : string = _run_target_args'_v389 
    let v425 : string = $"{v418}"
    let v428 : unit = ()
    let v429 : (unit -> unit) = closure7(v10, v425)
    let v430 : unit = (fun () -> v429 (); v428) ()
    let v434 : string = $"{v55}"
    let v437 : unit = ()
    let v438 : (unit -> unit) = closure7(v10, v434)
    let v439 : unit = (fun () -> v438 (); v437) ()
    let v444 : string = "trace"
    let v445 : string = $"{v444}"
    let v448 : unit = ()
    let v449 : (unit -> unit) = closure7(v10, v445)
    let v450 : unit = (fun () -> v449 (); v448) ()
    let v454 : string = $"{v35}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v464 : string =
        if v7 then
            let v462 : string = "true"
            v462
        else
            let v463 : string = "false"
            v463
    let v466 : string = $"{v464}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v475 : string = $"{v55}"
    let v478 : unit = ()
    let v479 : (unit -> unit) = closure7(v10, v475)
    let v480 : unit = (fun () -> v479 (); v478) ()
    let v485 : string = "working_directory"
    let v486 : string = $"{v485}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    let v495 : string = $"{v35}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v10, v495)
    let v500 : unit = (fun () -> v499 (); v498) ()
    (* run_target_args'
    let v507 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v508 : string = "format!(\"{:#?}\", $0)"
    let v509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v508 
    let v510 : string = "fable_library_rust::String_::fromString($0)"
    let v511 : string = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let _run_target_args'_v507 = v511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v507 = v515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v507 = v519 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v521 : string = $"%A{v8}"
    let _run_target_args'_v507 = v521 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v507 = v525 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v507 = v529 
    #endif
#else
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v507 = v533 
    #endif
    let v536 : string = _run_target_args'_v507 
    let v543 : string = $"{v536}"
    let v546 : unit = ()
    let v547 : (unit -> unit) = closure7(v10, v543)
    let v548 : unit = (fun () -> v547 (); v546) ()
    let v553 : string = " }"
    let v554 : string = $"{v553}"
    let v557 : unit = ()
    let v558 : (unit -> unit) = closure7(v10, v554)
    let v559 : unit = (fun () -> v558 (); v557) ()
    let v563 : string = $"{v553}"
    let v566 : unit = ()
    let v567 : (unit -> unit) = closure7(v10, v563)
    let v568 : unit = (fun () -> v567 (); v566) ()
    let v571 : string = v10.l0
    v571
and method126 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method127(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v55 : string = $"%A{v8}"
        let v58 : string = method126(v34, v35, v36, v37, v38, v39, v52, v53, v7, v55, v0, v1, v2, v3, v4, v5, v6)
        method19(v58)
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method128 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method129 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure42()
and closure43 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method130 () : (std_string_String -> US27) =
    closure43()
and method132 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "error"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v2, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v2, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v2.l0
    v95
and method131 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / child error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure44 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method131(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method133 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method134 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method135 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method136 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method137 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method138 () : (std_string_String -> US29) =
    closure48()
and closure49 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method139 () : (std_string_String -> US29) =
    closure49()
and method141 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "trace'"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v39 : string =
        if v0 then
            let v37 : string = "true"
            v37
        else
            let v38 : string = "false"
            v38
    let v41 : string = $"{v39}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v3, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v3, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "e"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v3, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v28}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v3, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    (* run_target_args'
    let v84 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v85 : string = "format!(\"{:#?}\", $0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v84 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "format!(\"{:#?}\", $0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v89 
    let v91 : string = "fable_library_rust::String_::fromString($0)"
    let v92 : string = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let _run_target_args'_v84 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "format!(\"{:#?}\", $0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v93 
    let v95 : string = "fable_library_rust::String_::fromString($0)"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _run_target_args'_v84 = v96 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = $"%A{v1}"
    let _run_target_args'_v84 = v98 
    #endif
#if FABLE_COMPILER_PYTHON
    let v102 : string = $"%A{v1}"
    let _run_target_args'_v84 = v102 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v106 : string = $"%A{v1}"
    let _run_target_args'_v84 = v106 
    #endif
#else
    let v110 : string = $"%A{v1}"
    let _run_target_args'_v84 = v110 
    #endif
    let v113 : string = _run_target_args'_v84 
    let v120 : string = $"{v113}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v3, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v130 : string = " }"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v3, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v139 : string = v3.l0
    v139
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method141(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.stdio_line"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method140(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method143 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method142 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method143()
    let v10 : int64 = v0.l0
    let v12 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v12)
and closure51 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method144 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method145 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method146 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure53()
and method147 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method148 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure54()
and method149 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method150 () : (std_process_Output -> US32) =
    closure55()
and closure56 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method151 () : (std_string_String -> US32) =
    closure56()
and method152 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / output error"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure57 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method152(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure58 () (v0 : int32) : US33 =
    US33_0(v0)
and method153 () : (int32 -> US33) =
    closure58()
and method155 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "std_trace_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method154 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method155(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.execute_with_options / result"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method85()
        let v47 : int32 = v1.Length
        let v48 : string = method154(v27, v28, v29, v30, v31, v32, v45, v46, v0, v47)
        method19(v48)
and method159 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "file_name"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "arguments"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"%A{v1}"
    let v89 : string = $"{v85}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = $"{v55}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v10, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v108 : string = "options"
    let v109 : string = $"{v108}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v10, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v118 : string = $"{v35}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v10, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v127 : string = $"{v13}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v137 : string = "command"
    let v138 : string = $"{v137}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v10, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v147 : string = $"{v35}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v10, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v156 : string = $"{v2}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v10, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v165 : string = $"{v55}"
    let v168 : unit = ()
    let v169 : (unit -> unit) = closure7(v10, v165)
    let v170 : unit = (fun () -> v169 (); v168) ()
    let v175 : string = "cancellation_token"
    let v176 : string = $"{v175}"
    let v179 : unit = ()
    let v180 : (unit -> unit) = closure7(v10, v176)
    let v181 : unit = (fun () -> v180 (); v179) ()
    let v185 : string = $"{v35}"
    let v188 : unit = ()
    let v189 : (unit -> unit) = closure7(v10, v185)
    let v190 : unit = (fun () -> v189 (); v188) ()
    (* run_target_args'
    let v197 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v197 = v201 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v197 = v205 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v206 : string = "format!(\"{:#?}\", $0)"
    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v206 
    let v208 : string = "fable_library_rust::String_::fromString($0)"
    let v209 : string = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let _run_target_args'_v197 = v209 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v197 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v197 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v197 = v219 
    #endif
#else
    let v223 : string = $"%A{v3}"
    let _run_target_args'_v197 = v223 
    #endif
    let v226 : string = _run_target_args'_v197 
    let v233 : string = $"{v226}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v10, v233)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v242 : string = $"{v55}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v10, v242)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v252 : string = "environment_variables"
    let v253 : string = $"{v252}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v10, v253)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v262 : string = $"{v35}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"%A{v4}"
    let v275 : string = $"{v271}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v10, v275)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v284 : string = $"{v55}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v10, v284)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v294 : string = "on_line"
    let v295 : string = $"{v294}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v10, v295)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v304 : string = $"{v35}"
    let v307 : unit = ()
    let v308 : (unit -> unit) = closure7(v10, v304)
    let v309 : unit = (fun () -> v308 (); v307) ()
    (* run_target_args'
    let v316 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v316 = v320 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v316 = v324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v325 : string = "format!(\"{:#?}\", $0)"
    let v326 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v325 
    let v327 : string = "fable_library_rust::String_::fromString($0)"
    let v328 : string = Fable.Core.RustInterop.emitRustExpr v326 v327 
    let _run_target_args'_v316 = v328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v316 = v330 
    #endif
#if FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v316 = v334 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v316 = v338 
    #endif
#else
    let v342 : string = $"%A{v5}"
    let _run_target_args'_v316 = v342 
    #endif
    let v345 : string = _run_target_args'_v316 
    let v352 : string = $"{v345}"
    let v355 : unit = ()
    let v356 : (unit -> unit) = closure7(v10, v352)
    let v357 : unit = (fun () -> v356 (); v355) ()
    let v361 : string = $"{v55}"
    let v364 : unit = ()
    let v365 : (unit -> unit) = closure7(v10, v361)
    let v366 : unit = (fun () -> v365 (); v364) ()
    let v371 : string = "stdin"
    let v372 : string = $"{v371}"
    let v375 : unit = ()
    let v376 : (unit -> unit) = closure7(v10, v372)
    let v377 : unit = (fun () -> v376 (); v375) ()
    let v381 : string = $"{v35}"
    let v384 : unit = ()
    let v385 : (unit -> unit) = closure7(v10, v381)
    let v386 : unit = (fun () -> v385 (); v384) ()
    (* run_target_args'
    let v393 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v393 = v397 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v393 = v401 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v402 : string = "format!(\"{:#?}\", $0)"
    let v403 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v402 
    let v404 : string = "fable_library_rust::String_::fromString($0)"
    let v405 : string = Fable.Core.RustInterop.emitRustExpr v403 v404 
    let _run_target_args'_v393 = v405 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v393 = v407 
    #endif
#if FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v393 = v411 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v393 = v415 
    #endif
#else
    let v419 : string = $"%A{v6}"
    let _run_target_args'_v393 = v419 
    #endif
    let v422 : string = _run_target_args'_v393 
    let v429 : string = $"{v422}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v10, v429)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v438 : string = $"{v55}"
    let v441 : unit = ()
    let v442 : (unit -> unit) = closure7(v10, v438)
    let v443 : unit = (fun () -> v442 (); v441) ()
    let v448 : string = "trace"
    let v449 : string = $"{v448}"
    let v452 : unit = ()
    let v453 : (unit -> unit) = closure7(v10, v449)
    let v454 : unit = (fun () -> v453 (); v452) ()
    let v458 : string = $"{v35}"
    let v461 : unit = ()
    let v462 : (unit -> unit) = closure7(v10, v458)
    let v463 : unit = (fun () -> v462 (); v461) ()
    let v468 : string =
        if v7 then
            let v466 : string = "true"
            v466
        else
            let v467 : string = "false"
            v467
    let v470 : string = $"{v468}"
    let v473 : unit = ()
    let v474 : (unit -> unit) = closure7(v10, v470)
    let v475 : unit = (fun () -> v474 (); v473) ()
    let v479 : string = $"{v55}"
    let v482 : unit = ()
    let v483 : (unit -> unit) = closure7(v10, v479)
    let v484 : unit = (fun () -> v483 (); v482) ()
    let v489 : string = "working_directory"
    let v490 : string = $"{v489}"
    let v493 : unit = ()
    let v494 : (unit -> unit) = closure7(v10, v490)
    let v495 : unit = (fun () -> v494 (); v493) ()
    let v499 : string = $"{v35}"
    let v502 : unit = ()
    let v503 : (unit -> unit) = closure7(v10, v499)
    let v504 : unit = (fun () -> v503 (); v502) ()
    (* run_target_args'
    let v511 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v511 = v515 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v511 = v519 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v520 : string = "format!(\"{:#?}\", $0)"
    let v521 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v520 
    let v522 : string = "fable_library_rust::String_::fromString($0)"
    let v523 : string = Fable.Core.RustInterop.emitRustExpr v521 v522 
    let _run_target_args'_v511 = v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v511 = v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v511 = v529 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v511 = v533 
    #endif
#else
    let v537 : string = $"%A{v8}"
    let _run_target_args'_v511 = v537 
    #endif
    let v540 : string = _run_target_args'_v511 
    let v547 : string = $"{v540}"
    let v550 : unit = ()
    let v551 : (unit -> unit) = closure7(v10, v547)
    let v552 : unit = (fun () -> v551 (); v550) ()
    let v557 : string = " }"
    let v558 : string = $"{v557}"
    let v561 : unit = ()
    let v562 : (unit -> unit) = closure7(v10, v558)
    let v563 : unit = (fun () -> v562 (); v561) ()
    let v567 : string = $"{v557}"
    let v570 : unit = ()
    let v571 : (unit -> unit) = closure7(v10, v567)
    let v572 : unit = (fun () -> v571 (); v570) ()
    let v575 : string = v10.l0
    v575
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method159(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : string = method158(v34, v35, v36, v37, v38, v39, v52, v53, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v54)
and method160 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method163 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method164 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure62()
and method165 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and method162 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v32 : string = method163(v10)
            let v34 : string = null |> unbox<string>
            let v37 : bool = v32 = v34
            let v38 : bool = v37 <> true
            if v38 then
                let v41 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v42 : US34 option = v3 |> Option.map v41 
                let v56 : US34 = US34_1
                let v57 : US34 = v42 |> Option.defaultValue v56 
                match v57 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v61) -> (* Some *)
                    let v62 : int32 = method165(v7)
                    let v63 : Async<unit> = v61 struct (v62, v32, v9)
                    do! v63 
                    ()
                let v66 : string =
                    if v9 then
                        let v64 : string = $"! {v32}"
                        v64
                    else
                        let v65 : string = $"> {v32}"
                        v65
                if v5 then
                    let v67 : unit = ()
                    let v68 : (unit -> unit) = closure63(v66)
                    let v69 : unit = (fun () -> v68 (); v67) ()
                    ()
                else
                    let v119 : unit = ()
                    let v120 : (unit -> unit) = closure10(v66)
                    let v121 : unit = (fun () -> v120 (); v119) ()
                    ()
                let v125 : string =
                    if v9 then
                        let v123 : string = "\u001b[7;4m"
                        v123
                    else
                        let v124 : string = ""
                        v124
                let v128 : string =
                    if v9 then
                        let v126 : string = "\u001b[0m"
                        v126
                    else
                        let v127 : string = ""
                        v127
                let v129 : string = $"{v125}{v32}{v128}"
                (* run_target_args'
                let v130 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v131 : (string -> unit) = v8.Push
                v131 v129
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v832 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v832 
    #endif
#if FABLE_COMPILER_PYTHON
    let v834 : unit = ()
    let _let'_v834 =
        async {
            let v837 : string = method163(v10)
            let v839 : string = null |> unbox<string>
            let v842 : bool = v837 = v839
            let v843 : bool = v842 <> true
            if v843 then
                let v846 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v847 : US34 option = v3 |> Option.map v846 
                let v861 : US34 = US34_1
                let v862 : US34 = v847 |> Option.defaultValue v861 
                match v862 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v866) -> (* Some *)
                    let v867 : int32 = method165(v7)
                    let v868 : Async<unit> = v866 struct (v867, v837, v9)
                    do! v868 
                    ()
                let v871 : string =
                    if v9 then
                        let v869 : string = $"! {v837}"
                        v869
                    else
                        let v870 : string = $"> {v837}"
                        v870
                if v5 then
                    let v872 : unit = ()
                    let v873 : (unit -> unit) = closure63(v871)
                    let v874 : unit = (fun () -> v873 (); v872) ()
                    ()
                else
                    let v924 : unit = ()
                    let v925 : (unit -> unit) = closure10(v871)
                    let v926 : unit = (fun () -> v925 (); v924) ()
                    ()
                let v930 : string =
                    if v9 then
                        let v928 : string = "\u001b[7;4m"
                        v928
                    else
                        let v929 : string = ""
                        v929
                let v933 : string =
                    if v9 then
                        let v931 : string = "\u001b[0m"
                        v931
                    else
                        let v932 : string = ""
                        v932
                let v934 : string = $"{v930}{v837}{v933}"
                (* run_target_args'
                let v935 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v936 : (string -> unit) = v8.Push
                v936 v934
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1637 : Async<unit> = _let'_v834 
    let _run_target_args'_v15 = v1637 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1639 : unit = ()
    let _let'_v1639 =
        async {
            let v1642 : string = method163(v10)
            let v1644 : string = null |> unbox<string>
            let v1647 : bool = v1642 = v1644
            let v1648 : bool = v1647 <> true
            if v1648 then
                let v1651 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v1652 : US34 option = v3 |> Option.map v1651 
                let v1666 : US34 = US34_1
                let v1667 : US34 = v1652 |> Option.defaultValue v1666 
                match v1667 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v1671) -> (* Some *)
                    let v1672 : int32 = method165(v7)
                    let v1673 : Async<unit> = v1671 struct (v1672, v1642, v9)
                    do! v1673 
                    ()
                let v1676 : string =
                    if v9 then
                        let v1674 : string = $"! {v1642}"
                        v1674
                    else
                        let v1675 : string = $"> {v1642}"
                        v1675
                if v5 then
                    let v1677 : unit = ()
                    let v1678 : (unit -> unit) = closure63(v1676)
                    let v1679 : unit = (fun () -> v1678 (); v1677) ()
                    ()
                else
                    let v1729 : unit = ()
                    let v1730 : (unit -> unit) = closure10(v1676)
                    let v1731 : unit = (fun () -> v1730 (); v1729) ()
                    ()
                let v1735 : string =
                    if v9 then
                        let v1733 : string = "\u001b[7;4m"
                        v1733
                    else
                        let v1734 : string = ""
                        v1734
                let v1738 : string =
                    if v9 then
                        let v1736 : string = "\u001b[0m"
                        v1736
                    else
                        let v1737 : string = ""
                        v1737
                let v1739 : string = $"{v1735}{v1642}{v1738}"
                (* run_target_args'
                let v1740 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v1741 : (string -> unit) = v8.Push
                v1741 v1739
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2442 : Async<unit> = _let'_v1639 
    let _run_target_args'_v15 = v2442 
    #endif
#else
    let v2444 : unit = ()
    let _let'_v2444 =
        async {
            let v2447 : string = method163(v10)
            let v2449 : string = null |> unbox<string>
            let v2452 : bool = v2447 = v2449
            let v2453 : bool = v2452 <> true
            if v2453 then
                let v2456 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v2457 : US34 option = v3 |> Option.map v2456 
                let v2471 : US34 = US34_1
                let v2472 : US34 = v2457 |> Option.defaultValue v2471 
                match v2472 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2476) -> (* Some *)
                    let v2477 : int32 = method165(v7)
                    let v2478 : Async<unit> = v2476 struct (v2477, v2447, v9)
                    do! v2478 
                    ()
                let v2481 : string =
                    if v9 then
                        let v2479 : string = $"! {v2447}"
                        v2479
                    else
                        let v2480 : string = $"> {v2447}"
                        v2480
                if v5 then
                    let v2482 : unit = ()
                    let v2483 : (unit -> unit) = closure63(v2481)
                    let v2484 : unit = (fun () -> v2483 (); v2482) ()
                    ()
                else
                    let v2534 : unit = ()
                    let v2535 : (unit -> unit) = closure10(v2481)
                    let v2536 : unit = (fun () -> v2535 (); v2534) ()
                    ()
                let v2540 : string =
                    if v9 then
                        let v2538 : string = "\u001b[7;4m"
                        v2538
                    else
                        let v2539 : string = ""
                        v2539
                let v2543 : string =
                    if v9 then
                        let v2541 : string = "\u001b[0m"
                        v2541
                    else
                        let v2542 : string = ""
                        v2542
                let v2544 : string = $"{v2540}{v2447}{v2543}"
                (* run_target_args'
                let v2545 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2546 : (string -> unit) = v8.Push
                v2546 v2544
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3247 : Async<unit> = _let'_v2444 
    let _run_target_args'_v15 = v3247 
    #endif
    let v3248 : Async<unit> = _run_target_args'_v15 
    v3248
and method161 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method162(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method161(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method166 () : (System.Threading.CancellationToken -> US35) =
    closure64()
and method167 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v26 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v28 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v28 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v32 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v36 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v44 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v48 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v48 
            #endif
#else
            let v51 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v51 = v51 
            let v52 : System.Threading.CancellationToken = v51 
            let v53 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v54 : (System.Threading.CancellationToken []) = [|v52; v53; v0|]
            let v55 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v56 : System.Threading.CancellationTokenSource = v55 v54
            let v57 : System.Threading.CancellationToken = v56.Token
            return v57 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v342 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : unit = ()
    let _let'_v344 =
        async {
            (* run_target_args'
            let v351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v353 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v353 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v357 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v361 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v361 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v365 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v365 
            #endif
#if FABLE_COMPILER_PYTHON
            let v369 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v373 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v373 
            #endif
#else
            let v376 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v376 = v376 
            let v377 : System.Threading.CancellationToken = v376 
            let v378 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v379 : (System.Threading.CancellationToken []) = [|v377; v378; v0|]
            let v380 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v381 : System.Threading.CancellationTokenSource = v380 v379
            let v382 : System.Threading.CancellationToken = v381.Token
            return v382 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v667 : Async<System.Threading.CancellationToken> = _let'_v344 
    let _run_target_args'_v5 = v667 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v669 : unit = ()
    let _let'_v669 =
        async {
            (* run_target_args'
            let v676 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v678 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v678 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v682 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v682 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v686 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v686 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v690 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v690 
            #endif
#if FABLE_COMPILER_PYTHON
            let v694 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v694 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v698 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v698 
            #endif
#else
            let v701 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v701 = v701 
            let v702 : System.Threading.CancellationToken = v701 
            let v703 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v704 : (System.Threading.CancellationToken []) = [|v702; v703; v0|]
            let v705 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v706 : System.Threading.CancellationTokenSource = v705 v704
            let v707 : System.Threading.CancellationToken = v706.Token
            return v707 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v992 : Async<System.Threading.CancellationToken> = _let'_v669 
    let _run_target_args'_v5 = v992 
    #endif
#else
    let v994 : unit = ()
    let _let'_v994 =
        async {
            (* run_target_args'
            let v1001 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1003 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1007 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1007 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1011 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1011 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1015 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1015 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1019 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1019 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1023 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1023 
            #endif
#else
            let v1026 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1026 = v1026 
            let v1027 : System.Threading.CancellationToken = v1026 
            let v1028 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1029 : (System.Threading.CancellationToken []) = [|v1027; v1028; v0|]
            let v1030 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1031 : System.Threading.CancellationTokenSource = v1030 v1029
            let v1032 : System.Threading.CancellationToken = v1031.Token
            return v1032 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1317 : Async<System.Threading.CancellationToken> = _let'_v994 
    let _run_target_args'_v5 = v1317 
    #endif
    let v1318 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v1318
and method168 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method169 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method168(v0)
    let v2 : bool = v1 = false
    if v2 then
        method169(v0)
and method172 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "ex"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v2, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v2, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v2.l0
    v95
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method172(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method43()
        let v46 : string = method171(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method170 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v28 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v30 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v34 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v38 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v38 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v42 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v42 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v50 
                #endif
#else
                let v53 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v28 = v53 
                #endif
                let v54 : System.Threading.Tasks.Task = _run_target_args'_v28 
                (* run_target_args'
                let v64 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v66 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v70 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v70 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v74 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v74 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v77 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v78 : Async<unit> = v77 v54
                let _run_target_args'_v64 = v78 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v80 : Async<unit> = v79 v54
                let _run_target_args'_v64 = v80 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v81 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v82 : Async<unit> = v81 v54
                let _run_target_args'_v64 = v82 
                #endif
#else
                let v83 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v84 : Async<unit> = v83 v54
                let _run_target_args'_v64 = v84 
                #endif
                let v85 : Async<unit> = _run_target_args'_v64 
                do! v85 
                (* run_target_args'
                let v95 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v97 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v97 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v101 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v101 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v113 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v113 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v117 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v117 
                #endif
#else
                let v120 : int32 = v0.ExitCode
                let _run_target_args'_v95 = v120 
                #endif
                let v121 : int32 = _run_target_args'_v95 
                return v121 
                (* indent
                ()
            indent *)
            with ex ->
                let v230 : exn = ex
                (* run_target_args'
                let v235 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v237 : string = $"%A{v230}"
                let _run_target_args'_v235 = v237 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v241 : string = $"%A{v230}"
                let _run_target_args'_v235 = v241 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v245 : string = $"%A{v230}"
                let _run_target_args'_v235 = v245 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v249 : string = $"%A{v230}"
                let _run_target_args'_v235 = v249 
                #endif
#if FABLE_COMPILER_PYTHON
                let v253 : string = $"%A{v230}"
                let _run_target_args'_v235 = v253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v257 : string = $"%A{v230}"
                let _run_target_args'_v235 = v257 
                #endif
#else
                let v260 : string = $"{v230.GetType ()}: {v230.Message}"
                let _run_target_args'_v235 = v260 
                #endif
                let v261 : string = _run_target_args'_v235 
                (* run_target_args'
                let v267 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v268 : (string -> unit) = v1.Push
                v268 v261
                #endif
                // run_target_args' is_unit
                let v270 : System.Threading.Tasks.TaskCanceledException = v230 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v273 : unit = ()
                let v274 : (unit -> unit) = closure66(v270)
                let v275 : unit = (fun () -> v274 (); v273) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3144 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v3144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3146 : unit = ()
    let _let'_v3146 =
        async {
            try
                (* run_target_args'
                let v3153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3155 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3155 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3159 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3159 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3163 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3167 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3167 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3171 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3171 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3175 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3175 
                #endif
#else
                let v3178 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v3153 = v3178 
                #endif
                let v3179 : System.Threading.Tasks.Task = _run_target_args'_v3153 
                (* run_target_args'
                let v3189 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3191 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3191 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3195 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3199 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3199 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3202 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3203 : Async<unit> = v3202 v3179
                let _run_target_args'_v3189 = v3203 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3204 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3205 : Async<unit> = v3204 v3179
                let _run_target_args'_v3189 = v3205 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3206 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3207 : Async<unit> = v3206 v3179
                let _run_target_args'_v3189 = v3207 
                #endif
#else
                let v3208 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3209 : Async<unit> = v3208 v3179
                let _run_target_args'_v3189 = v3209 
                #endif
                let v3210 : Async<unit> = _run_target_args'_v3189 
                do! v3210 
                (* run_target_args'
                let v3220 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3222 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3222 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3226 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3230 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3230 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3234 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3234 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3238 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3242 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3242 
                #endif
#else
                let v3245 : int32 = v0.ExitCode
                let _run_target_args'_v3220 = v3245 
                #endif
                let v3246 : int32 = _run_target_args'_v3220 
                return v3246 
                (* indent
                ()
            indent *)
            with ex ->
                let v3355 : exn = ex
                (* run_target_args'
                let v3360 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3362 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3362 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3366 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3366 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3370 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3374 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3374 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3378 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3378 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3382 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3382 
                #endif
#else
                let v3385 : string = $"{v3355.GetType ()}: {v3355.Message}"
                let _run_target_args'_v3360 = v3385 
                #endif
                let v3386 : string = _run_target_args'_v3360 
                (* run_target_args'
                let v3392 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v3393 : (string -> unit) = v1.Push
                v3393 v3386
                #endif
                // run_target_args' is_unit
                let v3395 : System.Threading.Tasks.TaskCanceledException = v3355 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v3398 : unit = ()
                let v3399 : (unit -> unit) = closure66(v3395)
                let v3400 : unit = (fun () -> v3399 (); v3398) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6269 : Async<int32> = _let'_v3146 
    let _run_target_args'_v7 = v6269 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6271 : unit = ()
    let _let'_v6271 =
        async {
            try
                (* run_target_args'
                let v6278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6280 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6284 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6284 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6288 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6288 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6292 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6292 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6296 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6296 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6300 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6300 
                #endif
#else
                let v6303 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v6278 = v6303 
                #endif
                let v6304 : System.Threading.Tasks.Task = _run_target_args'_v6278 
                (* run_target_args'
                let v6314 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6316 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6316 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6320 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6320 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6324 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6324 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6327 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6328 : Async<unit> = v6327 v6304
                let _run_target_args'_v6314 = v6328 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6329 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6330 : Async<unit> = v6329 v6304
                let _run_target_args'_v6314 = v6330 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6331 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6332 : Async<unit> = v6331 v6304
                let _run_target_args'_v6314 = v6332 
                #endif
#else
                let v6333 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6334 : Async<unit> = v6333 v6304
                let _run_target_args'_v6314 = v6334 
                #endif
                let v6335 : Async<unit> = _run_target_args'_v6314 
                do! v6335 
                (* run_target_args'
                let v6345 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6347 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6347 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6351 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6351 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6355 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6355 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6359 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6363 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6367 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6367 
                #endif
#else
                let v6370 : int32 = v0.ExitCode
                let _run_target_args'_v6345 = v6370 
                #endif
                let v6371 : int32 = _run_target_args'_v6345 
                return v6371 
                (* indent
                ()
            indent *)
            with ex ->
                let v6480 : exn = ex
                (* run_target_args'
                let v6485 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6487 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6487 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6491 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6491 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6495 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6495 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6499 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6499 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6503 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6503 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6507 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6507 
                #endif
#else
                let v6510 : string = $"{v6480.GetType ()}: {v6480.Message}"
                let _run_target_args'_v6485 = v6510 
                #endif
                let v6511 : string = _run_target_args'_v6485 
                (* run_target_args'
                let v6517 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v6518 : (string -> unit) = v1.Push
                v6518 v6511
                #endif
                // run_target_args' is_unit
                let v6520 : System.Threading.Tasks.TaskCanceledException = v6480 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v6523 : unit = ()
                let v6524 : (unit -> unit) = closure66(v6520)
                let v6525 : unit = (fun () -> v6524 (); v6523) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9394 : Async<int32> = _let'_v6271 
    let _run_target_args'_v7 = v9394 
    #endif
#else
    let v9396 : unit = ()
    let _let'_v9396 =
        async {
            try
                (* run_target_args'
                let v9403 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9405 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9409 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9409 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9413 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9413 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9417 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9417 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9421 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9421 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9425 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9425 
                #endif
#else
                let v9428 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v9403 = v9428 
                #endif
                let v9429 : System.Threading.Tasks.Task = _run_target_args'_v9403 
                (* run_target_args'
                let v9439 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9441 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9441 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9445 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9445 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9449 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9449 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9453 : Async<unit> = v9452 v9429
                let _run_target_args'_v9439 = v9453 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9455 : Async<unit> = v9454 v9429
                let _run_target_args'_v9439 = v9455 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9456 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9457 : Async<unit> = v9456 v9429
                let _run_target_args'_v9439 = v9457 
                #endif
#else
                let v9458 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9459 : Async<unit> = v9458 v9429
                let _run_target_args'_v9439 = v9459 
                #endif
                let v9460 : Async<unit> = _run_target_args'_v9439 
                do! v9460 
                (* run_target_args'
                let v9470 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9472 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9472 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9476 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9476 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9480 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9484 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9488 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9488 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9492 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9492 
                #endif
#else
                let v9495 : int32 = v0.ExitCode
                let _run_target_args'_v9470 = v9495 
                #endif
                let v9496 : int32 = _run_target_args'_v9470 
                return v9496 
                (* indent
                ()
            indent *)
            with ex ->
                let v9605 : exn = ex
                (* run_target_args'
                let v9610 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9612 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9612 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9616 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9616 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9620 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9620 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9624 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9624 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9628 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9628 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9632 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9632 
                #endif
#else
                let v9635 : string = $"{v9605.GetType ()}: {v9605.Message}"
                let _run_target_args'_v9610 = v9635 
                #endif
                let v9636 : string = _run_target_args'_v9610 
                (* run_target_args'
                let v9642 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9643 : (string -> unit) = v1.Push
                v9643 v9636
                #endif
                // run_target_args' is_unit
                let v9645 : System.Threading.Tasks.TaskCanceledException = v9605 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v9648 : unit = ()
                let v9649 : (unit -> unit) = closure66(v9645)
                let v9650 : unit = (fun () -> v9649 (); v9648) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12519 : Async<int32> = _let'_v9396 
    let _run_target_args'_v7 = v12519 
    #endif
    let v12520 : Async<int32> = _run_target_args'_v7 
    v12520
and method174 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "exit_code"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "output_length"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v1}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v10, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = $"{v55}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v10, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v104 : string = "options"
    let v105 : string = $"{v104}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v35}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v13}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v10, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v133 : string = "command"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v10, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = $"{v35}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v10, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v152 : string = $"{v2}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v10, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v161 : string = $"{v55}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v10, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v171 : string = "cancellation_token"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v10, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v35}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v10, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v193 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v193 = v207 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v193 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v193 = v215 
    #endif
#else
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v193 = v219 
    #endif
    let v222 : string = _run_target_args'_v193 
    let v229 : string = $"{v222}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v238 : string = $"{v55}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v10, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v248 : string = "environment_variables"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"{v35}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v10, v258)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v267 : string = $"%A{v4}"
    let v271 : string = $"{v267}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = $"{v55}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v10, v280)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v290 : string = "on_line"
    let v291 : string = $"{v290}"
    let v294 : unit = ()
    let v295 : (unit -> unit) = closure7(v10, v291)
    let v296 : unit = (fun () -> v295 (); v294) ()
    let v300 : string = $"{v35}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    (* run_target_args'
    let v312 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v313 : string = "format!(\"{:#?}\", $0)"
    let v314 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v313 
    let v315 : string = "fable_library_rust::String_::fromString($0)"
    let v316 : string = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let _run_target_args'_v312 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v312 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v312 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : string = $"%A{v5}"
    let _run_target_args'_v312 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v312 = v330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v312 = v334 
    #endif
#else
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v312 = v338 
    #endif
    let v341 : string = _run_target_args'_v312 
    let v348 : string = $"{v341}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v10, v348)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v357 : string = $"{v55}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v367 : string = "stdin"
    let v368 : string = $"{v367}"
    let v371 : unit = ()
    let v372 : (unit -> unit) = closure7(v10, v368)
    let v373 : unit = (fun () -> v372 (); v371) ()
    let v377 : string = $"{v35}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v10, v377)
    let v382 : unit = (fun () -> v381 (); v380) ()
    (* run_target_args'
    let v389 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v390 : string = "format!(\"{:#?}\", $0)"
    let v391 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v390 
    let v392 : string = "fable_library_rust::String_::fromString($0)"
    let v393 : string = Fable.Core.RustInterop.emitRustExpr v391 v392 
    let _run_target_args'_v389 = v393 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v389 = v397 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v389 = v401 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v403 : string = $"%A{v6}"
    let _run_target_args'_v389 = v403 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v389 = v407 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v389 = v411 
    #endif
#else
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v389 = v415 
    #endif
    let v418 : string = _run_target_args'_v389 
    let v425 : string = $"{v418}"
    let v428 : unit = ()
    let v429 : (unit -> unit) = closure7(v10, v425)
    let v430 : unit = (fun () -> v429 (); v428) ()
    let v434 : string = $"{v55}"
    let v437 : unit = ()
    let v438 : (unit -> unit) = closure7(v10, v434)
    let v439 : unit = (fun () -> v438 (); v437) ()
    let v444 : string = "trace"
    let v445 : string = $"{v444}"
    let v448 : unit = ()
    let v449 : (unit -> unit) = closure7(v10, v445)
    let v450 : unit = (fun () -> v449 (); v448) ()
    let v454 : string = $"{v35}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v464 : string =
        if v7 then
            let v462 : string = "true"
            v462
        else
            let v463 : string = "false"
            v463
    let v466 : string = $"{v464}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v475 : string = $"{v55}"
    let v478 : unit = ()
    let v479 : (unit -> unit) = closure7(v10, v475)
    let v480 : unit = (fun () -> v479 (); v478) ()
    let v485 : string = "working_directory"
    let v486 : string = $"{v485}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    let v495 : string = $"{v35}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v10, v495)
    let v500 : unit = (fun () -> v499 (); v498) ()
    (* run_target_args'
    let v507 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v508 : string = "format!(\"{:#?}\", $0)"
    let v509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v508 
    let v510 : string = "fable_library_rust::String_::fromString($0)"
    let v511 : string = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let _run_target_args'_v507 = v511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v507 = v515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v507 = v519 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v521 : string = $"%A{v8}"
    let _run_target_args'_v507 = v521 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v507 = v525 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v507 = v529 
    #endif
#else
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v507 = v533 
    #endif
    let v536 : string = _run_target_args'_v507 
    let v543 : string = $"{v536}"
    let v546 : unit = ()
    let v547 : (unit -> unit) = closure7(v10, v543)
    let v548 : unit = (fun () -> v547 (); v546) ()
    let v553 : string = " }"
    let v554 : string = $"{v553}"
    let v557 : unit = ()
    let v558 : (unit -> unit) = closure7(v10, v554)
    let v559 : unit = (fun () -> v558 (); v557) ()
    let v563 : string = $"{v553}"
    let v566 : unit = ()
    let v567 : (unit -> unit) = closure7(v10, v563)
    let v568 : unit = (fun () -> v567 (); v566) ()
    let v571 : string = v10.l0
    v571
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method174(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : int32 = v8.Length
        let v55 : string = method173(v34, v35, v36, v37, v38, v39, v52, v53, v7, v54, v0, v1, v2, v3, v4, v5, v6)
        method19(v55)
and method157 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v36 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v39 : int32, v40 : string) = null |> unbox<struct (int32 * string)>
            return struct (v39, v40) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v47 : int32, v48 : string) = null |> unbox<struct (int32 * string)>
            return struct (v47, v48) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v55 : int32, v56 : string) = null |> unbox<struct (int32 * string)>
            return struct (v55, v56) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v63 : int32, v64 : string) = null |> unbox<struct (int32 * string)>
            return struct (v63, v64) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v71 : int32, v72 : string) = null |> unbox<struct (int32 * string)>
            return struct (v71, v72) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v79 : int32, v80 : string) = null |> unbox<struct (int32 * string)>
            return struct (v79, v80) 
            #endif
#else
            let v85 : US17 = method103(v0)
            let struct (v97 : string, v98 : US5) =
                match v85 with
                | US17_1(v88) -> (* Error *)
                    let v90 : string = $"resultm.get / Result value was Error: {v88}"
                    failwith<struct (string * US5)> v90
                | US17_0(v86, v87) -> (* Ok *)
                    struct (v86, v87)
            let v101 : (string -> US5) = method6()
            let v102 : US5 option = v6 |> Option.map v101 
            let v116 : US5 = US5_1
            let v117 : US5 = v102 |> Option.defaultValue v116 
            let v124 : string =
                match v117 with
                | US5_1 -> (* None *)
                    let v122 : string = ""
                    v122
                | US5_0(v121) -> (* Some *)
                    v121
            let v125 : unit = ()
            let v126 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v98, v97)
            let v127 : unit = (fun () -> v126 (); v125) ()
            let v174 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v178 : string =
                match v98 with
                | US5_1 -> (* None *)
                    let v176 : string = ""
                    v176
                | US5_0(v175) -> (* Some *)
                    v175
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v178,
              StandardOutputEncoding = v174,
              WorkingDirectory = v124,
              FileName = v97,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v179 : System.Diagnostics.ProcessStartInfo = start_info
            let v180 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v181 : int32 = v180.Length
            let v182 : Mut5 = {l0 = 0} : Mut5
            while method32(v181, v182) do
                let v184 : int32 = v182.l0
                let struct (v185 : string, v186 : string) = v180.[int v184]
                v179.EnvironmentVariables.[v185] <- v186 
                let v187 : int32 = v184 + 1
                v182.l0 <- v187
                ()
            let v188 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v179)
            use v188 = v188 
            let v189 : System.Diagnostics.Process = v188 
            let v190 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v191 : System.Collections.Concurrent.ConcurrentStack<string> = v190 ()
            let v192 : bool = false
            let v193 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v189, v191, v192)
            v189.OutputDataReceived.Add v193 
            let v194 : bool = true
            let v195 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v189, v191, v194)
            v189.ErrorDataReceived.Add v195 
            let v196 : (unit -> bool) = v189.Start
            let v197 : bool = v196 ()
            let v198 : bool = v197 = false
            if v198 then
                let v199 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v199
            let v200 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v200 v189
            let v201 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v201 v189
            let v204 : (System.Threading.CancellationToken -> US35) = method166()
            let v205 : US35 option = v1 |> Option.map v204 
            let v219 : US35 = US35_1
            let v220 : US35 = v205 |> Option.defaultValue v219 
            let v227 : System.Threading.CancellationToken =
                match v220 with
                | US35_1 -> (* None *)
                    let v225 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v225
                | US35_0(v224) -> (* Some *)
                    v224
            let v228 : Async<System.Threading.CancellationToken> = method167(v227)
            let! v228 = v228 
            let v229 : System.Threading.CancellationToken = v228 
            let v230 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v229.Register
            let v231 : (unit -> unit) = closure65(v189)
            let v232 : System.Threading.CancellationTokenRegistration = v230 v231
            use v232 = v232 
            let v233 : System.Threading.CancellationTokenRegistration = v232 
            let v234 : Async<int32> = method170(v189, v191, v229)
            let! v234 = v234 
            let v235 : int32 = v234 
            let v237 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v238 : string seq = v237 v191
            let v242 : (string seq -> string seq) = Seq.rev
            let v243 : string seq = v242 v238
            let v248 : string = method75()
            let v249 : (string -> (string seq -> string)) = String.concat
            let v250 : (string seq -> string) = v249 v248
            let v251 : string = v250 v243
            let v255 : unit = ()
            let v256 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v235, v251)
            let v257 : unit = (fun () -> v256 (); v255) ()
            return struct (v235, v251) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2308 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v2308 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2310 : unit = ()
    let _let'_v2310 =
        async {
            (* run_target_args'
            let v2321 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v2324 : int32, v2325 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2324, v2325) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v2332 : int32, v2333 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2332, v2333) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v2340 : int32, v2341 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2340, v2341) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v2348 : int32, v2349 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2348, v2349) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v2356 : int32, v2357 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2356, v2357) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v2364 : int32, v2365 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2364, v2365) 
            #endif
#else
            let v2370 : US17 = method103(v0)
            let struct (v2382 : string, v2383 : US5) =
                match v2370 with
                | US17_1(v2373) -> (* Error *)
                    let v2375 : string = $"resultm.get / Result value was Error: {v2373}"
                    failwith<struct (string * US5)> v2375
                | US17_0(v2371, v2372) -> (* Ok *)
                    struct (v2371, v2372)
            let v2386 : (string -> US5) = method6()
            let v2387 : US5 option = v6 |> Option.map v2386 
            let v2401 : US5 = US5_1
            let v2402 : US5 = v2387 |> Option.defaultValue v2401 
            let v2409 : string =
                match v2402 with
                | US5_1 -> (* None *)
                    let v2407 : string = ""
                    v2407
                | US5_0(v2406) -> (* Some *)
                    v2406
            let v2410 : unit = ()
            let v2411 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v2383, v2382)
            let v2412 : unit = (fun () -> v2411 (); v2410) ()
            let v2459 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2463 : string =
                match v2383 with
                | US5_1 -> (* None *)
                    let v2461 : string = ""
                    v2461
                | US5_0(v2460) -> (* Some *)
                    v2460
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2463,
              StandardOutputEncoding = v2459,
              WorkingDirectory = v2409,
              FileName = v2382,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2464 : System.Diagnostics.ProcessStartInfo = start_info
            let v2465 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v2466 : int32 = v2465.Length
            let v2467 : Mut5 = {l0 = 0} : Mut5
            while method32(v2466, v2467) do
                let v2469 : int32 = v2467.l0
                let struct (v2470 : string, v2471 : string) = v2465.[int v2469]
                v2464.EnvironmentVariables.[v2470] <- v2471 
                let v2472 : int32 = v2469 + 1
                v2467.l0 <- v2472
                ()
            let v2473 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2464)
            use v2473 = v2473 
            let v2474 : System.Diagnostics.Process = v2473 
            let v2475 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2476 : System.Collections.Concurrent.ConcurrentStack<string> = v2475 ()
            let v2477 : bool = false
            let v2478 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v2474, v2476, v2477)
            v2474.OutputDataReceived.Add v2478 
            let v2479 : bool = true
            let v2480 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v2474, v2476, v2479)
            v2474.ErrorDataReceived.Add v2480 
            let v2481 : (unit -> bool) = v2474.Start
            let v2482 : bool = v2481 ()
            let v2483 : bool = v2482 = false
            if v2483 then
                let v2484 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2484
            let v2485 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v2485 v2474
            let v2486 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v2486 v2474
            let v2489 : (System.Threading.CancellationToken -> US35) = method166()
            let v2490 : US35 option = v1 |> Option.map v2489 
            let v2504 : US35 = US35_1
            let v2505 : US35 = v2490 |> Option.defaultValue v2504 
            let v2512 : System.Threading.CancellationToken =
                match v2505 with
                | US35_1 -> (* None *)
                    let v2510 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2510
                | US35_0(v2509) -> (* Some *)
                    v2509
            let v2513 : Async<System.Threading.CancellationToken> = method167(v2512)
            let! v2513 = v2513 
            let v2514 : System.Threading.CancellationToken = v2513 
            let v2515 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2514.Register
            let v2516 : (unit -> unit) = closure65(v2474)
            let v2517 : System.Threading.CancellationTokenRegistration = v2515 v2516
            use v2517 = v2517 
            let v2518 : System.Threading.CancellationTokenRegistration = v2517 
            let v2519 : Async<int32> = method170(v2474, v2476, v2514)
            let! v2519 = v2519 
            let v2520 : int32 = v2519 
            let v2522 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2523 : string seq = v2522 v2476
            let v2527 : (string seq -> string seq) = Seq.rev
            let v2528 : string seq = v2527 v2523
            let v2533 : string = method75()
            let v2534 : (string -> (string seq -> string)) = String.concat
            let v2535 : (string seq -> string) = v2534 v2533
            let v2536 : string = v2535 v2528
            let v2540 : unit = ()
            let v2541 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v2520, v2536)
            let v2542 : unit = (fun () -> v2541 (); v2540) ()
            return struct (v2520, v2536) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4593 : Async<struct (int32 * string)> = _let'_v2310 
    let _run_target_args'_v11 = v4593 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4595 : unit = ()
    let _let'_v4595 =
        async {
            (* run_target_args'
            let v4606 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v4609 : int32, v4610 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4609, v4610) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v4617 : int32, v4618 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4617, v4618) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v4625 : int32, v4626 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4625, v4626) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v4633 : int32, v4634 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4633, v4634) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v4641 : int32, v4642 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4641, v4642) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v4649 : int32, v4650 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4649, v4650) 
            #endif
#else
            let v4655 : US17 = method103(v0)
            let struct (v4667 : string, v4668 : US5) =
                match v4655 with
                | US17_1(v4658) -> (* Error *)
                    let v4660 : string = $"resultm.get / Result value was Error: {v4658}"
                    failwith<struct (string * US5)> v4660
                | US17_0(v4656, v4657) -> (* Ok *)
                    struct (v4656, v4657)
            let v4671 : (string -> US5) = method6()
            let v4672 : US5 option = v6 |> Option.map v4671 
            let v4686 : US5 = US5_1
            let v4687 : US5 = v4672 |> Option.defaultValue v4686 
            let v4694 : string =
                match v4687 with
                | US5_1 -> (* None *)
                    let v4692 : string = ""
                    v4692
                | US5_0(v4691) -> (* Some *)
                    v4691
            let v4695 : unit = ()
            let v4696 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v4668, v4667)
            let v4697 : unit = (fun () -> v4696 (); v4695) ()
            let v4744 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v4748 : string =
                match v4668 with
                | US5_1 -> (* None *)
                    let v4746 : string = ""
                    v4746
                | US5_0(v4745) -> (* Some *)
                    v4745
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v4748,
              StandardOutputEncoding = v4744,
              WorkingDirectory = v4694,
              FileName = v4667,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v4749 : System.Diagnostics.ProcessStartInfo = start_info
            let v4750 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v4751 : int32 = v4750.Length
            let v4752 : Mut5 = {l0 = 0} : Mut5
            while method32(v4751, v4752) do
                let v4754 : int32 = v4752.l0
                let struct (v4755 : string, v4756 : string) = v4750.[int v4754]
                v4749.EnvironmentVariables.[v4755] <- v4756 
                let v4757 : int32 = v4754 + 1
                v4752.l0 <- v4757
                ()
            let v4758 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v4749)
            use v4758 = v4758 
            let v4759 : System.Diagnostics.Process = v4758 
            let v4760 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v4761 : System.Collections.Concurrent.ConcurrentStack<string> = v4760 ()
            let v4762 : bool = false
            let v4763 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v4759, v4761, v4762)
            v4759.OutputDataReceived.Add v4763 
            let v4764 : bool = true
            let v4765 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v4759, v4761, v4764)
            v4759.ErrorDataReceived.Add v4765 
            let v4766 : (unit -> bool) = v4759.Start
            let v4767 : bool = v4766 ()
            let v4768 : bool = v4767 = false
            if v4768 then
                let v4769 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v4769
            let v4770 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v4770 v4759
            let v4771 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v4771 v4759
            let v4774 : (System.Threading.CancellationToken -> US35) = method166()
            let v4775 : US35 option = v1 |> Option.map v4774 
            let v4789 : US35 = US35_1
            let v4790 : US35 = v4775 |> Option.defaultValue v4789 
            let v4797 : System.Threading.CancellationToken =
                match v4790 with
                | US35_1 -> (* None *)
                    let v4795 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v4795
                | US35_0(v4794) -> (* Some *)
                    v4794
            let v4798 : Async<System.Threading.CancellationToken> = method167(v4797)
            let! v4798 = v4798 
            let v4799 : System.Threading.CancellationToken = v4798 
            let v4800 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v4799.Register
            let v4801 : (unit -> unit) = closure65(v4759)
            let v4802 : System.Threading.CancellationTokenRegistration = v4800 v4801
            use v4802 = v4802 
            let v4803 : System.Threading.CancellationTokenRegistration = v4802 
            let v4804 : Async<int32> = method170(v4759, v4761, v4799)
            let! v4804 = v4804 
            let v4805 : int32 = v4804 
            let v4807 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v4808 : string seq = v4807 v4761
            let v4812 : (string seq -> string seq) = Seq.rev
            let v4813 : string seq = v4812 v4808
            let v4818 : string = method75()
            let v4819 : (string -> (string seq -> string)) = String.concat
            let v4820 : (string seq -> string) = v4819 v4818
            let v4821 : string = v4820 v4813
            let v4825 : unit = ()
            let v4826 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v4805, v4821)
            let v4827 : unit = (fun () -> v4826 (); v4825) ()
            return struct (v4805, v4821) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6878 : Async<struct (int32 * string)> = _let'_v4595 
    let _run_target_args'_v11 = v6878 
    #endif
#else
    let v6880 : unit = ()
    let _let'_v6880 =
        async {
            (* run_target_args'
            let v6891 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v6894 : int32, v6895 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6894, v6895) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v6902 : int32, v6903 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6902, v6903) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v6910 : int32, v6911 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6910, v6911) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v6918 : int32, v6919 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6918, v6919) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v6926 : int32, v6927 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6926, v6927) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v6934 : int32, v6935 : string) = null |> unbox<struct (int32 * string)>
            return struct (v6934, v6935) 
            #endif
#else
            let v6940 : US17 = method103(v0)
            let struct (v6952 : string, v6953 : US5) =
                match v6940 with
                | US17_1(v6943) -> (* Error *)
                    let v6945 : string = $"resultm.get / Result value was Error: {v6943}"
                    failwith<struct (string * US5)> v6945
                | US17_0(v6941, v6942) -> (* Ok *)
                    struct (v6941, v6942)
            let v6956 : (string -> US5) = method6()
            let v6957 : US5 option = v6 |> Option.map v6956 
            let v6971 : US5 = US5_1
            let v6972 : US5 = v6957 |> Option.defaultValue v6971 
            let v6979 : string =
                match v6972 with
                | US5_1 -> (* None *)
                    let v6977 : string = ""
                    v6977
                | US5_0(v6976) -> (* Some *)
                    v6976
            let v6980 : unit = ()
            let v6981 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v6953, v6952)
            let v6982 : unit = (fun () -> v6981 (); v6980) ()
            let v7029 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v7033 : string =
                match v6953 with
                | US5_1 -> (* None *)
                    let v7031 : string = ""
                    v7031
                | US5_0(v7030) -> (* Some *)
                    v7030
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v7033,
              StandardOutputEncoding = v7029,
              WorkingDirectory = v6979,
              FileName = v6952,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v7034 : System.Diagnostics.ProcessStartInfo = start_info
            let v7035 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v7036 : int32 = v7035.Length
            let v7037 : Mut5 = {l0 = 0} : Mut5
            while method32(v7036, v7037) do
                let v7039 : int32 = v7037.l0
                let struct (v7040 : string, v7041 : string) = v7035.[int v7039]
                v7034.EnvironmentVariables.[v7040] <- v7041 
                let v7042 : int32 = v7039 + 1
                v7037.l0 <- v7042
                ()
            let v7043 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v7034)
            use v7043 = v7043 
            let v7044 : System.Diagnostics.Process = v7043 
            let v7045 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v7046 : System.Collections.Concurrent.ConcurrentStack<string> = v7045 ()
            let v7047 : bool = false
            let v7048 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7044, v7046, v7047)
            v7044.OutputDataReceived.Add v7048 
            let v7049 : bool = true
            let v7050 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7044, v7046, v7049)
            v7044.ErrorDataReceived.Add v7050 
            let v7051 : (unit -> bool) = v7044.Start
            let v7052 : bool = v7051 ()
            let v7053 : bool = v7052 = false
            if v7053 then
                let v7054 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v7054
            let v7055 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v7055 v7044
            let v7056 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v7056 v7044
            let v7059 : (System.Threading.CancellationToken -> US35) = method166()
            let v7060 : US35 option = v1 |> Option.map v7059 
            let v7074 : US35 = US35_1
            let v7075 : US35 = v7060 |> Option.defaultValue v7074 
            let v7082 : System.Threading.CancellationToken =
                match v7075 with
                | US35_1 -> (* None *)
                    let v7080 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v7080
                | US35_0(v7079) -> (* Some *)
                    v7079
            let v7083 : Async<System.Threading.CancellationToken> = method167(v7082)
            let! v7083 = v7083 
            let v7084 : System.Threading.CancellationToken = v7083 
            let v7085 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v7084.Register
            let v7086 : (unit -> unit) = closure65(v7044)
            let v7087 : System.Threading.CancellationTokenRegistration = v7085 v7086
            use v7087 = v7087 
            let v7088 : System.Threading.CancellationTokenRegistration = v7087 
            let v7089 : Async<int32> = method170(v7044, v7046, v7084)
            let! v7089 = v7089 
            let v7090 : int32 = v7089 
            let v7092 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v7093 : string seq = v7092 v7046
            let v7097 : (string seq -> string seq) = Seq.rev
            let v7098 : string seq = v7097 v7093
            let v7103 : string = method75()
            let v7104 : (string -> (string seq -> string)) = String.concat
            let v7105 : (string seq -> string) = v7104 v7103
            let v7106 : string = v7105 v7098
            let v7110 : unit = ()
            let v7111 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7090, v7106)
            let v7112 : unit = (fun () -> v7111 (); v7110) ()
            return struct (v7090, v7106) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9163 : Async<struct (int32 * string)> = _let'_v6880 
    let _run_target_args'_v11 = v9163 
    #endif
    let v9164 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v9164
and method156 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method157(v0, v1, v2, v3, v4, v5, v6)
and method101 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method102(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US17 = method103(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US17_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US17_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US25 = method116(v34)
    let v44 : (string []) =
        match v35 with
        | US25_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US25_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "_vec_map"
    let v120 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v29, v120)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v175 : bool = true
    let mutable _capture_v175 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v176 : string = "std::process::Command::new(&*$0)"
    let v177 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v176 
    let v178 : string = "true; let mut v177 = v177"
    let v179 : bool = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : string = "true; std::process::Command::args(&mut v177, &*$0)"
    let v181 : bool = Fable.Core.RustInterop.emitRustExpr v120 v180 
    let v182 : string = "$0"
    let v183 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v177 v182 
    let v184 : string = "std::process::Stdio::piped()"
    let v185 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "true; let mut v183 = v183"
    let v187 : bool = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "true; std::process::Command::stdout(&mut v183, std::process::Stdio::piped())"
    let v189 : bool = Fable.Core.RustInterop.emitRustExpr () v188 
    let v190 : string = "$0"
    let v191 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let v192 : string = "std::process::Stdio::piped()"
    let v193 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v192 
    let v194 : string = "true; let mut v191 = v191"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "true; std::process::Command::stderr(&mut v191, std::process::Stdio::piped())"
    let v197 : bool = Fable.Core.RustInterop.emitRustExpr () v196 
    let v198 : string = "$0"
    let v199 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let v200 : string = "std::process::Stdio::piped()"
    let v201 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : string = "true; let mut v199 = v199"
    let v203 : bool = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : string = "true; std::process::Command::stdin(&mut v199, std::process::Stdio::piped())"
    let v205 : bool = Fable.Core.RustInterop.emitRustExpr () v204 
    let v206 : string = "$0"
    let v207 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v199 v206 
    let v210 : (string -> US5) = method6()
    let v211 : US5 option = v6 |> Option.map v210 
    let v225 : US5 = US5_1
    let v226 : US5 = v211 |> Option.defaultValue v225 
    let v240 : std_process_Command =
        match v226 with
        | US5_1 -> (* None *)
            let v237 : string = $"v207"
            let v238 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v237 
            v238
        | US5_0(v230) -> (* Some *)
            let v231 : string = "true; let mut v207 = v207"
            let v232 : bool = Fable.Core.RustInterop.emitRustExpr () v231 
            let v233 : string = "true; std::process::Command::current_dir(&mut v207, &*$0)"
            let v234 : bool = Fable.Core.RustInterop.emitRustExpr v230 v233 
            let v235 : string = $"v207"
            let v236 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v235 
            v236
    let v241 : uint64 = System.Convert.ToUInt64 v2.Length
    let v242 : bool = v241 = 0UL
    let v262 : std_process_Command =
        if v242 then
            v240
        else
            let v243 : string = "$0.to_vec()"
            let v244 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v243 
            let v245 : string = "true; let _vec_fold_ = $0.into_iter().fold(v240, |acc, x| { //"
            let v246 : bool = Fable.Core.RustInterop.emitRustExpr v244 v245 
            let v247 : string = "acc"
            let v248 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v247 
            let v249 : string = "x"
            let struct (v250 : string, v251 : string) = Fable.Core.RustInterop.emitRustExpr () v249 
            let v252 : string = "true; let mut v248 = v248"
            let v253 : bool = Fable.Core.RustInterop.emitRustExpr () v252 
            let v254 : string = "true; std::process::Command::env(&mut v248, &*$0, &*$1)"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr struct (v250, v251) v254 
            let v256 : string = "$0"
            let v257 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v248 v256 
            let v258 : string = "true; $0 })"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr v257 v258 
            let v260 : string = "_vec_fold_"
            let v261 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v260 
            v261
    let v263 : string = "true; let mut v262 = v262"
    let v264 : bool = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "std::process::Command::spawn(&mut v262)"
    let v266 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v265 
    let v267 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v269 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v270 : string = "$0.map_err(|x| $1(x))"
    let v271 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v270 
    let _run_target_args'_v269 = v271 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v272 : string = "$0.map_err(|x| $1(x))"
    let v273 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v272 
    let _run_target_args'_v269 = v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : string = "$0.map_err(|x| $1(x))"
    let v275 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v266, v267) v274 
    let _run_target_args'_v269 = v275 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v276 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v276 
    #endif
#if FABLE_COMPILER_PYTHON
    let v277 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v277 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v278 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v278 
    #endif
#else
    let v279 : Result<std_process_Child, std_string_String> = match v266 with Ok x -> Ok x | Error x -> Error (v267 x)
    let _run_target_args'_v269 = v279 
    #endif
    let v280 : Result<std_process_Child, std_string_String> = _run_target_args'_v269 
    let v283 : (std_process_Child option -> std_process_Child option) = method128()
    let v284 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v285 : bool = Fable.Core.RustInterop.emitRustExpr v280 v284 
    let v286 : string = "x"
    let v287 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v286 
    let v289 : std_process_Child option = Some v287 
    let v292 : std_process_Child option = v283 v289
    let v293 : string = "std::sync::Mutex::new(v292)"
    let v294 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v293 
    let v295 : string = "std::sync::Arc::new(v294)"
    let v296 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : string = "true; $0 })"
    let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
    let v299 : string = "_result_map_"
    let v300 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v299 
    let v301 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method129()
    let v302 : (std_string_String -> US27) = method130()
    let v303 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v304 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v301, v302, v300) v303 
    let struct (v1607 : int32, v1608 : US7, v1609 : US28) =
        match v304 with
        | US27_1(v1552) -> (* Error *)
            let v1553 : unit = ()
            let v1554 : (unit -> unit) = closure44(v1552)
            let v1555 : unit = (fun () -> v1554 (); v1553) ()
            let v1602 : US7 = US7_0(v1552)
            let v1603 : US28 = US28_1
            struct (-1, v1602, v1603)
        | US27_0(v305) -> (* Ok *)
            let v306 : string = "true; let _capture = (|| { //"
            let v307 : bool = Fable.Core.RustInterop.emitRustExpr () v306 
            let v308 : string = "$0"
            let v309 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v308 
            let v310 : string = "v309.lock()"
            let v311 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v310 
            (* run_target_args'
            let v313 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "$0.unwrap()"
            let v315 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v314 
            let _run_target_args'_v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "$0.unwrap()"
            let v317 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v316 
            let _run_target_args'_v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "$0.unwrap()"
            let v319 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v311 v318 
            let _run_target_args'_v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v322 
            #endif
#else
            let v323 : std_sync_MutexGuard<std_process_Child option> = match v311 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v313 = v323 
            #endif
            let v324 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v313 
            let v327 : std_sync_MutexGuard<std_process_Child option> = method133(v324)
            let v328 : string = "true; let mut v327 = v327"
            let v329 : bool = Fable.Core.RustInterop.emitRustExpr () v328 
            let v330 : string = "&mut $0"
            let v331 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v327 v330 
            let v332 : string = "$0.as_mut()"
            let v333 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "$0.unwrap()"
            let v335 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "&mut $0.stdout"
            let v337 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "Option::take($0)"
            let v339 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v337 v338 
            let v340 : string = "$0.unwrap()"
            let v341 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v339 v340 
            let v342 : string = "true; $0 })()"
            let v343 : bool = Fable.Core.RustInterop.emitRustExpr v341 v342 
            let v344 : string = "_capture"
            let v345 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : string = "true; let _capture = (|| { //"
            let v347 : bool = Fable.Core.RustInterop.emitRustExpr () v346 
            let v348 : string = "$0"
            let v349 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v348 
            let v350 : string = "v349.lock()"
            let v351 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v350 
            (* run_target_args'
            let v353 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v354 : string = "$0.unwrap()"
            let v355 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v354 
            let _run_target_args'_v353 = v355 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v356 : string = "$0.unwrap()"
            let v357 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v356 
            let _run_target_args'_v353 = v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v358 : string = "$0.unwrap()"
            let v359 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v351 v358 
            let _run_target_args'_v353 = v359 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v360 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v360 
            #endif
#if FABLE_COMPILER_PYTHON
            let v361 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v361 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v362 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v362 
            #endif
#else
            let v363 : std_sync_MutexGuard<std_process_Child option> = match v351 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v353 = v363 
            #endif
            let v364 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v353 
            let v367 : std_sync_MutexGuard<std_process_Child option> = method133(v364)
            let v368 : string = "true; let mut v367 = v367"
            let v369 : bool = Fable.Core.RustInterop.emitRustExpr () v368 
            let v370 : string = "&mut $0"
            let v371 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v367 v370 
            let v372 : string = "$0.as_mut()"
            let v373 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v371 v372 
            let v374 : string = "$0.unwrap()"
            let v375 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v373 v374 
            let v376 : string = "&mut $0.stderr"
            let v377 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v375 v376 
            let v378 : string = "Option::take($0)"
            let v379 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v377 v378 
            let v380 : string = "$0.unwrap()"
            let v381 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v379 v380 
            let v382 : string = "true; $0 })()"
            let v383 : bool = Fable.Core.RustInterop.emitRustExpr v381 v382 
            let v384 : string = "_capture"
            let v385 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v384 
            let v386 : string = "true; let _capture = (|| { //"
            let v387 : bool = Fable.Core.RustInterop.emitRustExpr () v386 
            let v388 : string = "$0"
            let v389 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v388 
            let v390 : string = "v389.lock()"
            let v391 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v390 
            (* run_target_args'
            let v393 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v394 : string = "$0.unwrap()"
            let v395 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v394 
            let _run_target_args'_v393 = v395 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v396 : string = "$0.unwrap()"
            let v397 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v396 
            let _run_target_args'_v393 = v397 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v398 : string = "$0.unwrap()"
            let v399 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v391 v398 
            let _run_target_args'_v393 = v399 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v400 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v400 
            #endif
#if FABLE_COMPILER_PYTHON
            let v401 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v401 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v402 
            #endif
#else
            let v403 : std_sync_MutexGuard<std_process_Child option> = match v391 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v393 = v403 
            #endif
            let v404 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v393 
            let v407 : std_sync_MutexGuard<std_process_Child option> = method133(v404)
            let v408 : string = "true; let mut v407 = v407"
            let v409 : bool = Fable.Core.RustInterop.emitRustExpr () v408 
            let v410 : string = "&mut $0"
            let v411 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v407 v410 
            let v412 : string = "$0.as_mut()"
            let v413 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v411 v412 
            let v414 : string = "$0.unwrap()"
            let v415 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v413 v414 
            let v416 : string = "&mut $0.stdin"
            let v417 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "Option::take($0)"
            let v419 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v420 : string = "$0.unwrap()"
            let v421 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v423 : std_process_ChildStdin option = Some v421 
            let v426 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method134()
            let v427 : std_process_ChildStdin option = v426 v423
            let v428 : string = "std::sync::Mutex::new(v427)"
            let v429 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v428 
            let v430 : string = "std::sync::Arc::new(v429)"
            let v431 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v430 
            let v432 : string = "true; $0 })()"
            let v433 : bool = Fable.Core.RustInterop.emitRustExpr v431 v432 
            let v434 : string = "_capture"
            let v435 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v434 
            let v436 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v437 : std_sync_mpsc_Sender<std_string_String>, v438 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v436 
            let v439 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method135()
            let v440 : std_sync_mpsc_Sender<std_string_String> = v439 v437
            let v441 : string = "std::sync::Mutex::new(v440)"
            let v442 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v441 
            let v443 : string = "std::sync::Arc::new(v442)"
            let v444 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v443 
            let v445 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method136()
            let v446 : std_sync_mpsc_Sender<std_string_String> = v445 v437
            let v447 : string = "std::sync::Mutex::new(v446)"
            let v448 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v447 
            let v449 : string = "std::sync::Arc::new(v448)"
            let v450 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v449 
            let v451 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method137()
            let v452 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v451 v438
            let v453 : string = "std::sync::Mutex::new(v452)"
            let v454 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v453 
            let v455 : string = "std::sync::Arc::new(v454)"
            let v456 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v455 
            let v457 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v458 : bool = Fable.Core.RustInterop.emitRustExpr () v457 
            let v459 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v460 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v345 v459 
            let v461 : string = "std::io::BufReader::new($0)"
            let v462 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v460 v461 
            let v463 : string = "std::io::BufRead::lines(v462)"
            let v464 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v463 
            let v465 : string = "true; let mut v464 = v464; let _iter_try_for_each = v464.try_for_each(|x| { //"
            let v466 : bool = Fable.Core.RustInterop.emitRustExpr () v465 
            let v467 : string = "x"
            let v468 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v467 
            let v469 : string = "$0.clone()"
            let v470 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v444 v469 
            let v471 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v473 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : string = "$0.map_err(|x| $1(x))"
            let v475 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v474 
            let _run_target_args'_v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : string = "$0.map_err(|x| $1(x))"
            let v477 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v476 
            let _run_target_args'_v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : string = "$0.map_err(|x| $1(x))"
            let v479 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v468, v471) v478 
            let _run_target_args'_v473 = v479 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v480 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v480 
            #endif
#if FABLE_COMPILER_PYTHON
            let v481 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v481 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v482 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v482 
            #endif
#else
            let v483 : Result<std_string_String, std_string_String> = match v468 with Ok x -> Ok x | Error x -> Error (v471 x)
            let _run_target_args'_v473 = v483 
            #endif
            let v484 : Result<std_string_String, std_string_String> = _run_target_args'_v473 
            let v487 : (std_string_String -> US29) = method138()
            let v488 : (std_string_String -> US29) = method139()
            let v489 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v490 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v487, v488, v484) v489 
            let v727 : std_string_String =
                match v490 with
                | US29_1(v609) -> (* Error *)
                    let v610 : unit = ()
                    let v611 : (unit -> unit) = closure50(v5, v609)
                    let v612 : unit = (fun () -> v611 (); v610) ()
                    let v659 : string = $"\u001b[4;7m{v609}\u001b[0m"
                    (* run_target_args'
                    let v664 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v665 : string = "&*$0"
                    let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v665 
                    let _run_target_args'_v664 = v666 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v667 : string = "&*$0"
                    let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v667 
                    let _run_target_args'_v664 = v668 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v669 : string = "&*$0"
                    let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v659 v669 
                    let _run_target_args'_v664 = v670 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v672 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v672 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v676 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v680 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v680 
                    #endif
#else
                    let v684 : Ref<Str> = v659 |> unbox<Ref<Str>>
                    let _run_target_args'_v664 = v684 
                    #endif
                    let v687 : Ref<Str> = _run_target_args'_v664 
                    (* run_target_args'
                    let v697 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v698 : string = "String::from($0)"
                    let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v698 
                    let _run_target_args'_v697 = v699 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v700 : string = "String::from($0)"
                    let v701 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v700 
                    let _run_target_args'_v697 = v701 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v702 : string = "String::from($0)"
                    let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v687 v702 
                    let _run_target_args'_v697 = v703 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v705 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v705 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v709 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v709 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v713 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v713 
                    #endif
#else
                    let v717 : std_string_String = v687 |> unbox<std_string_String>
                    let _run_target_args'_v697 = v717 
                    #endif
                    let v720 : std_string_String = _run_target_args'_v697 
                    v720
                | US29_0(v491) -> (* Ok *)
                    let v492 : string = "fable_library_rust::String_::fromString($0)"
                    let v493 : string = Fable.Core.RustInterop.emitRustExpr v491 v492 
                    let v494 : string = "encoding_rs::UTF_8"
                    let v495 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v494 
                    let v496 : string = "$0.encode(&*$1).0"
                    let v497 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v495, v493) v496 
                    let v498 : string = "$0.as_ref()"
                    let v499 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v497 v498 
                    let v500 : string = "std::str::from_utf8($0)"
                    let v501 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v499 v500 
                    (* run_target_args'
                    let v503 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v504 : string = "$0.unwrap()"
                    let v505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v504 
                    let _run_target_args'_v503 = v505 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v506 : string = "$0.unwrap()"
                    let v507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v506 
                    let _run_target_args'_v503 = v507 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v508 : string = "$0.unwrap()"
                    let v509 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v501 v508 
                    let _run_target_args'_v503 = v509 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v510 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v510 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v511 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v511 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v512 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v512 
                    #endif
#else
                    let v513 : Ref<Str> = match v501 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v503 = v513 
                    #endif
                    let v514 : Ref<Str> = _run_target_args'_v503 
                    (* run_target_args'
                    let v521 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v522 : string = "String::from($0)"
                    let v523 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v522 
                    let _run_target_args'_v521 = v523 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v524 : string = "String::from($0)"
                    let v525 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v524 
                    let _run_target_args'_v521 = v525 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v526 : string = "String::from($0)"
                    let v527 : std_string_String = Fable.Core.RustInterop.emitRustExpr v514 v526 
                    let _run_target_args'_v521 = v527 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v529 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v529 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v533 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v533 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v537 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v537 
                    #endif
#else
                    let v541 : std_string_String = v514 |> unbox<std_string_String>
                    let _run_target_args'_v521 = v541 
                    #endif
                    let v544 : std_string_String = _run_target_args'_v521 
                    let v550 : string = "fable_library_rust::String_::fromString($0)"
                    let v551 : string = Fable.Core.RustInterop.emitRustExpr v544 v550 
                    let v552 : string = $"> {v551}"
                    if v5 then
                        let v553 : unit = ()
                        let v554 : (unit -> unit) = closure51(v552)
                        let v555 : unit = (fun () -> v554 (); v553) ()
                        ()
                    else
                        let v605 : unit = ()
                        let v606 : (unit -> unit) = closure10(v552)
                        let v607 : unit = (fun () -> v606 (); v605) ()
                        ()
                    v544
            let v728 : string = "$0"
            let v729 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v470 v728 
            let v730 : string = "v729.lock()"
            let v731 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v730 
            (* run_target_args'
            let v733 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v734 : string = "$0.unwrap()"
            let v735 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v734 
            let _run_target_args'_v733 = v735 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v736 : string = "$0.unwrap()"
            let v737 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v736 
            let _run_target_args'_v733 = v737 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v738 : string = "$0.unwrap()"
            let v739 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v731 v738 
            let _run_target_args'_v733 = v739 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v740 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v740 
            #endif
#if FABLE_COMPILER_PYTHON
            let v741 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v741 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v742 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v742 
            #endif
#else
            let v743 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v733 = v743 
            #endif
            let v744 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v733 
            let v747 : string = "&$0"
            let v748 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v744 v747 
            let v749 : string = "$0.send($1)"
            let v750 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v748, v727) v749 
            let v751 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v753 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v754 : string = "$0.map_err(|x| $1(x))"
            let v755 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v754 
            let _run_target_args'_v753 = v755 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v756 : string = "$0.map_err(|x| $1(x))"
            let v757 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v756 
            let _run_target_args'_v753 = v757 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v758 : string = "$0.map_err(|x| $1(x))"
            let v759 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v750, v751) v758 
            let _run_target_args'_v753 = v759 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v760 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v760 
            #endif
#if FABLE_COMPILER_PYTHON
            let v761 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v761 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v762 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v762 
            #endif
#else
            let v763 : Result<unit, std_string_String> = match v750 with Ok x -> Ok x | Error x -> Error (v751 x)
            let _run_target_args'_v753 = v763 
            #endif
            let v764 : Result<unit, std_string_String> = _run_target_args'_v753 
            let v767 : string = "$0"
            let v768 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v764 v767 
            let v769 : string = "true; $0 }); //"
            let v770 : bool = Fable.Core.RustInterop.emitRustExpr v768 v769 
            let v771 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v772 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v771 
            let v773 : Result<unit, string> = method145(v772)
            let v774 : string = ""
            let v775 : string = "}"
            let v776 : string = v774 + v775 
            let x = v773 //
            let v777 : _ = x
            let v778 : unit = ()
            (* run_target_args'
            let v779 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v780 : string = $"true; let _fix_closure_v778 = $0"
            let v781 : bool = Fable.Core.RustInterop.emitRustExpr v777 v780 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v782 : string = $"true; let _fix_closure_v778 = $0"
            let v783 : bool = Fable.Core.RustInterop.emitRustExpr v777 v782 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v784 : string = $"true; let _fix_closure_v778 = $0"
            let v785 : bool = Fable.Core.RustInterop.emitRustExpr v777 v784 
            let _run_target_args'_v779 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v779 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v779 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v779 = false 
            #endif
#else
            let _run_target_args'_v779 = false 
            #endif
            let v786 : bool = _run_target_args'_v779 
            let v788 : string = $"true; _fix_closure_v778 " + v776 + "); " + v774 + " // rust.fix_closure'"
            let v789 : bool = Fable.Core.RustInterop.emitRustExpr () v788 
            let v790 : string = "__spawn"
            let v791 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v790 
            let v792 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v795 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v385 v794 
            let v796 : string = "std::io::BufReader::new($0)"
            let v797 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
            let v798 : string = "std::io::BufRead::lines(v797)"
            let v799 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v798 
            let v800 : string = "true; let mut v799 = v799; let _iter_try_for_each = v799.try_for_each(|x| { //"
            let v801 : bool = Fable.Core.RustInterop.emitRustExpr () v800 
            let v802 : string = "x"
            let v803 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v802 
            let v804 : string = "$0.clone()"
            let v805 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v450 v804 
            let v806 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v808 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v809 : string = "$0.map_err(|x| $1(x))"
            let v810 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v809 
            let _run_target_args'_v808 = v810 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v811 : string = "$0.map_err(|x| $1(x))"
            let v812 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v811 
            let _run_target_args'_v808 = v812 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v813 : string = "$0.map_err(|x| $1(x))"
            let v814 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v803, v806) v813 
            let _run_target_args'_v808 = v814 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v815 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v815 
            #endif
#if FABLE_COMPILER_PYTHON
            let v816 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v816 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v817 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v817 
            #endif
#else
            let v818 : Result<std_string_String, std_string_String> = match v803 with Ok x -> Ok x | Error x -> Error (v806 x)
            let _run_target_args'_v808 = v818 
            #endif
            let v819 : Result<std_string_String, std_string_String> = _run_target_args'_v808 
            let v822 : (std_string_String -> US29) = method138()
            let v823 : (std_string_String -> US29) = method139()
            let v824 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v825 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v822, v823, v819) v824 
            let v1128 : std_string_String =
                match v825 with
                | US29_1(v1010) -> (* Error *)
                    let v1011 : unit = ()
                    let v1012 : (unit -> unit) = closure50(v5, v1010)
                    let v1013 : unit = (fun () -> v1012 (); v1011) ()
                    let v1060 : string = $"\u001b[4;7m{v1010}\u001b[0m"
                    (* run_target_args'
                    let v1065 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1066 : string = "&*$0"
                    let v1067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1066 
                    let _run_target_args'_v1065 = v1067 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1068 : string = "&*$0"
                    let v1069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1068 
                    let _run_target_args'_v1065 = v1069 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1070 : string = "&*$0"
                    let v1071 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1060 v1070 
                    let _run_target_args'_v1065 = v1071 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1073 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1073 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1077 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1077 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1081 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1081 
                    #endif
#else
                    let v1085 : Ref<Str> = v1060 |> unbox<Ref<Str>>
                    let _run_target_args'_v1065 = v1085 
                    #endif
                    let v1088 : Ref<Str> = _run_target_args'_v1065 
                    (* run_target_args'
                    let v1098 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1099 : string = "String::from($0)"
                    let v1100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1099 
                    let _run_target_args'_v1098 = v1100 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1101 : string = "String::from($0)"
                    let v1102 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1101 
                    let _run_target_args'_v1098 = v1102 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1103 : string = "String::from($0)"
                    let v1104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1088 v1103 
                    let _run_target_args'_v1098 = v1104 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1106 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1106 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1110 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1110 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1114 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1114 
                    #endif
#else
                    let v1118 : std_string_String = v1088 |> unbox<std_string_String>
                    let _run_target_args'_v1098 = v1118 
                    #endif
                    let v1121 : std_string_String = _run_target_args'_v1098 
                    v1121
                | US29_0(v826) -> (* Ok *)
                    let v827 : string = "fable_library_rust::String_::fromString($0)"
                    let v828 : string = Fable.Core.RustInterop.emitRustExpr v826 v827 
                    let v829 : string = "encoding_rs::UTF_8"
                    let v830 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v829 
                    let v831 : string = "$0.encode(&*$1).0"
                    let v832 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v830, v828) v831 
                    let v833 : string = "$0.as_ref()"
                    let v834 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
                    let v835 : string = "std::str::from_utf8($0)"
                    let v836 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v834 v835 
                    (* run_target_args'
                    let v838 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v839 : string = "$0.unwrap()"
                    let v840 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v839 
                    let _run_target_args'_v838 = v840 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v841 : string = "$0.unwrap()"
                    let v842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v841 
                    let _run_target_args'_v838 = v842 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v843 : string = "$0.unwrap()"
                    let v844 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v843 
                    let _run_target_args'_v838 = v844 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v845 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v845 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v846 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v846 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v847 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v847 
                    #endif
#else
                    let v848 : Ref<Str> = match v836 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v838 = v848 
                    #endif
                    let v849 : Ref<Str> = _run_target_args'_v838 
                    (* run_target_args'
                    let v856 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v857 : string = "String::from($0)"
                    let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v857 
                    let _run_target_args'_v856 = v858 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v859 : string = "String::from($0)"
                    let v860 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v859 
                    let _run_target_args'_v856 = v860 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v861 : string = "String::from($0)"
                    let v862 : std_string_String = Fable.Core.RustInterop.emitRustExpr v849 v861 
                    let _run_target_args'_v856 = v862 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v864 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v864 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v868 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v868 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v872 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v872 
                    #endif
#else
                    let v876 : std_string_String = v849 |> unbox<std_string_String>
                    let _run_target_args'_v856 = v876 
                    #endif
                    let v879 : std_string_String = _run_target_args'_v856 
                    let v885 : string = "fable_library_rust::String_::fromString($0)"
                    let v886 : string = Fable.Core.RustInterop.emitRustExpr v879 v885 
                    let v887 : string = $"! {v886}"
                    if v5 then
                        let v888 : unit = ()
                        let v889 : (unit -> unit) = closure51(v887)
                        let v890 : unit = (fun () -> v889 (); v888) ()
                        ()
                    else
                        let v939 : unit = ()
                        let v940 : (unit -> unit) = closure10(v887)
                        let v941 : unit = (fun () -> v940 (); v939) ()
                        ()
                    let v943 : string = $"\u001b[4;7m{v879}\u001b[0m"
                    (* run_target_args'
                    let v948 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v949 : string = "&*$0"
                    let v950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v949 
                    let _run_target_args'_v948 = v950 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v951 : string = "&*$0"
                    let v952 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v951 
                    let _run_target_args'_v948 = v952 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v953 : string = "&*$0"
                    let v954 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v943 v953 
                    let _run_target_args'_v948 = v954 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v956 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v956 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v960 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v960 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v964 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v964 
                    #endif
#else
                    let v968 : Ref<Str> = v943 |> unbox<Ref<Str>>
                    let _run_target_args'_v948 = v968 
                    #endif
                    let v971 : Ref<Str> = _run_target_args'_v948 
                    (* run_target_args'
                    let v981 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v982 : string = "String::from($0)"
                    let v983 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v982 
                    let _run_target_args'_v981 = v983 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v984 : string = "String::from($0)"
                    let v985 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v984 
                    let _run_target_args'_v981 = v985 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v986 : string = "String::from($0)"
                    let v987 : std_string_String = Fable.Core.RustInterop.emitRustExpr v971 v986 
                    let _run_target_args'_v981 = v987 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v989 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v989 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v993 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v993 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v997 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v997 
                    #endif
#else
                    let v1001 : std_string_String = v971 |> unbox<std_string_String>
                    let _run_target_args'_v981 = v1001 
                    #endif
                    let v1004 : std_string_String = _run_target_args'_v981 
                    v1004
            let v1129 : string = "$0"
            let v1130 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v805 v1129 
            let v1131 : string = "v1130.lock()"
            let v1132 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1131 
            (* run_target_args'
            let v1134 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1135 : string = "$0.unwrap()"
            let v1136 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1135 
            let _run_target_args'_v1134 = v1136 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1137 : string = "$0.unwrap()"
            let v1138 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1137 
            let _run_target_args'_v1134 = v1138 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1139 : string = "$0.unwrap()"
            let v1140 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1132 v1139 
            let _run_target_args'_v1134 = v1140 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1141 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1141 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1142 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1142 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1143 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1143 
            #endif
#else
            let v1144 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1132 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1134 = v1144 
            #endif
            let v1145 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1134 
            let v1148 : string = "&$0"
            let v1149 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1145 v1148 
            let v1150 : string = "$0.send($1)"
            let v1151 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1149, v1128) v1150 
            let v1152 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v1154 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1155 : string = "$0.map_err(|x| $1(x))"
            let v1156 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1155 
            let _run_target_args'_v1154 = v1156 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1157 : string = "$0.map_err(|x| $1(x))"
            let v1158 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1157 
            let _run_target_args'_v1154 = v1158 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1159 : string = "$0.map_err(|x| $1(x))"
            let v1160 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1151, v1152) v1159 
            let _run_target_args'_v1154 = v1160 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1161 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1161 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1162 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1162 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1163 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1163 
            #endif
#else
            let v1164 : Result<unit, std_string_String> = match v1151 with Ok x -> Ok x | Error x -> Error (v1152 x)
            let _run_target_args'_v1154 = v1164 
            #endif
            let v1165 : Result<unit, std_string_String> = _run_target_args'_v1154 
            let v1168 : string = "$0"
            let v1169 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1165 v1168 
            let v1170 : string = "true; $0 }); //"
            let v1171 : bool = Fable.Core.RustInterop.emitRustExpr v1169 v1170 
            let v1172 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1173 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1172 
            let v1174 : Result<unit, string> = method145(v1173)
            let v1175 : string = v774 + v775 
            let x = v1174 //
            let v1176 : _ = x
            let v1177 : unit = ()
            (* run_target_args'
            let v1178 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1179 : string = $"true; let _fix_closure_v1177 = $0"
            let v1180 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1179 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1181 : string = $"true; let _fix_closure_v1177 = $0"
            let v1182 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1181 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1183 : string = $"true; let _fix_closure_v1177 = $0"
            let v1184 : bool = Fable.Core.RustInterop.emitRustExpr v1176 v1183 
            let _run_target_args'_v1178 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1178 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1178 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1178 = false 
            #endif
#else
            let _run_target_args'_v1178 = false 
            #endif
            let v1185 : bool = _run_target_args'_v1178 
            let v1187 : string = $"true; _fix_closure_v1177 " + v1175 + "); " + v774 + " // rust.fix_closure'"
            let v1188 : bool = Fable.Core.RustInterop.emitRustExpr () v1187 
            let v1189 : string = "__spawn"
            let v1190 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1189 
            let v1193 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method146()
            let v1194 : US30 option = v4 |> Option.map v1193 
            let v1208 : US30 = US30_1
            let v1209 : US30 = v1194 |> Option.defaultValue v1208 
            match v1209 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1213) -> (* Some *)
                let v1214 : string = "$0"
                let v1215 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v435 v1214 
                let v1216 : string = "v1215.lock()"
                let v1217 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1216 
                (* run_target_args'
                let v1219 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1220 : string = "$0.unwrap()"
                let v1221 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1220 
                let _run_target_args'_v1219 = v1221 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1222 : string = "$0.unwrap()"
                let v1223 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1222 
                let _run_target_args'_v1219 = v1223 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1224 : string = "$0.unwrap()"
                let v1225 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1217 v1224 
                let _run_target_args'_v1219 = v1225 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1226 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1226 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1227 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1227 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1228 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1228 
                #endif
#else
                let v1229 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1217 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1219 = v1229 
                #endif
                let v1230 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1219 
                let v1233 : std_sync_MutexGuard<std_process_ChildStdin option> = method147(v1230)
                let v1234 : string = "true; let mut v1233 = v1233"
                let v1235 : bool = Fable.Core.RustInterop.emitRustExpr () v1234 
                let v1236 : string = "&mut $0"
                let v1237 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1233 v1236 
                let v1238 : string = "Option::take($0)"
                let v1239 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1237 v1238 
                let v1240 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1241 : bool = Fable.Core.RustInterop.emitRustExpr v1239 v1240 
                let v1242 : string = "x"
                let v1243 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1242 
                let v1244 : string = "std::sync::Mutex::new(v1243)"
                let v1245 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1244 
                let v1246 : string = "std::sync::Arc::new(v1245)"
                let v1247 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1246 
                let v1248 : string = "true; $0 })"
                let v1249 : bool = Fable.Core.RustInterop.emitRustExpr v1247 v1248 
                let v1250 : string = "_optionm_map_"
                let v1251 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1250 
                let v1254 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method148()
                let v1255 : US31 option = v1251 |> Option.map v1254 
                let v1269 : US31 = US31_1
                let v1270 : US31 = v1255 |> Option.defaultValue v1269 
                match v1270 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1274) -> (* Some *)
                    v1213 v1274
                    let v1275 : string = "$0"
                    let v1276 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1274 v1275 
                    let v1277 : string = "v1276.lock()"
                    let v1278 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1277 
                    (* run_target_args'
                    let v1280 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1281 : string = "$0.unwrap()"
                    let v1282 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1281 
                    let _run_target_args'_v1280 = v1282 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1283 : string = "$0.unwrap()"
                    let v1284 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1283 
                    let _run_target_args'_v1280 = v1284 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1285 : string = "$0.unwrap()"
                    let v1286 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1278 v1285 
                    let _run_target_args'_v1280 = v1286 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1287 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1287 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1288 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1288 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1289 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1289 
                    #endif
#else
                    let v1290 : std_sync_MutexGuard<std_process_ChildStdin> = match v1278 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1280 = v1290 
                    #endif
                    let v1291 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1280 
                    let v1294 : std_sync_MutexGuard<std_process_ChildStdin> = method149(v1291)
                    let v1295 : string = "true; let mut v1294 = v1294"
                    let v1296 : bool = Fable.Core.RustInterop.emitRustExpr () v1295 
                    let v1297 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1298 : bool = Fable.Core.RustInterop.emitRustExpr v1294 v1297 
                    ()
            let v1299 : string = "$0"
            let v1300 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v305 v1299 
            let v1301 : string = "v1300.lock()"
            let v1302 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1301 
            (* run_target_args'
            let v1304 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1305 : string = "$0.unwrap()"
            let v1306 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1305 
            let _run_target_args'_v1304 = v1306 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1307 : string = "$0.unwrap()"
            let v1308 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1307 
            let _run_target_args'_v1304 = v1308 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1309 : string = "$0.unwrap()"
            let v1310 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1302 v1309 
            let _run_target_args'_v1304 = v1310 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1311 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1311 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1312 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1312 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1313 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1313 
            #endif
#else
            let v1314 : std_sync_MutexGuard<std_process_Child option> = match v1302 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1304 = v1314 
            #endif
            let v1315 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1304 
            let v1318 : std_sync_MutexGuard<std_process_Child option> = method133(v1315)
            let v1319 : string = "true; let mut v1318 = v1318"
            let v1320 : bool = Fable.Core.RustInterop.emitRustExpr () v1319 
            let v1321 : string = "&mut $0"
            let v1322 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1318 v1321 
            let v1323 : string = "Option::take($0)"
            let v1324 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1322 v1323 
            let v1325 : string = "$0.unwrap()"
            let v1326 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1324 v1325 
            let v1327 : string = "$0.wait_with_output()"
            let v1328 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1326 v1327 
            let v1329 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v1331 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1332 : string = "$0.map_err(|x| $1(x))"
            let v1333 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1332 
            let _run_target_args'_v1331 = v1333 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1334 : string = "$0.map_err(|x| $1(x))"
            let v1335 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1334 
            let _run_target_args'_v1331 = v1335 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1336 : string = "$0.map_err(|x| $1(x))"
            let v1337 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1328, v1329) v1336 
            let _run_target_args'_v1331 = v1337 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1338 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1338 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1339 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1339 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1340 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1340 
            #endif
#else
            let v1341 : Result<std_process_Output, std_string_String> = match v1328 with Ok x -> Ok x | Error x -> Error (v1329 x)
            let _run_target_args'_v1331 = v1341 
            #endif
            let v1342 : Result<std_process_Output, std_string_String> = _run_target_args'_v1331 
            let v1345 : string = "v1190"
            let v1346 : string = v1345 + v774 
            let v1347 : string = v1346 + v774 
            let v1348 : string = "v791"
            let v1349 : string = ", "
            let v1350 : string = v1348 + v1349 
            let v1351 : string = v1350 + v1347 
            let v1352 : string = "vec![" + v1351 + "]"
            let v1353 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1352 
            let v1354 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1355 : bool = Fable.Core.RustInterop.emitRustExpr v1353 v1354 
            let v1356 : string = "x"
            let v1357 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1356 
            let v1358 : string = "std::thread::JoinHandle::join($0)"
            let v1359 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1357 v1358 
            (* run_target_args'
            let v1361 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1362 : string = "$0.unwrap()"
            let v1363 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1362 
            let _run_target_args'_v1361 = v1363 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1364 : string = "$0.unwrap()"
            let v1365 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1364 
            let _run_target_args'_v1361 = v1365 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1366 : string = "$0.unwrap()"
            let v1367 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1359 v1366 
            let _run_target_args'_v1361 = v1367 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1368 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1368 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1369 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1370 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1370 
            #endif
#else
            let v1371 : Result<unit, string> = match v1359 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1361 = v1371 
            #endif
            let v1372 : Result<unit, string> = _run_target_args'_v1361 
            (* run_target_args'
            let v1375 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1376 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1376 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1377 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1377 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1378 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1372 v1378 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1372 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1379 : string = $"true"
            let v1380 : bool = Fable.Core.RustInterop.emitRustExpr () v1379 
            let v1381 : string = "true; }}); { //"
            let v1382 : bool = Fable.Core.RustInterop.emitRustExpr () v1381 
            let v1383 : (std_process_Output -> US32) = method150()
            let v1384 : (std_string_String -> US32) = method151()
            let v1386 : US32 = match v1342 with Ok x -> v1383 x | Error x -> v1384 x
            match v1386 with
            | US32_1(v1494) -> (* Error *)
                let v1495 : unit = ()
                let v1496 : (unit -> unit) = closure57(v1494)
                let v1497 : unit = (fun () -> v1496 (); v1495) ()
                let v1544 : US7 = US7_0(v1494)
                let v1545 : US28 = US28_1
                struct (-2, v1544, v1545)
            | US32_0(v1389) -> (* Ok *)
                let v1390 : string = "$0.status"
                let v1391 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1389 v1390 
                let v1392 : string = "$0.code()"
                let v1393 : int32 option = Fable.Core.RustInterop.emitRustExpr v1391 v1392 
                let v1396 : (int32 -> US33) = method153()
                let v1397 : US33 option = v1393 |> Option.map v1396 
                let v1411 : US33 = US33_1
                let v1412 : US33 = v1397 |> Option.defaultValue v1411 
                match v1412 with
                | US33_1 -> (* None *)
                    let v1419 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1424 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1425 : string = "&*$0"
                    let v1426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1425 
                    let _run_target_args'_v1424 = v1426 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1427 : string = "&*$0"
                    let v1428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1427 
                    let _run_target_args'_v1424 = v1428 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1429 : string = "&*$0"
                    let v1430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1419 v1429 
                    let _run_target_args'_v1424 = v1430 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1432 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1432 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1436 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1436 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1440 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1440 
                    #endif
#else
                    let v1444 : Ref<Str> = v1419 |> unbox<Ref<Str>>
                    let _run_target_args'_v1424 = v1444 
                    #endif
                    let v1447 : Ref<Str> = _run_target_args'_v1424 
                    (* run_target_args'
                    let v1457 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1458 : string = "String::from($0)"
                    let v1459 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1458 
                    let _run_target_args'_v1457 = v1459 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1460 : string = "String::from($0)"
                    let v1461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1460 
                    let _run_target_args'_v1457 = v1461 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1462 : string = "String::from($0)"
                    let v1463 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1462 
                    let _run_target_args'_v1457 = v1463 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1465 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1465 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1469 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1469 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1473 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1473 
                    #endif
#else
                    let v1477 : std_string_String = v1447 |> unbox<std_string_String>
                    let _run_target_args'_v1457 = v1477 
                    #endif
                    let v1480 : std_string_String = _run_target_args'_v1457 
                    let v1486 : US7 = US7_0(v1480)
                    let v1487 : US28 = US28_0(v456)
                    struct (-1, v1486, v1487)
                | US33_0(v1416) -> (* Some *)
                    let v1417 : US7 = US7_1
                    let v1418 : US28 = US28_0(v456)
                    struct (v1416, v1417, v1418)
    let v1617 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1609 with
        | US28_1 -> (* None *)
            let v1615 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1615
        | US28_0(v1610) -> (* Some *)
            let v1612 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1610 
            v1612
    let v1618 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1619 : bool = Fable.Core.RustInterop.emitRustExpr v1617 v1618 
    let v1620 : string = "x"
    let v1621 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1620 
    let v1622 : string = "$0"
    let v1623 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1621 v1622 
    let v1624 : string = "v1623.lock()"
    let v1625 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1624 
    (* run_target_args'
    let v1627 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1628 : string = "$0.unwrap()"
    let v1629 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1628 
    let _run_target_args'_v1627 = v1629 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1630 : string = "$0.unwrap()"
    let v1631 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1630 
    let _run_target_args'_v1627 = v1631 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1632 : string = "$0.unwrap()"
    let v1633 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1625 v1632 
    let _run_target_args'_v1627 = v1633 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1634 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1634 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1635 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1635 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1636 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1636 
    #endif
#else
    let v1637 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1625 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1627 = v1637 
    #endif
    let v1638 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v1627 
    let v1641 : string = "$0.iter()"
    let v1642 : _ = Fable.Core.RustInterop.emitRustExpr v1638 v1641 
    let v1643 : string = "$0.collect::<Vec<_>>()"
    let v1644 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1642 v1643 
    let v1645 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1646 : bool = Fable.Core.RustInterop.emitRustExpr v1644 v1645 
    let v1647 : string = "x"
    let v1648 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1647 
    let v1649 : string = "fable_library_rust::String_::fromString($0)"
    let v1650 : string = Fable.Core.RustInterop.emitRustExpr v1648 v1649 
    let v1651 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1652 : bool = Fable.Core.RustInterop.emitRustExpr v1650 v1651 
    let v1653 : string = "_vec_map"
    let v1654 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1653 
    let v1655 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v1656 : (string []) = Fable.Core.RustInterop.emitRustExpr v1654 v1655 
    let v1658 : string seq = v1656 |> Seq.ofArray
    let v1663 : string = method75()
    let v1664 : (string -> (string seq -> string)) = String.concat
    let v1665 : (string seq -> string) = v1664 v1663
    let v1666 : string = v1665 v1658
    let v1670 : string = "true; $0 })"
    let v1671 : bool = Fable.Core.RustInterop.emitRustExpr v1666 v1670 
    let v1672 : string = "_optionm_map_"
    let v1673 : string option = Fable.Core.RustInterop.emitRustExpr () v1672 
    let v1680 : US5 =
        match v1608 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1674) -> (* Some *)
            let v1675 : string = "fable_library_rust::String_::fromString($0)"
            let v1676 : string = Fable.Core.RustInterop.emitRustExpr v1674 v1675 
            US5_0(v1676)
    let v1684 : string =
        match v1680 with
        | US5_1 -> (* None *)
            let v1682 : string = ""
            v1682
        | US5_0(v1681) -> (* Some *)
            v1681
    let v1686 : string = v1673 |> Option.defaultValue v1684 
    let v1689 : unit = ()
    let v1690 : (unit -> unit) = closure59(v1607, v1686)
    let v1691 : unit = (fun () -> v1690 (); v1689) ()
    let v1740 : (int32 * string) = v1607, v1686 
    v1740 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v175 <- Some x
    let v1743 : (int32 * string) = match _capture_v175 with Some x -> x | None -> failwith "base.capture / _capture_v175=None"
    let (a, b) = v1743 
    let v3312 : int32 = a
    let v3313 : string = b
    let _run_target_args'_v15 = struct (v3312, v3313) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3320 : int32, v3321 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3320, v3321) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3328 : int32, v3329 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3328, v3329) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3336 : int32, v3337 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3336, v3337) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v3344 : int32, v3345 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3344, v3345) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v3352 : int32, v3353 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3352, v3353) 
    #endif
#else
    let v3358 : Async<struct (int32 * string)> = method156(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v3367 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v3370 : int32, v3371 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3367 = struct (v3370, v3371) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3378 : int32, v3379 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3367 = struct (v3378, v3379) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3386 : int32, v3387 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3367 = struct (v3386, v3387) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3394 : int32, v3395 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3367 = struct (v3394, v3395) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3400 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3401 : int32, v3402 : string) = v3400 v3358
    let _run_target_args'_v3367 = struct (v3401, v3402) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3403 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3404 : int32, v3405 : string) = v3403 v3358
    let _run_target_args'_v3367 = struct (v3404, v3405) 
    #endif
#else
    let v3406 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3407 : int32, v3408 : string) = v3406 v3358
    let _run_target_args'_v3367 = struct (v3407, v3408) 
    #endif
    let struct (v3409 : int32, v3410 : string) = _run_target_args'_v3367 
    let _run_target_args'_v15 = struct (v3409, v3410) 
    #endif
    let struct (v3415 : int32, v3416 : string) = _run_target_args'_v15 
    struct (v3415, v3416)
and method176 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "run_result"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "new_code_path"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v2}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v4, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v4, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v4.l0
    v136
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method176(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / format error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method82()
        let v48 : string = method175(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and closure69 () (v0 : string) : US5 =
    US5_0(v0)
and closure70 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method178 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "run_result'"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    (* run_target_args'
    let v122 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v123 : string = "format!(\"{:#?}\", $0)"
    let v124 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v123 
    let v125 : string = "fable_library_rust::String_::fromString($0)"
    let v126 : string = Fable.Core.RustInterop.emitRustExpr v124 v125 
    let _run_target_args'_v122 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "format!(\"{:#?}\", $0)"
    let v128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v127 
    let v129 : string = "fable_library_rust::String_::fromString($0)"
    let v130 : string = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let _run_target_args'_v122 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = "format!(\"{:#?}\", $0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v131 
    let v133 : string = "fable_library_rust::String_::fromString($0)"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let _run_target_args'_v122 = v134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = $"%A{v1}"
    let _run_target_args'_v122 = v136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = $"%A{v1}"
    let _run_target_args'_v122 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = $"%A{v1}"
    let _run_target_args'_v122 = v144 
    #endif
#else
    let v148 : string = $"%A{v1}"
    let _run_target_args'_v122 = v148 
    #endif
    let v151 : string = _run_target_args'_v122 
    let v158 : string = $"{v151}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v5, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = $"{v89}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v5, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v177 : string = "new_code_path"
    let v178 : string = $"{v177}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v5, v178)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v187 : string = $"{v30}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v5, v187)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v196 : string = $"{v2}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v5, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v205 : string = $"{v89}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v5, v205)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v215 : string = "external_command"
    let v216 : string = $"{v215}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v5, v216)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v225 : string = $"{v30}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v5, v225)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v234 : string = $"{v3}"
    let v237 : unit = ()
    let v238 : (unit -> unit) = closure7(v5, v234)
    let v239 : unit = (fun () -> v238 (); v237) ()
    let v244 : string = " }"
    let v245 : string = $"{v244}"
    let v248 : unit = ()
    let v249 : (unit -> unit) = closure7(v5, v245)
    let v250 : unit = (fun () -> v249 (); v248) ()
    let v253 : string = v5.l0
    v253
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure72 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method177(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v0, v1)
        method19(v49)
and closure71 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure72(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method180 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "exit_code"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v40 : string = $"{v0}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v5, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v50 : string = "; "
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v61 : string = "run_result"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v30}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v5, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v5, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v50}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v99 : string = "new_code_path"
    let v100 : string = $"{v99}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v5, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v109 : string = $"{v30}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v5, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v118 : string = $"{v2}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v5, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v127 : string = $"{v50}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v137 : string = "external_command"
    let v138 : string = $"{v137}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v147 : string = $"{v30}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v156 : string = $"{v3}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v5, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v5, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v175 : string = v5.l0
    v175
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure73 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method179(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method181 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure74 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method181(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method182 () : string =
    let v0 : string = "py-path"
    v0
and method183 () : string =
    let v0 : string = "env"
    v0
and method185 (v0 : US38, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "env"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v40 : string = $"%A{v0}"
    let v44 : string = $"{v40}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v5, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v54 : string = "; "
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v5, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v65 : string = "exit_code"
    let v66 : string = $"{v65}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v5, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v75 : string = $"{v30}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v84 : string = $"{v1}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = $"{v54}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v5, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v103 : string = "run_result"
    let v104 : string = $"{v103}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v5, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v30}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v5, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v2}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = $"{v54}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v5, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v141 : string = "new_code_path"
    let v142 : string = $"{v141}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v30}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v3}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v170 : string = " }"
    let v171 : string = $"{v170}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v5, v171)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v179 : string = v5.l0
    v179
and method184 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method185(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / env install error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure75 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method184(v29, v30, v31, v32, v33, v34, v47, v48, v0, v3, v2, v1)
        method19(v49)
and closure76 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method187 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "run_result"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "new_code_path"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "external_command"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method187(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure78 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method186(v29, v30, v31, v32, v33, v34, v47, v48, v3, v1, v0, v2)
        method19(v49)
and closure77 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure78(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method188 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure79 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method188(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method189 () : string =
    let v0 : string = "fs-path"
    v0
and method190 () : string =
    let v0 : string = "command"
    v0
and method191 () : string =
    let v0 : string = "path"
    v0
and method193 (v0 : string) : string =
    let v1 : string = method34()
    let v2 : string = method36(v1, v0)
    method69(v2)
and closure80 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method193(v2)
and method192 () : (std_string_String -> string) =
    closure80()
and method194 () : string =
    let v0 : string = "retries"
    v0
and method195 () : string =
    let v0 : string = "working-directory"
    v0
and method198 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "repl_result"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "retry"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v2}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v4, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v4, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v4.l0
    v136
and method197 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method198(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.run / repl error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure81 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v1}/{v0}"
        let v50 : string = method197(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v49)
        method19(v50)
and method196 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v22 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v20 : string option = None
            v20
        | US5_0(v15) -> (* Some *)
            let v17 : string option = Some v15 
            v17
    let v23 : bool = false
    let struct (v24 : int32, v25 : string) = method101(v9, v4, v14, v6, v7, v23, v22)
    let v26 : bool = v24 = 0
    let v28 : bool =
        if v26 then
            true
        else
            let v27 : bool = v3 >= v1
            v27
    if v28 then
        struct (v24, v25)
    else
        let v29 : unit = ()
        let v30 : (unit -> unit) = closure81(v1, v3, v25, v24)
        let v31 : unit = (fun () -> v30 (); v29) ()
        let v79 : uint8 = v3 + 1uy
        method196(v0, v1, v2, v79)
and method200 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "jupyter_result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method200(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / jupyter nbconvert"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure82 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method199(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method202 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "pwsh_replace_html_result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method201 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method202(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / html cell ids"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure83 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method201(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method204 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method203 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method204(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method203(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method205 () : string =
    let v0 : string = "cleanup"
    v0
and method206 () : string =
    let v0 : string = "wasm"
    v0
and method207 () : string =
    let v0 : string = "contract"
    v0
and method208 (v0 : string, v1 : string, v2 : US39) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "extension"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "code"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "runtime"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"%A{v2}"
    let v121 : string = $"{v117}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v131 : string = " }"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v4, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v140 : string = v4.l0
    v140
and method209 (v0 : US5, v1 : string, v2 : US42, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method36(v3, v4)
    let v6 : string = method36(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US42_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method36(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US41_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US41_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US41_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method36(v10, v42)
            method36(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method211 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method211(v0, v4, v2)
        let v6 : string = method36(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method212 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method212(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method210 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method78(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method36(v4, v7)
    let v9 : string = method46(v8)
    method76(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method211(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method124(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method212(v3, v35)
    let v37 : string list = []
    let v38 : string list = method124(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method36(v4, v58)
    let v60 : string = method46(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v63 : string = "\n"
    let v64 : string = v61 + v63 
    let v65 : string = v64 + v62 
    let v66 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v67 : string = v65 + v63 
    let v68 : string = v67 + v66 
    let v69 : string = $"    <LangVersion>preview</LangVersion>"
    let v70 : string = v68 + v63 
    let v71 : string = v70 + v69 
    let v72 : string = $"    <RollForward>Major</RollForward>"
    let v73 : string = v71 + v63 
    let v74 : string = v73 + v72 
    let v75 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v76 : string = v74 + v63 
    let v77 : string = v76 + v75 
    let v78 : string = $"    <PublishAot>false</PublishAot>"
    let v79 : string = v77 + v63 
    let v80 : string = v79 + v78 
    let v81 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v82 : string = v80 + v63 
    let v83 : string = v82 + v81 
    let v84 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v85 : string = v83 + v63 
    let v86 : string = v85 + v84 
    let v87 : string = $"    <SelfContained>true</SelfContained>"
    let v88 : string = v86 + v63 
    let v89 : string = v88 + v87 
    let v90 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v91 : string = v89 + v63 
    let v92 : string = v91 + v90 
    let v93 : string = $"    <OutputType>Exe</OutputType>"
    let v94 : string = v92 + v63 
    let v95 : string = v94 + v93 
    let v96 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v97 : string = v95 + v63 
    let v98 : string = v97 + v96 
    let v99 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v100 : string = v98 + v63 
    let v101 : string = v100 + v99 
    let v102 : string = $"</PropertyGroup>"
    let v103 : string = v101 + v63 
    let v104 : string = v103 + v102 
    let v105 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v106 : string = v104 + v63 
    let v107 : string = v106 + v105 
    let v108 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v109 : string = v107 + v63 
    let v110 : string = v109 + v108 
    let v111 : string = $"</PropertyGroup>"
    let v112 : string = v110 + v63 
    let v113 : string = v112 + v111 
    let v114 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v115 : string = v113 + v63 
    let v116 : string = v115 + v114 
    let v117 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v118 : string = v116 + v63 
    let v119 : string = v118 + v117 
    let v120 : string = $"</PropertyGroup>"
    let v121 : string = v119 + v63 
    let v122 : string = v121 + v120 
    let v123 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v124 : string = v122 + v63 
    let v125 : string = v124 + v123 
    let v126 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v127 : string = v125 + v63 
    let v128 : string = v127 + v126 
    let v129 : string = $"</PropertyGroup>"
    let v130 : string = v128 + v63 
    let v131 : string = v130 + v129 
    let v132 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v133 : string = v131 + v63 
    let v134 : string = v133 + v132 
    let v135 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v136 : string = v134 + v63 
    let v137 : string = v136 + v135 
    let v138 : string = $"</PropertyGroup>"
    let v139 : string = v137 + v63 
    let v140 : string = v139 + v138 
    let v141 : string = $"<ItemGroup>"
    let v142 : string = v140 + v63 
    let v143 : string = v142 + v141 
    let v144 : string = $"    {v32}"
    let v145 : string = v143 + v63 
    let v146 : string = v145 + v144 
    let v147 : string = $"    <Compile Include=\"{v9}\" />"
    let v148 : string = v146 + v63 
    let v149 : string = v148 + v147 
    let v150 : string = $"</ItemGroup>"
    let v151 : string = v149 + v63 
    let v152 : string = v151 + v150 
    let v153 : string = $"<ItemGroup>"
    let v154 : string = v152 + v63 
    let v155 : string = v154 + v153 
    let v156 : string = $"    {v55}"
    let v157 : string = v155 + v63 
    let v158 : string = v157 + v156 
    let v159 : string = $"</ItemGroup>"
    let v160 : string = v158 + v63 
    let v161 : string = v160 + v159 
    let v162 : string = $"</Project>"
    let v163 : string = v161 + v63 
    let v164 : string = v163 + v162 
    method76(v60, v164)
    v60
and closure85 () (v0 : chrono_DateTime<chrono_Utc>) : US43 =
    US43_0(v0)
and method214 () : (chrono_DateTime<chrono_Utc> -> US43) =
    closure85()
and method215 () : string =
    let v0 : string = "hh:mm"
    v0
and method216 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method217 () : string =
    let v0 : string = "hhmm"
    v0
and method213 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v569 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v571 : System.DateTime = System.DateTime.UnixEpoch
    let v575 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v576 : System.DateTime = v575 v571
    let v580 : System.DateTimeKind = System.DateTimeKind.Local
    let v581 : System.DateTime = System.DateTime.SpecifyKind (v1, v580)
    let v585 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v586 : System.DateTime = v585 v581
    (* run_target_args'
    let v592 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v593 : (System.DateTime -> int64) = _.Ticks
    let v594 : int64 = v593 v586
    let _run_target_args'_v592 = v594 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v595 : (System.DateTime -> int64) = _.Ticks
    let v596 : int64 = v595 v586
    let _run_target_args'_v592 = v596 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v598 : int64 = null |> unbox<int64>
    let _run_target_args'_v592 = v598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v601 : (System.DateTime -> int64) = _.Ticks
    let v602 : int64 = v601 v586
    let _run_target_args'_v592 = v602 
    #endif
#if FABLE_COMPILER_PYTHON
    let v603 : (System.DateTime -> int64) = _.Ticks
    let v604 : int64 = v603 v586
    let _run_target_args'_v592 = v604 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v605 : (System.DateTime -> int64) = _.Ticks
    let v606 : int64 = v605 v586
    let _run_target_args'_v592 = v606 
    #endif
#else
    let v607 : (System.DateTime -> int64) = _.Ticks
    let v608 : int64 = v607 v586
    let _run_target_args'_v592 = v608 
    #endif
    let v609 : int64 = _run_target_args'_v592 
    (* run_target_args'
    let v632 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v633 : (System.DateTime -> int64) = _.Ticks
    let v634 : int64 = v633 v576
    let _run_target_args'_v632 = v634 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v635 : (System.DateTime -> int64) = _.Ticks
    let v636 : int64 = v635 v576
    let _run_target_args'_v632 = v636 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v638 : int64 = null |> unbox<int64>
    let _run_target_args'_v632 = v638 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v641 : (System.DateTime -> int64) = _.Ticks
    let v642 : int64 = v641 v576
    let _run_target_args'_v632 = v642 
    #endif
#if FABLE_COMPILER_PYTHON
    let v643 : (System.DateTime -> int64) = _.Ticks
    let v644 : int64 = v643 v576
    let _run_target_args'_v632 = v644 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v645 : (System.DateTime -> int64) = _.Ticks
    let v646 : int64 = v645 v576
    let _run_target_args'_v632 = v646 
    #endif
#else
    let v647 : (System.DateTime -> int64) = _.Ticks
    let v648 : int64 = v647 v576
    let _run_target_args'_v632 = v648 
    #endif
    let v649 : int64 = _run_target_args'_v632 
    let v670 : int64 = v609 |> int64 
    let v674 : int64 = v649 |> int64 
    let v677 : int64 = v670 - v674
    let v678 : int64 = v677 / 10L
    let v679 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v680 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v678 v679 
    let v683 : (chrono_DateTime<chrono_Utc> -> US43) = method214()
    let v684 : US43 option = v680 |> Option.map v683 
    let v698 : US43 = US43_1
    let v699 : US43 = v684 |> Option.defaultValue v698 
    let v719 : US5 =
        match v699 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v703) -> (* Some *)
            let v704 : string = "$0.naive_utc()"
            let v705 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v703 v704 
            let v706 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v707 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v705 v706 
            let v708 : string = "%Y%m%d-%H%M-%S%f"
            let v709 : string = "r#\"" + v708 + "\"#"
            let v710 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v709 
            let v711 : string = "$0.format($1).to_string()"
            let v712 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v707, v710) v711 
            let v713 : string = "fable_library_rust::String_::fromString($0)"
            let v714 : string = Fable.Core.RustInterop.emitRustExpr v712 v713 
            let v715 : string = $"{v714.[0..17]}-{v714.[18..21]}-{v714.[22]}"
            US5_0(v715)
    let v723 : string =
        match v719 with
        | US5_1 -> (* None *)
            let v721 : string = ""
            v721
        | US5_0(v720) -> (* Some *)
            v720
    (* run_target_args'
    let v728 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v729 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v730 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v729 
    let _run_target_args'_v728 = v730 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v732 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v732 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v736 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v736 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v740 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v740 
    #endif
#if FABLE_COMPILER_PYTHON
    let v744 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v728 = v744 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v747 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v728 = v747 
    #endif
#else
    let v748 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v728 = v748 
    #endif
    let v749 : System.TimeZoneInfo = _run_target_args'_v728 
    (* run_target_args'
    let v762 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v766 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v767 : (System.DateTime -> int64) = _.Ticks
    let v768 : int64 = v767 v586
    let _run_target_args'_v766 = v768 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v769 : (System.DateTime -> int64) = _.Ticks
    let v770 : int64 = v769 v586
    let _run_target_args'_v766 = v770 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v772 : int64 = null |> unbox<int64>
    let _run_target_args'_v766 = v772 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v775 : (System.DateTime -> int64) = _.Ticks
    let v776 : int64 = v775 v586
    let _run_target_args'_v766 = v776 
    #endif
#if FABLE_COMPILER_PYTHON
    let v777 : (System.DateTime -> int64) = _.Ticks
    let v778 : int64 = v777 v586
    let _run_target_args'_v766 = v778 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v779 : (System.DateTime -> int64) = _.Ticks
    let v780 : int64 = v779 v586
    let _run_target_args'_v766 = v780 
    #endif
#else
    let v781 : (System.DateTime -> int64) = _.Ticks
    let v782 : int64 = v781 v586
    let _run_target_args'_v766 = v782 
    #endif
    let v783 : int64 = _run_target_args'_v766 
    let v803 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v804 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v783) v803 
    let v806 : System.TimeSpan = v804 |> System.TimeSpan 
    let _run_target_args'_v762 = v806 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v812 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v813 : (System.DateTime -> int64) = _.Ticks
    let v814 : int64 = v813 v586
    let _run_target_args'_v812 = v814 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v815 : (System.DateTime -> int64) = _.Ticks
    let v816 : int64 = v815 v586
    let _run_target_args'_v812 = v816 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v818 : int64 = null |> unbox<int64>
    let _run_target_args'_v812 = v818 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v821 : (System.DateTime -> int64) = _.Ticks
    let v822 : int64 = v821 v586
    let _run_target_args'_v812 = v822 
    #endif
#if FABLE_COMPILER_PYTHON
    let v823 : (System.DateTime -> int64) = _.Ticks
    let v824 : int64 = v823 v586
    let _run_target_args'_v812 = v824 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v825 : (System.DateTime -> int64) = _.Ticks
    let v826 : int64 = v825 v586
    let _run_target_args'_v812 = v826 
    #endif
#else
    let v827 : (System.DateTime -> int64) = _.Ticks
    let v828 : int64 = v827 v586
    let _run_target_args'_v812 = v828 
    #endif
    let v829 : int64 = _run_target_args'_v812 
    let v849 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v850 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v829) v849 
    let v852 : System.TimeSpan = v850 |> System.TimeSpan 
    let _run_target_args'_v762 = v852 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v856 : US3 = US3_2
    let v857 : US4 = US4_3(v856)
    let v858 : string = $"date_time.get_utc_offset / target: {v857}"
    let v859 : System.TimeSpan = failwith<System.TimeSpan> v858
    let _run_target_args'_v762 = v859 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v863 : US3 = US3_0
    let v864 : US4 = US4_4(v863)
    let v865 : string = $"date_time.get_utc_offset / target: {v864}"
    let v866 : System.TimeSpan = failwith<System.TimeSpan> v865
    let _run_target_args'_v762 = v866 
    #endif
#if FABLE_COMPILER_PYTHON
    let v870 : US3 = US3_0
    let v871 : US4 = US4_5(v870)
    let v872 : string = $"date_time.get_utc_offset / target: {v871}"
    let v873 : System.TimeSpan = failwith<System.TimeSpan> v872
    let _run_target_args'_v762 = v873 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v876 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v881 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v882 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v883 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v882 
    let _run_target_args'_v881 = v883 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v885 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v885 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v889 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v889 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v893 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v893 
    #endif
#if FABLE_COMPILER_PYTHON
    let v897 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v881 = v897 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v900 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v881 = v900 
    #endif
#else
    let v901 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v881 = v901 
    #endif
    let v902 : System.TimeZoneInfo = _run_target_args'_v881 
    let v908 : (System.DateTime -> System.TimeSpan) = v876 v902
    let v909 : System.TimeSpan = v908 v586
    let _run_target_args'_v762 = v909 
    #endif
#else
    let v910 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v915 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v916 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v917 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v916 
    let _run_target_args'_v915 = v917 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v919 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v919 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v923 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v927 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v927 
    #endif
#if FABLE_COMPILER_PYTHON
    let v931 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v915 = v931 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v934 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v915 = v934 
    #endif
#else
    let v935 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v915 = v935 
    #endif
    let v936 : System.TimeZoneInfo = _run_target_args'_v915 
    let v942 : (System.DateTime -> System.TimeSpan) = v910 v936
    let v943 : System.TimeSpan = v942 v586
    let _run_target_args'_v762 = v943 
    #endif
    let v944 : System.TimeSpan = _run_target_args'_v762 
    let v954 : (System.TimeSpan -> int32) = _.Hours
    let v955 : int32 = v954 v944
    let v958 : bool = v955 > 0
    let v959 : uint8 =
        if v958 then
            1uy
        else
            0uy
    let v960 : string = method215()
    (* run_target_args'
    let v1014 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1015 : string = "$0.toString($1)"
    let v1016 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1015 
    let _run_target_args'_v1014 = v1016 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1017 : string = "$0.toString($1)"
    let v1018 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1017 
    let _run_target_args'_v1014 = v1018 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1019 : string = "$0.toString($1)"
    let v1020 : string = Fable.Core.RustInterop.emitRustExpr struct (v944, v960) v1019 
    let _run_target_args'_v1014 = v1020 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1021 : string = v944.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1014 = v1021 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1022 : string = v944.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1014 = v1022 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1024 : string = v944.ToString v960 
    let _run_target_args'_v1014 = v1024 
    #endif
#else
    let v1077 : string = v944.ToString v960 
    let _run_target_args'_v1014 = v1077 
    #endif
    let v1129 : string = _run_target_args'_v1014 
    let v1184 : string = $"{v959}{v1129.[0..1]}{v1129.[3..4]}"
    let v1186 : (System.Guid -> string) = _.ToString()
    let v1187 : string = v1186 v0
    let v1190 : int32 = v723.Length
    let v1191 : int32 = v1184.Length
    let v1192 : int32 = v1190 + v1191
    let v1194 : (string -> int32) = String.length
    let v1195 : int32 = v1194 v1187
    let v1203 : int32 = v1192 |> int32 
    let v1216 : int32 = v1195 |> int32 
    let v1224 : int32 = v1216 - 1
    let v1226 : string = v1187.[int v1203..int v1224]
    let v1230 : string = $"{v723}{v1184}{v1226}"
    (* run_target_args'
    let v1235 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1237 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1237 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1241 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1241 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1245 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1235 = v1245 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1249 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1249 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1253 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1253 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1257 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1257 
    #endif
#else
    let v1261 : System.Guid = v1230 |> System.Guid 
    let _run_target_args'_v1235 = v1261 
    #endif
    let v1264 : System.Guid = _run_target_args'_v1235 
    let _run_target_args'_v569 = v1264 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1271 : System.DateTime = System.DateTime.UnixEpoch
    let v1275 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1276 : System.DateTime = v1275 v1271
    let v1280 : System.DateTimeKind = System.DateTimeKind.Local
    let v1281 : System.DateTime = System.DateTime.SpecifyKind (v1, v1280)
    let v1285 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1286 : System.DateTime = v1285 v1281
    (* run_target_args'
    let v1292 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1293 : (System.DateTime -> int64) = _.Ticks
    let v1294 : int64 = v1293 v1286
    let _run_target_args'_v1292 = v1294 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1295 : (System.DateTime -> int64) = _.Ticks
    let v1296 : int64 = v1295 v1286
    let _run_target_args'_v1292 = v1296 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1298 : int64 = null |> unbox<int64>
    let _run_target_args'_v1292 = v1298 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1301 : (System.DateTime -> int64) = _.Ticks
    let v1302 : int64 = v1301 v1286
    let _run_target_args'_v1292 = v1302 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1303 : (System.DateTime -> int64) = _.Ticks
    let v1304 : int64 = v1303 v1286
    let _run_target_args'_v1292 = v1304 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1305 : (System.DateTime -> int64) = _.Ticks
    let v1306 : int64 = v1305 v1286
    let _run_target_args'_v1292 = v1306 
    #endif
#else
    let v1307 : (System.DateTime -> int64) = _.Ticks
    let v1308 : int64 = v1307 v1286
    let _run_target_args'_v1292 = v1308 
    #endif
    let v1309 : int64 = _run_target_args'_v1292 
    (* run_target_args'
    let v1332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1333 : (System.DateTime -> int64) = _.Ticks
    let v1334 : int64 = v1333 v1276
    let _run_target_args'_v1332 = v1334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1335 : (System.DateTime -> int64) = _.Ticks
    let v1336 : int64 = v1335 v1276
    let _run_target_args'_v1332 = v1336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1338 : int64 = null |> unbox<int64>
    let _run_target_args'_v1332 = v1338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1341 : (System.DateTime -> int64) = _.Ticks
    let v1342 : int64 = v1341 v1276
    let _run_target_args'_v1332 = v1342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1343 : (System.DateTime -> int64) = _.Ticks
    let v1344 : int64 = v1343 v1276
    let _run_target_args'_v1332 = v1344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1345 : (System.DateTime -> int64) = _.Ticks
    let v1346 : int64 = v1345 v1276
    let _run_target_args'_v1332 = v1346 
    #endif
#else
    let v1347 : (System.DateTime -> int64) = _.Ticks
    let v1348 : int64 = v1347 v1276
    let _run_target_args'_v1332 = v1348 
    #endif
    let v1349 : int64 = _run_target_args'_v1332 
    let v1370 : int64 = v1309 |> int64 
    let v1374 : int64 = v1349 |> int64 
    let v1377 : int64 = v1370 - v1374
    let v1378 : int64 = v1377 / 10L
    let v1379 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1380 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1378 v1379 
    let v1383 : (chrono_DateTime<chrono_Utc> -> US43) = method214()
    let v1384 : US43 option = v1380 |> Option.map v1383 
    let v1398 : US43 = US43_1
    let v1399 : US43 = v1384 |> Option.defaultValue v1398 
    let v1419 : US5 =
        match v1399 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v1403) -> (* Some *)
            let v1404 : string = "$0.naive_utc()"
            let v1405 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1403 v1404 
            let v1406 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1407 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
            let v1408 : string = "%Y%m%d-%H%M-%S%f"
            let v1409 : string = "r#\"" + v1408 + "\"#"
            let v1410 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1409 
            let v1411 : string = "$0.format($1).to_string()"
            let v1412 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1407, v1410) v1411 
            let v1413 : string = "fable_library_rust::String_::fromString($0)"
            let v1414 : string = Fable.Core.RustInterop.emitRustExpr v1412 v1413 
            let v1415 : string = $"{v1414.[0..17]}-{v1414.[18..21]}-{v1414.[22]}"
            US5_0(v1415)
    let v1423 : string =
        match v1419 with
        | US5_1 -> (* None *)
            let v1421 : string = ""
            v1421
        | US5_0(v1420) -> (* Some *)
            v1420
    (* run_target_args'
    let v1428 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1429 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1430 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1429 
    let _run_target_args'_v1428 = v1430 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1432 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1436 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1436 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1440 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1428 = v1444 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1447 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1428 = v1447 
    #endif
#else
    let v1448 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1428 = v1448 
    #endif
    let v1449 : System.TimeZoneInfo = _run_target_args'_v1428 
    (* run_target_args'
    let v1462 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1466 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1467 : (System.DateTime -> int64) = _.Ticks
    let v1468 : int64 = v1467 v1286
    let _run_target_args'_v1466 = v1468 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1469 : (System.DateTime -> int64) = _.Ticks
    let v1470 : int64 = v1469 v1286
    let _run_target_args'_v1466 = v1470 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1472 : int64 = null |> unbox<int64>
    let _run_target_args'_v1466 = v1472 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1475 : (System.DateTime -> int64) = _.Ticks
    let v1476 : int64 = v1475 v1286
    let _run_target_args'_v1466 = v1476 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1477 : (System.DateTime -> int64) = _.Ticks
    let v1478 : int64 = v1477 v1286
    let _run_target_args'_v1466 = v1478 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1479 : (System.DateTime -> int64) = _.Ticks
    let v1480 : int64 = v1479 v1286
    let _run_target_args'_v1466 = v1480 
    #endif
#else
    let v1481 : (System.DateTime -> int64) = _.Ticks
    let v1482 : int64 = v1481 v1286
    let _run_target_args'_v1466 = v1482 
    #endif
    let v1483 : int64 = _run_target_args'_v1466 
    let v1503 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1504 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1286, v1483) v1503 
    let v1506 : System.TimeSpan = v1504 |> System.TimeSpan 
    let _run_target_args'_v1462 = v1506 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1512 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1513 : (System.DateTime -> int64) = _.Ticks
    let v1514 : int64 = v1513 v1286
    let _run_target_args'_v1512 = v1514 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1515 : (System.DateTime -> int64) = _.Ticks
    let v1516 : int64 = v1515 v1286
    let _run_target_args'_v1512 = v1516 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1518 : int64 = null |> unbox<int64>
    let _run_target_args'_v1512 = v1518 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1521 : (System.DateTime -> int64) = _.Ticks
    let v1522 : int64 = v1521 v1286
    let _run_target_args'_v1512 = v1522 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1523 : (System.DateTime -> int64) = _.Ticks
    let v1524 : int64 = v1523 v1286
    let _run_target_args'_v1512 = v1524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1525 : (System.DateTime -> int64) = _.Ticks
    let v1526 : int64 = v1525 v1286
    let _run_target_args'_v1512 = v1526 
    #endif
#else
    let v1527 : (System.DateTime -> int64) = _.Ticks
    let v1528 : int64 = v1527 v1286
    let _run_target_args'_v1512 = v1528 
    #endif
    let v1529 : int64 = _run_target_args'_v1512 
    let v1549 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1550 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1286, v1529) v1549 
    let v1552 : System.TimeSpan = v1550 |> System.TimeSpan 
    let _run_target_args'_v1462 = v1552 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1556 : US3 = US3_2
    let v1557 : US4 = US4_3(v1556)
    let v1558 : string = $"date_time.get_utc_offset / target: {v1557}"
    let v1559 : System.TimeSpan = failwith<System.TimeSpan> v1558
    let _run_target_args'_v1462 = v1559 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1563 : US3 = US3_0
    let v1564 : US4 = US4_4(v1563)
    let v1565 : string = $"date_time.get_utc_offset / target: {v1564}"
    let v1566 : System.TimeSpan = failwith<System.TimeSpan> v1565
    let _run_target_args'_v1462 = v1566 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1570 : US3 = US3_0
    let v1571 : US4 = US4_5(v1570)
    let v1572 : string = $"date_time.get_utc_offset / target: {v1571}"
    let v1573 : System.TimeSpan = failwith<System.TimeSpan> v1572
    let _run_target_args'_v1462 = v1573 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1576 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1581 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1582 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1583 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1582 
    let _run_target_args'_v1581 = v1583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1585 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1585 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1589 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1589 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1593 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1593 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1597 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1581 = v1597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1600 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1581 = v1600 
    #endif
#else
    let v1601 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1581 = v1601 
    #endif
    let v1602 : System.TimeZoneInfo = _run_target_args'_v1581 
    let v1608 : (System.DateTime -> System.TimeSpan) = v1576 v1602
    let v1609 : System.TimeSpan = v1608 v1286
    let _run_target_args'_v1462 = v1609 
    #endif
#else
    let v1610 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1615 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1616 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1617 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1616 
    let _run_target_args'_v1615 = v1617 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1619 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1619 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1623 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1623 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1627 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1627 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1631 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1615 = v1631 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1634 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1634 
    #endif
#else
    let v1635 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1615 = v1635 
    #endif
    let v1636 : System.TimeZoneInfo = _run_target_args'_v1615 
    let v1642 : (System.DateTime -> System.TimeSpan) = v1610 v1636
    let v1643 : System.TimeSpan = v1642 v1286
    let _run_target_args'_v1462 = v1643 
    #endif
    let v1644 : System.TimeSpan = _run_target_args'_v1462 
    let v1654 : (System.TimeSpan -> int32) = _.Hours
    let v1655 : int32 = v1654 v1644
    let v1658 : bool = v1655 > 0
    let v1659 : uint8 =
        if v1658 then
            1uy
        else
            0uy
    let v1660 : string = method215()
    (* run_target_args'
    let v1714 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1715 : string = "$0.toString($1)"
    let v1716 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1715 
    let _run_target_args'_v1714 = v1716 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1717 : string = "$0.toString($1)"
    let v1718 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1717 
    let _run_target_args'_v1714 = v1718 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1719 : string = "$0.toString($1)"
    let v1720 : string = Fable.Core.RustInterop.emitRustExpr struct (v1644, v1660) v1719 
    let _run_target_args'_v1714 = v1720 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1721 : string = v1644.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1714 = v1721 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1722 : string = v1644.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1714 = v1722 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1724 : string = v1644.ToString v1660 
    let _run_target_args'_v1714 = v1724 
    #endif
#else
    let v1777 : string = v1644.ToString v1660 
    let _run_target_args'_v1714 = v1777 
    #endif
    let v1829 : string = _run_target_args'_v1714 
    let v1884 : string = $"{v1659}{v1829.[0..1]}{v1829.[3..4]}"
    let v1886 : (System.Guid -> string) = _.ToString()
    let v1887 : string = v1886 v0
    let v1890 : int32 = v1423.Length
    let v1891 : int32 = v1884.Length
    let v1892 : int32 = v1890 + v1891
    let v1894 : (string -> int32) = String.length
    let v1895 : int32 = v1894 v1887
    let v1903 : int32 = v1892 |> int32 
    let v1916 : int32 = v1895 |> int32 
    let v1924 : int32 = v1916 - 1
    let v1926 : string = v1887.[int v1903..int v1924]
    let v1930 : string = $"{v1423}{v1884}{v1926}"
    (* run_target_args'
    let v1935 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1937 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1937 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1941 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1941 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1945 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1935 = v1945 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1949 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1949 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1953 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1953 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1957 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1957 
    #endif
#else
    let v1961 : System.Guid = v1930 |> System.Guid 
    let _run_target_args'_v1935 = v1961 
    #endif
    let v1964 : System.Guid = _run_target_args'_v1935 
    let _run_target_args'_v569 = v1964 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1971 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v569 = v1971 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1974 : string = method216()
    let v1976 : bool = v1974 = ""
    let v1978 : string =
        if v1976 then
            let v1977 : string = "M-d-y hh:mm:ss tt"
            v1977
        else
            v1974
    let v1979 : (string -> string) = v1.ToString
    let v1980 : string = v1979 v1978
    (* run_target_args'
    let v1999 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2000 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2001 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2000 
    let _run_target_args'_v1999 = v2001 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2003 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2003 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2007 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2007 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2011 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2011 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2015 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1999 = v2015 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2018 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2018 
    #endif
#else
    let v2019 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1999 = v2019 
    #endif
    let v2020 : System.TimeZoneInfo = _run_target_args'_v1999 
    (* run_target_args'
    let v2033 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2037 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2038 : (System.DateTime -> int64) = _.Ticks
    let v2039 : int64 = v2038 v1
    let _run_target_args'_v2037 = v2039 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2040 : (System.DateTime -> int64) = _.Ticks
    let v2041 : int64 = v2040 v1
    let _run_target_args'_v2037 = v2041 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2043 : int64 = null |> unbox<int64>
    let _run_target_args'_v2037 = v2043 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2046 : (System.DateTime -> int64) = _.Ticks
    let v2047 : int64 = v2046 v1
    let _run_target_args'_v2037 = v2047 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2048 : (System.DateTime -> int64) = _.Ticks
    let v2049 : int64 = v2048 v1
    let _run_target_args'_v2037 = v2049 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2050 : (System.DateTime -> int64) = _.Ticks
    let v2051 : int64 = v2050 v1
    let _run_target_args'_v2037 = v2051 
    #endif
#else
    let v2052 : (System.DateTime -> int64) = _.Ticks
    let v2053 : int64 = v2052 v1
    let _run_target_args'_v2037 = v2053 
    #endif
    let v2054 : int64 = _run_target_args'_v2037 
    let v2074 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2075 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2054) v2074 
    let v2077 : System.TimeSpan = v2075 |> System.TimeSpan 
    let _run_target_args'_v2033 = v2077 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2083 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2084 : (System.DateTime -> int64) = _.Ticks
    let v2085 : int64 = v2084 v1
    let _run_target_args'_v2083 = v2085 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2086 : (System.DateTime -> int64) = _.Ticks
    let v2087 : int64 = v2086 v1
    let _run_target_args'_v2083 = v2087 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2089 : int64 = null |> unbox<int64>
    let _run_target_args'_v2083 = v2089 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2092 : (System.DateTime -> int64) = _.Ticks
    let v2093 : int64 = v2092 v1
    let _run_target_args'_v2083 = v2093 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2094 : (System.DateTime -> int64) = _.Ticks
    let v2095 : int64 = v2094 v1
    let _run_target_args'_v2083 = v2095 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2096 : (System.DateTime -> int64) = _.Ticks
    let v2097 : int64 = v2096 v1
    let _run_target_args'_v2083 = v2097 
    #endif
#else
    let v2098 : (System.DateTime -> int64) = _.Ticks
    let v2099 : int64 = v2098 v1
    let _run_target_args'_v2083 = v2099 
    #endif
    let v2100 : int64 = _run_target_args'_v2083 
    let v2120 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2121 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2100) v2120 
    let v2123 : System.TimeSpan = v2121 |> System.TimeSpan 
    let _run_target_args'_v2033 = v2123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2127 : US3 = US3_2
    let v2128 : US4 = US4_3(v2127)
    let v2129 : string = $"date_time.get_utc_offset / target: {v2128}"
    let v2130 : System.TimeSpan = failwith<System.TimeSpan> v2129
    let _run_target_args'_v2033 = v2130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2134 : US3 = US3_0
    let v2135 : US4 = US4_4(v2134)
    let v2136 : string = $"date_time.get_utc_offset / target: {v2135}"
    let v2137 : System.TimeSpan = failwith<System.TimeSpan> v2136
    let _run_target_args'_v2033 = v2137 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2141 : US3 = US3_0
    let v2142 : US4 = US4_5(v2141)
    let v2143 : string = $"date_time.get_utc_offset / target: {v2142}"
    let v2144 : System.TimeSpan = failwith<System.TimeSpan> v2143
    let _run_target_args'_v2033 = v2144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2147 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2152 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2153 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2154 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2153 
    let _run_target_args'_v2152 = v2154 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2156 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2160 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2164 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2168 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2152 = v2168 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2171 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2152 = v2171 
    #endif
#else
    let v2172 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2152 = v2172 
    #endif
    let v2173 : System.TimeZoneInfo = _run_target_args'_v2152 
    let v2179 : (System.DateTime -> System.TimeSpan) = v2147 v2173
    let v2180 : System.TimeSpan = v2179 v1
    let _run_target_args'_v2033 = v2180 
    #endif
#else
    let v2181 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2186 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2187 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2188 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2187 
    let _run_target_args'_v2186 = v2188 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2190 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2190 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2194 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2194 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2198 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2198 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2202 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2186 = v2202 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2205 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2186 = v2205 
    #endif
#else
    let v2206 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2186 = v2206 
    #endif
    let v2207 : System.TimeZoneInfo = _run_target_args'_v2186 
    let v2213 : (System.DateTime -> System.TimeSpan) = v2181 v2207
    let v2214 : System.TimeSpan = v2213 v1
    let _run_target_args'_v2033 = v2214 
    #endif
    let v2215 : System.TimeSpan = _run_target_args'_v2033 
    let v2225 : (System.TimeSpan -> int32) = _.Hours
    let v2226 : int32 = v2225 v2215
    let v2229 : bool = v2226 > 0
    let v2230 : uint8 =
        if v2229 then
            1uy
        else
            0uy
    let v2231 : string = method217()
    (* run_target_args'
    let v2285 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2286 : string = "$0.toString($1)"
    let v2287 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2286 
    let _run_target_args'_v2285 = v2287 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2288 : string = "$0.toString($1)"
    let v2289 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2288 
    let _run_target_args'_v2285 = v2289 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2290 : string = "$0.toString($1)"
    let v2291 : string = Fable.Core.RustInterop.emitRustExpr struct (v2215, v2231) v2290 
    let _run_target_args'_v2285 = v2291 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2292 : string = v2215.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2285 = v2292 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2293 : string = v2215.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2285 = v2293 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2295 : string = v2215.ToString v2231 
    let _run_target_args'_v2285 = v2295 
    #endif
#else
    let v2348 : string = v2215.ToString v2231 
    let _run_target_args'_v2285 = v2348 
    #endif
    let v2400 : string = _run_target_args'_v2285 
    let v2455 : string = $"{v2230}{v2400}"
    let v2457 : (System.Guid -> string) = _.ToString()
    let v2458 : string = v2457 v0
    let v2461 : int32 = v1980.Length
    let v2462 : int32 = v2455.Length
    let v2463 : int32 = v2461 + v2462
    let v2465 : (string -> int32) = String.length
    let v2466 : int32 = v2465 v2458
    let v2474 : int32 = v2463 |> int32 
    let v2487 : int32 = v2466 |> int32 
    let v2495 : int32 = v2487 - 1
    let v2497 : string = v2458.[int v2474..int v2495]
    let v2501 : string = $"{v1980}{v2455}{v2497}"
    (* run_target_args'
    let v2506 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2508 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2508 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2512 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2512 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2516 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2506 = v2516 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2520 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2520 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2524 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2528 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2528 
    #endif
#else
    let v2532 : System.Guid = v2501 |> System.Guid 
    let _run_target_args'_v2506 = v2532 
    #endif
    let v2535 : System.Guid = _run_target_args'_v2506 
    let _run_target_args'_v569 = v2535 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2541 : string = method216()
    let v2543 : bool = v2541 = ""
    let v2545 : string =
        if v2543 then
            let v2544 : string = "M-d-y hh:mm:ss tt"
            v2544
        else
            v2541
    let v2546 : (string -> string) = v1.ToString
    let v2547 : string = v2546 v2545
    (* run_target_args'
    let v2566 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2567 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2568 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2567 
    let _run_target_args'_v2566 = v2568 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2570 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2570 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2574 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2574 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2578 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2582 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2566 = v2582 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2585 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2566 = v2585 
    #endif
#else
    let v2586 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2566 = v2586 
    #endif
    let v2587 : System.TimeZoneInfo = _run_target_args'_v2566 
    (* run_target_args'
    let v2600 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2604 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2605 : (System.DateTime -> int64) = _.Ticks
    let v2606 : int64 = v2605 v1
    let _run_target_args'_v2604 = v2606 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2607 : (System.DateTime -> int64) = _.Ticks
    let v2608 : int64 = v2607 v1
    let _run_target_args'_v2604 = v2608 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2610 : int64 = null |> unbox<int64>
    let _run_target_args'_v2604 = v2610 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2613 : (System.DateTime -> int64) = _.Ticks
    let v2614 : int64 = v2613 v1
    let _run_target_args'_v2604 = v2614 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2615 : (System.DateTime -> int64) = _.Ticks
    let v2616 : int64 = v2615 v1
    let _run_target_args'_v2604 = v2616 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2617 : (System.DateTime -> int64) = _.Ticks
    let v2618 : int64 = v2617 v1
    let _run_target_args'_v2604 = v2618 
    #endif
#else
    let v2619 : (System.DateTime -> int64) = _.Ticks
    let v2620 : int64 = v2619 v1
    let _run_target_args'_v2604 = v2620 
    #endif
    let v2621 : int64 = _run_target_args'_v2604 
    let v2641 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2642 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2621) v2641 
    let v2644 : System.TimeSpan = v2642 |> System.TimeSpan 
    let _run_target_args'_v2600 = v2644 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2650 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2651 : (System.DateTime -> int64) = _.Ticks
    let v2652 : int64 = v2651 v1
    let _run_target_args'_v2650 = v2652 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2653 : (System.DateTime -> int64) = _.Ticks
    let v2654 : int64 = v2653 v1
    let _run_target_args'_v2650 = v2654 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2656 : int64 = null |> unbox<int64>
    let _run_target_args'_v2650 = v2656 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2659 : (System.DateTime -> int64) = _.Ticks
    let v2660 : int64 = v2659 v1
    let _run_target_args'_v2650 = v2660 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2661 : (System.DateTime -> int64) = _.Ticks
    let v2662 : int64 = v2661 v1
    let _run_target_args'_v2650 = v2662 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2663 : (System.DateTime -> int64) = _.Ticks
    let v2664 : int64 = v2663 v1
    let _run_target_args'_v2650 = v2664 
    #endif
#else
    let v2665 : (System.DateTime -> int64) = _.Ticks
    let v2666 : int64 = v2665 v1
    let _run_target_args'_v2650 = v2666 
    #endif
    let v2667 : int64 = _run_target_args'_v2650 
    let v2687 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2688 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2667) v2687 
    let v2690 : System.TimeSpan = v2688 |> System.TimeSpan 
    let _run_target_args'_v2600 = v2690 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2694 : US3 = US3_2
    let v2695 : US4 = US4_3(v2694)
    let v2696 : string = $"date_time.get_utc_offset / target: {v2695}"
    let v2697 : System.TimeSpan = failwith<System.TimeSpan> v2696
    let _run_target_args'_v2600 = v2697 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2701 : US3 = US3_0
    let v2702 : US4 = US4_4(v2701)
    let v2703 : string = $"date_time.get_utc_offset / target: {v2702}"
    let v2704 : System.TimeSpan = failwith<System.TimeSpan> v2703
    let _run_target_args'_v2600 = v2704 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2708 : US3 = US3_0
    let v2709 : US4 = US4_5(v2708)
    let v2710 : string = $"date_time.get_utc_offset / target: {v2709}"
    let v2711 : System.TimeSpan = failwith<System.TimeSpan> v2710
    let _run_target_args'_v2600 = v2711 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2714 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2719 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2720 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2721 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2720 
    let _run_target_args'_v2719 = v2721 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2723 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2723 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2727 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2727 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2731 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2731 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2735 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2719 = v2735 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2738 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2719 = v2738 
    #endif
#else
    let v2739 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2719 = v2739 
    #endif
    let v2740 : System.TimeZoneInfo = _run_target_args'_v2719 
    let v2746 : (System.DateTime -> System.TimeSpan) = v2714 v2740
    let v2747 : System.TimeSpan = v2746 v1
    let _run_target_args'_v2600 = v2747 
    #endif
#else
    let v2748 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2753 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2754 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2755 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2754 
    let _run_target_args'_v2753 = v2755 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2757 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2757 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2761 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2761 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2765 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2765 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2769 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2753 = v2769 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2772 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2753 = v2772 
    #endif
#else
    let v2773 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2753 = v2773 
    #endif
    let v2774 : System.TimeZoneInfo = _run_target_args'_v2753 
    let v2780 : (System.DateTime -> System.TimeSpan) = v2748 v2774
    let v2781 : System.TimeSpan = v2780 v1
    let _run_target_args'_v2600 = v2781 
    #endif
    let v2782 : System.TimeSpan = _run_target_args'_v2600 
    let v2792 : (System.TimeSpan -> int32) = _.Hours
    let v2793 : int32 = v2792 v2782
    let v2796 : bool = v2793 > 0
    let v2797 : uint8 =
        if v2796 then
            1uy
        else
            0uy
    let v2798 : string = method217()
    (* run_target_args'
    let v2852 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2853 : string = "$0.toString($1)"
    let v2854 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2853 
    let _run_target_args'_v2852 = v2854 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2855 : string = "$0.toString($1)"
    let v2856 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2855 
    let _run_target_args'_v2852 = v2856 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2857 : string = "$0.toString($1)"
    let v2858 : string = Fable.Core.RustInterop.emitRustExpr struct (v2782, v2798) v2857 
    let _run_target_args'_v2852 = v2858 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2859 : string = v2782.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2852 = v2859 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2860 : string = v2782.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2852 = v2860 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2862 : string = v2782.ToString v2798 
    let _run_target_args'_v2852 = v2862 
    #endif
#else
    let v2915 : string = v2782.ToString v2798 
    let _run_target_args'_v2852 = v2915 
    #endif
    let v2967 : string = _run_target_args'_v2852 
    let v3022 : string = $"{v2797}{v2967}"
    let v3024 : (System.Guid -> string) = _.ToString()
    let v3025 : string = v3024 v0
    let v3028 : int32 = v2547.Length
    let v3029 : int32 = v3022.Length
    let v3030 : int32 = v3028 + v3029
    let v3032 : (string -> int32) = String.length
    let v3033 : int32 = v3032 v3025
    let v3041 : int32 = v3030 |> int32 
    let v3054 : int32 = v3033 |> int32 
    let v3062 : int32 = v3054 - 1
    let v3064 : string = v3025.[int v3041..int v3062]
    let v3068 : string = $"{v2547}{v3022}{v3064}"
    (* run_target_args'
    let v3073 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3075 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3075 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3079 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3079 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3083 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3073 = v3083 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3087 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3087 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3091 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3095 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3095 
    #endif
#else
    let v3099 : System.Guid = v3068 |> System.Guid 
    let _run_target_args'_v3073 = v3099 
    #endif
    let v3102 : System.Guid = _run_target_args'_v3073 
    let _run_target_args'_v569 = v3102 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3108 : string = method216()
    let v3110 : bool = v3108 = ""
    let v3112 : string =
        if v3110 then
            let v3111 : string = "M-d-y hh:mm:ss tt"
            v3111
        else
            v3108
    let v3113 : (string -> string) = v1.ToString
    let v3114 : string = v3113 v3112
    (* run_target_args'
    let v3133 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3134 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3135 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3134 
    let _run_target_args'_v3133 = v3135 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3137 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3145 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3145 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3149 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3133 = v3149 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3152 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3133 = v3152 
    #endif
#else
    let v3153 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3133 = v3153 
    #endif
    let v3154 : System.TimeZoneInfo = _run_target_args'_v3133 
    (* run_target_args'
    let v3167 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3171 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3172 : (System.DateTime -> int64) = _.Ticks
    let v3173 : int64 = v3172 v1
    let _run_target_args'_v3171 = v3173 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3174 : (System.DateTime -> int64) = _.Ticks
    let v3175 : int64 = v3174 v1
    let _run_target_args'_v3171 = v3175 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3177 : int64 = null |> unbox<int64>
    let _run_target_args'_v3171 = v3177 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3180 : (System.DateTime -> int64) = _.Ticks
    let v3181 : int64 = v3180 v1
    let _run_target_args'_v3171 = v3181 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3182 : (System.DateTime -> int64) = _.Ticks
    let v3183 : int64 = v3182 v1
    let _run_target_args'_v3171 = v3183 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3184 : (System.DateTime -> int64) = _.Ticks
    let v3185 : int64 = v3184 v1
    let _run_target_args'_v3171 = v3185 
    #endif
#else
    let v3186 : (System.DateTime -> int64) = _.Ticks
    let v3187 : int64 = v3186 v1
    let _run_target_args'_v3171 = v3187 
    #endif
    let v3188 : int64 = _run_target_args'_v3171 
    let v3208 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3209 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3188) v3208 
    let v3211 : System.TimeSpan = v3209 |> System.TimeSpan 
    let _run_target_args'_v3167 = v3211 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3217 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3218 : (System.DateTime -> int64) = _.Ticks
    let v3219 : int64 = v3218 v1
    let _run_target_args'_v3217 = v3219 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3220 : (System.DateTime -> int64) = _.Ticks
    let v3221 : int64 = v3220 v1
    let _run_target_args'_v3217 = v3221 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3223 : int64 = null |> unbox<int64>
    let _run_target_args'_v3217 = v3223 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3226 : (System.DateTime -> int64) = _.Ticks
    let v3227 : int64 = v3226 v1
    let _run_target_args'_v3217 = v3227 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3228 : (System.DateTime -> int64) = _.Ticks
    let v3229 : int64 = v3228 v1
    let _run_target_args'_v3217 = v3229 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3230 : (System.DateTime -> int64) = _.Ticks
    let v3231 : int64 = v3230 v1
    let _run_target_args'_v3217 = v3231 
    #endif
#else
    let v3232 : (System.DateTime -> int64) = _.Ticks
    let v3233 : int64 = v3232 v1
    let _run_target_args'_v3217 = v3233 
    #endif
    let v3234 : int64 = _run_target_args'_v3217 
    let v3254 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3255 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3234) v3254 
    let v3257 : System.TimeSpan = v3255 |> System.TimeSpan 
    let _run_target_args'_v3167 = v3257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3261 : US3 = US3_2
    let v3262 : US4 = US4_3(v3261)
    let v3263 : string = $"date_time.get_utc_offset / target: {v3262}"
    let v3264 : System.TimeSpan = failwith<System.TimeSpan> v3263
    let _run_target_args'_v3167 = v3264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3268 : US3 = US3_0
    let v3269 : US4 = US4_4(v3268)
    let v3270 : string = $"date_time.get_utc_offset / target: {v3269}"
    let v3271 : System.TimeSpan = failwith<System.TimeSpan> v3270
    let _run_target_args'_v3167 = v3271 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3275 : US3 = US3_0
    let v3276 : US4 = US4_5(v3275)
    let v3277 : string = $"date_time.get_utc_offset / target: {v3276}"
    let v3278 : System.TimeSpan = failwith<System.TimeSpan> v3277
    let _run_target_args'_v3167 = v3278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3281 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3286 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3287 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3288 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3287 
    let _run_target_args'_v3286 = v3288 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3290 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3290 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3294 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3294 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3298 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3298 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3302 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3286 = v3302 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3305 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3286 = v3305 
    #endif
#else
    let v3306 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3286 = v3306 
    #endif
    let v3307 : System.TimeZoneInfo = _run_target_args'_v3286 
    let v3313 : (System.DateTime -> System.TimeSpan) = v3281 v3307
    let v3314 : System.TimeSpan = v3313 v1
    let _run_target_args'_v3167 = v3314 
    #endif
#else
    let v3315 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3320 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3321 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3322 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3321 
    let _run_target_args'_v3320 = v3322 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3324 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3328 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3332 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3332 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3336 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3320 = v3336 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3339 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3320 = v3339 
    #endif
#else
    let v3340 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3320 = v3340 
    #endif
    let v3341 : System.TimeZoneInfo = _run_target_args'_v3320 
    let v3347 : (System.DateTime -> System.TimeSpan) = v3315 v3341
    let v3348 : System.TimeSpan = v3347 v1
    let _run_target_args'_v3167 = v3348 
    #endif
    let v3349 : System.TimeSpan = _run_target_args'_v3167 
    let v3359 : (System.TimeSpan -> int32) = _.Hours
    let v3360 : int32 = v3359 v3349
    let v3363 : bool = v3360 > 0
    let v3364 : uint8 =
        if v3363 then
            1uy
        else
            0uy
    let v3365 : string = method217()
    (* run_target_args'
    let v3419 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3420 : string = "$0.toString($1)"
    let v3421 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3420 
    let _run_target_args'_v3419 = v3421 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3422 : string = "$0.toString($1)"
    let v3423 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3422 
    let _run_target_args'_v3419 = v3423 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3424 : string = "$0.toString($1)"
    let v3425 : string = Fable.Core.RustInterop.emitRustExpr struct (v3349, v3365) v3424 
    let _run_target_args'_v3419 = v3425 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3426 : string = v3349.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3419 = v3426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3427 : string = v3349.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3419 = v3427 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3429 : string = v3349.ToString v3365 
    let _run_target_args'_v3419 = v3429 
    #endif
#else
    let v3482 : string = v3349.ToString v3365 
    let _run_target_args'_v3419 = v3482 
    #endif
    let v3534 : string = _run_target_args'_v3419 
    let v3589 : string = $"{v3364}{v3534}"
    let v3591 : (System.Guid -> string) = _.ToString()
    let v3592 : string = v3591 v0
    let v3595 : int32 = v3114.Length
    let v3596 : int32 = v3589.Length
    let v3597 : int32 = v3595 + v3596
    let v3599 : (string -> int32) = String.length
    let v3600 : int32 = v3599 v3592
    let v3608 : int32 = v3597 |> int32 
    let v3621 : int32 = v3600 |> int32 
    let v3629 : int32 = v3621 - 1
    let v3631 : string = v3592.[int v3608..int v3629]
    let v3635 : string = $"{v3114}{v3589}{v3631}"
    (* run_target_args'
    let v3640 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3642 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3642 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3646 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3650 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3640 = v3650 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3654 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3654 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3658 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3658 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3662 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3662 
    #endif
#else
    let v3666 : System.Guid = v3635 |> System.Guid 
    let _run_target_args'_v3640 = v3666 
    #endif
    let v3669 : System.Guid = _run_target_args'_v3640 
    let _run_target_args'_v569 = v3669 
    #endif
#else
    let v3675 : string = method216()
    let v3677 : bool = v3675 = ""
    let v3679 : string =
        if v3677 then
            let v3678 : string = "M-d-y hh:mm:ss tt"
            v3678
        else
            v3675
    let v3680 : (string -> string) = v1.ToString
    let v3681 : string = v3680 v3679
    (* run_target_args'
    let v3700 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3701 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3702 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3701 
    let _run_target_args'_v3700 = v3702 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3704 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3704 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3708 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3708 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3712 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3712 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3716 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3700 = v3716 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3719 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3700 = v3719 
    #endif
#else
    let v3720 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3700 = v3720 
    #endif
    let v3721 : System.TimeZoneInfo = _run_target_args'_v3700 
    (* run_target_args'
    let v3734 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3738 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3739 : (System.DateTime -> int64) = _.Ticks
    let v3740 : int64 = v3739 v1
    let _run_target_args'_v3738 = v3740 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3741 : (System.DateTime -> int64) = _.Ticks
    let v3742 : int64 = v3741 v1
    let _run_target_args'_v3738 = v3742 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3744 : int64 = null |> unbox<int64>
    let _run_target_args'_v3738 = v3744 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3747 : (System.DateTime -> int64) = _.Ticks
    let v3748 : int64 = v3747 v1
    let _run_target_args'_v3738 = v3748 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3749 : (System.DateTime -> int64) = _.Ticks
    let v3750 : int64 = v3749 v1
    let _run_target_args'_v3738 = v3750 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3751 : (System.DateTime -> int64) = _.Ticks
    let v3752 : int64 = v3751 v1
    let _run_target_args'_v3738 = v3752 
    #endif
#else
    let v3753 : (System.DateTime -> int64) = _.Ticks
    let v3754 : int64 = v3753 v1
    let _run_target_args'_v3738 = v3754 
    #endif
    let v3755 : int64 = _run_target_args'_v3738 
    let v3775 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3776 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3755) v3775 
    let v3778 : System.TimeSpan = v3776 |> System.TimeSpan 
    let _run_target_args'_v3734 = v3778 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3784 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3785 : (System.DateTime -> int64) = _.Ticks
    let v3786 : int64 = v3785 v1
    let _run_target_args'_v3784 = v3786 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3787 : (System.DateTime -> int64) = _.Ticks
    let v3788 : int64 = v3787 v1
    let _run_target_args'_v3784 = v3788 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3790 : int64 = null |> unbox<int64>
    let _run_target_args'_v3784 = v3790 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3793 : (System.DateTime -> int64) = _.Ticks
    let v3794 : int64 = v3793 v1
    let _run_target_args'_v3784 = v3794 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3795 : (System.DateTime -> int64) = _.Ticks
    let v3796 : int64 = v3795 v1
    let _run_target_args'_v3784 = v3796 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3797 : (System.DateTime -> int64) = _.Ticks
    let v3798 : int64 = v3797 v1
    let _run_target_args'_v3784 = v3798 
    #endif
#else
    let v3799 : (System.DateTime -> int64) = _.Ticks
    let v3800 : int64 = v3799 v1
    let _run_target_args'_v3784 = v3800 
    #endif
    let v3801 : int64 = _run_target_args'_v3784 
    let v3821 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3822 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3801) v3821 
    let v3824 : System.TimeSpan = v3822 |> System.TimeSpan 
    let _run_target_args'_v3734 = v3824 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3828 : US3 = US3_2
    let v3829 : US4 = US4_3(v3828)
    let v3830 : string = $"date_time.get_utc_offset / target: {v3829}"
    let v3831 : System.TimeSpan = failwith<System.TimeSpan> v3830
    let _run_target_args'_v3734 = v3831 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3835 : US3 = US3_0
    let v3836 : US4 = US4_4(v3835)
    let v3837 : string = $"date_time.get_utc_offset / target: {v3836}"
    let v3838 : System.TimeSpan = failwith<System.TimeSpan> v3837
    let _run_target_args'_v3734 = v3838 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3842 : US3 = US3_0
    let v3843 : US4 = US4_5(v3842)
    let v3844 : string = $"date_time.get_utc_offset / target: {v3843}"
    let v3845 : System.TimeSpan = failwith<System.TimeSpan> v3844
    let _run_target_args'_v3734 = v3845 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3848 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3853 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3854 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3855 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3854 
    let _run_target_args'_v3853 = v3855 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3857 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3857 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3861 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3861 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3865 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3865 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3869 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3853 = v3869 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3872 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3853 = v3872 
    #endif
#else
    let v3873 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3853 = v3873 
    #endif
    let v3874 : System.TimeZoneInfo = _run_target_args'_v3853 
    let v3880 : (System.DateTime -> System.TimeSpan) = v3848 v3874
    let v3881 : System.TimeSpan = v3880 v1
    let _run_target_args'_v3734 = v3881 
    #endif
#else
    let v3882 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3887 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3888 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3889 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3888 
    let _run_target_args'_v3887 = v3889 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3891 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3891 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3895 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3895 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3899 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3899 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3903 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3887 = v3903 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3906 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3887 = v3906 
    #endif
#else
    let v3907 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3887 = v3907 
    #endif
    let v3908 : System.TimeZoneInfo = _run_target_args'_v3887 
    let v3914 : (System.DateTime -> System.TimeSpan) = v3882 v3908
    let v3915 : System.TimeSpan = v3914 v1
    let _run_target_args'_v3734 = v3915 
    #endif
    let v3916 : System.TimeSpan = _run_target_args'_v3734 
    let v3926 : (System.TimeSpan -> int32) = _.Hours
    let v3927 : int32 = v3926 v3916
    let v3930 : bool = v3927 > 0
    let v3931 : uint8 =
        if v3930 then
            1uy
        else
            0uy
    let v3932 : string = method217()
    (* run_target_args'
    let v3986 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3987 : string = "$0.toString($1)"
    let v3988 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3987 
    let _run_target_args'_v3986 = v3988 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3989 : string = "$0.toString($1)"
    let v3990 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3989 
    let _run_target_args'_v3986 = v3990 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3991 : string = "$0.toString($1)"
    let v3992 : string = Fable.Core.RustInterop.emitRustExpr struct (v3916, v3932) v3991 
    let _run_target_args'_v3986 = v3992 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3993 : string = v3916.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3986 = v3993 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3994 : string = v3916.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3986 = v3994 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3996 : string = v3916.ToString v3932 
    let _run_target_args'_v3986 = v3996 
    #endif
#else
    let v4049 : string = v3916.ToString v3932 
    let _run_target_args'_v3986 = v4049 
    #endif
    let v4101 : string = _run_target_args'_v3986 
    let v4156 : string = $"{v3931}{v4101}"
    let v4158 : (System.Guid -> string) = _.ToString()
    let v4159 : string = v4158 v0
    let v4162 : int32 = v3681.Length
    let v4163 : int32 = v4156.Length
    let v4164 : int32 = v4162 + v4163
    let v4166 : (string -> int32) = String.length
    let v4167 : int32 = v4166 v4159
    let v4175 : int32 = v4164 |> int32 
    let v4188 : int32 = v4167 |> int32 
    let v4196 : int32 = v4188 - 1
    let v4198 : string = v4159.[int v4175..int v4196]
    let v4202 : string = $"{v3681}{v4156}{v4198}"
    (* run_target_args'
    let v4207 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4209 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4209 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4213 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4213 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4217 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4207 = v4217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4221 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4225 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4225 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4229 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4229 
    #endif
#else
    let v4233 : System.Guid = v4202 |> System.Guid 
    let _run_target_args'_v4207 = v4233 
    #endif
    let v4236 : System.Guid = _run_target_args'_v4207 
    let _run_target_args'_v569 = v4236 
    #endif
    let v4242 : System.Guid = _run_target_args'_v569 
    v4242
and method218 (v0 : string, v1 : string) : unit =
    let v2 : bool = method39(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method78(v0)
        ()
    let v5 : string option = method41(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method39(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method78(v9)
        ()
    let v15 : bool = method39(v1)
    let v26 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method47(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v26 then
        let v27 : bool = true
        method89(v27, v1)
    let v28 : bool = method39(v1)
    let v29 : bool = v28 = false
    if v29 then
        (* run_target_args'
        let v30 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v31 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let v33 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v34 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v35 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method220 () : string =
    let v0 : string = "("
    v0
and method221 () : string =
    let v0 : string = " "
    v0
and method222 (v0 : US40) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v2, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = v2.l0
    v16
and method226 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "is_error"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v41 : string =
        if v0 then
            let v39 : string = "true"
            v39
        else
            let v40 : string = "false"
            v40
    let v43 : string = $"{v41}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v5, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v53 : string = "; "
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v64 : string = "retry"
    let v65 : string = $"{v64}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v5, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v30}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v5, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v1}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v5, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = $"{v53}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v102 : string = "result"
    let v103 : string = $"{v102}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v30}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v2}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v5, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v131 : string = ", "
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v5, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v3}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v5, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string = " }"
    let v152 : string = $"{v151}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v5, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v160 : string = v5.l0
    v160
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method226(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "common.retry_fn' / loop"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure86 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method12()
        let v50 : string = $"{v1}/{v0}"
        let v51 : string = method225(v30, v31, v32, v33, v34, v35, v48, v49, v4, v50, v2, v3)
        method19(v51)
and method224 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method101(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US44 =
        if v11 then
            US44_0(v9, v10)
        else
            US44_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US44_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US44_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure86(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v78 : uint8 = v8 + 1uy
        method224(v0, v1, v2, v3, v4, v5, v6, v7, v78)
and method223 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method224(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method219 (v0 : US39, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "cfg!(windows)"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "cfg!(windows)"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _run_target_args'_v14 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : US3 = US3_0
    let v26 : US4 = US4_5(v25)
    let v27 : string = $"platform.is_windows / target: {v26}"
    let v28 : bool = failwith<bool> v27
    let _run_target_args'_v14 = v28 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v30 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v31 : bool = v30 v29
    let _run_target_args'_v14 = v31 
    #endif
#else
    let v32 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v33 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v34 : bool = v33 v32
    let _run_target_args'_v14 = v34 
    #endif
    let v35 : bool = _run_target_args'_v14 
    let v43 : string =
        if v35 then
            let v41 : string = "_WINDOWS"
            v41
        else
            let v42 : string = "_LINUX"
            v42
    let v44 : string = $" --define {v43}"
    let v162 : string =
        match v0 with
        | US39_1 -> (* None *)
            let v160 : string = ""
            v160
        | US39_0(v45) -> (* Some *)
            let v47 : string = Unchecked.defaultof<_>
            let v51 : string = Unchecked.defaultof<_>
            let v56 : bool =
                match v45 with
                | US40_0(v54) -> (* Wasm *)
                    let v55 : bool = v47 = v54
                    v55
                | _ ->
                    false
            let v98 : US5 =
                if v56 then
                    let v57 : string = "Wasm"
                    US5_0(v57)
                else
                    (* run_target_args'
                    let v61 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v62 : string = method220()
                    let _run_target_args'_v61 = v62 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v63 : string = method220()
                    let _run_target_args'_v61 = v63 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v64 : string = method220()
                    let _run_target_args'_v61 = v64 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v65 : string = method221()
                    let _run_target_args'_v61 = v65 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v66 : string = method221()
                    let _run_target_args'_v61 = v66 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v67 : string = method221()
                    let _run_target_args'_v61 = v67 
                    #endif
#else
                    let v68 : string = method221()
                    let _run_target_args'_v61 = v68 
                    #endif
                    let v69 : string = _run_target_args'_v61 
                    let v74 : US40 = US40_0(v47)
                    let v75 : string = method222(v74)
                    let v82 : (string []) = v75.Split v69 
                    let v86 : string = v82.[int 0]
                    let v89 : string = method222(v45)
                    let v91 : bool = v89.StartsWith (v86, false, null)
                    if v91 then
                        let v94 : string = "Wasm"
                        US5_0(v94)
                    else
                        US5_1
            let v152 : US5 =
                match v98 with
                | US5_1 -> (* None *)
                    let v103 : bool =
                        match v45 with
                        | US40_1(v101) -> (* Contract *)
                            let v102 : bool = v51 = v101
                            v102
                        | _ ->
                            false
                    let v145 : US5 =
                        if v103 then
                            let v104 : string = "Contract"
                            US5_0(v104)
                        else
                            (* run_target_args'
                            let v108 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v109 : string = method220()
                            let _run_target_args'_v108 = v109 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v110 : string = method220()
                            let _run_target_args'_v108 = v110 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v111 : string = method220()
                            let _run_target_args'_v108 = v111 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v112 : string = method221()
                            let _run_target_args'_v108 = v112 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v113 : string = method221()
                            let _run_target_args'_v108 = v113 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v114 : string = method221()
                            let _run_target_args'_v108 = v114 
                            #endif
#else
                            let v115 : string = method221()
                            let _run_target_args'_v108 = v115 
                            #endif
                            let v116 : string = _run_target_args'_v108 
                            let v121 : US40 = US40_1(v51)
                            let v122 : string = method222(v121)
                            let v129 : (string []) = v122.Split v116 
                            let v133 : string = v129.[int 0]
                            let v136 : string = method222(v45)
                            let v138 : bool = v136.StartsWith (v133, false, null)
                            if v138 then
                                let v141 : string = "Contract"
                                US5_0(v141)
                            else
                                US5_1
                    match v145 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v146) -> (* Some *)
                        US5_0(v146)
                | US5_0(v99) -> (* Some *)
                    US5_0(v99)
            let v156 : string =
                match v152 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v153) -> (* Some *)
                    v153
            let v157 : (unit -> string) = v156.ToUpper
            let v158 : string = v157 ()
            let v159 : string = $" --define {v158}"
            v159
    let v163 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v44}{v162}"
    let v175 : Result<string, string> =
        match v4 with
        | US13_1(v169) -> (* Error *)
            let v171 : Result<string, string> = Error v169 
            v171
        | US13_0(v164) -> (* Ok *)
            let v166 : Result<string, string> = Ok v164 
            v166
    (* run_target_args'
    let v177 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v178 : string = "$0.ok()"
    let v179 : string option = Fable.Core.RustInterop.emitRustExpr v175 v178 
    let _run_target_args'_v177 = v179 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v180 : string = "$0.ok()"
    let v181 : string option = Fable.Core.RustInterop.emitRustExpr v175 v180 
    let _run_target_args'_v177 = v181 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v182 : string = "$0.ok()"
    let v183 : string option = Fable.Core.RustInterop.emitRustExpr v175 v182 
    let _run_target_args'_v177 = v183 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v184 : string option = match v175 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v177 = v184 
    #endif
#if FABLE_COMPILER_PYTHON
    let v185 : string option = match v175 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v177 = v185 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v186 : string option = match v175 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v177 = v186 
    #endif
#else
    let v187 : string option = match v175 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v177 = v187 
    #endif
    let v188 : string option = _run_target_args'_v177 
    let v191 : uint8 = 3uy
    let v192 : bool = true
    method223(v191, v163, v5, v6, v7, v8, v192, v188)
and method228 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "dotnet_fable_result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / dotnet fable error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure87 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method227(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure88 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method229 () : (std_string_String -> bool) =
    closure88()
and method230 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method231 () : string =
    let v0 : string = "("
    v0
and method232 () : string =
    let v0 : string = "("
    v0
and method234 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v55 
    #endif
#else
    let v59 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v59 
    #endif
    let v62 : std_string_String = _run_target_args'_v39 
    let v68 : string = "true; let _capture_move = (move || { //"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v62 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0"
    let v75 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = $"$0.captures_iter(v73)"
    let v77 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "true; let _regex_captures : Vec<_> = v77.map(|x| { //"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = $"x"
    let v81 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "Box::new($0)"
    let v83 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "Box::leak($0)"
    let v85 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = $"$0.capture_names()"
    let v87 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v87.map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "x.unwrap_or(\"\").to_string().into()"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "$0.clone()"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = $"v85.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v91 v94 
    let v97 : (string * string) = v93, v95 
    let v100 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v102 : string = "_regex_captures"
    let v103 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "true; $0 }).collect::<Vec<_>>()"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "_regex_captures"
    let v107 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : string = "true; $0 })()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_capture_move"
    let v111 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v110 
    v111
and closure89 () (v0 : std_collections_HashMap<string, string>) : US45 =
    US45_0(v0)
and method235 () : (std_collections_HashMap<string, string> -> US45) =
    closure89()
and method236 () : string =
    let v0 : string = "a"
    v0
and closure90 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v0}/{3uy}"
        let v50 : string = method225(v29, v30, v31, v32, v33, v34, v47, v48, v3, v49, v1, v2)
        method19(v50)
and method233 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v20 : Result<string, string> =
        match v0 with
        | US13_1(v14) -> (* Error *)
            let v16 : Result<string, string> = Error v14 
            v16
        | US13_0(v9) -> (* Ok *)
            let v11 : Result<string, string> = Ok v9 
            v11
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.ok()"
    let v24 : string option = Fable.Core.RustInterop.emitRustExpr v20 v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.ok()"
    let v26 : string option = Fable.Core.RustInterop.emitRustExpr v20 v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.ok()"
    let v28 : string option = Fable.Core.RustInterop.emitRustExpr v20 v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : string option = match v20 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : string option = _run_target_args'_v22 
    let v36 : bool = true
    let struct (v37 : int32, v38 : string) = method101(v8, v3, v4, v5, v6, v36, v33)
    let v41 : string = "failed to load manifest for workspace member"
    let v42 : bool = v38.Contains v41 
    let v45 : bool = v42 = false
    let v203 : US44 =
        if v45 then
            let v46 : bool = v37 = 0
            if v46 then
                US44_0(v37, v38)
            else
                US44_1(v37, v38)
        else
            let v50 : string = $"regex::Regex::new(&$0)"
            let v51 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v52 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v51 v50 
            (* run_target_args'
            let v54 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v55 : string = "$0.unwrap()"
            let v56 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v52 v55 
            let _run_target_args'_v54 = v56 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v57 : string = "$0.unwrap()"
            let v58 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v52 v57 
            let _run_target_args'_v54 = v58 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v59 : string = "$0.unwrap()"
            let v60 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v52 v59 
            let _run_target_args'_v54 = v60 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v61 : regex_Regex = match v52 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v54 = v61 
            #endif
#if FABLE_COMPILER_PYTHON
            let v62 : regex_Regex = match v52 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v54 = v62 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v63 : regex_Regex = match v52 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v54 = v63 
            #endif
#else
            let v64 : regex_Regex = match v52 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v54 = v64 
            #endif
            let v65 : regex_Regex = _run_target_args'_v54 
            let v68 : Vec<std_collections_HashMap<string, string>> = method234(v38, v65)
            let v69 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v70 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : std_collections_HashMap<string, string> option = v70 |> Array.tryItem 0 
            let v74 : (std_collections_HashMap<string, string> -> US45) = method235()
            let v75 : US45 option = v71 |> Option.map v74 
            let v89 : US45 = US45_1
            let v90 : US45 = v75 |> Option.defaultValue v89 
            let v123 : US46 =
                match v90 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v94) -> (* Some *)
                    let v95 : string = method236()
                    let v96 : string = "std::collections::HashMap::get(&$0, &v95).map(|x| x).cloned()"
                    let v97 : string option = Fable.Core.RustInterop.emitRustExpr v94 v96 
                    let v100 : (string -> US5) = method6()
                    let v101 : US5 option = v97 |> Option.map v100 
                    let v115 : US5 = US5_1
                    let v116 : US5 = v101 |> Option.defaultValue v115 
                    US46_0(v116)
            let v130 : US5 =
                match v123 with
                | US46_0(v124) -> (* Some *)
                    match v124 with
                    | US5_0(v125) -> (* Some *)
                        US5_0(v125)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v130 with
            | US5_1 -> (* None *)
                US44_1(v37, v38)
            | US5_0(v132) -> (* Some *)
                let v133 : bool = method38(v132)
                let v134 : bool = v133 = false
                if v134 then
                    let v135 : string option = method41(v132)
                    let v138 : string = ""
                    let v139 : string = v135 |> Option.defaultValue v138 
                    let v142 : System.IDisposable = method78(v139)
                    (* run_target_args'
                    let v145 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v146 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v145 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v152 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v152 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v153 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v153 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v154 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v154 
                    #endif
#else
                    let v155 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v145 = v155 
                    #endif
                    let v156 : System.DateTime = _run_target_args'_v145 
                    let v162 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v163 : System.Guid = v162 ()
                    let v166 : System.Guid = method213(v163, v156)
                    let v168 : (System.Guid -> string) = _.ToString()
                    let v169 : string = v168 v166
                    let v172 : string = $"[package]"
                    let v173 : string = $"name = \"spiral_{v169}\""
                    let v174 : string = "\n"
                    let v175 : string = v172 + v174 
                    let v176 : string = v175 + v173 
                    let v177 : string = $"version = \"0.0.1\""
                    let v178 : string = v176 + v174 
                    let v179 : string = v178 + v177 
                    let v180 : string = $"edition = \"2021\""
                    let v181 : string = v179 + v174 
                    let v182 : string = v181 + v180 
                    let v183 : string = $""
                    let v184 : string = v182 + v174 
                    let v185 : string = v184 + v183 
                    let v186 : string = $"[[bin]]"
                    let v187 : string = v185 + v174 
                    let v188 : string = v187 + v186 
                    let v189 : string = $"name = \"spiral_{v169}\""
                    let v190 : string = v188 + v174 
                    let v191 : string = v190 + v189 
                    let v192 : string = $"path = \"spiral.rs\""
                    let v193 : string = v191 + v174 
                    let v194 : string = v193 + v192 
                    (* run_target_args'
                    let v195 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v196 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v132, v194) v196 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v132, v194)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v197 : bool = v37 = 0
                if v197 then
                    US44_0(v37, v38)
                else
                    US44_1(v37, v38)
    let struct (v211 : bool, v212 : int32, v213 : string) =
        match v203 with
        | US44_1(v206, v207) -> (* Error *)
            struct (true, v206, v207)
        | US44_0(v204, v205) -> (* Ok *)
            struct (false, v204, v205)
    let v214 : bool = v211 = false
    let v216 : bool =
        if v214 then
            true
        else
            let v215 : bool = v2 >= 3uy
            v215
    if v216 then
        struct (v212, v213)
    else
        let v217 : unit = ()
        let v218 : (unit -> unit) = closure90(v2, v212, v213, v211)
        let v219 : unit = (fun () -> v218 (); v217) ()
        let v267 : uint8 = v2 + 1uy
        method233(v0, v1, v267)
and method238 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "cargo_fmt_result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method237 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method238(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / cargo fmt error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure91 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method237(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method239 () : string =
    let v0 : string = "{"
    v0
and closure92 () (v0 : string) : string =
    v0
and closure93 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure94 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method241 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v6, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v20 : string = "exit_code"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v6, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v31 : string = " = "
    let v32 : string = $"{v31}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v6, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v41 : string = $"{v0}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v6, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "new_code_path"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v6, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v31}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v6, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v81 : string = $"{v1}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v6, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v90 : string = $"{v51}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v6, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "external_command"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v31}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v6, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v2}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v6, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v51}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "cleanup"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v6, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v31}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v6, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v158 : string =
        if v3 then
            let v156 : string = "true"
            v156
        else
            let v157 : string = "false"
            v157
    let v160 : string = $"{v158}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v6, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = $"{v51}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v6, v169)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v179 : string = "cargo_result"
    let v180 : string = $"{v179}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v6, v180)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v189 : string = $"{v31}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v6, v189)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v198 : string = $"{v4}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v208 : string = " }"
    let v209 : string = $"{v208}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v6, v209)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v217 : string = v6.l0
    v217
and method240 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method241(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure95 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = method240(v30, v31, v32, v33, v34, v35, v48, v49, v3, v1, v4, v0, v2)
        method19(v50)
and closure97 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure96 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v12 : (string -> bool) = closure97()
    let v13 : (string []) = v9 |> Array.skipWhile v12 
    let v14 : (string []) = v13 |> Array.skip 2 
    let v16 : string seq = v14 |> Seq.ofArray
    let v20 : string = method75()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method243 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "new_code_path"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "external_command"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "cargo_result"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method243(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure99 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method242(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure98 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure99(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method245 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v6, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v20 : string = "exit_code"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v6, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v31 : string = " = "
    let v32 : string = $"{v31}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v6, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v41 : string = $"{v0}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v6, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "new_code_path"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v6, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v31}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v6, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v81 : string = $"{v1}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v6, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v90 : string = $"{v51}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v6, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "cargo_result"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v31}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v6, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v2}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v6, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v51}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "cleanup"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v6, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v31}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v6, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v158 : string =
        if v3 then
            let v156 : string = "true"
            v156
        else
            let v157 : string = "false"
            v157
    let v160 : string = $"{v158}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v6, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = $"{v51}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v6, v169)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v179 : string = "spiral_wasm_result"
    let v180 : string = $"{v179}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v6, v180)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v189 : string = $"{v31}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v6, v189)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v198 : string = $"{v4}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v208 : string = " }"
    let v209 : string = $"{v208}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v6, v209)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v217 : string = v6.l0
    v217
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method245(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / wasm error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure100 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = $"\n{v3}"
        let v51 : string = method244(v30, v31, v32, v33, v34, v35, v48, v49, v4, v1, v2, v0, v50)
        method19(v51)
and method247 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v10 : string = "{ "
    let v11 : string = $"{v10}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v7, v11)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v21 : string = "exit_code"
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v7, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v7, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v7, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v52 : string = "; "
    let v53 : string = $"{v52}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v7, v53)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v63 : string = "new_code_path"
    let v64 : string = $"{v63}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v7, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v32}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v7, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = $"{v1}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v7, v82)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v91 : string = $"{v52}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v7, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v101 : string = "wasm_path"
    let v102 : string = $"{v101}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v7, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v32}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v7, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = $"{v2}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v7, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v129 : string = $"{v52}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v7, v129)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v139 : string = "command"
    let v140 : string = $"{v139}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v7, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v32}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v7, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = $"{v3}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v7, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = $"{v52}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v7, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v177 : string = "cleanup"
    let v178 : string = $"{v177}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v7, v178)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v187 : string = $"{v32}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v7, v187)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v197 : string =
        if v4 then
            let v195 : string = "true"
            v195
        else
            let v196 : string = "false"
            v196
    let v199 : string = $"{v197}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v7, v199)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v208 : string = $"{v52}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v7, v208)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v218 : string = "cargo_result"
    let v219 : string = $"{v218}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v7, v219)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v228 : string = $"{v32}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v7, v228)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v237 : string = $"{v5}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v7, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v247 : string = " }"
    let v248 : string = $"{v247}"
    let v251 : unit = ()
    let v252 : (unit -> unit) = closure7(v7, v248)
    let v253 : unit = (fun () -> v252 (); v251) ()
    let v256 : string = v7.l0
    v256
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method247(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v17 : string = "spiral.process_rust / cargo error"
    let v18 : string = $"{v6} {v7} #{v15} %s{v17} / {v14}"
    method18(v18)
and closure101 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v31 : Mut0, v32 : Mut1, v33 : Mut2, v34 : Mut3, v35 : Mut4, v36 : int64 option) = TraceState.trace_state.Value
        let v49 : string = method8(v31, v32, v33, v34, v35, v36)
        let v50 : string = method82()
        let v51 : string = $"\n{v2}"
        let v52 : string = method246(v31, v32, v33, v34, v35, v36, v49, v50, v3, v1, v4, v5, v0, v51)
        method19(v52)
and method249 (v0 : string, v1 : UH5) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "new_code_path"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "cleanup"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"%A{v1}"
    let v82 : string = $"{v78}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v3, v82)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v92 : string = " }"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v3, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = v3.l0
    v101
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method249(v8, v24)
    let v26 : int64 = v0.l0
    let v28 : string = "spiral.process_rust / cleanup"
    let v29 : string = $"{v6} {v7} #{v26} %s{v28} / {v25}"
    method18(v29)
and closure102 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v36 : Mut0, v37 : Mut1, v38 : Mut2, v39 : Mut3, v40 : Mut4, v41 : int64 option) = TraceState.trace_state.Value
        let v54 : string = method8(v36, v37, v38, v39, v40, v41)
        let v55 : string = method85()
        let v56 : string = method248(v36, v37, v38, v39, v40, v41, v54, v55, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v56)
and closure103 () () : US47 =
    US47_0
and method251 () : (unit -> US47) =
    closure103()
and closure104 () (v0 : string) : US47 =
    US47_1(v0)
and method252 () : (string -> US47) =
    closure104()
and method254 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "error'"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method253 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method254(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.file_delete"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure105 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method253(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method250 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method49()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US47) = method251()
        let v24 : (string -> US47) = method252()
        let v26 : US47 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US47_1(v29) -> (* Error *)
            let v30 : unit = ()
            let v31 : (unit -> unit) = closure105(v29)
            let v32 : unit = (fun () -> v31 (); v30) ()
            ()
        | US47_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v79 : (string -> unit) = System.IO.File.Delete
        v79 v1
        #endif
        // run_target_args' is_unit
        method250(v3)
    | UH5_0 -> (* Nil *)
        ()
and method255 (v0 : string) : string =
    v0
and closure107 () (v0 : std_fs_FileType) : US48 =
    US48_0(v0)
and method256 () : (std_fs_FileType -> US48) =
    closure107()
and closure108 () (v0 : std_string_String) : US48 =
    US48_1(v0)
and method257 () : (std_string_String -> US48) =
    closure108()
and method258 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v173 : US5 = US5_1
    let v174 : US5 = v159 |> Option.defaultValue v173 
    let v181 : string =
        match v174 with
        | US5_1 -> (* None *)
            let v179 : string = ""
            v179
        | US5_0(v178) -> (* Some *)
            v178
    let _run_target_args'_v5 = v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v183 : string = null |> unbox<string>
    let _run_target_args'_v5 = v183 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v187 : string = null |> unbox<string>
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : string = null |> unbox<string>
    let _run_target_args'_v5 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v195 : string = null |> unbox<string>
    let _run_target_args'_v5 = v195 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v198 : (string -> string) = System.IO.Path.GetDirectoryName
    let v199 : string = v198 v0
    let _run_target_args'_v5 = v199 
    #endif
#else
    let v200 : (string -> string) = System.IO.Path.GetDirectoryName
    let v201 : string = v200 v0
    let _run_target_args'_v5 = v201 
    #endif
    let v202 : string = _run_target_args'_v5 
    v202
and closure106 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US48) = method256()
    let v37 : (std_string_String -> US48) = method257()
    let v39 : US48 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v272 : US49 =
        match v39 with
        | US48_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US49_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v86 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v87 : string = "format!(\"{}\", $0)"
                let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v87 
                let _run_target_args'_v86 = v88 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v89 : string = "format!(\"{}\", $0)"
                let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v89 
                let _run_target_args'_v86 = v90 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v91 : string = "format!(\"{}\", $0)"
                let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v91 
                let _run_target_args'_v86 = v92 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v94 
                #endif
#if FABLE_COMPILER_PYTHON
                let v98 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v98 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v102 
                #endif
#else
                let v106 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v106 
                #endif
                let v109 : std_string_String = _run_target_args'_v86 
                let v115 : string = "fable_library_rust::String_::fromString($0)"
                let v116 : string = Fable.Core.RustInterop.emitRustExpr v109 v115 
                let v117 : string = method258(v116)
                let v119 : bool = v117.StartsWith (v0, false, null)
                let v122 : bool = v119 = false
                if v122 then
                    US49_1
                else
                    let v124 : string option = method41(v116)
                    let v127 : (string -> US5) = method6()
                    let v128 : US5 option = v124 |> Option.map v127 
                    let v142 : US5 = US5_1
                    let v143 : US5 = v128 |> Option.defaultValue v142 
                    match v143 with
                    | US5_0(v147) -> (* Some *)
                        let v149 : bool = v147.Contains v0 
                        let v152 : bool = v149 = false
                        if v152 then
                            US49_2
                        else
                            US49_1
                    | _ ->
                        US49_1
        | _ ->
            let v160 : string = "async_walkdir::DirEntry::path(&$0)"
            let v161 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v160 
            (* run_target_args'
            let v166 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v167 : string = "$0.display()"
            let v168 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v167 
            let _run_target_args'_v166 = v168 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v169 : string = "$0.display()"
            let v170 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v169 
            let _run_target_args'_v166 = v170 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : string = "$0.display()"
            let v172 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v161 v171 
            let _run_target_args'_v166 = v172 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v174 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v174 
            #endif
#if FABLE_COMPILER_PYTHON
            let v178 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v178 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v182 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v182 
            #endif
#else
            let v186 : std_path_Display = v161 |> unbox<std_path_Display>
            let _run_target_args'_v166 = v186 
            #endif
            let v189 : std_path_Display = _run_target_args'_v166 
            (* run_target_args'
            let v199 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v200 : string = "format!(\"{}\", $0)"
            let v201 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v200 
            let _run_target_args'_v199 = v201 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v202 : string = "format!(\"{}\", $0)"
            let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v202 
            let _run_target_args'_v199 = v203 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v204 : string = "format!(\"{}\", $0)"
            let v205 : std_string_String = Fable.Core.RustInterop.emitRustExpr v189 v204 
            let _run_target_args'_v199 = v205 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v207 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v207 
            #endif
#if FABLE_COMPILER_PYTHON
            let v211 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v211 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v215 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v215 
            #endif
#else
            let v219 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v199 = v219 
            #endif
            let v222 : std_string_String = _run_target_args'_v199 
            let v228 : string = "fable_library_rust::String_::fromString($0)"
            let v229 : string = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let v230 : string = method258(v229)
            let v232 : bool = v230.StartsWith (v0, false, null)
            let v235 : bool = v232 = false
            if v235 then
                US49_1
            else
                let v237 : string option = method41(v229)
                let v240 : (string -> US5) = method6()
                let v241 : US5 option = v237 |> Option.map v240 
                let v255 : US5 = US5_1
                let v256 : US5 = v241 |> Option.defaultValue v255 
                match v256 with
                | US5_0(v260) -> (* Some *)
                    let v262 : bool = v260.Contains v0 
                    let v265 : bool = v262 = false
                    if v265 then
                        US49_2
                    else
                        US49_1
                | _ ->
                    US49_1
    let v273 : string = ""
    let v274 : string = "}"
    let v275 : string = v273 + v274 
    let x = v272 //
    let v276 : _ = x
    let v277 : unit = ()
    (* run_target_args'
    let v278 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v279 : string = $"true; let _fix_closure_v277 = $0"
    let v280 : bool = Fable.Core.RustInterop.emitRustExpr v276 v279 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v281 : string = $"true; let _fix_closure_v277 = $0"
    let v282 : bool = Fable.Core.RustInterop.emitRustExpr v276 v281 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v283 : string = $"true; let _fix_closure_v277 = $0"
    let v284 : bool = Fable.Core.RustInterop.emitRustExpr v276 v283 
    let _run_target_args'_v278 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v278 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v278 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v278 = false 
    #endif
#else
    let _run_target_args'_v278 = false 
    #endif
    let v285 : bool = _run_target_args'_v278 
    let v287 : string = $"true; _fix_closure_v277 " + v275 + "); " + v273 + " // rust.fix_closure'"
    let v288 : bool = Fable.Core.RustInterop.emitRustExpr () v287 
    let v289 : string = "__future_init"
    let v290 : _ = Fable.Core.RustInterop.emitRustExpr () v289 
    let v291 : string = "v290"
    let v292 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US49>>, Send<Dyn<std_future_Future<US49>>>>>> = Fable.Core.RustInterop.emitRustExpr () v291 
    let v293 : string = "v292.await"
    let v294 : US49 = Fable.Core.RustInterop.emitRustExpr () v293 
    let v303 : async_walkdir_Filtering =
        match v294 with
        | US49_2 -> (* Continue *)
            let v299 : string = "async_walkdir::Filtering::Continue"
            let v300 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v299 
            v300
        | US49_0 -> (* Ignore *)
            let v295 : string = "async_walkdir::Filtering::Ignore"
            let v296 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v295 
            v296
        | US49_1 -> (* IgnoreDir *)
            let v297 : string = "async_walkdir::Filtering::IgnoreDir"
            let v298 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v297 
            v298
    let v304 : string = v273 + v274 
    let x = v303 //
    let v305 : _ = x
    let v306 : unit = ()
    (* run_target_args'
    let v307 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v308 : string = $"true; let _fix_closure_v306 = $0"
    let v309 : bool = Fable.Core.RustInterop.emitRustExpr v305 v308 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v310 : string = $"true; let _fix_closure_v306 = $0"
    let v311 : bool = Fable.Core.RustInterop.emitRustExpr v305 v310 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v312 : string = $"true; let _fix_closure_v306 = $0"
    let v313 : bool = Fable.Core.RustInterop.emitRustExpr v305 v312 
    let _run_target_args'_v307 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v307 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v307 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v307 = false 
    #endif
#else
    let _run_target_args'_v307 = false 
    #endif
    let v314 : bool = _run_target_args'_v307 
    let v316 : string = $"true; _fix_closure_v306 " + v304 + "); " + v273 + " // rust.fix_closure'"
    let v317 : bool = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : string = "__future_init"
    let v319 : _ = Fable.Core.RustInterop.emitRustExpr () v318 
    let v320 : string = "v319"
    let v321 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v320 
    v321
and closure110 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method260 () : (async_walkdir_Error -> std_string_String) =
    closure110()
and closure111 () (v0 : async_walkdir_DirEntry) : US50 =
    US50_0(v0)
and method261 () : (async_walkdir_DirEntry -> US50) =
    closure111()
and closure112 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method262 () : (std_string_String -> US50) =
    closure112()
and method263 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method132(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript / stream_filter_map"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure113 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method263(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure109 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method260()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US50) = method261()
    let v19 : (std_string_String -> US50) = method262()
    let v21 : US50 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v233 : US51 =
        match v21 with
        | US50_1(v181) -> (* Error *)
            let v182 : unit = ()
            let v183 : (unit -> unit) = closure113(v181)
            let v184 : unit = (fun () -> v183 (); v182) ()
            US51_1
        | US50_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v64 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v65 
            let _run_target_args'_v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v67 
            let _run_target_args'_v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "format!(\"{}\", $0)"
            let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v69 
            let _run_target_args'_v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v76 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v76 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v80 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v80 
            #endif
#else
            let v84 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v84 
            #endif
            let v87 : std_string_String = _run_target_args'_v64 
            let v93 : string = "fable_library_rust::String_::fromString($0)"
            let v94 : string = Fable.Core.RustInterop.emitRustExpr v87 v93 
            let v95 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v96 : string = $"regex::Regex::new(&$0)"
            let v97 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v95 v96 
            (* run_target_args'
            let v99 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v100 : string = "$0.unwrap()"
            let v101 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v100 
            let _run_target_args'_v99 = v101 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v102 : string = "$0.unwrap()"
            let v103 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v102 
            let _run_target_args'_v99 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : string = "$0.unwrap()"
            let v105 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v104 
            let _run_target_args'_v99 = v105 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v106 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v106 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v107 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v108 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v108 
            #endif
#else
            let v109 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v109 
            #endif
            let v110 : regex_Regex = _run_target_args'_v99 
            let v113 : Vec<std_collections_HashMap<string, string>> = method234(v94, v110)
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : (std_collections_HashMap<string, string> -> US45) = method235()
            let v120 : US45 option = v116 |> Option.map v119 
            let v134 : US45 = US45_1
            let v135 : US45 = v120 |> Option.defaultValue v134 
            let v168 : US46 =
                match v135 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v139) -> (* Some *)
                    let v140 : string = method236()
                    let v141 : string = "std::collections::HashMap::get(&$0, &v140).map(|x| x).cloned()"
                    let v142 : string option = Fable.Core.RustInterop.emitRustExpr v139 v141 
                    let v145 : (string -> US5) = method6()
                    let v146 : US5 option = v142 |> Option.map v145 
                    let v160 : US5 = US5_1
                    let v161 : US5 = v146 |> Option.defaultValue v160 
                    US46_0(v161)
            let v175 : US5 =
                match v168 with
                | US46_0(v169) -> (* Some *)
                    match v169 with
                    | US5_0(v170) -> (* Some *)
                        US5_0(v170)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v175 with
            | US5_1 -> (* None *)
                US51_1
            | US5_0(v176) -> (* Some *)
                US51_0(v94, v176)
    match v233 with
    | US51_1 -> (* None *)
        let v240 : struct (string * string) option = None
        v240
    | US51_0(v234, v235) -> (* Some *)
        let v237 : struct (string * string) option = Some struct (v234, v235) 
        v237
and method259 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure109(v0)
and closure114 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure115 () struct (v0 : string, v1 : string) : US51 =
    US51_0(v0, v1)
and method264 () : (struct (string * string) -> US51) =
    closure115()
and method266 (v0 : US51) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "version"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v2, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = " }"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v2, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = v2.l0
    v60
and method265 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US51) : string =
    let v9 : string = method266(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure116 (v0 : US51) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method265(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method267 (v0 : string, v1 : string, v2 : US51) : unit =
    match v2 with
    | US51_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US51_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method36(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method36(v0, v8)
        method218(v7, v9)
and method268 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_typescript"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure117 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method268(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method270 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "new_code_path"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method269 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method270(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure118 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method269(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method271 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method271(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method272 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method272(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure119 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method274 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "new_code_path"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "external_command"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "run_result"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method273 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method274(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure121 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method273(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure120 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure121(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method275 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure122 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method275(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method276 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method228(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_python"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure123 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method276(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method277 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method270(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_python"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure124 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method277(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure125 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method274(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure127 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method278(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure126 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure127(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method279 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method180(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure128 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method279(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method281 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "subcommand"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v41 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "format!(\"{:#?}\", $0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v41 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v41 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v41 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v41 = v63 
    #endif
#else
    let v67 : string = $"%A{v0}"
    let _run_target_args'_v41 = v67 
    #endif
    let v70 : string = _run_target_args'_v41 
    let v77 : string = $"{v70}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v3, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "arg_matches"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v3, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v28}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "format!(\"{:#?}\", $0)"
    let v122 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v121 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : string = "format!(\"{:#?}\", $0)"
    let v126 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v125 
    let v127 : string = "fable_library_rust::String_::fromString($0)"
    let v128 : string = Fable.Core.RustInterop.emitRustExpr v126 v127 
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "format!(\"{:#?}\", $0)"
    let v130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v129 
    let v131 : string = "fable_library_rust::String_::fromString($0)"
    let v132 : string = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let _run_target_args'_v120 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v134 : string = $"%A{v1}"
    let _run_target_args'_v120 = v134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v138 : string = $"%A{v1}"
    let _run_target_args'_v120 = v138 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v142 : string = $"%A{v1}"
    let _run_target_args'_v120 = v142 
    #endif
#else
    let v146 : string = $"%A{v1}"
    let _run_target_args'_v120 = v146 
    #endif
    let v149 : string = _run_target_args'_v120 
    let v156 : string = $"{v149}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v3, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v3, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v175 : string = v3.l0
    v175
and method280 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method281(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / invalid subcommand"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure129 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method280(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure130 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v28 v34 
    v35
and method282 () : (serde_json_Error -> string) =
    closure130()
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v14 : US6 option = v10 |> Option.map v13 
    let v29 : US6 = US6_1
    let v30 : US6 = v14 |> Option.defaultValue v29 
    let v6618 : (struct (string * string) []) =
        match v30 with
        | US6_0(v34, v35) -> (* Some *)
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v34 v36 
            let v38 : bool = v37 = "gleam"
            if v38 then
                let v39 : string = method22()
                (* run_target_args'
                let v44 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v45 : string = "&*$0"
                let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v45 
                let _run_target_args'_v44 = v46 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v47 : string = "&*$0"
                let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v47 
                let _run_target_args'_v44 = v48 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v49 : string = "&*$0"
                let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v49 
                let _run_target_args'_v44 = v50 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v52 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v52 
                #endif
#if FABLE_COMPILER_PYTHON
                let v56 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v56 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v60 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v60 
                #endif
#else
                let v64 : Ref<Str> = v39 |> unbox<Ref<Str>>
                let _run_target_args'_v44 = v64 
                #endif
                let v67 : Ref<Str> = _run_target_args'_v44 
                let v73 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v74 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v67) v73 
                let v77 : (std_string_String -> US7) = method23()
                let v78 : US7 option = v74 |> Option.map v77 
                let v92 : US7 = US7_1
                let v93 : US7 = v78 |> Option.defaultValue v92 
                let v100 : std_string_String =
                    match v93 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v97) -> (* Some *)
                        v97
                let v101 : string = "fable_library_rust::String_::fromString($0)"
                let v102 : string = Fable.Core.RustInterop.emitRustExpr v100 v101 
                let v103 : string = method24()
                (* run_target_args'
                let v108 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v109 : string = "&*$0"
                let v110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v109 
                let _run_target_args'_v108 = v110 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v111 : string = "&*$0"
                let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v111 
                let _run_target_args'_v108 = v112 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v113 : string = "&*$0"
                let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v103 v113 
                let _run_target_args'_v108 = v114 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v116 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v116 
                #endif
#if FABLE_COMPILER_PYTHON
                let v120 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v120 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v124 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v124 
                #endif
#else
                let v128 : Ref<Str> = v103 |> unbox<Ref<Str>>
                let _run_target_args'_v108 = v128 
                #endif
                let v131 : Ref<Str> = _run_target_args'_v108 
                let v137 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v138 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v131) v137 
                let v141 : (std_string_String -> US7) = method23()
                let v142 : US7 option = v138 |> Option.map v141 
                let v156 : US7 = US7_1
                let v157 : US7 = v142 |> Option.defaultValue v156 
                let v218 : US8 =
                    match v157 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v161) -> (* Some *)
                        let v162 : string = "fable_library_rust::String_::fromString($0)"
                        let v163 : string = Fable.Core.RustInterop.emitRustExpr v161 v162 
                        
                        
                        
                        
                        let v166 : string = "JavaScript"
                        let v167 : (unit -> string) = v166.ToLower
                        let v168 : string = v167 ()
                        let v173 : string = "Erlang"
                        let v174 : (unit -> string) = v173.ToLower
                        let v175 : string = v174 ()
                        let v178 : bool = "Erlang" = v163
                        let v182 : US9 =
                            if v178 then
                                let v179 : US10 = US10_0
                                US9_0(v179)
                            else
                                US9_1
                        let v214 : US9 =
                            match v182 with
                            | US9_1 -> (* None *)
                                let v185 : bool = "JavaScript" = v163
                                let v189 : US9 =
                                    if v185 then
                                        let v186 : US10 = US10_1
                                        US9_0(v186)
                                    else
                                        US9_1
                                match v189 with
                                | US9_1 -> (* None *)
                                    let v192 : bool = v175 = v163
                                    let v196 : US9 =
                                        if v192 then
                                            let v193 : US10 = US10_0
                                            US9_0(v193)
                                        else
                                            US9_1
                                    match v196 with
                                    | US9_1 -> (* None *)
                                        let v199 : bool = v168 = v163
                                        let v203 : US9 =
                                            if v199 then
                                                let v200 : US10 = US10_1
                                                US9_0(v200)
                                            else
                                                US9_1
                                        match v203 with
                                        | US9_1 -> (* None *)
                                            US9_1
                                        | US9_0(v204) -> (* Some *)
                                            US9_0(v204)
                                    | US9_0(v197) -> (* Some *)
                                        US9_0(v197)
                                | US9_0(v190) -> (* Some *)
                                    US9_0(v190)
                            | US9_0(v183) -> (* Some *)
                                US9_0(v183)
                        US8_0(v214)
                let v225 : US9 =
                    match v218 with
                    | US8_0(v219) -> (* Some *)
                        match v219 with
                        | US9_0(v220) -> (* Some *)
                            US9_0(v220)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v229 : US10 =
                    match v225 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v226) -> (* Some *)
                        v226
                let v230 : string = method25()
                (* run_target_args'
                let v235 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v236 : string = "&*$0"
                let v237 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v230 v236 
                let _run_target_args'_v235 = v237 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v238 : string = "&*$0"
                let v239 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v230 v238 
                let _run_target_args'_v235 = v239 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v240 : string = "&*$0"
                let v241 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v230 v240 
                let _run_target_args'_v235 = v241 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v243 : Ref<Str> = v230 |> unbox<Ref<Str>>
                let _run_target_args'_v235 = v243 
                #endif
#if FABLE_COMPILER_PYTHON
                let v247 : Ref<Str> = v230 |> unbox<Ref<Str>>
                let _run_target_args'_v235 = v247 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v251 : Ref<Str> = v230 |> unbox<Ref<Str>>
                let _run_target_args'_v235 = v251 
                #endif
#else
                let v255 : Ref<Str> = v230 |> unbox<Ref<Str>>
                let _run_target_args'_v235 = v255 
                #endif
                let v258 : Ref<Str> = _run_target_args'_v235 
                let v264 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v265 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v258) v264 
                let v268 : (Vec<std_string_String> -> US11) = method26()
                let v269 : US11 option = v265 |> Option.map v268 
                let v283 : US11 = US11_1
                let v284 : US11 = v269 |> Option.defaultValue v283 
                let v288 : (std_string_String []) = [||]
                let v289 : string = "$0.to_vec()"
                let v290 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v288 v289 
                let v293 : Vec<std_string_String> =
                    match v284 with
                    | US11_1 -> (* None *)
                        v290
                    | US11_0(v291) -> (* Some *)
                        v291
                (* run_target_args'
                let v298 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v303 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v304 : string = "std::fs::read(&*$0)"
                let v305 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v102 v304 
                (* run_target_args'
                let v307 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v308 : string = "$0.unwrap()"
                let v309 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v305 v308 
                let _run_target_args'_v307 = v309 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v310 : string = "$0.unwrap()"
                let v311 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v305 v310 
                let _run_target_args'_v307 = v311 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v312 : string = "$0.unwrap()"
                let v313 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v305 v312 
                let _run_target_args'_v307 = v313 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v314 : Vec<uint8> = match v305 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v307 = v314 
                #endif
#if FABLE_COMPILER_PYTHON
                let v315 : Vec<uint8> = match v305 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v307 = v315 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v316 : Vec<uint8> = match v305 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v307 = v316 
                #endif
#else
                let v317 : Vec<uint8> = match v305 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v307 = v317 
                #endif
                let v318 : Vec<uint8> = _run_target_args'_v307 
                let _run_target_args'_v303 = v318 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v322 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v303 = v322 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v326 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v303 = v326 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v330 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v303 = v330 
                #endif
#if FABLE_COMPILER_PYTHON
                let v334 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v303 = v334 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v338 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v303 = v338 
                #endif
#else
                let v341 : (uint8 []) = v102 |> System.IO.File.ReadAllBytes
                let v342 : string = "$0.to_vec()"
                let v343 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v341 v342 
                let _run_target_args'_v303 = v343 
                #endif
                let v344 : Vec<uint8> = _run_target_args'_v303 
                let v350 : Vec<uint8> = method27(v344)
                let v351 : string = "std::string::String::from_utf8($0)"
                let v352 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v350 v351 
                (* run_target_args'
                let v354 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v355 : string = "$0.unwrap()"
                let v356 : std_string_String = Fable.Core.RustInterop.emitRustExpr v352 v355 
                let _run_target_args'_v354 = v356 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v357 : string = "$0.unwrap()"
                let v358 : std_string_String = Fable.Core.RustInterop.emitRustExpr v352 v357 
                let _run_target_args'_v354 = v358 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v359 : string = "$0.unwrap()"
                let v360 : std_string_String = Fable.Core.RustInterop.emitRustExpr v352 v359 
                let _run_target_args'_v354 = v360 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v361 : std_string_String = match v352 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v354 = v361 
                #endif
#if FABLE_COMPILER_PYTHON
                let v362 : std_string_String = match v352 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v354 = v362 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v363 : std_string_String = match v352 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v354 = v363 
                #endif
#else
                let v364 : std_string_String = match v352 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v354 = v364 
                #endif
                let v365 : std_string_String = _run_target_args'_v354 
                let v368 : string = "fable_library_rust::String_::fromString($0)"
                let v369 : string = Fable.Core.RustInterop.emitRustExpr v365 v368 
                let _run_target_args'_v298 = v369 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v371 : string = null |> unbox<string>
                let _run_target_args'_v298 = v371 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v375 : string = null |> unbox<string>
                let _run_target_args'_v298 = v375 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v379 : string = null |> unbox<string>
                let _run_target_args'_v298 = v379 
                #endif
#if FABLE_COMPILER_PYTHON
                let v383 : string = null |> unbox<string>
                let _run_target_args'_v298 = v383 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : string = null |> unbox<string>
                let _run_target_args'_v298 = v387 
                #endif
#else
                let v390 : string = v102 |> System.IO.File.ReadAllText
                let _run_target_args'_v298 = v390 
                #endif
                let v391 : string = _run_target_args'_v298 
                let v397 : string = "gleam"
                let v398 : string = method28(v397, v391)
                let v399 : string = method29(v398)
                let v400 : string = method34()
                let v401 : US5 = method35(v400)
                let v407 : US5 =
                    match v401 with
                    | US5_1 -> (* None *)
                        let v404 : string = __SOURCE_DIRECTORY__
                        method35(v404)
                    | US5_0(v402) -> (* Some *)
                        US5_0(v402)
                let v413 : US5 =
                    match v407 with
                    | US5_1 -> (* None *)
                        let v410 : string = "/workspaces"
                        method35(v410)
                    | US5_0(v408) -> (* Some *)
                        US5_0(v408)
                let v417 : string =
                    match v413 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v414) -> (* Some *)
                        v414
                let v418 : string = method55(v417)
                let v419 : bool = "deps" = v418
                let v430 : string =
                    if v419 then
                        let v420 : string option = method41(v417)
                        let v422 : string = v420 |> Option.get
                        let v425 : US5 = method35(v422)
                        match v425 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v426) -> (* Some *)
                            v426
                    else
                        v417
                let v431 : string = "polyglot"
                let v432 : string = method36(v430, v431)
                let v433 : string = method34()
                let v435 : (unit -> string) = v433.ToLower
                let v436 : string = v435 ()
                let v440 : (unit -> string) = v432.ToLower
                let v441 : string = v440 ()
                let v445 : bool = v436.StartsWith (v441, false, null)
                let v450 : US13 =
                    if v445 then
                        US13_1(v441)
                    else
                        US13_0(v441)
                let v462 : Result<string, string> =
                    match v450 with
                    | US13_1(v456) -> (* Error *)
                        let v458 : Result<string, string> = Error v456 
                        v458
                    | US13_0(v451) -> (* Ok *)
                        let v453 : Result<string, string> = Ok v451 
                        v453
                let v463 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v464 : bool = Fable.Core.RustInterop.emitRustExpr v462 v463 
                let v465 : string = "x"
                let v466 : string = Fable.Core.RustInterop.emitRustExpr () v465 
                let v467 : string = "true; $0 })"
                let v468 : bool = Fable.Core.RustInterop.emitRustExpr v466 v467 
                let v469 : string = "_result_unwrap_or_else"
                let v470 : string = Fable.Core.RustInterop.emitRustExpr () v469 
                let v471 : string = method69(v470)
                let v472 : string option = method41(v102)
                let v475 : string = ""
                let v476 : string = v472 |> Option.defaultValue v475 
                let v479 : string = ".."
                let v480 : string = method36(v476, v479)
                let v481 : string = method69(v480)
                let v482 : string = "gleam.toml"
                let v483 : string = method36(v481, v482)
                let v484 : string = "gleam_stdlib=\">=0.55.0 and <1.0.0\""
                let v485 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v486 : (string []) = [|v484; v485|]
                let v487 : string = "$0.to_vec()"
                let v488 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v486 v487 
                let v489 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v490 : bool = Fable.Core.RustInterop.emitRustExpr v488 v489 
                let v491 : string = "x"
                let v492 : string = Fable.Core.RustInterop.emitRustExpr () v491 
                (* run_target_args'
                let v497 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v498 : string = "&*$0"
                let v499 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v492 v498 
                let _run_target_args'_v497 = v499 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v500 : string = "&*$0"
                let v501 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v492 v500 
                let _run_target_args'_v497 = v501 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v502 : string = "&*$0"
                let v503 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v492 v502 
                let _run_target_args'_v497 = v503 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v505 : Ref<Str> = v492 |> unbox<Ref<Str>>
                let _run_target_args'_v497 = v505 
                #endif
#if FABLE_COMPILER_PYTHON
                let v509 : Ref<Str> = v492 |> unbox<Ref<Str>>
                let _run_target_args'_v497 = v509 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v513 : Ref<Str> = v492 |> unbox<Ref<Str>>
                let _run_target_args'_v497 = v513 
                #endif
#else
                let v517 : Ref<Str> = v492 |> unbox<Ref<Str>>
                let _run_target_args'_v497 = v517 
                #endif
                let v520 : Ref<Str> = _run_target_args'_v497 
                (* run_target_args'
                let v530 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v531 : string = "String::from($0)"
                let v532 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v531 
                let _run_target_args'_v530 = v532 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v533 : string = "String::from($0)"
                let v534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v533 
                let _run_target_args'_v530 = v534 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v535 : string = "String::from($0)"
                let v536 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v535 
                let _run_target_args'_v530 = v536 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v538 : std_string_String = v520 |> unbox<std_string_String>
                let _run_target_args'_v530 = v538 
                #endif
#if FABLE_COMPILER_PYTHON
                let v542 : std_string_String = v520 |> unbox<std_string_String>
                let _run_target_args'_v530 = v542 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v546 : std_string_String = v520 |> unbox<std_string_String>
                let _run_target_args'_v530 = v546 
                #endif
#else
                let v550 : std_string_String = v520 |> unbox<std_string_String>
                let _run_target_args'_v530 = v550 
                #endif
                let v553 : std_string_String = _run_target_args'_v530 
                let v559 : string = "true; $0 }).collect::<Vec<_>>()"
                let v560 : bool = Fable.Core.RustInterop.emitRustExpr v553 v559 
                let v561 : string = "_vec_map"
                let v562 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v561 
                let v563 : Vec<std_string_String> = method73(v293)
                let v564 : Vec<std_string_String> = method74(v562)
                let v565 : string = "true; let mut v564 = v564"
                let v566 : bool = Fable.Core.RustInterop.emitRustExpr () v565 
                let v567 : string = "true; v564.extend(v563)"
                let v568 : bool = Fable.Core.RustInterop.emitRustExpr () v567 
                let v569 : string = "v564"
                let v570 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v569 
                let v571 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v572 : bool = Fable.Core.RustInterop.emitRustExpr v570 v571 
                let v573 : string = "x"
                let v574 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v573 
                let v575 : string = "fable_library_rust::String_::fromString($0)"
                let v576 : string = Fable.Core.RustInterop.emitRustExpr v574 v575 
                let v579 : string = "="
                let v580 : bool = v576.Contains v579 
                let v595 : string =
                    if v580 then
                        v576
                    else
                        let v585 : string = "]"
                        let v586 : bool = v576.EndsWith (v585, false, null)
                        if v586 then
                            let v589 : string = $"={{version='*',features=["
                            let v590 : string = "["
                            let v591 : string = v576.Replace (v590, v589)
                            let v592 : string = $"{v591}}}"
                            v592
                        else
                            let v593 : string = $"{v576}='*'"
                            v593
                let v596 : string = "true; $0 }).collect::<Vec<_>>()"
                let v597 : bool = Fable.Core.RustInterop.emitRustExpr v595 v596 
                let v598 : string = "_vec_map"
                let v599 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v598 
                let v600 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v601 : (string []) = Fable.Core.RustInterop.emitRustExpr v599 v600 
                let v606 : unit = ()
                let _let'_v606 =
                    seq {
                        for i = 0 to v601.Length - 1 do yield v601.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v609 : string seq = _let'_v606 
                let v617 : string = method75()
                let v618 : (string -> (string seq -> string)) = String.concat
                let v619 : (string seq -> string) = v618 v617
                let v620 : string = v619 v609
                
                
                let v624 : bool =
                    match v229 with
                    | US10_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v628 : US5 =
                    if v624 then
                        let v625 : string = "Erlang"
                        US5_0(v625)
                    else
                        US5_1
                let v642 : US5 =
                    match v628 with
                    | US5_1 -> (* None *)
                        let v631 : bool =
                            match v229 with
                            | US10_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v635 : US5 =
                            if v631 then
                                let v632 : string = "JavaScript"
                                US5_0(v632)
                            else
                                US5_1
                        match v635 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v636) -> (* Some *)
                            US5_0(v636)
                    | US5_0(v629) -> (* Some *)
                        US5_0(v629)
                let v646 : string =
                    match v642 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v643) -> (* Some *)
                        v643
                let v648 : (unit -> string) = v646.ToLower
                let v649 : string = v648 ()
                let v654 : string = "_real"
                let v655 : bool = v102.Contains v654 
                let v660 : string =
                    if v655 then
                        let v658 : string = "main_real"
                        v658
                    else
                        let v659 : string = "main"
                        v659
                let v661 : string = $"name = \"{v660}\""
                let v662 : string = $"target = \"{v649}\""
                let v663 : string = "\n"
                let v664 : string = v661 + v663 
                let v665 : string = v664 + v662 
                let v666 : string = $""
                let v667 : string = v665 + v663 
                let v668 : string = v667 + v666 
                let v669 : string = $"[dependencies]"
                let v670 : string = v668 + v663 
                let v671 : string = v670 + v669 
                let v672 : string = $"{v620}"
                let v673 : string = v671 + v663 
                let v674 : string = v673 + v672 
                method76(v483, v674)
                let v675 : System.Threading.CancellationToken option = None
                let v676 : (struct (string * string) []) = [||]
                let v677 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v678 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v679 : string option = None
                let v680 : string = $"gleam format"
                let v682 : string option = Some v481 
                let v685 : bool = true
                let struct (v686 : int32, v687 : string) = method101(v680, v675, v676, v677, v678, v685, v682)
                let v689 : bool = v686 <> 0 
                let struct (v963 : US5, v964 : US5, v965 : US5, v966 : US5) =
                    if v689 then
                        let v692 : unit = ()
                        let v693 : (unit -> unit) = closure68(v102, v687, v686)
                        let v694 : unit = (fun () -> v693 (); v692) ()
                        let v741 : US5 = US5_0(v397)
                        let v742 : US5 = US5_1
                        let v743 : US5 = US5_1
                        let v744 : US5 = US5_1
                        struct (v741, v742, v743, v744)
                    else
                        let v745 : bool =
                            match v229 with
                            | US10_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v748 : string =
                            if v745 then
                                let v746 : string = $"gleam run --no-print-progress \"{v102}\""
                                v746
                            else
                                let v747 : string = $"gleam build --no-print-progress"
                                v747
                        let v749 : string = "TRACE_LEVEL"
                        let v750 : string = "GLEAM_LOG"
                        let v751 : string = "GLEAM_LOG_NOCOLOUR"
                        let v752 : (struct (string * string) []) = [|struct (v749, v475); struct (v750, v475); struct (v751, v475)|]
                        let v753 : System.Threading.CancellationToken option = None
                        let v754 : (struct (string * string) []) = [||]
                        let v755 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v756 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v757 : string option = None
                        let v759 : string option = Some v481 
                        let v762 : bool = true
                        let struct (v763 : int32, v764 : string) = method101(v748, v753, v752, v755, v756, v762, v759)
                        let v765 : int32 = v752.Length
                        let v766 : (string []) = Array.zeroCreate<string> (v765)
                        let v767 : Mut5 = {l0 = 0} : Mut5
                        while method32(v765, v767) do
                            let v769 : int32 = v767.l0
                            let struct (v770 : string, v771 : string) = v752.[int v769]
                            let v772 : string = $"$env:{v770}=''{v771}''"
                            v766.[int v769] <- v772
                            let v773 : int32 = v769 + 1
                            v767.l0 <- v773
                            ()
                        let v775 : string seq = v766 |> Seq.ofArray
                        let v780 : (string -> (string seq -> string)) = String.concat
                        let v781 : string = ";"
                        let v782 : (string seq -> string) = v780 v781
                        let v783 : string = v782 v775
                        let v786 : string = $"pwsh -c '{v783}; {v748}'"
                        let v787 : bool = v763 = 0
                        let struct (v959 : US5, v960 : US5, v961 : US5, v962 : US5) =
                            if v787 then
                                let v788 : bool =
                                    match v229 with
                                    | US10_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v816 : string =
                                    if v788 then
                                        v764
                                    else
                                        let v789 : string = "http://localhost:3000"
                                        let v790 : string = v481.Replace (v471, v789)
                                        let v791 : string =     $"<link"
                                        let v792 : string = $"  rel=\"stylesheet\""
                                        let v793 : string = v791 + v663 
                                        let v794 : string = v793 + v792 
                                        let v795 : string = $"  href=\"{v790}/build/dev/javascript/lustre_ui/priv/styles.css\""
                                        let v796 : string = v794 + v663 
                                        let v797 : string = v796 + v795 
                                        let v798 : string = $"/>"
                                        let v799 : string = v797 + v663 
                                        let v800 : string = v799 + v798 
                                        let v801 : string = $"<div id=\"app\"></div>"
                                        let v802 : string = v800 + v663 
                                        let v803 : string = v802 + v801 
                                        let v804 : string = $"<script type=\"module\">"
                                        let v805 : string = v803 + v663 
                                        let v806 : string = v805 + v804 
                                        let v807 : string = $"  import * as main from \"{v790}/build/dev/javascript/main/main.mjs\""
                                        let v808 : string = v806 + v663 
                                        let v809 : string = v808 + v807 
                                        let v810 : string = $"  main.main()"
                                        let v811 : string = v809 + v663 
                                        let v812 : string = v811 + v810 
                                        let v813 : string = $"</script>"
                                        let v814 : string = v812 + v663 
                                        let v815 : string = v814 + v813 
                                        v815
                                (* run_target_args'
                                let v821 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v822 : string = "&*$0"
                                let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v816 v822 
                                let _run_target_args'_v821 = v823 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v824 : string = "&*$0"
                                let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v816 v824 
                                let _run_target_args'_v821 = v825 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v826 : string = "&*$0"
                                let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v816 v826 
                                let _run_target_args'_v821 = v827 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v829 : Ref<Str> = v816 |> unbox<Ref<Str>>
                                let _run_target_args'_v821 = v829 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v833 : Ref<Str> = v816 |> unbox<Ref<Str>>
                                let _run_target_args'_v821 = v833 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v837 : Ref<Str> = v816 |> unbox<Ref<Str>>
                                let _run_target_args'_v821 = v837 
                                #endif
#else
                                let v841 : Ref<Str> = v816 |> unbox<Ref<Str>>
                                let _run_target_args'_v821 = v841 
                                #endif
                                let v844 : Ref<Str> = _run_target_args'_v821 
                                (* run_target_args'
                                let v854 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v855 : string = "String::from($0)"
                                let v856 : std_string_String = Fable.Core.RustInterop.emitRustExpr v844 v855 
                                let _run_target_args'_v854 = v856 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v857 : string = "String::from($0)"
                                let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr v844 v857 
                                let _run_target_args'_v854 = v858 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v859 : string = "String::from($0)"
                                let v860 : std_string_String = Fable.Core.RustInterop.emitRustExpr v844 v859 
                                let _run_target_args'_v854 = v860 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v862 : std_string_String = v844 |> unbox<std_string_String>
                                let _run_target_args'_v854 = v862 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v866 : std_string_String = v844 |> unbox<std_string_String>
                                let _run_target_args'_v854 = v866 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v870 : std_string_String = v844 |> unbox<std_string_String>
                                let _run_target_args'_v854 = v870 
                                #endif
#else
                                let v874 : std_string_String = v844 |> unbox<std_string_String>
                                let _run_target_args'_v854 = v874 
                                #endif
                                let v877 : std_string_String = _run_target_args'_v854 
                                let v883 : (string -> US5) = closure69()
                                let v884 : (unit -> string) = closure70(v816)
                                let v885 : (exn -> US5) = closure71(v102, v786, v877)
                                let v887 : US5 = US5_1
                                let result = ref v887
                                try
                                    result.Value <- v884 () |> v883 
                                with ex ->
                                    result.Value <- v885 ex 
                                let v888 : US5 = result.Value
                                let v899 : string option =
                                    match v888 with
                                    | US5_1 -> (* None *)
                                        let v897 : string option = None
                                        v897
                                    | US5_0(v892) -> (* Some *)
                                        let v894 : string option = Some v892 
                                        v894
                                let v900 : string = "$0.unwrap()"
                                let v901 : string = Fable.Core.RustInterop.emitRustExpr v899 v900 
                                let v902 : US5 = US5_0(v397)
                                let v903 : US5 = US5_0(v391)
                                let v904 : US5 = US5_0(v102)
                                let v905 : US5 = US5_0(v901)
                                struct (v902, v903, v904, v905)
                            else
                                let v906 : unit = ()
                                let v907 : (unit -> unit) = closure73(v102, v764, v763, v786)
                                let v908 : unit = (fun () -> v907 (); v906) ()
                                let v955 : US5 = US5_0(v397)
                                let v956 : US5 = US5_1
                                let v957 : US5 = US5_1
                                let v958 : US5 = US5_1
                                struct (v955, v956, v957, v958)
                        struct (v959, v960, v961, v962)
                let v969 : string =
                    match v963 with
                    | US5_1 -> (* None *)
                        v475
                    | US5_0(v967) -> (* Some *)
                        v967
                let v970 : string = "extension"
                let v973 : string =
                    match v964 with
                    | US5_1 -> (* None *)
                        v475
                    | US5_0(v971) -> (* Some *)
                        v971
                let v974 : string = "code"
                let v977 : string =
                    match v966 with
                    | US5_1 -> (* None *)
                        v475
                    | US5_0(v975) -> (* Some *)
                        v975
                let v978 : string = "output"
                let v979 : (struct (string * string) []) = [|struct (v970, v969); struct (v974, v973); struct (v978, v977)|]
                let v980 : string = "$0.to_vec()"
                let v981 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v979 v980 
                let v982 : unit = ()
                let v983 : string = $"true; let _func1_from_v982 = Func1::from(move |value| {{ //"
                let v984 : bool = Fable.Core.RustInterop.emitRustExpr () v983 
                let v985 : string = $"value"
                let struct (v986 : string, v987 : string) = Fable.Core.RustInterop.emitRustExpr () v985 
                (* run_target_args'
                let v992 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v993 : string = "&*$0"
                let v994 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v986 v993 
                let _run_target_args'_v992 = v994 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v995 : string = "&*$0"
                let v996 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v986 v995 
                let _run_target_args'_v992 = v996 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v997 : string = "&*$0"
                let v998 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v986 v997 
                let _run_target_args'_v992 = v998 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1000 : Ref<Str> = v986 |> unbox<Ref<Str>>
                let _run_target_args'_v992 = v1000 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1004 : Ref<Str> = v986 |> unbox<Ref<Str>>
                let _run_target_args'_v992 = v1004 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1008 : Ref<Str> = v986 |> unbox<Ref<Str>>
                let _run_target_args'_v992 = v1008 
                #endif
#else
                let v1012 : Ref<Str> = v986 |> unbox<Ref<Str>>
                let _run_target_args'_v992 = v1012 
                #endif
                let v1015 : Ref<Str> = _run_target_args'_v992 
                (* run_target_args'
                let v1025 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1026 : string = "String::from($0)"
                let v1027 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1015 v1026 
                let _run_target_args'_v1025 = v1027 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1028 : string = "String::from($0)"
                let v1029 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1015 v1028 
                let _run_target_args'_v1025 = v1029 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1030 : string = "String::from($0)"
                let v1031 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1015 v1030 
                let _run_target_args'_v1025 = v1031 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1033 : std_string_String = v1015 |> unbox<std_string_String>
                let _run_target_args'_v1025 = v1033 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1037 : std_string_String = v1015 |> unbox<std_string_String>
                let _run_target_args'_v1025 = v1037 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1041 : std_string_String = v1015 |> unbox<std_string_String>
                let _run_target_args'_v1025 = v1041 
                #endif
#else
                let v1045 : std_string_String = v1015 |> unbox<std_string_String>
                let _run_target_args'_v1025 = v1045 
                #endif
                let v1048 : std_string_String = _run_target_args'_v1025 
                (* run_target_args'
                let v1058 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1059 : string = "&*$0"
                let v1060 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v987 v1059 
                let _run_target_args'_v1058 = v1060 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1061 : string = "&*$0"
                let v1062 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v987 v1061 
                let _run_target_args'_v1058 = v1062 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1063 : string = "&*$0"
                let v1064 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v987 v1063 
                let _run_target_args'_v1058 = v1064 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1066 : Ref<Str> = v987 |> unbox<Ref<Str>>
                let _run_target_args'_v1058 = v1066 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1070 : Ref<Str> = v987 |> unbox<Ref<Str>>
                let _run_target_args'_v1058 = v1070 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1074 : Ref<Str> = v987 |> unbox<Ref<Str>>
                let _run_target_args'_v1058 = v1074 
                #endif
#else
                let v1078 : Ref<Str> = v987 |> unbox<Ref<Str>>
                let _run_target_args'_v1058 = v1078 
                #endif
                let v1081 : Ref<Str> = _run_target_args'_v1058 
                (* run_target_args'
                let v1091 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1092 : string = "String::from($0)"
                let v1093 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1092 
                let _run_target_args'_v1091 = v1093 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1094 : string = "String::from($0)"
                let v1095 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1094 
                let _run_target_args'_v1091 = v1095 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1096 : string = "String::from($0)"
                let v1097 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1096 
                let _run_target_args'_v1091 = v1097 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1099 : std_string_String = v1081 |> unbox<std_string_String>
                let _run_target_args'_v1091 = v1099 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1103 : std_string_String = v1081 |> unbox<std_string_String>
                let _run_target_args'_v1091 = v1103 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1107 : std_string_String = v1081 |> unbox<std_string_String>
                let _run_target_args'_v1091 = v1107 
                #endif
#else
                let v1111 : std_string_String = v1081 |> unbox<std_string_String>
                let _run_target_args'_v1091 = v1111 
                #endif
                let v1114 : std_string_String = _run_target_args'_v1091 
                let v1121 : (std_string_String * std_string_String) = v1048, v1114 
                let func1_from_result = v1121 //
                let v1124 : _ = func1_from_result
                let v1125 : string = $"true; $0 /*"
                let v1126 : bool = Fable.Core.RustInterop.emitRustExpr v1124 v1125 
                let v1127 : string = $"*/ }}); //"
                let v1128 : bool = Fable.Core.RustInterop.emitRustExpr () v1127 
                let v1129 : string = $"_func1_from_v982"
                let v1130 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v1129 
                let v1131 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v1132 : (struct (string * string) -> (std_string_String * std_string_String)) = closure74(v1130)
                let v1133 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v981, v1132) v1131 
                let v1134 : string = "std::collections::BTreeMap::from_iter(v1133.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v1135 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1134 
                let v1136 : string = "serde_json::to_string(&v1135)"
                let v1137 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v1136 
                (* run_target_args'
                let v1139 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1140 : string = "$0.unwrap()"
                let v1141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1137 v1140 
                let _run_target_args'_v1139 = v1141 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1142 : string = "$0.unwrap()"
                let v1143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1137 v1142 
                let _run_target_args'_v1139 = v1143 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1144 : string = "$0.unwrap()"
                let v1145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1137 v1144 
                let _run_target_args'_v1139 = v1145 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1146 : std_string_String = match v1137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1139 = v1146 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1147 : std_string_String = match v1137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1139 = v1147 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1148 : std_string_String = match v1137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1139 = v1148 
                #endif
#else
                let v1149 : std_string_String = match v1137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1139 = v1149 
                #endif
                let v1150 : std_string_String = _run_target_args'_v1139 
                let v1153 : string = "fable_library_rust::String_::fromString($0)"
                let v1154 : string = Fable.Core.RustInterop.emitRustExpr v1150 v1153 
                let v1155 : string = "command_result"
                [|struct (v1155, v1154)|]
            else
                let v1157 : string = "fable_library_rust::String_::fromString($0)"
                let v1158 : string = Fable.Core.RustInterop.emitRustExpr v34 v1157 
                let v1159 : bool = v1158 = "cuda"
                if v1159 then
                    let v1160 : string = method182()
                    (* run_target_args'
                    let v1165 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1166 : string = "&*$0"
                    let v1167 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1160 v1166 
                    let _run_target_args'_v1165 = v1167 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1168 : string = "&*$0"
                    let v1169 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1160 v1168 
                    let _run_target_args'_v1165 = v1169 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1170 : string = "&*$0"
                    let v1171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1160 v1170 
                    let _run_target_args'_v1165 = v1171 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1173 : Ref<Str> = v1160 |> unbox<Ref<Str>>
                    let _run_target_args'_v1165 = v1173 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1177 : Ref<Str> = v1160 |> unbox<Ref<Str>>
                    let _run_target_args'_v1165 = v1177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1181 : Ref<Str> = v1160 |> unbox<Ref<Str>>
                    let _run_target_args'_v1165 = v1181 
                    #endif
#else
                    let v1185 : Ref<Str> = v1160 |> unbox<Ref<Str>>
                    let _run_target_args'_v1165 = v1185 
                    #endif
                    let v1188 : Ref<Str> = _run_target_args'_v1165 
                    let v1194 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1195 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1188) v1194 
                    let v1198 : (std_string_String -> US7) = method23()
                    let v1199 : US7 option = v1195 |> Option.map v1198 
                    let v1213 : US7 = US7_1
                    let v1214 : US7 = v1199 |> Option.defaultValue v1213 
                    let v1221 : std_string_String =
                        match v1214 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v1218) -> (* Some *)
                            v1218
                    let v1222 : string = "fable_library_rust::String_::fromString($0)"
                    let v1223 : string = Fable.Core.RustInterop.emitRustExpr v1221 v1222 
                    let v1224 : string = method183()
                    (* run_target_args'
                    let v1229 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1230 : string = "&*$0"
                    let v1231 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1224 v1230 
                    let _run_target_args'_v1229 = v1231 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1232 : string = "&*$0"
                    let v1233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1224 v1232 
                    let _run_target_args'_v1229 = v1233 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1234 : string = "&*$0"
                    let v1235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1224 v1234 
                    let _run_target_args'_v1229 = v1235 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1237 : Ref<Str> = v1224 |> unbox<Ref<Str>>
                    let _run_target_args'_v1229 = v1237 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1241 : Ref<Str> = v1224 |> unbox<Ref<Str>>
                    let _run_target_args'_v1229 = v1241 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1245 : Ref<Str> = v1224 |> unbox<Ref<Str>>
                    let _run_target_args'_v1229 = v1245 
                    #endif
#else
                    let v1249 : Ref<Str> = v1224 |> unbox<Ref<Str>>
                    let _run_target_args'_v1229 = v1249 
                    #endif
                    let v1252 : Ref<Str> = _run_target_args'_v1229 
                    let v1258 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1259 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1252) v1258 
                    let v1262 : (std_string_String -> US7) = method23()
                    let v1263 : US7 option = v1259 |> Option.map v1262 
                    let v1277 : US7 = US7_1
                    let v1278 : US7 = v1263 |> Option.defaultValue v1277 
                    let v1339 : US36 =
                        match v1278 with
                        | US7_1 -> (* None *)
                            US36_1
                        | US7_0(v1282) -> (* Some *)
                            let v1283 : string = "fable_library_rust::String_::fromString($0)"
                            let v1284 : string = Fable.Core.RustInterop.emitRustExpr v1282 v1283 
                            
                            
                            
                            
                            let v1287 : string = "Poetry"
                            let v1288 : (unit -> string) = v1287.ToLower
                            let v1289 : string = v1288 ()
                            let v1294 : string = "Pip"
                            let v1295 : (unit -> string) = v1294.ToLower
                            let v1296 : string = v1295 ()
                            let v1299 : bool = "Pip" = v1284
                            let v1303 : US37 =
                                if v1299 then
                                    let v1300 : US38 = US38_0
                                    US37_0(v1300)
                                else
                                    US37_1
                            let v1335 : US37 =
                                match v1303 with
                                | US37_1 -> (* None *)
                                    let v1306 : bool = "Poetry" = v1284
                                    let v1310 : US37 =
                                        if v1306 then
                                            let v1307 : US38 = US38_1
                                            US37_0(v1307)
                                        else
                                            US37_1
                                    match v1310 with
                                    | US37_1 -> (* None *)
                                        let v1313 : bool = v1296 = v1284
                                        let v1317 : US37 =
                                            if v1313 then
                                                let v1314 : US38 = US38_0
                                                US37_0(v1314)
                                            else
                                                US37_1
                                        match v1317 with
                                        | US37_1 -> (* None *)
                                            let v1320 : bool = v1289 = v1284
                                            let v1324 : US37 =
                                                if v1320 then
                                                    let v1321 : US38 = US38_1
                                                    US37_0(v1321)
                                                else
                                                    US37_1
                                            match v1324 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v1325) -> (* Some *)
                                                US37_0(v1325)
                                        | US37_0(v1318) -> (* Some *)
                                            US37_0(v1318)
                                    | US37_0(v1311) -> (* Some *)
                                        US37_0(v1311)
                                | US37_0(v1304) -> (* Some *)
                                    US37_0(v1304)
                            US36_0(v1335)
                    let v1346 : US37 =
                        match v1339 with
                        | US36_0(v1340) -> (* Some *)
                            match v1340 with
                            | US37_0(v1341) -> (* Some *)
                                US37_0(v1341)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v1350 : US38 =
                        match v1346 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v1347) -> (* Some *)
                            v1347
                    let v1351 : string = method25()
                    (* run_target_args'
                    let v1356 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1357 : string = "&*$0"
                    let v1358 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1351 v1357 
                    let _run_target_args'_v1356 = v1358 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1359 : string = "&*$0"
                    let v1360 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1351 v1359 
                    let _run_target_args'_v1356 = v1360 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1361 : string = "&*$0"
                    let v1362 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1351 v1361 
                    let _run_target_args'_v1356 = v1362 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1364 : Ref<Str> = v1351 |> unbox<Ref<Str>>
                    let _run_target_args'_v1356 = v1364 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1368 : Ref<Str> = v1351 |> unbox<Ref<Str>>
                    let _run_target_args'_v1356 = v1368 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1372 : Ref<Str> = v1351 |> unbox<Ref<Str>>
                    let _run_target_args'_v1356 = v1372 
                    #endif
#else
                    let v1376 : Ref<Str> = v1351 |> unbox<Ref<Str>>
                    let _run_target_args'_v1356 = v1376 
                    #endif
                    let v1379 : Ref<Str> = _run_target_args'_v1356 
                    let v1385 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v1386 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v1379) v1385 
                    let v1389 : (Vec<std_string_String> -> US11) = method26()
                    let v1390 : US11 option = v1386 |> Option.map v1389 
                    let v1404 : US11 = US11_1
                    let v1405 : US11 = v1390 |> Option.defaultValue v1404 
                    let v1409 : (std_string_String []) = [||]
                    let v1410 : string = "$0.to_vec()"
                    let v1411 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
                    let v1414 : Vec<std_string_String> =
                        match v1405 with
                        | US11_1 -> (* None *)
                            v1411
                        | US11_0(v1412) -> (* Some *)
                            v1412
                    (* run_target_args'
                    let v1419 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v1424 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1425 : string = "std::fs::read(&*$0)"
                    let v1426 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1223 v1425 
                    (* run_target_args'
                    let v1428 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1429 : string = "$0.unwrap()"
                    let v1430 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1426 v1429 
                    let _run_target_args'_v1428 = v1430 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1431 : string = "$0.unwrap()"
                    let v1432 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1426 v1431 
                    let _run_target_args'_v1428 = v1432 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1433 : string = "$0.unwrap()"
                    let v1434 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1426 v1433 
                    let _run_target_args'_v1428 = v1434 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1435 : Vec<uint8> = match v1426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1428 = v1435 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1436 : Vec<uint8> = match v1426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1428 = v1436 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1437 : Vec<uint8> = match v1426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1428 = v1437 
                    #endif
#else
                    let v1438 : Vec<uint8> = match v1426 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1428 = v1438 
                    #endif
                    let v1439 : Vec<uint8> = _run_target_args'_v1428 
                    let _run_target_args'_v1424 = v1439 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1443 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1424 = v1443 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1447 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1424 = v1447 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1451 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1424 = v1451 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1455 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1424 = v1455 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1459 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1424 = v1459 
                    #endif
#else
                    let v1462 : (uint8 []) = v1223 |> System.IO.File.ReadAllBytes
                    let v1463 : string = "$0.to_vec()"
                    let v1464 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1462 v1463 
                    let _run_target_args'_v1424 = v1464 
                    #endif
                    let v1465 : Vec<uint8> = _run_target_args'_v1424 
                    let v1471 : Vec<uint8> = method27(v1465)
                    let v1472 : string = "std::string::String::from_utf8($0)"
                    let v1473 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1471 v1472 
                    (* run_target_args'
                    let v1475 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1476 : string = "$0.unwrap()"
                    let v1477 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1473 v1476 
                    let _run_target_args'_v1475 = v1477 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1478 : string = "$0.unwrap()"
                    let v1479 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1473 v1478 
                    let _run_target_args'_v1475 = v1479 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1480 : string = "$0.unwrap()"
                    let v1481 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1473 v1480 
                    let _run_target_args'_v1475 = v1481 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1482 : std_string_String = match v1473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1475 = v1482 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1483 : std_string_String = match v1473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1475 = v1483 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1484 : std_string_String = match v1473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1475 = v1484 
                    #endif
#else
                    let v1485 : std_string_String = match v1473 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1475 = v1485 
                    #endif
                    let v1486 : std_string_String = _run_target_args'_v1475 
                    let v1489 : string = "fable_library_rust::String_::fromString($0)"
                    let v1490 : string = Fable.Core.RustInterop.emitRustExpr v1486 v1489 
                    let _run_target_args'_v1419 = v1490 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1492 : string = null |> unbox<string>
                    let _run_target_args'_v1419 = v1492 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1496 : string = null |> unbox<string>
                    let _run_target_args'_v1419 = v1496 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1500 : string = null |> unbox<string>
                    let _run_target_args'_v1419 = v1500 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1504 : string = null |> unbox<string>
                    let _run_target_args'_v1419 = v1504 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1508 : string = null |> unbox<string>
                    let _run_target_args'_v1419 = v1508 
                    #endif
#else
                    let v1511 : string = v1223 |> System.IO.File.ReadAllText
                    let _run_target_args'_v1419 = v1511 
                    #endif
                    let v1512 : string = _run_target_args'_v1419 
                    let v1518 : string = method34()
                    let v1519 : US5 = method35(v1518)
                    let v1525 : US5 =
                        match v1519 with
                        | US5_1 -> (* None *)
                            let v1522 : string = __SOURCE_DIRECTORY__
                            method35(v1522)
                        | US5_0(v1520) -> (* Some *)
                            US5_0(v1520)
                    let v1531 : US5 =
                        match v1525 with
                        | US5_1 -> (* None *)
                            let v1528 : string = "/workspaces"
                            method35(v1528)
                        | US5_0(v1526) -> (* Some *)
                            US5_0(v1526)
                    let v1535 : string =
                        match v1531 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v1532) -> (* Some *)
                            v1532
                    let v1536 : string = method55(v1535)
                    let v1537 : bool = "deps" = v1536
                    let v1548 : string =
                        if v1537 then
                            let v1538 : string option = method41(v1535)
                            let v1540 : string = v1538 |> Option.get
                            let v1543 : US5 = method35(v1540)
                            match v1543 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v1544) -> (* Some *)
                                v1544
                        else
                            v1535
                    let v1549 : string = "polyglot"
                    let v1550 : string = method36(v1548, v1549)
                    let v1551 : string = method34()
                    let v1553 : (unit -> string) = v1551.ToLower
                    let v1554 : string = v1553 ()
                    let v1558 : (unit -> string) = v1550.ToLower
                    let v1559 : string = v1558 ()
                    let v1563 : bool = v1554.StartsWith (v1559, false, null)
                    let v1568 : US13 =
                        if v1563 then
                            US13_1(v1559)
                        else
                            US13_0(v1559)
                    let v1580 : Result<string, string> =
                        match v1568 with
                        | US13_1(v1574) -> (* Error *)
                            let v1576 : Result<string, string> = Error v1574 
                            v1576
                        | US13_0(v1569) -> (* Ok *)
                            let v1571 : Result<string, string> = Ok v1569 
                            v1571
                    let v1581 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v1582 : bool = Fable.Core.RustInterop.emitRustExpr v1580 v1581 
                    let v1583 : string = "x"
                    let v1584 : string = Fable.Core.RustInterop.emitRustExpr () v1583 
                    let v1585 : string = "true; $0 })"
                    let v1586 : bool = Fable.Core.RustInterop.emitRustExpr v1584 v1585 
                    let v1587 : string = "_result_unwrap_or_else"
                    let v1588 : string = Fable.Core.RustInterop.emitRustExpr () v1587 
                    let v1589 : string option = method41(v1223)
                    let v1592 : string = ""
                    let v1593 : string = v1589 |> Option.defaultValue v1592 
                    let v1601 : string =
                        match v1350 with
                        | US38_0 -> (* Pip *)
                            let v1596 : string = "requirements.txt"
                            method36(v1593, v1596)
                        | US38_1 -> (* Poetry *)
                            let v1598 : string = "pyproject.toml"
                            method36(v1593, v1598)
                    let v1602 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v1603 : bool = Fable.Core.RustInterop.emitRustExpr v1414 v1602 
                    let v1604 : string = "x"
                    let v1605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1604 
                    let v1606 : string = "fable_library_rust::String_::fromString($0)"
                    let v1607 : string = Fable.Core.RustInterop.emitRustExpr v1605 v1606 
                    let v1610 : string = "="
                    let v1611 : bool = v1607.Contains v1610 
                    let v1626 : string =
                        if v1611 then
                            v1607
                        else
                            let v1616 : string = "]"
                            let v1617 : bool = v1607.EndsWith (v1616, false, null)
                            if v1617 then
                                let v1620 : string = $"={{version='*',features=["
                                let v1621 : string = "["
                                let v1622 : string = v1607.Replace (v1621, v1620)
                                let v1623 : string = $"{v1622}}}"
                                v1623
                            else
                                let v1624 : string = $"{v1607}='*'"
                                v1624
                    let v1627 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v1628 : bool = Fable.Core.RustInterop.emitRustExpr v1626 v1627 
                    let v1629 : string = "_vec_map"
                    let v1630 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1629 
                    let v1631 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v1632 : (string []) = Fable.Core.RustInterop.emitRustExpr v1630 v1631 
                    let v1637 : unit = ()
                    let _let'_v1637 =
                        seq {
                            for i = 0 to v1632.Length - 1 do yield v1632.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v1640 : string seq = _let'_v1637 
                    let v1648 : string = method75()
                    let v1649 : (string -> (string seq -> string)) = String.concat
                    let v1650 : (string seq -> string) = v1649 v1648
                    let v1651 : string = v1650 v1640
                    let v1655 : bool = v1651 = ""
                    let struct (v1712 : int32, v1713 : string) =
                        if v1655 then
                            struct (0, v1592)
                        else
                            let v1695 : string =
                                match v1350 with
                                | US38_0 -> (* Pip *)
                                    v1651
                                | US38_1 -> (* Poetry *)
                                    let v1656 : string = $"[tool.poetry]"
                                    let v1657 : string = $"name = \"test\""
                                    let v1658 : string = "\n"
                                    let v1659 : string = v1656 + v1658 
                                    let v1660 : string = v1659 + v1657 
                                    let v1661 : string = $"version = \"0.0.1\""
                                    let v1662 : string = v1660 + v1658 
                                    let v1663 : string = v1662 + v1661 
                                    let v1664 : string = $"description = \"\""
                                    let v1665 : string = v1663 + v1658 
                                    let v1666 : string = v1665 + v1664 
                                    let v1667 : string = $"authors = []"
                                    let v1668 : string = v1666 + v1658 
                                    let v1669 : string = v1668 + v1667 
                                    let v1670 : string = $""
                                    let v1671 : string = v1669 + v1658 
                                    let v1672 : string = v1671 + v1670 
                                    let v1673 : string = $"[tool.poetry.dependencies]"
                                    let v1674 : string = v1672 + v1658 
                                    let v1675 : string = v1674 + v1673 
                                    let v1676 : string = $"python=\"~3.12\""
                                    let v1677 : string = v1675 + v1658 
                                    let v1678 : string = v1677 + v1676 
                                    let v1679 : string = $"{v1651}"
                                    let v1680 : string = v1678 + v1658 
                                    let v1681 : string = v1680 + v1679 
                                    let v1682 : string = $""
                                    let v1683 : string = v1681 + v1658 
                                    let v1684 : string = v1683 + v1682 
                                    let v1685 : string = $"[build-system]"
                                    let v1686 : string = v1684 + v1658 
                                    let v1687 : string = v1686 + v1685 
                                    let v1688 : string = $"requires = [\"poetry-core\"]"
                                    let v1689 : string = v1687 + v1658 
                                    let v1690 : string = v1689 + v1688 
                                    let v1691 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v1692 : string = v1690 + v1658 
                                    let v1693 : string = v1692 + v1691 
                                    v1693
                            method76(v1601, v1695)
                            let v1696 : System.Threading.CancellationToken option = None
                            let v1697 : (struct (string * string) []) = [||]
                            let v1698 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1699 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1700 : string option = None
                            let v1704 : string =
                                match v1350 with
                                | US38_0 -> (* Pip *)
                                    let v1701 : string = $"pip install -r requirements.txt"
                                    v1701
                                | US38_1 -> (* Poetry *)
                                    let v1702 : string = $"poetry install"
                                    v1702
                            let v1706 : string option = Some v1593 
                            let v1709 : bool = true
                            method101(v1704, v1696, v1697, v1698, v1699, v1709, v1706)
                    let v1715 : bool = v1712 <> 0 
                    let struct (v1903 : US5, v1904 : US5, v1905 : US5, v1906 : US5) =
                        if v1715 then
                            let v1718 : unit = ()
                            let v1719 : (unit -> unit) = closure75(v1350, v1223, v1713, v1712)
                            let v1720 : unit = (fun () -> v1719 (); v1718) ()
                            let v1767 : string = "py"
                            let v1768 : US5 = US5_0(v1767)
                            let v1769 : US5 = US5_1
                            let v1770 : US5 = US5_1
                            let v1771 : US5 = US5_1
                            struct (v1768, v1769, v1770, v1771)
                        else
                            let v1775 : string =
                                match v1350 with
                                | US38_0 -> (* Pip *)
                                    let v1772 : string = $"python \"{v1223}\""
                                    v1772
                                | US38_1 -> (* Poetry *)
                                    let v1773 : string = $"poetry run python \"{v1223}\""
                                    v1773
                            let v1776 : string = "TRACE_LEVEL"
                            let v1777 : string = "Verbose"
                            let v1778 : (struct (string * string) []) = [|struct (v1776, v1777)|]
                            let v1779 : System.Threading.CancellationToken option = None
                            let v1780 : (struct (string * string) []) = [||]
                            let v1781 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v1782 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v1783 : string option = None
                            let v1785 : string option = Some v1593 
                            let v1788 : bool = true
                            let struct (v1789 : int32, v1790 : string) = method101(v1775, v1779, v1778, v1781, v1782, v1788, v1785)
                            let v1791 : int32 = v1778.Length
                            let v1792 : (string []) = Array.zeroCreate<string> (v1791)
                            let v1793 : Mut5 = {l0 = 0} : Mut5
                            while method32(v1791, v1793) do
                                let v1795 : int32 = v1793.l0
                                let struct (v1796 : string, v1797 : string) = v1778.[int v1795]
                                let v1798 : string = $"$env:{v1796}=''{v1797}''"
                                v1792.[int v1795] <- v1798
                                let v1799 : int32 = v1795 + 1
                                v1793.l0 <- v1799
                                ()
                            let v1801 : string seq = v1792 |> Seq.ofArray
                            let v1806 : (string -> (string seq -> string)) = String.concat
                            let v1807 : string = ";"
                            let v1808 : (string seq -> string) = v1806 v1807
                            let v1809 : string = v1808 v1801
                            let v1812 : string = $"pwsh -c '{v1809}; {v1775}'"
                            let v1813 : bool = v1789 = 0
                            let v1820 : bool =
                                if v1813 then
                                    true
                                else
                                    let v1816 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v1817 : bool = v1790.Contains v1816 
                                    v1817
                            let struct (v1899 : US5, v1900 : US5, v1901 : US5, v1902 : US5) =
                                if v1820 then
                                    let v1821 : (string -> US5) = closure69()
                                    let v1822 : (unit -> string) = closure76(v1790)
                                    let v1823 : (exn -> US5) = closure77(v1223, v1790, v1812)
                                    let v1825 : US5 = US5_1
                                    let result = ref v1825
                                    try
                                        result.Value <- v1822 () |> v1821 
                                    with ex ->
                                        result.Value <- v1823 ex 
                                    let v1826 : US5 = result.Value
                                    let v1837 : string option =
                                        match v1826 with
                                        | US5_1 -> (* None *)
                                            let v1835 : string option = None
                                            v1835
                                        | US5_0(v1830) -> (* Some *)
                                            let v1832 : string option = Some v1830 
                                            v1832
                                    let v1838 : string = "$0.unwrap()"
                                    let v1839 : string = Fable.Core.RustInterop.emitRustExpr v1837 v1838 
                                    let v1840 : string = "py"
                                    let v1841 : US5 = US5_0(v1840)
                                    let v1842 : US5 = US5_0(v1512)
                                    let v1843 : US5 = US5_0(v1223)
                                    let v1844 : US5 = US5_0(v1839)
                                    struct (v1841, v1842, v1843, v1844)
                                else
                                    let v1845 : unit = ()
                                    let v1846 : (unit -> unit) = closure79(v1223, v1790, v1789, v1812)
                                    let v1847 : unit = (fun () -> v1846 (); v1845) ()
                                    let v1894 : string = "py"
                                    let v1895 : US5 = US5_0(v1894)
                                    let v1896 : US5 = US5_1
                                    let v1897 : US5 = US5_1
                                    let v1898 : US5 = US5_1
                                    struct (v1895, v1896, v1897, v1898)
                            struct (v1899, v1900, v1901, v1902)
                    let v1909 : string =
                        match v1903 with
                        | US5_1 -> (* None *)
                            v1592
                        | US5_0(v1907) -> (* Some *)
                            v1907
                    let v1910 : string = "extension"
                    let v1913 : string =
                        match v1904 with
                        | US5_1 -> (* None *)
                            v1592
                        | US5_0(v1911) -> (* Some *)
                            v1911
                    let v1914 : string = "code"
                    let v1917 : string =
                        match v1906 with
                        | US5_1 -> (* None *)
                            v1592
                        | US5_0(v1915) -> (* Some *)
                            v1915
                    let v1918 : string = "output"
                    let v1919 : (struct (string * string) []) = [|struct (v1910, v1909); struct (v1914, v1913); struct (v1918, v1917)|]
                    let v1920 : string = "$0.to_vec()"
                    let v1921 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v1919 v1920 
                    let v1922 : unit = ()
                    let v1923 : string = $"true; let _func1_from_v1922 = Func1::from(move |value| {{ //"
                    let v1924 : bool = Fable.Core.RustInterop.emitRustExpr () v1923 
                    let v1925 : string = $"value"
                    let struct (v1926 : string, v1927 : string) = Fable.Core.RustInterop.emitRustExpr () v1925 
                    (* run_target_args'
                    let v1932 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1933 : string = "&*$0"
                    let v1934 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1926 v1933 
                    let _run_target_args'_v1932 = v1934 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1935 : string = "&*$0"
                    let v1936 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1926 v1935 
                    let _run_target_args'_v1932 = v1936 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1937 : string = "&*$0"
                    let v1938 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1926 v1937 
                    let _run_target_args'_v1932 = v1938 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1940 : Ref<Str> = v1926 |> unbox<Ref<Str>>
                    let _run_target_args'_v1932 = v1940 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1944 : Ref<Str> = v1926 |> unbox<Ref<Str>>
                    let _run_target_args'_v1932 = v1944 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1948 : Ref<Str> = v1926 |> unbox<Ref<Str>>
                    let _run_target_args'_v1932 = v1948 
                    #endif
#else
                    let v1952 : Ref<Str> = v1926 |> unbox<Ref<Str>>
                    let _run_target_args'_v1932 = v1952 
                    #endif
                    let v1955 : Ref<Str> = _run_target_args'_v1932 
                    (* run_target_args'
                    let v1965 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1966 : string = "String::from($0)"
                    let v1967 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1955 v1966 
                    let _run_target_args'_v1965 = v1967 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1968 : string = "String::from($0)"
                    let v1969 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1955 v1968 
                    let _run_target_args'_v1965 = v1969 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1970 : string = "String::from($0)"
                    let v1971 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1955 v1970 
                    let _run_target_args'_v1965 = v1971 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1973 : std_string_String = v1955 |> unbox<std_string_String>
                    let _run_target_args'_v1965 = v1973 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1977 : std_string_String = v1955 |> unbox<std_string_String>
                    let _run_target_args'_v1965 = v1977 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1981 : std_string_String = v1955 |> unbox<std_string_String>
                    let _run_target_args'_v1965 = v1981 
                    #endif
#else
                    let v1985 : std_string_String = v1955 |> unbox<std_string_String>
                    let _run_target_args'_v1965 = v1985 
                    #endif
                    let v1988 : std_string_String = _run_target_args'_v1965 
                    (* run_target_args'
                    let v1998 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1999 : string = "&*$0"
                    let v2000 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1927 v1999 
                    let _run_target_args'_v1998 = v2000 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2001 : string = "&*$0"
                    let v2002 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1927 v2001 
                    let _run_target_args'_v1998 = v2002 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2003 : string = "&*$0"
                    let v2004 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1927 v2003 
                    let _run_target_args'_v1998 = v2004 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2006 : Ref<Str> = v1927 |> unbox<Ref<Str>>
                    let _run_target_args'_v1998 = v2006 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2010 : Ref<Str> = v1927 |> unbox<Ref<Str>>
                    let _run_target_args'_v1998 = v2010 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2014 : Ref<Str> = v1927 |> unbox<Ref<Str>>
                    let _run_target_args'_v1998 = v2014 
                    #endif
#else
                    let v2018 : Ref<Str> = v1927 |> unbox<Ref<Str>>
                    let _run_target_args'_v1998 = v2018 
                    #endif
                    let v2021 : Ref<Str> = _run_target_args'_v1998 
                    (* run_target_args'
                    let v2031 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2032 : string = "String::from($0)"
                    let v2033 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2021 v2032 
                    let _run_target_args'_v2031 = v2033 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2034 : string = "String::from($0)"
                    let v2035 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2021 v2034 
                    let _run_target_args'_v2031 = v2035 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2036 : string = "String::from($0)"
                    let v2037 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2021 v2036 
                    let _run_target_args'_v2031 = v2037 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2039 : std_string_String = v2021 |> unbox<std_string_String>
                    let _run_target_args'_v2031 = v2039 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2043 : std_string_String = v2021 |> unbox<std_string_String>
                    let _run_target_args'_v2031 = v2043 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2047 : std_string_String = v2021 |> unbox<std_string_String>
                    let _run_target_args'_v2031 = v2047 
                    #endif
#else
                    let v2051 : std_string_String = v2021 |> unbox<std_string_String>
                    let _run_target_args'_v2031 = v2051 
                    #endif
                    let v2054 : std_string_String = _run_target_args'_v2031 
                    let v2061 : (std_string_String * std_string_String) = v1988, v2054 
                    let func1_from_result = v2061 //
                    let v2064 : _ = func1_from_result
                    let v2065 : string = $"true; $0 /*"
                    let v2066 : bool = Fable.Core.RustInterop.emitRustExpr v2064 v2065 
                    let v2067 : string = $"*/ }}); //"
                    let v2068 : bool = Fable.Core.RustInterop.emitRustExpr () v2067 
                    let v2069 : string = $"_func1_from_v1922"
                    let v2070 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v2069 
                    let v2071 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v2072 : (struct (string * string) -> (std_string_String * std_string_String)) = closure74(v2070)
                    let v2073 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v1921, v2072) v2071 
                    let v2074 : string = "std::collections::BTreeMap::from_iter(v2073.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v2075 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2074 
                    let v2076 : string = "serde_json::to_string(&v2075)"
                    let v2077 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2076 
                    (* run_target_args'
                    let v2079 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2080 : string = "$0.unwrap()"
                    let v2081 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2077 v2080 
                    let _run_target_args'_v2079 = v2081 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2082 : string = "$0.unwrap()"
                    let v2083 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2077 v2082 
                    let _run_target_args'_v2079 = v2083 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2084 : string = "$0.unwrap()"
                    let v2085 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2077 v2084 
                    let _run_target_args'_v2079 = v2085 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2086 : std_string_String = match v2077 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2079 = v2086 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2087 : std_string_String = match v2077 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2079 = v2087 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2088 : std_string_String = match v2077 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2079 = v2088 
                    #endif
#else
                    let v2089 : std_string_String = match v2077 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2079 = v2089 
                    #endif
                    let v2090 : std_string_String = _run_target_args'_v2079 
                    let v2093 : string = "fable_library_rust::String_::fromString($0)"
                    let v2094 : string = Fable.Core.RustInterop.emitRustExpr v2090 v2093 
                    let v2095 : string = "command_result"
                    [|struct (v2095, v2094)|]
                else
                    let v2097 : string = "fable_library_rust::String_::fromString($0)"
                    let v2098 : string = Fable.Core.RustInterop.emitRustExpr v34 v2097 
                    let v2099 : bool = v2098 = "fable"
                    if v2099 then
                        let v2100 : string = method189()
                        (* run_target_args'
                        let v2105 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2106 : string = "&*$0"
                        let v2107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2100 v2106 
                        let _run_target_args'_v2105 = v2107 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2108 : string = "&*$0"
                        let v2109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2100 v2108 
                        let _run_target_args'_v2105 = v2109 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2110 : string = "&*$0"
                        let v2111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2100 v2110 
                        let _run_target_args'_v2105 = v2111 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2113 : Ref<Str> = v2100 |> unbox<Ref<Str>>
                        let _run_target_args'_v2105 = v2113 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2117 : Ref<Str> = v2100 |> unbox<Ref<Str>>
                        let _run_target_args'_v2105 = v2117 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2121 : Ref<Str> = v2100 |> unbox<Ref<Str>>
                        let _run_target_args'_v2105 = v2121 
                        #endif
#else
                        let v2125 : Ref<Str> = v2100 |> unbox<Ref<Str>>
                        let _run_target_args'_v2105 = v2125 
                        #endif
                        let v2128 : Ref<Str> = _run_target_args'_v2105 
                        let v2134 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2135 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2128) v2134 
                        let v2138 : (std_string_String -> US7) = method23()
                        let v2139 : US7 option = v2135 |> Option.map v2138 
                        let v2153 : US7 = US7_1
                        let v2154 : US7 = v2139 |> Option.defaultValue v2153 
                        let v2161 : std_string_String =
                            match v2154 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v2158) -> (* Some *)
                                v2158
                        let v2162 : string = "fable_library_rust::String_::fromString($0)"
                        let v2163 : string = Fable.Core.RustInterop.emitRustExpr v2161 v2162 
                        let v2164 : string = method190()
                        (* run_target_args'
                        let v2169 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2170 : string = "&*$0"
                        let v2171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2170 
                        let _run_target_args'_v2169 = v2171 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2172 : string = "&*$0"
                        let v2173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2172 
                        let _run_target_args'_v2169 = v2173 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2174 : string = "&*$0"
                        let v2175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2174 
                        let _run_target_args'_v2169 = v2175 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2177 : Ref<Str> = v2164 |> unbox<Ref<Str>>
                        let _run_target_args'_v2169 = v2177 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2181 : Ref<Str> = v2164 |> unbox<Ref<Str>>
                        let _run_target_args'_v2169 = v2181 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2185 : Ref<Str> = v2164 |> unbox<Ref<Str>>
                        let _run_target_args'_v2169 = v2185 
                        #endif
#else
                        let v2189 : Ref<Str> = v2164 |> unbox<Ref<Str>>
                        let _run_target_args'_v2169 = v2189 
                        #endif
                        let v2192 : Ref<Str> = _run_target_args'_v2169 
                        let v2198 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2199 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2192) v2198 
                        let v2202 : (std_string_String -> US7) = method23()
                        let v2203 : US7 option = v2199 |> Option.map v2202 
                        let v2217 : US7 = US7_1
                        let v2218 : US7 = v2203 |> Option.defaultValue v2217 
                        let v2228 : US5 =
                            match v2218 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v2222) -> (* Some *)
                                let v2223 : string = "fable_library_rust::String_::fromString($0)"
                                let v2224 : string = Fable.Core.RustInterop.emitRustExpr v2222 v2223 
                                US5_0(v2224)
                        let v2340 : string =
                            match v2228 with
                            | US5_1 -> (* None *)
                                let v2338 : string = "{}"
                                v2338
                            | US5_0(v2229) -> (* Some *)
                                let v2230 : clap_Command = method0()
                                let v2231 : string = $"_ {v2229} --fs-path \"{v2163}\""
                                let v2232 : US25 = method116(v2231)
                                let v2241 : (string []) =
                                    match v2232 with
                                    | US25_1(v2234) -> (* Error *)
                                        let v2236 : string = $"resultm.get / Result value was Error: {v2234}"
                                        failwith<(string [])> v2236
                                    | US25_0(v2233) -> (* Ok *)
                                        v2233
                                let v2242 : string = "$0.to_vec()"
                                let v2243 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v2241 v2242 
                                let v2244 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v2245 : bool = Fable.Core.RustInterop.emitRustExpr v2243 v2244 
                                let v2246 : string = "x"
                                let v2247 : string = Fable.Core.RustInterop.emitRustExpr () v2246 
                                (* run_target_args'
                                let v2252 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2253 : string = "&*$0"
                                let v2254 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2247 v2253 
                                let _run_target_args'_v2252 = v2254 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2255 : string = "&*$0"
                                let v2256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2247 v2255 
                                let _run_target_args'_v2252 = v2256 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2257 : string = "&*$0"
                                let v2258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2247 v2257 
                                let _run_target_args'_v2252 = v2258 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2260 : Ref<Str> = v2247 |> unbox<Ref<Str>>
                                let _run_target_args'_v2252 = v2260 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2264 : Ref<Str> = v2247 |> unbox<Ref<Str>>
                                let _run_target_args'_v2252 = v2264 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2268 : Ref<Str> = v2247 |> unbox<Ref<Str>>
                                let _run_target_args'_v2252 = v2268 
                                #endif
#else
                                let v2272 : Ref<Str> = v2247 |> unbox<Ref<Str>>
                                let _run_target_args'_v2252 = v2272 
                                #endif
                                let v2275 : Ref<Str> = _run_target_args'_v2252 
                                (* run_target_args'
                                let v2285 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2286 : string = "String::from($0)"
                                let v2287 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2275 v2286 
                                let _run_target_args'_v2285 = v2287 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2288 : string = "String::from($0)"
                                let v2289 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2275 v2288 
                                let _run_target_args'_v2285 = v2289 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2290 : string = "String::from($0)"
                                let v2291 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2275 v2290 
                                let _run_target_args'_v2285 = v2291 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2293 : std_string_String = v2275 |> unbox<std_string_String>
                                let _run_target_args'_v2285 = v2293 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2297 : std_string_String = v2275 |> unbox<std_string_String>
                                let _run_target_args'_v2285 = v2297 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2301 : std_string_String = v2275 |> unbox<std_string_String>
                                let _run_target_args'_v2285 = v2301 
                                #endif
#else
                                let v2305 : std_string_String = v2275 |> unbox<std_string_String>
                                let _run_target_args'_v2285 = v2305 
                                #endif
                                let v2308 : std_string_String = _run_target_args'_v2285 
                                let v2314 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v2315 : bool = Fable.Core.RustInterop.emitRustExpr v2308 v2314 
                                let v2316 : string = "_vec_map"
                                let v2317 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2316 
                                let v2318 : string = "clap::Command::get_matches_from($0, v2317)"
                                let v2319 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v2230 v2318 
                                let v2320 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v2319)
                                let v2321 : string = "v2320.await"
                                let v2322 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v2321 
                                (* run_target_args'
                                let v2324 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2325 : string = "$0.unwrap()"
                                let v2326 : string = Fable.Core.RustInterop.emitRustExpr v2322 v2325 
                                let _run_target_args'_v2324 = v2326 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2327 : string = "$0.unwrap()"
                                let v2328 : string = Fable.Core.RustInterop.emitRustExpr v2322 v2327 
                                let _run_target_args'_v2324 = v2328 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2329 : string = "$0.unwrap()"
                                let v2330 : string = Fable.Core.RustInterop.emitRustExpr v2322 v2329 
                                let _run_target_args'_v2324 = v2330 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2331 : string = match v2322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2324 = v2331 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2332 : string = match v2322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2324 = v2332 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2333 : string = match v2322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2324 = v2333 
                                #endif
#else
                                let v2334 : string = match v2322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2324 = v2334 
                                #endif
                                let v2335 : string = _run_target_args'_v2324 
                                v2335
                        let v2341 : string = "command_result"
                        [|struct (v2341, v2340)|]
                    else
                        let v2343 : string = "fable_library_rust::String_::fromString($0)"
                        let v2344 : string = Fable.Core.RustInterop.emitRustExpr v34 v2343 
                        let v2345 : bool = v2344 = "dib"
                        if v2345 then
                            let v2346 : string = method191()
                            (* run_target_args'
                            let v2351 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2352 : string = "&*$0"
                            let v2353 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2346 v2352 
                            let _run_target_args'_v2351 = v2353 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2354 : string = "&*$0"
                            let v2355 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2346 v2354 
                            let _run_target_args'_v2351 = v2355 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2356 : string = "&*$0"
                            let v2357 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2346 v2356 
                            let _run_target_args'_v2351 = v2357 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2359 : Ref<Str> = v2346 |> unbox<Ref<Str>>
                            let _run_target_args'_v2351 = v2359 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2363 : Ref<Str> = v2346 |> unbox<Ref<Str>>
                            let _run_target_args'_v2351 = v2363 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2367 : Ref<Str> = v2346 |> unbox<Ref<Str>>
                            let _run_target_args'_v2351 = v2367 
                            #endif
#else
                            let v2371 : Ref<Str> = v2346 |> unbox<Ref<Str>>
                            let _run_target_args'_v2351 = v2371 
                            #endif
                            let v2374 : Ref<Str> = _run_target_args'_v2351 
                            let v2380 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2381 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2374) v2380 
                            let v2384 : (std_string_String -> string) = method192()
                            let v2385 : string option = v2381 |> Option.map v2384 
                            let v2399 : string = "$0.unwrap()"
                            let v2400 : string = Fable.Core.RustInterop.emitRustExpr v2385 v2399 
                            let v2401 : string = method194()
                            (* run_target_args'
                            let v2406 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2407 : string = "&*$0"
                            let v2408 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2401 v2407 
                            let _run_target_args'_v2406 = v2408 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2409 : string = "&*$0"
                            let v2410 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2401 v2409 
                            let _run_target_args'_v2406 = v2410 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2411 : string = "&*$0"
                            let v2412 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2401 v2411 
                            let _run_target_args'_v2406 = v2412 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2414 : Ref<Str> = v2401 |> unbox<Ref<Str>>
                            let _run_target_args'_v2406 = v2414 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2418 : Ref<Str> = v2401 |> unbox<Ref<Str>>
                            let _run_target_args'_v2406 = v2418 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2422 : Ref<Str> = v2401 |> unbox<Ref<Str>>
                            let _run_target_args'_v2406 = v2422 
                            #endif
#else
                            let v2426 : Ref<Str> = v2401 |> unbox<Ref<Str>>
                            let _run_target_args'_v2406 = v2426 
                            #endif
                            let v2429 : Ref<Str> = _run_target_args'_v2406 
                            let v2435 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2436 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2429) v2435 
                            let v2438 : uint8 = v2436 |> Option.defaultValue 1uy 
                            let v2441 : string = method195()
                            (* run_target_args'
                            let v2446 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2447 : string = "&*$0"
                            let v2448 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2447 
                            let _run_target_args'_v2446 = v2448 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2449 : string = "&*$0"
                            let v2450 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2449 
                            let _run_target_args'_v2446 = v2450 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2451 : string = "&*$0"
                            let v2452 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2451 
                            let _run_target_args'_v2446 = v2452 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2454 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                            let _run_target_args'_v2446 = v2454 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2458 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                            let _run_target_args'_v2446 = v2458 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2462 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                            let _run_target_args'_v2446 = v2462 
                            #endif
#else
                            let v2466 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                            let _run_target_args'_v2446 = v2466 
                            #endif
                            let v2469 : Ref<Str> = _run_target_args'_v2446 
                            let v2475 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2476 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2469) v2475 
                            let v2479 : (std_string_String -> US7) = method23()
                            let v2480 : US7 option = v2476 |> Option.map v2479 
                            let v2494 : US7 = US7_1
                            let v2495 : US7 = v2480 |> Option.defaultValue v2494 
                            let v2505 : US5 =
                                match v2495 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v2499) -> (* Some *)
                                    let v2500 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2501 : string = Fable.Core.RustInterop.emitRustExpr v2499 v2500 
                                    US5_0(v2501)
                            let v2506 : uint8 = 1uy
                            let struct (v2507 : int32, v2508 : string) = method196(v2505, v2438, v2400, v2506)
                            let v2510 : bool = v2507 <> 0 
                            let struct (v2863 : int32, v2864 : string) =
                                if v2510 then
                                    struct (v2507, v2508)
                                else
                                    let v2513 : System.Threading.CancellationToken option = None
                                    let v2514 : (struct (string * string) []) = [||]
                                    let v2515 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v2516 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v2517 : string option = None
                                    let v2518 : string = $"jupyter nbconvert \"{v2400}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v2519 : bool = true
                                    let struct (v2520 : int32, v2521 : string) = method101(v2518, v2513, v2514, v2515, v2516, v2519, v2517)
                                    let v2522 : unit = ()
                                    let v2523 : (unit -> unit) = closure82(v2521, v2520)
                                    let v2524 : unit = (fun () -> v2523 (); v2522) ()
                                    let v2573 : bool = v2520 <> 0 
                                    if v2573 then
                                        let v2576 : string = $"repl_result: {v2508}

jupyter_result: {v2521}"
                                        struct (v2520, v2576)
                                    else
                                        let v2577 : string = "'"
                                        let v2578 : string = "''"
                                        let v2579 : string = v2400.Replace (v2577, v2578)
                                        let v2580 : System.Threading.CancellationToken option = None
                                        let v2581 : (struct (string * string) []) = [||]
                                        let v2582 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2583 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2584 : string option = None
                                        let v2585 : string = $"pwsh -c \"$counter = 1; $path = '{v2579}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v2586 : bool = true
                                        let struct (v2587 : int32, v2588 : string) = method101(v2585, v2580, v2581, v2582, v2583, v2586, v2584)
                                        let v2589 : unit = ()
                                        let v2590 : (unit -> unit) = closure83(v2588, v2587)
                                        let v2591 : unit = (fun () -> v2590 (); v2589) ()
                                        let v2639 : string = $"{v2400}.html"
                                        (* run_target_args'
                                        let v2644 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2649 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2650 : string = "std::fs::read(&*$0)"
                                        let v2651 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2639 v2650 
                                        (* run_target_args'
                                        let v2653 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2654 : string = "$0.unwrap()"
                                        let v2655 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2654 
                                        let _run_target_args'_v2653 = v2655 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2656 : string = "$0.unwrap()"
                                        let v2657 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2656 
                                        let _run_target_args'_v2653 = v2657 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2658 : string = "$0.unwrap()"
                                        let v2659 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2651 v2658 
                                        let _run_target_args'_v2653 = v2659 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2660 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2653 = v2660 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2661 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2653 = v2661 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2662 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2653 = v2662 
                                        #endif
#else
                                        let v2663 : Vec<uint8> = match v2651 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2653 = v2663 
                                        #endif
                                        let v2664 : Vec<uint8> = _run_target_args'_v2653 
                                        let _run_target_args'_v2649 = v2664 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2668 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2649 = v2668 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2672 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2649 = v2672 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2676 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2649 = v2676 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2680 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2649 = v2680 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2684 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2649 = v2684 
                                        #endif
#else
                                        let v2687 : (uint8 []) = v2639 |> System.IO.File.ReadAllBytes
                                        let v2688 : string = "$0.to_vec()"
                                        let v2689 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2687 v2688 
                                        let _run_target_args'_v2649 = v2689 
                                        #endif
                                        let v2690 : Vec<uint8> = _run_target_args'_v2649 
                                        let v2696 : Vec<uint8> = method27(v2690)
                                        let v2697 : string = "std::string::String::from_utf8($0)"
                                        let v2698 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2696 v2697 
                                        (* run_target_args'
                                        let v2700 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2701 : string = "$0.unwrap()"
                                        let v2702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2701 
                                        let _run_target_args'_v2700 = v2702 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2703 : string = "$0.unwrap()"
                                        let v2704 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2703 
                                        let _run_target_args'_v2700 = v2704 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2705 : string = "$0.unwrap()"
                                        let v2706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2698 v2705 
                                        let _run_target_args'_v2700 = v2706 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2707 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2700 = v2707 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2708 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2700 = v2708 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2709 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2700 = v2709 
                                        #endif
#else
                                        let v2710 : std_string_String = match v2698 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2700 = v2710 
                                        #endif
                                        let v2711 : std_string_String = _run_target_args'_v2700 
                                        let v2714 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2715 : string = Fable.Core.RustInterop.emitRustExpr v2711 v2714 
                                        let _run_target_args'_v2644 = v2715 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2717 : string = null |> unbox<string>
                                        let _run_target_args'_v2644 = v2717 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2721 : string = null |> unbox<string>
                                        let _run_target_args'_v2644 = v2721 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2725 : string = null |> unbox<string>
                                        let _run_target_args'_v2644 = v2725 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2729 : string = null |> unbox<string>
                                        let _run_target_args'_v2644 = v2729 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2733 : string = null |> unbox<string>
                                        let _run_target_args'_v2644 = v2733 
                                        #endif
#else
                                        let v2736 : string = v2639 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2644 = v2736 
                                        #endif
                                        let v2737 : string = _run_target_args'_v2644 
                                        let v2743 : string = "\r\n"
                                        let v2744 : string = "\n"
                                        let v2745 : string = v2737.Replace (v2743, v2744)
                                        let v2746 : string = $"{v2400}.html"
                                        (* run_target_args'
                                        let v2747 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2748 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2746, v2745) v2748 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2746, v2745)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2749 : string = $"{v2400}.ipynb"
                                        (* run_target_args'
                                        let v2754 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v2759 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2760 : string = "std::fs::read(&*$0)"
                                        let v2761 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2749 v2760 
                                        (* run_target_args'
                                        let v2763 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2764 : string = "$0.unwrap()"
                                        let v2765 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2761 v2764 
                                        let _run_target_args'_v2763 = v2765 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2766 : string = "$0.unwrap()"
                                        let v2767 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2761 v2766 
                                        let _run_target_args'_v2763 = v2767 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2768 : string = "$0.unwrap()"
                                        let v2769 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2761 v2768 
                                        let _run_target_args'_v2763 = v2769 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2770 : Vec<uint8> = match v2761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2763 = v2770 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2771 : Vec<uint8> = match v2761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2763 = v2771 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2772 : Vec<uint8> = match v2761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2763 = v2772 
                                        #endif
#else
                                        let v2773 : Vec<uint8> = match v2761 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2763 = v2773 
                                        #endif
                                        let v2774 : Vec<uint8> = _run_target_args'_v2763 
                                        let _run_target_args'_v2759 = v2774 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2778 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2759 = v2778 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2782 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2759 = v2782 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2786 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2759 = v2786 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2790 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2759 = v2790 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2794 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v2759 = v2794 
                                        #endif
#else
                                        let v2797 : (uint8 []) = v2749 |> System.IO.File.ReadAllBytes
                                        let v2798 : string = "$0.to_vec()"
                                        let v2799 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2797 v2798 
                                        let _run_target_args'_v2759 = v2799 
                                        #endif
                                        let v2800 : Vec<uint8> = _run_target_args'_v2759 
                                        let v2806 : Vec<uint8> = method27(v2800)
                                        let v2807 : string = "std::string::String::from_utf8($0)"
                                        let v2808 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2806 v2807 
                                        (* run_target_args'
                                        let v2810 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2811 : string = "$0.unwrap()"
                                        let v2812 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2808 v2811 
                                        let _run_target_args'_v2810 = v2812 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2813 : string = "$0.unwrap()"
                                        let v2814 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2808 v2813 
                                        let _run_target_args'_v2810 = v2814 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2815 : string = "$0.unwrap()"
                                        let v2816 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2808 v2815 
                                        let _run_target_args'_v2810 = v2816 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2817 : std_string_String = match v2808 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2810 = v2817 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2818 : std_string_String = match v2808 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2810 = v2818 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2819 : std_string_String = match v2808 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2810 = v2819 
                                        #endif
#else
                                        let v2820 : std_string_String = match v2808 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v2810 = v2820 
                                        #endif
                                        let v2821 : std_string_String = _run_target_args'_v2810 
                                        let v2824 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2825 : string = Fable.Core.RustInterop.emitRustExpr v2821 v2824 
                                        let _run_target_args'_v2754 = v2825 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2827 : string = null |> unbox<string>
                                        let _run_target_args'_v2754 = v2827 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2831 : string = null |> unbox<string>
                                        let _run_target_args'_v2754 = v2831 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2835 : string = null |> unbox<string>
                                        let _run_target_args'_v2754 = v2835 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2839 : string = null |> unbox<string>
                                        let _run_target_args'_v2754 = v2839 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2843 : string = null |> unbox<string>
                                        let _run_target_args'_v2754 = v2843 
                                        #endif
#else
                                        let v2846 : string = v2749 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v2754 = v2846 
                                        #endif
                                        let v2847 : string = _run_target_args'_v2754 
                                        let v2853 : string = v2847.Replace (v2743, v2744)
                                        let v2854 : string = "\\r\\n"
                                        let v2855 : string = "\\n"
                                        let v2856 : string = v2853.Replace (v2854, v2855)
                                        let v2857 : string = $"{v2400}.ipynb"
                                        (* run_target_args'
                                        let v2858 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2859 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v2857, v2856) v2859 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v2857, v2856)
                                        #endif
                                        // run_target_args' is_unit
                                        let v2860 : string = $"repl_result: {v2508}

jupyter_result: {v2521}

pwsh_replace_html_result: {v2588}"
                                        struct (v2587, v2860)
                            let v2865 : unit = ()
                            let v2866 : (unit -> unit) = closure84(v2864, v2863)
                            let v2867 : unit = (fun () -> v2866 (); v2865) ()
                            let v2916 : bool = v2863 <> 0 
                            if v2916 then
                                let v2919 : string = $"spiral.run / dib / exit_code: {v2863} / result: {v2864}"
                                failwith<unit> v2919
                            let v2920 : string = "stdio"
                            [|struct (v2920, v2864)|]
                        else
                            let v2922 : string = "fable_library_rust::String_::fromString($0)"
                            let v2923 : string = Fable.Core.RustInterop.emitRustExpr v34 v2922 
                            let v2924 : bool = v2923 = "rust"
                            let struct (v6583 : US5, v6584 : US5, v6585 : US5, v6586 : US5) =
                                if v2924 then
                                    let v2925 : string = method189()
                                    (* run_target_args'
                                    let v2930 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2931 : string = "&*$0"
                                    let v2932 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2925 v2931 
                                    let _run_target_args'_v2930 = v2932 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2933 : string = "&*$0"
                                    let v2934 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2925 v2933 
                                    let _run_target_args'_v2930 = v2934 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2935 : string = "&*$0"
                                    let v2936 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2925 v2935 
                                    let _run_target_args'_v2930 = v2936 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2938 : Ref<Str> = v2925 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2930 = v2938 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2942 : Ref<Str> = v2925 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2930 = v2942 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v2946 : Ref<Str> = v2925 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2930 = v2946 
                                    #endif
#else
                                    let v2950 : Ref<Str> = v2925 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2930 = v2950 
                                    #endif
                                    let v2953 : Ref<Str> = _run_target_args'_v2930 
                                    let v2959 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v2960 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v2953) v2959 
                                    let v2963 : (std_string_String -> US7) = method23()
                                    let v2964 : US7 option = v2960 |> Option.map v2963 
                                    let v2978 : US7 = US7_1
                                    let v2979 : US7 = v2964 |> Option.defaultValue v2978 
                                    let v2986 : std_string_String =
                                        match v2979 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v2983) -> (* Some *)
                                            v2983
                                    let v2987 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2988 : string = Fable.Core.RustInterop.emitRustExpr v2986 v2987 
                                    let v2989 : string = method25()
                                    (* run_target_args'
                                    let v2994 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2995 : string = "&*$0"
                                    let v2996 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2989 v2995 
                                    let _run_target_args'_v2994 = v2996 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2997 : string = "&*$0"
                                    let v2998 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2989 v2997 
                                    let _run_target_args'_v2994 = v2998 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2999 : string = "&*$0"
                                    let v3000 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2989 v2999 
                                    let _run_target_args'_v2994 = v3000 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3002 : Ref<Str> = v2989 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2994 = v3002 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3006 : Ref<Str> = v2989 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2994 = v3006 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3010 : Ref<Str> = v2989 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2994 = v3010 
                                    #endif
#else
                                    let v3014 : Ref<Str> = v2989 |> unbox<Ref<Str>>
                                    let _run_target_args'_v2994 = v3014 
                                    #endif
                                    let v3017 : Ref<Str> = _run_target_args'_v2994 
                                    let v3023 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v3024 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v3017) v3023 
                                    let v3027 : (Vec<std_string_String> -> US11) = method26()
                                    let v3028 : US11 option = v3024 |> Option.map v3027 
                                    let v3042 : US11 = US11_1
                                    let v3043 : US11 = v3028 |> Option.defaultValue v3042 
                                    let v3047 : (std_string_String []) = [||]
                                    let v3048 : string = "$0.to_vec()"
                                    let v3049 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3047 v3048 
                                    let v3052 : Vec<std_string_String> =
                                        match v3043 with
                                        | US11_1 -> (* None *)
                                            v3049
                                        | US11_0(v3050) -> (* Some *)
                                            v3050
                                    let v3053 : string = method205()
                                    (* run_target_args'
                                    let v3058 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3059 : string = "&*$0"
                                    let v3060 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3053 v3059 
                                    let _run_target_args'_v3058 = v3060 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3061 : string = "&*$0"
                                    let v3062 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3053 v3061 
                                    let _run_target_args'_v3058 = v3062 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3063 : string = "&*$0"
                                    let v3064 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3053 v3063 
                                    let _run_target_args'_v3058 = v3064 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3066 : Ref<Str> = v3053 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3058 = v3066 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3070 : Ref<Str> = v3053 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3058 = v3070 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3074 : Ref<Str> = v3053 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3058 = v3074 
                                    #endif
#else
                                    let v3078 : Ref<Str> = v3053 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3058 = v3078 
                                    #endif
                                    let v3081 : Ref<Str> = _run_target_args'_v3058 
                                    let v3087 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v3088 : bool = Fable.Core.RustInterop.emitRustExpr struct (v35, v3081) v3087 
                                    let v3089 : string = method206()
                                    (* run_target_args'
                                    let v3094 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3095 : string = "&*$0"
                                    let v3096 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3089 v3095 
                                    let _run_target_args'_v3094 = v3096 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3097 : string = "&*$0"
                                    let v3098 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3089 v3097 
                                    let _run_target_args'_v3094 = v3098 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3099 : string = "&*$0"
                                    let v3100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3089 v3099 
                                    let _run_target_args'_v3094 = v3100 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3102 : Ref<Str> = v3089 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3094 = v3102 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3106 : Ref<Str> = v3089 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3094 = v3106 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3110 : Ref<Str> = v3089 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3094 = v3110 
                                    #endif
#else
                                    let v3114 : Ref<Str> = v3089 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3094 = v3114 
                                    #endif
                                    let v3117 : Ref<Str> = _run_target_args'_v3094 
                                    let v3123 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3124 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v3117) v3123 
                                    let v3127 : (std_string_String -> US7) = method23()
                                    let v3128 : US7 option = v3124 |> Option.map v3127 
                                    let v3142 : US7 = US7_1
                                    let v3143 : US7 = v3128 |> Option.defaultValue v3142 
                                    let v3153 : US5 =
                                        match v3143 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3147) -> (* Some *)
                                            let v3148 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3149 : string = Fable.Core.RustInterop.emitRustExpr v3147 v3148 
                                            US5_0(v3149)
                                    let v3154 : string = method207()
                                    (* run_target_args'
                                    let v3159 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3160 : string = "&*$0"
                                    let v3161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3154 v3160 
                                    let _run_target_args'_v3159 = v3161 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3162 : string = "&*$0"
                                    let v3163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3154 v3162 
                                    let _run_target_args'_v3159 = v3163 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3164 : string = "&*$0"
                                    let v3165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3154 v3164 
                                    let _run_target_args'_v3159 = v3165 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3167 : Ref<Str> = v3154 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3159 = v3167 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3171 : Ref<Str> = v3154 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3159 = v3171 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3175 : Ref<Str> = v3154 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3159 = v3175 
                                    #endif
#else
                                    let v3179 : Ref<Str> = v3154 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3159 = v3179 
                                    #endif
                                    let v3182 : Ref<Str> = _run_target_args'_v3159 
                                    let v3188 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3189 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v3182) v3188 
                                    let v3192 : (std_string_String -> US7) = method23()
                                    let v3193 : US7 option = v3189 |> Option.map v3192 
                                    let v3207 : US7 = US7_1
                                    let v3208 : US7 = v3193 |> Option.defaultValue v3207 
                                    let v3218 : US5 =
                                        match v3208 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3212) -> (* Some *)
                                            let v3213 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3214 : string = Fable.Core.RustInterop.emitRustExpr v3212 v3213 
                                            US5_0(v3214)
                                    let v3227 : US39 =
                                        match v3153 with
                                        | US5_0(v3219) -> (* Some *)
                                            let v3220 : US40 = US40_0(v3219)
                                            US39_0(v3220)
                                        | _ ->
                                            match v3218 with
                                            | US5_0(v3222) -> (* Some *)
                                                let v3223 : US40 = US40_1(v3222)
                                                US39_0(v3223)
                                            | _ ->
                                                US39_1
                                    (* run_target_args'
                                    let v3232 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v3237 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3238 : string = "std::fs::read(&*$0)"
                                    let v3239 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2988 v3238 
                                    (* run_target_args'
                                    let v3241 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3242 : string = "$0.unwrap()"
                                    let v3243 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3242 
                                    let _run_target_args'_v3241 = v3243 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3244 : string = "$0.unwrap()"
                                    let v3245 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3244 
                                    let _run_target_args'_v3241 = v3245 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3246 : string = "$0.unwrap()"
                                    let v3247 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3239 v3246 
                                    let _run_target_args'_v3241 = v3247 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3248 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3241 = v3248 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3249 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3241 = v3249 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3250 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3241 = v3250 
                                    #endif
#else
                                    let v3251 : Vec<uint8> = match v3239 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3241 = v3251 
                                    #endif
                                    let v3252 : Vec<uint8> = _run_target_args'_v3241 
                                    let _run_target_args'_v3237 = v3252 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3237 = v3256 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3260 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3237 = v3260 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3264 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3237 = v3264 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3268 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3237 = v3268 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3272 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3237 = v3272 
                                    #endif
#else
                                    let v3275 : (uint8 []) = v2988 |> System.IO.File.ReadAllBytes
                                    let v3276 : string = "$0.to_vec()"
                                    let v3277 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3275 v3276 
                                    let _run_target_args'_v3237 = v3277 
                                    #endif
                                    let v3278 : Vec<uint8> = _run_target_args'_v3237 
                                    let v3284 : Vec<uint8> = method27(v3278)
                                    let v3285 : string = "std::string::String::from_utf8($0)"
                                    let v3286 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3284 v3285 
                                    (* run_target_args'
                                    let v3288 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3289 : string = "$0.unwrap()"
                                    let v3290 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3286 v3289 
                                    let _run_target_args'_v3288 = v3290 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3291 : string = "$0.unwrap()"
                                    let v3292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3286 v3291 
                                    let _run_target_args'_v3288 = v3292 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3293 : string = "$0.unwrap()"
                                    let v3294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3286 v3293 
                                    let _run_target_args'_v3288 = v3294 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3295 : std_string_String = match v3286 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3288 = v3295 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3296 : std_string_String = match v3286 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3288 = v3296 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3297 : std_string_String = match v3286 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3288 = v3297 
                                    #endif
#else
                                    let v3298 : std_string_String = match v3286 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3288 = v3298 
                                    #endif
                                    let v3299 : std_string_String = _run_target_args'_v3288 
                                    let v3302 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3303 : string = Fable.Core.RustInterop.emitRustExpr v3299 v3302 
                                    let _run_target_args'_v3232 = v3303 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3305 : string = null |> unbox<string>
                                    let _run_target_args'_v3232 = v3305 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3309 : string = null |> unbox<string>
                                    let _run_target_args'_v3232 = v3309 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3313 : string = null |> unbox<string>
                                    let _run_target_args'_v3232 = v3313 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3317 : string = null |> unbox<string>
                                    let _run_target_args'_v3232 = v3317 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3321 : string = null |> unbox<string>
                                    let _run_target_args'_v3232 = v3321 
                                    #endif
#else
                                    let v3324 : string = v2988 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v3232 = v3324 
                                    #endif
                                    let v3325 : string = _run_target_args'_v3232 
                                    let v3331 : string = "rs"
                                    let v3332 : string = method208(v3331, v3325, v3227)
                                    let v3333 : string = method29(v3332)
                                    let v3334 : string = method34()
                                    let v3335 : US5 = method35(v3334)
                                    let v3341 : US5 =
                                        match v3335 with
                                        | US5_1 -> (* None *)
                                            let v3338 : string = __SOURCE_DIRECTORY__
                                            method35(v3338)
                                        | US5_0(v3336) -> (* Some *)
                                            US5_0(v3336)
                                    let v3347 : US5 =
                                        match v3341 with
                                        | US5_1 -> (* None *)
                                            let v3344 : string = "/workspaces"
                                            method35(v3344)
                                        | US5_0(v3342) -> (* Some *)
                                            US5_0(v3342)
                                    let v3351 : string =
                                        match v3347 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v3348) -> (* Some *)
                                            v3348
                                    let v3352 : string = method55(v3351)
                                    let v3353 : bool = "deps" = v3352
                                    let v3364 : string =
                                        if v3353 then
                                            let v3354 : string option = method41(v3351)
                                            let v3356 : string = v3354 |> Option.get
                                            let v3359 : US5 = method35(v3356)
                                            match v3359 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3360) -> (* Some *)
                                                v3360
                                        else
                                            v3351
                                    let v3365 : string = "polyglot"
                                    let v3366 : string = method36(v3364, v3365)
                                    let v3367 : string = method34()
                                    let v3369 : (unit -> string) = v3367.ToLower
                                    let v3370 : string = v3369 ()
                                    let v3374 : (unit -> string) = v3366.ToLower
                                    let v3375 : string = v3374 ()
                                    let v3379 : bool = v3370.StartsWith (v3375, false, null)
                                    let v3384 : US13 =
                                        if v3379 then
                                            US13_1(v3375)
                                        else
                                            US13_0(v3375)
                                    let v3396 : Result<string, string> =
                                        match v3384 with
                                        | US13_1(v3390) -> (* Error *)
                                            let v3392 : Result<string, string> = Error v3390 
                                            v3392
                                        | US13_0(v3385) -> (* Ok *)
                                            let v3387 : Result<string, string> = Ok v3385 
                                            v3387
                                    let v3397 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v3398 : bool = Fable.Core.RustInterop.emitRustExpr v3396 v3397 
                                    let v3399 : string = "x"
                                    let v3400 : string = Fable.Core.RustInterop.emitRustExpr () v3399 
                                    let v3401 : string = "true; $0 })"
                                    let v3402 : bool = Fable.Core.RustInterop.emitRustExpr v3400 v3401 
                                    let v3403 : string = "_result_unwrap_or_else"
                                    let v3404 : string = Fable.Core.RustInterop.emitRustExpr () v3403 
                                    let v3405 : string = "spiral"
                                    let v3406 : US41 = US41_0
                                    let v3407 : US42 = US42_0(v3406)
                                    let v3408 : US5 = US5_0(v3333)
                                    let v3409 : string = method209(v3408, v3405, v3407, v3404)
                                    let v3410 : string = "Fable.Core"
                                    let v3411 : string = "4.3.0"
                                    let v3412 : UH4 = UH4_0
                                    let v3413 : UH4 = UH4_1(v3410, v3411, v3412)
                                    let v3414 : UH2 = UH2_0
                                    let v3415 : string = method210(v3325, v3405, v3414, v3413, v3409, v3404)
                                    let v3416 : string = "../../.."
                                    let v3417 : string = method36(v3409, v3416)
                                    let v3418 : string = "Cargo.toml"
                                    let v3419 : string = method36(v3417, v3418)
                                    let v3420 : bool = method38(v3419)
                                    let v3421 : bool = v3420 = false
                                    if v3421 then
                                        (* run_target_args'
                                        let v3424 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3425 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3425 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3426 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3426 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3428 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3424 = v3428 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3431 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3431 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3432 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3432 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3433 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3433 
                                        #endif
#else
                                        let v3434 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3424 = v3434 
                                        #endif
                                        let v3435 : System.DateTime = _run_target_args'_v3424 
                                        let v3441 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3442 : System.Guid = v3441 ()
                                        let v3445 : System.Guid = method213(v3442, v3435)
                                        let v3447 : (System.Guid -> string) = _.ToString()
                                        let v3448 : string = v3447 v3445
                                        let v3451 : string = $"[package]"
                                        let v3452 : string = $"name = \"spiral_{v3448}\""
                                        let v3453 : string = "\n"
                                        let v3454 : string = v3451 + v3453 
                                        let v3455 : string = v3454 + v3452 
                                        let v3456 : string = $"version = \"0.0.1\""
                                        let v3457 : string = v3455 + v3453 
                                        let v3458 : string = v3457 + v3456 
                                        let v3459 : string = $"edition = \"2021\""
                                        let v3460 : string = v3458 + v3453 
                                        let v3461 : string = v3460 + v3459 
                                        let v3462 : string = $""
                                        let v3463 : string = v3461 + v3453 
                                        let v3464 : string = v3463 + v3462 
                                        let v3465 : string = $"[[bin]]"
                                        let v3466 : string = v3464 + v3453 
                                        let v3467 : string = v3466 + v3465 
                                        let v3468 : string = $"name = \"spiral_{v3448}\""
                                        let v3469 : string = v3467 + v3453 
                                        let v3470 : string = v3469 + v3468 
                                        let v3471 : string = $"path = \"spiral.rs\""
                                        let v3472 : string = v3470 + v3453 
                                        let v3473 : string = v3472 + v3471 
                                        (* run_target_args'
                                        let v3474 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3475 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3419, v3473) v3475 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3419, v3473)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3476 : string = method36(v3409, v3418)
                                    let v3477 : bool = method38(v3476)
                                    let v3478 : bool = v3477 = false
                                    if v3478 then
                                        (* run_target_args'
                                        let v3481 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3482 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3482 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3483 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3483 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3485 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v3481 = v3485 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3488 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3488 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3489 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3489 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3490 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3490 
                                        #endif
#else
                                        let v3491 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v3481 = v3491 
                                        #endif
                                        let v3492 : System.DateTime = _run_target_args'_v3481 
                                        let v3498 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v3499 : System.Guid = v3498 ()
                                        let v3502 : System.Guid = method213(v3499, v3492)
                                        let v3504 : (System.Guid -> string) = _.ToString()
                                        let v3505 : string = v3504 v3502
                                        let v3508 : string = $"[package]"
                                        let v3509 : string = $"name = \"spiral_{v3505}\""
                                        let v3510 : string = "\n"
                                        let v3511 : string = v3508 + v3510 
                                        let v3512 : string = v3511 + v3509 
                                        let v3513 : string = $"version = \"0.0.1\""
                                        let v3514 : string = v3512 + v3510 
                                        let v3515 : string = v3514 + v3513 
                                        let v3516 : string = $"edition = \"2021\""
                                        let v3517 : string = v3515 + v3510 
                                        let v3518 : string = v3517 + v3516 
                                        let v3519 : string = $""
                                        let v3520 : string = v3518 + v3510 
                                        let v3521 : string = v3520 + v3519 
                                        let v3522 : string = $"[[bin]]"
                                        let v3523 : string = v3521 + v3510 
                                        let v3524 : string = v3523 + v3522 
                                        let v3525 : string = $"name = \"spiral_{v3505}\""
                                        let v3526 : string = v3524 + v3510 
                                        let v3527 : string = v3526 + v3525 
                                        let v3528 : string = $"path = \"spiral.rs\""
                                        let v3529 : string = v3527 + v3510 
                                        let v3530 : string = v3529 + v3528 
                                        (* run_target_args'
                                        let v3531 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3532 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3476, v3530) v3532 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3476, v3530)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v3533 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v3534 : string = method36(v3404, v3533)
                                    let v3535 : string = "fable_modules/fable-library-rust"
                                    let v3536 : string = method36(v3409, v3535)
                                    method218(v3534, v3536)
                                    let struct (v3537 : int32, v3538 : string) = method219(v3227, v3409, v3331, v3415, v3384)
                                    let v3540 : bool = v3537 <> 0 
                                    let struct (v4835 : US5, v4836 : US5, v4837 : US5, v4838 : US5) =
                                        if v3540 then
                                            let v3543 : unit = ()
                                            let v3544 : (unit -> unit) = closure87(v3538, v3537)
                                            let v3545 : unit = (fun () -> v3544 (); v3543) ()
                                            let v3592 : US5 = US5_0(v3331)
                                            let v3593 : US5 = US5_1
                                            let v3594 : US5 = US5_1
                                            let v3595 : US5 = US5_0(v3538)
                                            struct (v3592, v3593, v3594, v3595)
                                        else
                                            let v3596 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3696 : Vec<std_string_String> =
                                                if v3596 then
                                                    v3052
                                                else
                                                    let v3597 : (std_string_String -> bool) = method229()
                                                    let v3598 : Vec<std_string_String> = method230(v3052)
                                                    let v3599 : string = "v3598.into_iter().filter(|x| v3597(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v3600 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3599 
                                                    let v3601 : string = "$0.len()"
                                                    let v3602 : unativeint = Fable.Core.RustInterop.emitRustExpr v3600 v3601 
                                                    let v3608 : int32 = v3602 |> int32 
                                                    let v3616 : bool = v3608 > 0
                                                    if v3616 then
                                                        v3052
                                                    else
                                                        let v3617 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v3622 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3623 : string = "&*$0"
                                                        let v3624 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3617 v3623 
                                                        let _run_target_args'_v3622 = v3624 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3625 : string = "&*$0"
                                                        let v3626 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3617 v3625 
                                                        let _run_target_args'_v3622 = v3626 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3627 : string = "&*$0"
                                                        let v3628 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3617 v3627 
                                                        let _run_target_args'_v3622 = v3628 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3630 : Ref<Str> = v3617 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3622 = v3630 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3634 : Ref<Str> = v3617 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3622 = v3634 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3638 : Ref<Str> = v3617 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3622 = v3638 
                                                        #endif
#else
                                                        let v3642 : Ref<Str> = v3617 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v3622 = v3642 
                                                        #endif
                                                        let v3645 : Ref<Str> = _run_target_args'_v3622 
                                                        (* run_target_args'
                                                        let v3655 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3656 : string = "String::from($0)"
                                                        let v3657 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3645 v3656 
                                                        let _run_target_args'_v3655 = v3657 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3658 : string = "String::from($0)"
                                                        let v3659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3645 v3658 
                                                        let _run_target_args'_v3655 = v3659 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3660 : string = "String::from($0)"
                                                        let v3661 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3645 v3660 
                                                        let _run_target_args'_v3655 = v3661 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3663 : std_string_String = v3645 |> unbox<std_string_String>
                                                        let _run_target_args'_v3655 = v3663 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3667 : std_string_String = v3645 |> unbox<std_string_String>
                                                        let _run_target_args'_v3655 = v3667 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3671 : std_string_String = v3645 |> unbox<std_string_String>
                                                        let _run_target_args'_v3655 = v3671 
                                                        #endif
#else
                                                        let v3675 : std_string_String = v3645 |> unbox<std_string_String>
                                                        let _run_target_args'_v3655 = v3675 
                                                        #endif
                                                        let v3678 : std_string_String = _run_target_args'_v3655 
                                                        let v3684 : (std_string_String []) = [|v3678|]
                                                        let v3685 : string = "$0.to_vec()"
                                                        let v3686 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3684 v3685 
                                                        let v3687 : Vec<std_string_String> = method73(v3686)
                                                        let v3688 : Vec<std_string_String> = method74(v3052)
                                                        let v3689 : string = "true; let mut v3688 = v3688"
                                                        let v3690 : bool = Fable.Core.RustInterop.emitRustExpr () v3689 
                                                        let v3691 : string = "true; v3688.extend(v3687)"
                                                        let v3692 : bool = Fable.Core.RustInterop.emitRustExpr () v3691 
                                                        let v3693 : string = "v3688"
                                                        let v3694 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3693 
                                                        v3694
                                            let v3697 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v3698 : bool = Fable.Core.RustInterop.emitRustExpr v3696 v3697 
                                            let v3699 : string = "x"
                                            let v3700 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3699 
                                            let v3701 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3702 : string = Fable.Core.RustInterop.emitRustExpr v3700 v3701 
                                            let v3705 : string = "="
                                            let v3706 : bool = v3702.Contains v3705 
                                            let v3721 : string =
                                                if v3706 then
                                                    v3702
                                                else
                                                    let v3711 : string = "]"
                                                    let v3712 : bool = v3702.EndsWith (v3711, false, null)
                                                    if v3712 then
                                                        let v3715 : string = $"={{version='*',features=["
                                                        let v3716 : string = "["
                                                        let v3717 : string = v3702.Replace (v3716, v3715)
                                                        let v3718 : string = $"{v3717}}}"
                                                        v3718
                                                    else
                                                        let v3719 : string = $"{v3702}='*'"
                                                        v3719
                                            let v3722 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v3723 : bool = Fable.Core.RustInterop.emitRustExpr v3721 v3722 
                                            let v3724 : string = "_vec_map"
                                            let v3725 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3724 
                                            let v3726 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v3727 : (string []) = Fable.Core.RustInterop.emitRustExpr v3725 v3726 
                                            let v3732 : unit = ()
                                            let _let'_v3732 =
                                                seq {
                                                    for i = 0 to v3727.Length - 1 do yield v3727.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v3735 : string seq = _let'_v3732 
                                            let v3743 : string = method75()
                                            let v3744 : (string -> (string seq -> string)) = String.concat
                                            let v3745 : (string seq -> string) = v3744 v3743
                                            let v3746 : string = v3745 v3735
                                            let v3750 : string = $"{v3405}.{v3331}"
                                            let v3751 : string = method36(v3409, v3750)
                                            (* run_target_args'
                                            let v3756 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v3761 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3762 : string = "std::fs::read(&*$0)"
                                            let v3763 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3751 v3762 
                                            (* run_target_args'
                                            let v3765 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3766 : string = "$0.unwrap()"
                                            let v3767 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3763 v3766 
                                            let _run_target_args'_v3765 = v3767 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3768 : string = "$0.unwrap()"
                                            let v3769 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3763 v3768 
                                            let _run_target_args'_v3765 = v3769 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3770 : string = "$0.unwrap()"
                                            let v3771 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3763 v3770 
                                            let _run_target_args'_v3765 = v3771 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3772 : Vec<uint8> = match v3763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3765 = v3772 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3773 : Vec<uint8> = match v3763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3765 = v3773 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3774 : Vec<uint8> = match v3763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3765 = v3774 
                                            #endif
#else
                                            let v3775 : Vec<uint8> = match v3763 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3765 = v3775 
                                            #endif
                                            let v3776 : Vec<uint8> = _run_target_args'_v3765 
                                            let _run_target_args'_v3761 = v3776 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3780 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3761 = v3780 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3784 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3761 = v3784 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3788 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3761 = v3788 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3792 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3761 = v3792 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3796 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v3761 = v3796 
                                            #endif
#else
                                            let v3799 : (uint8 []) = v3751 |> System.IO.File.ReadAllBytes
                                            let v3800 : string = "$0.to_vec()"
                                            let v3801 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3799 v3800 
                                            let _run_target_args'_v3761 = v3801 
                                            #endif
                                            let v3802 : Vec<uint8> = _run_target_args'_v3761 
                                            let v3808 : Vec<uint8> = method27(v3802)
                                            let v3809 : string = "std::string::String::from_utf8($0)"
                                            let v3810 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3808 v3809 
                                            (* run_target_args'
                                            let v3812 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v3813 : string = "$0.unwrap()"
                                            let v3814 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3810 v3813 
                                            let _run_target_args'_v3812 = v3814 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3815 : string = "$0.unwrap()"
                                            let v3816 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3810 v3815 
                                            let _run_target_args'_v3812 = v3816 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3817 : string = "$0.unwrap()"
                                            let v3818 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3810 v3817 
                                            let _run_target_args'_v3812 = v3818 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3819 : std_string_String = match v3810 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3812 = v3819 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3820 : std_string_String = match v3810 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3812 = v3820 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3821 : std_string_String = match v3810 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3812 = v3821 
                                            #endif
#else
                                            let v3822 : std_string_String = match v3810 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v3812 = v3822 
                                            #endif
                                            let v3823 : std_string_String = _run_target_args'_v3812 
                                            let v3826 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3827 : string = Fable.Core.RustInterop.emitRustExpr v3823 v3826 
                                            let _run_target_args'_v3756 = v3827 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v3829 : string = null |> unbox<string>
                                            let _run_target_args'_v3756 = v3829 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v3833 : string = null |> unbox<string>
                                            let _run_target_args'_v3756 = v3833 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v3837 : string = null |> unbox<string>
                                            let _run_target_args'_v3756 = v3837 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v3841 : string = null |> unbox<string>
                                            let _run_target_args'_v3756 = v3841 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v3845 : string = null |> unbox<string>
                                            let _run_target_args'_v3756 = v3845 
                                            #endif
#else
                                            let v3848 : string = v3751 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v3756 = v3848 
                                            #endif
                                            let v3849 : string = _run_target_args'_v3756 
                                            let v3855 : string = method231()
                                            let v3856 : string = "on_startup!"
                                            let v3857 : string = v3856 + v3855 
                                            let v3858 : string = method232()
                                            let v3859 : string = " method0"
                                            let v3860 : string = v3859 + v3858 
                                            let v3862 : bool = v3849.Contains v3857 
                                            let v3870 : bool =
                                                if v3862 then
                                                    let v3866 : bool = v3849.Contains v3860 
                                                    let v3869 : bool = v3866 = false
                                                    v3869
                                                else
                                                    false
                                            let v3871 : string = $"[package]"
                                            let v3872 : string = $"name = \"spiral_{v3333}\""
                                            let v3873 : string = "\n"
                                            let v3874 : string = v3871 + v3873 
                                            let v3875 : string = v3874 + v3872 
                                            let v3876 : string = $"version = \"0.0.1\""
                                            let v3877 : string = v3875 + v3873 
                                            let v3878 : string = v3877 + v3876 
                                            let v3879 : string = $"edition = \"2021\""
                                            let v3880 : string = v3878 + v3873 
                                            let v3881 : string = v3880 + v3879 
                                            let v3882 : string = $""
                                            let v3883 : string = v3881 + v3873 
                                            let v3884 : string = v3883 + v3882 
                                            let v3885 : string = $"[dependencies]"
                                            let v3886 : string = v3884 + v3873 
                                            let v3887 : string = v3886 + v3885 
                                            let v3890 : US39 = US39_1
                                            let v3891 : bool = v3227 <> v3890 
                                            let v3909 : string =
                                                if v3891 then
                                                    let v3895 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v3895
                                                else
                                                    let v3896 : string = $"fable_library_rust = {{"
                                                    let v3897 : string = $" workspace = true,"
                                                    let v3898 : string = v3896 + v3897 
                                                    let v3899 : string = $" features = ["
                                                    let v3900 : string = v3898 + v3899 
                                                    let v3903 : string =
                                                        if v3870 then
                                                            let v3901 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v3901
                                                        else
                                                            let v3902 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v3902
                                                    let v3904 : string = v3900 + v3903 
                                                    let v3905 : string = $"]"
                                                    let v3906 : string = v3904 + v3905 
                                                    let v3907 : string = $"}}"
                                                    let v3908 : string = v3906 + v3907 
                                                    v3908
                                            let v3910 : string = v3887 + v3873 
                                            let v3911 : string = v3910 + v3909 
                                            let v3912 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v3913 : string = v3911 + v3873 
                                            let v3914 : string = v3913 + v3912 
                                            let v3915 : string = $"{v3746}"
                                            let v3916 : string = v3914 + v3873 
                                            let v3917 : string = v3916 + v3915 
                                            let v3918 : string = $""
                                            let v3919 : string = v3917 + v3873 
                                            let v3920 : string = v3919 + v3918 
                                            let v3921 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3930 : string =
                                                if v3921 then
                                                    let v3922 : string = $"[[bin]]"
                                                    let v3923 : string = $"name = \"spiral_{v3333}\""
                                                    let v3924 : string = v3922 + v3873 
                                                    let v3925 : string = v3924 + v3923 
                                                    v3925
                                                else
                                                    let v3926 : string = $"[lib]"
                                                    let v3927 : string = $"crate-type = [\"cdylib\"]"
                                                    let v3928 : string = v3926 + v3873 
                                                    let v3929 : string = v3928 + v3927 
                                                    v3929
                                            let v3931 : string = v3920 + v3873 
                                            let v3932 : string = v3931 + v3930 
                                            let v3933 : string = $"path = \"spiral.rs\""
                                            let v3934 : string = v3932 + v3873 
                                            let v3935 : string = v3934 + v3933 
                                            let v3936 : string = method46(v3404)
                                            let v3937 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v3938 : string = $""
                                            let v3939 : string = v3937 + v3873 
                                            let v3940 : string = v3939 + v3938 
                                            let v3941 : string = $"[workspace]"
                                            let v3942 : string = v3940 + v3873 
                                            let v3943 : string = v3942 + v3941 
                                            let v3944 : string = $"resolver = \"2\""
                                            let v3945 : string = v3943 + v3873 
                                            let v3946 : string = v3945 + v3944 
                                            let v3947 : string = $"members = [\"packages/Rust/*\"]"
                                            let v3948 : string = v3946 + v3873 
                                            let v3949 : string = v3948 + v3947 
                                            let v3950 : string = $""
                                            let v3951 : string = v3949 + v3873 
                                            let v3952 : string = v3951 + v3950 
                                            let v3953 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v3954 : string = v3952 + v3873 
                                            let v3955 : string = v3954 + v3953 
                                            let v3956 : string = $"path = \"{v3936}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v3957 : string = v3955 + v3873 
                                            let v3958 : string = v3957 + v3956 
                                            let v3959 : string = $"default-features = false"
                                            let v3960 : string = v3958 + v3873 
                                            let v3961 : string = v3960 + v3959 
                                            let v3962 : string = $"features = []"
                                            let v3963 : string = v3961 + v3873 
                                            let v3964 : string = v3963 + v3962 
                                            let v3965 : string = $""
                                            let v3966 : string = v3964 + v3873 
                                            let v3967 : string = v3966 + v3965 
                                            let v3968 : string = $"[workspace.dependencies]"
                                            let v3969 : string = v3967 + v3873 
                                            let v3970 : string = v3969 + v3968 
                                            let v3971 : string = $"inline_colorization = \"~0.1\""
                                            let v3972 : string = v3970 + v3873 
                                            let v3973 : string = v3972 + v3971 
                                            let v3974 : string = $""
                                            let v3975 : string = v3973 + v3873 
                                            let v3976 : string = v3975 + v3974 
                                            let v3977 : string = $"[profile.release]"
                                            let v3978 : string = v3976 + v3873 
                                            let v3979 : string = v3978 + v3977 
                                            let v3980 : string = $"codegen-units = 1"
                                            let v3981 : string = v3979 + v3873 
                                            let v3982 : string = v3981 + v3980 
                                            let v3983 : string = $"opt-level = \"z\""
                                            let v3984 : string = v3982 + v3873 
                                            let v3985 : string = v3984 + v3983 
                                            let v3986 : string = $"lto = true"
                                            let v3987 : string = v3985 + v3873 
                                            let v3988 : string = v3987 + v3986 
                                            let v3989 : string = $"debug = false"
                                            let v3990 : string = v3988 + v3873 
                                            let v3991 : string = v3990 + v3989 
                                            let v3992 : string = $"panic = \"abort\""
                                            let v3993 : string = v3991 + v3873 
                                            let v3994 : string = v3993 + v3992 
                                            let v3995 : string = $"overflow-checks = true"
                                            let v3996 : string = v3994 + v3873 
                                            let v3997 : string = v3996 + v3995 
                                            let v3998 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v3999 : string = v3997 + v3873 
                                            let v4000 : string = v3999 + v3998 
                                            method76(v3476, v3935)
                                            method76(v3419, v4000)
                                            let v4001 : string = "src/Range.rs"
                                            let v4002 : string = method36(v3536, v4001)
                                            let v4003 : bool = method38(v4002)
                                            if v4003 then
                                                (* run_target_args'
                                                let v4008 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v4013 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4014 : string = "std::fs::read(&*$0)"
                                                let v4015 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4002 v4014 
                                                (* run_target_args'
                                                let v4017 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4018 : string = "$0.unwrap()"
                                                let v4019 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4015 v4018 
                                                let _run_target_args'_v4017 = v4019 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4020 : string = "$0.unwrap()"
                                                let v4021 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4015 v4020 
                                                let _run_target_args'_v4017 = v4021 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4022 : string = "$0.unwrap()"
                                                let v4023 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4015 v4022 
                                                let _run_target_args'_v4017 = v4023 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4024 : Vec<uint8> = match v4015 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4017 = v4024 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4025 : Vec<uint8> = match v4015 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4017 = v4025 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4026 : Vec<uint8> = match v4015 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4017 = v4026 
                                                #endif
#else
                                                let v4027 : Vec<uint8> = match v4015 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4017 = v4027 
                                                #endif
                                                let v4028 : Vec<uint8> = _run_target_args'_v4017 
                                                let _run_target_args'_v4013 = v4028 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4032 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4013 = v4032 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4036 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4013 = v4036 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4040 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4013 = v4040 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4044 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4013 = v4044 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4048 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4013 = v4048 
                                                #endif
#else
                                                let v4051 : (uint8 []) = v4002 |> System.IO.File.ReadAllBytes
                                                let v4052 : string = "$0.to_vec()"
                                                let v4053 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4051 v4052 
                                                let _run_target_args'_v4013 = v4053 
                                                #endif
                                                let v4054 : Vec<uint8> = _run_target_args'_v4013 
                                                let v4060 : Vec<uint8> = method27(v4054)
                                                let v4061 : string = "std::string::String::from_utf8($0)"
                                                let v4062 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4060 v4061 
                                                (* run_target_args'
                                                let v4064 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4065 : string = "$0.unwrap()"
                                                let v4066 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4062 v4065 
                                                let _run_target_args'_v4064 = v4066 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4067 : string = "$0.unwrap()"
                                                let v4068 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4062 v4067 
                                                let _run_target_args'_v4064 = v4068 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4069 : string = "$0.unwrap()"
                                                let v4070 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4062 v4069 
                                                let _run_target_args'_v4064 = v4070 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4071 : std_string_String = match v4062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4064 = v4071 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4072 : std_string_String = match v4062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4064 = v4072 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4073 : std_string_String = match v4062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4064 = v4073 
                                                #endif
#else
                                                let v4074 : std_string_String = match v4062 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4064 = v4074 
                                                #endif
                                                let v4075 : std_string_String = _run_target_args'_v4064 
                                                let v4078 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4079 : string = Fable.Core.RustInterop.emitRustExpr v4075 v4078 
                                                let _run_target_args'_v4008 = v4079 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4081 : string = null |> unbox<string>
                                                let _run_target_args'_v4008 = v4081 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4085 : string = null |> unbox<string>
                                                let _run_target_args'_v4008 = v4085 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4089 : string = null |> unbox<string>
                                                let _run_target_args'_v4008 = v4089 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4093 : string = null |> unbox<string>
                                                let _run_target_args'_v4008 = v4093 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4097 : string = null |> unbox<string>
                                                let _run_target_args'_v4008 = v4097 
                                                #endif
#else
                                                let v4100 : string = v4002 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v4008 = v4100 
                                                #endif
                                                let v4101 : string = _run_target_args'_v4008 
                                                let v4107 : string = "use crate::String_::fromCharCode;"
                                                let v4108 : string = "use crate::String_::fromChar;"
                                                let v4109 : string = v4101.Replace (v4107, v4108)
                                                let v4110 : string = "fromCharCode(c)"
                                                let v4111 : string = "std::char::from_u32(c).unwrap()"
                                                let v4112 : string = v4109.Replace (v4110, v4111)
                                                method76(v4002, v4112)
                                            let v4113 : uint8 = 1uy
                                            let struct (v4114 : int32, v4115 : string) = method233(v3384, v3476, v4113)
                                            let v4117 : bool = v4114 <> 0 
                                            if v4117 then
                                                let v4120 : unit = ()
                                                let v4121 : (unit -> unit) = closure91(v4115, v4114)
                                                let v4122 : unit = (fun () -> v4121 (); v4120) ()
                                                ()
                                            (* run_target_args'
                                            let v4173 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4178 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4179 : string = "std::fs::read(&*$0)"
                                            let v4180 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3751 v4179 
                                            (* run_target_args'
                                            let v4182 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4183 : string = "$0.unwrap()"
                                            let v4184 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4180 v4183 
                                            let _run_target_args'_v4182 = v4184 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4185 : string = "$0.unwrap()"
                                            let v4186 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4180 v4185 
                                            let _run_target_args'_v4182 = v4186 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4187 : string = "$0.unwrap()"
                                            let v4188 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4180 v4187 
                                            let _run_target_args'_v4182 = v4188 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4189 : Vec<uint8> = match v4180 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4182 = v4189 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4190 : Vec<uint8> = match v4180 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4182 = v4190 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4191 : Vec<uint8> = match v4180 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4182 = v4191 
                                            #endif
#else
                                            let v4192 : Vec<uint8> = match v4180 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4182 = v4192 
                                            #endif
                                            let v4193 : Vec<uint8> = _run_target_args'_v4182 
                                            let _run_target_args'_v4178 = v4193 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4197 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4178 = v4197 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4201 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4178 = v4201 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4205 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4178 = v4205 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4209 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4178 = v4209 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4213 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4178 = v4213 
                                            #endif
#else
                                            let v4216 : (uint8 []) = v3751 |> System.IO.File.ReadAllBytes
                                            let v4217 : string = "$0.to_vec()"
                                            let v4218 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4216 v4217 
                                            let _run_target_args'_v4178 = v4218 
                                            #endif
                                            let v4219 : Vec<uint8> = _run_target_args'_v4178 
                                            let v4225 : Vec<uint8> = method27(v4219)
                                            let v4226 : string = "std::string::String::from_utf8($0)"
                                            let v4227 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4225 v4226 
                                            (* run_target_args'
                                            let v4229 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4230 : string = "$0.unwrap()"
                                            let v4231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4227 v4230 
                                            let _run_target_args'_v4229 = v4231 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4232 : string = "$0.unwrap()"
                                            let v4233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4227 v4232 
                                            let _run_target_args'_v4229 = v4233 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4234 : string = "$0.unwrap()"
                                            let v4235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4227 v4234 
                                            let _run_target_args'_v4229 = v4235 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4236 : std_string_String = match v4227 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4229 = v4236 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4237 : std_string_String = match v4227 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4229 = v4237 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4238 : std_string_String = match v4227 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4229 = v4238 
                                            #endif
#else
                                            let v4239 : std_string_String = match v4227 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4229 = v4239 
                                            #endif
                                            let v4240 : std_string_String = _run_target_args'_v4229 
                                            let v4243 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4244 : string = Fable.Core.RustInterop.emitRustExpr v4240 v4243 
                                            let _run_target_args'_v4173 = v4244 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4246 : string = null |> unbox<string>
                                            let _run_target_args'_v4173 = v4246 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4250 : string = null |> unbox<string>
                                            let _run_target_args'_v4173 = v4250 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4254 : string = null |> unbox<string>
                                            let _run_target_args'_v4173 = v4254 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4258 : string = null |> unbox<string>
                                            let _run_target_args'_v4173 = v4258 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4262 : string = null |> unbox<string>
                                            let _run_target_args'_v4173 = v4262 
                                            #endif
#else
                                            let v4265 : string = v3751 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4173 = v4265 
                                            #endif
                                            let v4266 : string = _run_target_args'_v4173 
                                            let v4272 : string = method239()
                                            let v4273 : string = "pub fn main() -> Result<(), String> "
                                            let v4274 : string = v4273 + v4272 
                                            let v4275 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4308 : string =
                                                if v4275 then
                                                    let v4276 : string = ""
                                                    v4276
                                                else
                                                    let v4277 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4278 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v4279 : string = v4277 + v3873 
                                                    let v4280 : string = v4279 + v4278 
                                                    let v4281 : string = $"pub struct MainState {{"
                                                    let v4282 : string = v4280 + v3873 
                                                    let v4283 : string = v4282 + v4281 
                                                    let v4284 : string = $"}}"
                                                    let v4285 : string = v4283 + v3873 
                                                    let v4286 : string = v4285 + v4284 
                                                    let v4287 : string = $""
                                                    let v4288 : string = v4286 + v3873 
                                                    let v4289 : string = v4288 + v4287 
                                                    let v4290 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4291 : string = v4289 + v3873 
                                                    let v4292 : string = v4291 + v4290 
                                                    let v4293 : string = $"impl MainState {{"
                                                    let v4294 : string = v4292 + v3873 
                                                    let v4295 : string = v4294 + v4293 
                                                    let v4296 : string = $"    pub fn state_main() {{"
                                                    let v4297 : string = v4295 + v3873 
                                                    let v4298 : string = v4297 + v4296 
                                                    let v4299 : string = $"        Spiral::method0();"
                                                    let v4300 : string = v4298 + v3873 
                                                    let v4301 : string = v4300 + v4299 
                                                    let v4302 : string = $"    }}"
                                                    let v4303 : string = v4301 + v3873 
                                                    let v4304 : string = v4303 + v4302 
                                                    let v4305 : string = $"}}"
                                                    let v4306 : string = v4304 + v3873 
                                                    let v4307 : string = v4306 + v4305 
                                                    v4307
                                            let v4309 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4316 : bool =
                                                if v4309 then
                                                    let v4310 : string = "Spiral::method0()"
                                                    let v4311 : string = v3857 + v4310 
                                                    let v4313 : bool = v4266.Contains v4311 
                                                    v4313
                                                else
                                                    false
                                            let v4319 : string =
                                                if v4316 then
                                                    let v4317 : string = $"{v4274} Ok(Spiral::method0()) }}"
                                                    v4317
                                                else
                                                    let v4318 : string = $"{v4274} Ok(()) }}"
                                                    v4318
                                            let v4320 : string = v4308 + v3873 
                                            let v4321 : string = v4320 + v4319 
                                            let v4323 : bool = v4266.Contains v4274 
                                            let v4326 : string = $"{v4266}\n\n{v4321}\n"
                                            let v4425 : string =
                                                if v4323 then
                                                    v4266
                                                else
                                                    let v4330 : bool =
                                                        match v3227 with
                                                        | US39_0(v4327) -> (* Some *)
                                                            match v4327 with
                                                            | US40_1(v4328) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v4331 : string = "\";\".into()"
                                                    let v4332 : string = Fable.Core.RustInterop.emitRustExpr () v4331 
                                                    let v4333 : string = "),)"
                                                    let v4334 : string = v4333 + v4332 
                                                    let v4335 : string = "));"
                                                    let v4336 : string = v4326.Replace (v4334, v4335)
                                                    let v4337 : string = "\";\".into()"
                                                    let v4338 : string = Fable.Core.RustInterop.emitRustExpr () v4337 
                                                    let v4339 : string = "},)"
                                                    let v4340 : string = v4339 + v4338 
                                                    let v4341 : string = "});"
                                                    let v4342 : string = v4336.Replace (v4340, v4341)
                                                    let v4343 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v4344 : string = " defaultOf::<()>();"
                                                    let v4345 : string = method66(v4343, v4344, v4342)
                                                    let v4346 : string = "\\s\\sgetZero\\(\\);"
                                                    let v4347 : string = " getZero::<()>();"
                                                    let v4348 : string = method66(v4346, v4347, v4345)
                                                    let v4349 : string = "\"t\".into()"
                                                    let v4350 : string = Fable.Core.RustInterop.emitRustExpr () v4349 
                                                    let v4351 : string = "(&e.get_Curren"
                                                    let v4352 : string = v4351 + v4350 
                                                    let v4353 : string = "(e.get_Current"
                                                    let v4354 : string = v4348.Replace (v4352, v4353)
                                                    let v4355 : string = "\"::<()>()\".into()"
                                                    let v4356 : string = Fable.Core.RustInterop.emitRustExpr () v4355 
                                                    let v4357 : string = "getNull"
                                                    let v4358 : string = v4357 + v4356 
                                                    let v4359 : string = "fable_library_rust::Native_::getZero()"
                                                    let v4360 : string = v4354.Replace (v4358, v4359)
                                                    let v4361 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v4362 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v4363 : string = method66(v4361, v4362, v4360)
                                                    let v4364 : string = "::Slice'_"
                                                    let v4365 : string = "::Slice__"
                                                    let v4366 : string = v4363.Replace (v4364, v4365)
                                                    let v4367 : string = " Slice'_"
                                                    let v4368 : string = " Slice__"
                                                    let v4369 : string = v4366.Replace (v4367, v4368)
                                                    let v4370 : string = "\",\".into()"
                                                    let v4371 : string = Fable.Core.RustInterop.emitRustExpr () v4370 
                                                    let v4372 : string = "defaultOf()"
                                                    let v4373 : string = v4372 + v4371 
                                                    let v4374 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v4375 : string = v4369.Replace (v4373, v4374)
                                                    let v4376 : string = "\"__.\".into()"
                                                    let v4377 : string = Fable.Core.RustInterop.emitRustExpr () v4376 
                                                    let v4378 : string = "__self"
                                                    let v4379 : string = v4378 + v4377 
                                                    let v4380 : string = "self."
                                                    let v4381 : string = v4375.Replace (v4379, v4380)
                                                    let v4382 : string = "\"_.\".into()"
                                                    let v4383 : string = Fable.Core.RustInterop.emitRustExpr () v4382 
                                                    let v4384 : string = "_self"
                                                    let v4385 : string = v4384 + v4383 
                                                    let v4386 : string = v4381.Replace (v4385, v4380)
                                                    let v4387 : string = "\"h\".into()"
                                                    let v4388 : string = Fable.Core.RustInterop.emitRustExpr () v4387 
                                                    let v4389 : string = "get_or_insert_wit"
                                                    let v4390 : string = v4389 + v4388 
                                                    let v4391 : string = "get_or_init"
                                                    let v4392 : string = v4386.Replace (v4390, v4391)
                                                    let v4393 : string = "\";\".into()"
                                                    let v4394 : string = Fable.Core.RustInterop.emitRustExpr () v4393 
                                                    let v4395 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v4396 : string = v4395 + v4394 
                                                    let v4397 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v4398 : string = v4392.Replace (v4396, v4397)
                                                    let v4399 : string = "\";\".into()"
                                                    let v4400 : string = Fable.Core.RustInterop.emitRustExpr () v4399 
                                                    let v4401 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v4402 : string = v4401 + v4400 
                                                    let v4403 : string = "type TimeZoneInfo = i64;"
                                                    let v4404 : string = v4398.Replace (v4402, v4403)
                                                    let v4405 : string = "\";\".into()"
                                                    let v4406 : string = Fable.Core.RustInterop.emitRustExpr () v4405 
                                                    let v4407 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v4408 : string = v4407 + v4406 
                                                    let v4409 : string = "type TaskCanceledException = ();"
                                                    let v4410 : string = v4404.Replace (v4408, v4409)
                                                    let v4415 : (string -> string) =
                                                        if v3870 then
                                                            closure92()
                                                        else
                                                            let v4412 : string = "// "
                                                            let v4413 : string = v4412 + v3857 
                                                            closure93(v3857, v4413)
                                                    let v4416 : string = v4415 v4410
                                                    let v4417 : bool = v4330 = false
                                                    let v4423 : (string -> string) =
                                                        if v4417 then
                                                            closure92()
                                                        else
                                                            let v4419 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v4420 : string = ";"
                                                            let v4421 : string = v4419 + v4420 
                                                            closure94(v4421)
                                                    v4423 v4416
                                            let v4426 : bool = v4323 = false
                                            if v4426 then
                                                method76(v3751, v4425)
                                            let v4427 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4428 : bool = v4427 <> true
                                            let v4431 : string =
                                                if v4428 then
                                                    let v4429 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v3476}\""
                                                    v4429
                                                else
                                                    let v4430 : string = $"cargo run --manifest-path \"{v3476}\""
                                                    v4430
                                            let v4432 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4433 : bool = v4432 <> true
                                            let v4444 : (struct (string * string) []) =
                                                if v4433 then
                                                    [||]
                                                else
                                                    let v4435 : string = "TRACE_LEVEL"
                                                    let v4436 : string = "Verbose"
                                                    let v4437 : string = "RUSTC_WRAPPER"
                                                    let v4438 : string = "sccache"
                                                    let v4439 : string = "RUST_BACKTRACE"
                                                    let v4440 : string = "full"
                                                    let v4441 : string = "RUSTFLAGS"
                                                    let v4442 : string = "-C prefer-dynamic"
                                                    [|struct (v4435, v4436); struct (v4437, v4438); struct (v4439, v4440); struct (v4441, v4442)|]
                                            let v4445 : System.Threading.CancellationToken option = None
                                            let v4446 : (struct (string * string) []) = [||]
                                            let v4447 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v4448 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v4449 : string option = None
                                            let v4461 : Result<string, string> =
                                                match v3384 with
                                                | US13_1(v4455) -> (* Error *)
                                                    let v4457 : Result<string, string> = Error v4455 
                                                    v4457
                                                | US13_0(v4450) -> (* Ok *)
                                                    let v4452 : Result<string, string> = Ok v4450 
                                                    v4452
                                            (* run_target_args'
                                            let v4463 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4464 : string = "$0.ok()"
                                            let v4465 : string option = Fable.Core.RustInterop.emitRustExpr v4461 v4464 
                                            let _run_target_args'_v4463 = v4465 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4466 : string = "$0.ok()"
                                            let v4467 : string option = Fable.Core.RustInterop.emitRustExpr v4461 v4466 
                                            let _run_target_args'_v4463 = v4467 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4468 : string = "$0.ok()"
                                            let v4469 : string option = Fable.Core.RustInterop.emitRustExpr v4461 v4468 
                                            let _run_target_args'_v4463 = v4469 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4470 : string option = match v4461 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4463 = v4470 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4471 : string option = match v4461 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4463 = v4471 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4472 : string option = match v4461 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4463 = v4472 
                                            #endif
#else
                                            let v4473 : string option = match v4461 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v4463 = v4473 
                                            #endif
                                            let v4474 : string option = _run_target_args'_v4463 
                                            let v4477 : bool = true
                                            let struct (v4478 : int32, v4479 : string) = method101(v4431, v4445, v4444, v4447, v4448, v4477, v4474)
                                            let v4480 : bool =
                                                match v3227 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v4745 : US5, v4746 : US5, v4747 : US5, v4748 : US5) =
                                                if v4480 then
                                                    let v4481 : int32 = v4444.Length
                                                    let v4482 : (string []) = Array.zeroCreate<string> (v4481)
                                                    let v4483 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v4481, v4483) do
                                                        let v4485 : int32 = v4483.l0
                                                        let struct (v4486 : string, v4487 : string) = v4444.[int v4485]
                                                        let v4488 : string = $"$env:{v4486}=''{v4487}''"
                                                        v4482.[int v4485] <- v4488
                                                        let v4489 : int32 = v4485 + 1
                                                        v4483.l0 <- v4489
                                                        ()
                                                    let v4491 : string seq = v4482 |> Seq.ofArray
                                                    let v4496 : (string -> (string seq -> string)) = String.concat
                                                    let v4497 : string = ";"
                                                    let v4498 : (string seq -> string) = v4496 v4497
                                                    let v4499 : string = v4498 v4491
                                                    let v4502 : (string []) = [|v4499; v4431|]
                                                    let v4504 : string seq = v4502 |> Seq.ofArray
                                                    let v4508 : (string -> (string seq -> string)) = String.concat
                                                    let v4509 : (string seq -> string) = v4508 v4497
                                                    let v4510 : string = v4509 v4504
                                                    let v4513 : string = $"pwsh -c '{v4510}'"
                                                    let v4515 : bool = v4478 <> 0 
                                                    let struct (v4594 : US5, v4595 : US5, v4596 : US5, v4597 : US5) =
                                                        if v4515 then
                                                            let v4518 : unit = ()
                                                            let v4519 : (unit -> unit) = closure95(v3088, v3751, v4479, v4478, v4513)
                                                            let v4520 : unit = (fun () -> v4519 (); v4518) ()
                                                            let v4567 : US5 = US5_0(v3331)
                                                            let v4568 : US5 = US5_1
                                                            let v4569 : US5 = US5_1
                                                            let v4570 : US5 = US5_1
                                                            struct (v4567, v4568, v4569, v4570)
                                                        else
                                                            let v4571 : (string -> US5) = closure69()
                                                            let v4572 : (unit -> string) = closure96(v4479)
                                                            let v4573 : (exn -> US5) = closure98(v3751, v4479, v4513)
                                                            let v4575 : US5 = US5_1
                                                            let result = ref v4575
                                                            try
                                                                result.Value <- v4572 () |> v4571 
                                                            with ex ->
                                                                result.Value <- v4573 ex 
                                                            let v4576 : US5 = result.Value
                                                            let v4587 : string option =
                                                                match v4576 with
                                                                | US5_1 -> (* None *)
                                                                    let v4585 : string option = None
                                                                    v4585
                                                                | US5_0(v4580) -> (* Some *)
                                                                    let v4582 : string option = Some v4580 
                                                                    v4582
                                                            let v4588 : string = "$0.unwrap()"
                                                            let v4589 : string = Fable.Core.RustInterop.emitRustExpr v4587 v4588 
                                                            let v4590 : US5 = US5_0(v3331)
                                                            let v4591 : US5 = US5_0(v4425)
                                                            let v4592 : US5 = US5_0(v3751)
                                                            let v4593 : US5 = US5_0(v4589)
                                                            struct (v4590, v4591, v4592, v4593)
                                                    struct (v4594, v4595, v4596, v4597)
                                                else
                                                    let v4598 : string = $"target/spiral/{v3405}/target/wasm32-unknown-unknown/release/spiral_{v3333}.wasm"
                                                    let v4605 : string =
                                                        match v3227 with
                                                        | US39_0(v4599) -> (* Some *)
                                                            match v4599 with
                                                            | US40_1(v4601) -> (* Contract *)
                                                                v4601
                                                            | US40_0(v4600) -> (* Wasm *)
                                                                v4600
                                                        | _ ->
                                                            let v4604 : string = ""
                                                            v4604
                                                    let v4606 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v4598} -t debug {v4605}'"
                                                    let v4607 : string = "AUTOMATION"
                                                    let v4608 : string = method3(v4607)
                                                    let v4609 : string = "scripts/invoke-block.ps1"
                                                    let v4610 : string = $"pwsh -c \"pwsh {v4609} {v4606} -Linux -EnvironmentVariables AUTOMATION={v4608}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v4611 : bool = v4478 = 0
                                                    let struct (v4741 : US5, v4742 : US5, v4743 : US5, v4744 : US5) =
                                                        if v4611 then
                                                            let v4612 : System.Threading.CancellationToken option = None
                                                            let v4613 : (struct (string * string) []) = [||]
                                                            let v4614 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v4615 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v4616 : string option = None
                                                            let v4618 : string option = Some v3404 
                                                            let v4621 : bool = true
                                                            let struct (v4622 : int32, v4623 : string) = method101(v4610, v4612, v4613, v4614, v4615, v4621, v4618)
                                                            let v4624 : bool = v4622 = 0
                                                            let struct (v4683 : US5, v4684 : US5, v4685 : US5, v4686 : US5) =
                                                                if v4624 then
                                                                    let v4625 : US5 = US5_0(v3331)
                                                                    let v4626 : US5 = US5_0(v4425)
                                                                    let v4627 : US5 = US5_0(v3751)
                                                                    let v4628 : US5 = US5_0(v4623)
                                                                    struct (v4625, v4626, v4627, v4628)
                                                                else
                                                                    let v4629 : unit = ()
                                                                    let v4630 : (unit -> unit) = closure100(v3088, v3751, v4479, v4623, v4622)
                                                                    let v4631 : unit = (fun () -> v4630 (); v4629) ()
                                                                    let v4679 : US5 = US5_0(v3331)
                                                                    let v4680 : US5 = US5_1
                                                                    let v4681 : US5 = US5_1
                                                                    let v4682 : US5 = US5_1
                                                                    struct (v4679, v4680, v4681, v4682)
                                                            struct (v4683, v4684, v4685, v4686)
                                                        else
                                                            let v4687 : unit = ()
                                                            let v4688 : (unit -> unit) = closure101(v3088, v3751, v4479, v4478, v4598, v4610)
                                                            let v4689 : unit = (fun () -> v4688 (); v4687) ()
                                                            let v4737 : US5 = US5_0(v3331)
                                                            let v4738 : US5 = US5_1
                                                            let v4739 : US5 = US5_1
                                                            let v4740 : US5 = US5_1
                                                            struct (v4737, v4738, v4739, v4740)
                                                    struct (v4741, v4742, v4743, v4744)
                                            if v3088 then
                                                let v4749 : bool =
                                                    match v3227 with
                                                    | US39_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v4750 : bool = v4749 <> true
                                                let v4753 : string =
                                                    if v4750 then
                                                        let v4751 : string = "wasm32-unknown-unknown/release"
                                                        v4751
                                                    else
                                                        let v4752 : string = "debug"
                                                        v4752
                                                let v4754 : string = ""
                                                let v4755 : string = $"target/{v4753}/spiral_{v3333}{v4754}"
                                                let v4756 : string = method36(v3417, v4755)
                                                let v4757 : string = ".wasm"
                                                let v4758 : string = $"target/{v4753}/spiral_{v3333}{v4757}"
                                                let v4759 : string = method36(v3417, v4758)
                                                let v4760 : string = ".pdb"
                                                let v4761 : string = $"target/{v4753}/spiral_{v3333}{v4760}"
                                                let v4762 : string = method36(v3417, v4761)
                                                let v4763 : string = ".exe"
                                                let v4764 : string = $"target/{v4753}/spiral_{v3333}{v4763}"
                                                let v4765 : string = method36(v3417, v4764)
                                                let v4766 : string = ".d"
                                                let v4767 : string = $"target/{v4753}/spiral_{v3333}{v4766}"
                                                let v4768 : string = method36(v3417, v4767)
                                                let v4769 : bool = method38(v4756)
                                                let v4770 : bool = method38(v4759)
                                                let v4771 : bool = method38(v4762)
                                                let v4772 : bool = method38(v4765)
                                                let v4773 : bool = method38(v4768)
                                                let v4774 : unit = ()
                                                let v4775 : (unit -> unit) = closure102(v3751, v4768, v4773, v4765, v4772, v4762, v4771, v4759, v4770, v4756, v4769)
                                                let v4776 : unit = (fun () -> v4775 (); v4774) ()
                                                let v4826 : UH5 =
                                                    if v4769 then
                                                        let v4823 : UH5 = UH5_0
                                                        UH5_1(v4756, v4769, v4823)
                                                    else
                                                        UH5_0
                                                let v4828 : UH5 =
                                                    if v4770 then
                                                        UH5_1(v4759, v4770, v4826)
                                                    else
                                                        v4826
                                                let v4830 : UH5 =
                                                    if v4771 then
                                                        UH5_1(v4762, v4771, v4828)
                                                    else
                                                        v4828
                                                let v4832 : UH5 =
                                                    if v4772 then
                                                        UH5_1(v4765, v4772, v4830)
                                                    else
                                                        v4830
                                                let v4834 : UH5 =
                                                    if v4773 then
                                                        UH5_1(v4768, v4773, v4832)
                                                    else
                                                        v4832
                                                method250(v4834)
                                            struct (v4745, v4746, v4747, v4748)
                                    struct (v4835, v4836, v4837, v4838)
                                else
                                    let v4839 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4840 : string = Fable.Core.RustInterop.emitRustExpr v34 v4839 
                                    let v4841 : bool = v4840 = "typescript"
                                    let struct (v6579 : US5, v6580 : US5, v6581 : US5, v6582 : US5) =
                                        if v4841 then
                                            let v4842 : string = method189()
                                            (* run_target_args'
                                            let v4847 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4848 : string = "&*$0"
                                            let v4849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4842 v4848 
                                            let _run_target_args'_v4847 = v4849 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4850 : string = "&*$0"
                                            let v4851 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4842 v4850 
                                            let _run_target_args'_v4847 = v4851 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4852 : string = "&*$0"
                                            let v4853 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4842 v4852 
                                            let _run_target_args'_v4847 = v4853 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4855 : Ref<Str> = v4842 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4847 = v4855 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4859 : Ref<Str> = v4842 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4847 = v4859 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4863 : Ref<Str> = v4842 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4847 = v4863 
                                            #endif
#else
                                            let v4867 : Ref<Str> = v4842 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4847 = v4867 
                                            #endif
                                            let v4870 : Ref<Str> = _run_target_args'_v4847 
                                            let v4876 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v4877 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v4870) v4876 
                                            let v4880 : (std_string_String -> US7) = method23()
                                            let v4881 : US7 option = v4877 |> Option.map v4880 
                                            let v4895 : US7 = US7_1
                                            let v4896 : US7 = v4881 |> Option.defaultValue v4895 
                                            let v4903 : std_string_String =
                                                match v4896 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v4900) -> (* Some *)
                                                    v4900
                                            let v4904 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4905 : string = Fable.Core.RustInterop.emitRustExpr v4903 v4904 
                                            let v4906 : string = method25()
                                            (* run_target_args'
                                            let v4911 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4912 : string = "&*$0"
                                            let v4913 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4906 v4912 
                                            let _run_target_args'_v4911 = v4913 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4914 : string = "&*$0"
                                            let v4915 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4906 v4914 
                                            let _run_target_args'_v4911 = v4915 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4916 : string = "&*$0"
                                            let v4917 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4906 v4916 
                                            let _run_target_args'_v4911 = v4917 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4919 : Ref<Str> = v4906 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4911 = v4919 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4923 : Ref<Str> = v4906 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4911 = v4923 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4927 : Ref<Str> = v4906 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4911 = v4927 
                                            #endif
#else
                                            let v4931 : Ref<Str> = v4906 |> unbox<Ref<Str>>
                                            let _run_target_args'_v4911 = v4931 
                                            #endif
                                            let v4934 : Ref<Str> = _run_target_args'_v4911 
                                            let v4940 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v4941 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v4934) v4940 
                                            let v4944 : (Vec<std_string_String> -> US11) = method26()
                                            let v4945 : US11 option = v4941 |> Option.map v4944 
                                            let v4959 : US11 = US11_1
                                            let v4960 : US11 = v4945 |> Option.defaultValue v4959 
                                            let v4964 : (std_string_String []) = [||]
                                            let v4965 : string = "$0.to_vec()"
                                            let v4966 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4964 v4965 
                                            let v4969 : Vec<std_string_String> =
                                                match v4960 with
                                                | US11_1 -> (* None *)
                                                    v4966
                                                | US11_0(v4967) -> (* Some *)
                                                    v4967
                                            (* run_target_args'
                                            let v4974 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4979 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4980 : string = "std::fs::read(&*$0)"
                                            let v4981 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4905 v4980 
                                            (* run_target_args'
                                            let v4983 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4984 : string = "$0.unwrap()"
                                            let v4985 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4981 v4984 
                                            let _run_target_args'_v4983 = v4985 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4986 : string = "$0.unwrap()"
                                            let v4987 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4981 v4986 
                                            let _run_target_args'_v4983 = v4987 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4988 : string = "$0.unwrap()"
                                            let v4989 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4981 v4988 
                                            let _run_target_args'_v4983 = v4989 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4990 : Vec<uint8> = match v4981 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4983 = v4990 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4991 : Vec<uint8> = match v4981 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4983 = v4991 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4992 : Vec<uint8> = match v4981 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4983 = v4992 
                                            #endif
#else
                                            let v4993 : Vec<uint8> = match v4981 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4983 = v4993 
                                            #endif
                                            let v4994 : Vec<uint8> = _run_target_args'_v4983 
                                            let _run_target_args'_v4979 = v4994 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4998 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4979 = v4998 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5002 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4979 = v5002 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5006 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4979 = v5006 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5010 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4979 = v5010 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5014 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4979 = v5014 
                                            #endif
#else
                                            let v5017 : (uint8 []) = v4905 |> System.IO.File.ReadAllBytes
                                            let v5018 : string = "$0.to_vec()"
                                            let v5019 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5017 v5018 
                                            let _run_target_args'_v4979 = v5019 
                                            #endif
                                            let v5020 : Vec<uint8> = _run_target_args'_v4979 
                                            let v5026 : Vec<uint8> = method27(v5020)
                                            let v5027 : string = "std::string::String::from_utf8($0)"
                                            let v5028 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5026 v5027 
                                            (* run_target_args'
                                            let v5030 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5031 : string = "$0.unwrap()"
                                            let v5032 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5028 v5031 
                                            let _run_target_args'_v5030 = v5032 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5033 : string = "$0.unwrap()"
                                            let v5034 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5028 v5033 
                                            let _run_target_args'_v5030 = v5034 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5035 : string = "$0.unwrap()"
                                            let v5036 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5028 v5035 
                                            let _run_target_args'_v5030 = v5036 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5037 : std_string_String = match v5028 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5030 = v5037 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5038 : std_string_String = match v5028 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5030 = v5038 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5039 : std_string_String = match v5028 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5030 = v5039 
                                            #endif
#else
                                            let v5040 : std_string_String = match v5028 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5030 = v5040 
                                            #endif
                                            let v5041 : std_string_String = _run_target_args'_v5030 
                                            let v5044 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5045 : string = Fable.Core.RustInterop.emitRustExpr v5041 v5044 
                                            let _run_target_args'_v4974 = v5045 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5047 : string = null |> unbox<string>
                                            let _run_target_args'_v4974 = v5047 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5051 : string = null |> unbox<string>
                                            let _run_target_args'_v4974 = v5051 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5055 : string = null |> unbox<string>
                                            let _run_target_args'_v4974 = v5055 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5059 : string = null |> unbox<string>
                                            let _run_target_args'_v4974 = v5059 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5063 : string = null |> unbox<string>
                                            let _run_target_args'_v4974 = v5063 
                                            #endif
#else
                                            let v5066 : string = v4905 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4974 = v5066 
                                            #endif
                                            let v5067 : string = _run_target_args'_v4974 
                                            let v5075 : string = "ts"
                                            let v5076 : string = $"%A{struct (v5075, v5067)}"
                                            let v5079 : string = method29(v5076)
                                            let v5080 : string = method34()
                                            let v5081 : US5 = method35(v5080)
                                            let v5087 : US5 =
                                                match v5081 with
                                                | US5_1 -> (* None *)
                                                    let v5084 : string = __SOURCE_DIRECTORY__
                                                    method35(v5084)
                                                | US5_0(v5082) -> (* Some *)
                                                    US5_0(v5082)
                                            let v5093 : US5 =
                                                match v5087 with
                                                | US5_1 -> (* None *)
                                                    let v5090 : string = "/workspaces"
                                                    method35(v5090)
                                                | US5_0(v5088) -> (* Some *)
                                                    US5_0(v5088)
                                            let v5097 : string =
                                                match v5093 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v5094) -> (* Some *)
                                                    v5094
                                            let v5098 : string = method55(v5097)
                                            let v5099 : bool = "deps" = v5098
                                            let v5110 : string =
                                                if v5099 then
                                                    let v5100 : string option = method41(v5097)
                                                    let v5102 : string = v5100 |> Option.get
                                                    let v5105 : US5 = method35(v5102)
                                                    match v5105 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v5106) -> (* Some *)
                                                        v5106
                                                else
                                                    v5097
                                            let v5111 : string = "polyglot"
                                            let v5112 : string = method36(v5110, v5111)
                                            let v5113 : string = method34()
                                            let v5115 : (unit -> string) = v5113.ToLower
                                            let v5116 : string = v5115 ()
                                            let v5120 : (unit -> string) = v5112.ToLower
                                            let v5121 : string = v5120 ()
                                            let v5125 : bool = v5116.StartsWith (v5121, false, null)
                                            let v5130 : US13 =
                                                if v5125 then
                                                    US13_1(v5121)
                                                else
                                                    US13_0(v5121)
                                            let v5142 : Result<string, string> =
                                                match v5130 with
                                                | US13_1(v5136) -> (* Error *)
                                                    let v5138 : Result<string, string> = Error v5136 
                                                    v5138
                                                | US13_0(v5131) -> (* Ok *)
                                                    let v5133 : Result<string, string> = Ok v5131 
                                                    v5133
                                            let v5143 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v5144 : bool = Fable.Core.RustInterop.emitRustExpr v5142 v5143 
                                            let v5145 : string = "x"
                                            let v5146 : string = Fable.Core.RustInterop.emitRustExpr () v5145 
                                            let v5147 : string = "true; $0 })"
                                            let v5148 : bool = Fable.Core.RustInterop.emitRustExpr v5146 v5147 
                                            let v5149 : string = "_result_unwrap_or_else"
                                            let v5150 : string = Fable.Core.RustInterop.emitRustExpr () v5149 
                                            let v5151 : string = "spiral"
                                            let v5152 : US41 = US41_1
                                            let v5153 : US42 = US42_0(v5152)
                                            let v5154 : US5 = US5_0(v5079)
                                            let v5155 : string = method209(v5154, v5151, v5153, v5150)
                                            let v5156 : string = "Fable.Core"
                                            let v5157 : string = "4.3.0"
                                            let v5158 : UH4 = UH4_0
                                            let v5159 : UH4 = UH4_1(v5156, v5157, v5158)
                                            let v5160 : UH2 = UH2_0
                                            let v5161 : string = method210(v5067, v5151, v5160, v5159, v5155, v5150)
                                            let v5162 : string = "lib/typescript/fable/fable_modules"
                                            let v5163 : string = method36(v5150, v5162)
                                            let v5164 : string = $"fable-library-{v5075}"
                                            let v5165 : string = method255(v5164)
                                            let v5166 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v5167 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v5163 v5166 
                                            let v5168 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v5169 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure106(v5164)
                                            let v5170 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v5167, v5169) v5168 
                                            let v5171 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method259(v5165)
                                            let v5172 : string = "futures::stream::StreamExt::filter_map(v5170, |x| async { v5171(x) })"
                                            let v5173 : _ = Fable.Core.RustInterop.emitRustExpr () v5172 
                                            let v5174 : string = "Box::pin(futures::stream::StreamExt::collect(v5173))"
                                            let v5175 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v5174 
                                            let v5176 : string = "v5175.await"
                                            let v5177 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v5176 
                                            let v5178 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v5179 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5177 v5178 
                                            let v5180 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v5181 : (struct (string * string) -> struct (string * string)) = closure114()
                                            let v5182 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v5179, v5181) v5180 
                                            let v5183 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v5184 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5182 v5183 
                                            let v5185 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v5186 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v5184 v5185 
                                            let v5187 : struct (string * string) option = v5186 |> Array.tryItem 0 
                                            let v5190 : (struct (string * string) -> US51) = method264()
                                            let v5191 : US51 option = v5187 |> Option.map v5190 
                                            let v5206 : US51 = US51_1
                                            let v5207 : US51 = v5191 |> Option.defaultValue v5206 
                                            let v5211 : unit = ()
                                            let v5212 : (unit -> unit) = closure116(v5207)
                                            let v5213 : unit = (fun () -> v5212 (); v5211) ()
                                            method267(v5155, v5163, v5207)
                                            let v5260 : US39 = US39_1
                                            let struct (v5261 : int32, v5262 : string) = method219(v5260, v5155, v5075, v5161, v5130)
                                            method267(v5155, v5163, v5207)
                                            let v5264 : bool = v5261 <> 0 
                                            let struct (v5749 : US5, v5750 : US5, v5751 : US5, v5752 : US5) =
                                                if v5264 then
                                                    let v5267 : unit = ()
                                                    let v5268 : (unit -> unit) = closure117(v5262, v5261)
                                                    let v5269 : unit = (fun () -> v5268 (); v5267) ()
                                                    let v5316 : US5 = US5_0(v5075)
                                                    let v5317 : US5 = US5_1
                                                    let v5318 : US5 = US5_1
                                                    let v5319 : US5 = US5_0(v5262)
                                                    struct (v5316, v5317, v5318, v5319)
                                                else
                                                    let v5320 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v5321 : bool = Fable.Core.RustInterop.emitRustExpr v4969 v5320 
                                                    let v5322 : string = "x"
                                                    let v5323 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5322 
                                                    let v5324 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5325 : string = Fable.Core.RustInterop.emitRustExpr v5323 v5324 
                                                    let v5328 : string = "="
                                                    let v5329 : bool = v5325.Contains v5328 
                                                    let v5333 : string =
                                                        if v5329 then
                                                            v5325
                                                        else
                                                            let v5332 : string = $"\"{v5325}\":\"*\""
                                                            v5332
                                                    let v5334 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v5335 : bool = Fable.Core.RustInterop.emitRustExpr v5333 v5334 
                                                    let v5336 : string = "_vec_map"
                                                    let v5337 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5336 
                                                    let v5338 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v5339 : (string []) = Fable.Core.RustInterop.emitRustExpr v5337 v5338 
                                                    let v5344 : unit = ()
                                                    let _let'_v5344 =
                                                        seq {
                                                            for i = 0 to v5339.Length - 1 do yield v5339.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v5347 : string seq = _let'_v5344 
                                                    let v5355 : (string -> (string seq -> string)) = String.concat
                                                    let v5356 : string = ",\n"
                                                    let v5357 : (string seq -> string) = v5355 v5356
                                                    let v5358 : string = v5357 v5347
                                                    let v5361 : string = $"{{"
                                                    let v5362 : string = $"  \"name\": \"spiral_{v5079}\","
                                                    let v5363 : string = v5361 + v5362 
                                                    let v5364 : string = $"  \"dependencies\": {{"
                                                    let v5365 : string = v5363 + v5364 
                                                    let v5366 : string = v5365 + v5358 
                                                    let v5367 : string = $"  }},"
                                                    let v5368 : string = v5366 + v5367 
                                                    let v5369 : string = $"    \"devDependencies\": {{"
                                                    let v5370 : string = v5368 + v5369 
                                                    let v5371 : string = $"  }},"
                                                    let v5372 : string = v5370 + v5371 
                                                    let v5373 : string = $"}}"
                                                    let v5374 : string = v5372 + v5373 
                                                    let v5375 : string = "package.json"
                                                    let v5376 : string = method36(v5155, v5375)
                                                    let v5377 : string = "../.."
                                                    let v5378 : string = method36(v5155, v5377)
                                                    let v5379 : string = method36(v5378, v5375)
                                                    method76(v5376, v5374)
                                                    let v5380 : string = ""
                                                    method76(v5379, v5380)
                                                    let v5381 : string = $"{v5151}.{v5075}"
                                                    let v5382 : string = method36(v5155, v5381)
                                                    let v5383 : unit = ()
                                                    let v5384 : (unit -> unit) = closure118(v5382)
                                                    let v5385 : unit = (fun () -> v5384 (); v5383) ()
                                                    (* run_target_args'
                                                    let v5436 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5441 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5442 : string = "std::fs::read(&*$0)"
                                                    let v5443 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5382 v5442 
                                                    (* run_target_args'
                                                    let v5445 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5446 : string = "$0.unwrap()"
                                                    let v5447 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5443 v5446 
                                                    let _run_target_args'_v5445 = v5447 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5448 : string = "$0.unwrap()"
                                                    let v5449 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5443 v5448 
                                                    let _run_target_args'_v5445 = v5449 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5450 : string = "$0.unwrap()"
                                                    let v5451 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5443 v5450 
                                                    let _run_target_args'_v5445 = v5451 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5452 : Vec<uint8> = match v5443 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5445 = v5452 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5453 : Vec<uint8> = match v5443 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5445 = v5453 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5454 : Vec<uint8> = match v5443 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5445 = v5454 
                                                    #endif
#else
                                                    let v5455 : Vec<uint8> = match v5443 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5445 = v5455 
                                                    #endif
                                                    let v5456 : Vec<uint8> = _run_target_args'_v5445 
                                                    let _run_target_args'_v5441 = v5456 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5460 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5441 = v5460 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5464 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5441 = v5464 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5468 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5441 = v5468 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5472 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5441 = v5472 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5476 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5441 = v5476 
                                                    #endif
#else
                                                    let v5479 : (uint8 []) = v5382 |> System.IO.File.ReadAllBytes
                                                    let v5480 : string = "$0.to_vec()"
                                                    let v5481 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5479 v5480 
                                                    let _run_target_args'_v5441 = v5481 
                                                    #endif
                                                    let v5482 : Vec<uint8> = _run_target_args'_v5441 
                                                    let v5488 : Vec<uint8> = method27(v5482)
                                                    let v5489 : string = "std::string::String::from_utf8($0)"
                                                    let v5490 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5488 v5489 
                                                    (* run_target_args'
                                                    let v5492 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5493 : string = "$0.unwrap()"
                                                    let v5494 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5490 v5493 
                                                    let _run_target_args'_v5492 = v5494 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5495 : string = "$0.unwrap()"
                                                    let v5496 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5490 v5495 
                                                    let _run_target_args'_v5492 = v5496 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5497 : string = "$0.unwrap()"
                                                    let v5498 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5490 v5497 
                                                    let _run_target_args'_v5492 = v5498 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5499 : std_string_String = match v5490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5492 = v5499 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5500 : std_string_String = match v5490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5492 = v5500 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5501 : std_string_String = match v5490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5492 = v5501 
                                                    #endif
#else
                                                    let v5502 : std_string_String = match v5490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5492 = v5502 
                                                    #endif
                                                    let v5503 : std_string_String = _run_target_args'_v5492 
                                                    let v5506 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5507 : string = Fable.Core.RustInterop.emitRustExpr v5503 v5506 
                                                    let _run_target_args'_v5436 = v5507 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5509 : string = null |> unbox<string>
                                                    let _run_target_args'_v5436 = v5509 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5513 : string = null |> unbox<string>
                                                    let _run_target_args'_v5436 = v5513 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5517 : string = null |> unbox<string>
                                                    let _run_target_args'_v5436 = v5517 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5521 : string = null |> unbox<string>
                                                    let _run_target_args'_v5436 = v5521 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5525 : string = null |> unbox<string>
                                                    let _run_target_args'_v5436 = v5525 
                                                    #endif
#else
                                                    let v5528 : string = v5382 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5436 = v5528 
                                                    #endif
                                                    let v5529 : string = _run_target_args'_v5436 
                                                    let v5537 : string = "// spiral.process_typescript"
                                                    let v5538 : bool = v5529.Contains v5537 
                                                    let v5547 : string =
                                                        if v5538 then
                                                            v5529
                                                        else
                                                            let v5541 : string = $"\"./fable_modules/fable-library-ts.{v5207}/"
                                                            let v5542 : string = $"\"{v5150}/lib/typescript/fable/fable_modules/fable-library-ts.{v5207}/"
                                                            let v5543 : string = v5529.Replace (v5541, v5542)
                                                            let v5544 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v5545 : string = " defaultOf::<()>();"
                                                            method66(v5544, v5545, v5543)
                                                    let v5548 : bool = v5538 = false
                                                    if v5548 then
                                                        let v5549 : string = $"{v5547}\n\n{v5537}\n"
                                                        method76(v5382, v5549)
                                                    let v5550 : string = $"bun run \"{v5382}\""
                                                    let v5551 : string = "PATH"
                                                    let v5552 : string = method3(v5551)
                                                    let v5553 : bool = v5552 = ""
                                                    let v5592 : US5 =
                                                        if v5553 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v5559 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v5560 : string = "cfg!(windows)"
                                                            let v5561 : bool = Fable.Core.RustInterop.emitRustExpr () v5560 
                                                            let _run_target_args'_v5559 = v5561 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v5562 : string = "cfg!(windows)"
                                                            let v5563 : bool = Fable.Core.RustInterop.emitRustExpr () v5562 
                                                            let _run_target_args'_v5559 = v5563 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v5564 : string = "cfg!(windows)"
                                                            let v5565 : bool = Fable.Core.RustInterop.emitRustExpr () v5564 
                                                            let _run_target_args'_v5559 = v5565 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v5566 : US3 = US3_0
                                                            let v5567 : US4 = US4_4(v5566)
                                                            let v5568 : string = $"platform.is_windows / target: {v5567}"
                                                            let v5569 : bool = failwith<bool> v5568
                                                            let _run_target_args'_v5559 = v5569 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v5570 : US3 = US3_0
                                                            let v5571 : US4 = US4_5(v5570)
                                                            let v5572 : string = $"platform.is_windows / target: {v5571}"
                                                            let v5573 : bool = failwith<bool> v5572
                                                            let _run_target_args'_v5559 = v5573 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v5574 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5575 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5576 : bool = v5575 v5574
                                                            let _run_target_args'_v5559 = v5576 
                                                            #endif
#else
                                                            let v5577 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v5578 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v5579 : bool = v5578 v5577
                                                            let _run_target_args'_v5559 = v5579 
                                                            #endif
                                                            let v5580 : bool = _run_target_args'_v5559 
                                                            let v5588 : string =
                                                                if v5580 then
                                                                    let v5586 : string = ";"
                                                                    v5586
                                                                else
                                                                    let v5587 : string = ":"
                                                                    v5587
                                                            let v5589 : string = "~/.bun/bin"
                                                            let v5590 : string = $"{v5589}{v5588}{v5552}"
                                                            US5_0(v5590)
                                                    let v5598 : UH4 =
                                                        match v5592 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v5593) -> (* Some *)
                                                            let v5594 : UH4 = UH4_0
                                                            UH4_1(v5551, v5593, v5594)
                                                    let v5599 : string = "TRACE_LEVEL"
                                                    let v5600 : string = "Verbose"
                                                    let v5601 : UH4 = UH4_0
                                                    let v5602 : UH4 = UH4_1(v5599, v5600, v5601)
                                                    let v5603 : UH4 = method271(v5598, v5602)
                                                    let v5604 : struct (string * string) list = []
                                                    let v5605 : struct (string * string) list = method272(v5603, v5604)
                                                    let v5607 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v5608 : (struct (string * string) []) = v5607 v5605
                                                    let v5611 : System.Threading.CancellationToken option = None
                                                    let v5612 : (struct (string * string) []) = [||]
                                                    let v5613 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v5614 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v5615 : string option = None
                                                    let v5627 : Result<string, string> =
                                                        match v5130 with
                                                        | US13_1(v5621) -> (* Error *)
                                                            let v5623 : Result<string, string> = Error v5621 
                                                            v5623
                                                        | US13_0(v5616) -> (* Ok *)
                                                            let v5618 : Result<string, string> = Ok v5616 
                                                            v5618
                                                    (* run_target_args'
                                                    let v5629 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5630 : string = "$0.ok()"
                                                    let v5631 : string option = Fable.Core.RustInterop.emitRustExpr v5627 v5630 
                                                    let _run_target_args'_v5629 = v5631 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5632 : string = "$0.ok()"
                                                    let v5633 : string option = Fable.Core.RustInterop.emitRustExpr v5627 v5632 
                                                    let _run_target_args'_v5629 = v5633 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5634 : string = "$0.ok()"
                                                    let v5635 : string option = Fable.Core.RustInterop.emitRustExpr v5627 v5634 
                                                    let _run_target_args'_v5629 = v5635 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5636 : string option = match v5627 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5629 = v5636 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5637 : string option = match v5627 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5629 = v5637 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5638 : string option = match v5627 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5629 = v5638 
                                                    #endif
#else
                                                    let v5639 : string option = match v5627 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v5629 = v5639 
                                                    #endif
                                                    let v5640 : string option = _run_target_args'_v5629 
                                                    let v5643 : bool = true
                                                    let struct (v5644 : int32, v5645 : string) = method101(v5550, v5611, v5608, v5613, v5614, v5643, v5640)
                                                    let v5646 : int32 = v5608.Length
                                                    let v5647 : (string []) = Array.zeroCreate<string> (v5646)
                                                    let v5648 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v5646, v5648) do
                                                        let v5650 : int32 = v5648.l0
                                                        let struct (v5651 : string, v5652 : string) = v5608.[int v5650]
                                                        let v5653 : string = $"$env:{v5651}=''{v5652}''"
                                                        v5647.[int v5650] <- v5653
                                                        let v5654 : int32 = v5650 + 1
                                                        v5648.l0 <- v5654
                                                        ()
                                                    let v5656 : string seq = v5647 |> Seq.ofArray
                                                    let v5661 : (string -> (string seq -> string)) = String.concat
                                                    let v5662 : string = ";"
                                                    let v5663 : (string seq -> string) = v5661 v5662
                                                    let v5664 : string = v5663 v5656
                                                    let v5667 : string = $"pwsh -c '{v5664}; {v5550}'"
                                                    let v5668 : bool = v5644 = 0
                                                    let struct (v5745 : US5, v5746 : US5, v5747 : US5, v5748 : US5) =
                                                        if v5668 then
                                                            let v5669 : (string -> US5) = closure69()
                                                            let v5670 : (unit -> string) = closure119(v5645)
                                                            let v5671 : (exn -> US5) = closure120(v5382, v5645, v5667)
                                                            let v5673 : US5 = US5_1
                                                            let result = ref v5673
                                                            try
                                                                result.Value <- v5670 () |> v5669 
                                                            with ex ->
                                                                result.Value <- v5671 ex 
                                                            let v5674 : US5 = result.Value
                                                            let v5685 : string option =
                                                                match v5674 with
                                                                | US5_1 -> (* None *)
                                                                    let v5683 : string option = None
                                                                    v5683
                                                                | US5_0(v5678) -> (* Some *)
                                                                    let v5680 : string option = Some v5678 
                                                                    v5680
                                                            let v5686 : string = "$0.unwrap()"
                                                            let v5687 : string = Fable.Core.RustInterop.emitRustExpr v5685 v5686 
                                                            let v5688 : US5 = US5_0(v5075)
                                                            let v5689 : US5 = US5_0(v5547)
                                                            let v5690 : US5 = US5_0(v5382)
                                                            let v5691 : US5 = US5_0(v5687)
                                                            struct (v5688, v5689, v5690, v5691)
                                                        else
                                                            let v5692 : unit = ()
                                                            let v5693 : (unit -> unit) = closure122(v5382, v5645, v5644, v5667)
                                                            let v5694 : unit = (fun () -> v5693 (); v5692) ()
                                                            let v5741 : US5 = US5_0(v5075)
                                                            let v5742 : US5 = US5_1
                                                            let v5743 : US5 = US5_1
                                                            let v5744 : US5 = US5_1
                                                            struct (v5741, v5742, v5743, v5744)
                                                    struct (v5745, v5746, v5747, v5748)
                                            struct (v5749, v5750, v5751, v5752)
                                        else
                                            let v5753 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5754 : string = Fable.Core.RustInterop.emitRustExpr v34 v5753 
                                            let v5755 : bool = v5754 = "python"
                                            let struct (v6575 : US5, v6576 : US5, v6577 : US5, v6578 : US5) =
                                                if v5755 then
                                                    let v5756 : string = method189()
                                                    (* run_target_args'
                                                    let v5761 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5762 : string = "&*$0"
                                                    let v5763 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5756 v5762 
                                                    let _run_target_args'_v5761 = v5763 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5764 : string = "&*$0"
                                                    let v5765 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5756 v5764 
                                                    let _run_target_args'_v5761 = v5765 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5766 : string = "&*$0"
                                                    let v5767 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5756 v5766 
                                                    let _run_target_args'_v5761 = v5767 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5769 : Ref<Str> = v5756 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5761 = v5769 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5773 : Ref<Str> = v5756 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5761 = v5773 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5777 : Ref<Str> = v5756 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5761 = v5777 
                                                    #endif
#else
                                                    let v5781 : Ref<Str> = v5756 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5761 = v5781 
                                                    #endif
                                                    let v5784 : Ref<Str> = _run_target_args'_v5761 
                                                    let v5790 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v5791 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v35, v5784) v5790 
                                                    let v5794 : (std_string_String -> US7) = method23()
                                                    let v5795 : US7 option = v5791 |> Option.map v5794 
                                                    let v5809 : US7 = US7_1
                                                    let v5810 : US7 = v5795 |> Option.defaultValue v5809 
                                                    let v5817 : std_string_String =
                                                        match v5810 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v5814) -> (* Some *)
                                                            v5814
                                                    let v5818 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5819 : string = Fable.Core.RustInterop.emitRustExpr v5817 v5818 
                                                    let v5820 : string = method25()
                                                    (* run_target_args'
                                                    let v5825 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5826 : string = "&*$0"
                                                    let v5827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5820 v5826 
                                                    let _run_target_args'_v5825 = v5827 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5828 : string = "&*$0"
                                                    let v5829 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5820 v5828 
                                                    let _run_target_args'_v5825 = v5829 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5830 : string = "&*$0"
                                                    let v5831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5820 v5830 
                                                    let _run_target_args'_v5825 = v5831 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5833 : Ref<Str> = v5820 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5825 = v5833 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5837 : Ref<Str> = v5820 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5825 = v5837 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5841 : Ref<Str> = v5820 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5825 = v5841 
                                                    #endif
#else
                                                    let v5845 : Ref<Str> = v5820 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v5825 = v5845 
                                                    #endif
                                                    let v5848 : Ref<Str> = _run_target_args'_v5825 
                                                    let v5854 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v5855 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v35, v5848) v5854 
                                                    let v5858 : (Vec<std_string_String> -> US11) = method26()
                                                    let v5859 : US11 option = v5855 |> Option.map v5858 
                                                    let v5873 : US11 = US11_1
                                                    let v5874 : US11 = v5859 |> Option.defaultValue v5873 
                                                    let v5878 : (std_string_String []) = [||]
                                                    let v5879 : string = "$0.to_vec()"
                                                    let v5880 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5878 v5879 
                                                    let v5883 : Vec<std_string_String> =
                                                        match v5874 with
                                                        | US11_1 -> (* None *)
                                                            v5880
                                                        | US11_0(v5881) -> (* Some *)
                                                            v5881
                                                    let v5884 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v5889 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v5894 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5895 : string = "std::fs::read(&*$0)"
                                                    let v5896 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5819 v5895 
                                                    (* run_target_args'
                                                    let v5898 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5899 : string = "$0.unwrap()"
                                                    let v5900 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5896 v5899 
                                                    let _run_target_args'_v5898 = v5900 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5901 : string = "$0.unwrap()"
                                                    let v5902 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5896 v5901 
                                                    let _run_target_args'_v5898 = v5902 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5903 : string = "$0.unwrap()"
                                                    let v5904 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5896 v5903 
                                                    let _run_target_args'_v5898 = v5904 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5905 : Vec<uint8> = match v5896 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5898 = v5905 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5906 : Vec<uint8> = match v5896 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5898 = v5906 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5907 : Vec<uint8> = match v5896 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5898 = v5907 
                                                    #endif
#else
                                                    let v5908 : Vec<uint8> = match v5896 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5898 = v5908 
                                                    #endif
                                                    let v5909 : Vec<uint8> = _run_target_args'_v5898 
                                                    let _run_target_args'_v5894 = v5909 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5913 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5894 = v5913 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5917 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5894 = v5917 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5921 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5894 = v5921 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5925 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5894 = v5925 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5929 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v5894 = v5929 
                                                    #endif
#else
                                                    let v5932 : (uint8 []) = v5819 |> System.IO.File.ReadAllBytes
                                                    let v5933 : string = "$0.to_vec()"
                                                    let v5934 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5932 v5933 
                                                    let _run_target_args'_v5894 = v5934 
                                                    #endif
                                                    let v5935 : Vec<uint8> = _run_target_args'_v5894 
                                                    let v5941 : Vec<uint8> = method27(v5935)
                                                    let v5942 : string = "std::string::String::from_utf8($0)"
                                                    let v5943 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5941 v5942 
                                                    (* run_target_args'
                                                    let v5945 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v5946 : string = "$0.unwrap()"
                                                    let v5947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5943 v5946 
                                                    let _run_target_args'_v5945 = v5947 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5948 : string = "$0.unwrap()"
                                                    let v5949 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5943 v5948 
                                                    let _run_target_args'_v5945 = v5949 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5950 : string = "$0.unwrap()"
                                                    let v5951 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5943 v5950 
                                                    let _run_target_args'_v5945 = v5951 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5952 : std_string_String = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5945 = v5952 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5953 : std_string_String = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5945 = v5953 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5954 : std_string_String = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5945 = v5954 
                                                    #endif
#else
                                                    let v5955 : std_string_String = match v5943 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v5945 = v5955 
                                                    #endif
                                                    let v5956 : std_string_String = _run_target_args'_v5945 
                                                    let v5959 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v5960 : string = Fable.Core.RustInterop.emitRustExpr v5956 v5959 
                                                    let _run_target_args'_v5889 = v5960 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v5962 : string = null |> unbox<string>
                                                    let _run_target_args'_v5889 = v5962 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v5966 : string = null |> unbox<string>
                                                    let _run_target_args'_v5889 = v5966 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v5970 : string = null |> unbox<string>
                                                    let _run_target_args'_v5889 = v5970 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v5974 : string = null |> unbox<string>
                                                    let _run_target_args'_v5889 = v5974 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v5978 : string = null |> unbox<string>
                                                    let _run_target_args'_v5889 = v5978 
                                                    #endif
#else
                                                    let v5981 : string = v5819 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v5889 = v5981 
                                                    #endif
                                                    let v5982 : string = _run_target_args'_v5889 
                                                    let v5990 : string = "py"
                                                    let v5991 : string = $"%A{struct (v5990, v5982)}"
                                                    let v5994 : string = method29(v5991)
                                                    let v5995 : string = method34()
                                                    let v5996 : US5 = method35(v5995)
                                                    let v6002 : US5 =
                                                        match v5996 with
                                                        | US5_1 -> (* None *)
                                                            let v5999 : string = __SOURCE_DIRECTORY__
                                                            method35(v5999)
                                                        | US5_0(v5997) -> (* Some *)
                                                            US5_0(v5997)
                                                    let v6008 : US5 =
                                                        match v6002 with
                                                        | US5_1 -> (* None *)
                                                            let v6005 : string = "/workspaces"
                                                            method35(v6005)
                                                        | US5_0(v6003) -> (* Some *)
                                                            US5_0(v6003)
                                                    let v6012 : string =
                                                        match v6008 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v6009) -> (* Some *)
                                                            v6009
                                                    let v6013 : string = method55(v6012)
                                                    let v6014 : bool = "deps" = v6013
                                                    let v6025 : string =
                                                        if v6014 then
                                                            let v6015 : string option = method41(v6012)
                                                            let v6017 : string = v6015 |> Option.get
                                                            let v6020 : US5 = method35(v6017)
                                                            match v6020 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v6021) -> (* Some *)
                                                                v6021
                                                        else
                                                            v6012
                                                    let v6026 : string = "polyglot"
                                                    let v6027 : string = method36(v6025, v6026)
                                                    let v6028 : string = method34()
                                                    let v6030 : (unit -> string) = v6028.ToLower
                                                    let v6031 : string = v6030 ()
                                                    let v6035 : (unit -> string) = v6027.ToLower
                                                    let v6036 : string = v6035 ()
                                                    let v6040 : bool = v6031.StartsWith (v6036, false, null)
                                                    let v6045 : US13 =
                                                        if v6040 then
                                                            US13_1(v6036)
                                                        else
                                                            US13_0(v6036)
                                                    let v6057 : Result<string, string> =
                                                        match v6045 with
                                                        | US13_1(v6051) -> (* Error *)
                                                            let v6053 : Result<string, string> = Error v6051 
                                                            v6053
                                                        | US13_0(v6046) -> (* Ok *)
                                                            let v6048 : Result<string, string> = Ok v6046 
                                                            v6048
                                                    let v6058 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v6059 : bool = Fable.Core.RustInterop.emitRustExpr v6057 v6058 
                                                    let v6060 : string = "x"
                                                    let v6061 : string = Fable.Core.RustInterop.emitRustExpr () v6060 
                                                    let v6062 : string = "true; $0 })"
                                                    let v6063 : bool = Fable.Core.RustInterop.emitRustExpr v6061 v6062 
                                                    let v6064 : string = "_result_unwrap_or_else"
                                                    let v6065 : string = Fable.Core.RustInterop.emitRustExpr () v6064 
                                                    let v6066 : string = "spiral"
                                                    let v6067 : US41 = US41_2
                                                    let v6068 : US42 = US42_0(v6067)
                                                    let v6069 : US5 = US5_0(v5994)
                                                    let v6070 : string = method209(v6069, v6066, v6068, v6065)
                                                    let v6071 : string = "Fable.Core"
                                                    let v6072 : string = "4.3.0"
                                                    let v6073 : UH4 = UH4_0
                                                    let v6074 : UH4 = UH4_1(v6071, v6072, v6073)
                                                    let v6075 : UH2 = UH2_0
                                                    let v6076 : string = method210(v5982, v6066, v6075, v6074, v6070, v6065)
                                                    let v6077 : string = "lib/python/fable/fable_modules"
                                                    let v6078 : string = method36(v6065, v6077)
                                                    let v6079 : string = $"fable_library"
                                                    let v6080 : string = method36(v6078, v6079)
                                                    let v6081 : string = $"fable_modules/fable_library"
                                                    let v6082 : string = method36(v6070, v6081)
                                                    method218(v6080, v6082)
                                                    let v6083 : US39 = US39_1
                                                    let struct (v6084 : int32, v6085 : string) = method219(v6083, v6070, v5990, v6076, v6045)
                                                    let v6087 : bool = v6084 <> 0 
                                                    let struct (v6518 : US5, v6519 : US5, v6520 : US5, v6521 : US5) =
                                                        if v6087 then
                                                            let v6090 : unit = ()
                                                            let v6091 : (unit -> unit) = closure123(v6085, v6084)
                                                            let v6092 : unit = (fun () -> v6091 (); v6090) ()
                                                            let v6139 : US5 = US5_0(v5990)
                                                            let v6140 : US5 = US5_1
                                                            let v6141 : US5 = US5_1
                                                            let v6142 : US5 = US5_0(v6085)
                                                            struct (v6139, v6140, v6141, v6142)
                                                        else
                                                            let v6143 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v6144 : bool = Fable.Core.RustInterop.emitRustExpr v5883 v6143 
                                                            let v6145 : string = "x"
                                                            let v6146 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6145 
                                                            let v6147 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v6148 : string = Fable.Core.RustInterop.emitRustExpr v6146 v6147 
                                                            let v6151 : string = "="
                                                            let v6152 : bool = v6148.Contains v6151 
                                                            let v6156 : string =
                                                                if v6152 then
                                                                    v6148
                                                                else
                                                                    let v6155 : string = $"\"{v6148}\":\"*\""
                                                                    v6155
                                                            let v6157 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v6158 : bool = Fable.Core.RustInterop.emitRustExpr v6156 v6157 
                                                            let v6159 : string = "_vec_map"
                                                            let v6160 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6159 
                                                            let v6161 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v6162 : (string []) = Fable.Core.RustInterop.emitRustExpr v6160 v6161 
                                                            let v6167 : unit = ()
                                                            let _let'_v6167 =
                                                                seq {
                                                                    for i = 0 to v6162.Length - 1 do yield v6162.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v6170 : string seq = _let'_v6167 
                                                            let v6178 : (string -> (string seq -> string)) = String.concat
                                                            let v6179 : string = ",\n"
                                                            let v6180 : (string seq -> string) = v6178 v6179
                                                            let v6181 : string = v6180 v6170
                                                            let v6184 : string = $"{{"
                                                            let v6185 : string = $"  \"name\": \"spiral_{v5994}\","
                                                            let v6186 : string = v6184 + v6185 
                                                            let v6187 : string = $"  \"dependencies\": {{"
                                                            let v6188 : string = v6186 + v6187 
                                                            let v6189 : string = v6188 + v6181 
                                                            let v6190 : string = $"  }},"
                                                            let v6191 : string = v6189 + v6190 
                                                            let v6192 : string = $"    \"devDependencies\": {{"
                                                            let v6193 : string = v6191 + v6192 
                                                            let v6194 : string = $"  }},"
                                                            let v6195 : string = v6193 + v6194 
                                                            let v6196 : string = $"}}"
                                                            let v6197 : string = v6195 + v6196 
                                                            let v6198 : string = "package.json"
                                                            let v6199 : string = method36(v6070, v6198)
                                                            let v6200 : string = "../.."
                                                            let v6201 : string = method36(v6070, v6200)
                                                            let v6202 : string = method36(v6201, v6198)
                                                            method76(v6199, v6197)
                                                            let v6203 : string = ""
                                                            method76(v6202, v6203)
                                                            let v6204 : string = $"{v6066}.{v5990}"
                                                            let v6205 : string = method36(v6070, v6204)
                                                            let v6206 : unit = ()
                                                            let v6207 : (unit -> unit) = closure124(v6205)
                                                            let v6208 : unit = (fun () -> v6207 (); v6206) ()
                                                            (* run_target_args'
                                                            let v6259 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v6264 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6265 : string = "std::fs::read(&*$0)"
                                                            let v6266 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6205 v6265 
                                                            (* run_target_args'
                                                            let v6268 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6269 : string = "$0.unwrap()"
                                                            let v6270 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6266 v6269 
                                                            let _run_target_args'_v6268 = v6270 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6271 : string = "$0.unwrap()"
                                                            let v6272 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6266 v6271 
                                                            let _run_target_args'_v6268 = v6272 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6273 : string = "$0.unwrap()"
                                                            let v6274 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6266 v6273 
                                                            let _run_target_args'_v6268 = v6274 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6275 : Vec<uint8> = match v6266 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6268 = v6275 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6276 : Vec<uint8> = match v6266 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6268 = v6276 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6277 : Vec<uint8> = match v6266 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6268 = v6277 
                                                            #endif
#else
                                                            let v6278 : Vec<uint8> = match v6266 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6268 = v6278 
                                                            #endif
                                                            let v6279 : Vec<uint8> = _run_target_args'_v6268 
                                                            let _run_target_args'_v6264 = v6279 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6283 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6264 = v6283 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6287 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6264 = v6287 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6291 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6264 = v6291 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6295 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6264 = v6295 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6299 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v6264 = v6299 
                                                            #endif
#else
                                                            let v6302 : (uint8 []) = v6205 |> System.IO.File.ReadAllBytes
                                                            let v6303 : string = "$0.to_vec()"
                                                            let v6304 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6302 v6303 
                                                            let _run_target_args'_v6264 = v6304 
                                                            #endif
                                                            let v6305 : Vec<uint8> = _run_target_args'_v6264 
                                                            let v6311 : Vec<uint8> = method27(v6305)
                                                            let v6312 : string = "std::string::String::from_utf8($0)"
                                                            let v6313 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6311 v6312 
                                                            (* run_target_args'
                                                            let v6315 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6316 : string = "$0.unwrap()"
                                                            let v6317 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6313 v6316 
                                                            let _run_target_args'_v6315 = v6317 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6318 : string = "$0.unwrap()"
                                                            let v6319 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6313 v6318 
                                                            let _run_target_args'_v6315 = v6319 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6320 : string = "$0.unwrap()"
                                                            let v6321 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6313 v6320 
                                                            let _run_target_args'_v6315 = v6321 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6322 : std_string_String = match v6313 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6315 = v6322 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6323 : std_string_String = match v6313 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6315 = v6323 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6324 : std_string_String = match v6313 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6315 = v6324 
                                                            #endif
#else
                                                            let v6325 : std_string_String = match v6313 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v6315 = v6325 
                                                            #endif
                                                            let v6326 : std_string_String = _run_target_args'_v6315 
                                                            let v6329 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v6330 : string = Fable.Core.RustInterop.emitRustExpr v6326 v6329 
                                                            let _run_target_args'_v6259 = v6330 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6332 : string = null |> unbox<string>
                                                            let _run_target_args'_v6259 = v6332 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6336 : string = null |> unbox<string>
                                                            let _run_target_args'_v6259 = v6336 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6340 : string = null |> unbox<string>
                                                            let _run_target_args'_v6259 = v6340 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6344 : string = null |> unbox<string>
                                                            let _run_target_args'_v6259 = v6344 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6348 : string = null |> unbox<string>
                                                            let _run_target_args'_v6259 = v6348 
                                                            #endif
#else
                                                            let v6351 : string = v6205 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v6259 = v6351 
                                                            #endif
                                                            let v6352 : string = _run_target_args'_v6259 
                                                            let v6360 : string = "# spiral.process_python"
                                                            let v6361 : bool = v6352.Contains v6360 
                                                            let v6373 : string =
                                                                if v6361 then
                                                                    v6352
                                                                else
                                                                    let v6364 : string = "\";\".into()"
                                                                    let v6365 : string = Fable.Core.RustInterop.emitRustExpr () v6364 
                                                                    let v6366 : string = "),)"
                                                                    let v6367 : string = v6366 + v6365 
                                                                    let v6368 : string = "));"
                                                                    let v6369 : string = v6352.Replace (v6367, v6368)
                                                                    let v6370 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v6371 : string = " defaultOf::<()>();"
                                                                    method66(v6370, v6371, v6369)
                                                            let v6374 : bool = v6361 = false
                                                            if v6374 then
                                                                let v6375 : string = $"{v6373}\n\n{v6360}\n"
                                                                method76(v6205, v6375)
                                                            let v6376 : string = $"python \"{v6205}\""
                                                            let v6377 : string = "TRACE_LEVEL"
                                                            let v6378 : string = "Verbose"
                                                            let v6379 : (struct (string * string) []) = [|struct (v6377, v6378)|]
                                                            let v6380 : System.Threading.CancellationToken option = None
                                                            let v6381 : (struct (string * string) []) = [||]
                                                            let v6382 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v6383 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v6384 : string option = None
                                                            let v6396 : Result<string, string> =
                                                                match v6045 with
                                                                | US13_1(v6390) -> (* Error *)
                                                                    let v6392 : Result<string, string> = Error v6390 
                                                                    v6392
                                                                | US13_0(v6385) -> (* Ok *)
                                                                    let v6387 : Result<string, string> = Ok v6385 
                                                                    v6387
                                                            (* run_target_args'
                                                            let v6398 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6399 : string = "$0.ok()"
                                                            let v6400 : string option = Fable.Core.RustInterop.emitRustExpr v6396 v6399 
                                                            let _run_target_args'_v6398 = v6400 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6401 : string = "$0.ok()"
                                                            let v6402 : string option = Fable.Core.RustInterop.emitRustExpr v6396 v6401 
                                                            let _run_target_args'_v6398 = v6402 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6403 : string = "$0.ok()"
                                                            let v6404 : string option = Fable.Core.RustInterop.emitRustExpr v6396 v6403 
                                                            let _run_target_args'_v6398 = v6404 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6405 : string option = match v6396 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6398 = v6405 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6406 : string option = match v6396 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6398 = v6406 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6407 : string option = match v6396 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6398 = v6407 
                                                            #endif
#else
                                                            let v6408 : string option = match v6396 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v6398 = v6408 
                                                            #endif
                                                            let v6409 : string option = _run_target_args'_v6398 
                                                            let v6412 : bool = true
                                                            let struct (v6413 : int32, v6414 : string) = method101(v6376, v6380, v6379, v6382, v6383, v6412, v6409)
                                                            let v6415 : int32 = v6379.Length
                                                            let v6416 : (string []) = Array.zeroCreate<string> (v6415)
                                                            let v6417 : Mut5 = {l0 = 0} : Mut5
                                                            while method32(v6415, v6417) do
                                                                let v6419 : int32 = v6417.l0
                                                                let struct (v6420 : string, v6421 : string) = v6379.[int v6419]
                                                                let v6422 : string = $"$env:{v6420}=''{v6421}''"
                                                                v6416.[int v6419] <- v6422
                                                                let v6423 : int32 = v6419 + 1
                                                                v6417.l0 <- v6423
                                                                ()
                                                            let v6425 : string seq = v6416 |> Seq.ofArray
                                                            let v6430 : (string -> (string seq -> string)) = String.concat
                                                            let v6431 : string = ";"
                                                            let v6432 : (string seq -> string) = v6430 v6431
                                                            let v6433 : string = v6432 v6425
                                                            let v6436 : string = $"pwsh -c '{v6433}; {v6376}'"
                                                            let v6437 : bool = v6413 = 0
                                                            let struct (v6514 : US5, v6515 : US5, v6516 : US5, v6517 : US5) =
                                                                if v6437 then
                                                                    let v6438 : (string -> US5) = closure69()
                                                                    let v6439 : (unit -> string) = closure125(v6414)
                                                                    let v6440 : (exn -> US5) = closure126(v6205, v6414, v6436)
                                                                    let v6442 : US5 = US5_1
                                                                    let result = ref v6442
                                                                    try
                                                                        result.Value <- v6439 () |> v6438 
                                                                    with ex ->
                                                                        result.Value <- v6440 ex 
                                                                    let v6443 : US5 = result.Value
                                                                    let v6454 : string option =
                                                                        match v6443 with
                                                                        | US5_1 -> (* None *)
                                                                            let v6452 : string option = None
                                                                            v6452
                                                                        | US5_0(v6447) -> (* Some *)
                                                                            let v6449 : string option = Some v6447 
                                                                            v6449
                                                                    let v6455 : string = "$0.unwrap()"
                                                                    let v6456 : string = Fable.Core.RustInterop.emitRustExpr v6454 v6455 
                                                                    let v6457 : US5 = US5_0(v5990)
                                                                    let v6458 : US5 = US5_0(v6373)
                                                                    let v6459 : US5 = US5_0(v6205)
                                                                    let v6460 : US5 = US5_0(v6456)
                                                                    struct (v6457, v6458, v6459, v6460)
                                                                else
                                                                    let v6461 : unit = ()
                                                                    let v6462 : (unit -> unit) = closure128(v6205, v6414, v6413, v6436)
                                                                    let v6463 : unit = (fun () -> v6462 (); v6461) ()
                                                                    let v6510 : US5 = US5_0(v5990)
                                                                    let v6511 : US5 = US5_1
                                                                    let v6512 : US5 = US5_1
                                                                    let v6513 : US5 = US5_1
                                                                    struct (v6510, v6511, v6512, v6513)
                                                            struct (v6514, v6515, v6516, v6517)
                                                    struct (v6518, v6519, v6520, v6521)
                                                else
                                                    let v6522 : unit = ()
                                                    let v6523 : (unit -> unit) = closure129(v35, v34)
                                                    let v6524 : unit = (fun () -> v6523 (); v6522) ()
                                                    let v6571 : US5 = US5_1
                                                    let v6572 : US5 = US5_1
                                                    let v6573 : US5 = US5_1
                                                    let v6574 : US5 = US5_1
                                                    struct (v6571, v6572, v6573, v6574)
                                            struct (v6575, v6576, v6577, v6578)
                                    struct (v6579, v6580, v6581, v6582)
                            let v6590 : string =
                                match v6583 with
                                | US5_1 -> (* None *)
                                    let v6588 : string = ""
                                    v6588
                                | US5_0(v6587) -> (* Some *)
                                    v6587
                            let v6591 : string = "extension"
                            let v6595 : string =
                                match v6584 with
                                | US5_1 -> (* None *)
                                    let v6593 : string = ""
                                    v6593
                                | US5_0(v6592) -> (* Some *)
                                    v6592
                            let v6596 : string = "code"
                            let v6600 : string =
                                match v6585 with
                                | US5_1 -> (* None *)
                                    let v6598 : string = ""
                                    v6598
                                | US5_0(v6597) -> (* Some *)
                                    v6597
                            let v6601 : string = "code_path"
                            let v6605 : string =
                                match v6586 with
                                | US5_1 -> (* None *)
                                    let v6603 : string = ""
                                    v6603
                                | US5_0(v6602) -> (* Some *)
                                    v6602
                            let v6606 : string = "output"
                            [|struct (v6591, v6590); struct (v6596, v6595); struct (v6601, v6600); struct (v6606, v6605)|]
        | _ ->
            let v6612 : string = "extension"
            let v6613 : string = ""
            let v6614 : string = "code"
            let v6615 : string = "code_path"
            let v6616 : string = "output"
            [|struct (v6612, v6613); struct (v6614, v6613); struct (v6615, v6613); struct (v6616, v6613)|]
    let v6619 : string = "$0.to_vec()"
    let v6620 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v6618 v6619 
    let v6621 : unit = ()
    let v6622 : string = $"true; let _func1_from_v6621 = Func1::from(move |value| {{ //"
    let v6623 : bool = Fable.Core.RustInterop.emitRustExpr () v6622 
    let v6624 : string = $"value"
    let struct (v6625 : string, v6626 : string) = Fable.Core.RustInterop.emitRustExpr () v6624 
    (* run_target_args'
    let v6631 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6632 : string = "&*$0"
    let v6633 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6625 v6632 
    let _run_target_args'_v6631 = v6633 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6634 : string = "&*$0"
    let v6635 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6625 v6634 
    let _run_target_args'_v6631 = v6635 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6636 : string = "&*$0"
    let v6637 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6625 v6636 
    let _run_target_args'_v6631 = v6637 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6639 : Ref<Str> = v6625 |> unbox<Ref<Str>>
    let _run_target_args'_v6631 = v6639 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6643 : Ref<Str> = v6625 |> unbox<Ref<Str>>
    let _run_target_args'_v6631 = v6643 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6647 : Ref<Str> = v6625 |> unbox<Ref<Str>>
    let _run_target_args'_v6631 = v6647 
    #endif
#else
    let v6651 : Ref<Str> = v6625 |> unbox<Ref<Str>>
    let _run_target_args'_v6631 = v6651 
    #endif
    let v6654 : Ref<Str> = _run_target_args'_v6631 
    (* run_target_args'
    let v6664 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6665 : string = "String::from($0)"
    let v6666 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6654 v6665 
    let _run_target_args'_v6664 = v6666 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6667 : string = "String::from($0)"
    let v6668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6654 v6667 
    let _run_target_args'_v6664 = v6668 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6669 : string = "String::from($0)"
    let v6670 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6654 v6669 
    let _run_target_args'_v6664 = v6670 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6672 : std_string_String = v6654 |> unbox<std_string_String>
    let _run_target_args'_v6664 = v6672 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6676 : std_string_String = v6654 |> unbox<std_string_String>
    let _run_target_args'_v6664 = v6676 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6680 : std_string_String = v6654 |> unbox<std_string_String>
    let _run_target_args'_v6664 = v6680 
    #endif
#else
    let v6684 : std_string_String = v6654 |> unbox<std_string_String>
    let _run_target_args'_v6664 = v6684 
    #endif
    let v6687 : std_string_String = _run_target_args'_v6664 
    (* run_target_args'
    let v6697 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6698 : string = "&*$0"
    let v6699 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6626 v6698 
    let _run_target_args'_v6697 = v6699 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6700 : string = "&*$0"
    let v6701 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6626 v6700 
    let _run_target_args'_v6697 = v6701 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6702 : string = "&*$0"
    let v6703 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6626 v6702 
    let _run_target_args'_v6697 = v6703 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6705 : Ref<Str> = v6626 |> unbox<Ref<Str>>
    let _run_target_args'_v6697 = v6705 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6709 : Ref<Str> = v6626 |> unbox<Ref<Str>>
    let _run_target_args'_v6697 = v6709 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6713 : Ref<Str> = v6626 |> unbox<Ref<Str>>
    let _run_target_args'_v6697 = v6713 
    #endif
#else
    let v6717 : Ref<Str> = v6626 |> unbox<Ref<Str>>
    let _run_target_args'_v6697 = v6717 
    #endif
    let v6720 : Ref<Str> = _run_target_args'_v6697 
    (* run_target_args'
    let v6730 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6731 : string = "String::from($0)"
    let v6732 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6720 v6731 
    let _run_target_args'_v6730 = v6732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6733 : string = "String::from($0)"
    let v6734 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6720 v6733 
    let _run_target_args'_v6730 = v6734 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6735 : string = "String::from($0)"
    let v6736 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6720 v6735 
    let _run_target_args'_v6730 = v6736 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6738 : std_string_String = v6720 |> unbox<std_string_String>
    let _run_target_args'_v6730 = v6738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6742 : std_string_String = v6720 |> unbox<std_string_String>
    let _run_target_args'_v6730 = v6742 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6746 : std_string_String = v6720 |> unbox<std_string_String>
    let _run_target_args'_v6730 = v6746 
    #endif
#else
    let v6750 : std_string_String = v6720 |> unbox<std_string_String>
    let _run_target_args'_v6730 = v6750 
    #endif
    let v6753 : std_string_String = _run_target_args'_v6730 
    let v6760 : (std_string_String * std_string_String) = v6687, v6753 
    let func1_from_result = v6760 //
    let v6763 : _ = func1_from_result
    let v6764 : string = $"true; $0 /*"
    let v6765 : bool = Fable.Core.RustInterop.emitRustExpr v6763 v6764 
    let v6766 : string = $"*/ }}); //"
    let v6767 : bool = Fable.Core.RustInterop.emitRustExpr () v6766 
    let v6768 : string = $"_func1_from_v6621"
    let v6769 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v6768 
    let v6770 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v6771 : (struct (string * string) -> (std_string_String * std_string_String)) = closure74(v6769)
    let v6772 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v6620, v6771) v6770 
    let v6773 : string = "std::collections::BTreeMap::from_iter(v6772.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v6774 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6773 
    let v6775 : string = "serde_json::to_string(&v6774)"
    let v6776 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v6775 
    let v6777 : (serde_json_Error -> string) = method282()
    (* run_target_args'
    let v6779 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6780 : string = "$0.map_err(|x| $1(x))"
    let v6781 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6776, v6777) v6780 
    let _run_target_args'_v6779 = v6781 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6782 : string = "$0.map_err(|x| $1(x))"
    let v6783 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6776, v6777) v6782 
    let _run_target_args'_v6779 = v6783 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6784 : string = "$0.map_err(|x| $1(x))"
    let v6785 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v6776, v6777) v6784 
    let _run_target_args'_v6779 = v6785 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6786 : Result<std_string_String, string> = match v6776 with Ok x -> Ok x | Error x -> Error (v6777 x)
    let _run_target_args'_v6779 = v6786 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6787 : Result<std_string_String, string> = match v6776 with Ok x -> Ok x | Error x -> Error (v6777 x)
    let _run_target_args'_v6779 = v6787 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6788 : Result<std_string_String, string> = match v6776 with Ok x -> Ok x | Error x -> Error (v6777 x)
    let _run_target_args'_v6779 = v6788 
    #endif
#else
    let v6789 : Result<std_string_String, string> = match v6776 with Ok x -> Ok x | Error x -> Error (v6777 x)
    let _run_target_args'_v6779 = v6789 
    #endif
    let v6790 : Result<std_string_String, string> = _run_target_args'_v6779 
    let v6793 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6794 : bool = Fable.Core.RustInterop.emitRustExpr v6790 v6793 
    let v6795 : string = "x"
    let v6796 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6795 
    let v6797 : string = "fable_library_rust::String_::fromString($0)"
    let v6798 : string = Fable.Core.RustInterop.emitRustExpr v6796 v6797 
    let v6799 : string = "true; $0 })"
    let v6800 : bool = Fable.Core.RustInterop.emitRustExpr v6798 v6799 
    let v6801 : string = "_result_map_"
    let v6802 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v6801 
    let v6803 : string = ""
    let v6804 : string = "}"
    let v6805 : string = v6803 + v6804 
    let x = v6802 //
    let v6806 : _ = x
    let v6807 : unit = ()
    (* run_target_args'
    let v6808 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6809 : string = $"true; let _fix_closure_v6807 = $0"
    let v6810 : bool = Fable.Core.RustInterop.emitRustExpr v6806 v6809 
    let _run_target_args'_v6808 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6811 : string = $"true; let _fix_closure_v6807 = $0"
    let v6812 : bool = Fable.Core.RustInterop.emitRustExpr v6806 v6811 
    let _run_target_args'_v6808 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6813 : string = $"true; let _fix_closure_v6807 = $0"
    let v6814 : bool = Fable.Core.RustInterop.emitRustExpr v6806 v6813 
    let _run_target_args'_v6808 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v6808 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v6808 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v6808 = false 
    #endif
#else
    let _run_target_args'_v6808 = false 
    #endif
    let v6815 : bool = _run_target_args'_v6808 
    let v6817 : string = $"true; _fix_closure_v6807 " + v6805 + "); " + v6803 + " // rust.fix_closure'"
    let v6818 : bool = Fable.Core.RustInterop.emitRustExpr () v6817 
    let v6819 : string = "__future_init"
    let v6820 : _ = Fable.Core.RustInterop.emitRustExpr () v6819 
    let v6821 : string = "v6820"
    let v6822 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v6821 
    v6822
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure5(v0)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v90 : clap_Command = method0()
    let v91 : string = "clap::Command::get_matches($0)"
    let v92 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : US0 = v28.l0
    let v94 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v93, v92)
    let v95 : string = "futures::executor::block_on($0)"
    let v96 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v94 v95 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "$0.unwrap()"
    let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "$0.unwrap()"
    let v102 : string = Fable.Core.RustInterop.emitRustExpr v96 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "$0.unwrap()"
    let v104 : string = Fable.Core.RustInterop.emitRustExpr v96 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v107 
    #endif
#else
    let v108 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v108 
    #endif
    let v109 : string = _run_target_args'_v98 
    let v112 : US0 = v28.l0
    let v113 : bool =
        match v112 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v113 then
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure10(v109)
        let v116 : unit = (fun () -> v115 (); v114) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
